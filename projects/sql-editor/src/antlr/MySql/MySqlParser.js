// Generated from MySqlParser.g4 by ANTLR 4.9
// jshint ignore: start
import antlr4 from 'antlr4';
import MySqlParserListener from './MySqlParserListener.js';
import MySqlParserVisitor from './MySqlParserVisitor.js';


const serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786",
    "\u5964\u0003\u0383\u2974\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004",
    "\u0004\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t",
    "\u0007\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004",
    "\f\t\f\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010",
    "\t\u0010\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013",
    "\u0004\u0014\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017",
    "\t\u0017\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a",
    "\u0004\u001b\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e",
    "\t\u001e\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#",
    "\t#\u0004$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004",
    "*\t*\u0004+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u0004",
    "1\t1\u00042\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u0004",
    "8\t8\u00049\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004",
    "?\t?\u0004@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004",
    "F\tF\u0004G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004",
    "M\tM\u0004N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004",
    "T\tT\u0004U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004",
    "[\t[\u0004\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004",
    "b\tb\u0004c\tc\u0004d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004",
    "i\ti\u0004j\tj\u0004k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004",
    "p\tp\u0004q\tq\u0004r\tr\u0004s\ts\u0004t\tt\u0004u\tu\u0004v\tv\u0004",
    "w\tw\u0004x\tx\u0004y\ty\u0004z\tz\u0004{\t{\u0004|\t|\u0004}\t}\u0004",
    "~\t~\u0004\u007f\t\u007f\u0004\u0080\t\u0080\u0004\u0081\t\u0081\u0004",
    "\u0082\t\u0082\u0004\u0083\t\u0083\u0004\u0084\t\u0084\u0004\u0085\t",
    "\u0085\u0004\u0086\t\u0086\u0004\u0087\t\u0087\u0004\u0088\t\u0088\u0004",
    "\u0089\t\u0089\u0004\u008a\t\u008a\u0004\u008b\t\u008b\u0004\u008c\t",
    "\u008c\u0004\u008d\t\u008d\u0004\u008e\t\u008e\u0004\u008f\t\u008f\u0004",
    "\u0090\t\u0090\u0004\u0091\t\u0091\u0004\u0092\t\u0092\u0004\u0093\t",
    "\u0093\u0004\u0094\t\u0094\u0004\u0095\t\u0095\u0004\u0096\t\u0096\u0004",
    "\u0097\t\u0097\u0004\u0098\t\u0098\u0004\u0099\t\u0099\u0004\u009a\t",
    "\u009a\u0004\u009b\t\u009b\u0004\u009c\t\u009c\u0004\u009d\t\u009d\u0004",
    "\u009e\t\u009e\u0004\u009f\t\u009f\u0004\u00a0\t\u00a0\u0004\u00a1\t",
    "\u00a1\u0004\u00a2\t\u00a2\u0004\u00a3\t\u00a3\u0004\u00a4\t\u00a4\u0004",
    "\u00a5\t\u00a5\u0004\u00a6\t\u00a6\u0004\u00a7\t\u00a7\u0004\u00a8\t",
    "\u00a8\u0004\u00a9\t\u00a9\u0004\u00aa\t\u00aa\u0004\u00ab\t\u00ab\u0004",
    "\u00ac\t\u00ac\u0004\u00ad\t\u00ad\u0004\u00ae\t\u00ae\u0004\u00af\t",
    "\u00af\u0004\u00b0\t\u00b0\u0004\u00b1\t\u00b1\u0004\u00b2\t\u00b2\u0004",
    "\u00b3\t\u00b3\u0004\u00b4\t\u00b4\u0004\u00b5\t\u00b5\u0004\u00b6\t",
    "\u00b6\u0004\u00b7\t\u00b7\u0004\u00b8\t\u00b8\u0004\u00b9\t\u00b9\u0004",
    "\u00ba\t\u00ba\u0004\u00bb\t\u00bb\u0004\u00bc\t\u00bc\u0004\u00bd\t",
    "\u00bd\u0004\u00be\t\u00be\u0004\u00bf\t\u00bf\u0004\u00c0\t\u00c0\u0004",
    "\u00c1\t\u00c1\u0004\u00c2\t\u00c2\u0004\u00c3\t\u00c3\u0004\u00c4\t",
    "\u00c4\u0004\u00c5\t\u00c5\u0004\u00c6\t\u00c6\u0004\u00c7\t\u00c7\u0004",
    "\u00c8\t\u00c8\u0004\u00c9\t\u00c9\u0004\u00ca\t\u00ca\u0004\u00cb\t",
    "\u00cb\u0004\u00cc\t\u00cc\u0004\u00cd\t\u00cd\u0004\u00ce\t\u00ce\u0004",
    "\u00cf\t\u00cf\u0004\u00d0\t\u00d0\u0004\u00d1\t\u00d1\u0004\u00d2\t",
    "\u00d2\u0004\u00d3\t\u00d3\u0004\u00d4\t\u00d4\u0004\u00d5\t\u00d5\u0004",
    "\u00d6\t\u00d6\u0004\u00d7\t\u00d7\u0004\u00d8\t\u00d8\u0004\u00d9\t",
    "\u00d9\u0004\u00da\t\u00da\u0004\u00db\t\u00db\u0004\u00dc\t\u00dc\u0004",
    "\u00dd\t\u00dd\u0004\u00de\t\u00de\u0004\u00df\t\u00df\u0004\u00e0\t",
    "\u00e0\u0004\u00e1\t\u00e1\u0004\u00e2\t\u00e2\u0004\u00e3\t\u00e3\u0004",
    "\u00e4\t\u00e4\u0004\u00e5\t\u00e5\u0004\u00e6\t\u00e6\u0004\u00e7\t",
    "\u00e7\u0004\u00e8\t\u00e8\u0004\u00e9\t\u00e9\u0004\u00ea\t\u00ea\u0004",
    "\u00eb\t\u00eb\u0004\u00ec\t\u00ec\u0004\u00ed\t\u00ed\u0004\u00ee\t",
    "\u00ee\u0004\u00ef\t\u00ef\u0004\u00f0\t\u00f0\u0004\u00f1\t\u00f1\u0004",
    "\u00f2\t\u00f2\u0004\u00f3\t\u00f3\u0004\u00f4\t\u00f4\u0004\u00f5\t",
    "\u00f5\u0004\u00f6\t\u00f6\u0004\u00f7\t\u00f7\u0004\u00f8\t\u00f8\u0004",
    "\u00f9\t\u00f9\u0004\u00fa\t\u00fa\u0004\u00fb\t\u00fb\u0004\u00fc\t",
    "\u00fc\u0004\u00fd\t\u00fd\u0004\u00fe\t\u00fe\u0004\u00ff\t\u00ff\u0004",
    "\u0100\t\u0100\u0004\u0101\t\u0101\u0004\u0102\t\u0102\u0004\u0103\t",
    "\u0103\u0004\u0104\t\u0104\u0004\u0105\t\u0105\u0004\u0106\t\u0106\u0004",
    "\u0107\t\u0107\u0004\u0108\t\u0108\u0004\u0109\t\u0109\u0004\u010a\t",
    "\u010a\u0004\u010b\t\u010b\u0004\u010c\t\u010c\u0004\u010d\t\u010d\u0004",
    "\u010e\t\u010e\u0004\u010f\t\u010f\u0004\u0110\t\u0110\u0004\u0111\t",
    "\u0111\u0004\u0112\t\u0112\u0004\u0113\t\u0113\u0004\u0114\t\u0114\u0004",
    "\u0115\t\u0115\u0004\u0116\t\u0116\u0004\u0117\t\u0117\u0004\u0118\t",
    "\u0118\u0004\u0119\t\u0119\u0004\u011a\t\u011a\u0004\u011b\t\u011b\u0004",
    "\u011c\t\u011c\u0004\u011d\t\u011d\u0004\u011e\t\u011e\u0004\u011f\t",
    "\u011f\u0004\u0120\t\u0120\u0004\u0121\t\u0121\u0004\u0122\t\u0122\u0004",
    "\u0123\t\u0123\u0004\u0124\t\u0124\u0004\u0125\t\u0125\u0004\u0126\t",
    "\u0126\u0004\u0127\t\u0127\u0004\u0128\t\u0128\u0004\u0129\t\u0129\u0004",
    "\u012a\t\u012a\u0004\u012b\t\u012b\u0004\u012c\t\u012c\u0004\u012d\t",
    "\u012d\u0004\u012e\t\u012e\u0004\u012f\t\u012f\u0004\u0130\t\u0130\u0004",
    "\u0131\t\u0131\u0004\u0132\t\u0132\u0004\u0133\t\u0133\u0004\u0134\t",
    "\u0134\u0004\u0135\t\u0135\u0004\u0136\t\u0136\u0004\u0137\t\u0137\u0004",
    "\u0138\t\u0138\u0004\u0139\t\u0139\u0004\u013a\t\u013a\u0004\u013b\t",
    "\u013b\u0004\u013c\t\u013c\u0004\u013d\t\u013d\u0004\u013e\t\u013e\u0004",
    "\u013f\t\u013f\u0004\u0140\t\u0140\u0004\u0141\t\u0141\u0004\u0142\t",
    "\u0142\u0004\u0143\t\u0143\u0004\u0144\t\u0144\u0004\u0145\t\u0145\u0004",
    "\u0146\t\u0146\u0004\u0147\t\u0147\u0004\u0148\t\u0148\u0004\u0149\t",
    "\u0149\u0004\u014a\t\u014a\u0004\u014b\t\u014b\u0004\u014c\t\u014c\u0004",
    "\u014d\t\u014d\u0004\u014e\t\u014e\u0004\u014f\t\u014f\u0004\u0150\t",
    "\u0150\u0004\u0151\t\u0151\u0004\u0152\t\u0152\u0004\u0153\t\u0153\u0004",
    "\u0154\t\u0154\u0004\u0155\t\u0155\u0004\u0156\t\u0156\u0004\u0157\t",
    "\u0157\u0004\u0158\t\u0158\u0004\u0159\t\u0159\u0004\u015a\t\u015a\u0004",
    "\u015b\t\u015b\u0004\u015c\t\u015c\u0004\u015d\t\u015d\u0004\u015e\t",
    "\u015e\u0004\u015f\t\u015f\u0004\u0160\t\u0160\u0004\u0161\t\u0161\u0004",
    "\u0162\t\u0162\u0004\u0163\t\u0163\u0004\u0164\t\u0164\u0004\u0165\t",
    "\u0165\u0004\u0166\t\u0166\u0004\u0167\t\u0167\u0004\u0168\t\u0168\u0004",
    "\u0169\t\u0169\u0004\u016a\t\u016a\u0004\u016b\t\u016b\u0004\u016c\t",
    "\u016c\u0004\u016d\t\u016d\u0004\u016e\t\u016e\u0004\u016f\t\u016f\u0004",
    "\u0170\t\u0170\u0004\u0171\t\u0171\u0004\u0172\t\u0172\u0004\u0173\t",
    "\u0173\u0004\u0174\t\u0174\u0004\u0175\t\u0175\u0004\u0176\t\u0176\u0004",
    "\u0177\t\u0177\u0004\u0178\t\u0178\u0004\u0179\t\u0179\u0004\u017a\t",
    "\u017a\u0004\u017b\t\u017b\u0004\u017c\t\u017c\u0004\u017d\t\u017d\u0004",
    "\u017e\t\u017e\u0004\u017f\t\u017f\u0004\u0180\t\u0180\u0004\u0181\t",
    "\u0181\u0004\u0182\t\u0182\u0004\u0183\t\u0183\u0004\u0184\t\u0184\u0004",
    "\u0185\t\u0185\u0004\u0186\t\u0186\u0004\u0187\t\u0187\u0004\u0188\t",
    "\u0188\u0004\u0189\t\u0189\u0004\u018a\t\u018a\u0004\u018b\t\u018b\u0004",
    "\u018c\t\u018c\u0004\u018d\t\u018d\u0004\u018e\t\u018e\u0004\u018f\t",
    "\u018f\u0004\u0190\t\u0190\u0004\u0191\t\u0191\u0004\u0192\t\u0192\u0004",
    "\u0193\t\u0193\u0004\u0194\t\u0194\u0004\u0195\t\u0195\u0004\u0196\t",
    "\u0196\u0004\u0197\t\u0197\u0004\u0198\t\u0198\u0004\u0199\t\u0199\u0004",
    "\u019a\t\u019a\u0004\u019b\t\u019b\u0004\u019c\t\u019c\u0004\u019d\t",
    "\u019d\u0004\u019e\t\u019e\u0004\u019f\t\u019f\u0004\u01a0\t\u01a0\u0004",
    "\u01a1\t\u01a1\u0004\u01a2\t\u01a2\u0004\u01a3\t\u01a3\u0004\u01a4\t",
    "\u01a4\u0004\u01a5\t\u01a5\u0004\u01a6\t\u01a6\u0004\u01a7\t\u01a7\u0004",
    "\u01a8\t\u01a8\u0004\u01a9\t\u01a9\u0004\u01aa\t\u01aa\u0004\u01ab\t",
    "\u01ab\u0004\u01ac\t\u01ac\u0004\u01ad\t\u01ad\u0004\u01ae\t\u01ae\u0004",
    "\u01af\t\u01af\u0004\u01b0\t\u01b0\u0004\u01b1\t\u01b1\u0004\u01b2\t",
    "\u01b2\u0004\u01b3\t\u01b3\u0004\u01b4\t\u01b4\u0004\u01b5\t\u01b5\u0004",
    "\u01b6\t\u01b6\u0004\u01b7\t\u01b7\u0004\u01b8\t\u01b8\u0004\u01b9\t",
    "\u01b9\u0004\u01ba\t\u01ba\u0004\u01bb\t\u01bb\u0004\u01bc\t\u01bc\u0004",
    "\u01bd\t\u01bd\u0004\u01be\t\u01be\u0004\u01bf\t\u01bf\u0004\u01c0\t",
    "\u01c0\u0004\u01c1\t\u01c1\u0004\u01c2\t\u01c2\u0004\u01c3\t\u01c3\u0004",
    "\u01c4\t\u01c4\u0004\u01c5\t\u01c5\u0004\u01c6\t\u01c6\u0004\u01c7\t",
    "\u01c7\u0004\u01c8\t\u01c8\u0004\u01c9\t\u01c9\u0004\u01ca\t\u01ca\u0004",
    "\u01cb\t\u01cb\u0004\u01cc\t\u01cc\u0004\u01cd\t\u01cd\u0004\u01ce\t",
    "\u01ce\u0004\u01cf\t\u01cf\u0004\u01d0\t\u01d0\u0004\u01d1\t\u01d1\u0004",
    "\u01d2\t\u01d2\u0004\u01d3\t\u01d3\u0004\u01d4\t\u01d4\u0004\u01d5\t",
    "\u01d5\u0004\u01d6\t\u01d6\u0004\u01d7\t\u01d7\u0004\u01d8\t\u01d8\u0004",
    "\u01d9\t\u01d9\u0004\u01da\t\u01da\u0004\u01db\t\u01db\u0004\u01dc\t",
    "\u01dc\u0004\u01dd\t\u01dd\u0004\u01de\t\u01de\u0004\u01df\t\u01df\u0004",
    "\u01e0\t\u01e0\u0004\u01e1\t\u01e1\u0004\u01e2\t\u01e2\u0004\u01e3\t",
    "\u01e3\u0004\u01e4\t\u01e4\u0004\u01e5\t\u01e5\u0004\u01e6\t\u01e6\u0004",
    "\u01e7\t\u01e7\u0004\u01e8\t\u01e8\u0004\u01e9\t\u01e9\u0004\u01ea\t",
    "\u01ea\u0004\u01eb\t\u01eb\u0004\u01ec\t\u01ec\u0004\u01ed\t\u01ed\u0004",
    "\u01ee\t\u01ee\u0004\u01ef\t\u01ef\u0004\u01f0\t\u01f0\u0004\u01f1\t",
    "\u01f1\u0004\u01f2\t\u01f2\u0004\u01f3\t\u01f3\u0004\u01f4\t\u01f4\u0004",
    "\u01f5\t\u01f5\u0004\u01f6\t\u01f6\u0004\u01f7\t\u01f7\u0004\u01f8\t",
    "\u01f8\u0004\u01f9\t\u01f9\u0004\u01fa\t\u01fa\u0004\u01fb\t\u01fb\u0004",
    "\u01fc\t\u01fc\u0004\u01fd\t\u01fd\u0004\u01fe\t\u01fe\u0004\u01ff\t",
    "\u01ff\u0004\u0200\t\u0200\u0004\u0201\t\u0201\u0004\u0202\t\u0202\u0004",
    "\u0203\t\u0203\u0004\u0204\t\u0204\u0004\u0205\t\u0205\u0004\u0206\t",
    "\u0206\u0004\u0207\t\u0207\u0004\u0208\t\u0208\u0004\u0209\t\u0209\u0004",
    "\u020a\t\u020a\u0004\u020b\t\u020b\u0004\u020c\t\u020c\u0004\u020d\t",
    "\u020d\u0004\u020e\t\u020e\u0004\u020f\t\u020f\u0004\u0210\t\u0210\u0004",
    "\u0211\t\u0211\u0004\u0212\t\u0212\u0004\u0213\t\u0213\u0004\u0214\t",
    "\u0214\u0004\u0215\t\u0215\u0004\u0216\t\u0216\u0004\u0217\t\u0217\u0004",
    "\u0218\t\u0218\u0004\u0219\t\u0219\u0004\u021a\t\u021a\u0004\u021b\t",
    "\u021b\u0004\u021c\t\u021c\u0004\u021d\t\u021d\u0004\u021e\t\u021e\u0004",
    "\u021f\t\u021f\u0004\u0220\t\u0220\u0004\u0221\t\u0221\u0004\u0222\t",
    "\u0222\u0004\u0223\t\u0223\u0004\u0224\t\u0224\u0004\u0225\t\u0225\u0004",
    "\u0226\t\u0226\u0004\u0227\t\u0227\u0004\u0228\t\u0228\u0004\u0229\t",
    "\u0229\u0004\u022a\t\u022a\u0004\u022b\t\u022b\u0004\u022c\t\u022c\u0004",
    "\u022d\t\u022d\u0004\u022e\t\u022e\u0004\u022f\t\u022f\u0004\u0230\t",
    "\u0230\u0004\u0231\t\u0231\u0004\u0232\t\u0232\u0004\u0233\t\u0233\u0004",
    "\u0234\t\u0234\u0004\u0235\t\u0235\u0004\u0236\t\u0236\u0004\u0237\t",
    "\u0237\u0004\u0238\t\u0238\u0004\u0239\t\u0239\u0004\u023a\t\u023a\u0004",
    "\u023b\t\u023b\u0004\u023c\t\u023c\u0004\u023d\t\u023d\u0004\u023e\t",
    "\u023e\u0004\u023f\t\u023f\u0004\u0240\t\u0240\u0004\u0241\t\u0241\u0004",
    "\u0242\t\u0242\u0004\u0243\t\u0243\u0004\u0244\t\u0244\u0004\u0245\t",
    "\u0245\u0004\u0246\t\u0246\u0004\u0247\t\u0247\u0004\u0248\t\u0248\u0004",
    "\u0249\t\u0249\u0004\u024a\t\u024a\u0004\u024b\t\u024b\u0004\u024c\t",
    "\u024c\u0004\u024d\t\u024d\u0004\u024e\t\u024e\u0004\u024f\t\u024f\u0004",
    "\u0250\t\u0250\u0004\u0251\t\u0251\u0004\u0252\t\u0252\u0004\u0253\t",
    "\u0253\u0004\u0254\t\u0254\u0004\u0255\t\u0255\u0004\u0256\t\u0256\u0004",
    "\u0257\t\u0257\u0004\u0258\t\u0258\u0004\u0259\t\u0259\u0004\u025a\t",
    "\u025a\u0004\u025b\t\u025b\u0004\u025c\t\u025c\u0004\u025d\t\u025d\u0004",
    "\u025e\t\u025e\u0004\u025f\t\u025f\u0004\u0260\t\u0260\u0004\u0261\t",
    "\u0261\u0004\u0262\t\u0262\u0004\u0263\t\u0263\u0004\u0264\t\u0264\u0004",
    "\u0265\t\u0265\u0004\u0266\t\u0266\u0004\u0267\t\u0267\u0004\u0268\t",
    "\u0268\u0004\u0269\t\u0269\u0004\u026a\t\u026a\u0004\u026b\t\u026b\u0004",
    "\u026c\t\u026c\u0004\u026d\t\u026d\u0004\u026e\t\u026e\u0004\u026f\t",
    "\u026f\u0003\u0002\u0005\u0002\u04e0\n\u0002\u0003\u0002\u0005\u0002",
    "\u04e3\n\u0002\u0003\u0002\u0003\u0002\u0003\u0003\u0003\u0003\u0005",
    "\u0003\u04e9\n\u0003\u0003\u0003\u0005\u0003\u04ec\n\u0003\u0003\u0003",
    "\u0007\u0003\u04ef\n\u0003\f\u0003\u000e\u0003\u04f2\u000b\u0003\u0003",
    "\u0003\u0003\u0003\u0005\u0003\u04f6\n\u0003\u0003\u0003\u0005\u0003",
    "\u04f9\n\u0003\u0003\u0003\u0005\u0003\u04fc\n\u0003\u0003\u0004\u0003",
    "\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003",
    "\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0005\u0004\u0509\n\u0004",
    "\u0003\u0005\u0003\u0005\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0005\u0006\u0533\n",
    "\u0006\u0005\u0006\u0535\n\u0006\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0005\u0007\u0543\n\u0007\u0003",
    "\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0005\u0007\u0549\n\u0007",
    "\u0005\u0007\u054b\n\u0007\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003",
    "\b\u0003\b\u0003\b\u0003\b\u0003\b\u0005\b\u0557\n\b\u0003\b\u0003\b",
    "\u0005\b\u055b\n\b\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0005\t\u056d\n\t\u0003\n\u0003\n\u0003\n\u0003\n\u0005\n\u0573\n",
    "\n\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003",
    "\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0005\u000b\u057f",
    "\n\u000b\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003",
    "\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003",
    "\f\u0003\f\u0003\f\u0005\f\u0594\n\f\u0003\f\u0003\f\u0003\f\u0003\f",
    "\u0005\f\u059a\n\f\u0005\f\u059c\n\f\u0003\r\u0003\r\u0003\r\u0003\r",
    "\u0005\r\u05a2\n\r\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003",
    "\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0005\u000e\u05ad",
    "\n\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e",
    "\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e",
    "\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0005\u000e\u05be\n",
    "\u000e\u0005\u000e\u05c0\n\u000e\u0003\u000f\u0003\u000f\u0003\u000f",
    "\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0005\u000f\u05c9\n",
    "\u000f\u0003\u0010\u0003\u0010\u0003\u0011\u0003\u0011\u0003\u0012\u0003",
    "\u0012\u0003\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u05d4\n\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0014\u0003\u0014\u0005\u0014",
    "\u05db\n\u0014\u0003\u0014\u0003\u0014\u0005\u0014\u05df\n\u0014\u0003",
    "\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003",
    "\u0014\u0005\u0014\u05e8\n\u0014\u0003\u0014\u0005\u0014\u05eb\n\u0014",
    "\u0003\u0014\u0005\u0014\u05ee\n\u0014\u0003\u0014\u0003\u0014\u0005",
    "\u0014\u05f2\n\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0015",
    "\u0003\u0015\u0005\u0015\u05f9\n\u0015\u0003\u0015\u0005\u0015\u05fc",
    "\n\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0005\u0015\u0601\n\u0015",
    "\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0007\u0015\u0607\n",
    "\u0015\f\u0015\u000e\u0015\u060a\u000b\u0015\u0003\u0015\u0003\u0015",
    "\u0005\u0015\u060e\n\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0005",
    "\u0015\u0613\n\u0015\u0003\u0015\u0005\u0015\u0616\n\u0015\u0003\u0016",
    "\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016",
    "\u0003\u0016\u0003\u0016\u0005\u0016\u0621\n\u0016\u0003\u0016\u0005",
    "\u0016\u0624\n\u0016\u0003\u0016\u0003\u0016\u0005\u0016\u0628\n\u0016",
    "\u0003\u0016\u0005\u0016\u062b\n\u0016\u0003\u0016\u0003\u0016\u0005",
    "\u0016\u062f\n\u0016\u0003\u0016\u0005\u0016\u0632\n\u0016\u0003\u0016",
    "\u0003\u0016\u0005\u0016\u0636\n\u0016\u0003\u0016\u0005\u0016\u0639",
    "\n\u0016\u0003\u0016\u0005\u0016\u063c\n\u0016\u0003\u0016\u0003\u0016",
    "\u0005\u0016\u0640\n\u0016\u0003\u0016\u0005\u0016\u0643\n\u0016\u0003",
    "\u0016\u0003\u0016\u0005\u0016\u0647\n\u0016\u0003\u0016\u0003\u0016",
    "\u0003\u0017\u0003\u0017\u0005\u0017\u064d\n\u0017\u0003\u0017\u0005",
    "\u0017\u0650\n\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017",
    "\u0005\u0017\u0656\n\u0017\u0003\u0017\u0003\u0017\u0007\u0017\u065a",
    "\n\u0017\f\u0017\u000e\u0017\u065d\u000b\u0017\u0003\u0017\u0003\u0017",
    "\u0007\u0017\u0661\n\u0017\f\u0017\u000e\u0017\u0664\u000b\u0017\u0003",
    "\u0017\u0003\u0017\u0003\u0018\u0003\u0018\u0005\u0018\u066a\n\u0018",
    "\u0003\u0018\u0005\u0018\u066d\n\u0018\u0003\u0018\u0003\u0018\u0003",
    "\u0018\u0003\u0018\u0005\u0018\u0673\n\u0018\u0003\u0018\u0003\u0018",
    "\u0007\u0018\u0677\n\u0018\f\u0018\u000e\u0018\u067a\u000b\u0018\u0003",
    "\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0007\u0018\u0680\n\u0018",
    "\f\u0018\u000e\u0018\u0683\u000b\u0018\u0003\u0018\u0003\u0018\u0003",
    "\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0005\u0019\u068c",
    "\n\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019",
    "\u0003\u0019\u0003\u0019\u0007\u0019\u0695\n\u0019\f\u0019\u000e\u0019",
    "\u0698\u000b\u0019\u0005\u0019\u069a\n\u0019\u0003\u001a\u0003\u001a",
    "\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a",
    "\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0007\u001a\u06a8\n",
    "\u001a\f\u001a\u000e\u001a\u06ab\u000b\u001a\u0003\u001a\u0003\u001a",
    "\u0003\u001b\u0003\u001b\u0005\u001b\u06b1\n\u001b\u0003\u001b\u0003",
    "\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003",
    "\u001b\u0005\u001b\u06bb\n\u001b\u0003\u001b\u0003\u001b\u0003\u001b",
    "\u0003\u001b\u0005\u001b\u06c1\n\u001b\u0003\u001b\u0003\u001b\u0005",
    "\u001b\u06c5\n\u001b\u0003\u001b\u0003\u001b\u0005\u001b\u06c9\n\u001b",
    "\u0003\u001b\u0003\u001b\u0005\u001b\u06cd\n\u001b\u0003\u001b\u0003",
    "\u001b\u0005\u001b\u06d1\n\u001b\u0003\u001b\u0003\u001b\u0005\u001b",
    "\u06d5\n\u001b\u0003\u001b\u0005\u001b\u06d8\n\u001b\u0003\u001b\u0003",
    "\u001b\u0005\u001b\u06dc\n\u001b\u0003\u001b\u0003\u001b\u0005\u001b",
    "\u06e0\n\u001b\u0003\u001b\u0003\u001b\u0005\u001b\u06e4\n\u001b\u0003",
    "\u001b\u0003\u001b\u0003\u001b\u0005\u001b\u06e9\n\u001b\u0003\u001c",
    "\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c",
    "\u0003\u001c\u0003\u001c\u0005\u001c\u06f4\n\u001c\u0003\u001c\u0003",
    "\u001c\u0005\u001c\u06f8\n\u001c\u0003\u001c\u0005\u001c\u06fb\n\u001c",
    "\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d",
    "\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d",
    "\u0005\u001d\u0709\n\u001d\u0003\u001d\u0005\u001d\u070c\n\u001d\u0003",
    "\u001d\u0003\u001d\u0005\u001d\u0710\n\u001d\u0003\u001d\u0005\u001d",
    "\u0713\n\u001d\u0003\u001d\u0003\u001d\u0005\u001d\u0717\n\u001d\u0003",
    "\u001d\u0005\u001d\u071a\n\u001d\u0003\u001d\u0003\u001d\u0005\u001d",
    "\u071e\n\u001d\u0003\u001d\u0005\u001d\u0721\n\u001d\u0003\u001d\u0003",
    "\u001d\u0005\u001d\u0725\n\u001d\u0003\u001d\u0005\u001d\u0728\n\u001d",
    "\u0003\u001d\u0005\u001d\u072b\n\u001d\u0003\u001d\u0003\u001d\u0005",
    "\u001d\u072f\n\u001d\u0003\u001d\u0005\u001d\u0732\n\u001d\u0003\u001d",
    "\u0003\u001d\u0005\u001d\u0736\n\u001d\u0003\u001d\u0003\u001d\u0003",
    "\u001e\u0003\u001e\u0005\u001e\u073c\n\u001e\u0003\u001e\u0003\u001e",
    "\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e",
    "\u0003\u001e\u0003\u001e\u0003\u001e\u0005\u001e\u0749\n\u001e\u0003",
    "\u001e\u0003\u001e\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0005",
    "\u001f\u0751\n\u001f\u0003 \u0003 \u0003 \u0005 \u0756\n \u0003 \u0003",
    " \u0003 \u0005 \u075b\n \u0003 \u0005 \u075e\n \u0003 \u0003 \u0003",
    " \u0005 \u0763\n \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0005 \u076b",
    "\n \u0003 \u0005 \u076e\n \u0003 \u0003 \u0003 \u0005 \u0773\n \u0003",
    " \u0003 \u0005 \u0777\n \u0003!\u0003!\u0003!\u0005!\u077c\n!\u0003",
    "!\u0003!\u0005!\u0780\n!\u0003!\u0003!\u0003!\u0003!\u0003!\u0005!\u0787",
    "\n!\u0003!\u0005!\u078a\n!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003",
    "!\u0005!\u0792\n!\u0003!\u0003!\u0003!\u0003!\u0003!\u0005!\u0799\n",
    "!\u0003!\u0005!\u079c\n!\u0003!\u0003!\u0003\"\u0003\"\u0007\"\u07a2",
    "\n\"\f\"\u000e\"\u07a5\u000b\"\u0003\"\u0003\"\u0005\"\u07a9\n\"\u0003",
    "#\u0005#\u07ac\n#\u0003#\u0003#\u0003#\u0005#\u07b1\n#\u0003#\u0005",
    "#\u07b4\n#\u0003#\u0003#\u0005#\u07b8\n#\u0003#\u0003#\u0005#\u07bc",
    "\n#\u0003#\u0005#\u07bf\n#\u0003$\u0005$\u07c2\n$\u0003$\u0003$\u0005",
    "$\u07c6\n$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0005$\u07ce\n",
    "$\u0003%\u0003%\u0005%\u07d2\n%\u0003&\u0003&\u0003&\u0007&\u07d7\n",
    "&\f&\u000e&\u07da\u000b&\u0003\'\u0003\'\u0003\'\u0007\'\u07df\n\'\f",
    "\'\u000e\'\u07e2\u000b\'\u0003(\u0003(\u0003(\u0003(\u0003)\u0003)\u0003",
    ")\u0007)\u07eb\n)\f)\u000e)\u07ee\u000b)\u0003*\u0003*\u0003*\u0003",
    "*\u0003+\u0003+\u0003+\u0003+\u0003,\u0003,\u0003,\u0003,\u0003,\u0003",
    ",\u0005,\u07fe\n,\u0005,\u0800\n,\u0003-\u0003-\u0003-\u0007-\u0805",
    "\n-\f-\u000e-\u0808\u000b-\u0003-\u0003-\u0003-\u0005-\u080d\n-\u0003",
    "-\u0003-\u0003-\u0003-\u0007-\u0813\n-\f-\u000e-\u0816\u000b-\u0005",
    "-\u0818\n-\u0003-\u0003-\u0003-\u0007-\u081d\n-\f-\u000e-\u0820\u000b",
    "-\u0005-\u0822\n-\u0005-\u0824\n-\u0003.\u0003.\u0003.\u0003.\u0005",
    ".\u082a\n.\u0003/\u0003/\u0003/\u0003/\u0005/\u0830\n/\u0003/\u0003",
    "/\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u0003",
    "0\u00030\u00030\u00030\u00050\u0841\n0\u00031\u00031\u00031\u00031\u0003",
    "1\u00051\u0848\n1\u00032\u00032\u00032\u00033\u00033\u00053\u084f\n",
    "3\u00033\u00033\u00033\u00033\u00033\u00033\u00033\u00053\u0858\n3\u0003",
    "4\u00054\u085b\n4\u00034\u00034\u00034\u00035\u00035\u00035\u00036\u0003",
    "6\u00036\u00056\u0866\n6\u00037\u00037\u00037\u00037\u00037\u00057\u086d",
    "\n7\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u0003",
    "7\u00037\u00057\u087a\n7\u00037\u00037\u00037\u00057\u087f\n7\u0003",
    "8\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u0003",
    "8\u00038\u00038\u00038\u00058\u088f\n8\u00039\u00039\u00039\u00059\u0894",
    "\n9\u00039\u00039\u00039\u00039\u00059\u089a\n9\u00039\u00059\u089d",
    "\n9\u00039\u00059\u08a0\n9\u0003:\u0003:\u0003:\u0003;\u0003;\u0005",
    ";\u08a7\n;\u0003;\u0003;\u0003;\u0003;\u0005;\u08ad\n;\u0003<\u0003",
    "<\u0005<\u08b1\n<\u0003<\u0005<\u08b4\n<\u0003=\u0003=\u0003=\u0005",
    "=\u08b9\n=\u0003=\u0007=\u08bc\n=\f=\u000e=\u08bf\u000b=\u0005=\u08c1",
    "\n=\u0003=\u0005=\u08c4\n=\u0003=\u0003=\u0005=\u08c8\n=\u0003=\u0005",
    "=\u08cb\n=\u0003=\u0005=\u08ce\n=\u0003=\u0005=\u08d1\n=\u0003=\u0005",
    "=\u08d4\n=\u0003=\u0003=\u0005=\u08d8\n=\u0003=\u0005=\u08db\n=\u0003",
    "=\u0005=\u08de\n=\u0003=\u0005=\u08e1\n=\u0003=\u0005=\u08e4\n=\u0005",
    "=\u08e6\n=\u0003>\u0003>\u0003>\u0003>\u0007>\u08ec\n>\f>\u000e>\u08ef",
    "\u000b>\u0003>\u0003>\u0003?\u0003?\u0003?\u0003?\u0005?\u08f7\n?\u0003",
    "@\u0003@\u0003@\u0003A\u0003A\u0003A\u0007A\u08ff\nA\fA\u000eA\u0902",
    "\u000bA\u0003A\u0003A\u0003A\u0005A\u0907\nA\u0003A\u0007A\u090a\nA",
    "\fA\u000eA\u090d\u000bA\u0005A\u090f\nA\u0003B\u0003B\u0003B\u0003B",
    "\u0003B\u0003B\u0003B\u0005B\u0918\nB\u0003B\u0005B\u091b\nB\u0003B",
    "\u0003B\u0003B\u0005B\u0920\nB\u0003B\u0003B\u0003B\u0003B\u0003B\u0003",
    "B\u0003B\u0003B\u0003B\u0003B\u0003B\u0005B\u092d\nB\u0003B\u0003B\u0003",
    "B\u0003B\u0003B\u0005B\u0934\nB\u0003B\u0003B\u0003B\u0005B\u0939\n",
    "B\u0003C\u0003C\u0003C\u0003C\u0003C\u0005C\u0940\nC\u0003C\u0003C\u0003",
    "C\u0003C\u0003C\u0005C\u0947\nC\u0003C\u0003C\u0003C\u0003C\u0003C\u0003",
    "C\u0003C\u0003C\u0003C\u0003C\u0003C\u0003C\u0005C\u0955\nC\u0005C\u0957",
    "\nC\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003",
    "D\u0003D\u0005D\u0964\nD\u0003E\u0005E\u0967\nE\u0003E\u0005E\u096a",
    "\nE\u0003E\u0005E\u096d\nE\u0003F\u0003F\u0003F\u0003G\u0003G\u0003",
    "G\u0007G\u0975\nG\fG\u000eG\u0978\u000bG\u0003H\u0003H\u0003H\u0005",
    "H\u097d\nH\u0003I\u0003I\u0003I\u0003I\u0003I\u0003I\u0003I\u0003I\u0003",
    "I\u0003I\u0003I\u0003I\u0005I\u098b\nI\u0003I\u0005I\u098e\nI\u0003",
    "I\u0003I\u0003J\u0003J\u0003J\u0003J\u0003K\u0003K\u0003K\u0003K\u0003",
    "K\u0003K\u0003K\u0003K\u0003K\u0003K\u0003K\u0003K\u0003K\u0003K\u0003",
    "K\u0003K\u0007K\u09a6\nK\fK\u000eK\u09a9\u000bK\u0005K\u09ab\nK\u0003",
    "K\u0003K\u0003K\u0003K\u0005K\u09b1\nK\u0003L\u0003L\u0003L\u0003L\u0003",
    "L\u0003L\u0003L\u0003L\u0003L\u0005L\u09bc\nL\u0003M\u0003M\u0003M\u0003",
    "M\u0003M\u0003M\u0003M\u0003M\u0005M\u09c6\nM\u0003N\u0003N\u0003N\u0003",
    "N\u0003N\u0003N\u0003N\u0003N\u0003N\u0003N\u0003O\u0003O\u0003O\u0003",
    "O\u0005O\u09d6\nO\u0003O\u0003O\u0003O\u0005O\u09db\nO\u0005O\u09dd",
    "\nO\u0003P\u0003P\u0003P\u0003P\u0003P\u0003Q\u0003Q\u0003Q\u0003R\u0003",
    "R\u0003R\u0003R\u0003S\u0003S\u0003S\u0003T\u0003T\u0003T\u0003T\u0003",
    "T\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0005U\u09f9\nU\u0003U\u0005",
    "U\u09fc\nU\u0003V\u0003V\u0003V\u0003V\u0003V\u0003V\u0003W\u0003W\u0003",
    "W\u0003W\u0005W\u0a08\nW\u0003X\u0003X\u0005X\u0a0c\nX\u0005X\u0a0e",
    "\nX\u0003X\u0003X\u0003X\u0005X\u0a13\nX\u0003X\u0005X\u0a16\nX\u0003",
    "X\u0003X\u0007X\u0a1a\nX\fX\u000eX\u0a1d\u000bX\u0003X\u0003X\u0005",
    "X\u0a21\nX\u0005X\u0a23\nX\u0003X\u0003X\u0005X\u0a27\nX\u0003X\u0005",
    "X\u0a2a\nX\u0003X\u0005X\u0a2d\nX\u0003X\u0003X\u0007X\u0a31\nX\fX\u000e",
    "X\u0a34\u000bX\u0003X\u0003X\u0005X\u0a38\nX\u0005X\u0a3a\nX\u0003X",
    "\u0003X\u0003X\u0005X\u0a3f\nX\u0003X\u0003X\u0003X\u0003X\u0003X\u0005",
    "X\u0a46\nX\u0005X\u0a48\nX\u0003X\u0003X\u0003X\u0003X\u0003X\u0005",
    "X\u0a4f\nX\u0003Y\u0003Y\u0005Y\u0a53\nY\u0003Y\u0003Y\u0003Y\u0003",
    "Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003",
    "Y\u0005Y\u0a63\nY\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0005",
    "Y\u0a6c\nY\u0003Z\u0003Z\u0003Z\u0005Z\u0a71\nZ\u0003Z\u0003Z\u0005",
    "Z\u0a75\nZ\u0003Z\u0005Z\u0a78\nZ\u0003[\u0003[\u0003[\u0003[\u0003",
    "[\u0003[\u0005[\u0a80\n[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003[\u0005",
    "[\u0a88\n[\u0005[\u0a8a\n[\u0003\\\u0003\\\u0003\\\u0003\\\u0003\\\u0003",
    "\\\u0005\\\u0a92\n\\\u0003]\u0003]\u0005]\u0a96\n]\u0003]\u0005]\u0a99",
    "\n]\u0003]\u0003]\u0007]\u0a9d\n]\f]\u000e]\u0aa0\u000b]\u0003]\u0003",
    "]\u0005]\u0aa4\n]\u0003]\u0005]\u0aa7\n]\u0003]\u0003]\u0007]\u0aab",
    "\n]\f]\u000e]\u0aae\u000b]\u0005]\u0ab0\n]\u0003^\u0003^\u0005^\u0ab4",
    "\n^\u0003^\u0003^\u0003^\u0005^\u0ab9\n^\u0003^\u0003^\u0003^\u0005",
    "^\u0abe\n^\u0003^\u0003^\u0005^\u0ac2\n^\u0003^\u0003^\u0003^\u0005",
    "^\u0ac7\n^\u0003^\u0005^\u0aca\n^\u0003^\u0003^\u0003^\u0005^\u0acf",
    "\n^\u0003^\u0003^\u0005^\u0ad3\n^\u0003^\u0003^\u0005^\u0ad7\n^\u0003",
    "^\u0003^\u0003^\u0005^\u0adc\n^\u0003^\u0003^\u0003^\u0005^\u0ae1\n",
    "^\u0003^\u0003^\u0003^\u0005^\u0ae6\n^\u0003^\u0003^\u0003^\u0003^\u0005",
    "^\u0aec\n^\u0003^\u0003^\u0003^\u0005^\u0af1\n^\u0003^\u0003^\u0003",
    "^\u0005^\u0af6\n^\u0003^\u0003^\u0003^\u0003^\u0005^\u0afc\n^\u0003",
    "^\u0003^\u0003^\u0005^\u0b01\n^\u0003^\u0003^\u0003^\u0005^\u0b06\n",
    "^\u0003^\u0003^\u0003^\u0005^\u0b0b\n^\u0003^\u0003^\u0003^\u0005^\u0b10",
    "\n^\u0003^\u0003^\u0003^\u0005^\u0b15\n^\u0003^\u0003^\u0003^\u0005",
    "^\u0b1a\n^\u0003^\u0003^\u0003^\u0005^\u0b1f\n^\u0003^\u0003^\u0003",
    "^\u0005^\u0b24\n^\u0003^\u0003^\u0003^\u0005^\u0b29\n^\u0003^\u0003",
    "^\u0003^\u0005^\u0b2e\n^\u0003^\u0003^\u0003^\u0003^\u0005^\u0b34\n",
    "^\u0003^\u0003^\u0003^\u0005^\u0b39\n^\u0003^\u0003^\u0003^\u0003^\u0005",
    "^\u0b3f\n^\u0003_\u0003_\u0003_\u0003`\u0003`\u0003`\u0003`\u0003`\u0005",
    "`\u0b49\n`\u0003`\u0003`\u0003`\u0003`\u0003`\u0005`\u0b50\n`\u0005",
    "`\u0b52\n`\u0003`\u0003`\u0003`\u0003`\u0007`\u0b58\n`\f`\u000e`\u0b5b",
    "\u000b`\u0003`\u0003`\u0005`\u0b5f\n`\u0003a\u0005a\u0b62\na\u0003a",
    "\u0003a\u0003a\u0003a\u0003a\u0003a\u0005a\u0b6a\na\u0003a\u0003a\u0003",
    "a\u0003a\u0005a\u0b70\na\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003",
    "a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0005a\u0b80\na\u0003",
    "a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0005",
    "a\u0b8c\na\u0005a\u0b8e\na\u0003b\u0005b\u0b91\nb\u0003b\u0003b\u0003",
    "b\u0003b\u0003b\u0003b\u0005b\u0b99\nb\u0003b\u0003b\u0003b\u0003b\u0005",
    "b\u0b9f\nb\u0003b\u0003b\u0003b\u0003b\u0005b\u0ba5\nb\u0003c\u0003",
    "c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0007c\u0bb0\nc\f",
    "c\u000ec\u0bb3\u000bc\u0003c\u0003c\u0007c\u0bb7\nc\fc\u000ec\u0bba",
    "\u000bc\u0003c\u0003c\u0003c\u0007c\u0bbf\nc\fc\u000ec\u0bc2\u000bc",
    "\u0005c\u0bc4\nc\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0007",
    "c\u0bcd\nc\fc\u000ec\u0bd0\u000bc\u0003c\u0003c\u0003c\u0007c\u0bd5",
    "\nc\fc\u000ec\u0bd8\u000bc\u0005c\u0bda\nc\u0003c\u0003c\u0003c\u0003",
    "c\u0003c\u0003c\u0003c\u0003c\u0007c\u0be4\nc\fc\u000ec\u0be7\u000b",
    "c\u0003c\u0003c\u0007c\u0beb\nc\fc\u000ec\u0bee\u000bc\u0003c\u0003",
    "c\u0003c\u0007c\u0bf3\nc\fc\u000ec\u0bf6\u000bc\u0005c\u0bf8\nc\u0003",
    "c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0007c\u0c02\nc\f",
    "c\u000ec\u0c05\u000bc\u0003c\u0003c\u0007c\u0c09\nc\fc\u000ec\u0c0c",
    "\u000bc\u0003c\u0003c\u0003c\u0007c\u0c11\nc\fc\u000ec\u0c14\u000bc",
    "\u0005c\u0c16\nc\u0003c\u0003c\u0003c\u0007c\u0c1b\nc\fc\u000ec\u0c1e",
    "\u000bc\u0003c\u0003c\u0003c\u0007c\u0c23\nc\fc\u000ec\u0c26\u000bc",
    "\u0005c\u0c28\nc\u0005c\u0c2a\nc\u0003d\u0003d\u0003d\u0005d\u0c2f\n",
    "d\u0003e\u0003e\u0003e\u0003e\u0006e\u0c35\ne\re\u000ee\u0c36\u0003",
    "e\u0003e\u0003f\u0003f\u0003f\u0007f\u0c3e\nf\ff\u000ef\u0c41\u000b",
    "f\u0003g\u0005g\u0c44\ng\u0003g\u0003g\u0005g\u0c48\ng\u0003g\u0003",
    "g\u0003g\u0005g\u0c4d\ng\u0003g\u0003g\u0003g\u0003g\u0005g\u0c53\n",
    "g\u0003g\u0003g\u0003g\u0003g\u0005g\u0c59\ng\u0003g\u0003g\u0003g\u0005",
    "g\u0c5e\ng\u0003g\u0003g\u0003g\u0005g\u0c63\ng\u0003g\u0003g\u0003",
    "g\u0005g\u0c68\ng\u0003g\u0003g\u0003g\u0005g\u0c6d\ng\u0003g\u0005",
    "g\u0c70\ng\u0003h\u0003h\u0003h\u0003h\u0003h\u0003h\u0003h\u0003h\u0003",
    "h\u0006h\u0c7b\nh\rh\u000eh\u0c7c\u0003h\u0003h\u0003h\u0003h\u0003",
    "h\u0006h\u0c84\nh\rh\u000eh\u0c85\u0003h\u0003h\u0003h\u0003h\u0003",
    "h\u0003h\u0003h\u0003h\u0003h\u0003h\u0003h\u0005h\u0c93\nh\u0003i\u0003",
    "i\u0005i\u0c97\ni\u0003i\u0003i\u0003i\u0003i\u0003i\u0005i\u0c9e\n",
    "i\u0003i\u0003i\u0003i\u0005i\u0ca3\ni\u0003i\u0005i\u0ca6\ni\u0003",
    "i\u0003i\u0003i\u0005i\u0cab\ni\u0003i\u0005i\u0cae\ni\u0003i\u0003",
    "i\u0005i\u0cb2\ni\u0003i\u0003i\u0005i\u0cb6\ni\u0003j\u0003j\u0003",
    "j\u0003j\u0007j\u0cbc\nj\fj\u000ej\u0cbf\u000bj\u0003k\u0003k\u0003",
    "k\u0003k\u0003k\u0003k\u0003k\u0003l\u0003l\u0003l\u0003l\u0003l\u0003",
    "l\u0003l\u0003l\u0003l\u0005l\u0cd1\nl\u0003l\u0005l\u0cd4\nl\u0003",
    "l\u0005l\u0cd7\nl\u0003l\u0003l\u0005l\u0cdb\nl\u0003l\u0003l\u0003",
    "m\u0003m\u0003m\u0003m\u0007m\u0ce3\nm\fm\u000em\u0ce6\u000bm\u0003",
    "n\u0003n\u0003n\u0003n\u0003n\u0003n\u0003n\u0003n\u0007n\u0cf0\nn\f",
    "n\u000en\u0cf3\u000bn\u0003n\u0003n\u0003o\u0003o\u0003o\u0003o\u0003",
    "o\u0003p\u0003p\u0003p\u0003p\u0003p\u0003p\u0003p\u0003p\u0003p\u0005",
    "p\u0d05\np\u0003p\u0005p\u0d08\np\u0003p\u0003p\u0005p\u0d0c\np\u0003",
    "p\u0003p\u0003q\u0003q\u0003q\u0003q\u0005q\u0d14\nq\u0003q\u0005q\u0d17",
    "\nq\u0003q\u0003q\u0003q\u0005q\u0d1c\nq\u0003q\u0003q\u0003q\u0003",
    "q\u0003q\u0003q\u0005q\u0d24\nq\u0003q\u0003q\u0003q\u0003q\u0005q\u0d2a",
    "\nq\u0003q\u0003q\u0005q\u0d2e\nq\u0003r\u0003r\u0003r\u0003r\u0003",
    "r\u0003r\u0003r\u0003r\u0005r\u0d38\nr\u0005r\u0d3a\nr\u0003s\u0003",
    "s\u0003s\u0003s\u0003s\u0003s\u0003t\u0003t\u0003t\u0003t\u0003t\u0003",
    "u\u0003u\u0003v\u0003v\u0005v\u0d4b\nv\u0003v\u0005v\u0d4e\nv\u0003",
    "v\u0003v\u0003v\u0005v\u0d53\nv\u0003w\u0003w\u0003w\u0003w\u0005w\u0d59",
    "\nw\u0003x\u0003x\u0003x\u0007x\u0d5e\nx\fx\u000ex\u0d61\u000bx\u0005",
    "x\u0d63\nx\u0003x\u0005x\u0d66\nx\u0003y\u0003y\u0005y\u0d6a\ny\u0003",
    "y\u0007y\u0d6d\ny\fy\u000ey\u0d70\u000by\u0003y\u0003y\u0005y\u0d74",
    "\ny\u0003y\u0003y\u0003y\u0003y\u0003y\u0005y\u0d7b\ny\u0003y\u0003",
    "y\u0005y\u0d7f\ny\u0003y\u0003y\u0003y\u0003y\u0003y\u0003y\u0003y\u0007",
    "y\u0d88\ny\fy\u000ey\u0d8b\u000by\u0003y\u0003y\u0003y\u0003y\u0003",
    "y\u0005y\u0d92\ny\u0003y\u0005y\u0d95\ny\u0003y\u0003y\u0007y\u0d99",
    "\ny\fy\u000ey\u0d9c\u000by\u0003y\u0003y\u0003y\u0005y\u0da1\ny\u0005",
    "y\u0da3\ny\u0003y\u0003y\u0003y\u0005y\u0da8\ny\u0003y\u0003y\u0007",
    "y\u0dac\ny\fy\u000ey\u0daf\u000by\u0003y\u0003y\u0003y\u0005y\u0db4",
    "\ny\u0005y\u0db6\ny\u0003y\u0003y\u0005y\u0dba\ny\u0003y\u0005y\u0dbd",
    "\ny\u0003y\u0005y\u0dc0\ny\u0003y\u0003y\u0007y\u0dc4\ny\fy\u000ey\u0dc7",
    "\u000by\u0003y\u0003y\u0003y\u0005y\u0dcc\ny\u0003y\u0005y\u0dcf\ny",
    "\u0003y\u0003y\u0007y\u0dd3\ny\fy\u000ey\u0dd6\u000by\u0003y\u0003y",
    "\u0003y\u0005y\u0ddb\ny\u0005y\u0ddd\ny\u0003y\u0003y\u0003y\u0005y",
    "\u0de2\ny\u0003y\u0003y\u0003y\u0003y\u0003y\u0003y\u0005y\u0dea\ny",
    "\u0005y\u0dec\ny\u0003y\u0003y\u0003y\u0003y\u0003y\u0003y\u0003y\u0005",
    "y\u0df5\ny\u0003y\u0003y\u0003y\u0005y\u0dfa\ny\u0003y\u0003y\u0003",
    "y\u0003y\u0003y\u0003y\u0005y\u0e02\ny\u0003y\u0003y\u0005y\u0e06\n",
    "y\u0003y\u0003y\u0003y\u0003y\u0003y\u0003y\u0005y\u0e0e\ny\u0003y\u0003",
    "y\u0003y\u0003y\u0003y\u0003y\u0003y\u0003y\u0005y\u0e18\ny\u0003y\u0003",
    "y\u0003y\u0005y\u0e1d\ny\u0003y\u0003y\u0003y\u0003y\u0003y\u0005y\u0e24",
    "\ny\u0003y\u0003y\u0005y\u0e28\ny\u0003y\u0003y\u0005y\u0e2c\ny\u0003",
    "y\u0003y\u0003y\u0003y\u0003y\u0003y\u0003y\u0003y\u0003y\u0003y\u0003",
    "y\u0003y\u0003y\u0003y\u0003y\u0003y\u0005y\u0e3e\ny\u0003y\u0003y\u0005",
    "y\u0e42\ny\u0003y\u0003y\u0003y\u0003y\u0003y\u0003y\u0003y\u0003y\u0003",
    "y\u0003y\u0005y\u0e4e\ny\u0003y\u0005y\u0e51\ny\u0003y\u0003y\u0003",
    "y\u0003y\u0003y\u0003y\u0003y\u0005y\u0e5a\ny\u0003y\u0003y\u0003y\u0003",
    "y\u0003y\u0003y\u0003y\u0003y\u0003y\u0003y\u0003y\u0003y\u0003y\u0007",
    "y\u0e69\ny\fy\u000ey\u0e6c\u000by\u0003y\u0003y\u0003y\u0003y\u0003",
    "y\u0003y\u0003y\u0003y\u0003y\u0005y\u0e77\ny\u0003y\u0003y\u0003y\u0003",
    "y\u0003y\u0005y\u0e7e\ny\u0003y\u0003y\u0003y\u0003y\u0003y\u0005y\u0e85",
    "\ny\u0003y\u0003y\u0003y\u0003y\u0003y\u0003y\u0003y\u0003y\u0003y\u0003",
    "y\u0003y\u0007y\u0e92\ny\fy\u000ey\u0e95\u000by\u0003y\u0003y\u0003",
    "y\u0003y\u0003y\u0003y\u0003y\u0003y\u0003y\u0003y\u0005y\u0ea1\ny\u0003",
    "y\u0003y\u0003y\u0003y\u0005y\u0ea7\ny\u0003y\u0003y\u0003y\u0003y\u0005",
    "y\u0ead\ny\u0003y\u0003y\u0003y\u0003y\u0005y\u0eb3\ny\u0003y\u0003",
    "y\u0003y\u0003y\u0005y\u0eb9\ny\u0003y\u0003y\u0003y\u0003y\u0005y\u0ebf",
    "\ny\u0003y\u0003y\u0003y\u0003y\u0005y\u0ec5\ny\u0003z\u0003z\u0003",
    "z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003",
    "z\u0003z\u0005z\u0ed5\nz\u0003z\u0003z\u0003z\u0005z\u0eda\nz\u0003",
    "z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0005z\u0ee5",
    "\nz\u0003z\u0003z\u0003z\u0005z\u0eea\nz\u0003z\u0003z\u0005z\u0eee",
    "\nz\u0003z\u0003z\u0003z\u0003z\u0005z\u0ef4\nz\u0003z\u0003z\u0003",
    "z\u0003z\u0003z\u0003z\u0003z\u0005z\u0efd\nz\u0003{\u0003{\u0003{\u0003",
    "|\u0003|\u0003}\u0003}\u0003}\u0003}\u0005}\u0f08\n}\u0003}\u0003}\u0003",
    "}\u0003}\u0003}\u0003}\u0005}\u0f10\n}\u0003}\u0003}\u0003}\u0003}\u0005",
    "}\u0f16\n}\u0003}\u0003}\u0003}\u0005}\u0f1b\n}\u0003}\u0005}\u0f1e",
    "\n}\u0005}\u0f20\n}\u0003~\u0003~\u0005~\u0f24\n~\u0003~\u0006~\u0f27",
    "\n~\r~\u000e~\u0f28\u0003~\u0006~\u0f2c\n~\r~\u000e~\u0f2d\u0005~\u0f30",
    "\n~\u0003~\u0003~\u0005~\u0f34\n~\u0003~\u0003~\u0003~\u0003~\u0003",
    "~\u0003~\u0007~\u0f3c\n~\f~\u000e~\u0f3f\u000b~\u0003~\u0003~\u0005",
    "~\u0f43\n~\u0003~\u0003~\u0005~\u0f47\n~\u0003~\u0005~\u0f4a\n~\u0003",
    "~\u0003~\u0007~\u0f4e\n~\f~\u000e~\u0f51\u000b~\u0003~\u0003~\u0003",
    "~\u0003~\u0003~\u0003~\u0003~\u0003~\u0003~\u0003~\u0003~\u0003~\u0003",
    "~\u0005~\u0f60\n~\u0003~\u0005~\u0f63\n~\u0003\u007f\u0003\u007f\u0003",
    "\u007f\u0003\u007f\u0003\u007f\u0003\u007f\u0003\u007f\u0003\u007f\u0005",
    "\u007f\u0f6d\n\u007f\u0003\u007f\u0005\u007f\u0f70\n\u007f\u0003\u007f",
    "\u0003\u007f\u0003\u007f\u0003\u007f\u0003\u007f\u0003\u007f\u0003\u007f",
    "\u0003\u007f\u0003\u007f\u0003\u007f\u0003\u007f\u0003\u007f\u0003\u007f",
    "\u0003\u007f\u0003\u007f\u0003\u007f\u0005\u007f\u0f82\n\u007f\u0003",
    "\u007f\u0003\u007f\u0003\u007f\u0003\u007f\u0003\u007f\u0003\u007f\u0005",
    "\u007f\u0f8a\n\u007f\u0005\u007f\u0f8c\n\u007f\u0003\u007f\u0003\u007f",
    "\u0003\u007f\u0003\u007f\u0005\u007f\u0f92\n\u007f\u0003\u007f\u0003",
    "\u007f\u0003\u007f\u0003\u007f\u0003\u007f\u0003\u007f\u0005\u007f\u0f9a",
    "\n\u007f\u0005\u007f\u0f9c\n\u007f\u0003\u0080\u0003\u0080\u0003\u0080",
    "\u0003\u0080\u0003\u0080\u0003\u0080\u0003\u0080\u0005\u0080\u0fa5\n",
    "\u0080\u0003\u0081\u0003\u0081\u0003\u0081\u0005\u0081\u0faa\n\u0081",
    "\u0003\u0081\u0003\u0081\u0003\u0081\u0003\u0081\u0003\u0081\u0005\u0081",
    "\u0fb1\n\u0081\u0003\u0081\u0005\u0081\u0fb4\n\u0081\u0003\u0081\u0003",
    "\u0081\u0003\u0081\u0003\u0081\u0003\u0081\u0003\u0081\u0005\u0081\u0fbc",
    "\n\u0081\u0003\u0081\u0003\u0081\u0003\u0081\u0003\u0081\u0003\u0081",
    "\u0003\u0081\u0003\u0081\u0003\u0081\u0003\u0081\u0003\u0081\u0005\u0081",
    "\u0fc8\n\u0081\u0003\u0082\u0003\u0082\u0003\u0082\u0003\u0082\u0003",
    "\u0082\u0003\u0082\u0005\u0082\u0fd0\n\u0082\u0003\u0082\u0003\u0082",
    "\u0003\u0083\u0003\u0083\u0003\u0084\u0003\u0084\u0003\u0084\u0003\u0084",
    "\u0005\u0084\u0fda\n\u0084\u0003\u0084\u0003\u0084\u0003\u0084\u0003",
    "\u0084\u0003\u0084\u0005\u0084\u0fe1\n\u0084\u0003\u0084\u0003\u0084",
    "\u0005\u0084\u0fe5\n\u0084\u0005\u0084\u0fe7\n\u0084\u0003\u0085\u0003",
    "\u0085\u0003\u0085\u0005\u0085\u0fec\n\u0085\u0003\u0085\u0003\u0085",
    "\u0003\u0086\u0003\u0086\u0003\u0086\u0005\u0086\u0ff3\n\u0086\u0003",
    "\u0086\u0003\u0086\u0003\u0086\u0003\u0086\u0003\u0086\u0005\u0086\u0ffa",
    "\n\u0086\u0003\u0086\u0005\u0086\u0ffd\n\u0086\u0003\u0086\u0003\u0086",
    "\u0005\u0086\u1001\n\u0086\u0003\u0086\u0005\u0086\u1004\n\u0086\u0003",
    "\u0087\u0003\u0087\u0003\u0087\u0003\u0087\u0003\u0087\u0003\u0087\u0003",
    "\u0087\u0003\u0087\u0003\u0088\u0003\u0088\u0003\u0088\u0005\u0088\u1011",
    "\n\u0088\u0003\u0088\u0003\u0088\u0003\u0089\u0003\u0089\u0005\u0089",
    "\u1017\n\u0089\u0003\u0089\u0003\u0089\u0005\u0089\u101b\n\u0089\u0003",
    "\u0089\u0003\u0089\u0003\u008a\u0003\u008a\u0003\u008a\u0005\u008a\u1022",
    "\n\u008a\u0003\u008a\u0003\u008a\u0003\u008b\u0003\u008b\u0003\u008b",
    "\u0005\u008b\u1029\n\u008b\u0003\u008b\u0003\u008b\u0005\u008b\u102d",
    "\n\u008b\u0003\u008b\u0003\u008b\u0005\u008b\u1031\n\u008b\u0003\u008b",
    "\u0003\u008b\u0003\u008b\u0005\u008b\u1036\n\u008b\u0003\u008b\u0003",
    "\u008b\u0005\u008b\u103a\n\u008b\u0003\u008b\u0003\u008b\u0005\u008b",
    "\u103e\n\u008b\u0005\u008b\u1040\n\u008b\u0003\u008c\u0003\u008c\u0003",
    "\u008c\u0003\u008c\u0003\u008c\u0005\u008c\u1047\n\u008c\u0003\u008c",
    "\u0005\u008c\u104a\n\u008c\u0003\u008d\u0003\u008d\u0003\u008d\u0005",
    "\u008d\u104f\n\u008d\u0003\u008d\u0003\u008d\u0003\u008e\u0003\u008e",
    "\u0003\u008e\u0003\u008e\u0005\u008e\u1057\n\u008e\u0003\u008e\u0003",
    "\u008e\u0003\u008e\u0007\u008e\u105c\n\u008e\f\u008e\u000e\u008e\u105f",
    "\u000b\u008e\u0003\u008e\u0005\u008e\u1062\n\u008e\u0003\u008e\u0003",
    "\u008e\u0003\u008e\u0003\u008e\u0005\u008e\u1068\n\u008e\u0003\u008e",
    "\u0005\u008e\u106b\n\u008e\u0003\u008f\u0003\u008f\u0003\u008f\u0003",
    "\u0090\u0003\u0090\u0003\u0090\u0003\u0090\u0003\u0090\u0007\u0090\u1075",
    "\n\u0090\f\u0090\u000e\u0090\u1078\u000b\u0090\u0003\u0091\u0003\u0091",
    "\u0005\u0091\u107c\n\u0091\u0003\u0091\u0003\u0091\u0003\u0091\u0003",
    "\u0092\u0003\u0092\u0003\u0092\u0003\u0092\u0003\u0092\u0005\u0092\u1086",
    "\n\u0092\u0003\u0092\u0003\u0092\u0003\u0092\u0005\u0092\u108b\n\u0092",
    "\u0003\u0092\u0005\u0092\u108e\n\u0092\u0003\u0093\u0003\u0093\u0003",
    "\u0093\u0003\u0093\u0003\u0093\u0005\u0093\u1095\n\u0093\u0003\u0093",
    "\u0005\u0093\u1098\n\u0093\u0003\u0094\u0003\u0094\u0003\u0094\u0005",
    "\u0094\u109d\n\u0094\u0003\u0094\u0003\u0094\u0005\u0094\u10a1\n\u0094",
    "\u0003\u0095\u0003\u0095\u0003\u0095\u0003\u0096\u0003\u0096\u0003\u0096",
    "\u0003\u0096\u0005\u0096\u10aa\n\u0096\u0003\u0097\u0003\u0097\u0003",
    "\u0097\u0003\u0097\u0005\u0097\u10b0\n\u0097\u0003\u0097\u0003\u0097",
    "\u0003\u0097\u0003\u0097\u0005\u0097\u10b6\n\u0097\u0003\u0097\u0003",
    "\u0097\u0005\u0097\u10ba\n\u0097\u0003\u0097\u0005\u0097\u10bd\n\u0097",
    "\u0003\u0098\u0003\u0098\u0003\u0098\u0006\u0098\u10c2\n\u0098\r\u0098",
    "\u000e\u0098\u10c3\u0003\u0099\u0003\u0099\u0003\u0099\u0003\u0099\u0003",
    "\u0099\u0003\u0099\u0005\u0099\u10cc\n\u0099\u0003\u0099\u0005\u0099",
    "\u10cf\n\u0099\u0003\u0099\u0003\u0099\u0003\u0099\u0003\u0099\u0003",
    "\u0099\u0005\u0099\u10d6\n\u0099\u0003\u009a\u0003\u009a\u0005\u009a",
    "\u10da\n\u009a\u0003\u009a\u0003\u009a\u0005\u009a\u10de\n\u009a\u0003",
    "\u009a\u0005\u009a\u10e1\n\u009a\u0003\u009a\u0005\u009a\u10e4\n\u009a",
    "\u0003\u009a\u0005\u009a\u10e7\n\u009a\u0003\u009a\u0005\u009a\u10ea",
    "\n\u009a\u0003\u009a\u0005\u009a\u10ed\n\u009a\u0003\u009a\u0005\u009a",
    "\u10f0\n\u009a\u0003\u009a\u0005\u009a\u10f3\n\u009a\u0003\u009a\u0005",
    "\u009a\u10f6\n\u009a\u0003\u009b\u0003\u009b\u0003\u009c\u0003\u009c",
    "\u0003\u009c\u0003\u009c\u0003\u009c\u0005\u009c\u10ff\n\u009c\u0003",
    "\u009c\u0003\u009c\u0005\u009c\u1103\n\u009c\u0003\u009c\u0005\u009c",
    "\u1106\n\u009c\u0003\u009c\u0003\u009c\u0003\u009d\u0003\u009d\u0003",
    "\u009d\u0003\u009d\u0005\u009d\u110e\n\u009d\u0003\u009e\u0003\u009e",
    "\u0003\u009e\u0005\u009e\u1113\n\u009e\u0003\u009e\u0005\u009e\u1116",
    "\n\u009e\u0003\u009e\u0003\u009e\u0003\u009e\u0005\u009e\u111b\n\u009e",
    "\u0003\u009e\u0003\u009e\u0003\u009e\u0003\u009e\u0003\u009e\u0003\u009e",
    "\u0003\u009e\u0003\u009e\u0005\u009e\u1125\n\u009e\u0003\u009e\u0003",
    "\u009e\u0003\u009e\u0005\u009e\u112a\n\u009e\u0003\u009e\u0003\u009e",
    "\u0006\u009e\u112e\n\u009e\r\u009e\u000e\u009e\u112f\u0005\u009e\u1132",
    "\n\u009e\u0003\u009e\u0003\u009e\u0006\u009e\u1136\n\u009e\r\u009e\u000e",
    "\u009e\u1137\u0005\u009e\u113a\n\u009e\u0003\u009e\u0003\u009e\u0003",
    "\u009e\u0003\u009e\u0005\u009e\u1140\n\u009e\u0003\u009e\u0003\u009e",
    "\u0003\u009e\u0003\u009e\u0007\u009e\u1146\n\u009e\f\u009e\u000e\u009e",
    "\u1149\u000b\u009e\u0003\u009e\u0003\u009e\u0005\u009e\u114d\n\u009e",
    "\u0003\u009e\u0005\u009e\u1150\n\u009e\u0003\u009f\u0003\u009f\u0003",
    "\u009f\u0005\u009f\u1155\n\u009f\u0003\u009f\u0003\u009f\u0003\u009f",
    "\u0003\u009f\u0005\u009f\u115b\n\u009f\u0003\u009f\u0003\u009f\u0003",
    "\u009f\u0003\u009f\u0005\u009f\u1161\n\u009f\u0003\u00a0\u0005\u00a0",
    "\u1164\n\u00a0\u0003\u00a0\u0003\u00a0\u0003\u00a0\u0005\u00a0\u1169",
    "\n\u00a0\u0003\u00a0\u0003\u00a0\u0003\u00a1\u0003\u00a1\u0003\u00a1",
    "\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0005\u00a2\u1173\n\u00a2\u0003",
    "\u00a2\u0005\u00a2\u1176\n\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2",
    "\u0005\u00a2\u117b\n\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0003",
    "\u00a2\u0003\u00a2\u0003\u00a2\u0005\u00a2\u1183\n\u00a2\u0003\u00a2",
    "\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0005\u00a2",
    "\u118b\n\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0005",
    "\u00a2\u1191\n\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2",
    "\u0007\u00a2\u1197\n\u00a2\f\u00a2\u000e\u00a2\u119a\u000b\u00a2\u0003",
    "\u00a2\u0003\u00a2\u0005\u00a2\u119e\n\u00a2\u0003\u00a2\u0003\u00a2",
    "\u0003\u00a2\u0003\u00a2\u0007\u00a2\u11a4\n\u00a2\f\u00a2\u000e\u00a2",
    "\u11a7\u000b\u00a2\u0005\u00a2\u11a9\n\u00a2\u0003\u00a3\u0003\u00a3",
    "\u0003\u00a3\u0003\u00a3\u0003\u00a3\u0005\u00a3\u11b0\n\u00a3\u0003",
    "\u00a3\u0005\u00a3\u11b3\n\u00a3\u0003\u00a3\u0005\u00a3\u11b6\n\u00a3",
    "\u0003\u00a3\u0003\u00a3\u0003\u00a4\u0003\u00a4\u0005\u00a4\u11bc\n",
    "\u00a4\u0003\u00a4\u0005\u00a4\u11bf\n\u00a4\u0003\u00a4\u0003\u00a4",
    "\u0003\u00a4\u0003\u00a4\u0003\u00a4\u0003\u00a4\u0005\u00a4\u11c7\n",
    "\u00a4\u0003\u00a4\u0003\u00a4\u0003\u00a4\u0003\u00a4\u0005\u00a4\u11cd",
    "\n\u00a4\u0003\u00a4\u0003\u00a4\u0003\u00a4\u0003\u00a4\u0003\u00a4",
    "\u0007\u00a4\u11d4\n\u00a4\f\u00a4\u000e\u00a4\u11d7\u000b\u00a4\u0005",
    "\u00a4\u11d9\n\u00a4\u0003\u00a5\u0003\u00a5\u0005\u00a5\u11dd\n\u00a5",
    "\u0003\u00a5\u0003\u00a5\u0005\u00a5\u11e1\n\u00a5\u0003\u00a5\u0003",
    "\u00a5\u0006\u00a5\u11e5\n\u00a5\r\u00a5\u000e\u00a5\u11e6\u0003\u00a5",
    "\u0003\u00a5\u0005\u00a5\u11eb\n\u00a5\u0003\u00a5\u0003\u00a5\u0005",
    "\u00a5\u11ef\n\u00a5\u0005\u00a5\u11f1\n\u00a5\u0003\u00a5\u0005\u00a5",
    "\u11f4\n\u00a5\u0003\u00a5\u0005\u00a5\u11f7\n\u00a5\u0003\u00a5\u0005",
    "\u00a5\u11fa\n\u00a5\u0003\u00a5\u0003\u00a5\u0006\u00a5\u11fe\n\u00a5",
    "\r\u00a5\u000e\u00a5\u11ff\u0003\u00a5\u0003\u00a5\u0005\u00a5\u1204",
    "\n\u00a5\u0003\u00a5\u0005\u00a5\u1207\n\u00a5\u0003\u00a5\u0005\u00a5",
    "\u120a\n\u00a5\u0003\u00a5\u0005\u00a5\u120d\n\u00a5\u0003\u00a5\u0005",
    "\u00a5\u1210\n\u00a5\u0005\u00a5\u1212\n\u00a5\u0003\u00a6\u0003\u00a6",
    "\u0003\u00a6\u0005\u00a6\u1217\n\u00a6\u0003\u00a6\u0003\u00a6\u0005",
    "\u00a6\u121b\n\u00a6\u0003\u00a7\u0003\u00a7\u0003\u00a7\u0003\u00a7",
    "\u0003\u00a7\u0007\u00a7\u1222\n\u00a7\f\u00a7\u000e\u00a7\u1225\u000b",
    "\u00a7\u0003\u00a7\u0005\u00a7\u1228\n\u00a7\u0003\u00a7\u0003\u00a7",
    "\u0003\u00a8\u0003\u00a8\u0003\u00a8\u0003\u00a8\u0003\u00a9\u0003\u00a9",
    "\u0003\u00a9\u0003\u00a9\u0003\u00a9\u0003\u00a9\u0003\u00a9\u0003\u00a9",
    "\u0005\u00a9\u1238\n\u00a9\u0003\u00aa\u0003\u00aa\u0003\u00aa\u0003",
    "\u00aa\u0003\u00aa\u0003\u00aa\u0003\u00aa\u0007\u00aa\u1241\n\u00aa",
    "\f\u00aa\u000e\u00aa\u1244\u000b\u00aa\u0003\u00ab\u0003\u00ab\u0003",
    "\u00ab\u0003\u00ab\u0003\u00ab\u0003\u00ac\u0003\u00ac\u0003\u00ac\u0003",
    "\u00ac\u0003\u00ac\u0003\u00ac\u0003\u00ac\u0005\u00ac\u1252\n\u00ac",
    "\u0005\u00ac\u1254\n\u00ac\u0003\u00ac\u0003\u00ac\u0003\u00ac\u0003",
    "\u00ac\u0003\u00ac\u0005\u00ac\u125b\n\u00ac\u0003\u00ac\u0003\u00ac",
    "\u0003\u00ac\u0003\u00ac\u0003\u00ac\u0005\u00ac\u1262\n\u00ac\u0003",
    "\u00ac\u0003\u00ac\u0003\u00ac\u0003\u00ac\u0005\u00ac\u1268\n\u00ac",
    "\u0003\u00ad\u0003\u00ad\u0003\u00ad\u0003\u00ad\u0003\u00ad\u0003\u00ae",
    "\u0003\u00ae\u0003\u00ae\u0003\u00ae\u0003\u00ae\u0003\u00ae\u0003\u00ae",
    "\u0005\u00ae\u1276\n\u00ae\u0003\u00af\u0003\u00af\u0003\u00af\u0003",
    "\u00af\u0003\u00af\u0003\u00af\u0003\u00af\u0005\u00af\u127f\n\u00af",
    "\u0003\u00b0\u0003\u00b0\u0003\u00b0\u0003\u00b0\u0003\u00b1\u0003\u00b1",
    "\u0003\u00b1\u0003\u00b1\u0003\u00b1\u0003\u00b1\u0005\u00b1\u128b\n",
    "\u00b1\u0003\u00b1\u0003\u00b1\u0003\u00b1\u0003\u00b1\u0003\u00b1\u0003",
    "\u00b1\u0003\u00b1\u0003\u00b1\u0003\u00b1\u0005\u00b1\u1296\n\u00b1",
    "\u0003\u00b1\u0003\u00b1\u0003\u00b1\u0005\u00b1\u129b\n\u00b1\u0003",
    "\u00b1\u0005\u00b1\u129e\n\u00b1\u0003\u00b2\u0003\u00b2\u0003\u00b3",
    "\u0003\u00b3\u0003\u00b3\u0003\u00b3\u0003\u00b3\u0003\u00b3\u0003\u00b3",
    "\u0003\u00b3\u0003\u00b3\u0005\u00b3\u12ab\n\u00b3\u0003\u00b4\u0003",
    "\u00b4\u0005\u00b4\u12af\n\u00b4\u0003\u00b4\u0005\u00b4\u12b2\n\u00b4",
    "\u0003\u00b4\u0005\u00b4\u12b5\n\u00b4\u0003\u00b4\u0003\u00b4\u0003",
    "\u00b4\u0005\u00b4\u12ba\n\u00b4\u0005\u00b4\u12bc\n\u00b4\u0003\u00b5",
    "\u0003\u00b5\u0003\u00b5\u0003\u00b5\u0003\u00b5\u0003\u00b5\u0003\u00b5",
    "\u0003\u00b5\u0005\u00b5\u12c6\n\u00b5\u0003\u00b6\u0003\u00b6\u0003",
    "\u00b6\u0003\u00b6\u0003\u00b6\u0003\u00b6\u0003\u00b6\u0003\u00b6\u0003",
    "\u00b6\u0007\u00b6\u12d1\n\u00b6\f\u00b6\u000e\u00b6\u12d4\u000b\u00b6",
    "\u0003\u00b7\u0003\u00b7\u0003\u00b7\u0003\u00b7\u0005\u00b7\u12da\n",
    "\u00b7\u0003\u00b7\u0003\u00b7\u0003\u00b7\u0005\u00b7\u12df\n\u00b7",
    "\u0003\u00b8\u0003\u00b8\u0003\u00b8\u0003\u00b8\u0003\u00b8\u0005\u00b8",
    "\u12e6\n\u00b8\u0003\u00b9\u0003\u00b9\u0003\u00b9\u0003\u00b9\u0003",
    "\u00b9\u0003\u00b9\u0003\u00b9\u0003\u00b9\u0005\u00b9\u12f0\n\u00b9",
    "\u0003\u00ba\u0003\u00ba\u0003\u00ba\u0003\u00ba\u0003\u00ba\u0003\u00ba",
    "\u0003\u00ba\u0003\u00ba\u0007\u00ba\u12fa\n\u00ba\f\u00ba\u000e\u00ba",
    "\u12fd\u000b\u00ba\u0003\u00ba\u0005\u00ba\u1300\n\u00ba\u0003\u00ba",
    "\u0003\u00ba\u0005\u00ba\u1304\n\u00ba\u0003\u00bb\u0003\u00bb\u0003",
    "\u00bb\u0003\u00bb\u0003\u00bb\u0003\u00bb\u0003\u00bb\u0003\u00bb\u0003",
    "\u00bb\u0005\u00bb\u130f\n\u00bb\u0003\u00bb\u0003\u00bb\u0003\u00bb",
    "\u0005\u00bb\u1314\n\u00bb\u0003\u00bc\u0003\u00bc\u0003\u00bc\u0003",
    "\u00bc\u0003\u00bc\u0003\u00bc\u0005\u00bc\u131c\n\u00bc\u0003\u00bd",
    "\u0003\u00bd\u0005\u00bd\u1320\n\u00bd\u0003\u00bd\u0005\u00bd\u1323",
    "\n\u00bd\u0003\u00bd\u0005\u00bd\u1326\n\u00bd\u0003\u00bd\u0003\u00bd",
    "\u0003\u00bd\u0003\u00bd\u0003\u00bd\u0003\u00bd\u0003\u00bd\u0005\u00bd",
    "\u132f\n\u00bd\u0003\u00bd\u0003\u00bd\u0005\u00bd\u1333\n\u00bd\u0003",
    "\u00bd\u0005\u00bd\u1336\n\u00bd\u0003\u00bd\u0003\u00bd\u0005\u00bd",
    "\u133a\n\u00bd\u0003\u00be\u0003\u00be\u0005\u00be\u133e\n\u00be\u0003",
    "\u00be\u0005\u00be\u1341\n\u00be\u0003\u00be\u0005\u00be\u1344\n\u00be",
    "\u0003\u00be\u0003\u00be\u0003\u00be\u0005\u00be\u1349\n\u00be\u0003",
    "\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0005\u00be\u134f\n\u00be",
    "\u0007\u00be\u1351\n\u00be\f\u00be\u000e\u00be\u1354\u000b\u00be\u0003",
    "\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003",
    "\u00be\u0005\u00be\u135d\n\u00be\u0003\u00be\u0003\u00be\u0003\u00be",
    "\u0003\u00be\u0005\u00be\u1363\n\u00be\u0007\u00be\u1365\n\u00be\f\u00be",
    "\u000e\u00be\u1368\u000b\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0005",
    "\u00be\u136d\n\u00be\u0003\u00be\u0003\u00be\u0005\u00be\u1371\n\u00be",
    "\u0003\u00bf\u0003\u00bf\u0003\u00bf\u0003\u00bf\u0005\u00bf\u1377\n",
    "\u00bf\u0003\u00bf\u0005\u00bf\u137a\n\u00bf\u0003\u00c0\u0003\u00c0",
    "\u0003\u00c0\u0003\u00c0\u0003\u00c0\u0003\u00c0\u0003\u00c0\u0003\u00c0",
    "\u0003\u00c0\u0003\u00c0\u0005\u00c0\u1386\n\u00c0\u0003\u00c0\u0003",
    "\u00c0\u0005\u00c0\u138a\n\u00c0\u0003\u00c0\u0003\u00c0\u0005\u00c0",
    "\u138e\n\u00c0\u0003\u00c1\u0003\u00c1\u0003\u00c1\u0003\u00c1\u0003",
    "\u00c1\u0003\u00c1\u0005\u00c1\u1396\n\u00c1\u0003\u00c1\u0003\u00c1",
    "\u0005\u00c1\u139a\n\u00c1\u0003\u00c2\u0003\u00c2\u0003\u00c2\u0003",
    "\u00c2\u0003\u00c3\u0003\u00c3\u0005\u00c3\u13a2\n\u00c3\u0003\u00c3",
    "\u0005\u00c3\u13a5\n\u00c3\u0003\u00c3\u0003\u00c3\u0005\u00c3\u13a9",
    "\n\u00c3\u0003\u00c3\u0005\u00c3\u13ac\n\u00c3\u0003\u00c3\u0003\u00c3",
    "\u0005\u00c3\u13b0\n\u00c3\u0003\u00c3\u0005\u00c3\u13b3\n\u00c3\u0003",
    "\u00c3\u0005\u00c3\u13b6\n\u00c3\u0003\u00c4\u0003\u00c4\u0005\u00c4",
    "\u13ba\n\u00c4\u0003\u00c4\u0005\u00c4\u13bd\n\u00c4\u0003\u00c4\u0003",
    "\u00c4\u0005\u00c4\u13c1\n\u00c4\u0003\u00c4\u0003\u00c4\u0005\u00c4",
    "\u13c5\n\u00c4\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0007",
    "\u00c5\u13cb\n\u00c5\f\u00c5\u000e\u00c5\u13ce\u000b\u00c5\u0003\u00c6",
    "\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0005\u00c6\u13d4\n\u00c6\u0003",
    "\u00c6\u0003\u00c6\u0003\u00c7\u0005\u00c7\u13d9\n\u00c7\u0003\u00c7",
    "\u0003\u00c7\u0005\u00c7\u13dd\n\u00c7\u0003\u00c7\u0005\u00c7\u13e0",
    "\n\u00c7\u0003\u00c7\u0003\u00c7\u0003\u00c7\u0003\u00c7\u0005\u00c7",
    "\u13e6\n\u00c7\u0005\u00c7\u13e8\n\u00c7\u0003\u00c8\u0003\u00c8\u0003",
    "\u00c8\u0003\u00c8\u0003\u00c8\u0003\u00c8\u0003\u00c8\u0003\u00c8\u0005",
    "\u00c8\u13f2\n\u00c8\u0003\u00c8\u0003\u00c8\u0003\u00c8\u0007\u00c8",
    "\u13f7\n\u00c8\f\u00c8\u000e\u00c8\u13fa\u000b\u00c8\u0003\u00c8\u0005",
    "\u00c8\u13fd\n\u00c8\u0005\u00c8\u13ff\n\u00c8\u0003\u00c9\u0003\u00c9",
    "\u0005\u00c9\u1403\n\u00c9\u0003\u00c9\u0005\u00c9\u1406\n\u00c9\u0003",
    "\u00c9\u0003\u00c9\u0003\u00ca\u0003\u00ca\u0005\u00ca\u140c\n\u00ca",
    "\u0003\u00ca\u0003\u00ca\u0005\u00ca\u1410\n\u00ca\u0003\u00cb\u0003",
    "\u00cb\u0003\u00cb\u0003\u00cb\u0003\u00cb\u0007\u00cb\u1417\n\u00cb",
    "\f\u00cb\u000e\u00cb\u141a\u000b\u00cb\u0003\u00cc\u0003\u00cc\u0003",
    "\u00cc\u0005\u00cc\u141f\n\u00cc\u0003\u00cc\u0003\u00cc\u0003\u00cc",
    "\u0005\u00cc\u1424\n\u00cc\u0003\u00cc\u0005\u00cc\u1427\n\u00cc\u0005",
    "\u00cc\u1429\n\u00cc\u0003\u00cd\u0003\u00cd\u0003\u00cd\u0003\u00ce",
    "\u0003\u00ce\u0003\u00ce\u0003\u00ce\u0003\u00ce\u0003\u00ce\u0007\u00ce",
    "\u1434\n\u00ce\f\u00ce\u000e\u00ce\u1437\u000b\u00ce\u0003\u00cf\u0003",
    "\u00cf\u0003\u00cf\u0003\u00cf\u0003\u00cf\u0003\u00cf\u0007\u00cf\u143f",
    "\n\u00cf\f\u00cf\u000e\u00cf\u1442\u000b\u00cf\u0003\u00d0\u0003\u00d0",
    "\u0003\u00d0\u0003\u00d0\u0003\u00d0\u0003\u00d0\u0007\u00d0\u144a\n",
    "\u00d0\f\u00d0\u000e\u00d0\u144d\u000b\u00d0\u0003\u00d1\u0003\u00d1",
    "\u0003\u00d1\u0007\u00d1\u1452\n\u00d1\f\u00d1\u000e\u00d1\u1455\u000b",
    "\u00d1\u0003\u00d2\u0003\u00d2\u0007\u00d2\u1459\n\u00d2\f\u00d2\u000e",
    "\u00d2\u145c\u000b\u00d2\u0003\u00d2\u0007\u00d2\u145f\n\u00d2\f\u00d2",
    "\u000e\u00d2\u1462\u000b\u00d2\u0003\u00d2\u0003\u00d2\u0003\u00d2\u0007",
    "\u00d2\u1467\n\u00d2\f\u00d2\u000e\u00d2\u146a\u000b\u00d2\u0003\u00d2",
    "\u0007\u00d2\u146d\n\u00d2\f\u00d2\u000e\u00d2\u1470\u000b\u00d2\u0003",
    "\u00d2\u0003\u00d2\u0005\u00d2\u1474\n\u00d2\u0003\u00d3\u0003\u00d3",
    "\u0003\u00d3\u0003\u00d3\u0003\u00d3\u0003\u00d3\u0005\u00d3\u147c\n",
    "\u00d3\u0003\u00d3\u0005\u00d3\u147f\n\u00d3\u0003\u00d3\u0003\u00d3",
    "\u0003\u00d3\u0003\u00d3\u0003\u00d3\u0003\u00d3\u0005\u00d3\u1487\n",
    "\u00d3\u0003\u00d3\u0003\u00d3\u0005\u00d3\u148b\n\u00d3\u0003\u00d3",
    "\u0003\u00d3\u0003\u00d3\u0003\u00d3\u0003\u00d3\u0005\u00d3\u1492\n",
    "\u00d3\u0003\u00d3\u0003\u00d3\u0003\u00d3\u0003\u00d3\u0003\u00d3\u0003",
    "\u00d3\u0003\u00d3\u0005\u00d3\u149b\n\u00d3\u0003\u00d3\u0003\u00d3",
    "\u0003\u00d3\u0003\u00d3\u0003\u00d3\u0003\u00d3\u0003\u00d3\u0003\u00d3",
    "\u0003\u00d3\u0003\u00d3\u0003\u00d3\u0003\u00d3\u0007\u00d3\u14a9\n",
    "\u00d3\f\u00d3\u000e\u00d3\u14ac\u000b\u00d3\u0003\u00d3\u0003\u00d3",
    "\u0003\u00d3\u0005\u00d3\u14b1\n\u00d3\u0003\u00d3\u0003\u00d3\u0003",
    "\u00d3\u0003\u00d3\u0005\u00d3\u14b7\n\u00d3\u0003\u00d3\u0003\u00d3",
    "\u0005\u00d3\u14bb\n\u00d3\u0003\u00d4\u0003\u00d4\u0003\u00d4\u0003",
    "\u00d4\u0007\u00d4\u14c1\n\u00d4\f\u00d4\u000e\u00d4\u14c4\u000b\u00d4",
    "\u0003\u00d5\u0003\u00d5\u0003\u00d6\u0003\u00d6\u0003\u00d6\u0005\u00d6",
    "\u14cb\n\u00d6\u0003\u00d7\u0003\u00d7\u0003\u00d7\u0003\u00d7\u0007",
    "\u00d7\u14d1\n\u00d7\f\u00d7\u000e\u00d7\u14d4\u000b\u00d7\u0003\u00d7",
    "\u0003\u00d7\u0003\u00d8\u0003\u00d8\u0003\u00d8\u0003\u00d8\u0005\u00d8",
    "\u14dc\n\u00d8\u0003\u00d8\u0003\u00d8\u0003\u00d8\u0003\u00d8\u0003",
    "\u00d9\u0003\u00d9\u0003\u00d9\u0003\u00d9\u0003\u00d9\u0005\u00d9\u14e7",
    "\n\u00d9\u0003\u00da\u0003\u00da\u0005\u00da\u14eb\n\u00da\u0003\u00da",
    "\u0003\u00da\u0003\u00da\u0005\u00da\u14f0\n\u00da\u0003\u00da\u0003",
    "\u00da\u0003\u00da\u0003\u00da\u0005\u00da\u14f6\n\u00da\u0003\u00da",
    "\u0003\u00da\u0003\u00da\u0003\u00da\u0003\u00da\u0003\u00da\u0003\u00da",
    "\u0005\u00da\u14ff\n\u00da\u0003\u00da\u0003\u00da\u0003\u00da\u0003",
    "\u00da\u0003\u00da\u0003\u00da\u0005\u00da\u1507\n\u00da\u0003\u00da",
    "\u0005\u00da\u150a\n\u00da\u0003\u00da\u0003\u00da\u0003\u00da\u0005",
    "\u00da\u150f\n\u00da\u0003\u00da\u0003\u00da\u0003\u00da\u0005\u00da",
    "\u1514\n\u00da\u0003\u00da\u0003\u00da\u0005\u00da\u1518\n\u00da\u0003",
    "\u00db\u0003\u00db\u0003\u00dc\u0003\u00dc\u0003\u00dc\u0003\u00dc\u0003",
    "\u00dc\u0003\u00dc\u0003\u00dc\u0005\u00dc\u1523\n\u00dc\u0003\u00dd",
    "\u0003\u00dd\u0003\u00dd\u0005\u00dd\u1528\n\u00dd\u0003\u00de\u0003",
    "\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003",
    "\u00de\u0005\u00de\u1532\n\u00de\u0003\u00df\u0003\u00df\u0003\u00df",
    "\u0005\u00df\u1537\n\u00df\u0003\u00df\u0003\u00df\u0005\u00df\u153b",
    "\n\u00df\u0003\u00df\u0003\u00df\u0005\u00df\u153f\n\u00df\u0003\u00df",
    "\u0003\u00df\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0",
    "\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0005\u00e0\u154b\n\u00e0\u0003",
    "\u00e1\u0003\u00e1\u0003\u00e1\u0003\u00e1\u0003\u00e1\u0003\u00e1\u0003",
    "\u00e1\u0003\u00e1\u0005\u00e1\u1555\n\u00e1\u0003\u00e2\u0003\u00e2",
    "\u0005\u00e2\u1559\n\u00e2\u0003\u00e2\u0003\u00e2\u0003\u00e2\u0005",
    "\u00e2\u155e\n\u00e2\u0003\u00e2\u0003\u00e2\u0005\u00e2\u1562\n\u00e2",
    "\u0003\u00e2\u0005\u00e2\u1565\n\u00e2\u0003\u00e2\u0005\u00e2\u1568",
    "\n\u00e2\u0003\u00e2\u0005\u00e2\u156b\n\u00e2\u0003\u00e2\u0005\u00e2",
    "\u156e\n\u00e2\u0003\u00e2\u0005\u00e2\u1571\n\u00e2\u0003\u00e2\u0005",
    "\u00e2\u1574\n\u00e2\u0003\u00e2\u0003\u00e2\u0005\u00e2\u1578\n\u00e2",
    "\u0003\u00e2\u0003\u00e2\u0005\u00e2\u157c\n\u00e2\u0003\u00e2\u0005",
    "\u00e2\u157f\n\u00e2\u0003\u00e2\u0005\u00e2\u1582\n\u00e2\u0003\u00e2",
    "\u0005\u00e2\u1585\n\u00e2\u0003\u00e2\u0005\u00e2\u1588\n\u00e2\u0003",
    "\u00e2\u0005\u00e2\u158b\n\u00e2\u0003\u00e2\u0005\u00e2\u158e\n\u00e2",
    "\u0005\u00e2\u1590\n\u00e2\u0003\u00e3\u0003\u00e3\u0005\u00e3\u1594",
    "\n\u00e3\u0003\u00e3\u0003\u00e3\u0003\u00e3\u0005\u00e3\u1599\n\u00e3",
    "\u0003\u00e3\u0003\u00e3\u0005\u00e3\u159d\n\u00e3\u0003\u00e3\u0005",
    "\u00e3\u15a0\n\u00e3\u0003\u00e3\u0005\u00e3\u15a3\n\u00e3\u0003\u00e3",
    "\u0005\u00e3\u15a6\n\u00e3\u0003\u00e3\u0005\u00e3\u15a9\n\u00e3\u0003",
    "\u00e3\u0005\u00e3\u15ac\n\u00e3\u0005\u00e3\u15ae\n\u00e3\u0003\u00e4",
    "\u0003\u00e4\u0005\u00e4\u15b2\n\u00e4\u0003\u00e4\u0003\u00e4\u0003",
    "\u00e5\u0003\u00e5\u0005\u00e5\u15b8\n\u00e5\u0003\u00e5\u0003\u00e5",
    "\u0005\u00e5\u15bc\n\u00e5\u0003\u00e6\u0003\u00e6\u0006\u00e6\u15c0",
    "\n\u00e6\r\u00e6\u000e\u00e6\u15c1\u0003\u00e6\u0003\u00e6\u0005\u00e6",
    "\u15c6\n\u00e6\u0003\u00e7\u0003\u00e7\u0003\u00e7\u0003\u00e7\u0003",
    "\u00e7\u0003\u00e7\u0003\u00e7\u0003\u00e7\u0005\u00e7\u15d0\n\u00e7",
    "\u0003\u00e8\u0003\u00e8\u0003\u00e9\u0003\u00e9\u0005\u00e9\u15d6\n",
    "\u00e9\u0003\u00e9\u0003\u00e9\u0007\u00e9\u15da\n\u00e9\f\u00e9\u000e",
    "\u00e9\u15dd\u000b\u00e9\u0003\u00ea\u0003\u00ea\u0003\u00ea\u0003\u00ea",
    "\u0003\u00ea\u0003\u00ea\u0005\u00ea\u15e5\n\u00ea\u0003\u00ea\u0003",
    "\u00ea\u0005\u00ea\u15e9\n\u00ea\u0003\u00ea\u0003\u00ea\u0005\u00ea",
    "\u15ed\n\u00ea\u0003\u00ea\u0003\u00ea\u0003\u00ea\u0005\u00ea\u15f2",
    "\n\u00ea\u0003\u00ea\u0003\u00ea\u0005\u00ea\u15f6\n\u00ea\u0005\u00ea",
    "\u15f8\n\u00ea\u0003\u00eb\u0003\u00eb\u0003\u00eb\u0003\u00eb\u0007",
    "\u00eb\u15fe\n\u00eb\f\u00eb\u000e\u00eb\u1601\u000b\u00eb\u0003\u00eb",
    "\u0003\u00eb\u0003\u00eb\u0005\u00eb\u1606\n\u00eb\u0003\u00eb\u0003",
    "\u00eb\u0003\u00eb\u0003\u00eb\u0003\u00eb\u0003\u00eb\u0003\u00eb\u0003",
    "\u00eb\u0003\u00eb\u0003\u00eb\u0003\u00eb\u0003\u00eb\u0003\u00eb\u0005",
    "\u00eb\u1615\n\u00eb\u0003\u00eb\u0003\u00eb\u0006\u00eb\u1619\n\u00eb",
    "\r\u00eb\u000e\u00eb\u161a\u0005\u00eb\u161d\n\u00eb\u0003\u00eb\u0003",
    "\u00eb\u0006\u00eb\u1621\n\u00eb\r\u00eb\u000e\u00eb\u1622\u0005\u00eb",
    "\u1625\n\u00eb\u0005\u00eb\u1627\n\u00eb\u0003\u00ec\u0003\u00ec\u0003",
    "\u00ec\u0003\u00ec\u0005\u00ec\u162d\n\u00ec\u0003\u00ec\u0003\u00ec",
    "\u0003\u00ec\u0003\u00ec\u0003\u00ec\u0003\u00ec\u0005\u00ec\u1635\n",
    "\u00ec\u0003\u00ed\u0003\u00ed\u0003\u00ed\u0003\u00ed\u0003\u00ed\u0003",
    "\u00ed\u0005\u00ed\u163d\n\u00ed\u0003\u00ee\u0003\u00ee\u0003\u00ee",
    "\u0005\u00ee\u1642\n\u00ee\u0003\u00ee\u0005\u00ee\u1645\n\u00ee\u0003",
    "\u00ee\u0005\u00ee\u1648\n\u00ee\u0003\u00ee\u0005\u00ee\u164b\n\u00ee",
    "\u0003\u00ef\u0003\u00ef\u0003\u00ef\u0003\u00ef\u0003\u00f0\u0003\u00f0",
    "\u0003\u00f0\u0003\u00f1\u0003\u00f1\u0003\u00f1\u0003\u00f2\u0003\u00f2",
    "\u0003\u00f2\u0003\u00f2\u0005\u00f2\u165b\n\u00f2\u0003\u00f2\u0003",
    "\u00f2\u0003\u00f2\u0005\u00f2\u1660\n\u00f2\u0003\u00f2\u0003\u00f2",
    "\u0003\u00f3\u0003\u00f3\u0003\u00f3\u0003\u00f3\u0007\u00f3\u1668\n",
    "\u00f3\f\u00f3\u000e\u00f3\u166b\u000b\u00f3\u0003\u00f3\u0003\u00f3",
    "\u0005\u00f3\u166f\n\u00f3\u0003\u00f3\u0003\u00f3\u0003\u00f3\u0003",
    "\u00f3\u0003\u00f3\u0005\u00f3\u1676\n\u00f3\u0003\u00f3\u0003\u00f3",
    "\u0003\u00f3\u0003\u00f3\u0007\u00f3\u167c\n\u00f3\f\u00f3\u000e\u00f3",
    "\u167f\u000b\u00f3\u0003\u00f3\u0003\u00f3\u0003\u00f3\u0003\u00f3\u0003",
    "\u00f3\u0007\u00f3\u1686\n\u00f3\f\u00f3\u000e\u00f3\u1689\u000b\u00f3",
    "\u0005\u00f3\u168b\n\u00f3\u0005\u00f3\u168d\n\u00f3\u0003\u00f4\u0003",
    "\u00f4\u0005\u00f4\u1691\n\u00f4\u0003\u00f5\u0003\u00f5\u0003\u00f5",
    "\u0003\u00f5\u0005\u00f5\u1697\n\u00f5\u0003\u00f6\u0003\u00f6\u0003",
    "\u00f6\u0003\u00f6\u0005\u00f6\u169d\n\u00f6\u0003\u00f6\u0003\u00f6",
    "\u0003\u00f6\u0003\u00f6\u0003\u00f6\u0005\u00f6\u16a4\n\u00f6\u0003",
    "\u00f7\u0003\u00f7\u0005\u00f7\u16a8\n\u00f7\u0003\u00f8\u0003\u00f8",
    "\u0003\u00f8\u0003\u00f8\u0005\u00f8\u16ae\n\u00f8\u0003\u00f8\u0003",
    "\u00f8\u0003\u00f8\u0003\u00f8\u0003\u00f8\u0003\u00f8\u0003\u00f8\u0003",
    "\u00f8\u0003\u00f8\u0003\u00f8\u0003\u00f8\u0005\u00f8\u16bb\n\u00f8",
    "\u0003\u00f8\u0003\u00f8\u0003\u00f8\u0003\u00f8\u0003\u00f8\u0003\u00f8",
    "\u0005\u00f8\u16c3\n\u00f8\u0003\u00f9\u0003\u00f9\u0003\u00f9\u0003",
    "\u00f9\u0003\u00f9\u0007\u00f9\u16ca\n\u00f9\f\u00f9\u000e\u00f9\u16cd",
    "\u000b\u00f9\u0005\u00f9\u16cf\n\u00f9\u0003\u00fa\u0003\u00fa\u0005",
    "\u00fa\u16d3\n\u00fa\u0003\u00fb\u0003\u00fb\u0005\u00fb\u16d7\n\u00fb",
    "\u0003\u00fb\u0003\u00fb\u0005\u00fb\u16db\n\u00fb\u0003\u00fb\u0005",
    "\u00fb\u16de\n\u00fb\u0003\u00fb\u0005\u00fb\u16e1\n\u00fb\u0003\u00fb",
    "\u0005\u00fb\u16e4\n\u00fb\u0003\u00fc\u0003\u00fc\u0005\u00fc\u16e8",
    "\n\u00fc\u0003\u00fc\u0003\u00fc\u0005\u00fc\u16ec\n\u00fc\u0003\u00fc",
    "\u0005\u00fc\u16ef\n\u00fc\u0003\u00fc\u0005\u00fc\u16f2\n\u00fc\u0003",
    "\u00fc\u0005\u00fc\u16f5\n\u00fc\u0003\u00fd\u0003\u00fd\u0003\u00fd",
    "\u0003\u00fe\u0003\u00fe\u0005\u00fe\u16fc\n\u00fe\u0003\u00fe\u0003",
    "\u00fe\u0005\u00fe\u1700\n\u00fe\u0003\u00fe\u0003\u00fe\u0003\u00ff",
    "\u0003\u00ff\u0003\u00ff\u0003\u00ff\u0003\u0100\u0003\u0100\u0003\u0100",
    "\u0003\u0100\u0003\u0100\u0007\u0100\u170d\n\u0100\f\u0100\u000e\u0100",
    "\u1710\u000b\u0100\u0003\u0101\u0003\u0101\u0003\u0101\u0003\u0102\u0003",
    "\u0102\u0003\u0102\u0003\u0102\u0005\u0102\u1719\n\u0102\u0003\u0102",
    "\u0003\u0102\u0005\u0102\u171d\n\u0102\u0005\u0102\u171f\n\u0102\u0003",
    "\u0103\u0003\u0103\u0003\u0103\u0003\u0103\u0003\u0103\u0003\u0104\u0003",
    "\u0104\u0003\u0104\u0003\u0104\u0005\u0104\u172a\n\u0104\u0003\u0105",
    "\u0003\u0105\u0003\u0105\u0003\u0105\u0003\u0105\u0003\u0105\u0003\u0105",
    "\u0003\u0105\u0003\u0105\u0003\u0105\u0003\u0105\u0005\u0105\u1737\n",
    "\u0105\u0005\u0105\u1739\n\u0105\u0003\u0106\u0003\u0106\u0005\u0106",
    "\u173d\n\u0106\u0003\u0106\u0003\u0106\u0003\u0106\u0003\u0106\u0007",
    "\u0106\u1743\n\u0106\f\u0106\u000e\u0106\u1746\u000b\u0106\u0003\u0107",
    "\u0003\u0107\u0003\u0107\u0003\u0107\u0003\u0107\u0003\u0107\u0003\u0107",
    "\u0005\u0107\u174f\n\u0107\u0003\u0108\u0003\u0108\u0005\u0108\u1753",
    "\n\u0108\u0003\u0108\u0005\u0108\u1756\n\u0108\u0003\u0108\u0003\u0108",
    "\u0003\u0109\u0003\u0109\u0005\u0109\u175c\n\u0109\u0003\u0109\u0005",
    "\u0109\u175f\n\u0109\u0003\u0109\u0005\u0109\u1762\n\u0109\u0003\u010a",
    "\u0003\u010a\u0003\u010a\u0003\u010a\u0003\u010a\u0003\u010a\u0003\u010a",
    "\u0005\u010a\u176b\n\u010a\u0003\u010b\u0003\u010b\u0003\u010b\u0003",
    "\u010b\u0003\u010b\u0003\u010b\u0003\u010b\u0005\u010b\u1774\n\u010b",
    "\u0003\u010c\u0003\u010c\u0003\u010c\u0003\u010c\u0003\u010c\u0003\u010c",
    "\u0007\u010c\u177c\n\u010c\f\u010c\u000e\u010c\u177f\u000b\u010c\u0003",
    "\u010c\u0005\u010c\u1782\n\u010c\u0003\u010d\u0003\u010d\u0003\u010d",
    "\u0003\u010d\u0003\u010d\u0003\u010d\u0007\u010d\u178a\n\u010d\f\u010d",
    "\u000e\u010d\u178d\u000b\u010d\u0003\u010e\u0003\u010e\u0003\u010e\u0003",
    "\u010e\u0003\u010e\u0003\u010e\u0003\u010e\u0005\u010e\u1796\n\u010e",
    "\u0003\u010f\u0003\u010f\u0003\u010f\u0003\u0110\u0003\u0110\u0003\u0110",
    "\u0005\u0110\u179e\n\u0110\u0003\u0110\u0005\u0110\u17a1\n\u0110\u0003",
    "\u0111\u0003\u0111\u0003\u0111\u0003\u0111\u0003\u0111\u0007\u0111\u17a8",
    "\n\u0111\f\u0111\u000e\u0111\u17ab\u000b\u0111\u0005\u0111\u17ad\n\u0111",
    "\u0003\u0111\u0003\u0111\u0005\u0111\u17b1\n\u0111\u0003\u0111\u0007",
    "\u0111\u17b4\n\u0111\f\u0111\u000e\u0111\u17b7\u000b\u0111\u0003\u0111",
    "\u0005\u0111\u17ba\n\u0111\u0003\u0112\u0003\u0112\u0003\u0112\u0003",
    "\u0112\u0003\u0112\u0007\u0112\u17c1\n\u0112\f\u0112\u000e\u0112\u17c4",
    "\u000b\u0112\u0005\u0112\u17c6\n\u0112\u0003\u0113\u0003\u0113\u0003",
    "\u0113\u0003\u0114\u0003\u0114\u0003\u0114\u0003\u0115\u0003\u0115\u0003",
    "\u0115\u0003\u0115\u0003\u0115\u0003\u0115\u0003\u0115\u0003\u0115\u0003",
    "\u0115\u0003\u0115\u0003\u0115\u0003\u0115\u0003\u0115\u0003\u0115\u0003",
    "\u0115\u0003\u0115\u0003\u0115\u0003\u0115\u0003\u0115\u0003\u0115\u0003",
    "\u0115\u0007\u0115\u17e3\n\u0115\f\u0115\u000e\u0115\u17e6\u000b\u0115",
    "\u0005\u0115\u17e8\n\u0115\u0003\u0115\u0005\u0115\u17eb\n\u0115\u0003",
    "\u0116\u0003\u0116\u0003\u0117\u0003\u0117\u0003\u0118\u0003\u0118\u0003",
    "\u0119\u0003\u0119\u0003\u0119\u0003\u0119\u0003\u011a\u0003\u011a\u0003",
    "\u011a\u0003\u011a\u0003\u011a\u0003\u011a\u0003\u011a\u0003\u011a\u0003",
    "\u011a\u0003\u011a\u0003\u011a\u0003\u011a\u0003\u011a\u0003\u011a\u0003",
    "\u011a\u0003\u011a\u0003\u011a\u0003\u011a\u0003\u011a\u0003\u011a\u0003",
    "\u011a\u0003\u011a\u0003\u011a\u0003\u011a\u0003\u011a\u0003\u011a\u0003",
    "\u011a\u0003\u011a\u0003\u011a\u0003\u011a\u0003\u011a\u0003\u011a\u0003",
    "\u011a\u0003\u011a\u0003\u011a\u0003\u011a\u0003\u011a\u0003\u011a\u0003",
    "\u011a\u0003\u011a\u0003\u011a\u0003\u011a\u0007\u011a\u1821\n\u011a",
    "\f\u011a\u000e\u011a\u1824\u000b\u011a\u0003\u011a\u0003\u011a\u0005",
    "\u011a\u1828\n\u011a\u0003\u011b\u0003\u011b\u0003\u011b\u0003\u011b",
    "\u0003\u011b\u0003\u011b\u0003\u011c\u0003\u011c\u0003\u011d\u0003\u011d",
    "\u0003\u011d\u0003\u011d\u0003\u011d\u0003\u011d\u0003\u011d\u0003\u011d",
    "\u0003\u011d\u0003\u011d\u0003\u011d\u0003\u011d\u0003\u011d\u0003\u011d",
    "\u0003\u011d\u0003\u011d\u0003\u011d\u0003\u011d\u0005\u011d\u1844\n",
    "\u011d\u0003\u011e\u0003\u011e\u0003\u011e\u0003\u011e\u0003\u011e\u0003",
    "\u011e\u0003\u011e\u0003\u011e\u0003\u011e\u0003\u011e\u0003\u011e\u0003",
    "\u011e\u0005\u011e\u1852\n\u011e\u0003\u011f\u0003\u011f\u0003\u011f",
    "\u0007\u011f\u1857\n\u011f\f\u011f\u000e\u011f\u185a\u000b\u011f\u0003",
    "\u011f\u0005\u011f\u185d\n\u011f\u0003\u0120\u0003\u0120\u0003\u0120",
    "\u0003\u0120\u0005\u0120\u1863\n\u0120\u0003\u0121\u0003\u0121\u0003",
    "\u0121\u0003\u0121\u0003\u0121\u0003\u0121\u0005\u0121\u186b\n\u0121",
    "\u0005\u0121\u186d\n\u0121\u0003\u0122\u0003\u0122\u0003\u0122\u0003",
    "\u0122\u0003\u0123\u0003\u0123\u0003\u0123\u0003\u0123\u0003\u0123\u0005",
    "\u0123\u1878\n\u0123\u0003\u0124\u0003\u0124\u0003\u0124\u0003\u0124",
    "\u0003\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0005\u0125\u1882\n",
    "\u0125\u0003\u0126\u0003\u0126\u0003\u0126\u0003\u0126\u0003\u0126\u0005",
    "\u0126\u1889\n\u0126\u0003\u0127\u0003\u0127\u0003\u0127\u0003\u0127",
    "\u0005\u0127\u188f\n\u0127\u0003\u0128\u0003\u0128\u0003\u0128\u0003",
    "\u0128\u0003\u0129\u0003\u0129\u0005\u0129\u1897\n\u0129\u0003\u012a",
    "\u0003\u012a\u0003\u012a\u0005\u012a\u189c\n\u012a\u0003\u012a\u0003",
    "\u012a\u0003\u012a\u0003\u012a\u0007\u012a\u18a2\n\u012a\f\u012a\u000e",
    "\u012a\u18a5\u000b\u012a\u0003\u012a\u0003\u012a\u0003\u012a\u0007\u012a",
    "\u18aa\n\u012a\f\u012a\u000e\u012a\u18ad\u000b\u012a\u0003\u012a\u0003",
    "\u012a\u0003\u012a\u0007\u012a\u18b2\n\u012a\f\u012a\u000e\u012a\u18b5",
    "\u000b\u012a\u0003\u012a\u0003\u012a\u0003\u012a\u0007\u012a\u18ba\n",
    "\u012a\f\u012a\u000e\u012a\u18bd\u000b\u012a\u0003\u012a\u0003\u012a",
    "\u0003\u012a\u0007\u012a\u18c2\n\u012a\f\u012a\u000e\u012a\u18c5\u000b",
    "\u012a\u0003\u012a\u0007\u012a\u18c8\n\u012a\f\u012a\u000e\u012a\u18cb",
    "\u000b\u012a\u0003\u012a\u0003\u012a\u0005\u012a\u18cf\n\u012a\u0003",
    "\u012b\u0003\u012b\u0003\u012b\u0005\u012b\u18d4\n\u012b\u0003\u012b",
    "\u0006\u012b\u18d7\n\u012b\r\u012b\u000e\u012b\u18d8\u0003\u012b\u0003",
    "\u012b\u0006\u012b\u18dd\n\u012b\r\u012b\u000e\u012b\u18de\u0005\u012b",
    "\u18e1\n\u012b\u0003\u012b\u0003\u012b\u0003\u012b\u0003\u012c\u0003",
    "\u012c\u0003\u012c\u0003\u012c\u0006\u012c\u18ea\n\u012c\r\u012c\u000e",
    "\u012c\u18eb\u0003\u012c\u0007\u012c\u18ef\n\u012c\f\u012c\u000e\u012c",
    "\u18f2\u000b\u012c\u0003\u012c\u0003\u012c\u0006\u012c\u18f6\n\u012c",
    "\r\u012c\u000e\u012c\u18f7\u0005\u012c\u18fa\n\u012c\u0003\u012c\u0003",
    "\u012c\u0003\u012c\u0003\u012d\u0003\u012d\u0003\u012d\u0003\u012e\u0003",
    "\u012e\u0003\u012e\u0003\u012f\u0003\u012f\u0003\u012f\u0005\u012f\u1908",
    "\n\u012f\u0003\u012f\u0003\u012f\u0006\u012f\u190c\n\u012f\r\u012f\u000e",
    "\u012f\u190d\u0003\u012f\u0003\u012f\u0003\u012f\u0005\u012f\u1913\n",
    "\u012f\u0003\u0130\u0003\u0130\u0003\u0130\u0005\u0130\u1918\n\u0130",
    "\u0003\u0130\u0003\u0130\u0006\u0130\u191c\n\u0130\r\u0130\u000e\u0130",
    "\u191d\u0003\u0130\u0003\u0130\u0003\u0130\u0003\u0130\u0003\u0130\u0005",
    "\u0130\u1925\n\u0130\u0003\u0131\u0003\u0131\u0003\u0131\u0003\u0132",
    "\u0003\u0132\u0003\u0132\u0005\u0132\u192d\n\u0132\u0003\u0132\u0003",
    "\u0132\u0003\u0132\u0003\u0132\u0006\u0132\u1933\n\u0132\r\u0132\u000e",
    "\u0132\u1934\u0003\u0132\u0003\u0132\u0003\u0132\u0005\u0132\u193a\n",
    "\u0132\u0003\u0133\u0003\u0133\u0003\u0133\u0003\u0133\u0005\u0133\u1940",
    "\n\u0133\u0003\u0133\u0005\u0133\u1943\n\u0133\u0003\u0133\u0003\u0133",
    "\u0003\u0133\u0003\u0133\u0003\u0133\u0003\u0133\u0005\u0133\u194b\n",
    "\u0133\u0003\u0134\u0003\u0134\u0003\u0134\u0003\u0134\u0003\u0134\u0005",
    "\u0134\u1952\n\u0134\u0003\u0135\u0003\u0135\u0003\u0135\u0003\u0135",
    "\u0003\u0135\u0003\u0135\u0003\u0136\u0003\u0136\u0003\u0136\u0003\u0136",
    "\u0003\u0136\u0003\u0137\u0003\u0137\u0003\u0137\u0003\u0137\u0003\u0137",
    "\u0003\u0137\u0003\u0137\u0007\u0137\u1966\n\u0137\f\u0137\u000e\u0137",
    "\u1969\u000b\u0137\u0003\u0137\u0005\u0137\u196c\n\u0137\u0003\u0137",
    "\u0003\u0137\u0003\u0138\u0003\u0138\u0003\u0138\u0003\u0138\u0003\u0138",
    "\u0003\u0138\u0003\u0138\u0003\u0138\u0003\u0138\u0003\u0138\u0007\u0138",
    "\u197a\n\u0138\f\u0138\u000e\u0138\u197d\u000b\u0138\u0003\u0138\u0003",
    "\u0138\u0003\u0139\u0003\u0139\u0003\u0139\u0003\u0139\u0003\u0139\u0003",
    "\u0139\u0005\u0139\u1987\n\u0139\u0003\u0139\u0003\u0139\u0003\u0139",
    "\u0003\u0139\u0003\u0139\u0003\u0139\u0003\u0139\u0005\u0139\u1990\n",
    "\u0139\u0003\u013a\u0003\u013a\u0003\u013a\u0003\u013a\u0005\u013a\u1996",
    "\n\u013a\u0003\u013a\u0005\u013a\u1999\n\u013a\u0003\u013a\u0003\u013a",
    "\u0003\u013a\u0005\u013a\u199e\n\u013a\u0003\u013b\u0003\u013b\u0003",
    "\u013b\u0005\u013b\u19a3\n\u013b\u0003\u013b\u0003\u013b\u0003\u013b",
    "\u0003\u013b\u0003\u013b\u0003\u013b\u0005\u013b\u19ab\n\u013b\u0003",
    "\u013c\u0003\u013c\u0005\u013c\u19af\n\u013c\u0003\u013c\u0003\u013c",
    "\u0003\u013d\u0003\u013d\u0003\u013d\u0005\u013d\u19b6\n\u013d\u0003",
    "\u013d\u0003\u013d\u0006\u013d\u19ba\n\u013d\r\u013d\u000e\u013d\u19bb",
    "\u0003\u013e\u0003\u013e\u0003\u013e\u0003\u013e\u0006\u013e\u19c2\n",
    "\u013e\r\u013e\u000e\u013e\u19c3\u0003\u013f\u0003\u013f\u0003\u013f",
    "\u0003\u013f\u0003\u013f\u0007\u013f\u19cb\n\u013f\f\u013f\u000e\u013f",
    "\u19ce\u000b\u013f\u0003\u013f\u0003\u013f\u0003\u013f\u0005\u013f\u19d3",
    "\n\u013f\u0003\u013f\u0003\u013f\u0003\u013f\u0007\u013f\u19d8\n\u013f",
    "\f\u013f\u000e\u013f\u19db\u000b\u013f\u0003\u013f\u0003\u013f\u0003",
    "\u013f\u0003\u013f\u0005\u013f\u19e1\n\u013f\u0003\u013f\u0007\u013f",
    "\u19e4\n\u013f\f\u013f\u000e\u013f\u19e7\u000b\u013f\u0005\u013f\u19e9",
    "\n\u013f\u0005\u013f\u19eb\n\u013f\u0003\u013f\u0003\u013f\u0006\u013f",
    "\u19ef\n\u013f\r\u013f\u000e\u013f\u19f0\u0005\u013f\u19f3\n\u013f\u0003",
    "\u013f\u0003\u013f\u0007\u013f\u19f7\n\u013f\f\u013f\u000e\u013f\u19fa",
    "\u000b\u013f\u0005\u013f\u19fc\n\u013f\u0003\u0140\u0003\u0140\u0003",
    "\u0140\u0003\u0140\u0003\u0140\u0007\u0140\u1a03\n\u0140\f\u0140\u000e",
    "\u0140\u1a06\u000b\u0140\u0003\u0140\u0003\u0140\u0003\u0140\u0005\u0140",
    "\u1a0b\n\u0140\u0003\u0140\u0003\u0140\u0003\u0140\u0007\u0140\u1a10",
    "\n\u0140\f\u0140\u000e\u0140\u1a13\u000b\u0140\u0003\u0140\u0003\u0140",
    "\u0003\u0140\u0003\u0140\u0005\u0140\u1a19\n\u0140\u0003\u0140\u0007",
    "\u0140\u1a1c\n\u0140\f\u0140\u000e\u0140\u1a1f\u000b\u0140\u0005\u0140",
    "\u1a21\n\u0140\u0005\u0140\u1a23\n\u0140\u0003\u0140\u0003\u0140\u0006",
    "\u0140\u1a27\n\u0140\r\u0140\u000e\u0140\u1a28\u0005\u0140\u1a2b\n\u0140",
    "\u0003\u0140\u0003\u0140\u0007\u0140\u1a2f\n\u0140\f\u0140\u000e\u0140",
    "\u1a32\u000b\u0140\u0005\u0140\u1a34\n\u0140\u0003\u0141\u0003\u0141",
    "\u0003\u0141\u0005\u0141\u1a39\n\u0141\u0003\u0141\u0003\u0141\u0003",
    "\u0141\u0007\u0141\u1a3e\n\u0141\f\u0141\u000e\u0141\u1a41\u000b\u0141",
    "\u0003\u0142\u0003\u0142\u0003\u0142\u0003\u0142\u0007\u0142\u1a47\n",
    "\u0142\f\u0142\u000e\u0142\u1a4a\u000b\u0142\u0003\u0142\u0003\u0142",
    "\u0005\u0142\u1a4e\n\u0142\u0003\u0142\u0003\u0142\u0003\u0142\u0003",
    "\u0142\u0003\u0142\u0007\u0142\u1a55\n\u0142\f\u0142\u000e\u0142\u1a58",
    "\u000b\u0142\u0003\u0142\u0003\u0142\u0003\u0142\u0003\u0142\u0005\u0142",
    "\u1a5e\n\u0142\u0003\u0142\u0007\u0142\u1a61\n\u0142\f\u0142\u000e\u0142",
    "\u1a64\u000b\u0142\u0005\u0142\u1a66\n\u0142\u0005\u0142\u1a68\n\u0142",
    "\u0003\u0142\u0003\u0142\u0003\u0142\u0003\u0142\u0007\u0142\u1a6e\n",
    "\u0142\f\u0142\u000e\u0142\u1a71\u000b\u0142\u0005\u0142\u1a73\n\u0142",
    "\u0003\u0143\u0003\u0143\u0003\u0143\u0003\u0143\u0003\u0143\u0003\u0143",
    "\u0003\u0143\u0003\u0143\u0007\u0143\u1a7d\n\u0143\f\u0143\u000e\u0143",
    "\u1a80\u000b\u0143\u0003\u0143\u0003\u0143\u0003\u0143\u0005\u0143\u1a85",
    "\n\u0143\u0003\u0144\u0003\u0144\u0003\u0144\u0003\u0144\u0003\u0144",
    "\u0007\u0144\u1a8c\n\u0144\f\u0144\u000e\u0144\u1a8f\u000b\u0144\u0003",
    "\u0145\u0003\u0145\u0003\u0145\u0003\u0145\u0007\u0145\u1a95\n\u0145",
    "\f\u0145\u000e\u0145\u1a98\u000b\u0145\u0003\u0145\u0003\u0145\u0005",
    "\u0145\u1a9c\n\u0145\u0003\u0145\u0003\u0145\u0003\u0145\u0003\u0145",
    "\u0003\u0145\u0007\u0145\u1aa3\n\u0145\f\u0145\u000e\u0145\u1aa6\u000b",
    "\u0145\u0003\u0145\u0003\u0145\u0003\u0145\u0005\u0145\u1aab\n\u0145",
    "\u0003\u0145\u0003\u0145\u0003\u0145\u0003\u0145\u0003\u0145\u0003\u0145",
    "\u0003\u0145\u0007\u0145\u1ab4\n\u0145\f\u0145\u000e\u0145\u1ab7\u000b",
    "\u0145\u0005\u0145\u1ab9\n\u0145\u0003\u0146\u0003\u0146\u0003\u0146",
    "\u0003\u0146\u0003\u0146\u0003\u0146\u0003\u0146\u0003\u0146\u0007\u0146",
    "\u1ac3\n\u0146\f\u0146\u000e\u0146\u1ac6\u000b\u0146\u0003\u0147\u0003",
    "\u0147\u0003\u0147\u0003\u0147\u0005\u0147\u1acc\n\u0147\u0003\u0147",
    "\u0003\u0147\u0003\u0147\u0005\u0147\u1ad1\n\u0147\u0003\u0148\u0003",
    "\u0148\u0003\u0148\u0003\u0148\u0005\u0148\u1ad7\n\u0148\u0003\u0148",
    "\u0003\u0148\u0003\u0148\u0003\u0148\u0003\u0148\u0005\u0148\u1ade\n",
    "\u0148\u0003\u0149\u0003\u0149\u0003\u0149\u0003\u0149\u0005\u0149\u1ae4",
    "\n\u0149\u0003\u0149\u0003\u0149\u0003\u0149\u0005\u0149\u1ae9\n\u0149",
    "\u0003\u0149\u0003\u0149\u0003\u0149\u0003\u014a\u0003\u014a\u0003\u014a",
    "\u0005\u014a\u1af1\n\u014a\u0003\u014a\u0003\u014a\u0003\u014a\u0005",
    "\u014a\u1af6\n\u014a\u0003\u014a\u0005\u014a\u1af9\n\u014a\u0005\u014a",
    "\u1afb\n\u014a\u0003\u014b\u0003\u014b\u0003\u014b\u0003\u014b\u0003",
    "\u014b\u0003\u014b\u0003\u014b\u0003\u014b\u0003\u014b\u0003\u014b\u0003",
    "\u014b\u0005\u014b\u1b08\n\u014b\u0003\u014c\u0003\u014c\u0003\u014c",
    "\u0003\u014c\u0003\u014c\u0003\u014c\u0003\u014c\u0003\u014c\u0003\u014c",
    "\u0003\u014c\u0005\u014c\u1b14\n\u014c\u0003\u014d\u0003\u014d\u0003",
    "\u014d\u0003\u014d\u0003\u014e\u0003\u014e\u0003\u014e\u0003\u014e\u0003",
    "\u014e\u0003\u014e\u0003\u014e\u0003\u014e\u0003\u014e\u0003\u014f\u0003",
    "\u014f\u0003\u014f\u0003\u014f\u0003\u014f\u0003\u014f\u0003\u014f\u0005",
    "\u014f\u1b2a\n\u014f\u0003\u0150\u0003\u0150\u0003\u0150\u0005\u0150",
    "\u1b2f\n\u0150\u0003\u0150\u0003\u0150\u0003\u0150\u0003\u0150\u0003",
    "\u0151\u0003\u0151\u0003\u0151\u0003\u0151\u0003\u0151\u0005\u0151\u1b3a",
    "\n\u0151\u0003\u0151\u0003\u0151\u0005\u0151\u1b3e\n\u0151\u0003\u0152",
    "\u0003\u0152\u0003\u0152\u0003\u0152\u0005\u0152\u1b44\n\u0152\u0003",
    "\u0152\u0003\u0152\u0005\u0152\u1b48\n\u0152\u0003\u0153\u0003\u0153",
    "\u0003\u0153\u0005\u0153\u1b4d\n\u0153\u0003\u0153\u0003\u0153\u0005",
    "\u0153\u1b51\n\u0153\u0003\u0154\u0003\u0154\u0003\u0154\u0003\u0154",
    "\u0003\u0154\u0003\u0154\u0003\u0154\u0003\u0154\u0003\u0154\u0003\u0154",
    "\u0005\u0154\u1b5d\n\u0154\u0003\u0154\u0003\u0154\u0005\u0154\u1b61",
    "\n\u0154\u0003\u0154\u0003\u0154\u0003\u0154\u0003\u0154\u0003\u0154",
    "\u0003\u0154\u0003\u0154\u0005\u0154\u1b6a\n\u0154\u0003\u0154\u0003",
    "\u0154\u0003\u0154\u0003\u0154\u0003\u0154\u0003\u0154\u0005\u0154\u1b72",
    "\n\u0154\u0003\u0154\u0003\u0154\u0003\u0154\u0003\u0154\u0005\u0154",
    "\u1b78\n\u0154\u0003\u0154\u0005\u0154\u1b7b\n\u0154\u0003\u0154\u0003",
    "\u0154\u0003\u0154\u0003\u0154\u0005\u0154\u1b81\n\u0154\u0003\u0155",
    "\u0003\u0155\u0003\u0155\u0003\u0155\u0003\u0156\u0003\u0156\u0003\u0156",
    "\u0007\u0156\u1b8a\n\u0156\f\u0156\u000e\u0156\u1b8d\u000b\u0156\u0003",
    "\u0157\u0003\u0157\u0003\u0157\u0003\u0157\u0003\u0157\u0005\u0157\u1b94",
    "\n\u0157\u0003\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003\u0158",
    "\u0003\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003\u0158",
    "\u0003\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0005\u0158",
    "\u1ba6\n\u0158\u0003\u0159\u0003\u0159\u0003\u0159\u0005\u0159\u1bab",
    "\n\u0159\u0003\u0159\u0003\u0159\u0003\u0159\u0005\u0159\u1bb0\n\u0159",
    "\u0003\u0159\u0003\u0159\u0003\u0159\u0003\u0159\u0003\u0159\u0003\u0159",
    "\u0005\u0159\u1bb8\n\u0159\u0005\u0159\u1bba\n\u0159\u0003\u0159\u0003",
    "\u0159\u0003\u0159\u0003\u0159\u0003\u0159\u0003\u0159\u0005\u0159\u1bc2",
    "\n\u0159\u0003\u015a\u0003\u015a\u0003\u015a\u0007\u015a\u1bc7\n\u015a",
    "\f\u015a\u000e\u015a\u1bca\u000b\u015a\u0003\u015b\u0003\u015b\u0003",
    "\u015b\u0003\u015c\u0003\u015c\u0005\u015c\u1bd1\n\u015c\u0003\u015c",
    "\u0003\u015c\u0003\u015c\u0005\u015c\u1bd6\n\u015c\u0003\u015d\u0003",
    "\u015d\u0003\u015d\u0003\u015d\u0005\u015d\u1bdc\n\u015d\u0003\u015e",
    "\u0003\u015e\u0003\u015e\u0003\u015e\u0005\u015e\u1be2\n\u015e\u0003",
    "\u015f\u0003\u015f\u0003\u015f\u0003\u015f\u0003\u015f\u0003\u015f\u0005",
    "\u015f\u1bea\n\u015f\u0003\u0160\u0003\u0160\u0003\u0160\u0003\u0161",
    "\u0003\u0161\u0003\u0161\u0003\u0161\u0003\u0161\u0003\u0161\u0003\u0161",
    "\u0003\u0161\u0003\u0161\u0003\u0161\u0005\u0161\u1bf9\n\u0161\u0003",
    "\u0161\u0003\u0161\u0003\u0161\u0003\u0161\u0003\u0161\u0003\u0161\u0003",
    "\u0161\u0003\u0161\u0003\u0161\u0005\u0161\u1c04\n\u0161\u0003\u0161",
    "\u0005\u0161\u1c07\n\u0161\u0003\u0162\u0003\u0162\u0003\u0162\u0003",
    "\u0162\u0003\u0162\u0003\u0162\u0003\u0162\u0003\u0162\u0005\u0162\u1c11",
    "\n\u0162\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163",
    "\u0003\u0163\u0003\u0163\u0003\u0163\u0005\u0163\u1c1b\n\u0163\u0003",
    "\u0164\u0003\u0164\u0003\u0164\u0003\u0164\u0003\u0164\u0003\u0164\u0003",
    "\u0164\u0003\u0164\u0005\u0164\u1c25\n\u0164\u0003\u0165\u0003\u0165",
    "\u0003\u0165\u0003\u0166\u0003\u0166\u0003\u0166\u0003\u0166\u0003\u0166",
    "\u0005\u0166\u1c2f\n\u0166\u0003\u0167\u0003\u0167\u0005\u0167\u1c33",
    "\n\u0167\u0003\u0167\u0003\u0167\u0005\u0167\u1c37\n\u0167\u0003\u0167",
    "\u0003\u0167\u0003\u0167\u0003\u0167\u0003\u0167\u0003\u0167\u0003\u0167",
    "\u0005\u0167\u1c40\n\u0167\u0003\u0167\u0003\u0167\u0003\u0167\u0003",
    "\u0167\u0003\u0167\u0003\u0167\u0003\u0167\u0003\u0167\u0003\u0167\u0003",
    "\u0167\u0003\u0167\u0003\u0167\u0003\u0167\u0003\u0167\u0003\u0167\u0003",
    "\u0167\u0003\u0167\u0003\u0167\u0003\u0167\u0003\u0167\u0003\u0167\u0003",
    "\u0167\u0003\u0167\u0003\u0167\u0003\u0167\u0005\u0167\u1c5b\n\u0167",
    "\u0003\u0168\u0003\u0168\u0003\u0168\u0003\u0168\u0003\u0168\u0003\u0168",
    "\u0003\u0168\u0003\u0168\u0003\u0168\u0003\u0168\u0003\u0168\u0003\u0168",
    "\u0003\u0168\u0005\u0168\u1c6a\n\u0168\u0003\u0169\u0003\u0169\u0003",
    "\u0169\u0003\u0169\u0003\u016a\u0003\u016a\u0005\u016a\u1c72\n\u016a",
    "\u0003\u016a\u0003\u016a\u0003\u016a\u0003\u016b\u0003\u016b\u0003\u016b",
    "\u0003\u016b\u0007\u016b\u1c7b\n\u016b\f\u016b\u000e\u016b\u1c7e\u000b",
    "\u016b\u0003\u016c\u0003\u016c\u0003\u016c\u0003\u016c\u0005\u016c\u1c84",
    "\n\u016c\u0003\u016d\u0003\u016d\u0005\u016d\u1c88\n\u016d\u0003\u016d",
    "\u0003\u016d\u0003\u016d\u0003\u016e\u0003\u016e\u0005\u016e\u1c8f\n",
    "\u016e\u0003\u016e\u0003\u016e\u0003\u016e\u0005\u016e\u1c94\n\u016e",
    "\u0003\u016e\u0005\u016e\u1c97\n\u016e\u0003\u016e\u0005\u016e\u1c9a",
    "\n\u016e\u0003\u016f\u0003\u016f\u0003\u016f\u0003\u016f\u0003\u016f",
    "\u0003\u016f\u0003\u016f\u0005\u016f\u1ca3\n\u016f\u0003\u0170\u0003",
    "\u0170\u0005\u0170\u1ca7\n\u0170\u0003\u0170\u0003\u0170\u0003\u0170",
    "\u0003\u0170\u0003\u0170\u0003\u0170\u0003\u0170\u0003\u0171\u0003\u0171",
    "\u0003\u0171\u0003\u0171\u0003\u0171\u0003\u0171\u0003\u0172\u0003\u0172",
    "\u0003\u0172\u0003\u0172\u0003\u0173\u0003\u0173\u0003\u0173\u0003\u0173",
    "\u0007\u0173\u1cbe\n\u0173\f\u0173\u000e\u0173\u1cc1\u000b\u0173\u0003",
    "\u0173\u0003\u0173\u0003\u0173\u0003\u0173\u0003\u0173\u0005\u0173\u1cc8",
    "\n\u0173\u0003\u0173\u0003\u0173\u0005\u0173\u1ccc\n\u0173\u0003\u0173",
    "\u0003\u0173\u0003\u0173\u0003\u0173\u0003\u0173\u0003\u0173\u0005\u0173",
    "\u1cd4\n\u0173\u0003\u0173\u0005\u0173\u1cd7\n\u0173\u0003\u0173\u0003",
    "\u0173\u0003\u0173\u0003\u0173\u0003\u0173\u0005\u0173\u1cde\n\u0173",
    "\u0003\u0174\u0003\u0174\u0003\u0174\u0003\u0174\u0003\u0174\u0005\u0174",
    "\u1ce5\n\u0174\u0003\u0175\u0003\u0175\u0003\u0175\u0003\u0175\u0003",
    "\u0175\u0003\u0175\u0003\u0175\u0003\u0175\u0005\u0175\u1cef\n\u0175",
    "\u0003\u0175\u0003\u0175\u0005\u0175\u1cf3\n\u0175\u0003\u0175\u0003",
    "\u0175\u0003\u0175\u0003\u0175\u0005\u0175\u1cf9\n\u0175\u0003\u0175",
    "\u0005\u0175\u1cfc\n\u0175\u0003\u0175\u0003\u0175\u0003\u0175\u0005",
    "\u0175\u1d01\n\u0175\u0003\u0175\u0003\u0175\u0005\u0175\u1d05\n\u0175",
    "\u0003\u0175\u0003\u0175\u0003\u0175\u0003\u0175\u0005\u0175\u1d0b\n",
    "\u0175\u0003\u0175\u0005\u0175\u1d0e\n\u0175\u0003\u0175\u0003\u0175",
    "\u0003\u0175\u0003\u0175\u0005\u0175\u1d14\n\u0175\u0003\u0175\u0003",
    "\u0175\u0003\u0175\u0003\u0175\u0003\u0175\u0003\u0175\u0003\u0175\u0003",
    "\u0175\u0003\u0175\u0003\u0175\u0003\u0175\u0003\u0175\u0003\u0175\u0003",
    "\u0175\u0003\u0175\u0003\u0175\u0003\u0175\u0003\u0175\u0003\u0175\u0003",
    "\u0175\u0003\u0175\u0003\u0175\u0005\u0175\u1d2c\n\u0175\u0003\u0175",
    "\u0003\u0175\u0003\u0175\u0003\u0175\u0003\u0175\u0003\u0175\u0003\u0175",
    "\u0003\u0175\u0003\u0175\u0003\u0175\u0003\u0175\u0005\u0175\u1d39\n",
    "\u0175\u0003\u0175\u0005\u0175\u1d3c\n\u0175\u0003\u0175\u0003\u0175",
    "\u0003\u0175\u0003\u0175\u0003\u0175\u0003\u0175\u0003\u0175\u0003\u0175",
    "\u0005\u0175\u1d46\n\u0175\u0003\u0175\u0003\u0175\u0003\u0175\u0003",
    "\u0175\u0003\u0175\u0003\u0175\u0005\u0175\u1d4e\n\u0175\u0003\u0175",
    "\u0003\u0175\u0005\u0175\u1d52\n\u0175\u0003\u0175\u0003\u0175\u0003",
    "\u0175\u0003\u0175\u0003\u0175\u0005\u0175\u1d59\n\u0175\u0003\u0175",
    "\u0005\u0175\u1d5c\n\u0175\u0003\u0175\u0003\u0175\u0003\u0175\u0003",
    "\u0175\u0003\u0175\u0007\u0175\u1d63\n\u0175\f\u0175\u000e\u0175\u1d66",
    "\u000b\u0175\u0003\u0175\u0003\u0175\u0003\u0175\u0005\u0175\u1d6b\n",
    "\u0175\u0003\u0175\u0003\u0175\u0003\u0175\u0003\u0175\u0005\u0175\u1d71",
    "\n\u0175\u0003\u0175\u0003\u0175\u0003\u0175\u0003\u0175\u0003\u0175",
    "\u0003\u0175\u0003\u0175\u0003\u0175\u0005\u0175\u1d7b\n\u0175\u0005",
    "\u0175\u1d7d\n\u0175\u0003\u0176\u0003\u0176\u0003\u0176\u0005\u0176",
    "\u1d82\n\u0176\u0003\u0176\u0003\u0176\u0003\u0176\u0003\u0176\u0003",
    "\u0176\u0003\u0176\u0005\u0176\u1d8a\n\u0176\u0003\u0176\u0005\u0176",
    "\u1d8d\n\u0176\u0003\u0176\u0003\u0176\u0005\u0176\u1d91\n\u0176\u0003",
    "\u0176\u0003\u0176\u0003\u0176\u0003\u0176\u0003\u0176\u0005\u0176\u1d98",
    "\n\u0176\u0003\u0176\u0003\u0176\u0003\u0176\u0003\u0176\u0005\u0176",
    "\u1d9e\n\u0176\u0003\u0176\u0003\u0176\u0003\u0176\u0003\u0176\u0003",
    "\u0176\u0005\u0176\u1da5\n\u0176\u0003\u0176\u0003\u0176\u0003\u0176",
    "\u0005\u0176\u1daa\n\u0176\u0003\u0176\u0003\u0176\u0003\u0176\u0003",
    "\u0176\u0003\u0176\u0003\u0176\u0005\u0176\u1db2\n\u0176\u0003\u0176",
    "\u0003\u0176\u0003\u0176\u0005\u0176\u1db7\n\u0176\u0003\u0176\u0003",
    "\u0176\u0003\u0176\u0003\u0176\u0003\u0176\u0003\u0176\u0005\u0176\u1dbf",
    "\n\u0176\u0003\u0176\u0005\u0176\u1dc2\n\u0176\u0003\u0176\u0003\u0176",
    "\u0003\u0176\u0003\u0176\u0005\u0176\u1dc8\n\u0176\u0003\u0176\u0003",
    "\u0176\u0003\u0176\u0003\u0176\u0003\u0176\u0003\u0176\u0003\u0176\u0003",
    "\u0176\u0003\u0176\u0005\u0176\u1dd3\n\u0176\u0005\u0176\u1dd5\n\u0176",
    "\u0003\u0177\u0003\u0177\u0003\u0177\u0003\u0177\u0005\u0177\u1ddb\n",
    "\u0177\u0003\u0177\u0003\u0177\u0003\u0177\u0005\u0177\u1de0\n\u0177",
    "\u0003\u0178\u0003\u0178\u0003\u0178\u0003\u0178\u0003\u0178\u0005\u0178",
    "\u1de7\n\u0178\u0003\u0178\u0005\u0178\u1dea\n\u0178\u0003\u0178\u0005",
    "\u0178\u1ded\n\u0178\u0003\u0178\u0003\u0178\u0003\u0178\u0003\u0178",
    "\u0003\u0178\u0005\u0178\u1df4\n\u0178\u0003\u0179\u0003\u0179\u0007",
    "\u0179\u1df8\n\u0179\f\u0179\u000e\u0179\u1dfb\u000b\u0179\u0003\u017a",
    "\u0003\u017a\u0003\u017a\u0003\u017b\u0003\u017b\u0003\u017b\u0003\u017b",
    "\u0003\u017b\u0003\u017b\u0003\u017b\u0003\u017b\u0003\u017b\u0003\u017b",
    "\u0005\u017b\u1e0a\n\u017b\u0003\u017b\u0005\u017b\u1e0d\n\u017b\u0003",
    "\u017c\u0003\u017c\u0003\u017c\u0003\u017c\u0005\u017c\u1e13\n\u017c",
    "\u0003\u017d\u0005\u017d\u1e16\n\u017d\u0003\u017d\u0003\u017d\u0003",
    "\u017d\u0003\u017d\u0003\u017d\u0003\u017d\u0005\u017d\u1e1e\n\u017d",
    "\u0003\u017d\u0003\u017d\u0003\u017d\u0003\u017d\u0003\u017d\u0003\u017d",
    "\u0005\u017d\u1e26\n\u017d\u0003\u017e\u0003\u017e\u0003\u017e\u0003",
    "\u017e\u0005\u017e\u1e2c\n\u017e\u0003\u017e\u0003\u017e\u0005\u017e",
    "\u1e30\n\u017e\u0003\u017f\u0003\u017f\u0003\u017f\u0003\u017f\u0003",
    "\u017f\u0003\u017f\u0003\u017f\u0003\u017f\u0003\u017f\u0003\u017f\u0003",
    "\u017f\u0003\u017f\u0005\u017f\u1e3e\n\u017f\u0003\u0180\u0003\u0180",
    "\u0003\u0180\u0003\u0181\u0003\u0181\u0003\u0181\u0003\u0181\u0005\u0181",
    "\u1e47\n\u0181\u0003\u0182\u0003\u0182\u0003\u0182\u0003\u0183\u0003",
    "\u0183\u0003\u0183\u0003\u0184\u0003\u0184\u0003\u0184\u0003\u0184\u0003",
    "\u0184\u0007\u0184\u1e54\n\u0184\f\u0184\u000e\u0184\u1e57\u000b\u0184",
    "\u0003\u0184\u0003\u0184\u0003\u0184\u0003\u0184\u0005\u0184\u1e5d\n",
    "\u0184\u0003\u0184\u0005\u0184\u1e60\n\u0184\u0003\u0184\u0003\u0184",
    "\u0003\u0184\u0003\u0185\u0003\u0185\u0005\u0185\u1e67\n\u0185\u0003",
    "\u0185\u0003\u0185\u0003\u0185\u0007\u0185\u1e6c\n\u0185\f\u0185\u000e",
    "\u0185\u1e6f\u000b\u0185\u0003\u0186\u0003\u0186\u0005\u0186\u1e73\n",
    "\u0186\u0003\u0186\u0006\u0186\u1e76\n\u0186\r\u0186\u000e\u0186\u1e77",
    "\u0003\u0187\u0003\u0187\u0003\u0187\u0003\u0187\u0003\u0187\u0003\u0187",
    "\u0003\u0187\u0007\u0187\u1e81\n\u0187\f\u0187\u000e\u0187\u1e84\u000b",
    "\u0187\u0003\u0188\u0003\u0188\u0003\u0188\u0003\u0188\u0003\u0189\u0003",
    "\u0189\u0003\u018a\u0003\u018a\u0003\u018a\u0003\u018a\u0003\u018a\u0003",
    "\u018a\u0003\u018a\u0003\u018a\u0003\u018a\u0005\u018a\u1e95\n\u018a",
    "\u0003\u018b\u0003\u018b\u0005\u018b\u1e99\n\u018b\u0003\u018b\u0005",
    "\u018b\u1e9c\n\u018b\u0003\u018c\u0003\u018c\u0003\u018c\u0003\u018c",
    "\u0003\u018d\u0003\u018d\u0003\u018d\u0003\u018d\u0005\u018d\u1ea6\n",
    "\u018d\u0003\u018e\u0003\u018e\u0005\u018e\u1eaa\n\u018e\u0003\u018e",
    "\u0003\u018e\u0003\u018e\u0003\u018e\u0005\u018e\u1eb0\n\u018e\u0003",
    "\u018f\u0003\u018f\u0003\u018f\u0005\u018f\u1eb5\n\u018f\u0003\u018f",
    "\u0003\u018f\u0003\u018f\u0003\u018f\u0003\u018f\u0003\u018f\u0003\u018f",
    "\u0003\u018f\u0003\u018f\u0003\u018f\u0003\u018f\u0005\u018f\u1ec2\n",
    "\u018f\u0005\u018f\u1ec4\n\u018f\u0003\u018f\u0003\u018f\u0003\u018f",
    "\u0005\u018f\u1ec9\n\u018f\u0003\u018f\u0003\u018f\u0003\u018f\u0005",
    "\u018f\u1ece\n\u018f\u0005\u018f\u1ed0\n\u018f\u0003\u0190\u0003\u0190",
    "\u0003\u0190\u0003\u0190\u0003\u0190\u0005\u0190\u1ed7\n\u0190\u0003",
    "\u0191\u0003\u0191\u0003\u0191\u0003\u0191\u0003\u0191\u0005\u0191\u1ede",
    "\n\u0191\u0003\u0191\u0005\u0191\u1ee1\n\u0191\u0003\u0191\u0005\u0191",
    "\u1ee4\n\u0191\u0003\u0191\u0003\u0191\u0003\u0191\u0003\u0191\u0005",
    "\u0191\u1eea\n\u0191\u0003\u0191\u0003\u0191\u0005\u0191\u1eee\n\u0191",
    "\u0003\u0192\u0003\u0192\u0003\u0192\u0003\u0192\u0003\u0192\u0005\u0192",
    "\u1ef5\n\u0192\u0003\u0193\u0003\u0193\u0005\u0193\u1ef9\n\u0193\u0003",
    "\u0194\u0003\u0194\u0003\u0194\u0003\u0194\u0005\u0194\u1eff\n\u0194",
    "\u0003\u0195\u0003\u0195\u0003\u0195\u0003\u0195\u0005\u0195\u1f05\n",
    "\u0195\u0003\u0195\u0003\u0195\u0003\u0196\u0003\u0196\u0003\u0196\u0005",
    "\u0196\u1f0c\n\u0196\u0005\u0196\u1f0e\n\u0196\u0003\u0196\u0003\u0196",
    "\u0003\u0196\u0005\u0196\u1f13\n\u0196\u0003\u0196\u0003\u0196\u0003",
    "\u0196\u0003\u0196\u0003\u0196\u0003\u0196\u0005\u0196\u1f1b\n\u0196",
    "\u0003\u0196\u0003\u0196\u0005\u0196\u1f1f\n\u0196\u0003\u0196\u0003",
    "\u0196\u0003\u0196\u0005\u0196\u1f24\n\u0196\u0003\u0196\u0003\u0196",
    "\u0003\u0196\u0003\u0196\u0005\u0196\u1f2a\n\u0196\u0003\u0196\u0003",
    "\u0196\u0005\u0196\u1f2e\n\u0196\u0003\u0196\u0005\u0196\u1f31\n\u0196",
    "\u0003\u0196\u0005\u0196\u1f34\n\u0196\u0003\u0196\u0005\u0196\u1f37",
    "\n\u0196\u0003\u0197\u0003\u0197\u0003\u0197\u0003\u0198\u0003\u0198",
    "\u0003\u0198\u0003\u0199\u0003\u0199\u0003\u0199\u0003\u0199\u0003\u0199",
    "\u0005\u0199\u1f44\n\u0199\u0003\u0199\u0003\u0199\u0003\u0199\u0005",
    "\u0199\u1f49\n\u0199\u0003\u019a\u0003\u019a\u0003\u019a\u0003\u019a",
    "\u0003\u019a\u0003\u019a\u0003\u019a\u0003\u019a\u0003\u019a\u0003\u019a",
    "\u0003\u019a\u0005\u019a\u1f56\n\u019a\u0003\u019a\u0003\u019a\u0003",
    "\u019a\u0003\u019a\u0003\u019a\u0003\u019a\u0005\u019a\u1f5e\n\u019a",
    "\u0003\u019a\u0003\u019a\u0003\u019a\u0003\u019a\u0007\u019a\u1f64\n",
    "\u019a\f\u019a\u000e\u019a\u1f67\u000b\u019a\u0003\u019a\u0003\u019a",
    "\u0005\u019a\u1f6b\n\u019a\u0005\u019a\u1f6d\n\u019a\u0003\u019b\u0003",
    "\u019b\u0003\u019b\u0003\u019b\u0003\u019c\u0003\u019c\u0003\u019c\u0003",
    "\u019c\u0003\u019c\u0003\u019c\u0003\u019c\u0003\u019c\u0003\u019c\u0007",
    "\u019c\u1f7c\n\u019c\f\u019c\u000e\u019c\u1f7f\u000b\u019c\u0003\u019c",
    "\u0003\u019c\u0005\u019c\u1f83\n\u019c\u0003\u019d\u0003\u019d\u0005",
    "\u019d\u1f87\n\u019d\u0003\u019e\u0003\u019e\u0005\u019e\u1f8b\n\u019e",
    "\u0003\u019f\u0003\u019f\u0003\u019f\u0003\u01a0\u0003\u01a0\u0003\u01a0",
    "\u0003\u01a0\u0003\u01a0\u0003\u01a1\u0003\u01a1\u0003\u01a1\u0003\u01a1",
    "\u0005\u01a1\u1f99\n\u01a1\u0003\u01a1\u0003\u01a1\u0003\u01a1\u0003",
    "\u01a1\u0005\u01a1\u1f9f\n\u01a1\u0003\u01a2\u0003\u01a2\u0003\u01a2",
    "\u0003\u01a2\u0005\u01a2\u1fa5\n\u01a2\u0003\u01a3\u0003\u01a3\u0003",
    "\u01a3\u0003\u01a3\u0005\u01a3\u1fab\n\u01a3\u0003\u01a4\u0003\u01a4",
    "\u0003\u01a4\u0005\u01a4\u1fb0\n\u01a4\u0005\u01a4\u1fb2\n\u01a4\u0003",
    "\u01a4\u0003\u01a4\u0007\u01a4\u1fb6\n\u01a4\f\u01a4\u000e\u01a4\u1fb9",
    "\u000b\u01a4\u0003\u01a4\u0003\u01a4\u0003\u01a4\u0005\u01a4\u1fbe\n",
    "\u01a4\u0003\u01a5\u0003\u01a5\u0003\u01a5\u0003\u01a5\u0005\u01a5\u1fc4",
    "\n\u01a5\u0003\u01a6\u0003\u01a6\u0003\u01a6\u0003\u01a6\u0005\u01a6",
    "\u1fca\n\u01a6\u0003\u01a7\u0003\u01a7\u0003\u01a7\u0005\u01a7\u1fcf",
    "\n\u01a7\u0005\u01a7\u1fd1\n\u01a7\u0003\u01a7\u0003\u01a7\u0007\u01a7",
    "\u1fd5\n\u01a7\f\u01a7\u000e\u01a7\u1fd8\u000b\u01a7\u0003\u01a7\u0003",
    "\u01a7\u0003\u01a7\u0005\u01a7\u1fdd\n\u01a7\u0003\u01a8\u0003\u01a8",
    "\u0003\u01a8\u0003\u01a8\u0005\u01a8\u1fe3\n\u01a8\u0003\u01a9\u0003",
    "\u01a9\u0003\u01a9\u0005\u01a9\u1fe8\n\u01a9\u0003\u01a9\u0003\u01a9",
    "\u0007\u01a9\u1fec\n\u01a9\f\u01a9\u000e\u01a9\u1fef\u000b\u01a9\u0003",
    "\u01a9\u0003\u01a9\u0003\u01a9\u0005\u01a9\u1ff4\n\u01a9\u0003\u01aa",
    "\u0003\u01aa\u0003\u01aa\u0003\u01aa\u0005\u01aa\u1ffa\n\u01aa\u0003",
    "\u01ab\u0003\u01ab\u0003\u01ab\u0003\u01ab\u0005\u01ab\u2000\n\u01ab",
    "\u0003\u01ac\u0003\u01ac\u0003\u01ac\u0003\u01ac\u0005\u01ac\u2006\n",
    "\u01ac\u0003\u01ad\u0003\u01ad\u0003\u01ad\u0003\u01ad\u0005\u01ad\u200c",
    "\n\u01ad\u0003\u01ae\u0003\u01ae\u0003\u01af\u0003\u01af\u0003\u01af",
    "\u0003\u01af\u0005\u01af\u2014\n\u01af\u0003\u01b0\u0003\u01b0\u0003",
    "\u01b0\u0003\u01b0\u0005\u01b0\u201a\n\u01b0\u0003\u01b1\u0003\u01b1",
    "\u0005\u01b1\u201e\n\u01b1\u0003\u01b2\u0003\u01b2\u0005\u01b2\u2022",
    "\n\u01b2\u0003\u01b2\u0003\u01b2\u0003\u01b2\u0003\u01b2\u0005\u01b2",
    "\u2028\n\u01b2\u0003\u01b2\u0005\u01b2\u202b\n\u01b2\u0003\u01b3\u0003",
    "\u01b3\u0003\u01b4\u0003\u01b4\u0003\u01b5\u0003\u01b5\u0003\u01b5\u0003",
    "\u01b5\u0005\u01b5\u2035\n\u01b5\u0003\u01b6\u0003\u01b6\u0005\u01b6",
    "\u2039\n\u01b6\u0003\u01b7\u0003\u01b7\u0003\u01b8\u0003\u01b8\u0003",
    "\u01b8\u0003\u01b8\u0003\u01b8\u0003\u01b8\u0003\u01b8\u0003\u01b8\u0003",
    "\u01b8\u0003\u01b8\u0003\u01b8\u0003\u01b8\u0003\u01b8\u0003\u01b8\u0006",
    "\u01b8\u204b\n\u01b8\r\u01b8\u000e\u01b8\u204c\u0003\u01b9\u0003\u01b9",
    "\u0003\u01b9\u0003\u01b9\u0003\u01b9\u0005\u01b9\u2054\n\u01b9\u0005",
    "\u01b9\u2056\n\u01b9\u0003\u01ba\u0003\u01ba\u0003\u01ba\u0006\u01ba",
    "\u205b\n\u01ba\r\u01ba\u000e\u01ba\u205c\u0005\u01ba\u205f\n\u01ba\u0003",
    "\u01bb\u0003\u01bb\u0005\u01bb\u2063\n\u01bb\u0003\u01bc\u0003\u01bc",
    "\u0003\u01bc\u0005\u01bc\u2068\n\u01bc\u0003\u01bd\u0003\u01bd\u0003",
    "\u01bd\u0003\u01bd\u0003\u01bd\u0003\u01bd\u0003\u01bd\u0003\u01bd\u0003",
    "\u01bd\u0003\u01bd\u0003\u01bd\u0003\u01bd\u0005\u01bd\u2076\n\u01bd",
    "\u0003\u01be\u0003\u01be\u0003\u01bf\u0003\u01bf\u0003\u01bf\u0005\u01bf",
    "\u207d\n\u01bf\u0003\u01c0\u0003\u01c0\u0003\u01c0\u0003\u01c0\u0003",
    "\u01c0\u0005\u01c0\u2084\n\u01c0\u0007\u01c0\u2086\n\u01c0\f\u01c0\u000e",
    "\u01c0\u2089\u000b\u01c0\u0006\u01c0\u208b\n\u01c0\r\u01c0\u000e\u01c0",
    "\u208c\u0003\u01c1\u0003\u01c1\u0003\u01c1\u0007\u01c1\u2092\n\u01c1",
    "\f\u01c1\u000e\u01c1\u2095\u000b\u01c1\u0003\u01c2\u0003\u01c2\u0003",
    "\u01c3\u0003\u01c3\u0005\u01c3\u209b\n\u01c3\u0003\u01c4\u0005\u01c4",
    "\u209e\n\u01c4\u0003\u01c4\u0003\u01c4\u0005\u01c4\u20a2\n\u01c4\u0003",
    "\u01c4\u0006\u01c4\u20a5\n\u01c4\r\u01c4\u000e\u01c4\u20a6\u0003\u01c4",
    "\u0005\u01c4\u20aa\n\u01c4\u0003\u01c4\u0003\u01c4\u0005\u01c4\u20ae",
    "\n\u01c4\u0003\u01c4\u0005\u01c4\u20b1\n\u01c4\u0005\u01c4\u20b3\n\u01c4",
    "\u0003\u01c5\u0003\u01c5\u0003\u01c5\u0003\u01c5\u0003\u01c6\u0003\u01c6",
    "\u0003\u01c7\u0005\u01c7\u20bc\n\u01c7\u0003\u01c7\u0003\u01c7\u0003",
    "\u01c8\u0005\u01c8\u20c1\n\u01c8\u0003\u01c8\u0003\u01c8\u0003\u01c9",
    "\u0003\u01c9\u0003\u01c9\u0003\u01c9\u0003\u01c9\u0003\u01c9\u0003\u01c9",
    "\u0003\u01c9\u0003\u01c9\u0005\u01c9\u20ce\n\u01c9\u0003\u01c9\u0005",
    "\u01c9\u20d1\n\u01c9\u0003\u01ca\u0003\u01ca\u0003\u01ca\u0003\u01ca",
    "\u0005\u01ca\u20d7\n\u01ca\u0003\u01cb\u0003\u01cb\u0005\u01cb\u20db",
    "\n\u01cb\u0003\u01cb\u0005\u01cb\u20de\n\u01cb\u0003\u01cb\u0003\u01cb",
    "\u0003\u01cb\u0005\u01cb\u20e3\n\u01cb\u0003\u01cb\u0005\u01cb\u20e6",
    "\n\u01cb\u0003\u01cb\u0003\u01cb\u0003\u01cb\u0005\u01cb\u20eb\n\u01cb",
    "\u0003\u01cb\u0005\u01cb\u20ee\n\u01cb\u0003\u01cb\u0003\u01cb\u0003",
    "\u01cb\u0005\u01cb\u20f3\n\u01cb\u0003\u01cb\u0005\u01cb\u20f6\n\u01cb",
    "\u0003\u01cb\u0003\u01cb\u0003\u01cb\u0003\u01cb\u0005\u01cb\u20fc\n",
    "\u01cb\u0003\u01cb\u0005\u01cb\u20ff\n\u01cb\u0003\u01cb\u0003\u01cb",
    "\u0005\u01cb\u2103\n\u01cb\u0003\u01cb\u0005\u01cb\u2106\n\u01cb\u0003",
    "\u01cb\u0005\u01cb\u2109\n\u01cb\u0003\u01cb\u0003\u01cb\u0005\u01cb",
    "\u210d\n\u01cb\u0003\u01cb\u0005\u01cb\u2110\n\u01cb\u0003\u01cb\u0005",
    "\u01cb\u2113\n\u01cb\u0003\u01cb\u0003\u01cb\u0005\u01cb\u2117\n\u01cb",
    "\u0003\u01cb\u0005\u01cb\u211a\n\u01cb\u0003\u01cb\u0005\u01cb\u211d",
    "\n\u01cb\u0003\u01cb\u0005\u01cb\u2120\n\u01cb\u0003\u01cb\u0003\u01cb",
    "\u0005\u01cb\u2124\n\u01cb\u0003\u01cb\u0005\u01cb\u2127\n\u01cb\u0003",
    "\u01cb\u0005\u01cb\u212a\n\u01cb\u0003\u01cb\u0003\u01cb\u0003\u01cb",
    "\u0005\u01cb\u212f\n\u01cb\u0003\u01cb\u0003\u01cb\u0003\u01cb\u0005",
    "\u01cb\u2134\n\u01cb\u0003\u01cb\u0003\u01cb\u0003\u01cb\u0005\u01cb",
    "\u2139\n\u01cb\u0003\u01cb\u0005\u01cb\u213c\n\u01cb\u0003\u01cb\u0005",
    "\u01cb\u213f\n\u01cb\u0003\u01cc\u0003\u01cc\u0003\u01cc\u0003\u01cc",
    "\u0005\u01cc\u2145\n\u01cc\u0003\u01cc\u0003\u01cc\u0005\u01cc\u2149",
    "\n\u01cc\u0003\u01cc\u0003\u01cc\u0003\u01cc\u0003\u01cc\u0003\u01cc",
    "\u0003\u01cc\u0003\u01cc\u0003\u01cc\u0005\u01cc\u2153\n\u01cc\u0003",
    "\u01cc\u0003\u01cc\u0005\u01cc\u2157\n\u01cc\u0003\u01cc\u0003\u01cc",
    "\u0003\u01cc\u0003\u01cc\u0003\u01cc\u0003\u01cc\u0003\u01cc\u0003\u01cc",
    "\u0003\u01cc\u0003\u01cc\u0003\u01cc\u0003\u01cc\u0003\u01cc\u0003\u01cc",
    "\u0003\u01cc\u0003\u01cc\u0003\u01cc\u0007\u01cc\u216a\n\u01cc\f\u01cc",
    "\u000e\u01cc\u216d\u000b\u01cc\u0003\u01cc\u0003\u01cc\u0003\u01cc\u0003",
    "\u01cc\u0003\u01cc\u0003\u01cc\u0003\u01cc\u0007\u01cc\u2176\n\u01cc",
    "\f\u01cc\u000e\u01cc\u2179\u000b\u01cc\u0003\u01cc\u0003\u01cc\u0005",
    "\u01cc\u217d\n\u01cc\u0003\u01cd\u0003\u01cd\u0003\u01cd\u0003\u01cd",
    "\u0003\u01ce\u0003\u01ce\u0003\u01ce\u0003\u01ce\u0007\u01ce\u2187\n",
    "\u01ce\f\u01ce\u000e\u01ce\u218a\u000b\u01ce\u0003\u01ce\u0003\u01ce",
    "\u0003\u01cf\u0003\u01cf\u0005\u01cf\u2190\n\u01cf\u0003\u01cf\u0003",
    "\u01cf\u0005\u01cf\u2194\n\u01cf\u0003\u01cf\u0003\u01cf\u0003\u01cf",
    "\u0005\u01cf\u2199\n\u01cf\u0003\u01cf\u0003\u01cf\u0003\u01cf\u0005",
    "\u01cf\u219e\n\u01cf\u0003\u01cf\u0003\u01cf\u0005\u01cf\u21a2\n\u01cf",
    "\u0005\u01cf\u21a4\n\u01cf\u0003\u01d0\u0003\u01d0\u0003\u01d0\u0003",
    "\u01d0\u0003\u01d1\u0003\u01d1\u0003\u01d1\u0003\u01d1\u0003\u01d1\u0003",
    "\u01d1\u0003\u01d2\u0003\u01d2\u0003\u01d2\u0003\u01d2\u0005\u01d2\u21b4",
    "\n\u01d2\u0003\u01d2\u0003\u01d2\u0003\u01d3\u0003\u01d3\u0003\u01d3",
    "\u0007\u01d3\u21bb\n\u01d3\f\u01d3\u000e\u01d3\u21be\u000b\u01d3\u0003",
    "\u01d4\u0003\u01d4\u0003\u01d4\u0007\u01d4\u21c3\n\u01d4\f\u01d4\u000e",
    "\u01d4\u21c6\u000b\u01d4\u0003\u01d5\u0003\u01d5\u0005\u01d5\u21ca\n",
    "\u01d5\u0003\u01d6\u0003\u01d6\u0003\u01d6\u0007\u01d6\u21cf\n\u01d6",
    "\f\u01d6\u000e\u01d6\u21d2\u000b\u01d6\u0003\u01d7\u0003\u01d7\u0003",
    "\u01d7\u0007\u01d7\u21d7\n\u01d7\f\u01d7\u000e\u01d7\u21da\u000b\u01d7",
    "\u0003\u01d8\u0003\u01d8\u0003\u01d8\u0007\u01d8\u21df\n\u01d8\f\u01d8",
    "\u000e\u01d8\u21e2\u000b\u01d8\u0003\u01d9\u0003\u01d9\u0003\u01d9\u0007",
    "\u01d9\u21e7\n\u01d9\f\u01d9\u000e\u01d9\u21ea\u000b\u01d9\u0003\u01da",
    "\u0003\u01da\u0003\u01da\u0003\u01da\u0007\u01da\u21f0\n\u01da\f\u01da",
    "\u000e\u01da\u21f3\u000b\u01da\u0003\u01da\u0003\u01da\u0003\u01db\u0003",
    "\u01db\u0003\u01db\u0007\u01db\u21fa\n\u01db\f\u01db\u000e\u01db\u21fd",
    "\u000b\u01db\u0003\u01dc\u0003\u01dc\u0003\u01dc\u0007\u01dc\u2202\n",
    "\u01dc\f\u01dc\u000e\u01dc\u2205\u000b\u01dc\u0003\u01dd\u0003\u01dd",
    "\u0003\u01dd\u0007\u01dd\u220a\n\u01dd\f\u01dd\u000e\u01dd\u220d\u000b",
    "\u01dd\u0003\u01de\u0003\u01de\u0003\u01de\u0007\u01de\u2212\n\u01de",
    "\f\u01de\u000e\u01de\u2215\u000b\u01de\u0003\u01df\u0003\u01df\u0003",
    "\u01df\u0007\u01df\u221a\n\u01df\f\u01df\u000e\u01df\u221d\u000b\u01df",
    "\u0003\u01e0\u0003\u01e0\u0005\u01e0\u2221\n\u01e0\u0003\u01e0\u0003",
    "\u01e0\u0003\u01e0\u0003\u01e0\u0003\u01e0\u0005\u01e0\u2228\n\u01e0",
    "\u0005\u01e0\u222a\n\u01e0\u0003\u01e1\u0003\u01e1\u0003\u01e1\u0005",
    "\u01e1\u222f\n\u01e1\u0003\u01e1\u0005\u01e1\u2232\n\u01e1\u0003\u01e1",
    "\u0003\u01e1\u0003\u01e1\u0005\u01e1\u2237\n\u01e1\u0003\u01e1\u0005",
    "\u01e1\u223a\n\u01e1\u0003\u01e2\u0003\u01e2\u0005\u01e2\u223e\n\u01e2",
    "\u0003\u01e3\u0003\u01e3\u0003\u01e3\u0003\u01e4\u0003\u01e4\u0003\u01e4",
    "\u0003\u01e4\u0003\u01e5\u0003\u01e5\u0003\u01e5\u0003\u01e5\u0003\u01e5",
    "\u0003\u01e5\u0005\u01e5\u224d\n\u01e5\u0003\u01e5\u0003\u01e5\u0003",
    "\u01e5\u0003\u01e5\u0003\u01e5\u0005\u01e5\u2254\n\u01e5\u0003\u01e6",
    "\u0003\u01e6\u0003\u01e6\u0003\u01e6\u0005\u01e6\u225a\n\u01e6\u0003",
    "\u01e7\u0003\u01e7\u0003\u01e7\u0003\u01e7\u0003\u01e7\u0003\u01e7\u0003",
    "\u01e7\u0003\u01e7\u0003\u01e7\u0003\u01e7\u0003\u01e7\u0003\u01e7\u0003",
    "\u01e7\u0003\u01e7\u0003\u01e7\u0003\u01e7\u0003\u01e7\u0003\u01e7\u0003",
    "\u01e7\u0003\u01e7\u0003\u01e7\u0003\u01e7\u0003\u01e7\u0003\u01e7\u0003",
    "\u01e7\u0003\u01e7\u0003\u01e7\u0003\u01e7\u0003\u01e7\u0003\u01e7\u0003",
    "\u01e7\u0003\u01e7\u0003\u01e7\u0005\u01e7\u227d\n\u01e7\u0003\u01e7",
    "\u0003\u01e7\u0003\u01e7\u0003\u01e7\u0003\u01e7\u0003\u01e7\u0005\u01e7",
    "\u2285\n\u01e7\u0003\u01e7\u0003\u01e7\u0003\u01e7\u0005\u01e7\u228a",
    "\n\u01e7\u0003\u01e7\u0003\u01e7\u0003\u01e7\u0003\u01e7\u0003\u01e7",
    "\u0003\u01e7\u0003\u01e7\u0003\u01e7\u0005\u01e7\u2294\n\u01e7\u0003",
    "\u01e7\u0003\u01e7\u0003\u01e7\u0005\u01e7\u2299\n\u01e7\u0003\u01e7",
    "\u0003\u01e7\u0003\u01e7\u0003\u01e7\u0003\u01e7\u0003\u01e7\u0005\u01e7",
    "\u22a1\n\u01e7\u0003\u01e7\u0003\u01e7\u0003\u01e7\u0005\u01e7\u22a6",
    "\n\u01e7\u0003\u01e7\u0003\u01e7\u0003\u01e7\u0003\u01e7\u0003\u01e7",
    "\u0003\u01e7\u0005\u01e7\u22ae\n\u01e7\u0003\u01e7\u0003\u01e7\u0003",
    "\u01e7\u0003\u01e7\u0003\u01e7\u0003\u01e7\u0005\u01e7\u22b6\n\u01e7",
    "\u0003\u01e7\u0005\u01e7\u22b9\n\u01e7\u0003\u01e7\u0003\u01e7\u0003",
    "\u01e7\u0003\u01e7\u0003\u01e7\u0003\u01e7\u0003\u01e7\u0003\u01e7\u0003",
    "\u01e7\u0003\u01e7\u0005\u01e7\u22c5\n\u01e7\u0003\u01e8\u0003\u01e8",
    "\u0003\u01e8\u0003\u01e8\u0005\u01e8\u22cb\n\u01e8\u0003\u01e9\u0003",
    "\u01e9\u0003\u01e9\u0003\u01e9\u0003\u01e9\u0003\u01e9\u0003\u01e9\u0003",
    "\u01ea\u0003\u01ea\u0003\u01ea\u0003\u01ea\u0005\u01ea\u22d8\n\u01ea",
    "\u0003\u01ea\u0003\u01ea\u0003\u01ea\u0005\u01ea\u22dd\n\u01ea\u0003",
    "\u01ea\u0003\u01ea\u0003\u01ea\u0005\u01ea\u22e2\n\u01ea\u0005\u01ea",
    "\u22e4\n\u01ea\u0003\u01ea\u0003\u01ea\u0003\u01eb\u0003\u01eb\u0003",
    "\u01eb\u0003\u01eb\u0003\u01eb\u0003\u01eb\u0005\u01eb\u22ee\n\u01eb",
    "\u0003\u01eb\u0003\u01eb\u0003\u01ec\u0003\u01ec\u0003\u01ec\u0006\u01ec",
    "\u22f5\n\u01ec\r\u01ec\u000e\u01ec\u22f6\u0003\u01ec\u0003\u01ec\u0005",
    "\u01ec\u22fb\n\u01ec\u0003\u01ec\u0003\u01ec\u0003\u01ec\u0003\u01ec",
    "\u0006\u01ec\u2301\n\u01ec\r\u01ec\u000e\u01ec\u2302\u0003\u01ec\u0003",
    "\u01ec\u0005\u01ec\u2307\n\u01ec\u0003\u01ec\u0003\u01ec\u0005\u01ec",
    "\u230b\n\u01ec\u0003\u01ed\u0003\u01ed\u0003\u01ed\u0003\u01ed\u0003",
    "\u01ed\u0003\u01ee\u0003\u01ee\u0003\u01ee\u0003\u01ee\u0007\u01ee\u2316",
    "\n\u01ee\f\u01ee\u000e\u01ee\u2319\u000b\u01ee\u0003\u01ee\u0003\u01ee",
    "\u0003\u01ee\u0003\u01ee\u0003\u01ee\u0005\u01ee\u2320\n\u01ee\u0003",
    "\u01ef\u0003\u01ef\u0005\u01ef\u2324\n\u01ef\u0003\u01f0\u0003\u01f0",
    "\u0003\u01f0\u0003\u01f0\u0005\u01f0\u232a\n\u01f0\u0003\u01f1\u0003",
    "\u01f1\u0003\u01f1\u0005\u01f1\u232f\n\u01f1\u0003\u01f1\u0003\u01f1",
    "\u0003\u01f1\u0003\u01f1\u0003\u01f1\u0003\u01f1\u0003\u01f1\u0005\u01f1",
    "\u2338\n\u01f1\u0003\u01f1\u0005\u01f1\u233b\n\u01f1\u0003\u01f1\u0003",
    "\u01f1\u0003\u01f1\u0003\u01f1\u0003\u01f1\u0003\u01f1\u0003\u01f1\u0003",
    "\u01f1\u0003\u01f1\u0003\u01f1\u0005\u01f1\u2347\n\u01f1\u0003\u01f1",
    "\u0003\u01f1\u0003\u01f1\u0003\u01f1\u0003\u01f1\u0003\u01f1\u0005\u01f1",
    "\u234f\n\u01f1\u0003\u01f1\u0003\u01f1\u0003\u01f1\u0003\u01f1\u0003",
    "\u01f1\u0003\u01f1\u0007\u01f1\u2357\n\u01f1\f\u01f1\u000e\u01f1\u235a",
    "\u000b\u01f1\u0005\u01f1\u235c\n\u01f1\u0003\u01f1\u0003\u01f1\u0005",
    "\u01f1\u2360\n\u01f1\u0003\u01f1\u0003\u01f1\u0005\u01f1\u2364\n\u01f1",
    "\u0003\u01f2\u0003\u01f2\u0003\u01f2\u0003\u01f2\u0005\u01f2\u236a\n",
    "\u01f2\u0003\u01f2\u0003\u01f2\u0003\u01f2\u0005\u01f2\u236f\n\u01f2",
    "\u0003\u01f3\u0003\u01f3\u0003\u01f3\u0003\u01f3\u0006\u01f3\u2375\n",
    "\u01f3\r\u01f3\u000e\u01f3\u2376\u0003\u01f3\u0003\u01f3\u0006\u01f3",
    "\u237b\n\u01f3\r\u01f3\u000e\u01f3\u237c\u0003\u01f3\u0003\u01f3\u0005",
    "\u01f3\u2381\n\u01f3\u0005\u01f3\u2383\n\u01f3\u0003\u01f3\u0003\u01f3",
    "\u0005\u01f3\u2387\n\u01f3\u0005\u01f3\u2389\n\u01f3\u0003\u01f3\u0003",
    "\u01f3\u0003\u01f4\u0003\u01f4\u0003\u01f4\u0003\u01f4\u0003\u01f4\u0003",
    "\u01f4\u0003\u01f4\u0005\u01f4\u2394\n\u01f4\u0003\u01f5\u0003\u01f5",
    "\u0003\u01f5\u0003\u01f5\u0003\u01f5\u0003\u01f5\u0003\u01f5\u0005\u01f5",
    "\u239d\n\u01f5\u0003\u01f6\u0003\u01f6\u0003\u01f6\u0003\u01f6\u0003",
    "\u01f6\u0003\u01f6\u0003\u01f6\u0005\u01f6\u23a6\n\u01f6\u0003\u01f7",
    "\u0003\u01f7\u0003\u01f7\u0003\u01f7\u0003\u01f7\u0003\u01f7\u0003\u01f7",
    "\u0005\u01f7\u23af\n\u01f7\u0003\u01f8\u0003\u01f8\u0003\u01f8\u0003",
    "\u01f8\u0003\u01f8\u0003\u01f9\u0003\u01f9\u0003\u01f9\u0007\u01f9\u23b9",
    "\n\u01f9\f\u01f9\u000e\u01f9\u23bc\u000b\u01f9\u0003\u01fa\u0003\u01fa",
    "\u0003\u01fa\u0003\u01fa\u0003\u01fa\u0005\u01fa\u23c3\n\u01fa\u0003",
    "\u01fb\u0003\u01fb\u0003\u01fc\u0003\u01fc\u0003\u01fc\u0003\u01fc\u0005",
    "\u01fc\u23cb\n\u01fc\u0003\u01fd\u0003\u01fd\u0003\u01fd\u0003\u01fd",
    "\u0003\u01fd\u0003\u01fd\u0005\u01fd\u23d3\n\u01fd\u0003\u01fd\u0003",
    "\u01fd\u0003\u01fd\u0003\u01fd\u0003\u01fd\u0005\u01fd\u23da\n\u01fd",
    "\u0003\u01fd\u0005\u01fd\u23dd\n\u01fd\u0003\u01fd\u0003\u01fd\u0003",
    "\u01fd\u0005\u01fd\u23e2\n\u01fd\u0003\u01fd\u0003\u01fd\u0003\u01fd",
    "\u0003\u01fd\u0007\u01fd\u23e8\n\u01fd\f\u01fd\u000e\u01fd\u23eb\u000b",
    "\u01fd\u0003\u01fe\u0003\u01fe\u0003\u01fe\u0003\u01fe\u0003\u01fe\u0003",
    "\u01fe\u0003\u01fe\u0003\u01fe\u0003\u01fe\u0005\u01fe\u23f6\n\u01fe",
    "\u0003\u01fe\u0003\u01fe\u0003\u01fe\u0003\u01fe\u0003\u01fe\u0003\u01fe",
    "\u0003\u01fe\u0003\u01fe\u0003\u01fe\u0003\u01fe\u0003\u01fe\u0005\u01fe",
    "\u2403\n\u01fe\u0003\u01fe\u0003\u01fe\u0003\u01fe\u0003\u01fe\u0005",
    "\u01fe\u2409\n\u01fe\u0003\u01fe\u0003\u01fe\u0003\u01fe\u0003\u01fe",
    "\u0005\u01fe\u240f\n\u01fe\u0003\u01fe\u0003\u01fe\u0003\u01fe\u0003",
    "\u01fe\u0003\u01fe\u0003\u01fe\u0003\u01fe\u0003\u01fe\u0003\u01fe\u0003",
    "\u01fe\u0003\u01fe\u0003\u01fe\u0003\u01fe\u0003\u01fe\u0005\u01fe\u241f",
    "\n\u01fe\u0003\u01fe\u0003\u01fe\u0003\u01fe\u0003\u01fe\u0005\u01fe",
    "\u2425\n\u01fe\u0007\u01fe\u2427\n\u01fe\f\u01fe\u000e\u01fe\u242a\u000b",
    "\u01fe\u0003\u01ff\u0003\u01ff\u0003\u01ff\u0003\u01ff\u0003\u01ff\u0003",
    "\u01ff\u0003\u01ff\u0003\u01ff\u0003\u01ff\u0005\u01ff\u2435\n\u01ff",
    "\u0003\u01ff\u0003\u01ff\u0003\u01ff\u0003\u01ff\u0003\u01ff\u0003\u01ff",
    "\u0005\u01ff\u243d\n\u01ff\u0003\u01ff\u0003\u01ff\u0003\u01ff\u0003",
    "\u01ff\u0003\u01ff\u0003\u01ff\u0003\u01ff\u0007\u01ff\u2446\n\u01ff",
    "\f\u01ff\u000e\u01ff\u2449\u000b\u01ff\u0003\u01ff\u0003\u01ff\u0003",
    "\u01ff\u0003\u01ff\u0003\u01ff\u0003\u01ff\u0003\u01ff\u0006\u01ff\u2452",
    "\n\u01ff\r\u01ff\u000e\u01ff\u2453\u0003\u01ff\u0003\u01ff\u0003\u01ff",
    "\u0003\u01ff\u0003\u01ff\u0003\u01ff\u0003\u01ff\u0003\u01ff\u0003\u01ff",
    "\u0003\u01ff\u0003\u01ff\u0003\u01ff\u0003\u01ff\u0003\u01ff\u0003\u01ff",
    "\u0005\u01ff\u2465\n\u01ff\u0003\u01ff\u0003\u01ff\u0003\u01ff\u0003",
    "\u01ff\u0003\u01ff\u0003\u01ff\u0003\u01ff\u0003\u01ff\u0003\u01ff\u0003",
    "\u01ff\u0003\u01ff\u0007\u01ff\u2472\n\u01ff\f\u01ff\u000e\u01ff\u2475",
    "\u000b\u01ff\u0003\u0200\u0003\u0200\u0003\u0200\u0003\u0201\u0003\u0201",
    "\u0003\u0202\u0003\u0202\u0003\u0202\u0003\u0202\u0003\u0202\u0003\u0202",
    "\u0003\u0202\u0003\u0202\u0003\u0202\u0003\u0202\u0003\u0202\u0003\u0202",
    "\u0003\u0202\u0003\u0202\u0005\u0202\u248a\n\u0202\u0003\u0203\u0003",
    "\u0203\u0003\u0203\u0003\u0203\u0003\u0203\u0003\u0203\u0003\u0203\u0005",
    "\u0203\u2493\n\u0203\u0003\u0204\u0003\u0204\u0003\u0204\u0003\u0204",
    "\u0003\u0204\u0003\u0204\u0003\u0204\u0005\u0204\u249c\n\u0204\u0003",
    "\u0205\u0003\u0205\u0003\u0206\u0003\u0206\u0003\u0206\u0003\u0207\u0003",
    "\u0207\u0003\u0208\u0003\u0208\u0003\u0209\u0003\u0209\u0003\u020a\u0003",
    "\u020a\u0003\u020b\u0003\u020b\u0003\u020c\u0003\u020c\u0003\u020c\u0003",
    "\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003",
    "\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003",
    "\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003",
    "\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003",
    "\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003",
    "\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003",
    "\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003",
    "\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003",
    "\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003",
    "\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003",
    "\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003",
    "\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003",
    "\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003",
    "\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003",
    "\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003",
    "\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003",
    "\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003",
    "\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003",
    "\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003",
    "\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003",
    "\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003",
    "\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003",
    "\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003",
    "\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003",
    "\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003",
    "\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003",
    "\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003",
    "\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003",
    "\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003",
    "\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003",
    "\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003",
    "\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003",
    "\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003",
    "\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003",
    "\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003",
    "\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003",
    "\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003",
    "\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003",
    "\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003",
    "\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003",
    "\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003",
    "\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003",
    "\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003",
    "\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003",
    "\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003",
    "\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003",
    "\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003",
    "\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003",
    "\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0003",
    "\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0005\u020c\u25da\n\u020c",
    "\u0003\u020d\u0003\u020d\u0003\u020d\u0005\u020d\u25df\n\u020d\u0003",
    "\u020e\u0003\u020e\u0003\u020f\u0003\u020f\u0005\u020f\u25e5\n\u020f",
    "\u0003\u0210\u0003\u0210\u0003\u0210\u0003\u0210\u0003\u0210\u0003\u0210",
    "\u0003\u0210\u0003\u0210\u0003\u0210\u0003\u0210\u0003\u0210\u0003\u0210",
    "\u0003\u0210\u0003\u0210\u0003\u0210\u0003\u0210\u0003\u0210\u0003\u0210",
    "\u0003\u0210\u0003\u0210\u0003\u0210\u0003\u0210\u0003\u0210\u0003\u0210",
    "\u0003\u0210\u0003\u0210\u0003\u0210\u0003\u0210\u0003\u0210\u0003\u0210",
    "\u0003\u0210\u0003\u0210\u0003\u0210\u0003\u0210\u0003\u0210\u0003\u0210",
    "\u0003\u0210\u0003\u0210\u0003\u0210\u0003\u0210\u0003\u0210\u0003\u0210",
    "\u0003\u0210\u0003\u0210\u0003\u0210\u0003\u0210\u0003\u0210\u0003\u0210",
    "\u0003\u0210\u0003\u0210\u0003\u0210\u0003\u0210\u0003\u0210\u0003\u0210",
    "\u0003\u0210\u0003\u0210\u0003\u0210\u0003\u0210\u0003\u0210\u0003\u0210",
    "\u0003\u0210\u0003\u0210\u0003\u0210\u0003\u0210\u0003\u0210\u0003\u0210",
    "\u0003\u0210\u0003\u0210\u0003\u0210\u0003\u0210\u0003\u0210\u0003\u0210",
    "\u0003\u0210\u0003\u0210\u0003\u0210\u0003\u0210\u0003\u0210\u0003\u0210",
    "\u0003\u0210\u0003\u0210\u0003\u0210\u0003\u0210\u0003\u0210\u0005\u0210",
    "\u263a\n\u0210\u0003\u0211\u0003\u0211\u0003\u0212\u0003\u0212\u0003",
    "\u0213\u0003\u0213\u0003\u0213\u0003\u0213\u0005\u0213\u2644\n\u0213",
    "\u0003\u0214\u0003\u0214\u0005\u0214\u2648\n\u0214\u0003\u0215\u0005",
    "\u0215\u264b\n\u0215\u0003\u0215\u0003\u0215\u0003\u0216\u0005\u0216",
    "\u2650\n\u0216\u0003\u0217\u0003\u0217\u0003\u0218\u0003\u0218\u0005",
    "\u0218\u2656\n\u0218\u0003\u0218\u0003\u0218\u0005\u0218\u265a\n\u0218",
    "\u0003\u0218\u0003\u0218\u0005\u0218\u265e\n\u0218\u0003\u0218\u0003",
    "\u0218\u0005\u0218\u2662\n\u0218\u0003\u0218\u0003\u0218\u0005\u0218",
    "\u2666\n\u0218\u0005\u0218\u2668\n\u0218\u0003\u0219\u0003\u0219\u0005",
    "\u0219\u266c\n\u0219\u0003\u0219\u0003\u0219\u0003\u021a\u0003\u021a",
    "\u0003\u021a\u0005\u021a\u2673\n\u021a\u0003\u021a\u0003\u021a\u0003",
    "\u021b\u0003\u021b\u0003\u021b\u0003\u021b\u0003\u021b\u0003\u021b\u0007",
    "\u021b\u267d\n\u021b\f\u021b\u000e\u021b\u2680\u000b\u021b\u0005\u021b",
    "\u2682\n\u021b\u0003\u021b\u0003\u021b\u0003\u021b\u0003\u021b\u0003",
    "\u021b\u0003\u021b\u0003\u021c\u0003\u021c\u0003\u021c\u0005\u021c\u268d",
    "\n\u021c\u0003\u021c\u0003\u021c\u0003\u021d\u0003\u021d\u0003\u021d",
    "\u0003\u021d\u0003\u021d\u0003\u021d\u0007\u021d\u2697\n\u021d\f\u021d",
    "\u000e\u021d\u269a\u000b\u021d\u0005\u021d\u269c\n\u021d\u0003\u021d",
    "\u0003\u021d\u0003\u021d\u0003\u021d\u0003\u021e\u0003\u021e\u0005\u021e",
    "\u26a4\n\u021e\u0003\u021e\u0003\u021e\u0005\u021e\u26a8\n\u021e\u0003",
    "\u021e\u0003\u021e\u0003\u021f\u0003\u021f\u0003\u021f\u0005\u021f\u26af",
    "\n\u021f\u0003\u021f\u0003\u021f\u0003\u021f\u0003\u021f\u0005\u021f",
    "\u26b5\n\u021f\u0003\u021f\u0005\u021f\u26b8\n\u021f\u0003\u021f\u0003",
    "\u021f\u0005\u021f\u26bc\n\u021f\u0003\u0220\u0003\u0220\u0003\u0220",
    "\u0005\u0220\u26c1\n\u0220\u0003\u0220\u0003\u0220\u0003\u0220\u0003",
    "\u0220\u0003\u0220\u0005\u0220\u26c8\n\u0220\u0003\u0220\u0005\u0220",
    "\u26cb\n\u0220\u0003\u0220\u0005\u0220\u26ce\n\u0220\u0003\u0220\u0003",
    "\u0220\u0005\u0220\u26d2\n\u0220\u0003\u0221\u0003\u0221\u0003\u0222",
    "\u0003\u0222\u0005\u0222\u26d8\n\u0222\u0006\u0222\u26da\n\u0222\r\u0222",
    "\u000e\u0222\u26db\u0003\u0223\u0003\u0223\u0005\u0223\u26e0\n\u0223",
    "\u0006\u0223\u26e2\n\u0223\r\u0223\u000e\u0223\u26e3\u0003\u0224\u0003",
    "\u0224\u0003\u0224\u0003\u0224\u0003\u0224\u0003\u0224\u0003\u0224\u0005",
    "\u0224\u26ed\n\u0224\u0003\u0225\u0003\u0225\u0003\u0225\u0003\u0225",
    "\u0003\u0225\u0003\u0225\u0003\u0225\u0005\u0225\u26f6\n\u0225\u0003",
    "\u0226\u0003\u0226\u0003\u0226\u0003\u0226\u0003\u0226\u0003\u0226\u0007",
    "\u0226\u26fe\n\u0226\f\u0226\u000e\u0226\u2701\u000b\u0226\u0005\u0226",
    "\u2703\n\u0226\u0003\u0226\u0003\u0226\u0003\u0227\u0003\u0227\u0003",
    "\u0227\u0003\u0227\u0003\u0227\u0003\u0227\u0007\u0227\u270d\n\u0227",
    "\f\u0227\u000e\u0227\u2710\u000b\u0227\u0005\u0227\u2712\n\u0227\u0003",
    "\u0227\u0003\u0227\u0003\u0227\u0003\u0227\u0003\u0228\u0003\u0228\u0003",
    "\u0228\u0003\u0228\u0003\u0228\u0005\u0228\u271d\n\u0228\u0003\u0229",
    "\u0003\u0229\u0005\u0229\u2721\n\u0229\u0003\u0229\u0003\u0229\u0003",
    "\u0229\u0005\u0229\u2726\n\u0229\u0003\u0229\u0005\u0229\u2729\n\u0229",
    "\u0003\u022a\u0003\u022a\u0003\u022a\u0003\u022a\u0003\u022a\u0003\u022a",
    "\u0007\u022a\u2731\n\u022a\f\u022a\u000e\u022a\u2734\u000b\u022a\u0003",
    "\u022a\u0003\u022a\u0005\u022a\u2738\n\u022a\u0003\u022a\u0003\u022a",
    "\u0005\u022a\u273c\n\u022a\u0003\u022a\u0003\u022a\u0005\u022a\u2740",
    "\n\u022a\u0003\u022b\u0003\u022b\u0005\u022b\u2744\n\u022b\u0003\u022b",
    "\u0005\u022b\u2747\n\u022b\u0003\u022b\u0005\u022b\u274a\n\u022b\u0003",
    "\u022c\u0003\u022c\u0003\u022c\u0003\u022d\u0003\u022d\u0003\u022d\u0003",
    "\u022d\u0003\u022d\u0003\u022d\u0003\u022d\u0003\u022d\u0003\u022d\u0003",
    "\u022d\u0005\u022d\u2759\n\u022d\u0003\u022e\u0003\u022e\u0003\u022e",
    "\u0003\u022e\u0003\u022e\u0007\u022e\u2760\n\u022e\f\u022e\u000e\u022e",
    "\u2763\u000b\u022e\u0003\u022e\u0003\u022e\u0003\u022f\u0003\u022f\u0005",
    "\u022f\u2769\n\u022f\u0003\u022f\u0003\u022f\u0005\u022f\u276d\n\u022f",
    "\u0003\u022f\u0005\u022f\u2770\n\u022f\u0003\u0230\u0003\u0230\u0003",
    "\u0230\u0003\u0230\u0005\u0230\u2776\n\u0230\u0003\u0231\u0003\u0231",
    "\u0003\u0231\u0003\u0231\u0003\u0231\u0003\u0231\u0003\u0231\u0005\u0231",
    "\u277f\n\u0231\u0003\u0232\u0003\u0232\u0003\u0232\u0003\u0232\u0005",
    "\u0232\u2785\n\u0232\u0003\u0232\u0003\u0232\u0005\u0232\u2789\n\u0232",
    "\u0003\u0233\u0003\u0233\u0005\u0233\u278d\n\u0233\u0003\u0233\u0003",
    "\u0233\u0003\u0233\u0003\u0234\u0003\u0234\u0003\u0234\u0003\u0234\u0003",
    "\u0234\u0003\u0234\u0003\u0234\u0003\u0234\u0005\u0234\u279a\n\u0234",
    "\u0003\u0234\u0003\u0234\u0003\u0234\u0003\u0234\u0003\u0234\u0003\u0234",
    "\u0003\u0234\u0003\u0234\u0003\u0234\u0005\u0234\u27a5\n\u0234\u0005",
    "\u0234\u27a7\n\u0234\u0003\u0235\u0006\u0235\u27aa\n\u0235\r\u0235\u000e",
    "\u0235\u27ab\u0003\u0236\u0003\u0236\u0005\u0236\u27b0\n\u0236\u0003",
    "\u0236\u0005\u0236\u27b3\n\u0236\u0003\u0236\u0005\u0236\u27b6\n\u0236",
    "\u0003\u0237\u0003\u0237\u0003\u0237\u0003\u0237\u0003\u0237\u0003\u0237",
    "\u0003\u0238\u0003\u0238\u0003\u0238\u0003\u0238\u0003\u0238\u0003\u0238",
    "\u0003\u0238\u0003\u0238\u0003\u0238\u0003\u0238\u0003\u0238\u0003\u0238",
    "\u0003\u0238\u0005\u0238\u27cb\n\u0238\u0003\u0239\u0003\u0239\u0003",
    "\u0239\u0003\u0239\u0003\u023a\u0005\u023a\u27d2\n\u023a\u0003\u023a",
    "\u0003\u023a\u0003\u023b\u0003\u023b\u0005\u023b\u27d8\n\u023b\u0003",
    "\u023b\u0003\u023b\u0005\u023b\u27dc\n\u023b\u0003\u023c\u0003\u023c",
    "\u0005\u023c\u27e0\n\u023c\u0003\u023c\u0003\u023c\u0005\u023c\u27e4",
    "\n\u023c\u0003\u023d\u0003\u023d\u0003\u023d\u0003\u023e\u0003\u023e",
    "\u0003\u023e\u0003\u023e\u0003\u023e\u0007\u023e\u27ee\n\u023e\f\u023e",
    "\u000e\u023e\u27f1\u000b\u023e\u0003\u023e\u0005\u023e\u27f4\n\u023e",
    "\u0003\u023e\u0003\u023e\u0003\u023e\u0003\u023f\u0003\u023f\u0003\u023f",
    "\u0003\u023f\u0003\u023f\u0003\u0240\u0003\u0240\u0003\u0240\u0003\u0241",
    "\u0005\u0241\u2802\n\u0241\u0003\u0241\u0003\u0241\u0003\u0241\u0003",
    "\u0241\u0005\u0241\u2808\n\u0241\u0003\u0241\u0003\u0241\u0003\u0241",
    "\u0003\u0241\u0003\u0241\u0005\u0241\u280f\n\u0241\u0003\u0242\u0003",
    "\u0242\u0003\u0242\u0005\u0242\u2814\n\u0242\u0003\u0242\u0003\u0242",
    "\u0003\u0242\u0003\u0242\u0003\u0242\u0003\u0242\u0003\u0242\u0003\u0242",
    "\u0003\u0242\u0005\u0242\u281f\n\u0242\u0003\u0242\u0005\u0242\u2822",
    "\n\u0242\u0003\u0242\u0003\u0242\u0003\u0242\u0003\u0242\u0005\u0242",
    "\u2828\n\u0242\u0005\u0242\u282a\n\u0242\u0003\u0243\u0003\u0243\u0003",
    "\u0243\u0003\u0243\u0003\u0243\u0003\u0243\u0005\u0243\u2832\n\u0243",
    "\u0003\u0243\u0003\u0243\u0003\u0244\u0003\u0244\u0003\u0244\u0003\u0244",
    "\u0003\u0244\u0003\u0244\u0003\u0244\u0003\u0244\u0005\u0244\u283e\n",
    "\u0244\u0005\u0244\u2840\n\u0244\u0003\u0245\u0003\u0245\u0003\u0245",
    "\u0003\u0245\u0003\u0245\u0003\u0246\u0003\u0246\u0003\u0247\u0003\u0247",
    "\u0003\u0248\u0003\u0248\u0003\u0249\u0003\u0249\u0003\u0249\u0003\u024a",
    "\u0003\u024a\u0005\u024a\u2852\n\u024a\u0003\u024b\u0003\u024b\u0006",
    "\u024b\u2856\n\u024b\r\u024b\u000e\u024b\u2857\u0003\u024c\u0003\u024c",
    "\u0003\u024c\u0003\u024c\u0007\u024c\u285e\n\u024c\f\u024c\u000e\u024c",
    "\u2861\u000b\u024c\u0003\u024c\u0003\u024c\u0005\u024c\u2865\n\u024c",
    "\u0003\u024c\u0003\u024c\u0003\u024d\u0005\u024d\u286a\n\u024d\u0003",
    "\u024d\u0005\u024d\u286d\n\u024d\u0003\u024d\u0003\u024d\u0003\u024e",
    "\u0003\u024e\u0005\u024e\u2873\n\u024e\u0006\u024e\u2875\n\u024e\r\u024e",
    "\u000e\u024e\u2876\u0003\u024f\u0003\u024f\u0003\u024f\u0005\u024f\u287c",
    "\n\u024f\u0003\u024f\u0003\u024f\u0005\u024f\u2880\n\u024f\u0003\u024f",
    "\u0003\u024f\u0003\u0250\u0003\u0250\u0003\u0250\u0005\u0250\u2887\n",
    "\u0250\u0003\u0251\u0003\u0251\u0007\u0251\u288b\n\u0251\f\u0251\u000e",
    "\u0251\u288e\u000b\u0251\u0003\u0251\u0005\u0251\u2891\n\u0251\u0003",
    "\u0251\u0005\u0251\u2894\n\u0251\u0003\u0252\u0003\u0252\u0007\u0252",
    "\u2898\n\u0252\f\u0252\u000e\u0252\u289b\u000b\u0252\u0003\u0253\u0003",
    "\u0253\u0005\u0253\u289f\n\u0253\u0003\u0254\u0005\u0254\u28a2\n\u0254",
    "\u0003\u0254\u0003\u0254\u0003\u0254\u0005\u0254\u28a7\n\u0254\u0005",
    "\u0254\u28a9\n\u0254\u0003\u0255\u0003\u0255\u0005\u0255\u28ad\n\u0255",
    "\u0003\u0256\u0003\u0256\u0003\u0256\u0003\u0256\u0007\u0256\u28b3\n",
    "\u0256\f\u0256\u000e\u0256\u28b6\u000b\u0256\u0005\u0256\u28b8\n\u0256",
    "\u0003\u0256\u0003\u0256\u0003\u0257\u0003\u0257\u0003\u0257\u0003\u0257",
    "\u0005\u0257\u28c0\n\u0257\u0003\u0257\u0003\u0257\u0003\u0258\u0003",
    "\u0258\u0003\u0258\u0003\u0258\u0003\u0259\u0003\u0259\u0005\u0259\u28ca",
    "\n\u0259\u0003\u0259\u0003\u0259\u0007\u0259\u28ce\n\u0259\f\u0259\u000e",
    "\u0259\u28d1\u000b\u0259\u0003\u0259\u0003\u0259\u0005\u0259\u28d5\n",
    "\u0259\u0005\u0259\u28d7\n\u0259\u0003\u025a\u0003\u025a\u0003\u025a",
    "\u0003\u025b\u0003\u025b\u0003\u025c\u0003\u025c\u0003\u025d\u0003\u025d",
    "\u0003\u025d\u0003\u025e\u0003\u025e\u0003\u025e\u0003\u025e\u0005\u025e",
    "\u28e7\n\u025e\u0003\u025f\u0003\u025f\u0007\u025f\u28eb\n\u025f\f\u025f",
    "\u000e\u025f\u28ee\u000b\u025f\u0003\u0260\u0003\u0260\u0007\u0260\u28f2",
    "\n\u0260\f\u0260\u000e\u0260\u28f5\u000b\u0260\u0003\u0260\u0003\u0260",
    "\u0003\u0260\u0003\u0260\u0003\u0260\u0007\u0260\u28fc\n\u0260\f\u0260",
    "\u000e\u0260\u28ff\u000b\u0260\u0005\u0260\u2901\n\u0260\u0003\u0261",
    "\u0003\u0261\u0007\u0261\u2905\n\u0261\f\u0261\u000e\u0261\u2908\u000b",
    "\u0261\u0003\u0261\u0007\u0261\u290b\n\u0261\f\u0261\u000e\u0261\u290e",
    "\u000b\u0261\u0003\u0261\u0003\u0261\u0005\u0261\u2912\n\u0261\u0003",
    "\u0262\u0003\u0262\u0003\u0263\u0003\u0263\u0005\u0263\u2918\n\u0263",
    "\u0003\u0263\u0003\u0263\u0005\u0263\u291c\n\u0263\u0003\u0263\u0003",
    "\u0263\u0003\u0264\u0003\u0264\u0003\u0265\u0003\u0265\u0003\u0265\u0003",
    "\u0265\u0005\u0265\u2926\n\u0265\u0003\u0266\u0003\u0266\u0003\u0266",
    "\u0003\u0266\u0005\u0266\u292c\n\u0266\u0003\u0266\u0005\u0266\u292f",
    "\n\u0266\u0003\u0267\u0003\u0267\u0005\u0267\u2933\n\u0267\u0003\u0267",
    "\u0003\u0267\u0003\u0267\u0003\u0268\u0003\u0268\u0003\u0268\u0003\u0268",
    "\u0007\u0268\u293c\n\u0268\f\u0268\u000e\u0268\u293f\u000b\u0268\u0003",
    "\u0269\u0003\u0269\u0003\u0269\u0003\u026a\u0003\u026a\u0003\u026a\u0003",
    "\u026a\u0005\u026a\u2948\n\u026a\u0003\u026b\u0003\u026b\u0003\u026b",
    "\u0003\u026c\u0003\u026c\u0003\u026c\u0003\u026c\u0005\u026c\u2951\n",
    "\u026c\u0003\u026c\u0005\u026c\u2954\n\u026c\u0003\u026d\u0003\u026d",
    "\u0003\u026d\u0003\u026d\u0005\u026d\u295a\n\u026d\u0003\u026d\u0003",
    "\u026d\u0003\u026d\u0003\u026d\u0007\u026d\u2960\n\u026d\f\u026d\u000e",
    "\u026d\u2963\u000b\u026d\u0003\u026d\u0005\u026d\u2966\n\u026d\u0003",
    "\u026e\u0003\u026e\u0003\u026e\u0003\u026e\u0003\u026e\u0005\u026e\u296d",
    "\n\u026e\u0003\u026e\u0005\u026e\u2970\n\u026e\u0003\u026f\u0003\u026f",
    "\u0003\u026f\u0002\u0005\u03f8\u03fa\u03fc\u0270\u0002\u0004\u0006\b",
    "\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.",
    "02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088",
    "\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0",
    "\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8",
    "\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0",
    "\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8",
    "\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100",
    "\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118",
    "\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c\u012e\u0130",
    "\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148",
    "\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a\u015c\u015e\u0160",
    "\u0162\u0164\u0166\u0168\u016a\u016c\u016e\u0170\u0172\u0174\u0176\u0178",
    "\u017a\u017c\u017e\u0180\u0182\u0184\u0186\u0188\u018a\u018c\u018e\u0190",
    "\u0192\u0194\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2\u01a4\u01a6\u01a8",
    "\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc\u01be\u01c0",
    "\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8",
    "\u01da\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0",
    "\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe\u0200\u0202\u0204\u0206\u0208",
    "\u020a\u020c\u020e\u0210\u0212\u0214\u0216\u0218\u021a\u021c\u021e\u0220",
    "\u0222\u0224\u0226\u0228\u022a\u022c\u022e\u0230\u0232\u0234\u0236\u0238",
    "\u023a\u023c\u023e\u0240\u0242\u0244\u0246\u0248\u024a\u024c\u024e\u0250",
    "\u0252\u0254\u0256\u0258\u025a\u025c\u025e\u0260\u0262\u0264\u0266\u0268",
    "\u026a\u026c\u026e\u0270\u0272\u0274\u0276\u0278\u027a\u027c\u027e\u0280",
    "\u0282\u0284\u0286\u0288\u028a\u028c\u028e\u0290\u0292\u0294\u0296\u0298",
    "\u029a\u029c\u029e\u02a0\u02a2\u02a4\u02a6\u02a8\u02aa\u02ac\u02ae\u02b0",
    "\u02b2\u02b4\u02b6\u02b8\u02ba\u02bc\u02be\u02c0\u02c2\u02c4\u02c6\u02c8",
    "\u02ca\u02cc\u02ce\u02d0\u02d2\u02d4\u02d6\u02d8\u02da\u02dc\u02de\u02e0",
    "\u02e2\u02e4\u02e6\u02e8\u02ea\u02ec\u02ee\u02f0\u02f2\u02f4\u02f6\u02f8",
    "\u02fa\u02fc\u02fe\u0300\u0302\u0304\u0306\u0308\u030a\u030c\u030e\u0310",
    "\u0312\u0314\u0316\u0318\u031a\u031c\u031e\u0320\u0322\u0324\u0326\u0328",
    "\u032a\u032c\u032e\u0330\u0332\u0334\u0336\u0338\u033a\u033c\u033e\u0340",
    "\u0342\u0344\u0346\u0348\u034a\u034c\u034e\u0350\u0352\u0354\u0356\u0358",
    "\u035a\u035c\u035e\u0360\u0362\u0364\u0366\u0368\u036a\u036c\u036e\u0370",
    "\u0372\u0374\u0376\u0378\u037a\u037c\u037e\u0380\u0382\u0384\u0386\u0388",
    "\u038a\u038c\u038e\u0390\u0392\u0394\u0396\u0398\u039a\u039c\u039e\u03a0",
    "\u03a2\u03a4\u03a6\u03a8\u03aa\u03ac\u03ae\u03b0\u03b2\u03b4\u03b6\u03b8",
    "\u03ba\u03bc\u03be\u03c0\u03c2\u03c4\u03c6\u03c8\u03ca\u03cc\u03ce\u03d0",
    "\u03d2\u03d4\u03d6\u03d8\u03da\u03dc\u03de\u03e0\u03e2\u03e4\u03e6\u03e8",
    "\u03ea\u03ec\u03ee\u03f0\u03f2\u03f4\u03f6\u03f8\u03fa\u03fc\u03fe\u0400",
    "\u0402\u0404\u0406\u0408\u040a\u040c\u040e\u0410\u0412\u0414\u0416\u0418",
    "\u041a\u041c\u041e\u0420\u0422\u0424\u0426\u0428\u042a\u042c\u042e\u0430",
    "\u0432\u0434\u0436\u0438\u043a\u043c\u043e\u0440\u0442\u0444\u0446\u0448",
    "\u044a\u044c\u044e\u0450\u0452\u0454\u0456\u0458\u045a\u045c\u045e\u0460",
    "\u0462\u0464\u0466\u0468\u046a\u046c\u046e\u0470\u0472\u0474\u0476\u0478",
    "\u047a\u047c\u047e\u0480\u0482\u0484\u0486\u0488\u048a\u048c\u048e\u0490",
    "\u0492\u0494\u0496\u0498\u049a\u049c\u049e\u04a0\u04a2\u04a4\u04a6\u04a8",
    "\u04aa\u04ac\u04ae\u04b0\u04b2\u04b4\u04b6\u04b8\u04ba\u04bc\u04be\u04c0",
    "\u04c2\u04c4\u04c6\u04c8\u04ca\u04cc\u04ce\u04d0\u04d2\u04d4\u04d6\u04d8",
    "\u04da\u04dc\u0002\u00a3\u0004\u0002%%\u0085\u0085\u0004\u0002\u0256",
    "\u0256\u025b\u025b\u0005\u0002??\u008b\u008b\u009f\u009f\u0005\u0002",
    "((\u01d7\u01d7\u0215\u0215\u0006\u0002((\u01f6\u01f6\u0255\u0255\u0299",
    "\u0299\u0004\u0002\u024d\u024d\u0372\u0372\u0004\u0002\u0010\u0010\u01ac",
    "\u01ac\u0005\u0002**LL\u00a2\u00a2\u0004\u0002\u0203\u0203\u026d\u026d",
    "\u0005\u0002\u0246\u0246\u02bd\u02bd\u02c3\u02c3\u0004\u0002\u01dd\u01dd",
    "\u0219\u0219\u0004\u0002\u01be\u01be\u0227\u0227\u0004\u0002\u01bc\u01bc",
    "\u020c\u020c\u0005\u0002GGKKoo\u0005\u0002\u00dc\u00dc\u02e9\u02e9\u0324",
    "\u0324\u0004\u0002FF~~\u0005\u0002((\u01e7\u01e7\u0201\u0201\u0005\u0002",
    "((\u01e3\u01e3\u0329\u0329\u0004\u0002\u02b3\u02b3\u02d1\u02d1\u0004",
    "\u0002\u01e1\u01e1\u01e8\u01e8\u0004\u0002\u00e9\u00e9\u012d\u012d\u0004",
    "\u0002\u00e8\u00e8\u0106\u0106\u0004\u0002\u00f5\u00f5\u0291\u0291\u0004",
    "\u0002HHRR\u0005\u0002\u0205\u0205\u0264\u0264\u029b\u029b\u0004\u0002",
    "??\u008b\u008b\u0003\u0002\u01c2\u01c3\u0003\u0002\u0367\u0368\u0004",
    "\u0002\u0372\u0372\u037a\u037a\u0005\u0002\u0200\u0200\u0222\u0222\u0253",
    "\u0253\u0004\u0002((\u0367\u0368\b\u0002((\u01cd\u01cd\u01cf\u01cf\u01e7",
    "\u01e7\u0201\u0201\u027a\u027a\u0003\u0002\u0368\u0369\u0004\u0002\b",
    "\b00\u0005\u0002BB\u0107\u0107\u02ca\u02ca\u0004\u0002\u000e\u000e\u0099",
    "\u0099\u0004\u0002\u00aa\u00aa\u02d4\u02d4\u0004\u0002ii\u00ed\u00ed",
    "\u0004\u0002\b\b~~\u0004\u0002\u0200\u0200\u0222\u0222\u0005\u0002\u0124",
    "\u0124\u0127\u0127\u0324\u0324\u0004\u0002\u00be\u00be\u0119\u0119\u0004",
    "\u0002\u0015\u0015\u0080\u0080\u0004\u0002\u00f6\u00f6\u02bc\u02bc\u0004",
    "\u0002__\u01d1\u01d1\u0004\u0002\u01c9\u01c9\u01fd\u01fd\u0004\u0002",
    "[[\u0291\u0291\u0004\u0002))__\u0004\u0002\t\t..\u0005\u0002\u0317\u0319",
    "\u031b\u0320\u0322\u0323\u0005\u0002))DD__\u0004\u0002NN\u00f1\u00f1",
    "\u0004\u0002\u00a6\u00a6\u02ce\u02ce\u0006\u0002\u0200\u0200\u0222\u0222",
    "\u0252\u0252\u0270\u0270\u0004\u0002\u0200\u0200\u0252\u0252\u0004\u0002",
    "\u000f\u000f++\u0005\u0002<<FF\u00a4\u00a4\u0004\u0002\"\"JJ\u0004\u0002",
    "WW\u0083\u0083\u0004\u0002\t\t./\u0003\u0002\u02a8\u02a9\u0004\u0002",
    "\u01b6\u01b6\u02ab\u02ab\u0004\u0002\u02c0\u02c0\u02d5\u02d5\u0004\u0002",
    "\u00ab\u00ab\u025c\u025c\u0004\u0002\u0208\u0208\u0297\u0297\u0004\u0002",
    "\u0169\u0169\u022a\u022a\u0007\u0002``\u022f\u0230\u0232\u0232\u0236",
    "\u023e\u027c\u027c\u0006\u0002\u022c\u022d\u0231\u0231\u0233\u0234\u027d",
    "\u027d\u0005\u0002aa\u022b\u022b\u0235\u0235\u0004\u0002\u021b\u021b",
    "\u02aa\u02aa\u0004\u0002\u02a4\u02a4\u02a6\u02a6\u0004\u0002QQ\u028b",
    "\u028b\u0004\u000200\u01db\u01db\u0005\u0002\u001f\u001f77\u009d\u009d",
    "\u0004\u0002\u00bb\u00bb\u01c5\u01c5\u0005\u0002tt\u0096\u0096\u0206",
    "\u0206\u0004\u0002\u012a\u012a\u0370\u0370\u0004\u0002\u00b0\u00b0\u00b3",
    "\u00b3\u0004\u0002]]\u00a0\u00a0\u0004\u0002\u01c5\u01c5\u029c\u029c",
    "\u0004\u0002&&\u02d0\u02d0\u0004\u0002gg\u0227\u0227\u0004\u0002\u01f9",
    "\u01f9\u0276\u0276\u0006\u0002\u0157\u0157\u0159\u0159\u015d\u015d\u02b4",
    "\u02b4\u0004\u0002\u01b7\u01b7\u027e\u027e\u0004\u0002>>GG\b\u0002t",
    "t\u0096\u0096\u009b\u009b\u01f2\u01f2\u0206\u0206\u02d0\u02d0\u0004",
    "\u0002\u024c\u024c\u02b0\u02b0\u0004\u0002\u01ef\u01ef\u02d3\u02d3\u0004",
    "\u0002tt\u0206\u0206\u0005\u0002HHSS\u0213\u0213\u0004\u0002&&\u0086",
    "\u0086\t\u0002\u00b2\u00b2\u00b4\u00b4\u00ba\u00ba\u00fd\u00fe\u010b",
    "\u010b\u010d\u010e\u011d\u011d\u0004\u0002\u00d3\u00d3\u00f3\u00f3\u0004",
    "\u0002HH\u0213\u0213\u0004\u0002\u0344\u0344\u0355\u0355\u0005\u0002",
    "\u0208\u0208\u0227\u0227\u0297\u0297\u0006\u0002\u00c8\u00c8\u00d6\u00d6",
    "\u00ea\u00ea\u00ee\u00ee\u0004\u0002\u02b0\u02b0\u02cf\u02cf\u0003\u0002",
    "\u00dc\u00dd\u0004\u0002\u01d2\u01d2\u0275\u0275\b\u0002\u0169\u0169",
    "\u01ec\u01ec\u01ee\u01ee\u0207\u0207\u027b\u027b\u029d\u029d\u0003\u0002",
    "+,\u0004\u0002+,88\u0005\u0002\u01f9\u01f9\u0266\u0266\u033f\u033f\u0004",
    "\u0002\u021f\u021f\u02bf\u02bf\u0004\u0002\u00f2\u00f2\u0206\u0206\t",
    "\u0002\u00b0\u00b0\u00b3\u00b3\u00b9\u00b9\u00fc\u00fc\u0109\u0109\u010c",
    "\u010c\u011c\u011c\u0005\u0002\u00d2\u00d2\u00f8\u00f8\u01f9\u01f9\u0005",
    "\u0002\u0372\u0372\u037a\u037a\u037c\u037c\u0003\u0002\u037d\u037e\u0005",
    "\u0002\u0324\u032f\u0372\u0372\u037b\u037b\u0004\u0002\u0367\u0369\u0373",
    "\u0373\u0004\u000299\u009c\u009c\u0004\u0002hh\u0376\u0376\u0005\u0002",
    "\u0165\u0167\u016f\u0172\u0250\u0250\u0004\u0002\u0019\u0019\u0166\u0166",
    "\u0004\u0002\u0019\u0019\u0165\u0165\u0003\u0002\u0153\u0158\u0004\u0002",
    "\u00a1\u00a1\u029a\u029a\u0004\u0002\u015c\u015f\u0201\u0201\u0006\u0002",
    "\u0160\u0160\u016b\u016e\u0175\u0175\u01ba\u01bb\u0005\u0002\u0161\u0164",
    "\u0169\u016a\u01b8\u01b8\u0004\u0002\u0088\u0088\u0173\u0173\u0004\u0002",
    "\u021f\u021f\u0334\u033c\f\u0002\u0153\u0154\u0156\u0158\u015a\u015a",
    "\u015c\u015c\u0163\u0163\u0167\u0167\u0169\u0169\u016c\u016c\u0177\u0178",
    "\u01bb\u01bb\u0006\u0002\u0162\u0162\u0165\u0166\u017b\u017b\u02b4\u02b4",
    "\u0004\u0002\u015d\u015f\u0179\u0179\u0004\u0002\u0169\u0169\u0250\u0250",
    "\u0004\u0002\u0160\u0161\u0163\u0163\u0004\u0002\u0199\u019a\u01a0\u01a0",
    "\u0004\u0002##\u0197\u019a\u0005\u0002\u0012\u0012UU\u009a\u009a\u0004",
    "\u0002\u0165\u0165\u0169\u0169\u0003\u0002\u01a3\u01a4\u0005\u0002\u000f",
    "\u000f++\u0342\u0342\u0005\u0002\u0187\u0187\u018d\u018e\u0193\u0193",
    "\u0005\u0002\u0188\u018a\u018f\u0192\u0194\u0196\u0004\u0002vv\u0291",
    "\u0291\u0004\u0002\u00d1\u00d1\u00ff\u00ff\u0004\u0002\u0259\u0259\u0267",
    "\u0267\u0004\u0002ff\u0358\u0358\u0005\u000299\u009c\u009c\u02c7\u02c7",
    "\u0004\u0002zz\u0084\u0084\u0005\u0002\t\t\u01af\u01af\u02a0\u02a0\u0005",
    "\u0002\u0350\u0350\u0352\u0352\u0358\u0359\u0003\u0002\u034d\u0354\u0006",
    "\u0002\u013c\u013c\u013f\u013f\u014c\u014d\u0204\u0204\u0003\u0002\u02ef",
    "\u0316\u0003\u0002\u0330\u0333\u0003\u0002\u02e6\u02ee\u0003\u0002\u02de",
    "\u02e5\u0005\u0002\u0160\u0164\u0170\u0170\u0173\u0173$\u0002((JJRR",
    "pp\u00ae\u00b0\u00b2\u00b4\u00b7\u00b7\u00bc\u00be\u00c0\u00c0\u00c2",
    "\u00c4\u00c7\u00c9\u00cb\u00cd\u00d0\u00d0\u00d2\u00d4\u00d6\u00d6\u00d9",
    "\u00dd\u00df\u00e2\u00e5\u00e5\u00e7\u00ec\u00ee\u00f6\u00f8\u00f9\u00fc",
    "\u00fc\u00fe\u00fe\u0101\u0102\u0104\u0104\u0106\u0107\u0109\u010b\u010e",
    "\u010e\u0110\u0115\u0117\u0119\u011b\u011d\u0120\u0127\u012b\u012b\u012d",
    "\u012d\u0005\u0002\r\rffmm\u0004\u0002\u000e\u000eOO\u0006\u0002GGK",
    "Koo\u013e\u013e\u0004\u0002\u0126\u0126\u014c\u014c\u0004\u0002((\u0344",
    "\u0344\u0004\u0002\u0373\u0373\u0375\u0375\u0004\u0002rr\u02b6\u02b6",
    "\u0002\u3088\u0002\u04df\u0003\u0002\u0002\u0002\u0004\u04f0\u0003\u0002",
    "\u0002\u0002\u0006\u0508\u0003\u0002\u0002\u0002\b\u050a\u0003\u0002",
    "\u0002\u0002\n\u0534\u0003\u0002\u0002\u0002\f\u054a\u0003\u0002\u0002",
    "\u0002\u000e\u055a\u0003\u0002\u0002\u0002\u0010\u055c\u0003\u0002\u0002",
    "\u0002\u0012\u056e\u0003\u0002\u0002\u0002\u0014\u057e\u0003\u0002\u0002",
    "\u0002\u0016\u059b\u0003\u0002\u0002\u0002\u0018\u05a1\u0003\u0002\u0002",
    "\u0002\u001a\u05bf\u0003\u0002\u0002\u0002\u001c\u05c8\u0003\u0002\u0002",
    "\u0002\u001e\u05ca\u0003\u0002\u0002\u0002 \u05cc\u0003\u0002\u0002",
    "\u0002\"\u05ce\u0003\u0002\u0002\u0002$\u05d0\u0003\u0002\u0002\u0002",
    "&\u05d8\u0003\u0002\u0002\u0002(\u05f6\u0003\u0002\u0002\u0002*\u0617",
    "\u0003\u0002\u0002\u0002,\u064a\u0003\u0002\u0002\u0002.\u0667\u0003",
    "\u0002\u0002\u00020\u0686\u0003\u0002\u0002\u00022\u069b\u0003\u0002",
    "\u0002\u00024\u06e8\u0003\u0002\u0002\u00026\u06ea\u0003\u0002\u0002",
    "\u00028\u06fc\u0003\u0002\u0002\u0002:\u0739\u0003\u0002\u0002\u0002",
    "<\u0750\u0003\u0002\u0002\u0002>\u0752\u0003\u0002\u0002\u0002@\u0778",
    "\u0003\u0002\u0002\u0002B\u07a8\u0003\u0002\u0002\u0002D\u07be\u0003",
    "\u0002\u0002\u0002F\u07c1\u0003\u0002\u0002\u0002H\u07d1\u0003\u0002",
    "\u0002\u0002J\u07d3\u0003\u0002\u0002\u0002L\u07db\u0003\u0002\u0002",
    "\u0002N\u07e3\u0003\u0002\u0002\u0002P\u07e7\u0003\u0002\u0002\u0002",
    "R\u07ef\u0003\u0002\u0002\u0002T\u07f3\u0003\u0002\u0002\u0002V\u07f7",
    "\u0003\u0002\u0002\u0002X\u0823\u0003\u0002\u0002\u0002Z\u0829\u0003",
    "\u0002\u0002\u0002\\\u082b\u0003\u0002\u0002\u0002^\u0840\u0003\u0002",
    "\u0002\u0002`\u0847\u0003\u0002\u0002\u0002b\u0849\u0003\u0002\u0002",
    "\u0002d\u0857\u0003\u0002\u0002\u0002f\u085a\u0003\u0002\u0002\u0002",
    "h\u085f\u0003\u0002\u0002\u0002j\u0862\u0003\u0002\u0002\u0002l\u087e",
    "\u0003\u0002\u0002\u0002n\u088e\u0003\u0002\u0002\u0002p\u089f\u0003",
    "\u0002\u0002\u0002r\u08a1\u0003\u0002\u0002\u0002t\u08ac\u0003\u0002",
    "\u0002\u0002v\u08ae\u0003\u0002\u0002\u0002x\u08e5\u0003\u0002\u0002",
    "\u0002z\u08e7\u0003\u0002\u0002\u0002|\u08f6\u0003\u0002\u0002\u0002",
    "~\u08f8\u0003\u0002\u0002\u0002\u0080\u090e\u0003\u0002\u0002\u0002",
    "\u0082\u0938\u0003\u0002\u0002\u0002\u0084\u0956\u0003\u0002\u0002\u0002",
    "\u0086\u0963\u0003\u0002\u0002\u0002\u0088\u0966\u0003\u0002\u0002\u0002",
    "\u008a\u096e\u0003\u0002\u0002\u0002\u008c\u0971\u0003\u0002\u0002\u0002",
    "\u008e\u0979\u0003\u0002\u0002\u0002\u0090\u097e\u0003\u0002\u0002\u0002",
    "\u0092\u0991\u0003\u0002\u0002\u0002\u0094\u0995\u0003\u0002\u0002\u0002",
    "\u0096\u09b2\u0003\u0002\u0002\u0002\u0098\u09bd\u0003\u0002\u0002\u0002",
    "\u009a\u09c7\u0003\u0002\u0002\u0002\u009c\u09d1\u0003\u0002\u0002\u0002",
    "\u009e\u09de\u0003\u0002\u0002\u0002\u00a0\u09e3\u0003\u0002\u0002\u0002",
    "\u00a2\u09e6\u0003\u0002\u0002\u0002\u00a4\u09ea\u0003\u0002\u0002\u0002",
    "\u00a6\u09ed\u0003\u0002\u0002\u0002\u00a8\u09f2\u0003\u0002\u0002\u0002",
    "\u00aa\u09fd\u0003\u0002\u0002\u0002\u00ac\u0a07\u0003\u0002\u0002\u0002",
    "\u00ae\u0a4e\u0003\u0002\u0002\u0002\u00b0\u0a6b\u0003\u0002\u0002\u0002",
    "\u00b2\u0a6d\u0003\u0002\u0002\u0002\u00b4\u0a89\u0003\u0002\u0002\u0002",
    "\u00b6\u0a91\u0003\u0002\u0002\u0002\u00b8\u0aaf\u0003\u0002\u0002\u0002",
    "\u00ba\u0b3e\u0003\u0002\u0002\u0002\u00bc\u0b40\u0003\u0002\u0002\u0002",
    "\u00be\u0b43\u0003\u0002\u0002\u0002\u00c0\u0b8d\u0003\u0002\u0002\u0002",
    "\u00c2\u0ba4\u0003\u0002\u0002\u0002\u00c4\u0c29\u0003\u0002\u0002\u0002",
    "\u00c6\u0c2e\u0003\u0002\u0002\u0002\u00c8\u0c30\u0003\u0002\u0002\u0002",
    "\u00ca\u0c3a\u0003\u0002\u0002\u0002\u00cc\u0c6f\u0003\u0002\u0002\u0002",
    "\u00ce\u0c92\u0003\u0002\u0002\u0002\u00d0\u0c94\u0003\u0002\u0002\u0002",
    "\u00d2\u0cb7\u0003\u0002\u0002\u0002\u00d4\u0cc0\u0003\u0002\u0002\u0002",
    "\u00d6\u0cc7\u0003\u0002\u0002\u0002\u00d8\u0cde\u0003\u0002\u0002\u0002",
    "\u00da\u0ce7\u0003\u0002\u0002\u0002\u00dc\u0cf6\u0003\u0002\u0002\u0002",
    "\u00de\u0cfb\u0003\u0002\u0002\u0002\u00e0\u0d0f\u0003\u0002\u0002\u0002",
    "\u00e2\u0d39\u0003\u0002\u0002\u0002\u00e4\u0d3b\u0003\u0002\u0002\u0002",
    "\u00e6\u0d41\u0003\u0002\u0002\u0002\u00e8\u0d46\u0003\u0002\u0002\u0002",
    "\u00ea\u0d52\u0003\u0002\u0002\u0002\u00ec\u0d58\u0003\u0002\u0002\u0002",
    "\u00ee\u0d62\u0003\u0002\u0002\u0002\u00f0\u0ec4\u0003\u0002\u0002\u0002",
    "\u00f2\u0efc\u0003\u0002\u0002\u0002\u00f4\u0efe\u0003\u0002\u0002\u0002",
    "\u00f6\u0f01\u0003\u0002\u0002\u0002\u00f8\u0f1f\u0003\u0002\u0002\u0002",
    "\u00fa\u0f62\u0003\u0002\u0002\u0002\u00fc\u0f9b\u0003\u0002\u0002\u0002",
    "\u00fe\u0fa4\u0003\u0002\u0002\u0002\u0100\u0fc7\u0003\u0002\u0002\u0002",
    "\u0102\u0fc9\u0003\u0002\u0002\u0002\u0104\u0fd3\u0003\u0002\u0002\u0002",
    "\u0106\u0fe6\u0003\u0002\u0002\u0002\u0108\u0fe8\u0003\u0002\u0002\u0002",
    "\u010a\u0fef\u0003\u0002\u0002\u0002\u010c\u1005\u0003\u0002\u0002\u0002",
    "\u010e\u100d\u0003\u0002\u0002\u0002\u0110\u1014\u0003\u0002\u0002\u0002",
    "\u0112\u101e\u0003\u0002\u0002\u0002\u0114\u103f\u0003\u0002\u0002\u0002",
    "\u0116\u1041\u0003\u0002\u0002\u0002\u0118\u104b\u0003\u0002\u0002\u0002",
    "\u011a\u106a\u0003\u0002\u0002\u0002\u011c\u106c\u0003\u0002\u0002\u0002",
    "\u011e\u106f\u0003\u0002\u0002\u0002\u0120\u1079\u0003\u0002\u0002\u0002",
    "\u0122\u108d\u0003\u0002\u0002\u0002\u0124\u108f\u0003\u0002\u0002\u0002",
    "\u0126\u10a0\u0003\u0002\u0002\u0002\u0128\u10a2\u0003\u0002\u0002\u0002",
    "\u012a\u10a9\u0003\u0002\u0002\u0002\u012c\u10ab\u0003\u0002\u0002\u0002",
    "\u012e\u10be\u0003\u0002\u0002\u0002\u0130\u10d5\u0003\u0002\u0002\u0002",
    "\u0132\u10d7\u0003\u0002\u0002\u0002\u0134\u10f7\u0003\u0002\u0002\u0002",
    "\u0136\u10f9\u0003\u0002\u0002\u0002\u0138\u110d\u0003\u0002\u0002\u0002",
    "\u013a\u110f\u0003\u0002\u0002\u0002\u013c\u1151\u0003\u0002\u0002\u0002",
    "\u013e\u1168\u0003\u0002\u0002\u0002\u0140\u116c\u0003\u0002\u0002\u0002",
    "\u0142\u116f\u0003\u0002\u0002\u0002\u0144\u11aa\u0003\u0002\u0002\u0002",
    "\u0146\u11b9\u0003\u0002\u0002\u0002\u0148\u1211\u0003\u0002\u0002\u0002",
    "\u014a\u121a\u0003\u0002\u0002\u0002\u014c\u121c\u0003\u0002\u0002\u0002",
    "\u014e\u122b\u0003\u0002\u0002\u0002\u0150\u1237\u0003\u0002\u0002\u0002",
    "\u0152\u1239\u0003\u0002\u0002\u0002\u0154\u1245\u0003\u0002\u0002\u0002",
    "\u0156\u1253\u0003\u0002\u0002\u0002\u0158\u1269\u0003\u0002\u0002\u0002",
    "\u015a\u126e\u0003\u0002\u0002\u0002\u015c\u1277\u0003\u0002\u0002\u0002",
    "\u015e\u1280\u0003\u0002\u0002\u0002\u0160\u129d\u0003\u0002\u0002\u0002",
    "\u0162\u129f\u0003\u0002\u0002\u0002\u0164\u12a1\u0003\u0002\u0002\u0002",
    "\u0166\u12bb\u0003\u0002\u0002\u0002\u0168\u12c5\u0003\u0002\u0002\u0002",
    "\u016a\u12c7\u0003\u0002\u0002\u0002\u016c\u12de\u0003\u0002\u0002\u0002",
    "\u016e\u12e5\u0003\u0002\u0002\u0002\u0170\u12e7\u0003\u0002\u0002\u0002",
    "\u0172\u12f1\u0003\u0002\u0002\u0002\u0174\u1305\u0003\u0002\u0002\u0002",
    "\u0176\u131b\u0003\u0002\u0002\u0002\u0178\u131d\u0003\u0002\u0002\u0002",
    "\u017a\u133b\u0003\u0002\u0002\u0002\u017c\u1372\u0003\u0002\u0002\u0002",
    "\u017e\u137b\u0003\u0002\u0002\u0002\u0180\u138f\u0003\u0002\u0002\u0002",
    "\u0182\u139b\u0003\u0002\u0002\u0002\u0184\u139f\u0003\u0002\u0002\u0002",
    "\u0186\u13b7\u0003\u0002\u0002\u0002\u0188\u13c6\u0003\u0002\u0002\u0002",
    "\u018a\u13cf\u0003\u0002\u0002\u0002\u018c\u13e7\u0003\u0002\u0002\u0002",
    "\u018e\u13fe\u0003\u0002\u0002\u0002\u0190\u1400\u0003\u0002\u0002\u0002",
    "\u0192\u1409\u0003\u0002\u0002\u0002\u0194\u1411\u0003\u0002\u0002\u0002",
    "\u0196\u1428\u0003\u0002\u0002\u0002\u0198\u142a\u0003\u0002\u0002\u0002",
    "\u019a\u142d\u0003\u0002\u0002\u0002\u019c\u1438\u0003\u0002\u0002\u0002",
    "\u019e\u1443\u0003\u0002\u0002\u0002\u01a0\u144e\u0003\u0002\u0002\u0002",
    "\u01a2\u1473\u0003\u0002\u0002\u0002\u01a4\u14ba\u0003\u0002\u0002\u0002",
    "\u01a6\u14bc\u0003\u0002\u0002\u0002\u01a8\u14c5\u0003\u0002\u0002\u0002",
    "\u01aa\u14ca\u0003\u0002\u0002\u0002\u01ac\u14cc\u0003\u0002\u0002\u0002",
    "\u01ae\u14d7\u0003\u0002\u0002\u0002\u01b0\u14e6\u0003\u0002\u0002\u0002",
    "\u01b2\u1517\u0003\u0002\u0002\u0002\u01b4\u1519\u0003\u0002\u0002\u0002",
    "\u01b6\u1522\u0003\u0002\u0002\u0002\u01b8\u1524\u0003\u0002\u0002\u0002",
    "\u01ba\u1531\u0003\u0002\u0002\u0002\u01bc\u1533\u0003\u0002\u0002\u0002",
    "\u01be\u154a\u0003\u0002\u0002\u0002\u01c0\u1554\u0003\u0002\u0002\u0002",
    "\u01c2\u158f\u0003\u0002\u0002\u0002\u01c4\u15ad\u0003\u0002\u0002\u0002",
    "\u01c6\u15af\u0003\u0002\u0002\u0002\u01c8\u15b5\u0003\u0002\u0002\u0002",
    "\u01ca\u15c5\u0003\u0002\u0002\u0002\u01cc\u15cf\u0003\u0002\u0002\u0002",
    "\u01ce\u15d1\u0003\u0002\u0002\u0002\u01d0\u15d5\u0003\u0002\u0002\u0002",
    "\u01d2\u15f7\u0003\u0002\u0002\u0002\u01d4\u1626\u0003\u0002\u0002\u0002",
    "\u01d6\u1634\u0003\u0002\u0002\u0002\u01d8\u163c\u0003\u0002\u0002\u0002",
    "\u01da\u163e\u0003\u0002\u0002\u0002\u01dc\u164c\u0003\u0002\u0002\u0002",
    "\u01de\u1650\u0003\u0002\u0002\u0002\u01e0\u1653\u0003\u0002\u0002\u0002",
    "\u01e2\u1656\u0003\u0002\u0002\u0002\u01e4\u168c\u0003\u0002\u0002\u0002",
    "\u01e6\u168e\u0003\u0002\u0002\u0002\u01e8\u1696\u0003\u0002\u0002\u0002",
    "\u01ea\u1698\u0003\u0002\u0002\u0002\u01ec\u16a7\u0003\u0002\u0002\u0002",
    "\u01ee\u16c2\u0003\u0002\u0002\u0002\u01f0\u16c4\u0003\u0002\u0002\u0002",
    "\u01f2\u16d0\u0003\u0002\u0002\u0002\u01f4\u16d4\u0003\u0002\u0002\u0002",
    "\u01f6\u16e5\u0003\u0002\u0002\u0002\u01f8\u16f6\u0003\u0002\u0002\u0002",
    "\u01fa\u16f9\u0003\u0002\u0002\u0002\u01fc\u1703\u0003\u0002\u0002\u0002",
    "\u01fe\u1707\u0003\u0002\u0002\u0002\u0200\u1711\u0003\u0002\u0002\u0002",
    "\u0202\u171e\u0003\u0002\u0002\u0002\u0204\u1720\u0003\u0002\u0002\u0002",
    "\u0206\u1729\u0003\u0002\u0002\u0002\u0208\u1738\u0003\u0002\u0002\u0002",
    "\u020a\u173a\u0003\u0002\u0002\u0002\u020c\u174e\u0003\u0002\u0002\u0002",
    "\u020e\u1750\u0003\u0002\u0002\u0002\u0210\u1761\u0003\u0002\u0002\u0002",
    "\u0212\u176a\u0003\u0002\u0002\u0002\u0214\u1773\u0003\u0002\u0002\u0002",
    "\u0216\u1775\u0003\u0002\u0002\u0002\u0218\u1783\u0003\u0002\u0002\u0002",
    "\u021a\u178e\u0003\u0002\u0002\u0002\u021c\u1797\u0003\u0002\u0002\u0002",
    "\u021e\u179a\u0003\u0002\u0002\u0002\u0220\u17a2\u0003\u0002\u0002\u0002",
    "\u0222\u17bb\u0003\u0002\u0002\u0002\u0224\u17c7\u0003\u0002\u0002\u0002",
    "\u0226\u17ca\u0003\u0002\u0002\u0002\u0228\u17ea\u0003\u0002\u0002\u0002",
    "\u022a\u17ec\u0003\u0002\u0002\u0002\u022c\u17ee\u0003\u0002\u0002\u0002",
    "\u022e\u17f0\u0003\u0002\u0002\u0002\u0230\u17f2\u0003\u0002\u0002\u0002",
    "\u0232\u1827\u0003\u0002\u0002\u0002\u0234\u1829\u0003\u0002\u0002\u0002",
    "\u0236\u182f\u0003\u0002\u0002\u0002\u0238\u1843\u0003\u0002\u0002\u0002",
    "\u023a\u1851\u0003\u0002\u0002\u0002\u023c\u185c\u0003\u0002\u0002\u0002",
    "\u023e\u185e\u0003\u0002\u0002\u0002\u0240\u1864\u0003\u0002\u0002\u0002",
    "\u0242\u186e\u0003\u0002\u0002\u0002\u0244\u1872\u0003\u0002\u0002\u0002",
    "\u0246\u1879\u0003\u0002\u0002\u0002\u0248\u187d\u0003\u0002\u0002\u0002",
    "\u024a\u1883\u0003\u0002\u0002\u0002\u024c\u188a\u0003\u0002\u0002\u0002",
    "\u024e\u1890\u0003\u0002\u0002\u0002\u0250\u1896\u0003\u0002\u0002\u0002",
    "\u0252\u189b\u0003\u0002\u0002\u0002\u0254\u18d0\u0003\u0002\u0002\u0002",
    "\u0256\u18e5\u0003\u0002\u0002\u0002\u0258\u18fe\u0003\u0002\u0002\u0002",
    "\u025a\u1901\u0003\u0002\u0002\u0002\u025c\u1907\u0003\u0002\u0002\u0002",
    "\u025e\u1917\u0003\u0002\u0002\u0002\u0260\u1926\u0003\u0002\u0002\u0002",
    "\u0262\u192c\u0003\u0002\u0002\u0002\u0264\u194a\u0003\u0002\u0002\u0002",
    "\u0266\u194c\u0003\u0002\u0002\u0002\u0268\u1953\u0003\u0002\u0002\u0002",
    "\u026a\u1959\u0003\u0002\u0002\u0002\u026c\u195e\u0003\u0002\u0002\u0002",
    "\u026e\u196f\u0003\u0002\u0002\u0002\u0270\u198f\u0003\u0002\u0002\u0002",
    "\u0272\u199d\u0003\u0002\u0002\u0002\u0274\u19aa\u0003\u0002\u0002\u0002",
    "\u0276\u19ae\u0003\u0002\u0002\u0002\u0278\u19b2\u0003\u0002\u0002\u0002",
    "\u027a\u19bd\u0003\u0002\u0002\u0002\u027c\u19fb\u0003\u0002\u0002\u0002",
    "\u027e\u1a33\u0003\u0002\u0002\u0002\u0280\u1a35\u0003\u0002\u0002\u0002",
    "\u0282\u1a42\u0003\u0002\u0002\u0002\u0284\u1a74\u0003\u0002\u0002\u0002",
    "\u0286\u1a86\u0003\u0002\u0002\u0002\u0288\u1ab8\u0003\u0002\u0002\u0002",
    "\u028a\u1aba\u0003\u0002\u0002\u0002\u028c\u1ac7\u0003\u0002\u0002\u0002",
    "\u028e\u1ad2\u0003\u0002\u0002\u0002\u0290\u1adf\u0003\u0002\u0002\u0002",
    "\u0292\u1aed\u0003\u0002\u0002\u0002\u0294\u1afc\u0003\u0002\u0002\u0002",
    "\u0296\u1b09\u0003\u0002\u0002\u0002\u0298\u1b15\u0003\u0002\u0002\u0002",
    "\u029a\u1b19\u0003\u0002\u0002\u0002\u029c\u1b22\u0003\u0002\u0002\u0002",
    "\u029e\u1b2b\u0003\u0002\u0002\u0002\u02a0\u1b34\u0003\u0002\u0002\u0002",
    "\u02a2\u1b3f\u0003\u0002\u0002\u0002\u02a4\u1b49\u0003\u0002\u0002\u0002",
    "\u02a6\u1b80\u0003\u0002\u0002\u0002\u02a8\u1b82\u0003\u0002\u0002\u0002",
    "\u02aa\u1b86\u0003\u0002\u0002\u0002\u02ac\u1b8e\u0003\u0002\u0002\u0002",
    "\u02ae\u1ba5\u0003\u0002\u0002\u0002\u02b0\u1bc1\u0003\u0002\u0002\u0002",
    "\u02b2\u1bc3\u0003\u0002\u0002\u0002\u02b4\u1bcb\u0003\u0002\u0002\u0002",
    "\u02b6\u1bce\u0003\u0002\u0002\u0002\u02b8\u1bdb\u0003\u0002\u0002\u0002",
    "\u02ba\u1be1\u0003\u0002\u0002\u0002\u02bc\u1be9\u0003\u0002\u0002\u0002",
    "\u02be\u1beb\u0003\u0002\u0002\u0002\u02c0\u1c06\u0003\u0002\u0002\u0002",
    "\u02c2\u1c10\u0003\u0002\u0002\u0002\u02c4\u1c1a\u0003\u0002\u0002\u0002",
    "\u02c6\u1c1c\u0003\u0002\u0002\u0002\u02c8\u1c26\u0003\u0002\u0002\u0002",
    "\u02ca\u1c29\u0003\u0002\u0002\u0002\u02cc\u1c5a\u0003\u0002\u0002\u0002",
    "\u02ce\u1c69\u0003\u0002\u0002\u0002\u02d0\u1c6b\u0003\u0002\u0002\u0002",
    "\u02d2\u1c6f\u0003\u0002\u0002\u0002\u02d4\u1c76\u0003\u0002\u0002\u0002",
    "\u02d6\u1c7f\u0003\u0002\u0002\u0002\u02d8\u1c85\u0003\u0002\u0002\u0002",
    "\u02da\u1c8c\u0003\u0002\u0002\u0002\u02dc\u1ca2\u0003\u0002\u0002\u0002",
    "\u02de\u1ca4\u0003\u0002\u0002\u0002\u02e0\u1caf\u0003\u0002\u0002\u0002",
    "\u02e2\u1cb5\u0003\u0002\u0002\u0002\u02e4\u1cdd\u0003\u0002\u0002\u0002",
    "\u02e6\u1ce4\u0003\u0002\u0002\u0002\u02e8\u1d7c\u0003\u0002\u0002\u0002",
    "\u02ea\u1dd4\u0003\u0002\u0002\u0002\u02ec\u1ddf\u0003\u0002\u0002\u0002",
    "\u02ee\u1df3\u0003\u0002\u0002\u0002\u02f0\u1df5\u0003\u0002\u0002\u0002",
    "\u02f2\u1dfc\u0003\u0002\u0002\u0002\u02f4\u1e0c\u0003\u0002\u0002\u0002",
    "\u02f6\u1e12\u0003\u0002\u0002\u0002\u02f8\u1e25\u0003\u0002\u0002\u0002",
    "\u02fa\u1e2f\u0003\u0002\u0002\u0002\u02fc\u1e3d\u0003\u0002\u0002\u0002",
    "\u02fe\u1e3f\u0003\u0002\u0002\u0002\u0300\u1e42\u0003\u0002\u0002\u0002",
    "\u0302\u1e48\u0003\u0002\u0002\u0002\u0304\u1e4b\u0003\u0002\u0002\u0002",
    "\u0306\u1e4e\u0003\u0002\u0002\u0002\u0308\u1e64\u0003\u0002\u0002\u0002",
    "\u030a\u1e70\u0003\u0002\u0002\u0002\u030c\u1e79\u0003\u0002\u0002\u0002",
    "\u030e\u1e85\u0003\u0002\u0002\u0002\u0310\u1e89\u0003\u0002\u0002\u0002",
    "\u0312\u1e94\u0003\u0002\u0002\u0002\u0314\u1e96\u0003\u0002\u0002\u0002",
    "\u0316\u1e9d\u0003\u0002\u0002\u0002\u0318\u1ea5\u0003\u0002\u0002\u0002",
    "\u031a\u1ea7\u0003\u0002\u0002\u0002\u031c\u1ecf\u0003\u0002\u0002\u0002",
    "\u031e\u1ed6\u0003\u0002\u0002\u0002\u0320\u1ed8\u0003\u0002\u0002\u0002",
    "\u0322\u1ef4\u0003\u0002\u0002\u0002\u0324\u1ef8\u0003\u0002\u0002\u0002",
    "\u0326\u1efa\u0003\u0002\u0002\u0002\u0328\u1f00\u0003\u0002\u0002\u0002",
    "\u032a\u1f36\u0003\u0002\u0002\u0002\u032c\u1f38\u0003\u0002\u0002\u0002",
    "\u032e\u1f3b\u0003\u0002\u0002\u0002\u0330\u1f48\u0003\u0002\u0002\u0002",
    "\u0332\u1f6c\u0003\u0002\u0002\u0002\u0334\u1f6e\u0003\u0002\u0002\u0002",
    "\u0336\u1f72\u0003\u0002\u0002\u0002\u0338\u1f84\u0003\u0002\u0002\u0002",
    "\u033a\u1f8a\u0003\u0002\u0002\u0002\u033c\u1f8c\u0003\u0002\u0002\u0002",
    "\u033e\u1f8f\u0003\u0002\u0002\u0002\u0340\u1f9e\u0003\u0002\u0002\u0002",
    "\u0342\u1fa4\u0003\u0002\u0002\u0002\u0344\u1faa\u0003\u0002\u0002\u0002",
    "\u0346\u1fbd\u0003\u0002\u0002\u0002\u0348\u1fc3\u0003\u0002\u0002\u0002",
    "\u034a\u1fc9\u0003\u0002\u0002\u0002\u034c\u1fdc\u0003\u0002\u0002\u0002",
    "\u034e\u1fe2\u0003\u0002\u0002\u0002\u0350\u1ff3\u0003\u0002\u0002\u0002",
    "\u0352\u1ff9\u0003\u0002\u0002\u0002\u0354\u1fff\u0003\u0002\u0002\u0002",
    "\u0356\u2005\u0003\u0002\u0002\u0002\u0358\u200b\u0003\u0002\u0002\u0002",
    "\u035a\u200d\u0003\u0002\u0002\u0002\u035c\u2013\u0003\u0002\u0002\u0002",
    "\u035e\u2019\u0003\u0002\u0002\u0002\u0360\u201d\u0003\u0002\u0002\u0002",
    "\u0362\u2021\u0003\u0002\u0002\u0002\u0364\u202c\u0003\u0002\u0002\u0002",
    "\u0366\u202e\u0003\u0002\u0002\u0002\u0368\u2034\u0003\u0002\u0002\u0002",
    "\u036a\u2038\u0003\u0002\u0002\u0002\u036c\u203a\u0003\u0002\u0002\u0002",
    "\u036e\u203c\u0003\u0002\u0002\u0002\u0370\u204e\u0003\u0002\u0002\u0002",
    "\u0372\u205e\u0003\u0002\u0002\u0002\u0374\u2062\u0003\u0002\u0002\u0002",
    "\u0376\u2067\u0003\u0002\u0002\u0002\u0378\u2075\u0003\u0002\u0002\u0002",
    "\u037a\u2077\u0003\u0002\u0002\u0002\u037c\u207c\u0003\u0002\u0002\u0002",
    "\u037e\u208a\u0003\u0002\u0002\u0002\u0380\u2093\u0003\u0002\u0002\u0002",
    "\u0382\u2096\u0003\u0002\u0002\u0002\u0384\u209a\u0003\u0002\u0002\u0002",
    "\u0386\u20b2\u0003\u0002\u0002\u0002\u0388\u20b4\u0003\u0002\u0002\u0002",
    "\u038a\u20b8\u0003\u0002\u0002\u0002\u038c\u20bb\u0003\u0002\u0002\u0002",
    "\u038e\u20c0\u0003\u0002\u0002\u0002\u0390\u20d0\u0003\u0002\u0002\u0002",
    "\u0392\u20d6\u0003\u0002\u0002\u0002\u0394\u213e\u0003\u0002\u0002\u0002",
    "\u0396\u217c\u0003\u0002\u0002\u0002\u0398\u217e\u0003\u0002\u0002\u0002",
    "\u039a\u2182\u0003\u0002\u0002\u0002\u039c\u21a3\u0003\u0002\u0002\u0002",
    "\u039e\u21a5\u0003\u0002\u0002\u0002\u03a0\u21a9\u0003\u0002\u0002\u0002",
    "\u03a2\u21af\u0003\u0002\u0002\u0002\u03a4\u21b7\u0003\u0002\u0002\u0002",
    "\u03a6\u21bf\u0003\u0002\u0002\u0002\u03a8\u21c7\u0003\u0002\u0002\u0002",
    "\u03aa\u21cb\u0003\u0002\u0002\u0002\u03ac\u21d3\u0003\u0002\u0002\u0002",
    "\u03ae\u21db\u0003\u0002\u0002\u0002\u03b0\u21e3\u0003\u0002\u0002\u0002",
    "\u03b2\u21eb\u0003\u0002\u0002\u0002\u03b4\u21f6\u0003\u0002\u0002\u0002",
    "\u03b6\u21fe\u0003\u0002\u0002\u0002\u03b8\u2206\u0003\u0002\u0002\u0002",
    "\u03ba\u220e\u0003\u0002\u0002\u0002\u03bc\u2216\u0003\u0002\u0002\u0002",
    "\u03be\u2229\u0003\u0002\u0002\u0002\u03c0\u2239\u0003\u0002\u0002\u0002",
    "\u03c2\u223d\u0003\u0002\u0002\u0002\u03c4\u223f\u0003\u0002\u0002\u0002",
    "\u03c6\u2242\u0003\u0002\u0002\u0002\u03c8\u2253\u0003\u0002\u0002\u0002",
    "\u03ca\u2259\u0003\u0002\u0002\u0002\u03cc\u22c4\u0003\u0002\u0002\u0002",
    "\u03ce\u22ca\u0003\u0002\u0002\u0002\u03d0\u22cc\u0003\u0002\u0002\u0002",
    "\u03d2\u22d3\u0003\u0002\u0002\u0002\u03d4\u22e7\u0003\u0002\u0002\u0002",
    "\u03d6\u230a\u0003\u0002\u0002\u0002\u03d8\u230c\u0003\u0002\u0002\u0002",
    "\u03da\u231f\u0003\u0002\u0002\u0002\u03dc\u2321\u0003\u0002\u0002\u0002",
    "\u03de\u2329\u0003\u0002\u0002\u0002\u03e0\u2363\u0003\u0002\u0002\u0002",
    "\u03e2\u2365\u0003\u0002\u0002\u0002\u03e4\u2370\u0003\u0002\u0002\u0002",
    "\u03e6\u238c\u0003\u0002\u0002\u0002\u03e8\u239c\u0003\u0002\u0002\u0002",
    "\u03ea\u23a5\u0003\u0002\u0002\u0002\u03ec\u23ae\u0003\u0002\u0002\u0002",
    "\u03ee\u23b0\u0003\u0002\u0002\u0002\u03f0\u23b5\u0003\u0002\u0002\u0002",
    "\u03f2\u23c2\u0003\u0002\u0002\u0002\u03f4\u23c4\u0003\u0002\u0002\u0002",
    "\u03f6\u23ca\u0003\u0002\u0002\u0002\u03f8\u23e1\u0003\u0002\u0002\u0002",
    "\u03fa\u23ec\u0003\u0002\u0002\u0002\u03fc\u2464\u0003\u0002\u0002\u0002",
    "\u03fe\u2476\u0003\u0002\u0002\u0002\u0400\u2479\u0003\u0002\u0002\u0002",
    "\u0402\u2489\u0003\u0002\u0002\u0002\u0404\u2492\u0003\u0002\u0002\u0002",
    "\u0406\u249b\u0003\u0002\u0002\u0002\u0408\u249d\u0003\u0002\u0002\u0002",
    "\u040a\u249f\u0003\u0002\u0002\u0002\u040c\u24a2\u0003\u0002\u0002\u0002",
    "\u040e\u24a4\u0003\u0002\u0002\u0002\u0410\u24a6\u0003\u0002\u0002\u0002",
    "\u0412\u24a8\u0003\u0002\u0002\u0002\u0414\u24aa\u0003\u0002\u0002\u0002",
    "\u0416\u25d9\u0003\u0002\u0002\u0002\u0418\u25de\u0003\u0002\u0002\u0002",
    "\u041a\u25e0\u0003\u0002\u0002\u0002\u041c\u25e4\u0003\u0002\u0002\u0002",
    "\u041e\u2639\u0003\u0002\u0002\u0002\u0420\u263b\u0003\u0002\u0002\u0002",
    "\u0422\u263d\u0003\u0002\u0002\u0002\u0424\u2643\u0003\u0002\u0002\u0002",
    "\u0426\u2647\u0003\u0002\u0002\u0002\u0428\u264a\u0003\u0002\u0002\u0002",
    "\u042a\u264f\u0003\u0002\u0002\u0002\u042c\u2651\u0003\u0002\u0002\u0002",
    "\u042e\u2667\u0003\u0002\u0002\u0002\u0430\u266b\u0003\u0002\u0002\u0002",
    "\u0432\u266f\u0003\u0002\u0002\u0002\u0434\u2676\u0003\u0002\u0002\u0002",
    "\u0436\u2689\u0003\u0002\u0002\u0002\u0438\u2690\u0003\u0002\u0002\u0002",
    "\u043a\u26a1\u0003\u0002\u0002\u0002\u043c\u26ab\u0003\u0002\u0002\u0002",
    "\u043e\u26bd\u0003\u0002\u0002\u0002\u0440\u26d3\u0003\u0002\u0002\u0002",
    "\u0442\u26d9\u0003\u0002\u0002\u0002\u0444\u26e1\u0003\u0002\u0002\u0002",
    "\u0446\u26ec\u0003\u0002\u0002\u0002\u0448\u26f5\u0003\u0002\u0002\u0002",
    "\u044a\u26f7\u0003\u0002\u0002\u0002\u044c\u2706\u0003\u0002\u0002\u0002",
    "\u044e\u271c\u0003\u0002\u0002\u0002\u0450\u271e\u0003\u0002\u0002\u0002",
    "\u0452\u272a\u0003\u0002\u0002\u0002\u0454\u2741\u0003\u0002\u0002\u0002",
    "\u0456\u274b\u0003\u0002\u0002\u0002\u0458\u274e\u0003\u0002\u0002\u0002",
    "\u045a\u275a\u0003\u0002\u0002\u0002\u045c\u2766\u0003\u0002\u0002\u0002",
    "\u045e\u2771\u0003\u0002\u0002\u0002\u0460\u2777\u0003\u0002\u0002\u0002",
    "\u0462\u2780\u0003\u0002\u0002\u0002\u0464\u278c\u0003\u0002\u0002\u0002",
    "\u0466\u27a6\u0003\u0002\u0002\u0002\u0468\u27a9\u0003\u0002\u0002\u0002",
    "\u046a\u27b5\u0003\u0002\u0002\u0002\u046c\u27b7\u0003\u0002\u0002\u0002",
    "\u046e\u27ca\u0003\u0002\u0002\u0002\u0470\u27cc\u0003\u0002\u0002\u0002",
    "\u0472\u27d1\u0003\u0002\u0002\u0002\u0474\u27d5\u0003\u0002\u0002\u0002",
    "\u0476\u27dd\u0003\u0002\u0002\u0002\u0478\u27e5\u0003\u0002\u0002\u0002",
    "\u047a\u27e8\u0003\u0002\u0002\u0002\u047c\u27f8\u0003\u0002\u0002\u0002",
    "\u047e\u27fd\u0003\u0002\u0002\u0002\u0480\u2801\u0003\u0002\u0002\u0002",
    "\u0482\u2829\u0003\u0002\u0002\u0002\u0484\u282b\u0003\u0002\u0002\u0002",
    "\u0486\u283f\u0003\u0002\u0002\u0002\u0488\u2841\u0003\u0002\u0002\u0002",
    "\u048a\u2846\u0003\u0002\u0002\u0002\u048c\u2848\u0003\u0002\u0002\u0002",
    "\u048e\u284a\u0003\u0002\u0002\u0002\u0490\u284c\u0003\u0002\u0002\u0002",
    "\u0492\u284f\u0003\u0002\u0002\u0002\u0494\u2853\u0003\u0002\u0002\u0002",
    "\u0496\u2859\u0003\u0002\u0002\u0002\u0498\u2869\u0003\u0002\u0002\u0002",
    "\u049a\u2874\u0003\u0002\u0002\u0002\u049c\u2878\u0003\u0002\u0002\u0002",
    "\u049e\u2883\u0003\u0002\u0002\u0002\u04a0\u2888\u0003\u0002\u0002\u0002",
    "\u04a2\u2895\u0003\u0002\u0002\u0002\u04a4\u289c\u0003\u0002\u0002\u0002",
    "\u04a6\u28a8\u0003\u0002\u0002\u0002\u04a8\u28ac\u0003\u0002\u0002\u0002",
    "\u04aa\u28ae\u0003\u0002\u0002\u0002\u04ac\u28bf\u0003\u0002\u0002\u0002",
    "\u04ae\u28c3\u0003\u0002\u0002\u0002\u04b0\u28d6\u0003\u0002\u0002\u0002",
    "\u04b2\u28d8\u0003\u0002\u0002\u0002\u04b4\u28db\u0003\u0002\u0002\u0002",
    "\u04b6\u28dd\u0003\u0002\u0002\u0002\u04b8\u28df\u0003\u0002\u0002\u0002",
    "\u04ba\u28e6\u0003\u0002\u0002\u0002\u04bc\u28e8\u0003\u0002\u0002\u0002",
    "\u04be\u2900\u0003\u0002\u0002\u0002\u04c0\u2911\u0003\u0002\u0002\u0002",
    "\u04c2\u2913\u0003\u0002\u0002\u0002\u04c4\u2915\u0003\u0002\u0002\u0002",
    "\u04c6\u291f\u0003\u0002\u0002\u0002\u04c8\u2925\u0003\u0002\u0002\u0002",
    "\u04ca\u2927\u0003\u0002\u0002\u0002\u04cc\u2932\u0003\u0002\u0002\u0002",
    "\u04ce\u2937\u0003\u0002\u0002\u0002\u04d0\u2940\u0003\u0002\u0002\u0002",
    "\u04d2\u2947\u0003\u0002\u0002\u0002\u04d4\u2949\u0003\u0002\u0002\u0002",
    "\u04d6\u294c\u0003\u0002\u0002\u0002\u04d8\u2955\u0003\u0002\u0002\u0002",
    "\u04da\u2967\u0003\u0002\u0002\u0002\u04dc\u2971\u0003\u0002\u0002\u0002",
    "\u04de\u04e0\u0005\u0004\u0003\u0002\u04df\u04de\u0003\u0002\u0002\u0002",
    "\u04df\u04e0\u0003\u0002\u0002\u0002\u04e0\u04e2\u0003\u0002\u0002\u0002",
    "\u04e1\u04e3\u0007\u0351\u0002\u0002\u04e2\u04e1\u0003\u0002\u0002\u0002",
    "\u04e2\u04e3\u0003\u0002\u0002\u0002\u04e3\u04e4\u0003\u0002\u0002\u0002",
    "\u04e4\u04e5\u0007\u0002\u0002\u0003\u04e5\u0003\u0003\u0002\u0002\u0002",
    "\u04e6\u04e8\u0005\u0006\u0004\u0002\u04e7\u04e9\u0007\u0351\u0002\u0002",
    "\u04e8\u04e7\u0003\u0002\u0002\u0002\u04e8\u04e9\u0003\u0002\u0002\u0002",
    "\u04e9\u04eb\u0003\u0002\u0002\u0002\u04ea\u04ec\u0007\u0365\u0002\u0002",
    "\u04eb\u04ea\u0003\u0002\u0002\u0002\u04eb\u04ec\u0003\u0002\u0002\u0002",
    "\u04ec\u04ef\u0003\u0002\u0002\u0002\u04ed\u04ef\u0005\b\u0005\u0002",
    "\u04ee\u04e6\u0003\u0002\u0002\u0002\u04ee\u04ed\u0003\u0002\u0002\u0002",
    "\u04ef\u04f2\u0003\u0002\u0002\u0002\u04f0\u04ee\u0003\u0002\u0002\u0002",
    "\u04f0\u04f1\u0003\u0002\u0002\u0002\u04f1\u04fb\u0003\u0002\u0002\u0002",
    "\u04f2\u04f0\u0003\u0002\u0002\u0002\u04f3\u04f8\u0005\u0006\u0004\u0002",
    "\u04f4\u04f6\u0007\u0351\u0002\u0002\u04f5\u04f4\u0003\u0002\u0002\u0002",
    "\u04f5\u04f6\u0003\u0002\u0002\u0002\u04f6\u04f7\u0003\u0002\u0002\u0002",
    "\u04f7\u04f9\u0007\u0365\u0002\u0002\u04f8\u04f5\u0003\u0002\u0002\u0002",
    "\u04f8\u04f9\u0003\u0002\u0002\u0002\u04f9\u04fc\u0003\u0002\u0002\u0002",
    "\u04fa\u04fc\u0005\b\u0005\u0002\u04fb\u04f3\u0003\u0002\u0002\u0002",
    "\u04fb\u04fa\u0003\u0002\u0002\u0002\u04fc\u0005\u0003\u0002\u0002\u0002",
    "\u04fd\u0509\u0005\u001a\u000e\u0002\u04fe\u0509\u0005\n\u0006\u0002",
    "\u04ff\u0509\u0005\f\u0007\u0002\u0500\u0509\u0005\u000e\b\u0002\u0501",
    "\u0509\u0005\u0010\t\u0002\u0502\u0509\u0005\u0012\n\u0002\u0503\u0509",
    "\u0005\u0016\f\u0002\u0504\u0509\u0005\u0018\r\u0002\u0505\u0509\u0005",
    "\u001c\u000f\u0002\u0506\u0507\u0006\u0004\u0002\u0002\u0507\u0509\u0005",
    "\u042e\u0218\u0002\u0508\u04fd\u0003\u0002\u0002\u0002\u0508\u04fe\u0003",
    "\u0002\u0002\u0002\u0508\u04ff\u0003\u0002\u0002\u0002\u0508\u0500\u0003",
    "\u0002\u0002\u0002\u0508\u0501\u0003\u0002\u0002\u0002\u0508\u0502\u0003",
    "\u0002\u0002\u0002\u0508\u0503\u0003\u0002\u0002\u0002\u0508\u0504\u0003",
    "\u0002\u0002\u0002\u0508\u0505\u0003\u0002\u0002\u0002\u0508\u0506\u0003",
    "\u0002\u0002\u0002\u0509\u0007\u0003\u0002\u0002\u0002\u050a\u050b\u0007",
    "\u0365\u0002\u0002\u050b\t\u0003\u0002\u0002\u0002\u050c\u0535\u0005",
    "$\u0013\u0002\u050d\u0535\u0005(\u0015\u0002\u050e\u0535\u0005,\u0017",
    "\u0002\u050f\u0535\u0005.\u0018\u0002\u0510\u0535\u00054\u001b\u0002",
    "\u0511\u0535\u0005<\u001f\u0002\u0512\u0535\u00050\u0019\u0002\u0513",
    "\u0535\u0005\u00ceh\u0002\u0514\u0535\u0005\u00d8m\u0002\u0515\u0535",
    "\u0005\u00dco\u0002\u0516\u0535\u0005\u0106\u0084\u0002\u0517\u0535",
    "\u0005\u010a\u0086\u0002\u0518\u0535\u0005\u043a\u021e\u0002\u0519\u0535",
    "\u0005\u010e\u0088\u0002\u051a\u0535\u0005\u0110\u0089\u0002\u051b\u0535",
    "\u0005\u0114\u008b\u0002\u051c\u0535\u0005\u011a\u008e\u0002\u051d\u0535",
    "\u0005\u0122\u0092\u0002\u051e\u0532\u0006\u0006\u0003\u0002\u051f\u0533",
    "\u0005&\u0014\u0002\u0520\u0533\u0005*\u0016\u0002\u0521\u0533\u0005",
    "2\u001a\u0002\u0522\u0533\u00056\u001c\u0002\u0523\u0533\u00058\u001d",
    "\u0002\u0524\u0533\u0005:\u001e\u0002\u0525\u0533\u0005\u00d0i\u0002",
    "\u0526\u0533\u0005\u00d2j\u0002\u0527\u0533\u0005\u00d4k\u0002\u0528",
    "\u0533\u0005\u00d6l\u0002\u0529\u0533\u0005\u00dan\u0002\u052a\u0533",
    "\u0005\u00dep\u0002\u052b\u0533\u0005\u00e0q\u0002\u052c\u0533\u0005",
    "\u0108\u0085\u0002\u052d\u0533\u0005\u010c\u0087\u0002\u052e\u0533\u0005",
    "\u0112\u008a\u0002\u052f\u0533\u0005\u0116\u008c\u0002\u0530\u0533\u0005",
    "\u0118\u008d\u0002\u0531\u0533\u0005\u011e\u0090\u0002\u0532\u051f\u0003",
    "\u0002\u0002\u0002\u0532\u0520\u0003\u0002\u0002\u0002\u0532\u0521\u0003",
    "\u0002\u0002\u0002\u0532\u0522\u0003\u0002\u0002\u0002\u0532\u0523\u0003",
    "\u0002\u0002\u0002\u0532\u0524\u0003\u0002\u0002\u0002\u0532\u0525\u0003",
    "\u0002\u0002\u0002\u0532\u0526\u0003\u0002\u0002\u0002\u0532\u0527\u0003",
    "\u0002\u0002\u0002\u0532\u0528\u0003\u0002\u0002\u0002\u0532\u0529\u0003",
    "\u0002\u0002\u0002\u0532\u052a\u0003\u0002\u0002\u0002\u0532\u052b\u0003",
    "\u0002\u0002\u0002\u0532\u052c\u0003\u0002\u0002\u0002\u0532\u052d\u0003",
    "\u0002\u0002\u0002\u0532\u052e\u0003\u0002\u0002\u0002\u0532\u052f\u0003",
    "\u0002\u0002\u0002\u0532\u0530\u0003\u0002\u0002\u0002\u0532\u0531\u0003",
    "\u0002\u0002\u0002\u0533\u0535\u0003\u0002\u0002\u0002\u0534\u050c\u0003",
    "\u0002\u0002\u0002\u0534\u050d\u0003\u0002\u0002\u0002\u0534\u050e\u0003",
    "\u0002\u0002\u0002\u0534\u050f\u0003\u0002\u0002\u0002\u0534\u0510\u0003",
    "\u0002\u0002\u0002\u0534\u0511\u0003\u0002\u0002\u0002\u0534\u0512\u0003",
    "\u0002\u0002\u0002\u0534\u0513\u0003\u0002\u0002\u0002\u0534\u0514\u0003",
    "\u0002\u0002\u0002\u0534\u0515\u0003\u0002\u0002\u0002\u0534\u0516\u0003",
    "\u0002\u0002\u0002\u0534\u0517\u0003\u0002\u0002\u0002\u0534\u0518\u0003",
    "\u0002\u0002\u0002\u0534\u0519\u0003\u0002\u0002\u0002\u0534\u051a\u0003",
    "\u0002\u0002\u0002\u0534\u051b\u0003\u0002\u0002\u0002\u0534\u051c\u0003",
    "\u0002\u0002\u0002\u0534\u051d\u0003\u0002\u0002\u0002\u0534\u051e\u0003",
    "\u0002\u0002\u0002\u0535\u000b\u0003\u0002\u0002\u0002\u0536\u054b\u0005",
    "\u0148\u00a5\u0002\u0537\u054b\u0005\u012c\u0097\u0002\u0538\u054b\u0005",
    "\u014a\u00a6\u0002\u0539\u054b\u0005\u0126\u0094\u0002\u053a\u054b\u0005",
    "\u0124\u0093\u0002\u053b\u054b\u0005\u0138\u009d\u0002\u053c\u054b\u0005",
    "\u0128\u0095\u0002\u053d\u0542\u0006\u0007\u0004\u0002\u053e\u0543\u0005",
    "\u0136\u009c\u0002\u053f\u0543\u0005\u0144\u00a3\u0002\u0540\u0543\u0005",
    "\u014c\u00a7\u0002\u0541\u0543\u0005\u012e\u0098\u0002\u0542\u053e\u0003",
    "\u0002\u0002\u0002\u0542\u053f\u0003\u0002\u0002\u0002\u0542\u0540\u0003",
    "\u0002\u0002\u0002\u0542\u0541\u0003\u0002\u0002\u0002\u0543\u054b\u0003",
    "\u0002\u0002\u0002\u0544\u0548\u0006\u0007\u0005\u0002\u0545\u0549\u0005",
    "\u0146\u00a4\u0002\u0546\u0549\u0005\u0142\u00a2\u0002\u0547\u0549\u0005",
    "\u012a\u0096\u0002\u0548\u0545\u0003\u0002\u0002\u0002\u0548\u0546\u0003",
    "\u0002\u0002\u0002\u0548\u0547\u0003\u0002\u0002\u0002\u0549\u054b\u0003",
    "\u0002\u0002\u0002\u054a\u0536\u0003\u0002\u0002\u0002\u054a\u0537\u0003",
    "\u0002\u0002\u0002\u054a\u0538\u0003\u0002\u0002\u0002\u054a\u0539\u0003",
    "\u0002\u0002\u0002\u054a\u053a\u0003\u0002\u0002\u0002\u054a\u053b\u0003",
    "\u0002\u0002\u0002\u054a\u053c\u0003\u0002\u0002\u0002\u054a\u053d\u0003",
    "\u0002\u0002\u0002\u054a\u0544\u0003\u0002\u0002\u0002\u054b\r\u0003",
    "\u0002\u0002\u0002\u054c\u0556\u0006\b\u0006\u0002\u054d\u0557\u0005",
    "\u01f0\u00f9\u0002\u054e\u0557\u0005\u01f2\u00fa\u0002\u054f\u0557\u0005",
    "\u01f4\u00fb\u0002\u0550\u0557\u0005\u01f6\u00fc\u0002\u0551\u0557\u0005",
    "\u01fe\u0100\u0002\u0552\u0557\u0005\u0200\u0101\u0002\u0553\u0557\u0005",
    "\u01f8\u00fd\u0002\u0554\u0557\u0005\u01fc\u00ff\u0002\u0555\u0557\u0005",
    "\u01fa\u00fe\u0002\u0556\u054d\u0003\u0002\u0002\u0002\u0556\u054e\u0003",
    "\u0002\u0002\u0002\u0556\u054f\u0003\u0002\u0002\u0002\u0556\u0550\u0003",
    "\u0002\u0002\u0002\u0556\u0551\u0003\u0002\u0002\u0002\u0556\u0552\u0003",
    "\u0002\u0002\u0002\u0556\u0553\u0003\u0002\u0002\u0002\u0556\u0554\u0003",
    "\u0002\u0002\u0002\u0556\u0555\u0003\u0002\u0002\u0002\u0557\u055b\u0003",
    "\u0002\u0002\u0002\u0558\u0559\u0006\b\u0007\u0002\u0559\u055b\u0005",
    "\u0202\u0102\u0002\u055a\u054c\u0003\u0002\u0002\u0002\u055a\u0558\u0003",
    "\u0002\u0002\u0002\u055b\u000f\u0003\u0002\u0002\u0002\u055c\u056c\u0006",
    "\t\b\u0002\u055d\u056d\u0005\u0216\u010c\u0002\u055e\u056d\u0005\u0218",
    "\u010d\u0002\u055f\u056d\u0005\u021a\u010e\u0002\u0560\u056d\u0005\u021c",
    "\u010f\u0002\u0561\u056d\u0005\u021e\u0110\u0002\u0562\u056d\u0005\u0220",
    "\u0111\u0002\u0563\u056d\u0005\u0222\u0112\u0002\u0564\u056d\u0005\u0224",
    "\u0113\u0002\u0565\u056d\u0005\u0226\u0114\u0002\u0566\u056d\u0005\u023e",
    "\u0120\u0002\u0567\u056d\u0005\u0240\u0121\u0002\u0568\u056d\u0005\u0242",
    "\u0122\u0002\u0569\u056d\u0005\u0244\u0123\u0002\u056a\u056d\u0005\u0246",
    "\u0124\u0002\u056b\u056d\u0005\u0248\u0125\u0002\u056c\u055d\u0003\u0002",
    "\u0002\u0002\u056c\u055e\u0003\u0002\u0002\u0002\u056c\u055f\u0003\u0002",
    "\u0002\u0002\u056c\u0560\u0003\u0002\u0002\u0002\u056c\u0561\u0003\u0002",
    "\u0002\u0002\u056c\u0562\u0003\u0002\u0002\u0002\u056c\u0563\u0003\u0002",
    "\u0002\u0002\u056c\u0564\u0003\u0002\u0002\u0002\u056c\u0565\u0003\u0002",
    "\u0002\u0002\u056c\u0566\u0003\u0002\u0002\u0002\u056c\u0567\u0003\u0002",
    "\u0002\u0002\u056c\u0568\u0003\u0002\u0002\u0002\u056c\u0569\u0003\u0002",
    "\u0002\u0002\u056c\u056a\u0003\u0002\u0002\u0002\u056c\u056b\u0003\u0002",
    "\u0002\u0002\u056d\u0011\u0003\u0002\u0002\u0002\u056e\u0572\u0006\n",
    "\t\u0002\u056f\u0573\u0005\u024a\u0126\u0002\u0570\u0573\u0005\u024c",
    "\u0127\u0002\u0571\u0573\u0005\u024e\u0128\u0002\u0572\u056f\u0003\u0002",
    "\u0002\u0002\u0572\u0570\u0003\u0002\u0002\u0002\u0572\u0571\u0003\u0002",
    "\u0002\u0002\u0573\u0013\u0003\u0002\u0002\u0002\u0574\u057f\u0005\u0252",
    "\u012a\u0002\u0575\u057f\u0005\u0254\u012b\u0002\u0576\u057f\u0005\u0256",
    "\u012c\u0002\u0577\u057f\u0005\u025a\u012e\u0002\u0578\u057f\u0005\u025c",
    "\u012f\u0002\u0579\u057f\u0005\u025e\u0130\u0002\u057a\u057f\u0005\u0262",
    "\u0132\u0002\u057b\u057f\u0005\u0258\u012d\u0002\u057c\u057f\u0005\u0260",
    "\u0131\u0002\u057d\u057f\u0005\u0264\u0133\u0002\u057e\u0574\u0003\u0002",
    "\u0002\u0002\u057e\u0575\u0003\u0002\u0002\u0002\u057e\u0576\u0003\u0002",
    "\u0002\u0002\u057e\u0577\u0003\u0002\u0002\u0002\u057e\u0578\u0003\u0002",
    "\u0002\u0002\u057e\u0579\u0003\u0002\u0002\u0002\u057e\u057a\u0003\u0002",
    "\u0002\u0002\u057e\u057b\u0003\u0002\u0002\u0002\u057e\u057c\u0003\u0002",
    "\u0002\u0002\u057e\u057d\u0003\u0002\u0002\u0002\u057f\u0015\u0003\u0002",
    "\u0002\u0002\u0580\u059c\u0005\u02d2\u016a\u0002\u0581\u059c\u0005\u02e4",
    "\u0173\u0002\u0582\u059c\u0005\u02e6\u0174\u0002\u0583\u059c\u0005\u0312",
    "\u018a\u0002\u0584\u0593\u0006\f\n\u0002\u0585\u0594\u0005\u02d6\u016c",
    "\u0002\u0586\u0594\u0005\u02d8\u016d\u0002\u0587\u0594\u0005\u02da\u016e",
    "\u0002\u0588\u0594\u0005\u02d4\u016b\u0002\u0589\u0594\u0005\u02de\u0170",
    "\u0002\u058a\u0594\u0005\u02e0\u0171\u0002\u058b\u0594\u0005\u02e2\u0172",
    "\u0002\u058c\u0594\u0005\u0304\u0183\u0002\u058d\u0594\u0005\u0306\u0184",
    "\u0002\u058e\u0594\u0005\u0308\u0185\u0002\u058f\u0594\u0005\u030a\u0186",
    "\u0002\u0590\u0594\u0005\u030c\u0187\u0002\u0591\u0594\u0005\u030e\u0188",
    "\u0002\u0592\u0594\u0005\u0310\u0189\u0002\u0593\u0585\u0003\u0002\u0002",
    "\u0002\u0593\u0586\u0003\u0002\u0002\u0002\u0593\u0587\u0003\u0002\u0002",
    "\u0002\u0593\u0588\u0003\u0002\u0002\u0002\u0593\u0589\u0003\u0002\u0002",
    "\u0002\u0593\u058a\u0003\u0002\u0002\u0002\u0593\u058b\u0003\u0002\u0002",
    "\u0002\u0593\u058c\u0003\u0002\u0002\u0002\u0593\u058d\u0003\u0002\u0002",
    "\u0002\u0593\u058e\u0003\u0002\u0002\u0002\u0593\u058f\u0003\u0002\u0002",
    "\u0002\u0593\u0590\u0003\u0002\u0002\u0002\u0593\u0591\u0003\u0002\u0002",
    "\u0002\u0593\u0592\u0003\u0002\u0002\u0002\u0594\u059c\u0003\u0002\u0002",
    "\u0002\u0595\u0599\u0006\f\u000b\u0002\u0596\u059a\u0005\u0300\u0181",
    "\u0002\u0597\u059a\u0005\u0302\u0182\u0002\u0598\u059a\u0005\u0316\u018c",
    "\u0002\u0599\u0596\u0003\u0002\u0002\u0002\u0599\u0597\u0003\u0002\u0002",
    "\u0002\u0599\u0598\u0003\u0002\u0002\u0002\u059a\u059c\u0003\u0002\u0002",
    "\u0002\u059b\u0580\u0003\u0002\u0002\u0002\u059b\u0581\u0003\u0002\u0002",
    "\u0002\u059b\u0582\u0003\u0002\u0002\u0002\u059b\u0583\u0003\u0002\u0002",
    "\u0002\u059b\u0584\u0003\u0002\u0002\u0002\u059b\u0595\u0003\u0002\u0002",
    "\u0002\u059c\u0017\u0003\u0002\u0002\u0002\u059d\u05a2\u0005\u0322\u0192",
    "\u0002\u059e\u05a2\u0005\u032e\u0198\u0002\u059f\u05a0\u0006\r\f\u0002",
    "\u05a0\u05a2\u0005\u032c\u0197\u0002\u05a1\u059d\u0003\u0002\u0002\u0002",
    "\u05a1\u059e\u0003\u0002\u0002\u0002\u05a1\u059f\u0003\u0002\u0002\u0002",
    "\u05a2\u0019\u0003\u0002\u0002\u0002\u05a3\u05ac\u0006\u000e\r\u0002",
    "\u05a4\u05ad\u0005\u027c\u013f\u0002\u05a5\u05ad\u0005\u027e\u0140\u0002",
    "\u05a6\u05ad\u0005\u0280\u0141\u0002\u05a7\u05ad\u0005\u0282\u0142\u0002",
    "\u05a8\u05ad\u0005\u0284\u0143\u0002\u05a9\u05ad\u0005\u0286\u0144\u0002",
    "\u05aa\u05ad\u0005\u0288\u0145\u0002\u05ab\u05ad\u0005\u028a\u0146\u0002",
    "\u05ac\u05a4\u0003\u0002\u0002\u0002\u05ac\u05a5\u0003\u0002\u0002\u0002",
    "\u05ac\u05a6\u0003\u0002\u0002\u0002\u05ac\u05a7\u0003\u0002\u0002\u0002",
    "\u05ac\u05a8\u0003\u0002\u0002\u0002\u05ac\u05a9\u0003\u0002\u0002\u0002",
    "\u05ac\u05aa\u0003\u0002\u0002\u0002\u05ac\u05ab\u0003\u0002\u0002\u0002",
    "\u05ad\u05c0\u0003\u0002\u0002\u0002\u05ae\u05bd\u0006\u000e\u000e\u0002",
    "\u05af\u05be\u0005\u029a\u014e\u0002\u05b0\u05be\u0005\u0294\u014b\u0002",
    "\u05b1\u05be\u0005\u02a0\u0151\u0002\u05b2\u05be\u0005\u028e\u0148\u0002",
    "\u05b3\u05be\u0005\u029c\u014f\u0002\u05b4\u05be\u0005\u0296\u014c\u0002",
    "\u05b5\u05be\u0005\u02a2\u0152\u0002\u05b6\u05be\u0005\u0290\u0149\u0002",
    "\u05b7\u05be\u0005\u02a6\u0154\u0002\u05b8\u05be\u0005\u029e\u0150\u0002",
    "\u05b9\u05be\u0005\u0292\u014a\u0002\u05ba\u05be\u0005\u0298\u014d\u0002",
    "\u05bb\u05be\u0005\u02a8\u0155\u0002\u05bc\u05be\u0005\u02a4\u0153\u0002",
    "\u05bd\u05af\u0003\u0002\u0002\u0002\u05bd\u05b0\u0003\u0002\u0002\u0002",
    "\u05bd\u05b1\u0003\u0002\u0002\u0002\u05bd\u05b2\u0003\u0002\u0002\u0002",
    "\u05bd\u05b3\u0003\u0002\u0002\u0002\u05bd\u05b4\u0003\u0002\u0002\u0002",
    "\u05bd\u05b5\u0003\u0002\u0002\u0002\u05bd\u05b6\u0003\u0002\u0002\u0002",
    "\u05bd\u05b7\u0003\u0002\u0002\u0002\u05bd\u05b8\u0003\u0002\u0002\u0002",
    "\u05bd\u05b9\u0003\u0002\u0002\u0002\u05bd\u05ba\u0003\u0002\u0002\u0002",
    "\u05bd\u05bb\u0003\u0002\u0002\u0002\u05bd\u05bc\u0003\u0002\u0002\u0002",
    "\u05be\u05c0\u0003\u0002\u0002\u0002\u05bf\u05a3\u0003\u0002\u0002\u0002",
    "\u05bf\u05ae\u0003\u0002\u0002\u0002\u05c0\u001b\u0003\u0002\u0002\u0002",
    "\u05c1\u05c2\u0007!\u0002\u0002\u05c2\u05c9\u0005 \u0011\u0002\u05c3",
    "\u05c4\u00070\u0002\u0002\u05c4\u05c9\u0005\"\u0012\u0002\u05c5\u05c6",
    "\u0005\u001e\u0010\u0002\u05c6\u05c7\b\u000f\u0001\u0002\u05c7\u05c9",
    "\u0003\u0002\u0002\u0002\u05c8\u05c1\u0003\u0002\u0002\u0002\u05c8\u05c3",
    "\u0003\u0002\u0002\u0002\u05c8\u05c5\u0003\u0002\u0002\u0002\u05c9\u001d",
    "\u0003\u0002\u0002\u0002\u05ca\u05cb\u0005\u042c\u0217\u0002\u05cb\u001f",
    "\u0003\u0002\u0002\u0002\u05cc\u05cd\u0005\u042c\u0217\u0002\u05cd!",
    "\u0003\u0002\u0002\u0002\u05ce\u05cf\u0005\u042c\u0217\u0002\u05cf#",
    "\u0003\u0002\u0002\u0002\u05d0\u05d1\u0007!\u0002\u0002\u05d1\u05d3",
    "\t\u0002\u0002\u0002\u05d2\u05d4\u0005\u03c6\u01e4\u0002\u05d3\u05d2",
    "\u0003\u0002\u0002\u0002\u05d3\u05d4\u0003\u0002\u0002\u0002\u05d4\u05d5",
    "\u0003\u0002\u0002\u0002\u05d5\u05d6\u0005\u0424\u0213\u0002\u05d6\u05d7",
    "\u0005B\"\u0002\u05d7%\u0003\u0002\u0002\u0002\u05d8\u05da\u0007!\u0002",
    "\u0002\u05d9\u05db\u0005V,\u0002\u05da\u05d9\u0003\u0002\u0002\u0002",
    "\u05da\u05db\u0003\u0002\u0002\u0002\u05db\u05dc\u0003\u0002\u0002\u0002",
    "\u05dc\u05de\u0007\u01f2\u0002\u0002\u05dd\u05df\u0005\u03c6\u01e4\u0002",
    "\u05de\u05dd\u0003\u0002\u0002\u0002\u05de\u05df\u0003\u0002\u0002\u0002",
    "\u05df\u05e0\u0003\u0002\u0002\u0002\u05e0\u05e1\u0005\u0340\u01a1\u0002",
    "\u05e1\u05e2\u0007i\u0002\u0002\u05e2\u05e3\u0007\u0294\u0002\u0002",
    "\u05e3\u05ea\u0005X-\u0002\u05e4\u05e5\u0007i\u0002\u0002\u05e5\u05e7",
    "\u0007\u01ce\u0002\u0002\u05e6\u05e8\u0007f\u0002\u0002\u05e7\u05e6",
    "\u0003\u0002\u0002\u0002\u05e7\u05e8\u0003\u0002\u0002\u0002\u05e8\u05e9",
    "\u0003\u0002\u0002\u0002\u05e9\u05eb\u0007\u026f\u0002\u0002\u05ea\u05e4",
    "\u0003\u0002\u0002\u0002\u05ea\u05eb\u0003\u0002\u0002\u0002\u05eb\u05ed",
    "\u0003\u0002\u0002\u0002\u05ec\u05ee\u0005`1\u0002\u05ed\u05ec\u0003",
    "\u0002\u0002\u0002\u05ed\u05ee\u0003\u0002\u0002\u0002\u05ee\u05f1\u0003",
    "\u0002\u0002\u0002\u05ef\u05f0\u0007\u01cb\u0002\u0002\u05f0\u05f2\u0007",
    "\u0372\u0002\u0002\u05f1\u05ef\u0003\u0002\u0002\u0002\u05f1\u05f2\u0003",
    "\u0002\u0002\u0002\u05f2\u05f3\u0003\u0002\u0002\u0002\u05f3\u05f4\u0007",
    "\u01e4\u0002\u0002\u05f4\u05f5\u0005\u0250\u0129\u0002\u05f5\'\u0003",
    "\u0002\u0002\u0002\u05f6\u05f8\u0007!\u0002\u0002\u05f7\u05f9\t\u0003",
    "\u0002\u0002\u05f8\u05f7\u0003\u0002\u0002\u0002\u05f8\u05f9\u0003\u0002",
    "\u0002\u0002\u05f9\u05fb\u0003\u0002\u0002\u0002\u05fa\u05fc\t\u0004",
    "\u0002\u0002\u05fb\u05fa\u0003\u0002\u0002\u0002\u05fb\u05fc\u0003\u0002",
    "\u0002\u0002\u05fc\u05fd\u0003\u0002\u0002\u0002\u05fd\u05fe\u0007H",
    "\u0002\u0002\u05fe\u0600\u0005\u0376\u01bc\u0002\u05ff\u0601\u0005b",
    "2\u0002\u0600\u05ff\u0003\u0002\u0002\u0002\u0600\u0601\u0003\u0002",
    "\u0002\u0002\u0601\u0602\u0003\u0002\u0002\u0002\u0602\u0603\u0007i",
    "\u0002\u0002\u0603\u0604\u0005\u0342\u01a2\u0002\u0604\u0608\u0005\u03b2",
    "\u01da\u0002\u0605\u0607\u0005d3\u0002\u0606\u0605\u0003\u0002\u0002",
    "\u0002\u0607\u060a\u0003\u0002\u0002\u0002\u0608\u0606\u0003\u0002\u0002",
    "\u0002\u0608\u0609\u0003\u0002\u0002\u0002\u0609\u0615\u0003\u0002\u0002",
    "\u0002\u060a\u0608\u0003\u0002\u0002\u0002\u060b\u060d\u0007\u01ae\u0002",
    "\u0002\u060c\u060e\u0007\u0355\u0002\u0002\u060d\u060c\u0003\u0002\u0002",
    "\u0002\u060d\u060e\u0003\u0002\u0002\u0002\u060e\u060f\u0003\u0002\u0002",
    "\u0002\u060f\u0616\t\u0005\u0002\u0002\u0610\u0612\u0007]\u0002\u0002",
    "\u0611\u0613\u0007\u0355\u0002\u0002\u0612\u0611\u0003\u0002\u0002\u0002",
    "\u0612\u0613\u0003\u0002\u0002\u0002\u0613\u0614\u0003\u0002\u0002\u0002",
    "\u0614\u0616\t\u0006\u0002\u0002\u0615\u060b\u0003\u0002\u0002\u0002",
    "\u0615\u0610\u0003\u0002\u0002\u0002\u0615\u0616\u0003\u0002\u0002\u0002",
    "\u0616)\u0003\u0002\u0002\u0002\u0617\u0618\u0007!\u0002\u0002\u0618",
    "\u0619\u0007\u0228\u0002\u0002\u0619\u061a\u0007B\u0002\u0002\u061a",
    "\u061b\u0005\u0376\u01bc\u0002\u061b\u061c\u0007\b\u0002\u0002\u061c",
    "\u061d\u0007\u02c4\u0002\u0002\u061d\u0623\u0007\u0372\u0002\u0002\u061e",
    "\u0620\u0007\u0214\u0002\u0002\u061f\u0621\u0007\u0355\u0002\u0002\u0620",
    "\u061f\u0003\u0002\u0002\u0002\u0620\u0621\u0003\u0002\u0002\u0002\u0621",
    "\u0622\u0003\u0002\u0002\u0002\u0622\u0624\u0005\u0384\u01c3\u0002\u0623",
    "\u061e\u0003\u0002\u0002\u0002\u0623\u0624\u0003\u0002\u0002\u0002\u0624",
    "\u062a\u0003\u0002\u0002\u0002\u0625\u0627\u0007\u02c5\u0002\u0002\u0626",
    "\u0628\u0007\u0355\u0002\u0002\u0627\u0626\u0003\u0002\u0002\u0002\u0627",
    "\u0628\u0003\u0002\u0002\u0002\u0628\u0629\u0003\u0002\u0002\u0002\u0629",
    "\u062b\u0005\u0384\u01c3\u0002\u062a\u0625\u0003\u0002\u0002\u0002\u062a",
    "\u062b\u0003\u0002\u0002\u0002\u062b\u0631\u0003\u0002\u0002\u0002\u062c",
    "\u062e\u0007\u0279\u0002\u0002\u062d\u062f\u0007\u0355\u0002\u0002\u062e",
    "\u062d\u0003\u0002\u0002\u0002\u062e\u062f\u0003\u0002\u0002\u0002\u062f",
    "\u0630\u0003\u0002\u0002\u0002\u0630\u0632\u0005\u0384\u01c3\u0002\u0631",
    "\u062c\u0003\u0002\u0002\u0002\u0631\u0632\u0003\u0002\u0002\u0002\u0632",
    "\u0638\u0003\u0002\u0002\u0002\u0633\u0635\u0007\u0254\u0002\u0002\u0634",
    "\u0636\u0007\u0355\u0002\u0002\u0635\u0634\u0003\u0002\u0002\u0002\u0635",
    "\u0636\u0003\u0002\u0002\u0002\u0636\u0637\u0003\u0002\u0002\u0002\u0637",
    "\u0639\u0005\u0376\u01bc\u0002\u0638\u0633\u0003\u0002\u0002\u0002\u0638",
    "\u0639\u0003\u0002\u0002\u0002\u0639\u063b\u0003\u0002\u0002\u0002\u063a",
    "\u063c\u0007\u02d2\u0002\u0002\u063b\u063a\u0003\u0002\u0002\u0002\u063b",
    "\u063c\u0003\u0002\u0002\u0002\u063c\u0642\u0003\u0002\u0002\u0002\u063d",
    "\u063f\u0007\u01cb\u0002\u0002\u063e\u0640\u0007\u0355\u0002\u0002\u063f",
    "\u063e\u0003\u0002\u0002\u0002\u063f\u0640\u0003\u0002\u0002\u0002\u0640",
    "\u0641\u0003\u0002\u0002\u0002\u0641\u0643\u0007\u0372\u0002\u0002\u0642",
    "\u063d\u0003\u0002\u0002\u0002\u0642\u0643\u0003\u0002\u0002\u0002\u0643",
    "\u0644\u0003\u0002\u0002\u0002\u0644\u0646\u0007\u01ec\u0002\u0002\u0645",
    "\u0647\u0007\u0355\u0002\u0002\u0646\u0645\u0003\u0002\u0002\u0002\u0646",
    "\u0647\u0003\u0002\u0002\u0002\u0647\u0648\u0003\u0002\u0002\u0002\u0648",
    "\u0649\u0005\u036c\u01b7\u0002\u0649+\u0003\u0002\u0002\u0002\u064a",
    "\u064c\u0007!\u0002\u0002\u064b\u064d\u0005T+\u0002\u064c\u064b\u0003",
    "\u0002\u0002\u0002\u064c\u064d\u0003\u0002\u0002\u0002\u064d\u064f\u0003",
    "\u0002\u0002\u0002\u064e\u0650\u0005V,\u0002\u064f\u064e\u0003\u0002",
    "\u0002\u0002\u064f\u0650\u0003\u0002\u0002\u0002\u0650\u0651\u0003\u0002",
    "\u0002\u0002\u0651\u0652\u0007t\u0002\u0002\u0652\u0653\u0005\u0340",
    "\u01a1\u0002\u0653\u0655\u0007\u0360\u0002\u0002\u0654\u0656\u0005f",
    "4\u0002\u0655\u0654\u0003\u0002\u0002\u0002\u0655\u0656\u0003\u0002",
    "\u0002\u0002\u0656\u065b\u0003\u0002\u0002\u0002\u0657\u0658\u0007\u0364",
    "\u0002\u0002\u0658\u065a\u0005f4\u0002\u0659\u0657\u0003\u0002\u0002",
    "\u0002\u065a\u065d\u0003\u0002\u0002\u0002\u065b\u0659\u0003\u0002\u0002",
    "\u0002\u065b\u065c\u0003\u0002\u0002\u0002\u065c\u065e\u0003\u0002\u0002",
    "\u0002\u065d\u065b\u0003\u0002\u0002\u0002\u065e\u0662\u0007\u0361\u0002",
    "\u0002\u065f\u0661\u0005l7\u0002\u0660\u065f\u0003\u0002\u0002\u0002",
    "\u0661\u0664\u0003\u0002\u0002\u0002\u0662\u0660\u0003\u0002\u0002\u0002",
    "\u0662\u0663\u0003\u0002\u0002\u0002\u0663\u0665\u0003\u0002\u0002\u0002",
    "\u0664\u0662\u0003\u0002\u0002\u0002\u0665\u0666\u0005\u0250\u0129\u0002",
    "\u0666-\u0003\u0002\u0002\u0002\u0667\u0669\u0007!\u0002\u0002\u0668",
    "\u066a\u0005T+\u0002\u0669\u0668\u0003\u0002\u0002\u0002\u0669\u066a",
    "\u0003\u0002\u0002\u0002\u066a\u066c\u0003\u0002\u0002\u0002\u066b\u066d",
    "\u0005V,\u0002\u066c\u066b\u0003\u0002\u0002\u0002\u066c\u066d\u0003",
    "\u0002\u0002\u0002\u066d\u066e\u0003\u0002\u0002\u0002\u066e\u066f\u0007",
    "\u0206\u0002\u0002\u066f\u0670\u0005\u0340\u01a1\u0002\u0670\u0672\u0007",
    "\u0360\u0002\u0002\u0671\u0673\u0005h5\u0002\u0672\u0671\u0003\u0002",
    "\u0002\u0002\u0672\u0673\u0003\u0002\u0002\u0002\u0673\u0678\u0003\u0002",
    "\u0002\u0002\u0674\u0675\u0007\u0364\u0002\u0002\u0675\u0677\u0005h",
    "5\u0002\u0676\u0674\u0003\u0002\u0002\u0002\u0677\u067a\u0003\u0002",
    "\u0002\u0002\u0678\u0676\u0003\u0002\u0002\u0002\u0678\u0679\u0003\u0002",
    "\u0002\u0002\u0679\u067b\u0003\u0002\u0002\u0002\u067a\u0678\u0003\u0002",
    "\u0002\u0002\u067b\u067c\u0007\u0361\u0002\u0002\u067c\u067d\u0007\u028c",
    "\u0002\u0002\u067d\u0681\u0005\u0392\u01ca\u0002\u067e\u0680\u0005l",
    "7\u0002\u067f\u067e\u0003\u0002\u0002\u0002\u0680\u0683\u0003\u0002",
    "\u0002\u0002\u0681\u067f\u0003\u0002\u0002\u0002\u0681\u0682\u0003\u0002",
    "\u0002\u0002\u0682\u0684\u0003\u0002\u0002\u0002\u0683\u0681\u0003\u0002",
    "\u0002\u0002\u0684\u0685\u0005\u0250\u0129\u0002\u0685/\u0003\u0002",
    "\u0002\u0002\u0686\u0687\u0006\u0019\u000f\u0002\u0687\u0688\u0007!",
    "\u0002\u0002\u0688\u0689\u0005\u011c\u008f\u0002\u0689\u068b\u0007\u0206",
    "\u0002\u0002\u068a\u068c\u0005\u03c6\u01e4\u0002\u068b\u068a\u0003\u0002",
    "\u0002\u0002\u068b\u068c\u0003\u0002\u0002\u0002\u068c\u068d\u0003\u0002",
    "\u0002\u0002\u068d\u068e\u0005\u0376\u01bc\u0002\u068e\u068f\u0007\u000e",
    "\u0002\u0002\u068f\u0699\u0005\u0386\u01c4\u0002\u0690\u0691\u0007\u00a5",
    "\u0002\u0002\u0691\u0696\u0005j6\u0002\u0692\u0693\u0007\u0364\u0002",
    "\u0002\u0693\u0695\u0005j6\u0002\u0694\u0692\u0003\u0002\u0002\u0002",
    "\u0695\u0698\u0003\u0002\u0002\u0002\u0696\u0694\u0003\u0002\u0002\u0002",
    "\u0696\u0697\u0003\u0002\u0002\u0002\u0697\u069a\u0003\u0002\u0002\u0002",
    "\u0698\u0696\u0003\u0002\u0002\u0002\u0699\u0690\u0003\u0002\u0002\u0002",
    "\u0699\u069a\u0003\u0002\u0002\u0002\u069a1\u0003\u0002\u0002\u0002",
    "\u069b\u069c\u0007!\u0002\u0002\u069c\u069d\u0007\u0296\u0002\u0002",
    "\u069d\u069e\u0005\u0376\u01bc\u0002\u069e\u069f\u0007=\u0002\u0002",
    "\u069f\u06a0\u0007\u01d9\u0002\u0002\u06a0\u06a1\u0007\u02d6\u0002\u0002",
    "\u06a1\u06a2\t\u0007\u0002\u0002\u06a2\u06a3\u0007\u025f\u0002\u0002",
    "\u06a3\u06a4\u0007\u0360\u0002\u0002\u06a4\u06a9\u0005n8\u0002\u06a5",
    "\u06a6\u0007\u0364\u0002\u0002\u06a6\u06a8\u0005n8\u0002\u06a7\u06a5",
    "\u0003\u0002\u0002\u0002\u06a8\u06ab\u0003\u0002\u0002\u0002\u06a9\u06a7",
    "\u0003\u0002\u0002\u0002\u06a9\u06aa\u0003\u0002\u0002\u0002\u06aa\u06ac",
    "\u0003\u0002\u0002\u0002\u06ab\u06a9\u0003\u0002\u0002\u0002\u06ac\u06ad",
    "\u0007\u0361\u0002\u0002\u06ad3\u0003\u0002\u0002\u0002\u06ae\u06b0",
    "\u0005p9\u0002\u06af\u06b1\u0005\u03c6\u01e4\u0002\u06b0\u06af\u0003",
    "\u0002\u0002\u0002\u06b0\u06b1\u0003\u0002\u0002\u0002\u06b1\u06b2\u0003",
    "\u0002\u0002\u0002\u06b2\u06ba\u0005\u0342\u01a2\u0002\u06b3\u06b4\u0007",
    "X\u0002\u0002\u06b4\u06bb\u0005\u0342\u01a2\u0002\u06b5\u06b6\u0007",
    "\u0360\u0002\u0002\u06b6\u06b7\u0007X\u0002\u0002\u06b7\u06b8\u0005",
    "\u0342\u01a2\u0002\u06b8\u06b9\u0007\u0361\u0002\u0002\u06b9\u06bb\u0003",
    "\u0002\u0002\u0002\u06ba\u06b3\u0003\u0002\u0002\u0002\u06ba\u06b5\u0003",
    "\u0002\u0002\u0002\u06bb\u06bc\u0003\u0002\u0002\u0002\u06bc\u06bd\u0005",
    "v<\u0002\u06bd\u06e9\u0003\u0002\u0002\u0002\u06be\u06c0\u0005p9\u0002",
    "\u06bf\u06c1\u0005\u03c6\u01e4\u0002\u06c0\u06bf\u0003\u0002\u0002\u0002",
    "\u06c0\u06c1\u0003\u0002\u0002\u0002\u06c1\u06c2\u0003\u0002\u0002\u0002",
    "\u06c2\u06c4\u0005\u0342\u01a2\u0002\u06c3\u06c5\u0005z>\u0002\u06c4",
    "\u06c3\u0003\u0002\u0002\u0002\u06c4\u06c5\u0003\u0002\u0002\u0002\u06c5",
    "\u06c6\u0003\u0002\u0002\u0002\u06c6\u06c8\u0005x=\u0002\u06c7\u06c9",
    "\u0005r:\u0002\u06c8\u06c7\u0003\u0002\u0002\u0002\u06c8\u06c9\u0003",
    "\u0002\u0002\u0002\u06c9\u06ca\u0003\u0002\u0002\u0002\u06ca\u06cc\u0005",
    "t;\u0002\u06cb\u06cd\u0005\u009eP\u0002\u06cc\u06cb\u0003\u0002\u0002",
    "\u0002\u06cc\u06cd\u0003\u0002\u0002\u0002\u06cd\u06e9\u0003\u0002\u0002",
    "\u0002\u06ce\u06d0\u0005p9\u0002\u06cf\u06d1\u0005\u03c6\u01e4\u0002",
    "\u06d0\u06cf\u0003\u0002\u0002\u0002\u06d0\u06d1\u0003\u0002\u0002\u0002",
    "\u06d1\u06d2\u0003\u0002\u0002\u0002\u06d2\u06d4\u0005\u0342\u01a2\u0002",
    "\u06d3\u06d5\u0005z>\u0002\u06d4\u06d3\u0003\u0002\u0002\u0002\u06d4",
    "\u06d5\u0003\u0002\u0002\u0002\u06d5\u06d7\u0003\u0002\u0002\u0002\u06d6",
    "\u06d8\u0005r:\u0002\u06d7\u06d6\u0003\u0002\u0002\u0002\u06d7\u06d8",
    "\u0003\u0002\u0002\u0002\u06d8\u06d9\u0003\u0002\u0002\u0002\u06d9\u06db",
    "\u0005t;\u0002\u06da\u06dc\u0005\u009eP\u0002\u06db\u06da\u0003\u0002",
    "\u0002\u0002\u06db\u06dc\u0003\u0002\u0002\u0002\u06dc\u06e9\u0003\u0002",
    "\u0002\u0002\u06dd\u06df\u0005p9\u0002\u06de\u06e0\u0005\u03c6\u01e4",
    "\u0002\u06df\u06de\u0003\u0002\u0002\u0002\u06df\u06e0\u0003\u0002\u0002",
    "\u0002\u06e0\u06e1\u0003\u0002\u0002\u0002\u06e1\u06e3\u0005\u0342\u01a2",
    "\u0002\u06e2\u06e4\u0005z>\u0002\u06e3\u06e2\u0003\u0002\u0002\u0002",
    "\u06e3\u06e4\u0003\u0002\u0002\u0002\u06e4\u06e5\u0003\u0002\u0002\u0002",
    "\u06e5\u06e6\b\u001b\u0001\u0002\u06e6\u06e7\u0005x=\u0002\u06e7\u06e9",
    "\u0003\u0002\u0002\u0002\u06e8\u06ae\u0003\u0002\u0002\u0002\u06e8\u06be",
    "\u0003\u0002\u0002\u0002\u06e8\u06ce\u0003\u0002\u0002\u0002\u06e8\u06dd",
    "\u0003\u0002\u0002\u0002\u06e95\u0003\u0002\u0002\u0002\u06ea\u06eb",
    "\u0007!\u0002\u0002\u06eb\u06ec\u0007\u02bb\u0002\u0002\u06ec\u06ed",
    "\u0005\u0376\u01bc\u0002\u06ed\u06ee\u0007\b\u0002\u0002\u06ee\u06ef",
    "\u0007\u01da\u0002\u0002\u06ef\u06f3\u0007\u0372\u0002\u0002\u06f0\u06f1",
    "\u0007\u01fe\u0002\u0002\u06f1\u06f2\u0007\u0355\u0002\u0002\u06f2\u06f4",
    "\u0005\u0384\u01c3\u0002\u06f3\u06f0\u0003\u0002\u0002\u0002\u06f3\u06f4",
    "\u0003\u0002\u0002\u0002\u06f4\u06fa\u0003\u0002\u0002\u0002\u06f5\u06f7",
    "\u0007\u01ec\u0002\u0002\u06f6\u06f8\u0007\u0355\u0002\u0002\u06f7\u06f6",
    "\u0003\u0002\u0002\u0002\u06f7\u06f8\u0003\u0002\u0002\u0002\u06f8\u06f9",
    "\u0003\u0002\u0002\u0002\u06f9\u06fb\u0005\u036c\u01b7\u0002\u06fa\u06f5",
    "\u0003\u0002\u0002\u0002\u06fa\u06fb\u0003\u0002\u0002\u0002\u06fb7",
    "\u0003\u0002\u0002\u0002\u06fc\u06fd\u0007!\u0002\u0002\u06fd\u06fe",
    "\u0007\u02bb\u0002\u0002\u06fe\u06ff\u0005\u0376\u01bc\u0002\u06ff\u0700",
    "\u0007\b\u0002\u0002\u0700\u0701\u0007\u01da\u0002\u0002\u0701\u0702",
    "\u0007\u0372\u0002\u0002\u0702\u0703\u0007\u00a4\u0002\u0002\u0703\u0704",
    "\u0007\u0228\u0002\u0002\u0704\u0705\u0007B\u0002\u0002\u0705\u070b",
    "\u0005\u0376\u01bc\u0002\u0706\u0708\u0007\u01fa\u0002\u0002\u0707\u0709",
    "\u0007\u0355\u0002\u0002\u0708\u0707\u0003\u0002\u0002\u0002\u0708\u0709",
    "\u0003\u0002\u0002\u0002\u0709\u070a\u0003\u0002\u0002\u0002\u070a\u070c",
    "\u0005\u0384\u01c3\u0002\u070b\u0706\u0003\u0002\u0002\u0002\u070b\u070c",
    "\u0003\u0002\u0002\u0002\u070c\u0712\u0003\u0002\u0002\u0002\u070d\u070f",
    "\u0007\u0214\u0002\u0002\u070e\u0710\u0007\u0355\u0002\u0002\u070f\u070e",
    "\u0003\u0002\u0002\u0002\u070f\u0710\u0003\u0002\u0002\u0002\u0710\u0711",
    "\u0003\u0002\u0002\u0002\u0711\u0713\u0005\u0384\u01c3\u0002\u0712\u070d",
    "\u0003\u0002\u0002\u0002\u0712\u0713\u0003\u0002\u0002\u0002\u0713\u0719",
    "\u0003\u0002\u0002\u0002\u0714\u0716\u0007\u01b3\u0002\u0002\u0715\u0717",
    "\u0007\u0355\u0002\u0002\u0716\u0715\u0003\u0002\u0002\u0002\u0716\u0717",
    "\u0003\u0002\u0002\u0002\u0717\u0718\u0003\u0002\u0002\u0002\u0718\u071a",
    "\u0005\u0384\u01c3\u0002\u0719\u0714\u0003\u0002\u0002\u0002\u0719\u071a",
    "\u0003\u0002\u0002\u0002\u071a\u0720\u0003\u0002\u0002\u0002\u071b\u071d",
    "\u0007\u0242\u0002\u0002\u071c\u071e\u0007\u0355\u0002\u0002\u071d\u071c",
    "\u0003\u0002\u0002\u0002\u071d\u071e\u0003\u0002\u0002\u0002\u071e\u071f",
    "\u0003\u0002\u0002\u0002\u071f\u0721\u0005\u0384\u01c3\u0002\u0720\u071b",
    "\u0003\u0002\u0002\u0002\u0720\u0721\u0003\u0002\u0002\u0002\u0721\u0727",
    "\u0003\u0002\u0002\u0002\u0722\u0724\u0007\u0254\u0002\u0002\u0723\u0725",
    "\u0007\u0355\u0002\u0002\u0724\u0723\u0003\u0002\u0002\u0002\u0724\u0725",
    "\u0003\u0002\u0002\u0002\u0725\u0726\u0003\u0002\u0002\u0002\u0726\u0728",
    "\u0005\u0376\u01bc\u0002\u0727\u0722\u0003\u0002\u0002\u0002\u0727\u0728",
    "\u0003\u0002\u0002\u0002\u0728\u072a\u0003\u0002\u0002\u0002\u0729\u072b",
    "\u0007\u02d2\u0002\u0002\u072a\u0729\u0003\u0002\u0002\u0002\u072a\u072b",
    "\u0003\u0002\u0002\u0002\u072b\u0731\u0003\u0002\u0002\u0002\u072c\u072e",
    "\u0007\u01cb\u0002\u0002\u072d\u072f\u0007\u0355\u0002\u0002\u072e\u072d",
    "\u0003\u0002\u0002\u0002\u072e\u072f\u0003\u0002\u0002\u0002\u072f\u0730",
    "\u0003\u0002\u0002\u0002\u0730\u0732\u0007\u0372\u0002\u0002\u0731\u072c",
    "\u0003\u0002\u0002\u0002\u0731\u0732\u0003\u0002\u0002\u0002\u0732\u0733",
    "\u0003\u0002\u0002\u0002\u0733\u0735\u0007\u01ec\u0002\u0002\u0734\u0736",
    "\u0007\u0355\u0002\u0002\u0735\u0734\u0003\u0002\u0002\u0002\u0735\u0736",
    "\u0003\u0002\u0002\u0002\u0736\u0737\u0003\u0002\u0002\u0002\u0737\u0738",
    "\u0005\u036c\u01b7\u0002\u07389\u0003\u0002\u0002\u0002\u0739\u073b",
    "\u0007!\u0002\u0002\u073a\u073c\u0005V,\u0002\u073b\u073a\u0003\u0002",
    "\u0002\u0002\u073b\u073c\u0003\u0002\u0002\u0002\u073c\u073d\u0003\u0002",
    "\u0002\u0002\u073d\u073e\u0007\u009b\u0002\u0002\u073e\u073f\u0005\u0340",
    "\u01a1\u0002\u073f\u0740\t\b\u0002\u0002\u0740\u0741\t\t\u0002\u0002",
    "\u0741\u0742\u0007i\u0002\u0002\u0742\u0743\u0005\u0342\u01a2\u0002",
    "\u0743\u0744\u0007;\u0002\u0002\u0744\u0745\u00071\u0002\u0002\u0745",
    "\u0748\u0007\u0290\u0002\u0002\u0746\u0747\t\n\u0002\u0002\u0747\u0749",
    "\u0005\u0340\u01a1\u0002\u0748\u0746\u0003\u0002\u0002\u0002\u0748\u0749",
    "\u0003\u0002\u0002\u0002\u0749\u074a\u0003\u0002\u0002\u0002\u074a\u074b",
    "\u0005\u0250\u0129\u0002\u074b;\u0003\u0002\u0002\u0002\u074c\u074d",
    "\u0006\u001f\u0010\u0002\u074d\u0751\u0005> \u0002\u074e\u074f\u0006",
    "\u001f\u0011\u0002\u074f\u0751\u0005@!\u0002\u0750\u074c\u0003\u0002",
    "\u0002\u0002\u0750\u074e\u0003\u0002\u0002\u0002\u0751=\u0003\u0002",
    "\u0002\u0002\u0752\u0755\u0007!\u0002\u0002\u0753\u0754\u0007m\u0002",
    "\u0002\u0754\u0756\u0007~\u0002\u0002\u0755\u0753\u0003\u0002\u0002",
    "\u0002\u0755\u0756\u0003\u0002\u0002\u0002\u0756\u075a\u0003\u0002\u0002",
    "\u0002\u0757\u0758\u0007\u01ae\u0002\u0002\u0758\u0759\u0007\u0355\u0002",
    "\u0002\u0759\u075b\t\u000b\u0002\u0002\u075a\u0757\u0003\u0002\u0002",
    "\u0002\u075a\u075b\u0003\u0002\u0002\u0002\u075b\u075d\u0003\u0002\u0002",
    "\u0002\u075c\u075e\u0005V,\u0002\u075d\u075c\u0003\u0002\u0002\u0002",
    "\u075d\u075e\u0003\u0002\u0002\u0002\u075e\u0762\u0003\u0002\u0002\u0002",
    "\u075f\u0760\u0007\u008c\u0002\u0002\u0760\u0761\u0007\u0295\u0002\u0002",
    "\u0761\u0763\t\f\u0002\u0002\u0762\u075f\u0003\u0002\u0002\u0002\u0762",
    "\u0763\u0003\u0002\u0002\u0002\u0763\u0764\u0003\u0002\u0002\u0002\u0764",
    "\u0765\u0007\u02d0\u0002\u0002\u0765\u076a\u0005\u0344\u01a3\u0002\u0766",
    "\u0767\u0007\u0360\u0002\u0002\u0767\u0768\u0005\u03a4\u01d3\u0002\u0768",
    "\u0769\u0007\u0361\u0002\u0002\u0769\u076b\u0003\u0002\u0002\u0002\u076a",
    "\u0766\u0003\u0002\u0002\u0002\u076a\u076b\u0003\u0002\u0002\u0002\u076b",
    "\u076d\u0003\u0002\u0002\u0002\u076c\u076e\u0005\u008aF\u0002\u076d",
    "\u076c\u0003\u0002\u0002\u0002\u076d\u076e\u0003\u0002\u0002\u0002\u076e",
    "\u076f\u0003\u0002\u0002\u0002\u076f\u0776\b \u0001\u0002\u0770\u0772",
    "\u0007\u00aa\u0002\u0002\u0771\u0773\t\r\u0002\u0002\u0772\u0771\u0003",
    "\u0002\u0002\u0002\u0772\u0773\u0003\u0002\u0002\u0002\u0773\u0774\u0003",
    "\u0002\u0002\u0002\u0774\u0775\u0007\u001a\u0002\u0002\u0775\u0777\u0007",
    "k\u0002\u0002\u0776\u0770\u0003\u0002\u0002\u0002\u0776\u0777\u0003",
    "\u0002\u0002\u0002\u0777?\u0003\u0002\u0002\u0002\u0778\u077b\u0007",
    "!\u0002\u0002\u0779\u077a\u0007m\u0002\u0002\u077a\u077c\u0007~\u0002",
    "\u0002\u077b\u0779\u0003\u0002\u0002\u0002\u077b\u077c\u0003\u0002\u0002",
    "\u0002\u077c\u077d\u0003\u0002\u0002\u0002\u077d\u077f\u0007\u02d0\u0002",
    "\u0002\u077e\u0780\u0005\u03c6\u01e4\u0002\u077f\u077e\u0003\u0002\u0002",
    "\u0002\u077f\u0780\u0003\u0002\u0002\u0002\u0780\u0781\u0003\u0002\u0002",
    "\u0002\u0781\u0786\u0005\u0344\u01a3\u0002\u0782\u0783\u0007\u0360\u0002",
    "\u0002\u0783\u0784\u0005\u008cG\u0002\u0784\u0785\u0007\u0361\u0002",
    "\u0002\u0785\u0787\u0003\u0002\u0002\u0002\u0786\u0782\u0003\u0002\u0002",
    "\u0002\u0786\u0787\u0003\u0002\u0002\u0002\u0787\u0789\u0003\u0002\u0002",
    "\u0002\u0788\u078a\u0005\u00a0Q\u0002\u0789\u0788\u0003\u0002\u0002",
    "\u0002\u0789\u078a\u0003\u0002\u0002\u0002\u078a\u0791\u0003\u0002\u0002",
    "\u0002\u078b\u078c\u0007\u00f4\u0002\u0002\u078c\u078d\u0007i\u0002",
    "\u0002\u078d\u078e\u0007\u0360\u0002\u0002\u078e\u078f\u0005\u03a4\u01d3",
    "\u0002\u078f\u0790\u0007\u0361\u0002\u0002\u0790\u0792\u0003\u0002\u0002",
    "\u0002\u0791\u078b\u0003\u0002\u0002\u0002\u0791\u0792\u0003\u0002\u0002",
    "\u0002\u0792\u0798\u0003\u0002\u0002\u0002\u0793\u0794\u0007\u0122\u0002",
    "\u0002\u0794\u0795\u0007\u0360\u0002\u0002\u0795\u0796\u0005L\'\u0002",
    "\u0796\u0797\u0007\u0361\u0002\u0002\u0797\u0799\u0003\u0002\u0002\u0002",
    "\u0798\u0793\u0003\u0002\u0002\u0002\u0798\u0799\u0003\u0002\u0002\u0002",
    "\u0799\u079b\u0003\u0002\u0002\u0002\u079a\u079c\u0005\u008aF\u0002",
    "\u079b\u079a\u0003\u0002\u0002\u0002\u079b\u079c\u0003\u0002\u0002\u0002",
    "\u079c\u079d\u0003\u0002\u0002\u0002\u079d\u079e\b!\u0001\u0002\u079e",
    "A\u0003\u0002\u0002\u0002\u079f\u07a3\u0006\"\u0012\u0002\u07a0\u07a2",
    "\u0005D#\u0002\u07a1\u07a0\u0003\u0002\u0002\u0002\u07a2\u07a5\u0003",
    "\u0002\u0002\u0002\u07a3\u07a1\u0003\u0002\u0002\u0002\u07a3\u07a4\u0003",
    "\u0002\u0002\u0002\u07a4\u07a9\u0003\u0002\u0002\u0002\u07a5\u07a3\u0003",
    "\u0002\u0002\u0002\u07a6\u07a7\u0006\"\u0013\u0002\u07a7\u07a9\u0005",
    "F$\u0002\u07a8\u079f\u0003\u0002\u0002\u0002\u07a8\u07a6\u0003\u0002",
    "\u0002\u0002\u07a9C\u0003\u0002\u0002\u0002\u07aa\u07ac\u0007(\u0002",
    "\u0002\u07ab\u07aa\u0003\u0002\u0002\u0002\u07ab\u07ac\u0003\u0002\u0002",
    "\u0002\u07ac\u07b0\u0003\u0002\u0002\u0002\u07ad\u07ae\u0007\u0019\u0002",
    "\u0002\u07ae\u07b1\u0007\u0088\u0002\u0002\u07af\u07b1\u0007\u033d\u0002",
    "\u0002\u07b0\u07ad\u0003\u0002\u0002\u0002\u07b0\u07af\u0003\u0002\u0002",
    "\u0002\u07b1\u07b3\u0003\u0002\u0002\u0002\u07b2\u07b4\u0007\u0355\u0002",
    "\u0002\u07b3\u07b2\u0003\u0002\u0002\u0002\u07b3\u07b4\u0003\u0002\u0002",
    "\u0002\u07b4\u07b5\u0003\u0002\u0002\u0002\u07b5\u07bf\u0005\u0368\u01b5",
    "\u0002\u07b6\u07b8\u0007(\u0002\u0002\u07b7\u07b6\u0003\u0002\u0002",
    "\u0002\u07b7\u07b8\u0003\u0002\u0002\u0002\u07b8\u07b9\u0003\u0002\u0002",
    "\u0002\u07b9\u07bb\u0007\u001b\u0002\u0002\u07ba\u07bc\u0007\u0355\u0002",
    "\u0002\u07bb\u07ba\u0003\u0002\u0002\u0002\u07bb\u07bc\u0003\u0002\u0002",
    "\u0002\u07bc\u07bd\u0003\u0002\u0002\u0002\u07bd\u07bf\u0005\u036a\u01b6",
    "\u0002\u07be\u07ab\u0003\u0002\u0002\u0002\u07be\u07b7\u0003\u0002\u0002",
    "\u0002\u07bfE\u0003\u0002\u0002\u0002\u07c0\u07c2\u0005\u00a0Q\u0002",
    "\u07c1\u07c0\u0003\u0002\u0002\u0002\u07c1\u07c2\u0003\u0002\u0002\u0002",
    "\u07c2\u07c5\u0003\u0002\u0002\u0002\u07c3\u07c4\u0007\u00e1\u0002\u0002",
    "\u07c4\u07c6\u0005\u0386\u01c4\u0002\u07c5\u07c3\u0003\u0002\u0002\u0002",
    "\u07c5\u07c6\u0003\u0002\u0002\u0002\u07c6\u07cd\u0003\u0002\u0002\u0002",
    "\u07c7\u07c8\u0007\u00aa\u0002\u0002\u07c8\u07c9\u0007\u00c7\u0002\u0002",
    "\u07c9\u07ca\u0007\u0360\u0002\u0002\u07ca\u07cb\u0005L\'\u0002\u07cb",
    "\u07cc\u0007\u0361\u0002\u0002\u07cc\u07ce\u0003\u0002\u0002\u0002\u07cd",
    "\u07c7\u0003\u0002\u0002\u0002\u07cd\u07ce\u0003\u0002\u0002\u0002\u07ce",
    "G\u0003\u0002\u0002\u0002\u07cf\u07d2\u0005L\'\u0002\u07d0\u07d2\u0005",
    "J&\u0002\u07d1\u07cf\u0003\u0002\u0002\u0002\u07d1\u07d0\u0003\u0002",
    "\u0002\u0002\u07d2I\u0003\u0002\u0002\u0002\u07d3\u07d8\u0005\u0386",
    "\u01c4\u0002\u07d4\u07d5\u0007\u0364\u0002\u0002\u07d5\u07d7\u0005\u0386",
    "\u01c4\u0002\u07d6\u07d4\u0003\u0002\u0002\u0002\u07d7\u07da\u0003\u0002",
    "\u0002\u0002\u07d8\u07d6\u0003\u0002\u0002\u0002\u07d8\u07d9\u0003\u0002",
    "\u0002\u0002\u07d9K\u0003\u0002\u0002\u0002\u07da\u07d8\u0003\u0002",
    "\u0002\u0002\u07db\u07e0\u0005N(\u0002\u07dc\u07dd\u0007\u0364\u0002",
    "\u0002\u07dd\u07df\u0005N(\u0002\u07de\u07dc\u0003\u0002\u0002\u0002",
    "\u07df\u07e2\u0003\u0002\u0002\u0002\u07e0\u07de\u0003\u0002\u0002\u0002",
    "\u07e0\u07e1\u0003\u0002\u0002\u0002\u07e1M\u0003\u0002\u0002\u0002",
    "\u07e2\u07e0\u0003\u0002\u0002\u0002\u07e3\u07e4\u0005\u0386\u01c4\u0002",
    "\u07e4\u07e5\u0007\u0355\u0002\u0002\u07e5\u07e6\u0005\u0386\u01c4\u0002",
    "\u07e6O\u0003\u0002\u0002\u0002\u07e7\u07ec\u0005R*\u0002\u07e8\u07e9",
    "\u0007\u0364\u0002\u0002\u07e9\u07eb\u0005R*\u0002\u07ea\u07e8\u0003",
    "\u0002\u0002\u0002\u07eb\u07ee\u0003\u0002\u0002\u0002\u07ec\u07ea\u0003",
    "\u0002\u0002\u0002\u07ec\u07ed\u0003\u0002\u0002\u0002\u07edQ\u0003",
    "\u0002\u0002\u0002\u07ee\u07ec\u0003\u0002\u0002\u0002\u07ef\u07f0\u0005",
    "\u0376\u01bc\u0002\u07f0\u07f1\u0007\u0355\u0002\u0002\u07f1\u07f2\u0005",
    "\u0390\u01c9\u0002\u07f2S\u0003\u0002\u0002\u0002\u07f3\u07f4\u0006",
    "+\u0014\u0002\u07f4\u07f5\u0007m\u0002\u0002\u07f5\u07f6\u0007~\u0002",
    "\u0002\u07f6U\u0003\u0002\u0002\u0002\u07f7\u07f8\u0007\u01dd\u0002",
    "\u0002\u07f8\u07ff\u0007\u0355\u0002\u0002\u07f9\u0800\u0005\u0364\u01b3",
    "\u0002\u07fa\u07fd\u0007#\u0002\u0002\u07fb\u07fc\u0007\u0360\u0002",
    "\u0002\u07fc\u07fe\u0007\u0361\u0002\u0002\u07fd\u07fb\u0003\u0002\u0002",
    "\u0002\u07fd\u07fe\u0003\u0002\u0002\u0002\u07fe\u0800\u0003\u0002\u0002",
    "\u0002\u07ff\u07f9\u0003\u0002\u0002\u0002\u07ff\u07fa\u0003\u0002\u0002",
    "\u0002\u0800W\u0003\u0002\u0002\u0002\u0801\u0802\u0007\u01b0\u0002",
    "\u0002\u0802\u0806\u0005Z.\u0002\u0803\u0805\u0005\\/\u0002\u0804\u0803",
    "\u0003\u0002\u0002\u0002\u0805\u0808\u0003\u0002\u0002\u0002\u0806\u0804",
    "\u0003\u0002\u0002\u0002\u0806\u0807\u0003\u0002\u0002\u0002\u0807\u0824",
    "\u0003\u0002\u0002\u0002\u0808\u0806\u0003\u0002\u0002\u0002\u0809\u080c",
    "\u0007\u01f4\u0002\u0002\u080a\u080d\u0005\u0382\u01c2\u0002\u080b\u080d",
    "\u0005\u03f8\u01fd\u0002\u080c\u080a\u0003\u0002\u0002\u0002\u080c\u080b",
    "\u0003\u0002\u0002\u0002\u080d\u080e\u0003\u0002\u0002\u0002\u080e\u0817",
    "\u0005^0\u0002\u080f\u0810\u0007\u02ac\u0002\u0002\u0810\u0814\u0005",
    "Z.\u0002\u0811\u0813\u0005\\/\u0002\u0812\u0811\u0003\u0002\u0002\u0002",
    "\u0813\u0816\u0003\u0002\u0002\u0002\u0814\u0812\u0003\u0002\u0002\u0002",
    "\u0814\u0815\u0003\u0002\u0002\u0002\u0815\u0818\u0003\u0002\u0002\u0002",
    "\u0816\u0814\u0003\u0002\u0002\u0002\u0817\u080f\u0003\u0002\u0002\u0002",
    "\u0817\u0818\u0003\u0002\u0002\u0002\u0818\u0821\u0003\u0002\u0002\u0002",
    "\u0819\u081a\u0007\u01eb\u0002\u0002\u081a\u081e\u0005Z.\u0002\u081b",
    "\u081d\u0005\\/\u0002\u081c\u081b\u0003\u0002\u0002\u0002\u081d\u0820",
    "\u0003\u0002\u0002\u0002\u081e\u081c\u0003\u0002\u0002\u0002\u081e\u081f",
    "\u0003\u0002\u0002\u0002\u081f\u0822\u0003\u0002\u0002\u0002\u0820\u081e",
    "\u0003\u0002\u0002\u0002\u0821\u0819\u0003\u0002\u0002\u0002\u0821\u0822",
    "\u0003\u0002\u0002\u0002\u0822\u0824\u0003\u0002\u0002\u0002\u0823\u0801",
    "\u0003\u0002\u0002\u0002\u0823\u0809\u0003\u0002\u0002\u0002\u0824Y",
    "\u0003\u0002\u0002\u0002\u0825\u082a\u0007\u0199\u0002\u0002\u0826\u082a",
    "\u0005\u0386\u01c4\u0002\u0827\u082a\u0005\u0382\u01c2\u0002\u0828\u082a",
    "\u0005\u03f8\u01fd\u0002\u0829\u0825\u0003\u0002\u0002\u0002\u0829\u0826",
    "\u0003\u0002\u0002\u0002\u0829\u0827\u0003\u0002\u0002\u0002\u0829\u0828",
    "\u0003\u0002\u0002\u0002\u082a[\u0003\u0002\u0002\u0002\u082b\u082c",
    "\u0007\u0350\u0002\u0002\u082c\u082f\u0007M\u0002\u0002\u082d\u0830",
    "\u0005\u0382\u01c2\u0002\u082e\u0830\u0005\u03f8\u01fd\u0002\u082f\u082d",
    "\u0003\u0002\u0002\u0002\u082f\u082e\u0003\u0002\u0002\u0002\u0830\u0831",
    "\u0003\u0002\u0002\u0002\u0831\u0832\u0005^0\u0002\u0832]\u0003\u0002",
    "\u0002\u0002\u0833\u0841\u0005\u0412\u020a\u0002\u0834\u0841\u0007\u0164",
    "\u0002\u0002\u0835\u0841\u0007\u017c\u0002\u0002\u0836\u0841\u0007\u017d",
    "\u0002\u0002\u0837\u0841\u0007\u017e\u0002\u0002\u0838\u0841\u0007\u017f",
    "\u0002\u0002\u0839\u0841\u0007\u0180\u0002\u0002\u083a\u0841\u0007\u0181",
    "\u0002\u0002\u083b\u0841\u0007\u0182\u0002\u0002\u083c\u0841\u0007\u0183",
    "\u0002\u0002\u083d\u0841\u0007\u0184\u0002\u0002\u083e\u0841\u0007\u0185",
    "\u0002\u0002\u083f\u0841\u0007\u0186\u0002\u0002\u0840\u0833\u0003\u0002",
    "\u0002\u0002\u0840\u0834\u0003\u0002\u0002\u0002\u0840\u0835\u0003\u0002",
    "\u0002\u0002\u0840\u0836\u0003\u0002\u0002\u0002\u0840\u0837\u0003\u0002",
    "\u0002\u0002\u0840\u0838\u0003\u0002\u0002\u0002\u0840\u0839\u0003\u0002",
    "\u0002\u0002\u0840\u083a\u0003\u0002\u0002\u0002\u0840\u083b\u0003\u0002",
    "\u0002\u0002\u0840\u083c\u0003\u0002\u0002\u0002\u0840\u083d\u0003\u0002",
    "\u0002\u0002\u0840\u083e\u0003\u0002\u0002\u0002\u0840\u083f\u0003\u0002",
    "\u0002\u0002\u0841_\u0003\u0002\u0002\u0002\u0842\u0848\u0007\u01e8",
    "\u0002\u0002\u0843\u0848\u0007\u01e1\u0002\u0002\u0844\u0845\u0007\u01e1",
    "\u0002\u0002\u0845\u0846\u0007i\u0002\u0002\u0846\u0848\u0007\u029c",
    "\u0002\u0002\u0847\u0842\u0003\u0002\u0002\u0002\u0847\u0843\u0003\u0002",
    "\u0002\u0002\u0847\u0844\u0003\u0002\u0002\u0002\u0848a\u0003\u0002",
    "\u0002\u0002\u0849\u084a\u0007\u00a5\u0002\u0002\u084a\u084b\t\u000e",
    "\u0002\u0002\u084bc\u0003\u0002\u0002\u0002\u084c\u084e\u0007\u0220",
    "\u0002\u0002\u084d\u084f\u0007\u0355\u0002\u0002\u084e\u084d\u0003\u0002",
    "\u0002\u0002\u084e\u084f\u0003\u0002\u0002\u0002\u084f\u0850\u0003\u0002",
    "\u0002\u0002\u0850\u0858\u0005\u0384\u01c3\u0002\u0851\u0858\u0005b",
    "2\u0002\u0852\u0853\u0007\u00aa\u0002\u0002\u0853\u0854\u0007\u0263",
    "\u0002\u0002\u0854\u0858\u0005\u0376\u01bc\u0002\u0855\u0856\u0007\u01cb",
    "\u0002\u0002\u0856\u0858\u0007\u0372\u0002\u0002\u0857\u084c\u0003\u0002",
    "\u0002\u0002\u0857\u0851\u0003\u0002\u0002\u0002\u0857\u0852\u0003\u0002",
    "\u0002\u0002\u0857\u0855\u0003\u0002\u0002\u0002\u0858e\u0003\u0002",
    "\u0002\u0002\u0859\u085b\t\u000f\u0002\u0002\u085a\u0859\u0003\u0002",
    "\u0002\u0002\u085a\u085b\u0003\u0002\u0002\u0002\u085b\u085c\u0003\u0002",
    "\u0002\u0002\u085c\u085d\u0005\u0376\u01bc\u0002\u085d\u085e\u0005\u0392",
    "\u01ca\u0002\u085eg\u0003\u0002\u0002\u0002\u085f\u0860\u0005\u0376",
    "\u01bc\u0002\u0860\u0861\u0005\u0392\u01ca\u0002\u0861i\u0003\u0002",
    "\u0002\u0002\u0862\u0865\t\u0010\u0002\u0002\u0863\u0866\u0005\u037e",
    "\u01c0\u0002\u0864\u0866\u0005\u0386\u01c4\u0002\u0865\u0863\u0003\u0002",
    "\u0002\u0002\u0865\u0864\u0003\u0002\u0002\u0002\u0866k\u0003\u0002",
    "\u0002\u0002\u0867\u0868\u0007\u01cb\u0002\u0002\u0868\u087f\u0007\u0372",
    "\u0002\u0002\u0869\u086a\u0007\u0221\u0002\u0002\u086a\u087f\u0007\u008c",
    "\u0002\u0002\u086b\u086d\u0007f\u0002\u0002\u086c\u086b\u0003\u0002",
    "\u0002\u0002\u086c\u086d\u0003\u0002\u0002\u0002\u086d\u086e\u0003\u0002",
    "\u0002\u0002\u086e\u087f\u0007-\u0002\u0002\u086f\u0870\u0007\u01d4",
    "\u0002\u0002\u0870\u087a\u0007\u008c\u0002\u0002\u0871\u0872\u0007\u0253",
    "\u0002\u0002\u0872\u087a\u0007\u008c\u0002\u0002\u0873\u0874\u0007x",
    "\u0002\u0002\u0874\u0875\u0007\u008c\u0002\u0002\u0875\u087a\u0007\u01d9",
    "\u0002\u0002\u0876\u0877\u0007d\u0002\u0002\u0877\u0878\u0007\u008c",
    "\u0002\u0002\u0878\u087a\u0007\u01d9\u0002\u0002\u0879\u086f\u0003\u0002",
    "\u0002\u0002\u0879\u0871\u0003\u0002\u0002\u0002\u0879\u0873\u0003\u0002",
    "\u0002\u0002\u0879\u0876\u0003\u0002\u0002\u0002\u087a\u087f\u0003\u0002",
    "\u0002\u0002\u087b\u087c\u0007\u008c\u0002\u0002\u087c\u087d\u0007\u0295",
    "\u0002\u0002\u087d\u087f\t\f\u0002\u0002\u087e\u0867\u0003\u0002\u0002",
    "\u0002\u087e\u0869\u0003\u0002\u0002\u0002\u087e\u086c\u0003\u0002\u0002",
    "\u0002\u087e\u0879\u0003\u0002\u0002\u0002\u087e\u087b\u0003\u0002\u0002",
    "\u0002\u087fm\u0003\u0002\u0002\u0002\u0880\u0881\u0007\u020e\u0002",
    "\u0002\u0881\u088f\u0007\u0372\u0002\u0002\u0882\u0883\u0007%\u0002",
    "\u0002\u0883\u088f\u0007\u0372\u0002\u0002\u0884\u0885\u0007\u02ca\u0002",
    "\u0002\u0885\u088f\u0007\u0372\u0002\u0002\u0886\u0887\u0007\u0267\u0002",
    "\u0002\u0887\u088f\u0007\u0372\u0002\u0002\u0888\u0889\u0007\u029f\u0002",
    "\u0002\u0889\u088f\u0007\u0372\u0002\u0002\u088a\u088b\u0007\u0260\u0002",
    "\u0002\u088b\u088f\u0007\u0372\u0002\u0002\u088c\u088d\u0007\u026c\u0002",
    "\u0002\u088d\u088f\u0005\u0382\u01c2\u0002\u088e\u0880\u0003\u0002\u0002",
    "\u0002\u088e\u0882\u0003\u0002\u0002\u0002\u088e\u0884\u0003\u0002\u0002",
    "\u0002\u088e\u0886\u0003\u0002\u0002\u0002\u088e\u0888\u0003\u0002\u0002",
    "\u0002\u088e\u088a\u0003\u0002\u0002\u0002\u088e\u088c\u0003\u0002\u0002",
    "\u0002\u088fo\u0003\u0002\u0002\u0002\u0890\u0891\u00069\u0015\u0002",
    "\u0891\u0893\u0007!\u0002\u0002\u0892\u0894\u0007\u02bc\u0002\u0002",
    "\u0893\u0892\u0003\u0002\u0002\u0002\u0893\u0894\u0003\u0002\u0002\u0002",
    "\u0894\u0895\u0003\u0002\u0002\u0002\u0895\u08a0\u0007\u0096\u0002\u0002",
    "\u0896\u0897\u00069\u0016\u0002\u0897\u0899\u0007!\u0002\u0002\u0898",
    "\u089a\u0007\u02bc\u0002\u0002\u0899\u0898\u0003\u0002\u0002\u0002\u0899",
    "\u089a\u0003\u0002\u0002\u0002\u089a\u089c\u0003\u0002\u0002\u0002\u089b",
    "\u089d\u0007\u00cd\u0002\u0002\u089c\u089b\u0003\u0002\u0002\u0002\u089c",
    "\u089d\u0003\u0002\u0002\u0002\u089d\u089e\u0003\u0002\u0002\u0002\u089e",
    "\u08a0\u0007\u0096\u0002\u0002\u089f\u0890\u0003\u0002\u0002\u0002\u089f",
    "\u0896\u0003\u0002\u0002\u0002\u08a0q\u0003\u0002\u0002\u0002\u08a1",
    "\u08a2\u0006:\u0017\u0002\u08a2\u08a3\t\u0011\u0002\u0002\u08a3s\u0003",
    "\u0002\u0002\u0002\u08a4\u08a6\u0006;\u0018\u0002\u08a5\u08a7\u0007",
    "\u000e\u0002\u0002\u08a6\u08a5\u0003\u0002\u0002\u0002\u08a6\u08a7\u0003",
    "\u0002\u0002\u0002\u08a7\u08a8\u0003\u0002\u0002\u0002\u08a8\u08ad\u0005",
    "\u0148\u00a5\u0002\u08a9\u08aa\u0006;\u0019\u0002\u08aa\u08ab\u0007",
    "\u000e\u0002\u0002\u08ab\u08ad\u0005\u0148\u00a5\u0002\u08ac\u08a4\u0003",
    "\u0002\u0002\u0002\u08ac\u08a9\u0003\u0002\u0002\u0002\u08adu\u0003",
    "\u0002\u0002\u0002\u08ae\u08b0\u0006<\u001a\u0002\u08af\u08b1\u0005",
    "\u00a4S\u0002\u08b0\u08af\u0003\u0002\u0002\u0002\u08b0\u08b1\u0003",
    "\u0002\u0002\u0002\u08b1\u08b3\u0003\u0002\u0002\u0002\u08b2\u08b4\u0005",
    "\u00a6T\u0002\u08b3\u08b2\u0003\u0002\u0002\u0002\u08b3\u08b4\u0003",
    "\u0002\u0002\u0002\u08b4w\u0003\u0002\u0002\u0002\u08b5\u08c0\u0006",
    "=\u001b\u0002\u08b6\u08bd\u0005\u00ba^\u0002\u08b7\u08b9\u0007\u0364",
    "\u0002\u0002\u08b8\u08b7\u0003\u0002\u0002\u0002\u08b8\u08b9\u0003\u0002",
    "\u0002\u0002\u08b9\u08ba\u0003\u0002\u0002\u0002\u08ba\u08bc\u0005\u00ba",
    "^\u0002\u08bb\u08b8\u0003\u0002\u0002\u0002\u08bc\u08bf\u0003\u0002",
    "\u0002\u0002\u08bd\u08bb\u0003\u0002\u0002\u0002\u08bd\u08be\u0003\u0002",
    "\u0002\u0002\u08be\u08c1\u0003\u0002\u0002\u0002\u08bf\u08bd\u0003\u0002",
    "\u0002\u0002\u08c0\u08b6\u0003\u0002\u0002\u0002\u08c0\u08c1\u0003\u0002",
    "\u0002\u0002\u08c1\u08c3\u0003\u0002\u0002\u0002\u08c2\u08c4\u0005\u00be",
    "`\u0002\u08c3\u08c2\u0003\u0002\u0002\u0002\u08c3\u08c4\u0003\u0002",
    "\u0002\u0002\u08c4\u08e6\u0003\u0002\u0002\u0002\u08c5\u08c7\u0006=",
    "\u001c\u0002\u08c6\u08c8\u0005\u00a0Q\u0002\u08c7\u08c6\u0003\u0002",
    "\u0002\u0002\u08c7\u08c8\u0003\u0002\u0002\u0002\u08c8\u08ca\u0003\u0002",
    "\u0002\u0002\u08c9\u08cb\u0005\u0332\u019a\u0002\u08ca\u08c9\u0003\u0002",
    "\u0002\u0002\u08ca\u08cb\u0003\u0002\u0002\u0002\u08cb\u08cd\u0003\u0002",
    "\u0002\u0002\u08cc\u08ce\u0005\u0090I\u0002\u08cd\u08cc\u0003\u0002",
    "\u0002\u0002\u08cd\u08ce\u0003\u0002\u0002\u0002\u08ce\u08d0\u0003\u0002",
    "\u0002\u0002\u08cf\u08d1\u0005\u0094K\u0002\u08d0\u08cf\u0003\u0002",
    "\u0002\u0002\u08d0\u08d1\u0003\u0002\u0002\u0002\u08d1\u08d3\u0003\u0002",
    "\u0002\u0002\u08d2\u08d4\u0005\u015c\u00af\u0002\u08d3\u08d2\u0003\u0002",
    "\u0002\u0002\u08d3\u08d4\u0003\u0002\u0002\u0002\u08d4\u08d7\u0003\u0002",
    "\u0002\u0002\u08d5\u08d8\u0005\u015e\u00b0\u0002\u08d6\u08d8\u0005\u0164",
    "\u00b3\u0002\u08d7\u08d5\u0003\u0002\u0002\u0002\u08d7\u08d6\u0003\u0002",
    "\u0002\u0002\u08d7\u08d8\u0003\u0002\u0002\u0002\u08d8\u08da\u0003\u0002",
    "\u0002\u0002\u08d9\u08db\u0005\u0098M\u0002\u08da\u08d9\u0003\u0002",
    "\u0002\u0002\u08da\u08db\u0003\u0002\u0002\u0002\u08db\u08dd\u0003\u0002",
    "\u0002\u0002\u08dc\u08de\u0005\u00a4S\u0002\u08dd\u08dc\u0003\u0002",
    "\u0002\u0002\u08dd\u08de\u0003\u0002\u0002\u0002\u08de\u08e0\u0003\u0002",
    "\u0002\u0002\u08df\u08e1\u0005\u00a6T\u0002\u08e0\u08df\u0003\u0002",
    "\u0002\u0002\u08e0\u08e1\u0003\u0002\u0002\u0002\u08e1\u08e3\u0003\u0002",
    "\u0002\u0002\u08e2\u08e4\u0005\u00a8U\u0002\u08e3\u08e2\u0003\u0002",
    "\u0002\u0002\u08e3\u08e4\u0003\u0002\u0002\u0002\u08e4\u08e6\u0003\u0002",
    "\u0002\u0002\u08e5\u08b5\u0003\u0002\u0002\u0002\u08e5\u08c5\u0003\u0002",
    "\u0002\u0002\u08e6y\u0003\u0002\u0002\u0002\u08e7\u08e8\u0007\u0360",
    "\u0002\u0002\u08e8\u08ed\u0005|?\u0002\u08e9\u08ea\u0007\u0364\u0002",
    "\u0002\u08ea\u08ec\u0005|?\u0002\u08eb\u08e9\u0003\u0002\u0002\u0002",
    "\u08ec\u08ef\u0003\u0002\u0002\u0002\u08ed\u08eb\u0003\u0002\u0002\u0002",
    "\u08ed\u08ee\u0003\u0002\u0002\u0002\u08ee\u08f0\u0003\u0002\u0002\u0002",
    "\u08ef\u08ed\u0003\u0002\u0002\u0002\u08f0\u08f1\u0007\u0361\u0002\u0002",
    "\u08f1{\u0003\u0002\u0002\u0002\u08f2\u08f7\u0005~@\u0002\u08f3\u08f7",
    "\u0005\u00acW\u0002\u08f4\u08f5\u0006?\u001d\u0002\u08f5\u08f7\u0005",
    "\u00b8]\u0002\u08f6\u08f2\u0003\u0002\u0002\u0002\u08f6\u08f3\u0003",
    "\u0002\u0002\u0002\u08f6\u08f4\u0003\u0002\u0002\u0002\u08f7}\u0003",
    "\u0002\u0002\u0002\u08f8\u08f9\u0005\u0376\u01bc\u0002\u08f9\u08fa\u0005",
    "\u0080A\u0002\u08fa\u007f\u0003\u0002\u0002\u0002\u08fb\u08fc\u0006",
    "A\u001e\u0002\u08fc\u0900\u0005\u0392\u01ca\u0002\u08fd\u08ff\u0005",
    "\u0082B\u0002\u08fe\u08fd\u0003\u0002\u0002\u0002\u08ff\u0902\u0003",
    "\u0002\u0002\u0002\u0900\u08fe\u0003\u0002\u0002\u0002\u0900\u0901\u0003",
    "\u0002\u0002\u0002\u0901\u090f\u0003\u0002\u0002\u0002\u0902\u0900\u0003",
    "\u0002\u0002\u0002\u0903\u0904\u0006A\u001f\u0002\u0904\u0906\u0005",
    "\u0392\u01ca\u0002\u0905\u0907\u0005\u0086D\u0002\u0906\u0905\u0003",
    "\u0002\u0002\u0002\u0906\u0907\u0003\u0002\u0002\u0002\u0907\u090b\u0003",
    "\u0002\u0002\u0002\u0908\u090a\u0005\u0084C\u0002\u0909\u0908\u0003",
    "\u0002\u0002\u0002\u090a\u090d\u0003\u0002\u0002\u0002\u090b\u0909\u0003",
    "\u0002\u0002\u0002\u090b\u090c\u0003\u0002\u0002\u0002\u090c\u090f\u0003",
    "\u0002\u0002\u0002\u090d\u090b\u0003\u0002\u0002\u0002\u090e\u08fb\u0003",
    "\u0002\u0002\u0002\u090e\u0903\u0003\u0002\u0002\u0002\u090f\u0081\u0003",
    "\u0002\u0002\u0002\u0910\u0939\u0005\u038e\u01c8\u0002\u0911\u0912\u0007",
    "(\u0002\u0002\u0912\u0939\u0005\u03be\u01e0\u0002\u0913\u0918\u0007",
    "\u01b4\u0002\u0002\u0914\u0915\u0007i\u0002\u0002\u0915\u0916\u0007",
    "\u00a2\u0002\u0002\u0916\u0918\u0005\u03c0\u01e1\u0002\u0917\u0913\u0003",
    "\u0002\u0002\u0002\u0917\u0914\u0003\u0002\u0002\u0002\u0918\u0939\u0003",
    "\u0002\u0002\u0002\u0919\u091b\u0007s\u0002\u0002\u091a\u0919\u0003",
    "\u0002\u0002\u0002\u091a\u091b\u0003\u0002\u0002\u0002\u091b\u091c\u0003",
    "\u0002\u0002\u0002\u091c\u0939\u0007R\u0002\u0002\u091d\u091f\u0007",
    "\u009f\u0002\u0002\u091e\u0920\u0007R\u0002\u0002\u091f\u091e\u0003",
    "\u0002\u0002\u0002\u091f\u0920\u0003\u0002\u0002\u0002\u0920\u0939\u0003",
    "\u0002\u0002\u0002\u0921\u0922\u0007\u01cb\u0002\u0002\u0922\u0939\u0007",
    "\u0372\u0002\u0002\u0923\u0924\u0007\u01ca\u0002\u0002\u0924\u0939\t",
    "\u0012\u0002\u0002\u0925\u0926\u0007\u02b2\u0002\u0002\u0926\u0939\t",
    "\u0013\u0002\u0002\u0927\u0939\u0005\u00b2Z\u0002\u0928\u0929\u0007",
    "\u001b\u0002\u0002\u0929\u0939\u0005\u036a\u01b6\u0002\u092a\u092b\u0007",
    "@\u0002\u0002\u092b\u092d\u0007\u000b\u0002\u0002\u092c\u092a\u0003",
    "\u0002\u0002\u0002\u092c\u092d\u0003\u0002\u0002\u0002\u092d\u092e\u0003",
    "\u0002\u0002\u0002\u092e\u092f\u0007\u000e\u0002\u0002\u092f\u0930\u0007",
    "\u0360\u0002\u0002\u0930\u0931\u0005\u03f8\u01fd\u0002\u0931\u0933\u0007",
    "\u0361\u0002\u0002\u0932\u0934\t\u0014\u0002\u0002\u0933\u0932\u0003",
    "\u0002\u0002\u0002\u0933\u0934\u0003\u0002\u0002\u0002\u0934\u0939\u0003",
    "\u0002\u0002\u0002\u0935\u0936\u0007\u0175\u0002\u0002\u0936\u0937\u0007",
    "(\u0002\u0002\u0937\u0939\u0007\u02ce\u0002\u0002\u0938\u0910\u0003",
    "\u0002\u0002\u0002\u0938\u0911\u0003\u0002\u0002\u0002\u0938\u0917\u0003",
    "\u0002\u0002\u0002\u0938\u091a\u0003\u0002\u0002\u0002\u0938\u091d\u0003",
    "\u0002\u0002\u0002\u0938\u0921\u0003\u0002\u0002\u0002\u0938\u0923\u0003",
    "\u0002\u0002\u0002\u0938\u0925\u0003\u0002\u0002\u0002\u0938\u0927\u0003",
    "\u0002\u0002\u0002\u0938\u0928\u0003\u0002\u0002\u0002\u0938\u092c\u0003",
    "\u0002\u0002\u0002\u0938\u0935\u0003\u0002\u0002\u0002\u0939\u0083\u0003",
    "\u0002\u0002\u0002\u093a\u093b\u0007f\u0002\u0002\u093b\u0957\u0007",
    "h\u0002\u0002\u093c\u0957\u0007\u009f\u0002\u0002\u093d\u093e\u0007",
    "\u001e\u0002\u0002\u093e\u0940\u0005\u0376\u01bc\u0002\u093f\u093d\u0003",
    "\u0002\u0002\u0002\u093f\u0940\u0003\u0002\u0002\u0002\u0940\u0941\u0003",
    "\u0002\u0002\u0002\u0941\u0942\u0007s\u0002\u0002\u0942\u0943\u0007",
    "R\u0002\u0002\u0943\u0957\u0005\u0088E\u0002\u0944\u0945\u0007\u001e",
    "\u0002\u0002\u0945\u0947\u0005\u0376\u01bc\u0002\u0946\u0944\u0003\u0002",
    "\u0002\u0002\u0946\u0947\u0003\u0002\u0002\u0002\u0947\u0948\u0003\u0002",
    "\u0002\u0002\u0948\u0949\u0007y\u0002\u0002\u0949\u094a\u0005\u0342",
    "\u01a2\u0002\u094a\u094b\u0007\u0360\u0002\u0002\u094b\u094c\u0005\u0376",
    "\u01bc\u0002\u094c\u094d\u0007\u0361\u0002\u0002\u094d\u094e\u0005\u0088",
    "E\u0002\u094e\u0957\u0003\u0002\u0002\u0002\u094f\u0950\u0007\u01cb",
    "\u0002\u0002\u0950\u0957\u0005\u0386\u01c4\u0002\u0951\u0954\u0007(",
    "\u0002\u0002\u0952\u0955\u0005\u0390\u01c9\u0002\u0953\u0955\u0007h",
    "\u0002\u0002\u0954\u0952\u0003\u0002\u0002\u0002\u0954\u0953\u0003\u0002",
    "\u0002\u0002\u0955\u0957\u0003\u0002\u0002\u0002\u0956\u093a\u0003\u0002",
    "\u0002\u0002\u0956\u093c\u0003\u0002\u0002\u0002\u0956\u093f\u0003\u0002",
    "\u0002\u0002\u0956\u0946\u0003\u0002\u0002\u0002\u0956\u094f\u0003\u0002",
    "\u0002\u0002\u0956\u0951\u0003\u0002\u0002\u0002\u0957\u0085\u0003\u0002",
    "\u0002\u0002\u0958\u0959\u0007\u00aa\u0002\u0002\u0959\u095a\u0007\u00af",
    "\u0002\u0002\u095a\u095b\u0005\u0386\u01c4\u0002\u095b\u095c\u0005\u0386",
    "\u01c4\u0002\u095c\u0964\u0003\u0002\u0002\u0002\u095d\u095e\u0007\u00b1",
    "\u0002\u0002\u095e\u095f\u0007\u00af\u0002\u0002\u095f\u0960\u0005\u0386",
    "\u01c4\u0002\u0960\u0961\u0005\u0386\u01c4\u0002\u0961\u0964\u0003\u0002",
    "\u0002\u0002\u0962\u0964\u0007\u00ec\u0002\u0002\u0963\u0958\u0003\u0002",
    "\u0002\u0002\u0963\u095d\u0003\u0002\u0002\u0002\u0963\u0962\u0003\u0002",
    "\u0002\u0002\u0964\u0087\u0003\u0002\u0002\u0002\u0965\u0967\t\u0015",
    "\u0002\u0002\u0966\u0965\u0003\u0002\u0002\u0002\u0966\u0967\u0003\u0002",
    "\u0002\u0002\u0967\u0969\u0003\u0002\u0002\u0002\u0968\u096a\t\u0016",
    "\u0002\u0002\u0969\u0968\u0003\u0002\u0002\u0002\u0969\u096a\u0003\u0002",
    "\u0002\u0002\u096a\u096c\u0003\u0002\u0002\u0002\u096b\u096d\t\u0017",
    "\u0002\u0002\u096c\u096b\u0003\u0002\u0002\u0002\u096c\u096d\u0003\u0002",
    "\u0002\u0002\u096d\u0089\u0003\u0002\u0002\u0002\u096e\u096f\u0007\u000e",
    "\u0002\u0002\u096f\u0970\u0005\u0148\u00a5\u0002\u0970\u008b\u0003\u0002",
    "\u0002\u0002\u0971\u0976\u0005\u008eH\u0002\u0972\u0973\u0007\u0364",
    "\u0002\u0002\u0973\u0975\u0005\u008eH\u0002\u0974\u0972\u0003\u0002",
    "\u0002\u0002\u0975\u0978\u0003\u0002\u0002\u0002\u0976\u0974\u0003\u0002",
    "\u0002\u0002\u0976\u0977\u0003\u0002\u0002\u0002\u0977\u008d\u0003\u0002",
    "\u0002\u0002\u0978\u0976\u0003\u0002\u0002\u0002\u0979\u097c\u0005\u0376",
    "\u01bc\u0002\u097a\u097b\u0007\u01cb\u0002\u0002\u097b\u097d\u0005\u0386",
    "\u01c4\u0002\u097c\u097a\u0003\u0002\u0002\u0002\u097c\u097d\u0003\u0002",
    "\u0002\u0002\u097d\u008f\u0003\u0002\u0002\u0002\u097e\u097f\u0007\u00be",
    "\u0002\u0002\u097f\u0980\u0007\u0013\u0002\u0002\u0980\u0981\u0007\u0360",
    "\u0002\u0002\u0981\u0982\u0005\u03a4\u01d3\u0002\u0982\u0983\u0007\u0361",
    "\u0002\u0002\u0983\u098a\u0003\u0002\u0002\u0002\u0984\u0985\u0007\u0119",
    "\u0002\u0002\u0985\u0986\u0007\u0013\u0002\u0002\u0986\u0987\u0007\u0360",
    "\u0002\u0002\u0987\u0988\u0005\u03a6\u01d4\u0002\u0988\u0989\u0007\u0361",
    "\u0002\u0002\u0989\u098b\u0003\u0002\u0002\u0002\u098a\u0984\u0003\u0002",
    "\u0002\u0002\u098a\u098b\u0003\u0002\u0002\u0002\u098b\u098d\u0003\u0002",
    "\u0002\u0002\u098c\u098e\u0005\u0092J\u0002\u098d\u098c\u0003\u0002",
    "\u0002\u0002\u098d\u098e\u0003\u0002\u0002\u0002\u098e\u098f\u0003\u0002",
    "\u0002\u0002\u098f\u0990\bI\u0001\u0002\u0990\u0091\u0003\u0002\u0002",
    "\u0002\u0991\u0992\u0007N\u0002\u0002\u0992\u0993\u0005\u0382\u01c2",
    "\u0002\u0993\u0994\u0007\u00b7\u0002\u0002\u0994\u0093\u0003\u0002\u0002",
    "\u0002\u0995\u0996\u0007\u0117\u0002\u0002\u0996\u0997\u0007\u0013\u0002",
    "\u0002\u0997\u0998\u0007\u0360\u0002\u0002\u0998\u0999\u0005\u03a4\u01d3",
    "\u0002\u0999\u099a\u0007\u0361\u0002\u0002\u099a\u099b\u0007i\u0002",
    "\u0002\u099b\u09aa\u0007\u0360\u0002\u0002\u099c\u09ab\u0005\u03b8\u01dd",
    "\u0002\u099d\u099e\u0007\u0360\u0002\u0002\u099e\u099f\u0005\u03b8\u01dd",
    "\u0002\u099f\u09a0\u0007\u0361\u0002\u0002\u09a0\u09a7\u0007\u0364\u0002",
    "\u0002\u09a1\u09a2\u0007\u0360\u0002\u0002\u09a2\u09a3\u0005\u03b8\u01dd",
    "\u0002\u09a3\u09a4\u0007\u0361\u0002\u0002\u09a4\u09a6\u0003\u0002\u0002",
    "\u0002\u09a5\u09a1\u0003\u0002\u0002\u0002\u09a6\u09a9\u0003\u0002\u0002",
    "\u0002\u09a7\u09a5\u0003\u0002\u0002\u0002\u09a7\u09a8\u0003\u0002\u0002",
    "\u0002\u09a8\u09ab\u0003\u0002\u0002\u0002\u09a9\u09a7\u0003\u0002\u0002",
    "\u0002\u09aa\u099c\u0003\u0002\u0002\u0002\u09aa\u099d\u0003\u0002\u0002",
    "\u0002\u09ab\u09ac\u0003\u0002\u0002\u0002\u09ac\u09b0\u0007\u0361\u0002",
    "\u0002\u09ad\u09ae\u0007\u02b3\u0002\u0002\u09ae\u09af\u0007\u000e\u0002",
    "\u0002\u09af\u09b1\u0007\u00cb\u0002\u0002\u09b0\u09ad\u0003\u0002\u0002",
    "\u0002\u09b0\u09b1\u0003\u0002\u0002\u0002\u09b1\u0095\u0003\u0002\u0002",
    "\u0002\u09b2\u09b3\u0007\u0088\u0002\u0002\u09b3\u09b4\u0007\u0112\u0002",
    "\u0002\u09b4\u09bb\u0005\u0386\u01c4\u0002\u09b5\u09b6\u0007\u00aa\u0002",
    "\u0002\u09b6\u09b7\u0007\u0113\u0002\u0002\u09b7\u09b8\u0007\u0360\u0002",
    "\u0002\u09b8\u09b9\u0005H%\u0002\u09b9\u09ba\u0007\u0361\u0002\u0002",
    "\u09ba\u09bc\u0003\u0002\u0002\u0002\u09bb\u09b5\u0003\u0002\u0002\u0002",
    "\u09bb\u09bc\u0003\u0002\u0002\u0002\u09bc\u0097\u0003\u0002\u0002\u0002",
    "\u09bd\u09be\u0007\u00aa\u0002\u0002\u09be\u09bf\u0007\u0115\u0002\u0002",
    "\u09bf\u09c0\u0007\u0179\u0002\u0002\u09c0\u09c1\u0005\u0382\u01c2\u0002",
    "\u09c1\u09c2\u0007\u0289\u0002\u0002\u09c2\u09c5\u0005\u0382\u01c2\u0002",
    "\u09c3\u09c4\t\u0015\u0002\u0002\u09c4\u09c6\u0007\t\u0002\u0002\u09c5",
    "\u09c3\u0003\u0002\u0002\u0002\u09c5\u09c6\u0003\u0002\u0002\u0002\u09c6",
    "\u0099\u0003\u0002\u0002\u0002\u09c7\u09c8\u0007\u00aa\u0002\u0002\u09c8",
    "\u09c9\u0007\u0121\u0002\u0002\u09c9\u09ca\u0007\u0179\u0002\u0002\u09ca",
    "\u09cb\u0005\u0382\u01c2\u0002\u09cb\u09cc\u0007\u00bc\u0002\u0002\u09cc",
    "\u09cd\u0007\u0179\u0002\u0002\u09cd\u09ce\u0005\u0382\u01c2\u0002\u09ce",
    "\u09cf\u0007\u0289\u0002\u0002\u09cf\u09d0\u0005\u0382\u01c2\u0002\u09d0",
    "\u009b\u0003\u0002\u0002\u0002\u09d1\u09d2\u0007\u00aa\u0002\u0002\u09d2",
    "\u09d5\u0007\u0120\u0002\u0002\u09d3\u09d6\u0005\u0382\u01c2\u0002\u09d4",
    "\u09d6\u0005\u0386\u01c4\u0002\u09d5\u09d3\u0003\u0002\u0002\u0002\u09d5",
    "\u09d4\u0003\u0002\u0002\u0002\u09d6\u09dc\u0003\u0002\u0002\u0002\u09d7",
    "\u09da\u0007\u0289\u0002\u0002\u09d8\u09db\u0005\u0382\u01c2\u0002\u09d9",
    "\u09db\u0005\u0386\u01c4\u0002\u09da\u09d8\u0003\u0002\u0002\u0002\u09da",
    "\u09d9\u0003\u0002\u0002\u0002\u09db\u09dd\u0003\u0002\u0002\u0002\u09dc",
    "\u09d7\u0003\u0002\u0002\u0002\u09dc\u09dd\u0003\u0002\u0002\u0002\u09dd",
    "\u009d\u0003\u0002\u0002\u0002\u09de\u09df\u0006P \u0002\u09df\u09e0",
    "\u0007\u00aa\u0002\u0002\u09e0\u09e1\u0007\u0253\u0002\u0002\u09e1\u09e2",
    "\u0007\u01d9\u0002\u0002\u09e2\u009f\u0003\u0002\u0002\u0002\u09e3\u09e4",
    "\u0007\u01cb\u0002\u0002\u09e4\u09e5\u0005\u0386\u01c4\u0002\u09e5\u00a1",
    "\u0003\u0002\u0002\u0002\u09e6\u09e7\u0007\u0088\u0002\u0002\u09e7\u09e8",
    "\u0007\u00e1\u0002\u0002\u09e8\u09e9\u0005\u0386\u01c4\u0002\u09e9\u00a3",
    "\u0003\u0002\u0002\u0002\u09ea\u09eb\u0007\u00e1\u0002\u0002\u09eb\u09ec",
    "\u0005\u0386\u01c4\u0002\u09ec\u00a5\u0003\u0002\u0002\u0002\u09ed\u09ee",
    "\u0007\u0122\u0002\u0002\u09ee\u09ef\u0007\u0360\u0002\u0002\u09ef\u09f0",
    "\u0005L\'\u0002\u09f0\u09f1\u0007\u0361\u0002\u0002\u09f1\u00a7\u0003",
    "\u0002\u0002\u0002\u09f2\u09f3\u0006U!\u0002\u09f3\u09f4\u0007\u0341",
    "\u0002\u0002\u09f4\u09f5\u0007\u01ef\u0002\u0002\u09f5\u09f6\u0007N",
    "\u0002\u0002\u09f6\u09f8\u0005\u0342\u01a2\u0002\u09f7\u09f9\u0007\u00f1",
    "\u0002\u0002\u09f8\u09f7\u0003\u0002\u0002\u0002\u09f8\u09f9\u0003\u0002",
    "\u0002\u0002\u09f9\u09fb\u0003\u0002\u0002\u0002\u09fa\u09fc\u0005\u00aa",
    "V\u0002\u09fb\u09fa\u0003\u0002\u0002\u0002\u09fb\u09fc\u0003\u0002",
    "\u0002\u0002\u09fc\u00a9\u0003\u0002\u0002\u0002\u09fd\u09fe\u0007\u010f",
    "\u0002\u0002\u09fe\u09ff\u0007\u0105\u0002\u0002\u09ff\u0a00\u0007Y",
    "\u0002\u0002\u0a00\u0a01\u0005\u04b6\u025c\u0002\u0a01\u0a02\t\u0018",
    "\u0002\u0002\u0a02\u00ab\u0003\u0002\u0002\u0002\u0a03\u0a04\u0006W",
    "\"\u0002\u0a04\u0a08\u0005\u00aeX\u0002\u0a05\u0a06\u0006W#\u0002\u0a06",
    "\u0a08\u0005\u00b0Y\u0002\u0a07\u0a03\u0003\u0002\u0002\u0002\u0a07",
    "\u0a05\u0003\u0002\u0002\u0002\u0a08\u00ad\u0003\u0002\u0002\u0002\u0a09",
    "\u0a0b\u0007\u001e\u0002\u0002\u0a0a\u0a0c\u0005\u0376\u01bc\u0002\u0a0b",
    "\u0a0a\u0003\u0002\u0002\u0002\u0a0b\u0a0c\u0003\u0002\u0002\u0002\u0a0c",
    "\u0a0e\u0003\u0002\u0002\u0002\u0a0d\u0a09\u0003\u0002\u0002\u0002\u0a0d",
    "\u0a0e\u0003\u0002\u0002\u0002\u0a0e\u0a0f\u0003\u0002\u0002\u0002\u0a0f",
    "\u0a10\u0007s\u0002\u0002\u0a10\u0a12\u0007R\u0002\u0002\u0a11\u0a13",
    "\u0005\u0376\u01bc\u0002\u0a12\u0a11\u0003\u0002\u0002\u0002\u0a12\u0a13",
    "\u0003\u0002\u0002\u0002\u0a13\u0a15\u0003\u0002\u0002\u0002\u0a14\u0a16",
    "\u0005b2\u0002\u0a15\u0a14\u0003\u0002\u0002\u0002\u0a15\u0a16\u0003",
    "\u0002\u0002\u0002\u0a16\u0a17\u0003\u0002\u0002\u0002\u0a17\u0a1b\u0005",
    "\u03b2\u01da\u0002\u0a18\u0a1a\u0005d3\u0002\u0a19\u0a18\u0003\u0002",
    "\u0002\u0002\u0a1a\u0a1d\u0003\u0002\u0002\u0002\u0a1b\u0a19\u0003\u0002",
    "\u0002\u0002\u0a1b\u0a1c\u0003\u0002\u0002\u0002\u0a1c\u0a4f\u0003\u0002",
    "\u0002\u0002\u0a1d\u0a1b\u0003\u0002\u0002\u0002\u0a1e\u0a20\u0007\u001e",
    "\u0002\u0002\u0a1f\u0a21\u0005\u0376\u01bc\u0002\u0a20\u0a1f\u0003\u0002",
    "\u0002\u0002\u0a20\u0a21\u0003\u0002\u0002\u0002\u0a21\u0a23\u0003\u0002",
    "\u0002\u0002\u0a22\u0a1e\u0003\u0002\u0002\u0002\u0a22\u0a23\u0003\u0002",
    "\u0002\u0002\u0a23\u0a24\u0003\u0002\u0002\u0002\u0a24\u0a26\u0007\u009f",
    "\u0002\u0002\u0a25\u0a27\t\u0019\u0002\u0002\u0a26\u0a25\u0003\u0002",
    "\u0002\u0002\u0a26\u0a27\u0003\u0002\u0002\u0002\u0a27\u0a29\u0003\u0002",
    "\u0002\u0002\u0a28\u0a2a\u0005\u0376\u01bc\u0002\u0a29\u0a28\u0003\u0002",
    "\u0002\u0002\u0a29\u0a2a\u0003\u0002\u0002\u0002\u0a2a\u0a2c\u0003\u0002",
    "\u0002\u0002\u0a2b\u0a2d\u0005b2\u0002\u0a2c\u0a2b\u0003\u0002\u0002",
    "\u0002\u0a2c\u0a2d\u0003\u0002\u0002\u0002\u0a2d\u0a2e\u0003\u0002\u0002",
    "\u0002\u0a2e\u0a32\u0005\u03b2\u01da\u0002\u0a2f\u0a31\u0005d3\u0002",
    "\u0a30\u0a2f\u0003\u0002\u0002\u0002\u0a31\u0a34\u0003\u0002\u0002\u0002",
    "\u0a32\u0a30\u0003\u0002\u0002\u0002\u0a32\u0a33\u0003\u0002\u0002\u0002",
    "\u0a33\u0a4f\u0003\u0002\u0002\u0002\u0a34\u0a32\u0003\u0002\u0002\u0002",
    "\u0a35\u0a37\u0007\u001e\u0002\u0002\u0a36\u0a38\u0005\u0376\u01bc\u0002",
    "\u0a37\u0a36\u0003\u0002\u0002\u0002\u0a37\u0a38\u0003\u0002\u0002\u0002",
    "\u0a38\u0a3a\u0003\u0002\u0002\u0002\u0a39\u0a35\u0003\u0002\u0002\u0002",
    "\u0a39\u0a3a\u0003\u0002\u0002\u0002\u0a3a\u0a3b\u0003\u0002\u0002\u0002",
    "\u0a3b\u0a3c\u0007=\u0002\u0002\u0a3c\u0a3e\u0007R\u0002\u0002\u0a3d",
    "\u0a3f\u0005\u0376\u01bc\u0002\u0a3e\u0a3d\u0003\u0002\u0002\u0002\u0a3e",
    "\u0a3f\u0003\u0002\u0002\u0002\u0a3f\u0a40\u0003\u0002\u0002\u0002\u0a40",
    "\u0a41\u0005\u03b2\u01da\u0002\u0a41\u0a42\u0005\u00b2Z\u0002\u0a42",
    "\u0a4f\u0003\u0002\u0002\u0002\u0a43\u0a45\u0007\u001e\u0002\u0002\u0a44",
    "\u0a46\u0005\u0376\u01bc\u0002\u0a45\u0a44\u0003\u0002\u0002\u0002\u0a45",
    "\u0a46\u0003\u0002\u0002\u0002\u0a46\u0a48\u0003\u0002\u0002\u0002\u0a47",
    "\u0a43\u0003\u0002\u0002\u0002\u0a47\u0a48\u0003\u0002\u0002\u0002\u0a48",
    "\u0a49\u0003\u0002\u0002\u0002\u0a49\u0a4a\u0007\u001a\u0002\u0002\u0a4a",
    "\u0a4b\u0007\u0360\u0002\u0002\u0a4b\u0a4c\u0005\u03f8\u01fd\u0002\u0a4c",
    "\u0a4d\u0007\u0361\u0002\u0002\u0a4d\u0a4f\u0003\u0002\u0002\u0002\u0a4e",
    "\u0a0d\u0003\u0002\u0002\u0002\u0a4e\u0a22\u0003\u0002\u0002\u0002\u0a4e",
    "\u0a39\u0003\u0002\u0002\u0002\u0a4e\u0a47\u0003\u0002\u0002\u0002\u0a4f",
    "\u00af\u0003\u0002\u0002\u0002\u0a50\u0a51\u0007\u001e\u0002\u0002\u0a51",
    "\u0a53\u0005\u0376\u01bc\u0002\u0a52\u0a50\u0003\u0002\u0002\u0002\u0a52",
    "\u0a53\u0003\u0002\u0002\u0002\u0a53\u0a54\u0003\u0002\u0002\u0002\u0a54",
    "\u0a55\u0007=\u0002\u0002\u0a55\u0a56\u0007R\u0002\u0002\u0a56\u0a57",
    "\u0007\u0360\u0002\u0002\u0a57\u0a58\u0005\u03a4\u01d3\u0002\u0a58\u0a59",
    "\u0007\u0361\u0002\u0002\u0a59\u0a5a\u0007y\u0002\u0002\u0a5a\u0a5b",
    "\u0005\u0342\u01a2\u0002\u0a5b\u0a5c\u0007\u0360\u0002\u0002\u0a5c\u0a5d",
    "\u0005\u03a4\u01d3\u0002\u0a5d\u0a5e\u0007\u0361\u0002\u0002\u0a5e\u0a5f",
    "\u0005\u0088E\u0002\u0a5f\u0a6c\u0003\u0002\u0002\u0002\u0a60\u0a61",
    "\u0007\u001e\u0002\u0002\u0a61\u0a63\u0005\u0376\u01bc\u0002\u0a62\u0a60",
    "\u0003\u0002\u0002\u0002\u0a62\u0a63\u0003\u0002\u0002\u0002\u0a63\u0a64",
    "\u0003\u0002\u0002\u0002\u0a64\u0a65\u0007s\u0002\u0002\u0a65\u0a66",
    "\u0007R\u0002\u0002\u0a66\u0a67\u0007\u0360\u0002\u0002\u0a67\u0a68",
    "\u0005\u03a4\u01d3\u0002\u0a68\u0a69\u0007\u0361\u0002\u0002\u0a69\u0a6a",
    "\u0005\u0088E\u0002\u0a6a\u0a6c\u0003\u0002\u0002\u0002\u0a6b\u0a52",
    "\u0003\u0002\u0002\u0002\u0a6b\u0a62\u0003\u0002\u0002\u0002\u0a6c\u00b1",
    "\u0003\u0002\u0002\u0002\u0a6d\u0a6e\u0007y\u0002\u0002\u0a6e\u0a70",
    "\u0005\u0342\u01a2\u0002\u0a6f\u0a71\u0005\u03b2\u01da\u0002\u0a70\u0a6f",
    "\u0003\u0002\u0002\u0002\u0a70\u0a71\u0003\u0002\u0002\u0002\u0a71\u0a74",
    "\u0003\u0002\u0002\u0002\u0a72\u0a73\u0007b\u0002\u0002\u0a73\u0a75",
    "\t\u001a\u0002\u0002\u0a74\u0a72\u0003\u0002\u0002\u0002\u0a74\u0a75",
    "\u0003\u0002\u0002\u0002\u0a75\u0a77\u0003\u0002\u0002\u0002\u0a76\u0a78",
    "\u0005\u00b4[\u0002\u0a77\u0a76\u0003\u0002\u0002\u0002\u0a77\u0a78",
    "\u0003\u0002\u0002\u0002\u0a78\u00b3\u0003\u0002\u0002\u0002\u0a79\u0a7a",
    "\u0007i\u0002\u0002\u0a7a\u0a7b\u0007*\u0002\u0002\u0a7b\u0a7f\u0005",
    "\u00b6\\\u0002\u0a7c\u0a7d\u0007i\u0002\u0002\u0a7d\u0a7e\u0007\u00a2",
    "\u0002\u0002\u0a7e\u0a80\u0005\u00b6\\\u0002\u0a7f\u0a7c\u0003\u0002",
    "\u0002\u0002\u0a7f\u0a80\u0003\u0002\u0002\u0002\u0a80\u0a8a\u0003\u0002",
    "\u0002\u0002\u0a81\u0a82\u0007i\u0002\u0002\u0a82\u0a83\u0007\u00a2",
    "\u0002\u0002\u0a83\u0a87\u0005\u00b6\\\u0002\u0a84\u0a85\u0007i\u0002",
    "\u0002\u0a85\u0a86\u0007*\u0002\u0002\u0a86\u0a88\u0005\u00b6\\\u0002",
    "\u0a87\u0a84\u0003\u0002\u0002\u0002\u0a87\u0a88\u0003\u0002\u0002\u0002",
    "\u0a88\u0a8a\u0003\u0002\u0002\u0002\u0a89\u0a79\u0003\u0002\u0002\u0002",
    "\u0a89\u0a81\u0003\u0002\u0002\u0002\u0a8a\u00b5\u0003\u0002\u0002\u0002",
    "\u0a8b\u0a92\u0007\u0080\u0002\u0002\u0a8c\u0a92\u0007\u0015\u0002\u0002",
    "\u0a8d\u0a8e\u0007\u0088\u0002\u0002\u0a8e\u0a92\u0007h\u0002\u0002",
    "\u0a8f\u0a90\u0007\u0253\u0002\u0002\u0a90\u0a92\u0007\u01ab\u0002\u0002",
    "\u0a91\u0a8b\u0003\u0002\u0002\u0002\u0a91\u0a8c\u0003\u0002\u0002\u0002",
    "\u0a91\u0a8d\u0003\u0002\u0002\u0002\u0a91\u0a8f\u0003\u0002\u0002\u0002",
    "\u0a92\u00b7\u0003\u0002\u0002\u0002\u0a93\u0a95\t\u0019\u0002\u0002",
    "\u0a94\u0a96\u0005\u0376\u01bc\u0002\u0a95\u0a94\u0003\u0002\u0002\u0002",
    "\u0a95\u0a96\u0003\u0002\u0002\u0002\u0a96\u0a98\u0003\u0002\u0002\u0002",
    "\u0a97\u0a99\u0005b2\u0002\u0a98\u0a97\u0003\u0002\u0002\u0002\u0a98",
    "\u0a99\u0003\u0002\u0002\u0002\u0a99\u0a9a\u0003\u0002\u0002\u0002\u0a9a",
    "\u0a9e\u0005\u03b2\u01da\u0002\u0a9b\u0a9d\u0005d3\u0002\u0a9c\u0a9b",
    "\u0003\u0002\u0002\u0002\u0a9d\u0aa0\u0003\u0002\u0002\u0002\u0a9e\u0a9c",
    "\u0003\u0002\u0002\u0002\u0a9e\u0a9f\u0003\u0002\u0002\u0002\u0a9f\u0ab0",
    "\u0003\u0002\u0002\u0002\u0aa0\u0a9e\u0003\u0002\u0002\u0002\u0aa1\u0aa3",
    "\t\u001b\u0002\u0002\u0aa2\u0aa4\t\u0019\u0002\u0002\u0aa3\u0aa2\u0003",
    "\u0002\u0002\u0002\u0aa3\u0aa4\u0003\u0002\u0002\u0002\u0aa4\u0aa6\u0003",
    "\u0002\u0002\u0002\u0aa5\u0aa7\u0005\u0376\u01bc\u0002\u0aa6\u0aa5\u0003",
    "\u0002\u0002\u0002\u0aa6\u0aa7\u0003\u0002\u0002\u0002\u0aa7\u0aa8\u0003",
    "\u0002\u0002\u0002\u0aa8\u0aac\u0005\u03b2\u01da\u0002\u0aa9\u0aab\u0005",
    "d3\u0002\u0aaa\u0aa9\u0003\u0002\u0002\u0002\u0aab\u0aae\u0003\u0002",
    "\u0002\u0002\u0aac\u0aaa\u0003\u0002\u0002\u0002\u0aac\u0aad\u0003\u0002",
    "\u0002\u0002\u0aad\u0ab0\u0003\u0002\u0002\u0002\u0aae\u0aac\u0003\u0002",
    "\u0002\u0002\u0aaf\u0a93\u0003\u0002\u0002\u0002\u0aaf\u0aa1\u0003\u0002",
    "\u0002\u0002\u0ab0\u00b9\u0003\u0002\u0002\u0002\u0ab1\u0ab3\u0007\u01ec",
    "\u0002\u0002\u0ab2\u0ab4\u0007\u0355\u0002\u0002\u0ab3\u0ab2\u0003\u0002",
    "\u0002\u0002\u0ab3\u0ab4\u0003\u0002\u0002\u0002\u0ab4\u0ab5\u0003\u0002",
    "\u0002\u0002\u0ab5\u0b3f\u0005\u036c\u01b7\u0002\u0ab6\u0ab8\u0007\u01b4",
    "\u0002\u0002\u0ab7\u0ab9\u0007\u0355\u0002\u0002\u0ab8\u0ab7\u0003\u0002",
    "\u0002\u0002\u0ab8\u0ab9\u0003\u0002\u0002\u0002\u0ab9\u0aba\u0003\u0002",
    "\u0002\u0002\u0aba\u0b3f\u0005\u0382\u01c2\u0002\u0abb\u0abd\u0007\u01b5",
    "\u0002\u0002\u0abc\u0abe\u0007\u0355\u0002\u0002\u0abd\u0abc\u0003\u0002",
    "\u0002\u0002\u0abd\u0abe\u0003\u0002\u0002\u0002\u0abe\u0abf\u0003\u0002",
    "\u0002\u0002\u0abf\u0b3f\u0005\u0382\u01c2\u0002\u0ac0\u0ac2\u0007(",
    "\u0002\u0002\u0ac1\u0ac0\u0003\u0002\u0002\u0002\u0ac1\u0ac2\u0003\u0002",
    "\u0002\u0002\u0ac2\u0ac6\u0003\u0002\u0002\u0002\u0ac3\u0ac4\u0007\u0019",
    "\u0002\u0002\u0ac4\u0ac7\u0007\u0088\u0002\u0002\u0ac5\u0ac7\u0007\u033d",
    "\u0002\u0002\u0ac6\u0ac3\u0003\u0002\u0002\u0002\u0ac6\u0ac5\u0003\u0002",
    "\u0002\u0002\u0ac7\u0ac9\u0003\u0002\u0002\u0002\u0ac8\u0aca\u0007\u0355",
    "\u0002\u0002\u0ac9\u0ac8\u0003\u0002\u0002\u0002\u0ac9\u0aca\u0003\u0002",
    "\u0002\u0002\u0aca\u0acb\u0003\u0002\u0002\u0002\u0acb\u0b3f\u0005\u0368",
    "\u01b5\u0002\u0acc\u0ace\t\u001c\u0002\u0002\u0acd\u0acf\u0007\u0355",
    "\u0002\u0002\u0ace\u0acd\u0003\u0002\u0002\u0002\u0ace\u0acf\u0003\u0002",
    "\u0002\u0002\u0acf\u0ad0\u0003\u0002\u0002\u0002\u0ad0\u0b3f\t\u001d",
    "\u0002\u0002\u0ad1\u0ad3\u0007(\u0002\u0002\u0ad2\u0ad1\u0003\u0002",
    "\u0002\u0002\u0ad2\u0ad3\u0003\u0002\u0002\u0002\u0ad3\u0ad4\u0003\u0002",
    "\u0002\u0002\u0ad4\u0ad6\u0007\u001b\u0002\u0002\u0ad5\u0ad7\u0007\u0355",
    "\u0002\u0002\u0ad6\u0ad5\u0003\u0002\u0002\u0002\u0ad6\u0ad7\u0003\u0002",
    "\u0002\u0002\u0ad7\u0ad8\u0003\u0002\u0002\u0002\u0ad8\u0b3f\u0005\u036a",
    "\u01b6\u0002\u0ad9\u0adb\u0007\u01cb\u0002\u0002\u0ada\u0adc\u0007\u0355",
    "\u0002\u0002\u0adb\u0ada\u0003\u0002\u0002\u0002\u0adb\u0adc\u0003\u0002",
    "\u0002\u0002\u0adc\u0add\u0003\u0002\u0002\u0002\u0add\u0b3f\u0007\u0372",
    "\u0002\u0002\u0ade\u0ae0\u0007\u01d0\u0002\u0002\u0adf\u0ae1\u0007\u0355",
    "\u0002\u0002\u0ae0\u0adf\u0003\u0002\u0002\u0002\u0ae0\u0ae1\u0003\u0002",
    "\u0002\u0002\u0ae1\u0ae2\u0003\u0002\u0002\u0002\u0ae2\u0b3f\t\u001e",
    "\u0002\u0002\u0ae3\u0ae5\u0007\u01d2\u0002\u0002\u0ae4\u0ae6\u0007\u0355",
    "\u0002\u0002\u0ae5\u0ae4\u0003\u0002\u0002\u0002\u0ae5\u0ae6\u0003\u0002",
    "\u0002\u0002\u0ae6\u0ae7\u0003\u0002\u0002\u0002\u0ae7\u0b3f\u0007\u0372",
    "\u0002\u0002\u0ae8\u0ae9\u0007\u01d9\u0002\u0002\u0ae9\u0aeb\u0007\u01e0",
    "\u0002\u0002\u0aea\u0aec\u0007\u0355\u0002\u0002\u0aeb\u0aea\u0003\u0002",
    "\u0002\u0002\u0aeb\u0aec\u0003\u0002\u0002\u0002\u0aec\u0aed\u0003\u0002",
    "\u0002\u0002\u0aed\u0b3f\u0007\u0372\u0002\u0002\u0aee\u0af0\u0007\u01de",
    "\u0002\u0002\u0aef\u0af1\u0007\u0355\u0002\u0002\u0af0\u0aef\u0003\u0002",
    "\u0002\u0002\u0af0\u0af1\u0003\u0002\u0002\u0002\u0af1\u0af2\u0003\u0002",
    "\u0002\u0002\u0af2\u0b3f\t\u001d\u0002\u0002\u0af3\u0af5\u0007\u01e9",
    "\u0002\u0002\u0af4\u0af6\u0007\u0355\u0002\u0002\u0af5\u0af4\u0003\u0002",
    "\u0002\u0002\u0af5\u0af6\u0003\u0002\u0002\u0002\u0af6\u0af7\u0003\u0002",
    "\u0002\u0002\u0af7\u0b3f\u0007\u0372\u0002\u0002\u0af8\u0af9\u0007H",
    "\u0002\u0002\u0af9\u0afb\u0007\u01e0\u0002\u0002\u0afa\u0afc\u0007\u0355",
    "\u0002\u0002\u0afb\u0afa\u0003\u0002\u0002\u0002\u0afb\u0afc\u0003\u0002",
    "\u0002\u0002\u0afc\u0afd\u0003\u0002\u0002\u0002\u0afd\u0b3f\u0007\u0372",
    "\u0002\u0002\u0afe\u0b00\u0007\u0216\u0002\u0002\u0aff\u0b01\u0007\u0355",
    "\u0002\u0002\u0b00\u0aff\u0003\u0002\u0002\u0002\u0b00\u0b01\u0003\u0002",
    "\u0002\u0002\u0b01\u0b02\u0003\u0002\u0002\u0002\u0b02\u0b3f\t\u001f",
    "\u0002\u0002\u0b03\u0b05\u0007\u0220\u0002\u0002\u0b04\u0b06\u0007\u0355",
    "\u0002\u0002\u0b05\u0b04\u0003\u0002\u0002\u0002\u0b05\u0b06\u0003\u0002",
    "\u0002\u0002\u0b06\u0b07\u0003\u0002\u0002\u0002\u0b07\u0b3f\u0005\u0384",
    "\u01c3\u0002\u0b08\u0b0a\u0007\u0241\u0002\u0002\u0b09\u0b0b\u0007\u0355",
    "\u0002\u0002\u0b0a\u0b09\u0003\u0002\u0002\u0002\u0b0a\u0b0b\u0003\u0002",
    "\u0002\u0002\u0b0b\u0b0c\u0003\u0002\u0002\u0002\u0b0c\u0b3f\u0005\u0382",
    "\u01c2\u0002\u0b0d\u0b0f\u0007\u0249\u0002\u0002\u0b0e\u0b10\u0007\u0355",
    "\u0002\u0002\u0b0f\u0b0e\u0003\u0002\u0002\u0002\u0b0f\u0b10\u0003\u0002",
    "\u0002\u0002\u0b10\u0b11\u0003\u0002\u0002\u0002\u0b11\u0b3f\u0005\u0382",
    "\u01c2\u0002\u0b12\u0b14\u0007\u0261\u0002\u0002\u0b13\u0b15\u0007\u0355",
    "\u0002\u0002\u0b14\u0b13\u0003\u0002\u0002\u0002\u0b14\u0b15\u0003\u0002",
    "\u0002\u0002\u0b15\u0b16\u0003\u0002\u0002\u0002\u0b16\u0b3f\t \u0002",
    "\u0002\u0b17\u0b19\u0007\u0267\u0002\u0002\u0b18\u0b1a\u0007\u0355\u0002",
    "\u0002\u0b19\u0b18\u0003\u0002\u0002\u0002\u0b19\u0b1a\u0003\u0002\u0002",
    "\u0002\u0b1a\u0b1b\u0003\u0002\u0002\u0002\u0b1b\u0b3f\u0007\u0372\u0002",
    "\u0002\u0b1c\u0b1e\u0007\u0292\u0002\u0002\u0b1d\u0b1f\u0007\u0355\u0002",
    "\u0002\u0b1e\u0b1d\u0003\u0002\u0002\u0002\u0b1e\u0b1f\u0003\u0002\u0002",
    "\u0002\u0b1f\u0b20\u0003\u0002\u0002\u0002\u0b20\u0b3f\t!\u0002\u0002",
    "\u0b21\u0b23\u0007\u02ad\u0002\u0002\u0b22\u0b24\u0007\u0355\u0002\u0002",
    "\u0b23\u0b22\u0003\u0002\u0002\u0002\u0b23\u0b24\u0003\u0002\u0002\u0002",
    "\u0b24\u0b25\u0003\u0002\u0002\u0002\u0b25\u0b3f\t \u0002\u0002\u0b26",
    "\u0b28\u0007\u02ae\u0002\u0002\u0b27\u0b29\u0007\u0355\u0002\u0002\u0b28",
    "\u0b27\u0003\u0002\u0002\u0002\u0b28\u0b29\u0003\u0002\u0002\u0002\u0b29",
    "\u0b2a\u0003\u0002\u0002\u0002\u0b2a\u0b3f\t \u0002\u0002\u0b2b\u0b2d",
    "\u0007\u02af\u0002\u0002\u0b2c\u0b2e\u0007\u0355\u0002\u0002\u0b2d\u0b2c",
    "\u0003\u0002\u0002\u0002\u0b2d\u0b2e\u0003\u0002\u0002\u0002\u0b2e\u0b2f",
    "\u0003\u0002\u0002\u0002\u0b2f\u0b3f\u0005\u0382\u01c2\u0002\u0b30\u0b31",
    "\u0007\u02bb\u0002\u0002\u0b31\u0b33\u0005\u0376\u01bc\u0002\u0b32\u0b34",
    "\u0005\u00bc_\u0002\u0b33\u0b32\u0003\u0002\u0002\u0002\u0b33\u0b34",
    "\u0003\u0002\u0002\u0002\u0b34\u0b3f\u0003\u0002\u0002\u0002\u0b35\u0b3f",
    "\u0005\u00bc_\u0002\u0b36\u0b38\u0007\u009e\u0002\u0002\u0b37\u0b39",
    "\u0007\u0355\u0002\u0002\u0b38\u0b37\u0003\u0002\u0002\u0002\u0b38\u0b39",
    "\u0003\u0002\u0002\u0002\u0b39\u0b3a\u0003\u0002\u0002\u0002\u0b3a\u0b3b",
    "\u0007\u0360\u0002\u0002\u0b3b\u0b3c\u0005\u03b0\u01d9\u0002\u0b3c\u0b3d",
    "\u0007\u0361\u0002\u0002\u0b3d\u0b3f\u0003\u0002\u0002\u0002\u0b3e\u0ab1",
    "\u0003\u0002\u0002\u0002\u0b3e\u0ab6\u0003\u0002\u0002\u0002\u0b3e\u0abb",
    "\u0003\u0002\u0002\u0002\u0b3e\u0ac1\u0003\u0002\u0002\u0002\u0b3e\u0acc",
    "\u0003\u0002\u0002\u0002\u0b3e\u0ad2\u0003\u0002\u0002\u0002\u0b3e\u0ad9",
    "\u0003\u0002\u0002\u0002\u0b3e\u0ade\u0003\u0002\u0002\u0002\u0b3e\u0ae3",
    "\u0003\u0002\u0002\u0002\u0b3e\u0ae8\u0003\u0002\u0002\u0002\u0b3e\u0aee",
    "\u0003\u0002\u0002\u0002\u0b3e\u0af3\u0003\u0002\u0002\u0002\u0b3e\u0af8",
    "\u0003\u0002\u0002\u0002\u0b3e\u0afe\u0003\u0002\u0002\u0002\u0b3e\u0b03",
    "\u0003\u0002\u0002\u0002\u0b3e\u0b08\u0003\u0002\u0002\u0002\u0b3e\u0b0d",
    "\u0003\u0002\u0002\u0002\u0b3e\u0b12\u0003\u0002\u0002\u0002\u0b3e\u0b17",
    "\u0003\u0002\u0002\u0002\u0b3e\u0b1c\u0003\u0002\u0002\u0002\u0b3e\u0b21",
    "\u0003\u0002\u0002\u0002\u0b3e\u0b26\u0003\u0002\u0002\u0002\u0b3e\u0b2b",
    "\u0003\u0002\u0002\u0002\u0b3e\u0b30\u0003\u0002\u0002\u0002\u0b3e\u0b35",
    "\u0003\u0002\u0002\u0002\u0b3e\u0b36\u0003\u0002\u0002\u0002\u0b3f\u00bb",
    "\u0003\u0002\u0002\u0002\u0b40\u0b41\u0007\u02b2\u0002\u0002\u0b41\u0b42",
    "\t\u0013\u0002\u0002\u0b42\u00bd\u0003\u0002\u0002\u0002\u0b43\u0b44",
    "\u0007r\u0002\u0002\u0b44\u0b45\u0007\u0013\u0002\u0002\u0b45\u0b48",
    "\u0005\u00c0a\u0002\u0b46\u0b47\u0007\u0266\u0002\u0002\u0b47\u0b49",
    "\u0005\u0382\u01c2\u0002\u0b48\u0b46\u0003\u0002\u0002\u0002\u0b48\u0b49",
    "\u0003\u0002\u0002\u0002\u0b49\u0b51\u0003\u0002\u0002\u0002\u0b4a\u0b4b",
    "\u0007\u02b6\u0002\u0002\u0b4b\u0b4c\u0007\u0013\u0002\u0002\u0b4c\u0b4f",
    "\u0005\u00c2b\u0002\u0b4d\u0b4e\u0007\u02b7\u0002\u0002\u0b4e\u0b50",
    "\u0005\u0382\u01c2\u0002\u0b4f\u0b4d\u0003\u0002\u0002\u0002\u0b4f\u0b50",
    "\u0003\u0002\u0002\u0002\u0b50\u0b52\u0003\u0002\u0002\u0002\u0b51\u0b4a",
    "\u0003\u0002\u0002\u0002\u0b51\u0b52\u0003\u0002\u0002\u0002\u0b52\u0b5e",
    "\u0003\u0002\u0002\u0002\u0b53\u0b54\u0007\u0360\u0002\u0002\u0b54\u0b59",
    "\u0005\u00c4c\u0002\u0b55\u0b56\u0007\u0364\u0002\u0002\u0b56\u0b58",
    "\u0005\u00c4c\u0002\u0b57\u0b55\u0003\u0002\u0002\u0002\u0b58\u0b5b",
    "\u0003\u0002\u0002\u0002\u0b59\u0b57\u0003\u0002\u0002\u0002\u0b59\u0b5a",
    "\u0003\u0002\u0002\u0002\u0b5a\u0b5c\u0003\u0002\u0002\u0002\u0b5b\u0b59",
    "\u0003\u0002\u0002\u0002\u0b5c\u0b5d\u0007\u0361\u0002\u0002\u0b5d\u0b5f",
    "\u0003\u0002\u0002\u0002\u0b5e\u0b53\u0003\u0002\u0002\u0002\u0b5e\u0b5f",
    "\u0003\u0002\u0002\u0002\u0b5f\u00bf\u0003\u0002\u0002\u0002\u0b60\u0b62",
    "\u0007Z\u0002\u0002\u0b61\u0b60\u0003\u0002\u0002\u0002\u0b61\u0b62",
    "\u0003\u0002\u0002\u0002\u0b62\u0b63\u0003\u0002\u0002\u0002\u0b63\u0b64",
    "\u0007\u020c\u0002\u0002\u0b64\u0b65\u0007\u0360\u0002\u0002\u0b65\u0b66",
    "\u0005\u03f8\u01fd\u0002\u0b66\u0b67\u0007\u0361\u0002\u0002\u0b67\u0b8e",
    "\u0003\u0002\u0002\u0002\u0b68\u0b6a\u0007Z\u0002\u0002\u0b69\u0b68",
    "\u0003\u0002\u0002\u0002\u0b69\u0b6a\u0003\u0002\u0002\u0002\u0b6a\u0b6b",
    "\u0003\u0002\u0002\u0002\u0b6b\u0b6f\u0007R\u0002\u0002\u0b6c\u0b6d",
    "\u0007\u01ae\u0002\u0002\u0b6d\u0b6e\u0007\u0355\u0002\u0002\u0b6e\u0b70",
    "\t\"\u0002\u0002\u0b6f\u0b6c\u0003\u0002\u0002\u0002\u0b6f\u0b70\u0003",
    "\u0002\u0002\u0002\u0b70\u0b71\u0003\u0002\u0002\u0002\u0b71\u0b72\u0007",
    "\u0360\u0002\u0002\u0b72\u0b73\u0005\u03a4\u01d3\u0002\u0b73\u0b74\u0007",
    "\u0361\u0002\u0002\u0b74\u0b8e\u0003\u0002\u0002\u0002\u0b75\u0b7f\u0007",
    "v\u0002\u0002\u0b76\u0b77\u0007\u0360\u0002\u0002\u0b77\u0b78\u0005",
    "\u03f8\u01fd\u0002\u0b78\u0b79\u0007\u0361\u0002\u0002\u0b79\u0b80\u0003",
    "\u0002\u0002\u0002\u0b7a\u0b7b\u0007\u01c9\u0002\u0002\u0b7b\u0b7c\u0007",
    "\u0360\u0002\u0002\u0b7c\u0b7d\u0005\u03a4\u01d3\u0002\u0b7d\u0b7e\u0007",
    "\u0361\u0002\u0002\u0b7e\u0b80\u0003\u0002\u0002\u0002\u0b7f\u0b76\u0003",
    "\u0002\u0002\u0002\u0b7f\u0b7a\u0003\u0002\u0002\u0002\u0b80\u0b8e\u0003",
    "\u0002\u0002\u0002\u0b81\u0b8b\u0007\u0226\u0002\u0002\u0b82\u0b83\u0007",
    "\u0360\u0002\u0002\u0b83\u0b84\u0005\u03f8\u01fd\u0002\u0b84\u0b85\u0007",
    "\u0361\u0002\u0002\u0b85\u0b8c\u0003\u0002\u0002\u0002\u0b86\u0b87\u0007",
    "\u01c9\u0002\u0002\u0b87\u0b88\u0007\u0360\u0002\u0002\u0b88\u0b89\u0005",
    "\u03a4\u01d3\u0002\u0b89\u0b8a\u0007\u0361\u0002\u0002\u0b8a\u0b8c\u0003",
    "\u0002\u0002\u0002\u0b8b\u0b82\u0003\u0002\u0002\u0002\u0b8b\u0b86\u0003",
    "\u0002\u0002\u0002\u0b8c\u0b8e\u0003\u0002\u0002\u0002\u0b8d\u0b61\u0003",
    "\u0002\u0002\u0002\u0b8d\u0b69\u0003\u0002\u0002\u0002\u0b8d\u0b75\u0003",
    "\u0002\u0002\u0002\u0b8d\u0b81\u0003\u0002\u0002\u0002\u0b8e\u00c1\u0003",
    "\u0002\u0002\u0002\u0b8f\u0b91\u0007Z\u0002\u0002\u0b90\u0b8f\u0003",
    "\u0002\u0002\u0002\u0b90\u0b91\u0003\u0002\u0002\u0002\u0b91\u0b92\u0003",
    "\u0002\u0002\u0002\u0b92\u0b93\u0007\u020c\u0002\u0002\u0b93\u0b94\u0007",
    "\u0360\u0002\u0002\u0b94\u0b95\u0005\u03f8\u01fd\u0002\u0b95\u0b96\u0007",
    "\u0361\u0002\u0002\u0b96\u0ba5\u0003\u0002\u0002\u0002\u0b97\u0b99\u0007",
    "Z\u0002\u0002\u0b98\u0b97\u0003\u0002\u0002\u0002\u0b98\u0b99\u0003",
    "\u0002\u0002\u0002\u0b99\u0b9a\u0003\u0002\u0002\u0002\u0b9a\u0b9e\u0007",
    "R\u0002\u0002\u0b9b\u0b9c\u0007\u01ae\u0002\u0002\u0b9c\u0b9d\u0007",
    "\u0355\u0002\u0002\u0b9d\u0b9f\t\"\u0002\u0002\u0b9e\u0b9b\u0003\u0002",
    "\u0002\u0002\u0b9e\u0b9f\u0003\u0002\u0002\u0002\u0b9f\u0ba0\u0003\u0002",
    "\u0002\u0002\u0ba0\u0ba1\u0007\u0360\u0002\u0002\u0ba1\u0ba2\u0005\u03a4",
    "\u01d3\u0002\u0ba2\u0ba3\u0007\u0361\u0002\u0002\u0ba3\u0ba5\u0003\u0002",
    "\u0002\u0002\u0ba4\u0b90\u0003\u0002\u0002\u0002\u0ba4\u0b98\u0003\u0002",
    "\u0002\u0002\u0ba5\u00c3\u0003\u0002\u0002\u0002\u0ba6\u0ba7\u0007r",
    "\u0002\u0002\u0ba7\u0ba8\u0005\u0376\u01bc\u0002\u0ba8\u0ba9\u0007\u00a6",
    "\u0002\u0002\u0ba9\u0baa\u0007\u0224\u0002\u0002\u0baa\u0bab\u0007\u02be",
    "\u0002\u0002\u0bab\u0bac\u0007\u0360\u0002\u0002\u0bac\u0bb1\u0005\u00c6",
    "d\u0002\u0bad\u0bae\u0007\u0364\u0002\u0002\u0bae\u0bb0\u0005\u00c6",
    "d\u0002\u0baf\u0bad\u0003\u0002\u0002\u0002\u0bb0\u0bb3\u0003\u0002",
    "\u0002\u0002\u0bb1\u0baf\u0003\u0002\u0002\u0002\u0bb1\u0bb2\u0003\u0002",
    "\u0002\u0002\u0bb2\u0bb4\u0003\u0002\u0002\u0002\u0bb3\u0bb1\u0003\u0002",
    "\u0002\u0002\u0bb4\u0bb8\u0007\u0361\u0002\u0002\u0bb5\u0bb7\u0005\u00cc",
    "g\u0002\u0bb6\u0bb5\u0003\u0002\u0002\u0002\u0bb7\u0bba\u0003\u0002",
    "\u0002\u0002\u0bb8\u0bb6\u0003\u0002\u0002\u0002\u0bb8\u0bb9\u0003\u0002",
    "\u0002\u0002\u0bb9\u0bc3\u0003\u0002\u0002\u0002\u0bba\u0bb8\u0003\u0002",
    "\u0002\u0002\u0bbb\u0bc0\u0005\u00caf\u0002\u0bbc\u0bbd\u0007\u0364",
    "\u0002\u0002\u0bbd\u0bbf\u0005\u00caf\u0002\u0bbe\u0bbc\u0003\u0002",
    "\u0002\u0002\u0bbf\u0bc2\u0003\u0002\u0002\u0002\u0bc0\u0bbe\u0003\u0002",
    "\u0002\u0002\u0bc0\u0bc1\u0003\u0002\u0002\u0002\u0bc1\u0bc4\u0003\u0002",
    "\u0002\u0002\u0bc2\u0bc0\u0003\u0002\u0002\u0002\u0bc3\u0bbb\u0003\u0002",
    "\u0002\u0002\u0bc3\u0bc4\u0003\u0002\u0002\u0002\u0bc4\u0c2a\u0003\u0002",
    "\u0002\u0002\u0bc5\u0bc6\u0007r\u0002\u0002\u0bc6\u0bc7\u0005\u0376",
    "\u01bc\u0002\u0bc7\u0bc8\u0007\u00a6\u0002\u0002\u0bc8\u0bc9\u0007\u0224",
    "\u0002\u0002\u0bc9\u0bca\u0007\u02be\u0002\u0002\u0bca\u0bce\u0005\u00c6",
    "d\u0002\u0bcb\u0bcd\u0005\u00ccg\u0002\u0bcc\u0bcb\u0003\u0002\u0002",
    "\u0002\u0bcd\u0bd0\u0003\u0002\u0002\u0002\u0bce\u0bcc\u0003\u0002\u0002",
    "\u0002\u0bce\u0bcf\u0003\u0002\u0002\u0002\u0bcf\u0bd9\u0003\u0002\u0002",
    "\u0002\u0bd0\u0bce\u0003\u0002\u0002\u0002\u0bd1\u0bd6\u0005\u00caf",
    "\u0002\u0bd2\u0bd3\u0007\u0364\u0002\u0002\u0bd3\u0bd5\u0005\u00caf",
    "\u0002\u0bd4\u0bd2\u0003\u0002\u0002\u0002\u0bd5\u0bd8\u0003\u0002\u0002",
    "\u0002\u0bd6\u0bd4\u0003\u0002\u0002\u0002\u0bd6\u0bd7\u0003\u0002\u0002",
    "\u0002\u0bd7\u0bda\u0003\u0002\u0002\u0002\u0bd8\u0bd6\u0003\u0002\u0002",
    "\u0002\u0bd9\u0bd1\u0003\u0002\u0002\u0002\u0bd9\u0bda\u0003\u0002\u0002",
    "\u0002\u0bda\u0c2a\u0003\u0002\u0002\u0002\u0bdb\u0bdc\u0007r\u0002",
    "\u0002\u0bdc\u0bdd\u0005\u0376\u01bc\u0002\u0bdd\u0bde\u0007\u00a6\u0002",
    "\u0002\u0bde\u0bdf\u0007G\u0002\u0002\u0bdf\u0be0\u0007\u0360\u0002",
    "\u0002\u0be0\u0be5\u0005\u00c6d\u0002\u0be1\u0be2\u0007\u0364\u0002",
    "\u0002\u0be2\u0be4\u0005\u00c6d\u0002\u0be3\u0be1\u0003\u0002\u0002",
    "\u0002\u0be4\u0be7\u0003\u0002\u0002\u0002\u0be5\u0be3\u0003\u0002\u0002",
    "\u0002\u0be5\u0be6\u0003\u0002\u0002\u0002\u0be6\u0be8\u0003\u0002\u0002",
    "\u0002\u0be7\u0be5\u0003\u0002\u0002\u0002\u0be8\u0bec\u0007\u0361\u0002",
    "\u0002\u0be9\u0beb\u0005\u00ccg\u0002\u0bea\u0be9\u0003\u0002\u0002",
    "\u0002\u0beb\u0bee\u0003\u0002\u0002\u0002\u0bec\u0bea\u0003\u0002\u0002",
    "\u0002\u0bec\u0bed\u0003\u0002\u0002\u0002\u0bed\u0bf7\u0003\u0002\u0002",
    "\u0002\u0bee\u0bec\u0003\u0002\u0002\u0002\u0bef\u0bf4\u0005\u00caf",
    "\u0002\u0bf0\u0bf1\u0007\u0364\u0002\u0002\u0bf1\u0bf3\u0005\u00caf",
    "\u0002\u0bf2\u0bf0\u0003\u0002\u0002\u0002\u0bf3\u0bf6\u0003\u0002\u0002",
    "\u0002\u0bf4\u0bf2\u0003\u0002\u0002\u0002\u0bf4\u0bf5\u0003\u0002\u0002",
    "\u0002\u0bf5\u0bf8\u0003\u0002\u0002\u0002\u0bf6\u0bf4\u0003\u0002\u0002",
    "\u0002\u0bf7\u0bef\u0003\u0002\u0002\u0002\u0bf7\u0bf8\u0003\u0002\u0002",
    "\u0002\u0bf8\u0c2a\u0003\u0002\u0002\u0002\u0bf9\u0bfa\u0007r\u0002",
    "\u0002\u0bfa\u0bfb\u0005\u0376\u01bc\u0002\u0bfb\u0bfc\u0007\u00a6\u0002",
    "\u0002\u0bfc\u0bfd\u0007G\u0002\u0002\u0bfd\u0bfe\u0007\u0360\u0002",
    "\u0002\u0bfe\u0c03\u0005\u00c8e\u0002\u0bff\u0c00\u0007\u0364\u0002",
    "\u0002\u0c00\u0c02\u0005\u00c8e\u0002\u0c01\u0bff\u0003\u0002\u0002",
    "\u0002\u0c02\u0c05\u0003\u0002\u0002\u0002\u0c03\u0c01\u0003\u0002\u0002",
    "\u0002\u0c03\u0c04\u0003\u0002\u0002\u0002\u0c04\u0c06\u0003\u0002\u0002",
    "\u0002\u0c05\u0c03\u0003\u0002\u0002\u0002\u0c06\u0c0a\u0007\u0361\u0002",
    "\u0002\u0c07\u0c09\u0005\u00ccg\u0002\u0c08\u0c07\u0003\u0002\u0002",
    "\u0002\u0c09\u0c0c\u0003\u0002\u0002\u0002\u0c0a\u0c08\u0003\u0002\u0002",
    "\u0002\u0c0a\u0c0b\u0003\u0002\u0002\u0002\u0c0b\u0c15\u0003\u0002\u0002",
    "\u0002\u0c0c\u0c0a\u0003\u0002\u0002\u0002\u0c0d\u0c12\u0005\u00caf",
    "\u0002\u0c0e\u0c0f\u0007\u0364\u0002\u0002\u0c0f\u0c11\u0005\u00caf",
    "\u0002\u0c10\u0c0e\u0003\u0002\u0002\u0002\u0c11\u0c14\u0003\u0002\u0002",
    "\u0002\u0c12\u0c10\u0003\u0002\u0002\u0002\u0c12\u0c13\u0003\u0002\u0002",
    "\u0002\u0c13\u0c16\u0003\u0002\u0002\u0002\u0c14\u0c12\u0003\u0002\u0002",
    "\u0002\u0c15\u0c0d\u0003\u0002\u0002\u0002\u0c15\u0c16\u0003\u0002\u0002",
    "\u0002\u0c16\u0c2a\u0003\u0002\u0002\u0002\u0c17\u0c18\u0007r\u0002",
    "\u0002\u0c18\u0c1c\u0005\u0376\u01bc\u0002\u0c19\u0c1b\u0005\u00ccg",
    "\u0002\u0c1a\u0c19\u0003\u0002\u0002\u0002\u0c1b\u0c1e\u0003\u0002\u0002",
    "\u0002\u0c1c\u0c1a\u0003\u0002\u0002\u0002\u0c1c\u0c1d\u0003\u0002\u0002",
    "\u0002\u0c1d\u0c27\u0003\u0002\u0002\u0002\u0c1e\u0c1c\u0003\u0002\u0002",
    "\u0002\u0c1f\u0c24\u0005\u00caf\u0002\u0c20\u0c21\u0007\u0364\u0002",
    "\u0002\u0c21\u0c23\u0005\u00caf\u0002\u0c22\u0c20\u0003\u0002\u0002",
    "\u0002\u0c23\u0c26\u0003\u0002\u0002\u0002\u0c24\u0c22\u0003\u0002\u0002",
    "\u0002\u0c24\u0c25\u0003\u0002\u0002\u0002\u0c25\u0c28\u0003\u0002\u0002",
    "\u0002\u0c26\u0c24\u0003\u0002\u0002\u0002\u0c27\u0c1f\u0003\u0002\u0002",
    "\u0002\u0c27\u0c28\u0003\u0002\u0002\u0002\u0c28\u0c2a\u0003\u0002\u0002",
    "\u0002\u0c29\u0ba6\u0003\u0002\u0002\u0002\u0c29\u0bc5\u0003\u0002\u0002",
    "\u0002\u0c29\u0bdb\u0003\u0002\u0002\u0002\u0c29\u0bf9\u0003\u0002\u0002",
    "\u0002\u0c29\u0c17\u0003\u0002\u0002\u0002\u0c2a\u00c5\u0003\u0002\u0002",
    "\u0002\u0c2b\u0c2f\u0005\u0390\u01c9\u0002\u0c2c\u0c2f\u0005\u03f8\u01fd",
    "\u0002\u0c2d\u0c2f\u0007c\u0002\u0002\u0c2e\u0c2b\u0003\u0002\u0002",
    "\u0002\u0c2e\u0c2c\u0003\u0002\u0002\u0002\u0c2e\u0c2d\u0003\u0002\u0002",
    "\u0002\u0c2f\u00c7\u0003\u0002\u0002\u0002\u0c30\u0c31\u0007\u0360\u0002",
    "\u0002\u0c31\u0c34\u0005\u00c6d\u0002\u0c32\u0c33\u0007\u0364\u0002",
    "\u0002\u0c33\u0c35\u0005\u00c6d\u0002\u0c34\u0c32\u0003\u0002\u0002",
    "\u0002\u0c35\u0c36\u0003\u0002\u0002\u0002\u0c36\u0c34\u0003\u0002\u0002",
    "\u0002\u0c36\u0c37\u0003\u0002\u0002\u0002\u0c37\u0c38\u0003\u0002\u0002",
    "\u0002\u0c38\u0c39\u0007\u0361\u0002\u0002\u0c39\u00c9\u0003\u0002\u0002",
    "\u0002\u0c3a\u0c3b\u0007\u02b6\u0002\u0002\u0c3b\u0c3f\u0005\u0376\u01bc",
    "\u0002\u0c3c\u0c3e\u0005\u00ccg\u0002\u0c3d\u0c3c\u0003\u0002\u0002",
    "\u0002\u0c3e\u0c41\u0003\u0002\u0002\u0002\u0c3f\u0c3d\u0003\u0002\u0002",
    "\u0002\u0c3f\u0c40\u0003\u0002\u0002\u0002\u0c40\u00cb\u0003\u0002\u0002",
    "\u0002\u0c41\u0c3f\u0003\u0002\u0002\u0002\u0c42\u0c44\u0007\u02b2\u0002",
    "\u0002\u0c43\u0c42\u0003\u0002\u0002\u0002\u0c43\u0c44\u0003\u0002\u0002",
    "\u0002\u0c44\u0c45\u0003\u0002\u0002\u0002\u0c45\u0c47\u0007\u01ec\u0002",
    "\u0002\u0c46\u0c48\u0007\u0355\u0002\u0002\u0c47\u0c46\u0003\u0002\u0002",
    "\u0002\u0c47\u0c48\u0003\u0002\u0002\u0002\u0c48\u0c49\u0003\u0002\u0002",
    "\u0002\u0c49\u0c70\u0005\u036c\u01b7\u0002\u0c4a\u0c4c\u0007\u01cb\u0002",
    "\u0002\u0c4b\u0c4d\u0007\u0355\u0002\u0002\u0c4c\u0c4b\u0003\u0002\u0002",
    "\u0002\u0c4c\u0c4d\u0003\u0002\u0002\u0002\u0c4d\u0c4e\u0003\u0002\u0002",
    "\u0002\u0c4e\u0c70\u0007\u0372\u0002\u0002\u0c4f\u0c50\u0007\u01d9\u0002",
    "\u0002\u0c50\u0c52\u0007\u01e0\u0002\u0002\u0c51\u0c53\u0007\u0355\u0002",
    "\u0002\u0c52\u0c51\u0003\u0002\u0002\u0002\u0c52\u0c53\u0003\u0002\u0002",
    "\u0002\u0c53\u0c54\u0003\u0002\u0002\u0002\u0c54\u0c70\u0007\u0372\u0002",
    "\u0002\u0c55\u0c56\u0007H\u0002\u0002\u0c56\u0c58\u0007\u01e0\u0002",
    "\u0002\u0c57\u0c59\u0007\u0355\u0002\u0002\u0c58\u0c57\u0003\u0002\u0002",
    "\u0002\u0c58\u0c59\u0003\u0002\u0002\u0002\u0c59\u0c5a\u0003\u0002\u0002",
    "\u0002\u0c5a\u0c70\u0007\u0372\u0002\u0002\u0c5b\u0c5d\u0007\u0241\u0002",
    "\u0002\u0c5c\u0c5e\u0007\u0355\u0002\u0002\u0c5d\u0c5c\u0003\u0002\u0002",
    "\u0002\u0c5d\u0c5e\u0003\u0002\u0002\u0002\u0c5e\u0c5f\u0003\u0002\u0002",
    "\u0002\u0c5f\u0c70\u0005\u0382\u01c2\u0002\u0c60\u0c62\u0007\u0249\u0002",
    "\u0002\u0c61\u0c63\u0007\u0355\u0002\u0002\u0c62\u0c61\u0003\u0002\u0002",
    "\u0002\u0c62\u0c63\u0003\u0002\u0002\u0002\u0c63\u0c64\u0003\u0002\u0002",
    "\u0002\u0c64\u0c70\u0005\u0382\u01c2\u0002\u0c65\u0c67\u0007\u02bb\u0002",
    "\u0002\u0c66\u0c68\u0007\u0355\u0002\u0002\u0c67\u0c66\u0003\u0002\u0002",
    "\u0002\u0c67\u0c68\u0003\u0002\u0002\u0002\u0c68\u0c69\u0003\u0002\u0002",
    "\u0002\u0c69\u0c70\u0005\u0376\u01bc\u0002\u0c6a\u0c6c\u0007\u0254\u0002",
    "\u0002\u0c6b\u0c6d\u0007\u0355\u0002\u0002\u0c6c\u0c6b\u0003\u0002\u0002",
    "\u0002\u0c6c\u0c6d\u0003\u0002\u0002\u0002\u0c6d\u0c6e\u0003\u0002\u0002",
    "\u0002\u0c6e\u0c70\u0005\u0376\u01bc\u0002\u0c6f\u0c43\u0003\u0002\u0002",
    "\u0002\u0c6f\u0c4a\u0003\u0002\u0002\u0002\u0c6f\u0c4f\u0003\u0002\u0002",
    "\u0002\u0c6f\u0c55\u0003\u0002\u0002\u0002\u0c6f\u0c5b\u0003\u0002\u0002",
    "\u0002\u0c6f\u0c60\u0003\u0002\u0002\u0002\u0c6f\u0c65\u0003\u0002\u0002",
    "\u0002\u0c6f\u0c6a\u0003\u0002\u0002\u0002\u0c70\u00cd\u0003\u0002\u0002",
    "\u0002\u0c71\u0c72\u0007\n\u0002\u0002\u0c72\u0c73\t\u0002\u0002\u0002",
    "\u0c73\u0c74\u0005\u0424\u0213\u0002\u0c74\u0c75\u0005\u00e2r\u0002",
    "\u0c75\u0c93\u0003\u0002\u0002\u0002\u0c76\u0c77\u0006h$\u0002\u0c77",
    "\u0c78\u0007\n\u0002\u0002\u0c78\u0c7a\t\u0002\u0002\u0002\u0c79\u0c7b",
    "\u0005D#\u0002\u0c7a\u0c79\u0003\u0002\u0002\u0002\u0c7b\u0c7c\u0003",
    "\u0002\u0002\u0002\u0c7c\u0c7a\u0003\u0002\u0002\u0002\u0c7c\u0c7d\u0003",
    "\u0002\u0002\u0002\u0c7d\u0c93\u0003\u0002\u0002\u0002\u0c7e\u0c7f\u0006",
    "h%\u0002\u0c7f\u0c80\u0007\n\u0002\u0002\u0c80\u0c81\t\u0002\u0002\u0002",
    "\u0c81\u0c83\u0005\u0424\u0213\u0002\u0c82\u0c84\u0005D#\u0002\u0c83",
    "\u0c82\u0003\u0002\u0002\u0002\u0c84\u0c85\u0003\u0002\u0002\u0002\u0c85",
    "\u0c83\u0003\u0002\u0002\u0002\u0c85\u0c86\u0003\u0002\u0002\u0002\u0c86",
    "\u0c93\u0003\u0002\u0002\u0002\u0c87\u0c88\u0007\n\u0002\u0002\u0c88",
    "\u0c89\t\u0002\u0002\u0002\u0c89\u0c8a\u0005\u0424\u0213\u0002\u0c8a",
    "\u0c8b\bh\u0001\u0002\u0c8b\u0c93\u0003\u0002\u0002\u0002\u0c8c\u0c8d",
    "\u0007\n\u0002\u0002\u0c8d\u0c8e\t\u0002\u0002\u0002\u0c8e\u0c8f\u0005",
    "\u0424\u0213\u0002\u0c8f\u0c90\u0005\u00e8u\u0002\u0c90\u0c91\bh\u0001",
    "\u0002\u0c91\u0c93\u0003\u0002\u0002\u0002\u0c92\u0c71\u0003\u0002\u0002",
    "\u0002\u0c92\u0c76\u0003\u0002\u0002\u0002\u0c92\u0c7e\u0003\u0002\u0002",
    "\u0002\u0c92\u0c87\u0003\u0002\u0002\u0002\u0c92\u0c8c\u0003\u0002\u0002",
    "\u0002\u0c93\u00cf\u0003\u0002\u0002\u0002\u0c94\u0c96\u0007\n\u0002",
    "\u0002\u0c95\u0c97\u0005V,\u0002\u0c96\u0c95\u0003\u0002\u0002\u0002",
    "\u0c96\u0c97\u0003\u0002\u0002\u0002\u0c97\u0c98\u0003\u0002\u0002\u0002",
    "\u0c98\u0c99\u0007\u01f2\u0002\u0002\u0c99\u0c9d\u0005\u0340\u01a1\u0002",
    "\u0c9a\u0c9b\u0007i\u0002\u0002\u0c9b\u0c9c\u0007\u0294\u0002\u0002",
    "\u0c9c\u0c9e\u0005X-\u0002\u0c9d\u0c9a\u0003\u0002\u0002\u0002\u0c9d",
    "\u0c9e\u0003\u0002\u0002\u0002\u0c9e\u0ca5\u0003\u0002\u0002\u0002\u0c9f",
    "\u0ca0\u0007i\u0002\u0002\u0ca0\u0ca2\u0007\u01ce\u0002\u0002\u0ca1",
    "\u0ca3\u0007f\u0002\u0002\u0ca2\u0ca1\u0003\u0002\u0002\u0002\u0ca2",
    "\u0ca3\u0003\u0002\u0002\u0002\u0ca3\u0ca4\u0003\u0002\u0002\u0002\u0ca4",
    "\u0ca6\u0007\u026f\u0002\u0002\u0ca5\u0c9f\u0003\u0002\u0002\u0002\u0ca5",
    "\u0ca6\u0003\u0002\u0002\u0002\u0ca6\u0caa\u0003\u0002\u0002\u0002\u0ca7",
    "\u0ca8\u0007|\u0002\u0002\u0ca8\u0ca9\u0007\u0099\u0002\u0002\u0ca9",
    "\u0cab\u0005\u0340\u01a1\u0002\u0caa\u0ca7\u0003\u0002\u0002\u0002\u0caa",
    "\u0cab\u0003\u0002\u0002\u0002\u0cab\u0cad\u0003\u0002\u0002\u0002\u0cac",
    "\u0cae\u0005`1\u0002\u0cad\u0cac\u0003\u0002\u0002\u0002\u0cad\u0cae",
    "\u0003\u0002\u0002\u0002\u0cae\u0cb1\u0003\u0002\u0002\u0002\u0caf\u0cb0",
    "\u0007\u01cb\u0002\u0002\u0cb0\u0cb2\u0007\u0372\u0002\u0002\u0cb1\u0caf",
    "\u0003\u0002\u0002\u0002\u0cb1\u0cb2\u0003\u0002\u0002\u0002\u0cb2\u0cb5",
    "\u0003\u0002\u0002\u0002\u0cb3\u0cb4\u0007\u01e4\u0002\u0002\u0cb4\u0cb6",
    "\u0005\u0250\u0129\u0002\u0cb5\u0cb3\u0003\u0002\u0002\u0002\u0cb5\u0cb6",
    "\u0003\u0002\u0002\u0002\u0cb6\u00d1\u0003\u0002\u0002\u0002\u0cb7\u0cb8",
    "\u0007\n\u0002\u0002\u0cb8\u0cb9\u0007\u0206\u0002\u0002\u0cb9\u0cbd",
    "\u0005\u0340\u01a1\u0002\u0cba\u0cbc\u0005l7\u0002\u0cbb\u0cba\u0003",
    "\u0002\u0002\u0002\u0cbc\u0cbf\u0003\u0002\u0002\u0002\u0cbd\u0cbb\u0003",
    "\u0002\u0002\u0002\u0cbd\u0cbe\u0003\u0002\u0002\u0002\u0cbe\u00d3\u0003",
    "\u0002\u0002\u0002\u0cbf\u0cbd\u0003\u0002\u0002\u0002\u0cc0\u0cc1\u0007",
    "\n\u0002\u0002\u0cc1\u0cc2\u0007\u0218\u0002\u0002\u0cc2\u0cc3\u0007",
    "\u028f\u0002\u0002\u0cc3\u0cc4\u0007\u0328\u0002\u0002\u0cc4\u0cc5\u0007",
    "\u022a\u0002\u0002\u0cc5\u0cc6\u0007R\u0002\u0002\u0cc6\u00d5\u0003",
    "\u0002\u0002\u0002\u0cc7\u0cc8\u0007\n\u0002\u0002\u0cc8\u0cc9\u0007",
    "\u0228\u0002\u0002\u0cc9\u0cca\u0007B\u0002\u0002\u0cca\u0ccb\u0005",
    "\u0376\u01bc\u0002\u0ccb\u0ccc\u0007\b\u0002\u0002\u0ccc\u0ccd\u0007",
    "\u02c4\u0002\u0002\u0ccd\u0cd3\u0007\u0372\u0002\u0002\u0cce\u0cd0\u0007",
    "\u0214\u0002\u0002\u0ccf\u0cd1\u0007\u0355\u0002\u0002\u0cd0\u0ccf\u0003",
    "\u0002\u0002\u0002\u0cd0\u0cd1\u0003\u0002\u0002\u0002\u0cd1\u0cd2\u0003",
    "\u0002\u0002\u0002\u0cd2\u0cd4\u0005\u0384\u01c3\u0002\u0cd3\u0cce\u0003",
    "\u0002\u0002\u0002\u0cd3\u0cd4\u0003\u0002\u0002\u0002\u0cd4\u0cd6\u0003",
    "\u0002\u0002\u0002\u0cd5\u0cd7\u0007\u02d2\u0002\u0002\u0cd6\u0cd5\u0003",
    "\u0002\u0002\u0002\u0cd6\u0cd7\u0003\u0002\u0002\u0002\u0cd7\u0cd8\u0003",
    "\u0002\u0002\u0002\u0cd8\u0cda\u0007\u01ec\u0002\u0002\u0cd9\u0cdb\u0007",
    "\u0355\u0002\u0002\u0cda\u0cd9\u0003\u0002\u0002\u0002\u0cda\u0cdb\u0003",
    "\u0002\u0002\u0002\u0cdb\u0cdc\u0003\u0002\u0002\u0002\u0cdc\u0cdd\u0005",
    "\u036c\u01b7\u0002\u0cdd\u00d7\u0003\u0002\u0002\u0002\u0cde\u0cdf\u0007",
    "\n\u0002\u0002\u0cdf\u0ce0\u0007t\u0002\u0002\u0ce0\u0ce4\u0005\u0340",
    "\u01a1\u0002\u0ce1\u0ce3\u0005l7\u0002\u0ce2\u0ce1\u0003\u0002\u0002",
    "\u0002\u0ce3\u0ce6\u0003\u0002\u0002\u0002\u0ce4\u0ce2\u0003\u0002\u0002",
    "\u0002\u0ce4\u0ce5\u0003\u0002\u0002\u0002\u0ce5\u00d9\u0003\u0002\u0002",
    "\u0002\u0ce6\u0ce4\u0003\u0002\u0002\u0002\u0ce7\u0ce8\u0007\n\u0002",
    "\u0002\u0ce8\u0ce9\u0007\u0296\u0002\u0002\u0ce9\u0cea\u0005\u0376\u01bc",
    "\u0002\u0cea\u0ceb\u0007\u025f\u0002\u0002\u0ceb\u0cec\u0007\u0360\u0002",
    "\u0002\u0cec\u0cf1\u0005n8\u0002\u0ced\u0cee\u0007\u0364\u0002\u0002",
    "\u0cee\u0cf0\u0005n8\u0002\u0cef\u0ced\u0003\u0002\u0002\u0002\u0cf0",
    "\u0cf3\u0003\u0002\u0002\u0002\u0cf1\u0cef\u0003\u0002\u0002\u0002\u0cf1",
    "\u0cf2\u0003\u0002\u0002\u0002\u0cf2\u0cf4\u0003\u0002\u0002\u0002\u0cf3",
    "\u0cf1\u0003\u0002\u0002\u0002\u0cf4\u0cf5\u0007\u0361\u0002\u0002\u0cf5",
    "\u00db\u0003\u0002\u0002\u0002\u0cf6\u0cf7\u0007\n\u0002\u0002\u0cf7",
    "\u0cf8\u0005\u00eav\u0002\u0cf8\u0cf9\u0005\u0342\u01a2\u0002\u0cf9",
    "\u0cfa\u0005\u00ecw\u0002\u0cfa\u00dd\u0003\u0002\u0002\u0002\u0cfb",
    "\u0cfc\u0007\n\u0002\u0002\u0cfc\u0cfd\u0007\u02bb\u0002\u0002\u0cfd",
    "\u0cfe\u0005\u0376\u01bc\u0002\u0cfe\u0cff\t#\u0002\u0002\u0cff\u0d00",
    "\u0007\u01da\u0002\u0002\u0d00\u0d04\u0007\u0372\u0002\u0002\u0d01\u0d02",
    "\u0007\u0214\u0002\u0002\u0d02\u0d03\u0007\u0355\u0002\u0002\u0d03\u0d05",
    "\u0005\u0384\u01c3\u0002\u0d04\u0d01\u0003\u0002\u0002\u0002\u0d04\u0d05",
    "\u0003\u0002\u0002\u0002\u0d05\u0d07\u0003\u0002\u0002\u0002\u0d06\u0d08",
    "\u0007\u02d2\u0002\u0002\u0d07\u0d06\u0003\u0002\u0002\u0002\u0d07\u0d08",
    "\u0003\u0002\u0002\u0002\u0d08\u0d09\u0003\u0002\u0002\u0002\u0d09\u0d0b",
    "\u0007\u01ec\u0002\u0002\u0d0a\u0d0c\u0007\u0355\u0002\u0002\u0d0b\u0d0a",
    "\u0003\u0002\u0002\u0002\u0d0b\u0d0c\u0003\u0002\u0002\u0002\u0d0c\u0d0d",
    "\u0003\u0002\u0002\u0002\u0d0d\u0d0e\u0005\u036c\u01b7\u0002\u0d0e\u00df",
    "\u0003\u0002\u0002\u0002\u0d0f\u0d13\u0007\n\u0002\u0002\u0d10\u0d11",
    "\u0007\u01ae\u0002\u0002\u0d11\u0d12\u0007\u0355\u0002\u0002\u0d12\u0d14",
    "\t\u000b\u0002\u0002\u0d13\u0d10\u0003\u0002\u0002\u0002\u0d13\u0d14",
    "\u0003\u0002\u0002\u0002\u0d14\u0d16\u0003\u0002\u0002\u0002\u0d15\u0d17",
    "\u0005V,\u0002\u0d16\u0d15\u0003\u0002\u0002\u0002\u0d16\u0d17\u0003",
    "\u0002\u0002\u0002\u0d17\u0d1b\u0003\u0002\u0002\u0002\u0d18\u0d19\u0007",
    "\u008c\u0002\u0002\u0d19\u0d1a\u0007\u0295\u0002\u0002\u0d1a\u0d1c\t",
    "\f\u0002\u0002\u0d1b\u0d18\u0003\u0002\u0002\u0002\u0d1b\u0d1c\u0003",
    "\u0002\u0002\u0002\u0d1c\u0d1d\u0003\u0002\u0002\u0002\u0d1d\u0d1e\u0007",
    "\u02d0\u0002\u0002\u0d1e\u0d23\u0005\u0340\u01a1\u0002\u0d1f\u0d20\u0007",
    "\u0360\u0002\u0002\u0d20\u0d21\u0005\u03a4\u01d3\u0002\u0d21\u0d22\u0007",
    "\u0361\u0002\u0002\u0d22\u0d24\u0003\u0002\u0002\u0002\u0d23\u0d1f\u0003",
    "\u0002\u0002\u0002\u0d23\u0d24\u0003\u0002\u0002\u0002\u0d24\u0d25\u0003",
    "\u0002\u0002\u0002\u0d25\u0d26\u0007\u000e\u0002\u0002\u0d26\u0d2d\u0005",
    "\u0148\u00a5\u0002\u0d27\u0d29\u0007\u00aa\u0002\u0002\u0d28\u0d2a\t",
    "\r\u0002\u0002\u0d29\u0d28\u0003\u0002\u0002\u0002\u0d29\u0d2a\u0003",
    "\u0002\u0002\u0002\u0d2a\u0d2b\u0003\u0002\u0002\u0002\u0d2b\u0d2c\u0007",
    "\u001a\u0002\u0002\u0d2c\u0d2e\u0007k\u0002\u0002\u0d2d\u0d27\u0003",
    "\u0002\u0002\u0002\u0d2d\u0d2e\u0003\u0002\u0002\u0002\u0d2e\u00e1\u0003",
    "\u0002\u0002\u0002\u0d2f\u0d30\u0006r&\u0002\u0d30\u0d31\u0007\u02c9",
    "\u0002\u0002\u0d31\u0d32\u0007\u01d9\u0002\u0002\u0d32\u0d33\u0007\u01e0",
    "\u0002\u0002\u0d33\u0d3a\u0007\u024e\u0002\u0002\u0d34\u0d37\u0006r",
    "\'\u0002\u0d35\u0d38\u0005\u00e4s\u0002\u0d36\u0d38\u0005\u00e6t\u0002",
    "\u0d37\u0d35\u0003\u0002\u0002\u0002\u0d37\u0d36\u0003\u0002\u0002\u0002",
    "\u0d38\u0d3a\u0003\u0002\u0002\u0002\u0d39\u0d2f\u0003\u0002\u0002\u0002",
    "\u0d39\u0d34\u0003\u0002\u0002\u0002\u0d3a\u00e3\u0003\u0002\u0002\u0002",
    "\u0d3b\u0d3c\u0007\u0088\u0002\u0002\u0d3c\u0d3d\u0007\u00c7\u0002\u0002",
    "\u0d3d\u0d3e\u0007\u0360\u0002\u0002\u0d3e\u0d3f\u0005L\'\u0002\u0d3f",
    "\u0d40\u0007\u0361\u0002\u0002\u0d40\u00e5\u0003\u0002\u0002\u0002\u0d41",
    "\u0d42\u0007\u0088\u0002\u0002\u0d42\u0d43\u0007\u0260\u0002\u0002\u0d43",
    "\u0d44\t$\u0002\u0002\u0d44\u0d45\u0005\u0376\u01bc\u0002\u0d45\u00e7",
    "\u0003\u0002\u0002\u0002\u0d46\u0d47\u0005\u042c\u0217\u0002\u0d47\u00e9",
    "\u0003\u0002\u0002\u0002\u0d48\u0d4a\u0006v(\u0002\u0d49\u0d4b\t\u0003",
    "\u0002\u0002\u0d4a\u0d49\u0003\u0002\u0002\u0002\u0d4a\u0d4b\u0003\u0002",
    "\u0002\u0002\u0d4b\u0d4d\u0003\u0002\u0002\u0002\u0d4c\u0d4e\u0007F",
    "\u0002\u0002\u0d4d\u0d4c\u0003\u0002\u0002\u0002\u0d4d\u0d4e\u0003\u0002",
    "\u0002\u0002\u0d4e\u0d4f\u0003\u0002\u0002\u0002\u0d4f\u0d53\u0007\u0096",
    "\u0002\u0002\u0d50\u0d51\u0006v)\u0002\u0d51\u0d53\u0007\u0096\u0002",
    "\u0002\u0d52\u0d48\u0003\u0002\u0002\u0002\u0d52\u0d50\u0003\u0002\u0002",
    "\u0002\u0d53\u00eb\u0003\u0002\u0002\u0002\u0d54\u0d55\u0006w*\u0002",
    "\u0d55\u0d59\u0005\u00eex\u0002\u0d56\u0d57\u0006w+\u0002\u0d57\u0d59",
    "\u0005\u00f2z\u0002\u0d58\u0d54\u0003\u0002\u0002\u0002\u0d58\u0d56",
    "\u0003\u0002\u0002\u0002\u0d59\u00ed\u0003\u0002\u0002\u0002\u0d5a\u0d5f",
    "\u0005\u00f0y\u0002\u0d5b\u0d5c\u0007\u0364\u0002\u0002\u0d5c\u0d5e",
    "\u0005\u00f0y\u0002\u0d5d\u0d5b\u0003\u0002\u0002\u0002\u0d5e\u0d61",
    "\u0003\u0002\u0002\u0002\u0d5f\u0d5d\u0003\u0002\u0002\u0002\u0d5f\u0d60",
    "\u0003\u0002\u0002\u0002\u0d60\u0d63\u0003\u0002\u0002\u0002\u0d61\u0d5f",
    "\u0003\u0002\u0002\u0002\u0d62\u0d5a\u0003\u0002\u0002\u0002\u0d62\u0d63",
    "\u0003\u0002\u0002\u0002\u0d63\u0d65\u0003\u0002\u0002\u0002\u0d64\u0d66",
    "\u0005\u00be`\u0002\u0d65\u0d64\u0003\u0002\u0002\u0002\u0d65\u0d66",
    "\u0003\u0002\u0002\u0002\u0d66\u00ef\u0003\u0002\u0002\u0002\u0d67\u0d6e",
    "\u0005\u00ba^\u0002\u0d68\u0d6a\u0007\u0364\u0002\u0002\u0d69\u0d68",
    "\u0003\u0002\u0002\u0002\u0d69\u0d6a\u0003\u0002\u0002\u0002\u0d6a\u0d6b",
    "\u0003\u0002\u0002\u0002\u0d6b\u0d6d\u0005\u00ba^\u0002\u0d6c\u0d69",
    "\u0003\u0002\u0002\u0002\u0d6d\u0d70\u0003\u0002\u0002\u0002\u0d6e\u0d6c",
    "\u0003\u0002\u0002\u0002\u0d6e\u0d6f\u0003\u0002\u0002\u0002\u0d6f\u0ec5",
    "\u0003\u0002\u0002\u0002\u0d70\u0d6e\u0003\u0002\u0002\u0002\u0d71\u0d73",
    "\u0007\b\u0002\u0002\u0d72\u0d74\u0007\u001c\u0002\u0002\u0d73\u0d72",
    "\u0003\u0002\u0002\u0002\u0d73\u0d74\u0003\u0002\u0002\u0002\u0d74\u0d75",
    "\u0003\u0002\u0002\u0002\u0d75\u0d76\u0005\u0376\u01bc\u0002\u0d76\u0d7a",
    "\u0005\u0080A\u0002\u0d77\u0d7b\u0007\u0200\u0002\u0002\u0d78\u0d79",
    "\u0007\u01ac\u0002\u0002\u0d79\u0d7b\u0005\u0376\u01bc\u0002\u0d7a\u0d77",
    "\u0003\u0002\u0002\u0002\u0d7a\u0d78\u0003\u0002\u0002\u0002\u0d7a\u0d7b",
    "\u0003\u0002\u0002\u0002\u0d7b\u0ec5\u0003\u0002\u0002\u0002\u0d7c\u0d7e",
    "\u0007\b\u0002\u0002\u0d7d\u0d7f\u0007\u001c\u0002\u0002\u0d7e\u0d7d",
    "\u0003\u0002\u0002\u0002\u0d7e\u0d7f\u0003\u0002\u0002\u0002\u0d7f\u0d80",
    "\u0003\u0002\u0002\u0002\u0d80\u0d81\u0007\u0360\u0002\u0002\u0d81\u0d82",
    "\u0005\u0376\u01bc\u0002\u0d82\u0d89\u0005\u0080A\u0002\u0d83\u0d84",
    "\u0007\u0364\u0002\u0002\u0d84\u0d85\u0005\u0376\u01bc\u0002\u0d85\u0d86",
    "\u0005\u0080A\u0002\u0d86\u0d88\u0003\u0002\u0002\u0002\u0d87\u0d83",
    "\u0003\u0002\u0002\u0002\u0d88\u0d8b\u0003\u0002\u0002\u0002\u0d89\u0d87",
    "\u0003\u0002\u0002\u0002\u0d89\u0d8a\u0003\u0002\u0002\u0002\u0d8a\u0d8c",
    "\u0003\u0002\u0002\u0002\u0d8b\u0d89\u0003\u0002\u0002\u0002\u0d8c\u0d8d",
    "\u0007\u0361\u0002\u0002\u0d8d\u0ec5\u0003\u0002\u0002\u0002\u0d8e\u0d8f",
    "\u0007\b\u0002\u0002\u0d8f\u0d91\t\u0019\u0002\u0002\u0d90\u0d92\u0005",
    "\u0376\u01bc\u0002\u0d91\u0d90\u0003\u0002\u0002\u0002\u0d91\u0d92\u0003",
    "\u0002\u0002\u0002\u0d92\u0d94\u0003\u0002\u0002\u0002\u0d93\u0d95\u0005",
    "b2\u0002\u0d94\u0d93\u0003\u0002\u0002\u0002\u0d94\u0d95\u0003\u0002",
    "\u0002\u0002\u0d95\u0d96\u0003\u0002\u0002\u0002\u0d96\u0d9a\u0005\u03b2",
    "\u01da\u0002\u0d97\u0d99\u0005d3\u0002\u0d98\u0d97\u0003\u0002\u0002",
    "\u0002\u0d99\u0d9c\u0003\u0002\u0002\u0002\u0d9a\u0d98\u0003\u0002\u0002",
    "\u0002\u0d9a\u0d9b\u0003\u0002\u0002\u0002\u0d9b\u0ec5\u0003\u0002\u0002",
    "\u0002\u0d9c\u0d9a\u0003\u0002\u0002\u0002\u0d9d\u0da2\u0007\b\u0002",
    "\u0002\u0d9e\u0da0\u0007\u001e\u0002\u0002\u0d9f\u0da1\u0005\u0376\u01bc",
    "\u0002\u0da0\u0d9f\u0003\u0002\u0002\u0002\u0da0\u0da1\u0003\u0002\u0002",
    "\u0002\u0da1\u0da3\u0003\u0002\u0002\u0002\u0da2\u0d9e\u0003\u0002\u0002",
    "\u0002\u0da2\u0da3\u0003\u0002\u0002\u0002\u0da3\u0da4\u0003\u0002\u0002",
    "\u0002\u0da4\u0da5\u0007s\u0002\u0002\u0da5\u0da7\u0007R\u0002\u0002",
    "\u0da6\u0da8\u0005b2\u0002\u0da7\u0da6\u0003\u0002\u0002\u0002\u0da7",
    "\u0da8\u0003\u0002\u0002\u0002\u0da8\u0da9\u0003\u0002\u0002\u0002\u0da9",
    "\u0dad\u0005\u03b2\u01da\u0002\u0daa\u0dac\u0005d3\u0002\u0dab\u0daa",
    "\u0003\u0002\u0002\u0002\u0dac\u0daf\u0003\u0002\u0002\u0002\u0dad\u0dab",
    "\u0003\u0002\u0002\u0002\u0dad\u0dae\u0003\u0002\u0002\u0002\u0dae\u0ec5",
    "\u0003\u0002\u0002\u0002\u0daf\u0dad\u0003\u0002\u0002\u0002\u0db0\u0db5",
    "\u0007\b\u0002\u0002\u0db1\u0db3\u0007\u001e\u0002\u0002\u0db2\u0db4",
    "\u0005\u0376\u01bc\u0002\u0db3\u0db2\u0003\u0002\u0002\u0002\u0db3\u0db4",
    "\u0003\u0002\u0002\u0002\u0db4\u0db6\u0003\u0002\u0002\u0002\u0db5\u0db1",
    "\u0003\u0002\u0002\u0002\u0db5\u0db6\u0003\u0002\u0002\u0002\u0db6\u0db7",
    "\u0003\u0002\u0002\u0002\u0db7\u0db9\u0007\u009f\u0002\u0002\u0db8\u0dba",
    "\t\u0019\u0002\u0002\u0db9\u0db8\u0003\u0002\u0002\u0002\u0db9\u0dba",
    "\u0003\u0002\u0002\u0002\u0dba\u0dbc\u0003\u0002\u0002\u0002\u0dbb\u0dbd",
    "\u0005\u0376\u01bc\u0002\u0dbc\u0dbb\u0003\u0002\u0002\u0002\u0dbc\u0dbd",
    "\u0003\u0002\u0002\u0002\u0dbd\u0dbf\u0003\u0002\u0002\u0002\u0dbe\u0dc0",
    "\u0005b2\u0002\u0dbf\u0dbe\u0003\u0002\u0002\u0002\u0dbf\u0dc0\u0003",
    "\u0002\u0002\u0002\u0dc0\u0dc1\u0003\u0002\u0002\u0002\u0dc1\u0dc5\u0005",
    "\u03b2\u01da\u0002\u0dc2\u0dc4\u0005d3\u0002\u0dc3\u0dc2\u0003\u0002",
    "\u0002\u0002\u0dc4\u0dc7\u0003\u0002\u0002\u0002\u0dc5\u0dc3\u0003\u0002",
    "\u0002\u0002\u0dc5\u0dc6\u0003\u0002\u0002\u0002\u0dc6\u0ec5\u0003\u0002",
    "\u0002\u0002\u0dc7\u0dc5\u0003\u0002\u0002\u0002\u0dc8\u0dc9\u0007\b",
    "\u0002\u0002\u0dc9\u0dcb\t\u001b\u0002\u0002\u0dca\u0dcc\t\u0019\u0002",
    "\u0002\u0dcb\u0dca\u0003\u0002\u0002\u0002\u0dcb\u0dcc\u0003\u0002\u0002",
    "\u0002\u0dcc\u0dce\u0003\u0002\u0002\u0002\u0dcd\u0dcf\u0005\u0376\u01bc",
    "\u0002\u0dce\u0dcd\u0003\u0002\u0002\u0002\u0dce\u0dcf\u0003\u0002\u0002",
    "\u0002\u0dcf\u0dd0\u0003\u0002\u0002\u0002\u0dd0\u0dd4\u0005\u03b2\u01da",
    "\u0002\u0dd1\u0dd3\u0005d3\u0002\u0dd2\u0dd1\u0003\u0002\u0002\u0002",
    "\u0dd3\u0dd6\u0003\u0002\u0002\u0002\u0dd4\u0dd2\u0003\u0002\u0002\u0002",
    "\u0dd4\u0dd5\u0003\u0002\u0002\u0002\u0dd5\u0ec5\u0003\u0002\u0002\u0002",
    "\u0dd6\u0dd4\u0003\u0002\u0002\u0002\u0dd7\u0ddc\u0007\b\u0002\u0002",
    "\u0dd8\u0dda\u0007\u001e\u0002\u0002\u0dd9\u0ddb\u0005\u0376\u01bc\u0002",
    "\u0dda\u0dd9\u0003\u0002\u0002\u0002\u0dda\u0ddb\u0003\u0002\u0002\u0002",
    "\u0ddb\u0ddd\u0003\u0002\u0002\u0002\u0ddc\u0dd8\u0003\u0002\u0002\u0002",
    "\u0ddc\u0ddd\u0003\u0002\u0002\u0002\u0ddd\u0dde\u0003\u0002\u0002\u0002",
    "\u0dde\u0ddf\u0007=\u0002\u0002\u0ddf\u0de1\u0007R\u0002\u0002\u0de0",
    "\u0de2\u0005\u0376\u01bc\u0002\u0de1\u0de0\u0003\u0002\u0002\u0002\u0de1",
    "\u0de2\u0003\u0002\u0002\u0002\u0de2\u0de3\u0003\u0002\u0002\u0002\u0de3",
    "\u0de4\u0005\u03b2\u01da\u0002\u0de4\u0de5\u0005\u00b2Z\u0002\u0de5",
    "\u0ec5\u0003\u0002\u0002\u0002\u0de6\u0deb\u0007\b\u0002\u0002\u0de7",
    "\u0de9\u0007\u001e\u0002\u0002\u0de8\u0dea\u0005\u0376\u01bc\u0002\u0de9",
    "\u0de8\u0003\u0002\u0002\u0002\u0de9\u0dea\u0003\u0002\u0002\u0002\u0dea",
    "\u0dec\u0003\u0002\u0002\u0002\u0deb\u0de7\u0003\u0002\u0002\u0002\u0deb",
    "\u0dec\u0003\u0002\u0002\u0002\u0dec\u0ded\u0003\u0002\u0002\u0002\u0ded",
    "\u0dee\u0007\u001a\u0002\u0002\u0dee\u0def\u0007\u0360\u0002\u0002\u0def",
    "\u0df0\u0005\u03f8\u01fd\u0002\u0df0\u0df1\u0007\u0361\u0002\u0002\u0df1",
    "\u0ec5\u0003\u0002\u0002\u0002\u0df2\u0df4\u0007\u01ae\u0002\u0002\u0df3",
    "\u0df5\u0007\u0355\u0002\u0002\u0df4\u0df3\u0003\u0002\u0002\u0002\u0df4",
    "\u0df5\u0003\u0002\u0002\u0002\u0df5\u0df6\u0003\u0002\u0002\u0002\u0df6",
    "\u0ec5\t\u0005\u0002\u0002\u0df7\u0df9\u0007\n\u0002\u0002\u0df8\u0dfa",
    "\u0007\u001c\u0002\u0002\u0df9\u0df8\u0003\u0002\u0002\u0002\u0df9\u0dfa",
    "\u0003\u0002\u0002\u0002\u0dfa\u0dfb\u0003\u0002\u0002\u0002\u0dfb\u0e01",
    "\u0005\u0376\u01bc\u0002\u0dfc\u0dfd\u0007\u0088\u0002\u0002\u0dfd\u0dfe",
    "\u0007(\u0002\u0002\u0dfe\u0e02\u0005\u03be\u01e0\u0002\u0dff\u0e00",
    "\u00070\u0002\u0002\u0e00\u0e02\u0007(\u0002\u0002\u0e01\u0dfc\u0003",
    "\u0002\u0002\u0002\u0e01\u0dff\u0003\u0002\u0002\u0002\u0e02\u0ec5\u0003",
    "\u0002\u0002\u0002\u0e03\u0e05\u0007\u0018\u0002\u0002\u0e04\u0e06\u0007",
    "\u001c\u0002\u0002\u0e05\u0e04\u0003\u0002\u0002\u0002\u0e05\u0e06\u0003",
    "\u0002\u0002\u0002\u0e06\u0e07\u0003\u0002\u0002\u0002\u0e07\u0e08\u0005",
    "\u0376\u01bc\u0002\u0e08\u0e09\u0005\u0376\u01bc\u0002\u0e09\u0e0d\u0005",
    "\u0080A\u0002\u0e0a\u0e0e\u0007\u0200\u0002\u0002\u0e0b\u0e0c\u0007",
    "\u01ac\u0002\u0002\u0e0c\u0e0e\u0005\u0376\u01bc\u0002\u0e0d\u0e0a\u0003",
    "\u0002\u0002\u0002\u0e0d\u0e0b\u0003\u0002\u0002\u0002\u0e0d\u0e0e\u0003",
    "\u0002\u0002\u0002\u0e0e\u0ec5\u0003\u0002\u0002\u0002\u0e0f\u0e10\u0007",
    "|\u0002\u0002\u0e10\u0e11\u0007\u001c\u0002\u0002\u0e11\u0e12\u0005",
    "\u0376\u01bc\u0002\u0e12\u0e13\u0007\u0099\u0002\u0002\u0e13\u0e14\u0005",
    "\u0376\u01bc\u0002\u0e14\u0ec5\u0003\u0002\u0002\u0002\u0e15\u0e17\u0007",
    "]\u0002\u0002\u0e16\u0e18\u0007\u0355\u0002\u0002\u0e17\u0e16\u0003",
    "\u0002\u0002\u0002\u0e17\u0e18\u0003\u0002\u0002\u0002\u0e18\u0e19\u0003",
    "\u0002\u0002\u0002\u0e19\u0ec5\t\u0006\u0002\u0002\u0e1a\u0e1c\u0007",
    "\u024b\u0002\u0002\u0e1b\u0e1d\u0007\u001c\u0002\u0002\u0e1c\u0e1b\u0003",
    "\u0002\u0002\u0002\u0e1c\u0e1d\u0003\u0002\u0002\u0002\u0e1d\u0e1e\u0003",
    "\u0002\u0002\u0002\u0e1e\u0e1f\u0005\u0376\u01bc\u0002\u0e1f\u0e23\u0005",
    "\u0080A\u0002\u0e20\u0e24\u0007\u0200\u0002\u0002\u0e21\u0e22\u0007",
    "\u01ac\u0002\u0002\u0e22\u0e24\u0005\u0376\u01bc\u0002\u0e23\u0e20\u0003",
    "\u0002\u0002\u0002\u0e23\u0e21\u0003\u0002\u0002\u0002\u0e23\u0e24\u0003",
    "\u0002\u0002\u0002\u0e24\u0ec5\u0003\u0002\u0002\u0002\u0e25\u0e27\u0007",
    "0\u0002\u0002\u0e26\u0e28\u0007\u001c\u0002\u0002\u0e27\u0e26\u0003",
    "\u0002\u0002\u0002\u0e27\u0e28\u0003\u0002\u0002\u0002\u0e28\u0e29\u0003",
    "\u0002\u0002\u0002\u0e29\u0e2b\u0005\u0376\u01bc\u0002\u0e2a\u0e2c\u0007",
    "\u0080\u0002\u0002\u0e2b\u0e2a\u0003\u0002\u0002\u0002\u0e2b\u0e2c\u0003",
    "\u0002\u0002\u0002\u0e2c\u0ec5\u0003\u0002\u0002\u0002\u0e2d\u0e2e\u0007",
    "0\u0002\u0002\u0e2e\u0e2f\u0007s\u0002\u0002\u0e2f\u0ec5\u0007R\u0002",
    "\u0002\u0e30\u0e31\u00070\u0002\u0002\u0e31\u0e32\t\u0019\u0002\u0002",
    "\u0e32\u0ec5\u0005\u0376\u01bc\u0002\u0e33\u0e34\u00070\u0002\u0002",
    "\u0e34\u0e35\u0007=\u0002\u0002\u0e35\u0e36\u0007R\u0002\u0002\u0e36",
    "\u0ec5\u0005\u0376\u01bc\u0002\u0e37\u0e38\u0007\u01e1\u0002\u0002\u0e38",
    "\u0ec5\u0007S\u0002\u0002\u0e39\u0e3a\u0007\u01e8\u0002\u0002\u0e3a",
    "\u0ec5\u0007S\u0002\u0002\u0e3b\u0e3d\u0007|\u0002\u0002\u0e3c\u0e3e",
    "\t%\u0002\u0002\u0e3d\u0e3c\u0003\u0002\u0002\u0002\u0e3d\u0e3e\u0003",
    "\u0002\u0002\u0002\u0e3e\u0e41\u0003\u0002\u0002\u0002\u0e3f\u0e42\u0005",
    "\u0376\u01bc\u0002\u0e40\u0e42\u0005\u0340\u01a1\u0002\u0e41\u0e3f\u0003",
    "\u0002\u0002\u0002\u0e41\u0e40\u0003\u0002\u0002\u0002\u0e42\u0ec5\u0003",
    "\u0002\u0002\u0002\u0e43\u0e44\u0007n\u0002\u0002\u0e44\u0e45\u0007",
    "\u0013\u0002\u0002\u0e45\u0ec5\u0005\u03a4\u01d3\u0002\u0e46\u0e47\u0007",
    " \u0002\u0002\u0e47\u0e48\u0007\u0099\u0002\u0002\u0e48\u0e49\u0007",
    "\u0019\u0002\u0002\u0e49\u0e4a\u0007\u0088\u0002\u0002\u0e4a\u0e4d\u0005",
    "\u0368\u01b5\u0002\u0e4b\u0e4c\u0007\u001b\u0002\u0002\u0e4c\u0e4e\u0005",
    "\u036a\u01b6\u0002\u0e4d\u0e4b\u0003\u0002\u0002\u0002\u0e4d\u0e4e\u0003",
    "\u0002\u0002\u0002\u0e4e\u0ec5\u0003\u0002\u0002\u0002\u0e4f\u0e51\u0007",
    "(\u0002\u0002\u0e50\u0e4f\u0003\u0002\u0002\u0002\u0e50\u0e51\u0003",
    "\u0002\u0002\u0002\u0e51\u0e52\u0003\u0002\u0002\u0002\u0e52\u0e53\u0007",
    "\u0019\u0002\u0002\u0e53\u0e54\u0007\u0088\u0002\u0002\u0e54\u0e55\u0007",
    "\u0355\u0002\u0002\u0e55\u0e59\u0005\u0368\u01b5\u0002\u0e56\u0e57\u0007",
    "\u001b\u0002\u0002\u0e57\u0e58\u0007\u0355\u0002\u0002\u0e58\u0e5a\u0005",
    "\u036a\u01b6\u0002\u0e59\u0e56\u0003\u0002\u0002\u0002\u0e59\u0e5a\u0003",
    "\u0002\u0002\u0002\u0e5a\u0ec5\u0003\u0002\u0002\u0002\u0e5b\u0e5c\u0007",
    "\u01e2\u0002\u0002\u0e5c\u0ec5\u0007\u02bb\u0002\u0002\u0e5d\u0e5e\u0007",
    "\u0212\u0002\u0002\u0e5e\u0ec5\u0007\u02bb\u0002\u0002\u0e5f\u0ec5\u0007",
    "<\u0002\u0002\u0e60\u0e61\t&\u0002\u0002\u0e61\u0ec5\u0007\u02cd\u0002",
    "\u0002\u0e62\u0e63\u0007\b\u0002\u0002\u0e63\u0e64\u0007r\u0002\u0002",
    "\u0e64\u0e65\u0007\u0360\u0002\u0002\u0e65\u0e6a\u0005\u00c4c\u0002",
    "\u0e66\u0e67\u0007\u0364\u0002\u0002\u0e67\u0e69\u0005\u00c4c\u0002",
    "\u0e68\u0e66\u0003\u0002\u0002\u0002\u0e69\u0e6c\u0003\u0002\u0002\u0002",
    "\u0e6a\u0e68\u0003\u0002\u0002\u0002\u0e6a\u0e6b\u0003\u0002\u0002\u0002",
    "\u0e6b\u0e6d\u0003\u0002\u0002\u0002\u0e6c\u0e6a\u0003\u0002\u0002\u0002",
    "\u0e6d\u0e6e\u0007\u0361\u0002\u0002\u0e6e\u0ec5\u0003\u0002\u0002\u0002",
    "\u0e6f\u0e70\u00070\u0002\u0002\u0e70\u0e71\u0007r\u0002\u0002\u0e71",
    "\u0ec5\u0005\u03a4\u01d3\u0002\u0e72\u0e73\u0007\u01e2\u0002\u0002\u0e73",
    "\u0e76\u0007r\u0002\u0002\u0e74\u0e77\u0005\u03a4\u01d3\u0002\u0e75",
    "\u0e77\u0007\t\u0002\u0002\u0e76\u0e74\u0003\u0002\u0002\u0002\u0e76",
    "\u0e75\u0003\u0002\u0002\u0002\u0e77\u0e78\u0003\u0002\u0002\u0002\u0e78",
    "\u0ec5\u0007\u02bb\u0002\u0002\u0e79\u0e7a\u0007\u0212\u0002\u0002\u0e7a",
    "\u0e7d\u0007r\u0002\u0002\u0e7b\u0e7e\u0005\u03a4\u01d3\u0002\u0e7c",
    "\u0e7e\u0007\t\u0002\u0002\u0e7d\u0e7b\u0003\u0002\u0002\u0002\u0e7d",
    "\u0e7c\u0003\u0002\u0002\u0002\u0e7e\u0e7f\u0003\u0002\u0002\u0002\u0e7f",
    "\u0ec5\u0007\u02bb\u0002\u0002\u0e80\u0e81\u0007\u02c2\u0002\u0002\u0e81",
    "\u0e84\u0007r\u0002\u0002\u0e82\u0e85\u0005\u03a4\u01d3\u0002\u0e83",
    "\u0e85\u0007\t\u0002\u0002\u0e84\u0e82\u0003\u0002\u0002\u0002\u0e84",
    "\u0e83\u0003\u0002\u0002\u0002\u0e85\u0ec5\u0003\u0002\u0002\u0002\u0e86",
    "\u0e87\u0007\u01c7\u0002\u0002\u0e87\u0e88\u0007r\u0002\u0002\u0e88",
    "\u0ec5\u0005\u0382\u01c2\u0002\u0e89\u0e8a\u0007\u0280\u0002\u0002\u0e8a",
    "\u0e8b\u0007r\u0002\u0002\u0e8b\u0e8c\u0005\u03a4\u01d3\u0002\u0e8c",
    "\u0e8d\u0007N\u0002\u0002\u0e8d\u0e8e\u0007\u0360\u0002\u0002\u0e8e",
    "\u0e93\u0005\u00c4c\u0002\u0e8f\u0e90\u0007\u0364\u0002\u0002\u0e90",
    "\u0e92\u0005\u00c4c\u0002\u0e91\u0e8f\u0003\u0002\u0002\u0002\u0e92",
    "\u0e95\u0003\u0002\u0002\u0002\u0e93\u0e91\u0003\u0002\u0002\u0002\u0e93",
    "\u0e94\u0003\u0002\u0002\u0002\u0e94\u0e96\u0003\u0002\u0002\u0002\u0e95",
    "\u0e93\u0003\u0002\u0002\u0002\u0e96\u0e97\u0007\u0361\u0002\u0002\u0e97",
    "\u0ec5\u0003\u0002\u0002\u0002\u0e98\u0e99\u0007\u01f5\u0002\u0002\u0e99",
    "\u0e9a\u0007r\u0002\u0002\u0e9a\u0e9b\u0005\u0376\u01bc\u0002\u0e9b",
    "\u0e9c\u0007\u00aa\u0002\u0002\u0e9c\u0e9d\u0007\u0096\u0002\u0002\u0e9d",
    "\u0ea0\u0005\u0342\u01a2\u0002\u0e9e\u0e9f\t&\u0002\u0002\u0e9f\u0ea1",
    "\u0007\u02cd\u0002\u0002\u0ea0\u0e9e\u0003\u0002\u0002\u0002\u0ea0\u0ea1",
    "\u0003\u0002\u0002\u0002\u0ea1\u0ec5\u0003\u0002\u0002\u0002\u0ea2\u0ea3",
    "\u0007\f\u0002\u0002\u0ea3\u0ea6\u0007r\u0002\u0002\u0ea4\u0ea7\u0005",
    "\u03a4\u01d3\u0002\u0ea5\u0ea7\u0007\t\u0002\u0002\u0ea6\u0ea4\u0003",
    "\u0002\u0002\u0002\u0ea6\u0ea5\u0003\u0002\u0002\u0002\u0ea7\u0ec5\u0003",
    "\u0002\u0002\u0002\u0ea8\u0ea9\u0007\u001a\u0002\u0002\u0ea9\u0eac\u0007",
    "r\u0002\u0002\u0eaa\u0ead\u0005\u03a4\u01d3\u0002\u0eab\u0ead\u0007",
    "\t\u0002\u0002\u0eac\u0eaa\u0003\u0002\u0002\u0002\u0eac\u0eab\u0003",
    "\u0002\u0002\u0002\u0ead\u0ec5\u0003\u0002\u0002\u0002\u0eae\u0eaf\u0007",
    "j\u0002\u0002\u0eaf\u0eb2\u0007r\u0002\u0002\u0eb0\u0eb3\u0005\u03a4",
    "\u01d3\u0002\u0eb1\u0eb3\u0007\t\u0002\u0002\u0eb2\u0eb0\u0003\u0002",
    "\u0002\u0002\u0eb2\u0eb1\u0003\u0002\u0002\u0002\u0eb3\u0ec5\u0003\u0002",
    "\u0002\u0002\u0eb4\u0eb5\u0007\u0277\u0002\u0002\u0eb5\u0eb8\u0007r",
    "\u0002\u0002\u0eb6\u0eb9\u0005\u03a4\u01d3\u0002\u0eb7\u0eb9\u0007\t",
    "\u0002\u0002\u0eb8\u0eb6\u0003\u0002\u0002\u0002\u0eb8\u0eb7\u0003\u0002",
    "\u0002\u0002\u0eb9\u0ec5\u0003\u0002\u0002\u0002\u0eba\u0ebb\u0007\u0281",
    "\u0002\u0002\u0ebb\u0ebe\u0007r\u0002\u0002\u0ebc\u0ebf\u0005\u03a4",
    "\u01d3\u0002\u0ebd\u0ebf\u0007\t\u0002\u0002\u0ebe\u0ebc\u0003\u0002",
    "\u0002\u0002\u0ebe\u0ebd\u0003\u0002\u0002\u0002\u0ebf\u0ec5\u0003\u0002",
    "\u0002\u0002\u0ec0\u0ec1\u0007\u027f\u0002\u0002\u0ec1\u0ec5\u0007\u0265",
    "\u0002\u0002\u0ec2\u0ec3\u0007\u02c9\u0002\u0002\u0ec3\u0ec5\u0007\u0265",
    "\u0002\u0002\u0ec4\u0d67\u0003\u0002\u0002\u0002\u0ec4\u0d71\u0003\u0002",
    "\u0002\u0002\u0ec4\u0d7c\u0003\u0002\u0002\u0002\u0ec4\u0d8e\u0003\u0002",
    "\u0002\u0002\u0ec4\u0d9d\u0003\u0002\u0002\u0002\u0ec4\u0db0\u0003\u0002",
    "\u0002\u0002\u0ec4\u0dc8\u0003\u0002\u0002\u0002\u0ec4\u0dd7\u0003\u0002",
    "\u0002\u0002\u0ec4\u0de6\u0003\u0002\u0002\u0002\u0ec4\u0df2\u0003\u0002",
    "\u0002\u0002\u0ec4\u0df7\u0003\u0002\u0002\u0002\u0ec4\u0e03\u0003\u0002",
    "\u0002\u0002\u0ec4\u0e0f\u0003\u0002\u0002\u0002\u0ec4\u0e15\u0003\u0002",
    "\u0002\u0002\u0ec4\u0e1a\u0003\u0002\u0002\u0002\u0ec4\u0e25\u0003\u0002",
    "\u0002\u0002\u0ec4\u0e2d\u0003\u0002\u0002\u0002\u0ec4\u0e30\u0003\u0002",
    "\u0002\u0002\u0ec4\u0e33\u0003\u0002\u0002\u0002\u0ec4\u0e37\u0003\u0002",
    "\u0002\u0002\u0ec4\u0e39\u0003\u0002\u0002\u0002\u0ec4\u0e3b\u0003\u0002",
    "\u0002\u0002\u0ec4\u0e43\u0003\u0002\u0002\u0002\u0ec4\u0e46\u0003\u0002",
    "\u0002\u0002\u0ec4\u0e50\u0003\u0002\u0002\u0002\u0ec4\u0e5b\u0003\u0002",
    "\u0002\u0002\u0ec4\u0e5d\u0003\u0002\u0002\u0002\u0ec4\u0e5f\u0003\u0002",
    "\u0002\u0002\u0ec4\u0e60\u0003\u0002\u0002\u0002\u0ec4\u0e62\u0003\u0002",
    "\u0002\u0002\u0ec4\u0e6f\u0003\u0002\u0002\u0002\u0ec4\u0e72\u0003\u0002",
    "\u0002\u0002\u0ec4\u0e79\u0003\u0002\u0002\u0002\u0ec4\u0e80\u0003\u0002",
    "\u0002\u0002\u0ec4\u0e86\u0003\u0002\u0002\u0002\u0ec4\u0e89\u0003\u0002",
    "\u0002\u0002\u0ec4\u0e98\u0003\u0002\u0002\u0002\u0ec4\u0ea2\u0003\u0002",
    "\u0002\u0002\u0ec4\u0ea8\u0003\u0002\u0002\u0002\u0ec4\u0eae\u0003\u0002",
    "\u0002\u0002\u0ec4\u0eb4\u0003\u0002\u0002\u0002\u0ec4\u0eba\u0003\u0002",
    "\u0002\u0002\u0ec4\u0ec0\u0003\u0002\u0002\u0002\u0ec4\u0ec2\u0003\u0002",
    "\u0002\u0002\u0ec5\u00f1\u0003\u0002\u0002\u0002\u0ec6\u0ec7\u0007|",
    "\u0002\u0002\u0ec7\u0ec8\u0007\u0099\u0002\u0002\u0ec8\u0efd\u0005\u0342",
    "\u01a2\u0002\u0ec9\u0ed4\u0007\u0088\u0002\u0002\u0eca\u0ecb\u0007\u0122",
    "\u0002\u0002\u0ecb\u0ecc\u0007\u0360\u0002\u0002\u0ecc\u0ecd\u0005L",
    "\'\u0002\u0ecd\u0ece\u0007\u0361\u0002\u0002\u0ece\u0ed5\u0003\u0002",
    "\u0002\u0002\u0ecf\u0ed0\u0007\u0113\u0002\u0002\u0ed0\u0ed1\u0007\u0360",
    "\u0002\u0002\u0ed1\u0ed2\u0005L\'\u0002\u0ed2\u0ed3\u0007\u0361\u0002",
    "\u0002\u0ed3\u0ed5\u0003\u0002\u0002\u0002\u0ed4\u0eca\u0003\u0002\u0002",
    "\u0002\u0ed4\u0ecf\u0003\u0002\u0002\u0002\u0ed5\u0efd\u0003\u0002\u0002",
    "\u0002\u0ed6\u0ed7\u0007\u012b\u0002\u0002\u0ed7\u0ed9\u0007\u0122\u0002",
    "\u0002\u0ed8\u0eda\u0005\u03c4\u01e3\u0002\u0ed9\u0ed8\u0003\u0002\u0002",
    "\u0002\u0ed9\u0eda\u0003\u0002\u0002\u0002\u0eda\u0edb\u0003\u0002\u0002",
    "\u0002\u0edb\u0edc\u0007\u0360\u0002\u0002\u0edc\u0edd\u0005\u03a4\u01d3",
    "\u0002\u0edd\u0ede\u0007\u0361\u0002\u0002\u0ede\u0efd\u0003\u0002\u0002",
    "\u0002\u0edf\u0efd\u0005\u00a2R\u0002\u0ee0\u0ee1\u0007\u0088\u0002",
    "\u0002\u0ee1\u0ee2\u0007\u01ef\u0002\u0002\u0ee2\u0ee4\u0007\u0341\u0002",
    "\u0002\u0ee3\u0ee5\t\'\u0002\u0002\u0ee4\u0ee3\u0003\u0002\u0002\u0002",
    "\u0ee4\u0ee5\u0003\u0002\u0002\u0002\u0ee5\u0ee6\u0003\u0002\u0002\u0002",
    "\u0ee6\u0ee9\u0005\u00f4{\u0002\u0ee7\u0ee8\u0007\u00f1\u0002\u0002",
    "\u0ee8\u0eea\t\'\u0002\u0002\u0ee9\u0ee7\u0003\u0002\u0002\u0002\u0ee9",
    "\u0eea\u0003\u0002\u0002\u0002\u0eea\u0eed\u0003\u0002\u0002\u0002\u0eeb",
    "\u0eec\u0007\u0105\u0002\u0002\u0eec\u0eee\t\'\u0002\u0002\u0eed\u0eeb",
    "\u0003\u0002\u0002\u0002\u0eed\u0eee\u0003\u0002\u0002\u0002\u0eee\u0ef3",
    "\u0003\u0002\u0002\u0002\u0eef\u0ef0\u0007Y\u0002\u0002\u0ef0\u0ef1",
    "\u0005\u0390\u01c9\u0002\u0ef1\u0ef2\t\u0018\u0002\u0002\u0ef2\u0ef4",
    "\u0003\u0002\u0002\u0002\u0ef3\u0eef\u0003\u0002\u0002\u0002\u0ef3\u0ef4",
    "\u0003\u0002\u0002\u0002\u0ef4\u0efd\u0003\u0002\u0002\u0002\u0ef5\u0efd",
    "\u0005\u00f8}\u0002\u0ef6\u0efd\u0005\u00fa~\u0002\u0ef7\u0efd\u0005",
    "\u00fe\u0080\u0002\u0ef8\u0efd\u0005\u0100\u0081\u0002\u0ef9\u0efa\u0005",
    "\u00f6|\u0002\u0efa\u0efb\bz\u0001\u0002\u0efb\u0efd\u0003\u0002\u0002",
    "\u0002\u0efc\u0ec6\u0003\u0002\u0002\u0002\u0efc\u0ec9\u0003\u0002\u0002",
    "\u0002\u0efc\u0ed6\u0003\u0002\u0002\u0002\u0efc\u0edf\u0003\u0002\u0002",
    "\u0002\u0efc\u0ee0\u0003\u0002\u0002\u0002\u0efc\u0ef5\u0003\u0002\u0002",
    "\u0002\u0efc\u0ef6\u0003\u0002\u0002\u0002\u0efc\u0ef7\u0003\u0002\u0002",
    "\u0002\u0efc\u0ef8\u0003\u0002\u0002\u0002\u0efc\u0ef9\u0003\u0002\u0002",
    "\u0002\u0efd\u00f3\u0003\u0002\u0002\u0002\u0efe\u0eff\u0007N\u0002",
    "\u0002\u0eff\u0f00\u0005\u0342\u01a2\u0002\u0f00\u00f5\u0003\u0002\u0002",
    "\u0002\u0f01\u0f02\u0005\u042c\u0217\u0002\u0f02\u00f7\u0003\u0002\u0002",
    "\u0002\u0f03\u0f04\t(\u0002\u0002\u0f04\u0f05\u0007\u01c9\u0002\u0002",
    "\u0f05\u0f07\u0005z>\u0002\u0f06\u0f08\u0005\u0104\u0083\u0002\u0f07",
    "\u0f06\u0003\u0002\u0002\u0002\u0f07\u0f08\u0003\u0002\u0002\u0002\u0f08",
    "\u0f20\u0003\u0002\u0002\u0002\u0f09\u0f0a\u0007*\u0002\u0002\u0f0a",
    "\u0f0b\u0007\u01c9\u0002\u0002\u0f0b\u0f0c\u0007\u0360\u0002\u0002\u0f0c",
    "\u0f0d\u0005\u03a4\u01d3\u0002\u0f0d\u0f0f\u0007\u0361\u0002\u0002\u0f0e",
    "\u0f10\u0005\u0104\u0083\u0002\u0f0f\u0f0e\u0003\u0002\u0002\u0002\u0f0f",
    "\u0f10\u0003\u0002\u0002\u0002\u0f10\u0f20\u0003\u0002\u0002\u0002\u0f11",
    "\u0f12\u0007\u0018\u0002\u0002\u0f12\u0f13\u0007\u001c\u0002\u0002\u0f13",
    "\u0f15\u0005\u0376\u01bc\u0002\u0f14\u0f16\u0005~@\u0002\u0f15\u0f14",
    "\u0003\u0002\u0002\u0002\u0f15\u0f16\u0003\u0002\u0002\u0002\u0f16\u0f17",
    "\u0003\u0002\u0002\u0002\u0f17\u0f1a\b}\u0001\u0002\u0f18\u0f19\t)\u0002",
    "\u0002\u0f19\u0f1b\u0005\u0376\u01bc\u0002\u0f1a\u0f18\u0003\u0002\u0002",
    "\u0002\u0f1a\u0f1b\u0003\u0002\u0002\u0002\u0f1b\u0f1d\u0003\u0002\u0002",
    "\u0002\u0f1c\u0f1e\u0005\u0104\u0083\u0002\u0f1d\u0f1c\u0003\u0002\u0002",
    "\u0002\u0f1d\u0f1e\u0003\u0002\u0002\u0002\u0f1e\u0f20\u0003\u0002\u0002",
    "\u0002\u0f1f\u0f03\u0003\u0002\u0002\u0002\u0f1f\u0f09\u0003\u0002\u0002",
    "\u0002\u0f1f\u0f11\u0003\u0002\u0002\u0002\u0f20\u00f9\u0003\u0002\u0002",
    "\u0002\u0f21\u0f23\u0007\b\u0002\u0002\u0f22\u0f24\u0005\u03c6\u01e4",
    "\u0002\u0f23\u0f22\u0003\u0002\u0002\u0002\u0f23\u0f24\u0003\u0002\u0002",
    "\u0002\u0f24\u0f2f\u0003\u0002\u0002\u0002\u0f25\u0f27\u0005\u0338\u019d",
    "\u0002\u0f26\u0f25\u0003\u0002\u0002\u0002\u0f27\u0f28\u0003\u0002\u0002",
    "\u0002\u0f28\u0f26\u0003\u0002\u0002\u0002\u0f28\u0f29\u0003\u0002\u0002",
    "\u0002\u0f29\u0f30\u0003\u0002\u0002\u0002\u0f2a\u0f2c\u0005\u0336\u019c",
    "\u0002\u0f2b\u0f2a\u0003\u0002\u0002\u0002\u0f2c\u0f2d\u0003\u0002\u0002",
    "\u0002\u0f2d\u0f2b\u0003\u0002\u0002\u0002\u0f2d\u0f2e\u0003\u0002\u0002",
    "\u0002\u0f2e\u0f30\u0003\u0002\u0002\u0002\u0f2f\u0f26\u0003\u0002\u0002",
    "\u0002\u0f2f\u0f2b\u0003\u0002\u0002\u0002\u0f30\u0f63\u0003\u0002\u0002",
    "\u0002\u0f31\u0f33\u00070\u0002\u0002\u0f32\u0f34\u0005\u03c4\u01e3",
    "\u0002\u0f33\u0f32\u0003\u0002\u0002\u0002\u0f33\u0f34\u0003\u0002\u0002",
    "\u0002\u0f34\u0f35\u0003\u0002\u0002\u0002\u0f35\u0f42\u0007r\u0002",
    "\u0002\u0f36\u0f43\u0005\u03a4\u01d3\u0002\u0f37\u0f38\u0007\u0360\u0002",
    "\u0002\u0f38\u0f3d\u0005\u0334\u019b\u0002\u0f39\u0f3a\u0007\u0364\u0002",
    "\u0002\u0f3a\u0f3c\u0005\u0334\u019b\u0002\u0f3b\u0f39\u0003\u0002\u0002",
    "\u0002\u0f3c\u0f3f\u0003\u0002\u0002\u0002\u0f3d\u0f3b\u0003\u0002\u0002",
    "\u0002\u0f3d\u0f3e\u0003\u0002\u0002\u0002\u0f3e\u0f40\u0003\u0002\u0002",
    "\u0002\u0f3f\u0f3d\u0003\u0002\u0002\u0002\u0f40\u0f41\u0007\u0361\u0002",
    "\u0002\u0f41\u0f43\u0003\u0002\u0002\u0002\u0f42\u0f36\u0003\u0002\u0002",
    "\u0002\u0f42\u0f37\u0003\u0002\u0002\u0002\u0f43\u0f46\u0003\u0002\u0002",
    "\u0002\u0f44\u0f45\u0007F\u0002\u0002\u0f45\u0f47\u0007\u0102\u0002",
    "\u0002\u0f46\u0f44\u0003\u0002\u0002\u0002\u0f46\u0f47\u0003\u0002\u0002",
    "\u0002\u0f47\u0f49\u0003\u0002\u0002\u0002\u0f48\u0f4a\u0007u\u0002",
    "\u0002\u0f49\u0f48\u0003\u0002\u0002\u0002\u0f49\u0f4a\u0003\u0002\u0002",
    "\u0002\u0f4a\u0f63\u0003\u0002\u0002\u0002\u0f4b\u0f4f\t*\u0002\u0002",
    "\u0f4c\u0f4e\u0005\u033a\u019e\u0002\u0f4d\u0f4c\u0003\u0002\u0002\u0002",
    "\u0f4e\u0f51\u0003\u0002\u0002\u0002\u0f4f\u0f4d\u0003\u0002\u0002\u0002",
    "\u0f4f\u0f50\u0003\u0002\u0002\u0002\u0f50\u0f63\u0003\u0002\u0002\u0002",
    "\u0f51\u0f4f\u0003\u0002\u0002\u0002\u0f52\u0f53\u0007\u01f5\u0002\u0002",
    "\u0f53\u0f54\u0005\u033a\u019e\u0002\u0f54\u0f55\u0007\u00aa\u0002\u0002",
    "\u0f55\u0f56\u0007\u0096\u0002\u0002\u0f56\u0f57\u0005\u0342\u01a2\u0002",
    "\u0f57\u0f63\u0003\u0002\u0002\u0002\u0f58\u0f59\u0007r\u0002\u0002",
    "\u0f59\u0f5a\u0007\u001c\u0002\u0002\u0f5a\u0f5b\u0007\u0360\u0002\u0002",
    "\u0f5b\u0f5c\u0005|?\u0002\u0f5c\u0f5d\u0007\u0361\u0002\u0002\u0f5d",
    "\u0f63\u0003\u0002\u0002\u0002\u0f5e\u0f60\u0005\u033a\u019e\u0002\u0f5f",
    "\u0f5e\u0003\u0002\u0002\u0002\u0f5f\u0f60\u0003\u0002\u0002\u0002\u0f60",
    "\u0f61\u0003\u0002\u0002\u0002\u0f61\u0f63\u0005\u00fc\u007f\u0002\u0f62",
    "\u0f21\u0003\u0002\u0002\u0002\u0f62\u0f31\u0003\u0002\u0002\u0002\u0f62",
    "\u0f4b\u0003\u0002\u0002\u0002\u0f62\u0f52\u0003\u0002\u0002\u0002\u0f62",
    "\u0f58\u0003\u0002\u0002\u0002\u0f62\u0f5f\u0003\u0002\u0002\u0002\u0f63",
    "\u00fb\u0003\u0002\u0002\u0002\u0f64\u0f65\u0007\u0088\u0002\u0002\u0f65",
    "\u0f66\u0007\u00d0\u0002\u0002\u0f66\u0f9c\u0005\u0160\u00b1\u0002\u0f67",
    "\u0f9c\u0005\u00a2R\u0002\u0f68\u0f6f\t\u0015\u0002\u0002\u0f69\u0f70",
    "\u0007\u0256\u0002\u0002\u0f6a\u0f6c\u0007\u00eb\u0002\u0002\u0f6b\u0f6d",
    "\u0007\u0015\u0002\u0002\u0f6c\u0f6b\u0003\u0002\u0002\u0002\u0f6c\u0f6d",
    "\u0003\u0002\u0002\u0002\u0f6d\u0f70\u0003\u0002\u0002\u0002\u0f6e\u0f70",
    "\u0007\u0104\u0002\u0002\u0f6f\u0f69\u0003\u0002\u0002\u0002\u0f6f\u0f6a",
    "\u0003\u0002\u0002\u0002\u0f6f\u0f6e\u0003\u0002\u0002\u0002\u0f70\u0f9c",
    "\u0003\u0002\u0002\u0002\u0f71\u0f9c\u0007\u00c2\u0002\u0002\u0f72\u0f9c",
    "\u0005\u0096L\u0002\u0f73\u0f74\u0007\u0088\u0002\u0002\u0f74\u0f75",
    "\u0007\u0113\u0002\u0002\u0f75\u0f9c\u0005H%\u0002\u0f76\u0f77\u0007",
    "|\u0002\u0002\u0f77\u0f78\u0007\u0099\u0002\u0002\u0f78\u0f9c\u0005",
    "\u033a\u019e\u0002\u0f79\u0f9c\u0005\u0092J\u0002\u0f7a\u0f7b\u0007",
    "f\u0002\u0002\u0f7b\u0f9c\t+\u0002\u0002\u0f7c\u0f9c\u0005\u0090I\u0002",
    "\u0f7d\u0f7e\u0007\u01cd\u0002\u0002\u0f7e\u0f81\u0005\u0386\u01c4\u0002",
    "\u0f7f\u0f80\u0007\r\u0002\u0002\u0f80\u0f82\u0007\u02d2\u0002\u0002",
    "\u0f81\u0f7f\u0003\u0002\u0002\u0002\u0f81\u0f82\u0003\u0002\u0002\u0002",
    "\u0f82\u0f8c\u0003\u0002\u0002\u0002\u0f83\u0f84\u0007\u01e8\u0002\u0002",
    "\u0f84\u0f8c\u0007\u01cd\u0002\u0002\u0f85\u0f86\u0007\u01e1\u0002\u0002",
    "\u0f86\u0f89\u0007\u01cd\u0002\u0002\u0f87\u0f88\u0007;\u0002\u0002",
    "\u0f88\u0f8a\u0005\u0386\u01c4\u0002\u0f89\u0f87\u0003\u0002\u0002\u0002",
    "\u0f89\u0f8a\u0003\u0002\u0002\u0002\u0f8a\u0f8c\u0003\u0002\u0002\u0002",
    "\u0f8b\u0f7d\u0003\u0002\u0002\u0002\u0f8b\u0f83\u0003\u0002\u0002\u0002",
    "\u0f8b\u0f85\u0003\u0002\u0002\u0002\u0f8c\u0f9c\u0003\u0002\u0002\u0002",
    "\u0f8d\u0f8e\u0007\u00a2\u0002\u0002\u0f8e\u0f8f\u0007\u011b\u0002\u0002",
    "\u0f8f\u0f91\u0007;\u0002\u0002\u0f90\u0f92\u0007\u01c9\u0002\u0002",
    "\u0f91\u0f90\u0003\u0002\u0002\u0002\u0f91\u0f92\u0003\u0002\u0002\u0002",
    "\u0f92\u0f93\u0003\u0002\u0002\u0002\u0f93\u0f94\u0005\u0376\u01bc\u0002",
    "\u0f94\u0f95\u0007\u0088\u0002\u0002\u0f95\u0f96\u0007\u0360\u0002\u0002",
    "\u0f96\u0f97\u0005H%\u0002\u0f97\u0f99\u0007\u0361\u0002\u0002\u0f98",
    "\u0f9a\u0005\u00a0Q\u0002\u0f99\u0f98\u0003\u0002\u0002\u0002\u0f99",
    "\u0f9a\u0003\u0002\u0002\u0002\u0f9a\u0f9c\u0003\u0002\u0002\u0002\u0f9b",
    "\u0f64\u0003\u0002\u0002\u0002\u0f9b\u0f67\u0003\u0002\u0002\u0002\u0f9b",
    "\u0f68\u0003\u0002\u0002\u0002\u0f9b\u0f71\u0003\u0002\u0002\u0002\u0f9b",
    "\u0f72\u0003\u0002\u0002\u0002\u0f9b\u0f73\u0003\u0002\u0002\u0002\u0f9b",
    "\u0f76\u0003\u0002\u0002\u0002\u0f9b\u0f79\u0003\u0002\u0002\u0002\u0f9b",
    "\u0f7a\u0003\u0002\u0002\u0002\u0f9b\u0f7c\u0003\u0002\u0002\u0002\u0f9b",
    "\u0f8b\u0003\u0002\u0002\u0002\u0f9b\u0f8d\u0003\u0002\u0002\u0002\u0f9c",
    "\u00fd\u0003\u0002\u0002\u0002\u0f9d\u0fa5\u0005\u0094K\u0002\u0f9e",
    "\u0f9f\u0007f\u0002\u0002\u0f9f\u0fa5\u0007\u0117\u0002\u0002\u0fa0",
    "\u0fa1\u0007f\u0002\u0002\u0fa1\u0fa2\u0007\u02b3\u0002\u0002\u0fa2",
    "\u0fa3\u0007\u000e\u0002\u0002\u0fa3\u0fa5\u0007\u00cb\u0002\u0002\u0fa4",
    "\u0f9d\u0003\u0002\u0002\u0002\u0fa4\u0f9e\u0003\u0002\u0002\u0002\u0fa4",
    "\u0fa0\u0003\u0002\u0002\u0002\u0fa5\u00ff\u0003\u0002\u0002\u0002\u0fa6",
    "\u0fa9\u0007\b\u0002\u0002\u0fa7\u0fa8\u0007\u001e\u0002\u0002\u0fa8",
    "\u0faa\u0005\u0376\u01bc\u0002\u0fa9\u0fa7\u0003\u0002\u0002\u0002\u0fa9",
    "\u0faa\u0003\u0002\u0002\u0002\u0faa\u0fab\u0003\u0002\u0002\u0002\u0fab",
    "\u0fac\u0007=\u0002\u0002\u0fac\u0fad\u0007R\u0002\u0002\u0fad\u0fae",
    "\u0007\u0360\u0002\u0002\u0fae\u0fb0\u0005\u03a4\u01d3\u0002\u0faf\u0fb1",
    "\u0007\u0361\u0002\u0002\u0fb0\u0faf\u0003\u0002\u0002\u0002\u0fb0\u0fb1",
    "\u0003\u0002\u0002\u0002\u0fb1\u0fb3\u0003\u0002\u0002\u0002\u0fb2\u0fb4",
    "\u0005\u0102\u0082\u0002\u0fb3\u0fb2\u0003\u0002\u0002\u0002\u0fb3\u0fb4",
    "\u0003\u0002\u0002\u0002\u0fb4\u0fb5\u0003\u0002\u0002\u0002\u0fb5\u0fb6",
    "\u0005\u0088E\u0002\u0fb6\u0fb7\b\u0081\u0001\u0002\u0fb7\u0fc8\u0003",
    "\u0002\u0002\u0002\u0fb8\u0fbb\u0007\b\u0002\u0002\u0fb9\u0fba\u0007",
    "\u001e\u0002\u0002\u0fba\u0fbc\u0005\u0376\u01bc\u0002\u0fbb\u0fb9\u0003",
    "\u0002\u0002\u0002\u0fbb\u0fbc\u0003\u0002\u0002\u0002\u0fbc\u0fbd\u0003",
    "\u0002\u0002\u0002\u0fbd\u0fbe\u0007s\u0002\u0002\u0fbe\u0fbf\u0007",
    "R\u0002\u0002\u0fbf\u0fc0\u0007\u0360\u0002\u0002\u0fc0\u0fc1\u0005",
    "\u03a4\u01d3\u0002\u0fc1\u0fc2\u0007\u0361\u0002\u0002\u0fc2\u0fc3\u0005",
    "\u0088E\u0002\u0fc3\u0fc8\u0003\u0002\u0002\u0002\u0fc4\u0fc5\u0007",
    "0\u0002\u0002\u0fc5\u0fc6\u0007\u001e\u0002\u0002\u0fc6\u0fc8\u0005",
    "\u0376\u01bc\u0002\u0fc7\u0fa6\u0003\u0002\u0002\u0002\u0fc7\u0fb8\u0003",
    "\u0002\u0002\u0002\u0fc7\u0fc4\u0003\u0002\u0002\u0002\u0fc8\u0101\u0003",
    "\u0002\u0002\u0002\u0fc9\u0fca\u0007y\u0002\u0002\u0fca\u0fcf\u0005",
    "\u0342\u01a2\u0002\u0fcb\u0fcc\u0007\u0360\u0002\u0002\u0fcc\u0fcd\u0005",
    "\u03a4\u01d3\u0002\u0fcd\u0fce\u0007\u0361\u0002\u0002\u0fce\u0fd0\u0003",
    "\u0002\u0002\u0002\u0fcf\u0fcb\u0003\u0002\u0002\u0002\u0fcf\u0fd0\u0003",
    "\u0002\u0002\u0002\u0fd0\u0fd1\u0003\u0002\u0002\u0002\u0fd1\u0fd2\b",
    "\u0082\u0001\u0002\u0fd2\u0103\u0003\u0002\u0002\u0002\u0fd3\u0fd4\t",
    ",\u0002\u0002\u0fd4\u0105\u0003\u0002\u0002\u0002\u0fd5\u0fd6\u0006",
    "\u0084,\u0002\u0fd6\u0fd7\u00070\u0002\u0002\u0fd7\u0fd9\t\u0002\u0002",
    "\u0002\u0fd8\u0fda\u0005\u03c4\u01e3\u0002\u0fd9\u0fd8\u0003\u0002\u0002",
    "\u0002\u0fd9\u0fda\u0003\u0002\u0002\u0002\u0fda\u0fdb\u0003\u0002\u0002",
    "\u0002\u0fdb\u0fe7\u0005\u0424\u0213\u0002\u0fdc\u0fdd\u0006\u0084-",
    "\u0002\u0fdd\u0fde\u00070\u0002\u0002\u0fde\u0fe0\t\u0002\u0002\u0002",
    "\u0fdf\u0fe1\u0005\u03c4\u01e3\u0002\u0fe0\u0fdf\u0003\u0002\u0002\u0002",
    "\u0fe0\u0fe1\u0003\u0002\u0002\u0002\u0fe1\u0fe2\u0003\u0002\u0002\u0002",
    "\u0fe2\u0fe4\u0005\u0424\u0213\u0002\u0fe3\u0fe5\u0005\u0104\u0083\u0002",
    "\u0fe4\u0fe3\u0003\u0002\u0002\u0002\u0fe4\u0fe5\u0003\u0002\u0002\u0002",
    "\u0fe5\u0fe7\u0003\u0002\u0002\u0002\u0fe6\u0fd5\u0003\u0002\u0002\u0002",
    "\u0fe6\u0fdc\u0003\u0002\u0002\u0002\u0fe7\u0107\u0003\u0002\u0002\u0002",
    "\u0fe8\u0fe9\u00070\u0002\u0002\u0fe9\u0feb\u0007\u01f2\u0002\u0002",
    "\u0fea\u0fec\u0005\u03c4\u01e3\u0002\u0feb\u0fea\u0003\u0002\u0002\u0002",
    "\u0feb\u0fec\u0003\u0002\u0002\u0002\u0fec\u0fed\u0003\u0002\u0002\u0002",
    "\u0fed\u0fee\u0005\u0340\u01a1\u0002\u0fee\u0109\u0003\u0002\u0002\u0002",
    "\u0fef\u0ff0\u00070\u0002\u0002\u0ff0\u0ff2\u0007H\u0002\u0002\u0ff1",
    "\u0ff3\t\u0003\u0002\u0002\u0ff2\u0ff1\u0003\u0002\u0002\u0002\u0ff2",
    "\u0ff3\u0003\u0002\u0002\u0002\u0ff3\u0ff4\u0003\u0002\u0002\u0002\u0ff4",
    "\u0ff5\u0005\u0376\u01bc\u0002\u0ff5\u0ff6\u0007i\u0002\u0002\u0ff6",
    "\u0ffc\u0005\u0342\u01a2\u0002\u0ff7\u0ff9\u0007\u01ae\u0002\u0002\u0ff8",
    "\u0ffa\u0007\u0355\u0002\u0002\u0ff9\u0ff8\u0003\u0002\u0002\u0002\u0ff9",
    "\u0ffa\u0003\u0002\u0002\u0002\u0ffa\u0ffb\u0003\u0002\u0002\u0002\u0ffb",
    "\u0ffd\t\u0005\u0002\u0002\u0ffc\u0ff7\u0003\u0002\u0002\u0002\u0ffc",
    "\u0ffd\u0003\u0002\u0002\u0002\u0ffd\u1003\u0003\u0002\u0002\u0002\u0ffe",
    "\u1000\u0007]\u0002\u0002\u0fff\u1001\u0007\u0355\u0002\u0002\u1000",
    "\u0fff\u0003\u0002\u0002\u0002\u1000\u1001\u0003\u0002\u0002\u0002\u1001",
    "\u1002\u0003\u0002\u0002\u0002\u1002\u1004\t\u0006\u0002\u0002\u1003",
    "\u0ffe\u0003\u0002\u0002\u0002\u1003\u1004\u0003\u0002\u0002\u0002\u1004",
    "\u010b\u0003\u0002\u0002\u0002\u1005\u1006\u00070\u0002\u0002\u1006",
    "\u1007\u0007\u0228\u0002\u0002\u1007\u1008\u0007B\u0002\u0002\u1008",
    "\u1009\u0005\u0376\u01bc\u0002\u1009\u100a\u0007\u01ec\u0002\u0002\u100a",
    "\u100b\u0007\u0355\u0002\u0002\u100b\u100c\u0005\u036c\u01b7\u0002\u100c",
    "\u010d\u0003\u0002\u0002\u0002\u100d\u100e\u00070\u0002\u0002\u100e",
    "\u1010\u0007t\u0002\u0002\u100f\u1011\u0005\u03c4\u01e3\u0002\u1010",
    "\u100f\u0003\u0002\u0002\u0002\u1010\u1011\u0003\u0002\u0002\u0002\u1011",
    "\u1012\u0003\u0002\u0002\u0002\u1012\u1013\u0005\u0356\u01ac\u0002\u1013",
    "\u010f\u0003\u0002\u0002\u0002\u1014\u1016\u00070\u0002\u0002\u1015",
    "\u1017\u0005\u011c\u008f\u0002\u1016\u1015\u0003\u0002\u0002\u0002\u1016",
    "\u1017\u0003\u0002\u0002\u0002\u1017\u1018\u0003\u0002\u0002\u0002\u1018",
    "\u101a\u0007\u0206\u0002\u0002\u1019\u101b\u0005\u03c4\u01e3\u0002\u101a",
    "\u1019\u0003\u0002\u0002\u0002\u101a\u101b\u0003\u0002\u0002\u0002\u101b",
    "\u101c\u0003\u0002\u0002\u0002\u101c\u101d\u0005\u0352\u01aa\u0002\u101d",
    "\u0111\u0003\u0002\u0002\u0002\u101e\u101f\u00070\u0002\u0002\u101f",
    "\u1021\u0007\u0296\u0002\u0002\u1020\u1022\u0005\u03c4\u01e3\u0002\u1021",
    "\u1020\u0003\u0002\u0002\u0002\u1021\u1022\u0003\u0002\u0002\u0002\u1022",
    "\u1023\u0003\u0002\u0002\u0002\u1023\u1024\u0005\u0376\u01bc\u0002\u1024",
    "\u0113\u0003\u0002\u0002\u0002\u1025\u1026\u0006\u008b.\u0002\u1026",
    "\u1028\u00070\u0002\u0002\u1027\u1029\u0007\u02bc\u0002\u0002\u1028",
    "\u1027\u0003\u0002\u0002\u0002\u1028\u1029\u0003\u0002\u0002\u0002\u1029",
    "\u102a\u0003\u0002\u0002\u0002\u102a\u102c\u0007\u0096\u0002\u0002\u102b",
    "\u102d\u0005\u03c4\u01e3\u0002\u102c\u102b\u0003\u0002\u0002\u0002\u102c",
    "\u102d\u0003\u0002\u0002\u0002\u102d\u102e\u0003\u0002\u0002\u0002\u102e",
    "\u1030\u0005\u03b0\u01d9\u0002\u102f\u1031\u0005\u0104\u0083\u0002\u1030",
    "\u102f\u0003\u0002\u0002\u0002\u1030\u1031\u0003\u0002\u0002\u0002\u1031",
    "\u1040\u0003\u0002\u0002\u0002\u1032\u1033\u0006\u008b/\u0002\u1033",
    "\u1035\u00070\u0002\u0002\u1034\u1036\u0007\u02bc\u0002\u0002\u1035",
    "\u1034\u0003\u0002\u0002\u0002\u1035\u1036\u0003\u0002\u0002\u0002\u1036",
    "\u1037\u0003\u0002\u0002\u0002\u1037\u1039\u0007\u0096\u0002\u0002\u1038",
    "\u103a\u0005\u03c4\u01e3\u0002\u1039\u1038\u0003\u0002\u0002\u0002\u1039",
    "\u103a\u0003\u0002\u0002\u0002\u103a\u103b\u0003\u0002\u0002\u0002\u103b",
    "\u103d\u0005\u0342\u01a2\u0002\u103c\u103e\u0007u\u0002\u0002\u103d",
    "\u103c\u0003\u0002\u0002\u0002\u103d\u103e\u0003\u0002\u0002\u0002\u103e",
    "\u1040\u0003\u0002\u0002\u0002\u103f\u1025\u0003\u0002\u0002\u0002\u103f",
    "\u1032\u0003\u0002\u0002\u0002\u1040\u0115\u0003\u0002\u0002\u0002\u1041",
    "\u1042\u00070\u0002\u0002\u1042\u1043\u0007\u02bb\u0002\u0002\u1043",
    "\u1049\u0005\u0376\u01bc\u0002\u1044\u1046\u0007\u01ec\u0002\u0002\u1045",
    "\u1047\u0007\u0355\u0002\u0002\u1046\u1045\u0003\u0002\u0002\u0002\u1046",
    "\u1047\u0003\u0002\u0002\u0002\u1047\u1048\u0003\u0002\u0002\u0002\u1048",
    "\u104a\u0005\u036c\u01b7\u0002\u1049\u1044\u0003\u0002\u0002\u0002\u1049",
    "\u104a\u0003\u0002\u0002\u0002\u104a\u0117\u0003\u0002\u0002\u0002\u104b",
    "\u104c\u00070\u0002\u0002\u104c\u104e\u0007\u009b\u0002\u0002\u104d",
    "\u104f\u0005\u03c4\u01e3\u0002\u104e\u104d\u0003\u0002\u0002\u0002\u104e",
    "\u104f\u0003\u0002\u0002\u0002\u104f\u1050\u0003\u0002\u0002\u0002\u1050",
    "\u1051\u0005\u0340\u01a1\u0002\u1051\u0119\u0003\u0002\u0002\u0002\u1052",
    "\u1053\u0006\u008e0\u0002\u1053\u1054\u00070\u0002\u0002\u1054\u1056",
    "\u0007\u02d0\u0002\u0002\u1055\u1057\u0005\u03c4\u01e3\u0002\u1056\u1055",
    "\u0003\u0002\u0002\u0002\u1056\u1057\u0003\u0002\u0002\u0002\u1057\u1058",
    "\u0003\u0002\u0002\u0002\u1058\u105d\u0005\u0344\u01a3\u0002\u1059\u105a",
    "\u0007\u0364\u0002\u0002\u105a\u105c\u0005\u0344\u01a3\u0002\u105b\u1059",
    "\u0003\u0002\u0002\u0002\u105c\u105f\u0003\u0002\u0002\u0002\u105d\u105b",
    "\u0003\u0002\u0002\u0002\u105d\u105e\u0003\u0002\u0002\u0002\u105e\u1061",
    "\u0003\u0002\u0002\u0002\u105f\u105d\u0003\u0002\u0002\u0002\u1060\u1062",
    "\u0005\u0104\u0083\u0002\u1061\u1060\u0003\u0002\u0002\u0002\u1061\u1062",
    "\u0003\u0002\u0002\u0002\u1062\u106b\u0003\u0002\u0002\u0002\u1063\u1064",
    "\u0006\u008e1\u0002\u1064\u1065\u00070\u0002\u0002\u1065\u1067\u0007",
    "\u02d0\u0002\u0002\u1066\u1068\u0005\u03c4\u01e3\u0002\u1067\u1066\u0003",
    "\u0002\u0002\u0002\u1067\u1068\u0003\u0002\u0002\u0002\u1068\u1069\u0003",
    "\u0002\u0002\u0002\u1069\u106b\u0005\u0344\u01a3\u0002\u106a\u1052\u0003",
    "\u0002\u0002\u0002\u106a\u1063\u0003\u0002\u0002\u0002\u106b\u011b\u0003",
    "\u0002\u0002\u0002\u106c\u106d\u0006\u008f2\u0002\u106d\u106e\t-\u0002",
    "\u0002\u106e\u011d\u0003\u0002\u0002\u0002\u106f\u1070\u0007|\u0002",
    "\u0002\u1070\u1071\u0007\u0096\u0002\u0002\u1071\u1076\u0005\u0120\u0091",
    "\u0002\u1072\u1073\u0007\u0364\u0002\u0002\u1073\u1075\u0005\u0120\u0091",
    "\u0002\u1074\u1072\u0003\u0002\u0002\u0002\u1075\u1078\u0003\u0002\u0002",
    "\u0002\u1076\u1074\u0003\u0002\u0002\u0002\u1076\u1077\u0003\u0002\u0002",
    "\u0002\u1077\u011f\u0003\u0002\u0002\u0002\u1078\u1076\u0003\u0002\u0002",
    "\u0002\u1079\u107b\u0005\u0342\u01a2\u0002\u107a\u107c\u0007\u0099\u0002",
    "\u0002\u107b\u107a\u0003\u0002\u0002\u0002\u107b\u107c\u0003\u0002\u0002",
    "\u0002\u107c\u107d\u0003\u0002\u0002\u0002\u107d\u107e\u0005\u0342\u01a2",
    "\u0002\u107e\u107f\b\u0091\u0001\u0002\u107f\u0121\u0003\u0002\u0002",
    "\u0002\u1080\u1081\u0006\u00923\u0002\u1081\u1082\u0007\u02c2\u0002",
    "\u0002\u1082\u1083\u0007\u0096\u0002\u0002\u1083\u1085\u0005\u0342\u01a2",
    "\u0002\u1084\u1086\u0005\u033a\u019e\u0002\u1085\u1084\u0003\u0002\u0002",
    "\u0002\u1085\u1086\u0003\u0002\u0002\u0002\u1086\u108e\u0003\u0002\u0002",
    "\u0002\u1087\u1088\u0006\u00924\u0002\u1088\u108a\u0007\u02c2\u0002",
    "\u0002\u1089\u108b\u0007\u0096\u0002\u0002\u108a\u1089\u0003\u0002\u0002",
    "\u0002\u108a\u108b\u0003\u0002\u0002\u0002\u108b\u108c\u0003\u0002\u0002",
    "\u0002\u108c\u108e\u0005\u0342\u01a2\u0002\u108d\u1080\u0003\u0002\u0002",
    "\u0002\u108d\u1087\u0003\u0002\u0002\u0002\u108e\u0123\u0003\u0002\u0002",
    "\u0002\u108f\u1090\u0007\u0014\u0002\u0002\u1090\u1097\u0005\u0340\u01a1",
    "\u0002\u1091\u1094\u0007\u0360\u0002\u0002\u1092\u1095\u0005\u03b8\u01dd",
    "\u0002\u1093\u1095\u0005\u03b4\u01db\u0002\u1094\u1092\u0003\u0002\u0002",
    "\u0002\u1094\u1093\u0003\u0002\u0002\u0002\u1094\u1095\u0003\u0002\u0002",
    "\u0002\u1095\u1096\u0003\u0002\u0002\u0002\u1096\u1098\u0007\u0361\u0002",
    "\u0002\u1097\u1091\u0003\u0002\u0002\u0002\u1097\u1098\u0003\u0002\u0002",
    "\u0002\u1098\u0125\u0003\u0002\u0002\u0002\u1099\u109c\u0006\u00945",
    "\u0002\u109a\u109d\u0005\u0178\u00bd\u0002\u109b\u109d\u0005\u017a\u00be",
    "\u0002\u109c\u109a\u0003\u0002\u0002\u0002\u109c\u109b\u0003\u0002\u0002",
    "\u0002\u109d\u10a1\u0003\u0002\u0002\u0002\u109e\u109f\u0006\u00946",
    "\u0002\u109f\u10a1\u0005\u0192\u00ca\u0002\u10a0\u1099\u0003\u0002\u0002",
    "\u0002\u10a0\u109e\u0003\u0002\u0002\u0002\u10a1\u0127\u0003\u0002\u0002",
    "\u0002\u10a2\u10a3\u0007\u01e4\u0002\u0002\u10a3\u10a4\u0005\u03b4\u01db",
    "\u0002\u10a4\u0129\u0003\u0002\u0002\u0002\u10a5\u10aa\u0005\u017c\u00bf",
    "\u0002\u10a6\u10aa\u0005\u017e\u00c0\u0002\u10a7\u10aa\u0005\u0180\u00c1",
    "\u0002\u10a8\u10aa\u0005\u0182\u00c2\u0002\u10a9\u10a5\u0003\u0002\u0002",
    "\u0002\u10a9\u10a6\u0003\u0002\u0002\u0002\u10a9\u10a7\u0003\u0002\u0002",
    "\u0002\u10a9\u10a8\u0003\u0002\u0002\u0002\u10aa\u012b\u0003\u0002\u0002",
    "\u0002\u10ab\u10ac\u0007L\u0002\u0002\u10ac\u10ad\u0005\u0166\u00b4",
    "\u0002\u10ad\u10af\u0005\u0342\u01a2\u0002\u10ae\u10b0\u0005\u0150\u00a9",
    "\u0002\u10af\u10ae\u0003\u0002\u0002\u0002\u10af\u10b0\u0003\u0002\u0002",
    "\u0002\u10b0\u10b9\u0003\u0002\u0002\u0002\u10b1\u10b2\u0007\u0360\u0002",
    "\u0002\u10b2\u10b3\u0005\u03ac\u01d7\u0002\u10b3\u10b4\u0007\u0361\u0002",
    "\u0002\u10b4\u10b6\u0003\u0002\u0002\u0002\u10b5\u10b1\u0003\u0002\u0002",
    "\u0002\u10b5\u10b6\u0003\u0002\u0002\u0002\u10b6\u10b7\u0003\u0002\u0002",
    "\u0002\u10b7\u10ba\u0005\u0168\u00b5\u0002\u10b8\u10ba\u0005\u0188\u00c5",
    "\u0002\u10b9\u10b5\u0003\u0002\u0002\u0002\u10b9\u10b8\u0003\u0002\u0002",
    "\u0002\u10ba\u10bc\u0003\u0002\u0002\u0002\u10bb\u10bd\u0005\u0152\u00aa",
    "\u0002\u10bc\u10bb\u0003\u0002\u0002\u0002\u10bc\u10bd\u0003\u0002\u0002",
    "\u0002\u10bd\u012d\u0003\u0002\u0002\u0002\u10be\u10bf\u0007>\u0002",
    "\u0002\u10bf\u10c1\u0005\u01a0\u00d1\u0002\u10c0\u10c2\u0005\u0130\u0099",
    "\u0002\u10c1\u10c0\u0003\u0002\u0002\u0002\u10c2\u10c3\u0003\u0002\u0002",
    "\u0002\u10c3\u10c1\u0003\u0002\u0002\u0002\u10c3\u10c4\u0003\u0002\u0002",
    "\u0002\u10c4\u012f\u0003\u0002\u0002\u0002\u10c5\u10c6\u0007L\u0002",
    "\u0002\u10c6\u10c7\u0005\u0166\u00b4\u0002\u10c7\u10cb\u0005\u0342\u01a2",
    "\u0002\u10c8\u10c9\u0005\u033a\u019e\u0002\u10c9\u10ca\u0005\u03c6\u01e4",
    "\u0002\u10ca\u10cc\u0003\u0002\u0002\u0002\u10cb\u10c8\u0003\u0002\u0002",
    "\u0002\u10cb\u10cc\u0003\u0002\u0002\u0002\u10cc\u10ce\u0003\u0002\u0002",
    "\u0002\u10cd\u10cf\u0005\u0132\u009a\u0002\u10ce\u10cd\u0003\u0002\u0002",
    "\u0002\u10ce\u10cf\u0003\u0002\u0002\u0002\u10cf\u10d0\u0003\u0002\u0002",
    "\u0002\u10d0\u10d1\b\u0099\u0001\u0002\u10d1\u10d6\u0003\u0002\u0002",
    "\u0002\u10d2\u10d3\u0005\u0134\u009b\u0002\u10d3\u10d4\b\u0099\u0001",
    "\u0002\u10d4\u10d6\u0003\u0002\u0002\u0002\u10d5\u10c5\u0003\u0002\u0002",
    "\u0002\u10d5\u10d2\u0003\u0002\u0002\u0002\u10d6\u0131\u0003\u0002\u0002",
    "\u0002\u10d7\u10d9\u0007\u0087\u0002\u0002\u10d8\u10da\u0005\u01ca\u00e6",
    "\u0002\u10d9\u10d8\u0003\u0002\u0002\u0002\u10d9\u10da\u0003\u0002\u0002",
    "\u0002\u10da\u10db\u0003\u0002\u0002\u0002\u10db\u10dd\u0005\u01d0\u00e9",
    "\u0002\u10dc\u10de\u0005\u01e0\u00f1\u0002\u10dd\u10dc\u0003\u0002\u0002",
    "\u0002\u10dd\u10de\u0003\u0002\u0002\u0002\u10de\u10e0\u0003\u0002\u0002",
    "\u0002\u10df\u10e1\u0005\u01e2\u00f2\u0002\u10e0\u10df\u0003\u0002\u0002",
    "\u0002\u10e0\u10e1\u0003\u0002\u0002\u0002\u10e1\u10e3\u0003\u0002\u0002",
    "\u0002\u10e2\u10e4\u0005\u01dc\u00ef\u0002\u10e3\u10e2\u0003\u0002\u0002",
    "\u0002\u10e3\u10e4\u0003\u0002\u0002\u0002\u10e4\u10e6\u0003\u0002\u0002",
    "\u0002\u10e5\u10e7\u0005\u01de\u00f0\u0002\u10e6\u10e5\u0003\u0002\u0002",
    "\u0002\u10e6\u10e7\u0003\u0002\u0002\u0002\u10e7\u10e9\u0003\u0002\u0002",
    "\u0002\u10e8\u10ea\u0005\u0194\u00cb\u0002\u10e9\u10e8\u0003\u0002\u0002",
    "\u0002\u10e9\u10ea\u0003\u0002\u0002\u0002\u10ea\u10ec\u0003\u0002\u0002",
    "\u0002\u10eb\u10ed\u0005\u019a\u00ce\u0002\u10ec\u10eb\u0003\u0002\u0002",
    "\u0002\u10ec\u10ed\u0003\u0002\u0002\u0002\u10ed\u10ef\u0003\u0002\u0002",
    "\u0002\u10ee\u10f0\u0005\u019c\u00cf\u0002\u10ef\u10ee\u0003\u0002\u0002",
    "\u0002\u10ef\u10f0\u0003\u0002\u0002\u0002\u10f0\u10f2\u0003\u0002\u0002",
    "\u0002\u10f1\u10f3\u0005\u019e\u00d0\u0002\u10f2\u10f1\u0003\u0002\u0002",
    "\u0002\u10f2\u10f3\u0003\u0002\u0002\u0002\u10f3\u10f5\u0003\u0002\u0002",
    "\u0002\u10f4\u10f6\u0005\u01e8\u00f5\u0002\u10f5\u10f4\u0003\u0002\u0002",
    "\u0002\u10f5\u10f6\u0003\u0002\u0002\u0002\u10f6\u0133\u0003\u0002\u0002",
    "\u0002\u10f7\u10f8\u0005\u042c\u0217\u0002\u10f8\u0135\u0003\u0002\u0002",
    "\u0002\u10f9\u10fa\u0007L\u0002\u0002\u10fa\u10fe\u0007\u00f1\u0002",
    "\u0002\u10fb\u10ff\u0007\u01e0\u0002\u0002\u10fc\u10fd\u0007\u0227\u0002",
    "\u0002\u10fd\u10ff\u0007\u01e0\u0002\u0002\u10fe\u10fb\u0003\u0002\u0002",
    "\u0002\u10fe\u10fc\u0003\u0002\u0002\u0002\u10ff\u1100\u0003\u0002\u0002",
    "\u0002\u1100\u1102\u0005\u0386\u01c4\u0002\u1101\u1103\u0005\u0154\u00ab",
    "\u0002\u1102\u1101\u0003\u0002\u0002\u0002\u1102\u1103\u0003\u0002\u0002",
    "\u0002\u1103\u1105\u0003\u0002\u0002\u0002\u1104\u1106\u0005\u015e\u00b0",
    "\u0002\u1105\u1104\u0003\u0002\u0002\u0002\u1105\u1106\u0003\u0002\u0002",
    "\u0002\u1106\u1107\u0003\u0002\u0002\u0002\u1107\u1108\u0005\u0148\u00a5",
    "\u0002\u1108\u0137\u0003\u0002\u0002\u0002\u1109\u110a\u0006\u009d7",
    "\u0002\u110a\u110e\u0005\u013a\u009e\u0002\u110b\u110c\u0006\u009d8",
    "\u0002\u110c\u110e\u0005\u013c\u009f\u0002\u110d\u1109\u0003\u0002\u0002",
    "\u0002\u110d\u110b\u0003\u0002\u0002\u0002\u110e\u0139\u0003\u0002\u0002",
    "\u0002\u110f\u1110\u0007\\\u0002\u0002\u1110\u1112\u0007\u01d9\u0002",
    "\u0002\u1111\u1113\t.\u0002\u0002\u1112\u1111\u0003\u0002\u0002\u0002",
    "\u1112\u1113\u0003\u0002\u0002\u0002\u1113\u1115\u0003\u0002\u0002\u0002",
    "\u1114\u1116\u0007\u0227\u0002\u0002\u1115\u1114\u0003\u0002\u0002\u0002",
    "\u1115\u1116\u0003\u0002\u0002\u0002\u1116\u1117\u0003\u0002\u0002\u0002",
    "\u1117\u1118\u0007I\u0002\u0002\u1118\u111a\u0007\u0372\u0002\u0002",
    "\u1119\u111b\t\u0011\u0002\u0002\u111a\u1119\u0003\u0002\u0002\u0002",
    "\u111a\u111b\u0003\u0002\u0002\u0002\u111b\u111c\u0003\u0002\u0002\u0002",
    "\u111c\u111d\u0007N\u0002\u0002\u111d\u111e\u0007\u0096\u0002\u0002",
    "\u111e\u1124\u0005\u0342\u01a2\u0002\u111f\u1120\u0007r\u0002\u0002",
    "\u1120\u1121\u0007\u0360\u0002\u0002\u1121\u1122\u0005\u03a4\u01d3\u0002",
    "\u1122\u1123\u0007\u0361\u0002\u0002\u1123\u1125\u0003\u0002\u0002\u0002",
    "\u1124\u111f\u0003\u0002\u0002\u0002\u1124\u1125\u0003\u0002\u0002\u0002",
    "\u1125\u1129\u0003\u0002\u0002\u0002\u1126\u1127\u0007\u0019\u0002\u0002",
    "\u1127\u1128\u0007\u0088\u0002\u0002\u1128\u112a\u0005\u0368\u01b5\u0002",
    "\u1129\u1126\u0003\u0002\u0002\u0002\u1129\u112a\u0003\u0002\u0002\u0002",
    "\u112a\u1131\u0003\u0002\u0002\u0002\u112b\u112d\t/\u0002\u0002\u112c",
    "\u112e\u0005\u01d6\u00ec\u0002\u112d\u112c\u0003\u0002\u0002\u0002\u112e",
    "\u112f\u0003\u0002\u0002\u0002\u112f\u112d\u0003\u0002\u0002\u0002\u112f",
    "\u1130\u0003\u0002\u0002\u0002\u1130\u1132\u0003\u0002\u0002\u0002\u1131",
    "\u112b\u0003\u0002\u0002\u0002\u1131\u1132\u0003\u0002\u0002\u0002\u1132",
    "\u1139\u0003\u0002\u0002\u0002\u1133\u1135\u0007[\u0002\u0002\u1134",
    "\u1136\u0005\u01d8\u00ed\u0002\u1135\u1134\u0003\u0002\u0002\u0002\u1136",
    "\u1137\u0003\u0002\u0002\u0002\u1137\u1135\u0003\u0002\u0002\u0002\u1137",
    "\u1138\u0003\u0002\u0002\u0002\u1138\u113a\u0003\u0002\u0002\u0002\u1139",
    "\u1133\u0003\u0002\u0002\u0002\u1139\u113a\u0003\u0002\u0002\u0002\u113a",
    "\u113f\u0003\u0002\u0002\u0002\u113b\u113c\u0007F\u0002\u0002\u113c",
    "\u113d\u0005\u0382\u01c2\u0002\u113d\u113e\t0\u0002\u0002\u113e\u1140",
    "\u0003\u0002\u0002\u0002\u113f\u113b\u0003\u0002\u0002\u0002\u113f\u1140",
    "\u0003\u0002\u0002\u0002\u1140\u114c\u0003\u0002\u0002\u0002\u1141\u1142",
    "\u0007\u0360\u0002\u0002\u1142\u1147\u0005\u016e\u00b8\u0002\u1143\u1144",
    "\u0007\u0364\u0002\u0002\u1144\u1146\u0005\u016e\u00b8\u0002\u1145\u1143",
    "\u0003\u0002\u0002\u0002\u1146\u1149\u0003\u0002\u0002\u0002\u1147\u1145",
    "\u0003\u0002\u0002\u0002\u1147\u1148\u0003\u0002\u0002\u0002\u1148\u114a",
    "\u0003\u0002\u0002\u0002\u1149\u1147\u0003\u0002\u0002\u0002\u114a\u114b",
    "\u0007\u0361\u0002\u0002\u114b\u114d\u0003\u0002\u0002\u0002\u114c\u1141",
    "\u0003\u0002\u0002\u0002\u114c\u114d\u0003\u0002\u0002\u0002\u114d\u114f",
    "\u0003\u0002\u0002\u0002\u114e\u1150\u0005\u0188\u00c5\u0002\u114f\u114e",
    "\u0003\u0002\u0002\u0002\u114f\u1150\u0003\u0002\u0002\u0002\u1150\u013b",
    "\u0003\u0002\u0002\u0002\u1151\u1152\u0007\\\u0002\u0002\u1152\u1154",
    "\u0007\u01d9\u0002\u0002\u1153\u1155\u0007\u0227\u0002\u0002\u1154\u1153",
    "\u0003\u0002\u0002\u0002\u1154\u1155\u0003\u0002\u0002\u0002\u1155\u1156",
    "\u0003\u0002\u0002\u0002\u1156\u1157\u0007\u00d8\u0002\u0002\u1157\u1158",
    "\u0005\u0386\u01c4\u0002\u1158\u115a\u0005\u013e\u00a0\u0002\u1159\u115b",
    "\u0005\u033a\u019e\u0002\u115a\u1159\u0003\u0002\u0002\u0002\u115a\u115b",
    "\u0003\u0002\u0002\u0002\u115b\u1160\u0003\u0002\u0002\u0002\u115c\u115d",
    "\u0007\u0360\u0002\u0002\u115d\u115e\u0005\u03a4\u01d3\u0002\u115e\u115f",
    "\u0007\u0361\u0002\u0002\u115f\u1161\u0003\u0002\u0002\u0002\u1160\u115c",
    "\u0003\u0002\u0002\u0002\u1160\u1161\u0003\u0002\u0002\u0002\u1161\u013d",
    "\u0003\u0002\u0002\u0002\u1162\u1164\u0007\u00f1\u0002\u0002\u1163\u1162",
    "\u0003\u0002\u0002\u0002\u1163\u1164\u0003\u0002\u0002\u0002\u1164\u1165",
    "\u0003\u0002\u0002\u0002\u1165\u1166\u0007N\u0002\u0002\u1166\u1169",
    "\u0007\u0096\u0002\u0002\u1167\u1169\u0005\u0140\u00a1\u0002\u1168\u1163",
    "\u0003\u0002\u0002\u0002\u1168\u1167\u0003\u0002\u0002\u0002\u1169\u116a",
    "\u0003\u0002\u0002\u0002\u116a\u116b\u0005\u0342\u01a2\u0002\u116b\u013f",
    "\u0003\u0002\u0002\u0002\u116c\u116d\u0005\u042c\u0217\u0002\u116d\u116e",
    "\b\u00a1\u0001\u0002\u116e\u0141\u0003\u0002\u0002\u0002\u116f\u1170",
    "\u0007\\\u0002\u0002\u1170\u1172\u0007\u02d9\u0002\u0002\u1171\u1173",
    "\t.\u0002\u0002\u1172\u1171\u0003\u0002\u0002\u0002\u1172\u1173\u0003",
    "\u0002\u0002\u0002\u1173\u1175\u0003\u0002\u0002\u0002\u1174\u1176\u0007",
    "\u0227\u0002\u0002\u1175\u1174\u0003\u0002\u0002\u0002\u1175\u1176\u0003",
    "\u0002\u0002\u0002\u1176\u1177\u0003\u0002\u0002\u0002\u1177\u1178\u0007",
    "I\u0002\u0002\u1178\u117a\u0007\u0372\u0002\u0002\u1179\u117b\t\u0011",
    "\u0002\u0002\u117a\u1179\u0003\u0002\u0002\u0002\u117a\u117b\u0003\u0002",
    "\u0002\u0002\u117b\u117c\u0003\u0002\u0002\u0002\u117c\u117d\u0007N",
    "\u0002\u0002\u117d\u117e\u0007\u0096\u0002\u0002\u117e\u1182\u0005\u0342",
    "\u01a2\u0002\u117f\u1180\u0007\u0019\u0002\u0002\u1180\u1181\u0007\u0088",
    "\u0002\u0002\u1181\u1183\u0005\u0368\u01b5\u0002\u1182\u117f\u0003\u0002",
    "\u0002\u0002\u1182\u1183\u0003\u0002\u0002\u0002\u1183\u118a\u0003\u0002",
    "\u0002\u0002\u1184\u1185\u0007\u0291\u0002\u0002\u1185\u1186\u0007\u0210",
    "\u0002\u0002\u1186\u1187\u0007\u0013\u0002\u0002\u1187\u1188\u0007\u0357",
    "\u0002\u0002\u1188\u1189\u0007\u0372\u0002\u0002\u1189\u118b\u0007\u0356",
    "\u0002\u0002\u118a\u1184\u0003\u0002\u0002\u0002\u118a\u118b\u0003\u0002",
    "\u0002\u0002\u118b\u1190\u0003\u0002\u0002\u0002\u118c\u118d\u0007F",
    "\u0002\u0002\u118d\u118e\u0005\u0382\u01c2\u0002\u118e\u118f\t0\u0002",
    "\u0002\u118f\u1191\u0003\u0002\u0002\u0002\u1190\u118c\u0003\u0002\u0002",
    "\u0002\u1190\u1191\u0003\u0002\u0002\u0002\u1191\u119d\u0003\u0002\u0002",
    "\u0002\u1192\u1193\u0007\u0360\u0002\u0002\u1193\u1198\u0005\u016e\u00b8",
    "\u0002\u1194\u1195\u0007\u0364\u0002\u0002\u1195\u1197\u0005\u016e\u00b8",
    "\u0002\u1196\u1194\u0003\u0002\u0002\u0002\u1197\u119a\u0003\u0002\u0002",
    "\u0002\u1198\u1196\u0003\u0002\u0002\u0002\u1198\u1199\u0003\u0002\u0002",
    "\u0002\u1199\u119b\u0003\u0002\u0002\u0002\u119a\u1198\u0003\u0002\u0002",
    "\u0002\u119b\u119c\u0007\u0361\u0002\u0002\u119c\u119e\u0003\u0002\u0002",
    "\u0002\u119d\u1192\u0003\u0002\u0002\u0002\u119d\u119e\u0003\u0002\u0002",
    "\u0002\u119e\u11a8\u0003\u0002\u0002\u0002\u119f\u11a0\u0007\u0088\u0002",
    "\u0002\u11a0\u11a5\u0005\u016c\u00b7\u0002\u11a1\u11a2\u0007\u0364\u0002",
    "\u0002\u11a2\u11a4\u0005\u016c\u00b7\u0002\u11a3\u11a1\u0003\u0002\u0002",
    "\u0002\u11a4\u11a7\u0003\u0002\u0002\u0002\u11a5\u11a3\u0003\u0002\u0002",
    "\u0002\u11a5\u11a6\u0003\u0002\u0002\u0002\u11a6\u11a9\u0003\u0002\u0002",
    "\u0002\u11a7\u11a5\u0003\u0002\u0002\u0002\u11a8\u119f\u0003\u0002\u0002",
    "\u0002\u11a8\u11a9\u0003\u0002\u0002\u0002\u11a9\u0143\u0003\u0002\u0002",
    "\u0002\u11aa\u11ab\u0006\u00a39\u0002\u11ab\u11ac\u0007\u0246\u0002",
    "\u0002\u11ac\u11ad\u0007N\u0002\u0002\u11ad\u11af\u0005\u018c\u00c7",
    "\u0002\u11ae\u11b0\u0005\u0170\u00b9\u0002\u11af\u11ae\u0003\u0002\u0002",
    "\u0002\u11af\u11b0\u0003\u0002\u0002\u0002\u11b0\u11b2\u0003\u0002\u0002",
    "\u0002\u11b1\u11b3\u0005\u0172\u00ba\u0002\u11b2\u11b1\u0003\u0002\u0002",
    "\u0002\u11b2\u11b3\u0003\u0002\u0002\u0002\u11b3\u11b5\u0003\u0002\u0002",
    "\u0002\u11b4\u11b6\u0005\u0174\u00bb\u0002\u11b5\u11b4\u0003\u0002\u0002",
    "\u0002\u11b5\u11b6\u0003\u0002\u0002\u0002\u11b6\u11b7\u0003\u0002\u0002",
    "\u0002\u11b7\u11b8\b\u00a3\u0001\u0002\u11b8\u0145\u0003\u0002\u0002",
    "\u0002\u11b9\u11bb\u0007~\u0002\u0002\u11ba\u11bc\t1\u0002\u0002\u11bb",
    "\u11ba\u0003\u0002\u0002\u0002\u11bb\u11bc\u0003\u0002\u0002\u0002\u11bc",
    "\u11be\u0003\u0002\u0002\u0002\u11bd\u11bf\u0007N\u0002\u0002\u11be",
    "\u11bd\u0003\u0002\u0002\u0002\u11be\u11bf\u0003\u0002\u0002\u0002\u11bf",
    "\u11c0\u0003\u0002\u0002\u0002\u11c0\u11c6\u0005\u0342\u01a2\u0002\u11c1",
    "\u11c2\u0007r\u0002\u0002\u11c2\u11c3\u0007\u0360\u0002\u0002\u11c3",
    "\u11c4\u0005\u03a4\u01d3\u0002\u11c4\u11c5\u0007\u0361\u0002\u0002\u11c5",
    "\u11c7\u0003\u0002\u0002\u0002\u11c6\u11c1\u0003\u0002\u0002\u0002\u11c6",
    "\u11c7\u0003\u0002\u0002\u0002\u11c7\u11d8\u0003\u0002\u0002\u0002\u11c8",
    "\u11c9\u0007\u0360\u0002\u0002\u11c9\u11ca\u0005\u03a4\u01d3\u0002\u11ca",
    "\u11cb\u0007\u0361\u0002\u0002\u11cb\u11cd\u0003\u0002\u0002\u0002\u11cc",
    "\u11c8\u0003\u0002\u0002\u0002\u11cc\u11cd\u0003\u0002\u0002\u0002\u11cd",
    "\u11ce\u0003\u0002\u0002\u0002\u11ce\u11d9\u0005\u0168\u00b5\u0002\u11cf",
    "\u11d0\u0007\u0088\u0002\u0002\u11d0\u11d5\u0005\u016c\u00b7\u0002\u11d1",
    "\u11d2\u0007\u0364\u0002\u0002\u11d2\u11d4\u0005\u016c\u00b7\u0002\u11d3",
    "\u11d1\u0003\u0002\u0002\u0002\u11d4\u11d7\u0003\u0002\u0002\u0002\u11d5",
    "\u11d3\u0003\u0002\u0002\u0002\u11d5\u11d6\u0003\u0002\u0002\u0002\u11d6",
    "\u11d9\u0003\u0002\u0002\u0002\u11d7\u11d5\u0003\u0002\u0002\u0002\u11d8",
    "\u11cc\u0003\u0002\u0002\u0002\u11d8\u11cf\u0003\u0002\u0002\u0002\u11d9",
    "\u0147\u0003\u0002\u0002\u0002\u11da\u11dc\u0005\u01c2\u00e2\u0002\u11db",
    "\u11dd\u0005\u0176\u00bc\u0002\u11dc\u11db\u0003\u0002\u0002\u0002\u11dc",
    "\u11dd\u0003\u0002\u0002\u0002\u11dd\u1212\u0003\u0002\u0002\u0002\u11de",
    "\u11e0\u0005\u01be\u00e0\u0002\u11df\u11e1\u0005\u0176\u00bc\u0002\u11e0",
    "\u11df\u0003\u0002\u0002\u0002\u11e0\u11e1\u0003\u0002\u0002\u0002\u11e1",
    "\u1212\u0003\u0002\u0002\u0002\u11e2\u11e4\u0005\u01c4\u00e3\u0002\u11e3",
    "\u11e5\u0005\u01c8\u00e5\u0002\u11e4\u11e3\u0003\u0002\u0002\u0002\u11e5",
    "\u11e6\u0003\u0002\u0002\u0002\u11e6\u11e4\u0003\u0002\u0002\u0002\u11e6",
    "\u11e7\u0003\u0002\u0002\u0002\u11e7\u11f0\u0003\u0002\u0002\u0002\u11e8",
    "\u11ea\u0007\u009e\u0002\u0002\u11e9\u11eb\t2\u0002\u0002\u11ea\u11e9",
    "\u0003\u0002\u0002\u0002\u11ea\u11eb\u0003\u0002\u0002\u0002\u11eb\u11ee",
    "\u0003\u0002\u0002\u0002\u11ec\u11ef\u0005\u01c2\u00e2\u0002\u11ed\u11ef",
    "\u0005\u01be\u00e0\u0002\u11ee\u11ec\u0003\u0002\u0002\u0002\u11ee\u11ed",
    "\u0003\u0002\u0002\u0002\u11ef\u11f1\u0003\u0002\u0002\u0002\u11f0\u11e8",
    "\u0003\u0002\u0002\u0002\u11f0\u11f1\u0003\u0002\u0002\u0002\u11f1\u11f3",
    "\u0003\u0002\u0002\u0002\u11f2\u11f4\u0005\u0194\u00cb\u0002\u11f3\u11f2",
    "\u0003\u0002\u0002\u0002\u11f3\u11f4\u0003\u0002\u0002\u0002\u11f4\u11f6",
    "\u0003\u0002\u0002\u0002\u11f5\u11f7\u0005\u01e8\u00f5\u0002\u11f6\u11f5",
    "\u0003\u0002\u0002\u0002\u11f6\u11f7\u0003\u0002\u0002\u0002\u11f7\u11f9",
    "\u0003\u0002\u0002\u0002\u11f8\u11fa\u0005\u0176\u00bc\u0002\u11f9\u11f8",
    "\u0003\u0002\u0002\u0002\u11f9\u11fa\u0003\u0002\u0002\u0002\u11fa\u1212",
    "\u0003\u0002\u0002\u0002\u11fb\u11fd\u0005\u01c0\u00e1\u0002\u11fc\u11fe",
    "\u0005\u01c6\u00e4\u0002\u11fd\u11fc\u0003\u0002\u0002\u0002\u11fe\u11ff",
    "\u0003\u0002\u0002\u0002\u11ff\u11fd\u0003\u0002\u0002\u0002\u11ff\u1200",
    "\u0003\u0002\u0002\u0002\u1200\u1206\u0003\u0002\u0002\u0002\u1201\u1203",
    "\u0007\u009e\u0002\u0002\u1202\u1204\t2\u0002\u0002\u1203\u1202\u0003",
    "\u0002\u0002\u0002\u1203\u1204\u0003\u0002\u0002\u0002\u1204\u1205\u0003",
    "\u0002\u0002\u0002\u1205\u1207\u0005\u01be\u00e0\u0002\u1206\u1201\u0003",
    "\u0002\u0002\u0002\u1206\u1207\u0003\u0002\u0002\u0002\u1207\u1209\u0003",
    "\u0002\u0002\u0002\u1208\u120a\u0005\u0194\u00cb\u0002\u1209\u1208\u0003",
    "\u0002\u0002\u0002\u1209\u120a\u0003\u0002\u0002\u0002\u120a\u120c\u0003",
    "\u0002\u0002\u0002\u120b\u120d\u0005\u01e8\u00f5\u0002\u120c\u120b\u0003",
    "\u0002\u0002\u0002\u120c\u120d\u0003\u0002\u0002\u0002\u120d\u120f\u0003",
    "\u0002\u0002\u0002\u120e\u1210\u0005\u0176\u00bc\u0002\u120f\u120e\u0003",
    "\u0002\u0002\u0002\u120f\u1210\u0003\u0002\u0002\u0002\u1210\u1212\u0003",
    "\u0002\u0002\u0002\u1211\u11da\u0003\u0002\u0002\u0002\u1211\u11de\u0003",
    "\u0002\u0002\u0002\u1211\u11e2\u0003\u0002\u0002\u0002\u1211\u11fb\u0003",
    "\u0002\u0002\u0002\u1212\u0149\u0003\u0002\u0002\u0002\u1213\u1216\u0006",
    "\u00a6:\u0002\u1214\u1217\u0005\u0184\u00c3\u0002\u1215\u1217\u0005",
    "\u0186\u00c4\u0002\u1216\u1214\u0003\u0002\u0002\u0002\u1216\u1215\u0003",
    "\u0002\u0002\u0002\u1217\u121b\u0003\u0002\u0002\u0002\u1218\u1219\u0006",
    "\u00a6;\u0002\u1219\u121b\u0005\u018a\u00c6\u0002\u121a\u1213\u0003",
    "\u0002\u0002\u0002\u121a\u1218\u0003\u0002\u0002\u0002\u121b\u014b\u0003",
    "\u0002\u0002\u0002\u121c\u121d\u0006\u00a7<\u0002\u121d\u121e\u0007",
    "\u00aa\u0002\u0002\u121e\u1223\u0005\u014e\u00a8\u0002\u121f\u1220\u0007",
    "\u0364\u0002\u0002\u1220\u1222\u0005\u014e\u00a8\u0002\u1221\u121f\u0003",
    "\u0002\u0002\u0002\u1222\u1225\u0003\u0002\u0002\u0002\u1223\u1221\u0003",
    "\u0002\u0002\u0002\u1223\u1224\u0003\u0002\u0002\u0002\u1224\u1227\u0003",
    "\u0002\u0002\u0002\u1225\u1223\u0003\u0002\u0002\u0002\u1226\u1228\u0005",
    "\u0148\u00a5\u0002\u1227\u1226\u0003\u0002\u0002\u0002\u1227\u1228\u0003",
    "\u0002\u0002\u0002\u1228\u1229\u0003\u0002\u0002\u0002\u1229\u122a\b",
    "\u00a7\u0001\u0002\u122a\u014d\u0003\u0002\u0002\u0002\u122b\u122c\u0005",
    "\u0376\u01bc\u0002\u122c\u122d\u0007\u000e\u0002\u0002\u122d\u122e\u0005",
    "\u01be\u00e0\u0002\u122e\u014f\u0003\u0002\u0002\u0002\u122f\u1230\u0006",
    "\u00a9=\u0002\u1230\u1231\u0007r\u0002\u0002\u1231\u1232\u0007\u0360",
    "\u0002\u0002\u1232\u1233\u0005\u03a4\u01d3\u0002\u1233\u1234\u0007\u0361",
    "\u0002\u0002\u1234\u1238\u0003\u0002\u0002\u0002\u1235\u1236\u0006\u00a9",
    ">\u0002\u1236\u1238\u0005\u033a\u019e\u0002\u1237\u122f\u0003\u0002",
    "\u0002\u0002\u1237\u1235\u0003\u0002\u0002\u0002\u1238\u0151\u0003\u0002",
    "\u0002\u0002\u1239\u123a\u0007i\u0002\u0002\u123a\u123b\u0007\u01e6",
    "\u0002\u0002\u123b\u123c\u0007R\u0002\u0002\u123c\u123d\u0007\u00a2",
    "\u0002\u0002\u123d\u1242\u0005\u016c\u00b7\u0002\u123e\u123f\u0007\u0364",
    "\u0002\u0002\u123f\u1241\u0005\u016c\u00b7\u0002\u1240\u123e\u0003\u0002",
    "\u0002\u0002\u1241\u1244\u0003\u0002\u0002\u0002\u1242\u1240\u0003\u0002",
    "\u0002\u0002\u1242\u1243\u0003\u0002\u0002\u0002\u1243\u0153\u0003\u0002",
    "\u0002\u0002\u1244\u1242\u0003\u0002\u0002\u0002\u1245\u1246\u0007\u0290",
    "\u0002\u0002\u1246\u1247\u0007\u033f\u0002\u0002\u1247\u1248\u0007\u00c9",
    "\u0002\u0002\u1248\u1249\u0005\u0156\u00ac\u0002\u1249\u0155\u0003\u0002",
    "\u0002\u0002\u124a\u124b\u0007\u01fd\u0002\u0002\u124b\u124c\u0007\u0097",
    "\u0002\u0002\u124c\u124d\u0007\u0013\u0002\u0002\u124d\u1251\u0005\u0386",
    "\u01c4\u0002\u124e\u124f\u00075\u0002\u0002\u124f\u1250\u0007\u0013",
    "\u0002\u0002\u1250\u1252\u0005\u0386\u01c4\u0002\u1251\u124e\u0003\u0002",
    "\u0002\u0002\u1251\u1252\u0003\u0002\u0002\u0002\u1252\u1254\u0003\u0002",
    "\u0002\u0002\u1253\u124a\u0003\u0002\u0002\u0002\u1253\u1254\u0003\u0002",
    "\u0002\u0002\u1254\u125a\u0003\u0002\u0002\u0002\u1255\u1256\u0007\u00c0",
    "\u0002\u0002\u1256\u1257\u0007\u00db\u0002\u0002\u1257\u1258\u0007\u0097",
    "\u0002\u0002\u1258\u1259\u0007\u0013\u0002\u0002\u1259\u125b\u0005\u0386",
    "\u01c4\u0002\u125a\u1255\u0003\u0002\u0002\u0002\u125a\u125b\u0003\u0002",
    "\u0002\u0002\u125b\u1261\u0003\u0002\u0002\u0002\u125c\u125d\u0007\u00e3",
    "\u0002\u0002\u125d\u125e\u0007S\u0002\u0002\u125e\u125f\u0007\u0097",
    "\u0002\u0002\u125f\u1260\u0007\u0013\u0002\u0002\u1260\u1262\u0005\u0386",
    "\u01c4\u0002\u1261\u125c\u0003\u0002\u0002\u0002\u1261\u1262\u0003\u0002",
    "\u0002\u0002\u1262\u1267\u0003\u0002\u0002\u0002\u1263\u1264\u0007[",
    "\u0002\u0002\u1264\u1265\u0007\u0097\u0002\u0002\u1265\u1266\u0007\u0013",
    "\u0002\u0002\u1266\u1268\u0005\u0386\u01c4\u0002\u1267\u1263\u0003\u0002",
    "\u0002\u0002\u1267\u1268\u0003\u0002\u0002\u0002\u1268\u0157\u0003\u0002",
    "\u0002\u0002\u1269\u126a\u0007\u0290\u0002\u0002\u126a\u126b\u0007\u033f",
    "\u0002\u0002\u126b\u126c\u0007\u0112\u0002\u0002\u126c\u126d\u0005\u015a",
    "\u00ae\u0002\u126d\u0159\u0003\u0002\u0002\u0002\u126e\u1275\u0005\u0386",
    "\u01c4\u0002\u126f\u1270\u0007\u00aa\u0002\u0002\u1270\u1271\u0007\u0113",
    "\u0002\u0002\u1271\u1272\u0007\u0360\u0002\u0002\u1272\u1273\u0005L",
    "\'\u0002\u1273\u1274\u0007\u0361\u0002\u0002\u1274\u1276\u0003\u0002",
    "\u0002\u0002\u1275\u126f\u0003\u0002\u0002\u0002\u1275\u1276\u0003\u0002",
    "\u0002\u0002\u1276\u015b\u0003\u0002\u0002\u0002\u1277\u1278\u0007\u0290",
    "\u0002\u0002\u1278\u127e\u0007\u033f\u0002\u0002\u1279\u127f\u0007\u00c9",
    "\u0002\u0002\u127a\u127b\u0007\u00c9\u0002\u0002\u127b\u127f\u0005\u0156",
    "\u00ac\u0002\u127c\u127d\u0007\u0112\u0002\u0002\u127d\u127f\u0005\u015a",
    "\u00ae\u0002\u127e\u1279\u0003\u0002\u0002\u0002\u127e\u127a\u0003\u0002",
    "\u0002\u0002\u127e\u127c\u0003\u0002\u0002\u0002\u127f\u015d\u0003\u0002",
    "\u0002\u0002\u1280\u1281\u0007\u02b3\u0002\u0002\u1281\u1282\u0007\u000e",
    "\u0002\u0002\u1282\u1283\u0005\u0160\u00b1\u0002\u1283\u015f\u0003\u0002",
    "\u0002\u0002\u1284\u129e\u0005\u0162\u00b2\u0002\u1285\u128a\u0007\u0321",
    "\u0002\u0002\u1286\u1287\u0007\u0360\u0002\u0002\u1287\u1288\u0005\u0376",
    "\u01bc\u0002\u1288\u1289\u0007\u0361\u0002\u0002\u1289\u128b\u0003\u0002",
    "\u0002\u0002\u128a\u1286\u0003\u0002\u0002\u0002\u128a\u128b\u0003\u0002",
    "\u0002\u0002\u128b\u129e\u0003\u0002\u0002\u0002\u128c\u128d\u0007\u00da",
    "\u0002\u0002\u128d\u128e\u0005\u0386\u01c4\u0002\u128e\u128f\u0007\u00f0",
    "\u0002\u0002\u128f\u1295\u0005\u0386\u01c4\u0002\u1290\u1291\u0007\u00d9",
    "\u0002\u0002\u1291\u1292\u0005\u0386\u01c4\u0002\u1292\u1293\u0007\u00ef",
    "\u0002\u0002\u1293\u1294\u0005\u0386\u01c4\u0002\u1294\u1296\u0003\u0002",
    "\u0002\u0002\u1295\u1290\u0003\u0002\u0002\u0002\u1295\u1296\u0003\u0002",
    "\u0002\u0002\u1296\u129e\u0003\u0002\u0002\u0002\u1297\u129a\u0007\u031a",
    "\u0002\u0002\u1298\u129b\u0005\u009aN\u0002\u1299\u129b\u0005\u009c",
    "O\u0002\u129a\u1298\u0003\u0002\u0002\u0002\u129a\u1299\u0003\u0002",
    "\u0002\u0002\u129a\u129b\u0003\u0002\u0002\u0002\u129b\u129e\u0003\u0002",
    "\u0002\u0002\u129c\u129e\u0005\u0376\u01bc\u0002\u129d\u1284\u0003\u0002",
    "\u0002\u0002\u129d\u1285\u0003\u0002\u0002\u0002\u129d\u128c\u0003\u0002",
    "\u0002\u0002\u129d\u1297\u0003\u0002\u0002\u0002\u129d\u129c\u0003\u0002",
    "\u0002\u0002\u129e\u0161\u0003\u0002\u0002\u0002\u129f\u12a0\t3\u0002",
    "\u0002\u12a0\u0163\u0003\u0002\u0002\u0002\u12a1\u12a2\u0007\u02b3\u0002",
    "\u0002\u12a2\u12a3\u0007\u0013\u0002\u0002\u12a3\u12aa\u0005\u0386\u01c4",
    "\u0002\u12a4\u12a5\u0007\u00aa\u0002\u0002\u12a5\u12a6\u0007\u0113\u0002",
    "\u0002\u12a6\u12a7\u0007\u0360\u0002\u0002\u12a7\u12a8\u0005L\'\u0002",
    "\u12a8\u12a9\u0007\u0361\u0002\u0002\u12a9\u12ab\u0003\u0002\u0002\u0002",
    "\u12aa\u12a4\u0003\u0002\u0002\u0002\u12aa\u12ab\u0003\u0002\u0002\u0002",
    "\u12ab\u0165\u0003\u0002\u0002\u0002\u12ac\u12ae\u0006\u00b4?\u0002",
    "\u12ad\u12af\t4\u0002\u0002\u12ae\u12ad\u0003\u0002\u0002\u0002\u12ae",
    "\u12af\u0003\u0002\u0002\u0002\u12af\u12b1\u0003\u0002\u0002\u0002\u12b0",
    "\u12b2\u0007F\u0002\u0002\u12b1\u12b0\u0003\u0002\u0002\u0002\u12b1",
    "\u12b2\u0003\u0002\u0002\u0002\u12b2\u12b4\u0003\u0002\u0002\u0002\u12b3",
    "\u12b5\u0007N\u0002\u0002\u12b4\u12b3\u0003\u0002\u0002\u0002\u12b4",
    "\u12b5\u0003\u0002\u0002\u0002\u12b5\u12bc\u0003\u0002\u0002\u0002\u12b6",
    "\u12b7\u0006\u00b4@\u0002\u12b7\u12b9\t5\u0002\u0002\u12b8\u12ba\u0007",
    "\u0096\u0002\u0002\u12b9\u12b8\u0003\u0002\u0002\u0002\u12b9\u12ba\u0003",
    "\u0002\u0002\u0002\u12ba\u12bc\u0003\u0002\u0002\u0002\u12bb\u12ac\u0003",
    "\u0002\u0002\u0002\u12bb\u12b6\u0003\u0002\u0002\u0002\u12bc\u0167\u0003",
    "\u0002\u0002\u0002\u12bd\u12c6\u0005\u01c2\u00e2\u0002\u12be\u12c6\u0005",
    "\u014c\u00a7\u0002\u12bf\u12c6\u0005\u016a\u00b6\u0002\u12c0\u12c1\u0005",
    "\u042a\u0216\u0002\u12c1\u12c2\b\u00b5\u0001\u0002\u12c2\u12c6\u0003",
    "\u0002\u0002\u0002\u12c3\u12c4\t6\u0002\u0002\u12c4\u12c6\b\u00b5\u0001",
    "\u0002\u12c5\u12bd\u0003\u0002\u0002\u0002\u12c5\u12be\u0003\u0002\u0002",
    "\u0002\u12c5\u12bf\u0003\u0002\u0002\u0002\u12c5\u12c0\u0003\u0002\u0002",
    "\u0002\u12c5\u12c3\u0003\u0002\u0002\u0002\u12c6\u0169\u0003\u0002\u0002",
    "\u0002\u12c7\u12c8\t6\u0002\u0002\u12c8\u12c9\u0007\u0360\u0002\u0002",
    "\u12c9\u12ca\u0005\u03b6\u01dc\u0002\u12ca\u12d2\u0007\u0361\u0002\u0002",
    "\u12cb\u12cc\u0007\u0364\u0002\u0002\u12cc\u12cd\u0007\u0360\u0002\u0002",
    "\u12cd\u12ce\u0005\u03b6\u01dc\u0002\u12ce\u12cf\u0007\u0361\u0002\u0002",
    "\u12cf\u12d1\u0003\u0002\u0002\u0002\u12d0\u12cb\u0003\u0002\u0002\u0002",
    "\u12d1\u12d4\u0003\u0002\u0002\u0002\u12d2\u12d0\u0003\u0002\u0002\u0002",
    "\u12d2\u12d3\u0003\u0002\u0002\u0002\u12d3\u016b\u0003\u0002\u0002\u0002",
    "\u12d4\u12d2\u0003\u0002\u0002\u0002\u12d5\u12d6\u0005\u034a\u01a6\u0002",
    "\u12d6\u12d9\u0007\u0355\u0002\u0002\u12d7\u12da\u0005\u03f8\u01fd\u0002",
    "\u12d8\u12da\u0007(\u0002\u0002\u12d9\u12d7\u0003\u0002\u0002\u0002",
    "\u12d9\u12d8\u0003\u0002\u0002\u0002\u12da\u12df\u0003\u0002\u0002\u0002",
    "\u12db\u12dc\u0005\u034a\u01a6\u0002\u12dc\u12dd\b\u00b7\u0001\u0002",
    "\u12dd\u12df\u0003\u0002\u0002\u0002\u12de\u12d5\u0003\u0002\u0002\u0002",
    "\u12de\u12db\u0003\u0002\u0002\u0002\u12df\u016d\u0003\u0002\u0002\u0002",
    "\u12e0\u12e6\u0005\u0376\u01bc\u0002\u12e1\u12e6\u0007\u037d\u0002\u0002",
    "\u12e2\u12e3\u0005\u042a\u0216\u0002\u12e3\u12e4\b\u00b8\u0001\u0002",
    "\u12e4\u12e6\u0003\u0002\u0002\u0002\u12e5\u12e0\u0003\u0002\u0002\u0002",
    "\u12e5\u12e1\u0003\u0002\u0002\u0002\u12e5\u12e2\u0003\u0002\u0002\u0002",
    "\u12e6\u016f\u0003\u0002\u0002\u0002\u12e7\u12e8\u0007\u00a5\u0002\u0002",
    "\u12e8\u12e9\u0005\u01a4\u00d3\u0002\u12e9\u12ef\u0007i\u0002\u0002",
    "\u12ea\u12eb\u0007\u0360\u0002\u0002\u12eb\u12ec\u0005\u03f8\u01fd\u0002",
    "\u12ec\u12ed\u0007\u0361\u0002\u0002\u12ed\u12f0\u0003\u0002\u0002\u0002",
    "\u12ee\u12f0\u0005\u03f8\u01fd\u0002\u12ef\u12ea\u0003\u0002\u0002\u0002",
    "\u12ef\u12ee\u0003\u0002\u0002\u0002\u12f0\u0171\u0003\u0002\u0002\u0002",
    "\u12f1\u12f2\u0007\u00a7\u0002\u0002\u12f2\u12f3\u0007\u00e4\u0002\u0002",
    "\u12f3\u12f4\u0007\u0098\u0002\u0002\u12f4\u12f5\u0007\u00a2\u0002\u0002",
    "\u12f5\u12f6\u0007\u0088\u0002\u0002\u12f6\u12fb\u0005\u0190\u00c9\u0002",
    "\u12f7\u12f8\u0007\u0364\u0002\u0002\u12f8\u12fa\u0005\u0190\u00c9\u0002",
    "\u12f9\u12f7\u0003\u0002\u0002\u0002\u12fa\u12fd\u0003\u0002\u0002\u0002",
    "\u12fb\u12f9\u0003\u0002\u0002\u0002\u12fb\u12fc\u0003\u0002\u0002\u0002",
    "\u12fc\u12ff\u0003\u0002\u0002\u0002\u12fd\u12fb\u0003\u0002\u0002\u0002",
    "\u12fe\u1300\u0007*\u0002\u0002\u12ff\u12fe\u0003\u0002\u0002\u0002",
    "\u12ff\u1300\u0003\u0002\u0002\u0002\u1300\u1303\u0003\u0002\u0002\u0002",
    "\u1301\u1302\u0007\u00a8\u0002\u0002\u1302\u1304\u0005\u03f8\u01fd\u0002",
    "\u1303\u1301\u0003\u0002\u0002\u0002\u1303\u1304\u0003\u0002\u0002\u0002",
    "\u1304\u0173\u0003\u0002\u0002\u0002\u1305\u1306\u0007\u00a7\u0002\u0002",
    "\u1306\u1307\u0007f\u0002\u0002\u1307\u1308\u0007\u00e4\u0002\u0002",
    "\u1308\u1309\u0007\u0098\u0002\u0002\u1309\u130e\u0007L\u0002\u0002",
    "\u130a\u130b\u0007\u0360\u0002\u0002\u130b\u130c\u0005\u03a4\u01d3\u0002",
    "\u130c\u130d\u0007\u0361\u0002\u0002\u130d\u130f\u0003\u0002\u0002\u0002",
    "\u130e\u130a\u0003\u0002\u0002\u0002\u130e\u130f\u0003\u0002\u0002\u0002",
    "\u130f\u1310\u0003\u0002\u0002\u0002\u1310\u1313\u0005\u016a\u00b6\u0002",
    "\u1311\u1312\u0007\u00a8\u0002\u0002\u1312\u1314\u0005\u03f8\u01fd\u0002",
    "\u1313\u1311\u0003\u0002\u0002\u0002\u1313\u1314\u0003\u0002\u0002\u0002",
    "\u1314\u0175\u0003\u0002\u0002\u0002\u1315\u1316\u0007;\u0002\u0002",
    "\u1316\u131c\u0007\u00a2\u0002\u0002\u1317\u1318\u0007]\u0002\u0002",
    "\u1318\u1319\u0007G\u0002\u0002\u1319\u131a\u0007\u0298\u0002\u0002",
    "\u131a\u131c\u0007\u024a\u0002\u0002\u131b\u1315\u0003\u0002\u0002\u0002",
    "\u131b\u1317\u0003\u0002\u0002\u0002\u131c\u0177\u0003\u0002\u0002\u0002",
    "\u131d\u131f\u0007*\u0002\u0002\u131e\u1320\u0007_\u0002\u0002\u131f",
    "\u131e\u0003\u0002\u0002\u0002\u131f\u1320\u0003\u0002\u0002\u0002\u1320",
    "\u1322\u0003\u0002\u0002\u0002\u1321\u1323\u0007\u0276\u0002\u0002\u1322",
    "\u1321\u0003\u0002\u0002\u0002\u1322\u1323\u0003\u0002\u0002\u0002\u1323",
    "\u1325\u0003\u0002\u0002\u0002\u1324\u1326\u0007F\u0002\u0002\u1325",
    "\u1324\u0003\u0002\u0002\u0002\u1325\u1326\u0003\u0002\u0002\u0002\u1326",
    "\u1327\u0003\u0002\u0002\u0002\u1327\u1328\u0007>\u0002\u0002\u1328",
    "\u132e\u0005\u0342\u01a2\u0002\u1329\u132a\u0007r\u0002\u0002\u132a",
    "\u132b\u0007\u0360\u0002\u0002\u132b\u132c\u0005\u03a4\u01d3\u0002\u132c",
    "\u132d\u0007\u0361\u0002\u0002\u132d\u132f\u0003\u0002\u0002\u0002\u132e",
    "\u1329\u0003\u0002\u0002\u0002\u132e\u132f\u0003\u0002\u0002\u0002\u132f",
    "\u1332\u0003\u0002\u0002\u0002\u1330\u1331\u0007\u00a8\u0002\u0002\u1331",
    "\u1333\u0005\u03f8\u01fd\u0002\u1332\u1330\u0003\u0002\u0002\u0002\u1332",
    "\u1333\u0003\u0002\u0002\u0002\u1333\u1335\u0003\u0002\u0002\u0002\u1334",
    "\u1336\u0005\u0194\u00cb\u0002\u1335\u1334\u0003\u0002\u0002\u0002\u1335",
    "\u1336\u0003\u0002\u0002\u0002\u1336\u1339\u0003\u0002\u0002\u0002\u1337",
    "\u1338\u0007Y\u0002\u0002\u1338\u133a\u0005\u0382\u01c2\u0002\u1339",
    "\u1337\u0003\u0002\u0002\u0002\u1339\u133a\u0003\u0002\u0002\u0002\u133a",
    "\u0179\u0003\u0002\u0002\u0002\u133b\u133d\u0007*\u0002\u0002\u133c",
    "\u133e\u0007_\u0002\u0002\u133d\u133c\u0003\u0002\u0002\u0002\u133d",
    "\u133e\u0003\u0002\u0002\u0002\u133e\u1340\u0003\u0002\u0002\u0002\u133f",
    "\u1341\u0007\u0276\u0002\u0002\u1340\u133f\u0003\u0002\u0002\u0002\u1340",
    "\u1341\u0003\u0002\u0002\u0002\u1341\u1343\u0003\u0002\u0002\u0002\u1342",
    "\u1344\u0007F\u0002\u0002\u1343\u1342\u0003\u0002\u0002\u0002\u1343",
    "\u1344\u0003\u0002\u0002\u0002\u1344\u136c\u0003\u0002\u0002\u0002\u1345",
    "\u1348\u0005\u0342\u01a2\u0002\u1346\u1347\u0007\u035d\u0002\u0002\u1347",
    "\u1349\u0007\u034d\u0002\u0002\u1348\u1346\u0003\u0002\u0002\u0002\u1348",
    "\u1349\u0003\u0002\u0002\u0002\u1349\u1352\u0003\u0002\u0002\u0002\u134a",
    "\u134b\u0007\u0364\u0002\u0002\u134b\u134e\u0005\u0342\u01a2\u0002\u134c",
    "\u134d\u0007\u035d\u0002\u0002\u134d\u134f\u0007\u034d\u0002\u0002\u134e",
    "\u134c\u0003\u0002\u0002\u0002\u134e\u134f\u0003\u0002\u0002\u0002\u134f",
    "\u1351\u0003\u0002\u0002\u0002\u1350\u134a\u0003\u0002\u0002\u0002\u1351",
    "\u1354\u0003\u0002\u0002\u0002\u1352\u1350\u0003\u0002\u0002\u0002\u1352",
    "\u1353\u0003\u0002\u0002\u0002\u1353\u1355\u0003\u0002\u0002\u0002\u1354",
    "\u1352\u0003\u0002\u0002\u0002\u1355\u1356\u0007>\u0002\u0002\u1356",
    "\u1357\u0005\u01a0\u00d1\u0002\u1357\u136d\u0003\u0002\u0002\u0002\u1358",
    "\u1359\u0007>\u0002\u0002\u1359\u135c\u0005\u0342\u01a2\u0002\u135a",
    "\u135b\u0007\u035d\u0002\u0002\u135b\u135d\u0007\u034d\u0002\u0002\u135c",
    "\u135a\u0003\u0002\u0002\u0002\u135c\u135d\u0003\u0002\u0002\u0002\u135d",
    "\u1366\u0003\u0002\u0002\u0002\u135e\u135f\u0007\u0364\u0002\u0002\u135f",
    "\u1362\u0005\u0342\u01a2\u0002\u1360\u1361\u0007\u035d\u0002\u0002\u1361",
    "\u1363\u0007\u034d\u0002\u0002\u1362\u1360\u0003\u0002\u0002\u0002\u1362",
    "\u1363\u0003\u0002\u0002\u0002\u1363\u1365\u0003\u0002\u0002\u0002\u1364",
    "\u135e\u0003\u0002\u0002\u0002\u1365\u1368\u0003\u0002\u0002\u0002\u1366",
    "\u1364\u0003\u0002\u0002\u0002\u1366\u1367\u0003\u0002\u0002\u0002\u1367",
    "\u1369\u0003\u0002\u0002\u0002\u1368\u1366\u0003\u0002\u0002\u0002\u1369",
    "\u136a\u0007\u00a5\u0002\u0002\u136a\u136b\u0005\u01a0\u00d1\u0002\u136b",
    "\u136d\u0003\u0002\u0002\u0002\u136c\u1345\u0003\u0002\u0002\u0002\u136c",
    "\u1358\u0003\u0002\u0002\u0002\u136d\u1370\u0003\u0002\u0002\u0002\u136e",
    "\u136f\u0007\u00a8\u0002\u0002\u136f\u1371\u0005\u03f8\u01fd\u0002\u1370",
    "\u136e\u0003\u0002\u0002\u0002\u1370\u1371\u0003\u0002\u0002\u0002\u1371",
    "\u017b\u0003\u0002\u0002\u0002\u1372\u1373\u0007\u020b\u0002\u0002\u1373",
    "\u1374\u0005\u0342\u01a2\u0002\u1374\u1379\u0007\u025d\u0002\u0002\u1375",
    "\u1377\u0007\u000e\u0002\u0002\u1376\u1375\u0003\u0002\u0002\u0002\u1376",
    "\u1377\u0003\u0002\u0002\u0002\u1377\u1378\u0003\u0002\u0002\u0002\u1378",
    "\u137a\u0005\u0376\u01bc\u0002\u1379\u1376\u0003\u0002\u0002\u0002\u1379",
    "\u137a\u0003\u0002\u0002\u0002\u137a\u017d\u0003\u0002\u0002\u0002\u137b",
    "\u137c\u0007\u020b\u0002\u0002\u137c\u137d\u0005\u0342\u01a2\u0002\u137d",
    "\u137e\u0007w\u0002\u0002\u137e\u1385\u0005\u0376\u01bc\u0002\u137f",
    "\u1380\u0005\u0402\u0202\u0002\u1380\u1381\u0007\u0360\u0002\u0002\u1381",
    "\u1382\u0005\u03b8\u01dd\u0002\u1382\u1383\u0007\u0361\u0002\u0002\u1383",
    "\u1386\u0003\u0002\u0002\u0002\u1384\u1386\t7\u0002\u0002\u1385\u137f",
    "\u0003\u0002\u0002\u0002\u1385\u1384\u0003\u0002\u0002\u0002\u1386\u1389",
    "\u0003\u0002\u0002\u0002\u1387\u1388\u0007\u00a8\u0002\u0002\u1388\u138a",
    "\u0005\u03f8\u01fd\u0002\u1389\u1387\u0003\u0002\u0002\u0002\u1389\u138a",
    "\u0003\u0002\u0002\u0002\u138a\u138d\u0003\u0002\u0002\u0002\u138b\u138c",
    "\u0007Y\u0002\u0002\u138c\u138e\u0005\u0382\u01c2\u0002\u138d\u138b",
    "\u0003\u0002\u0002\u0002\u138d\u138e\u0003\u0002\u0002\u0002\u138e\u017f",
    "\u0003\u0002\u0002\u0002\u138f\u1390\u0007\u020b\u0002\u0002\u1390\u1391",
    "\u0005\u0342\u01a2\u0002\u1391\u1392\u0007w\u0002\u0002\u1392\u1395",
    "\t8\u0002\u0002\u1393\u1394\u0007\u00a8\u0002\u0002\u1394\u1396\u0005",
    "\u03f8\u01fd\u0002\u1395\u1393\u0003\u0002\u0002\u0002\u1395\u1396\u0003",
    "\u0002\u0002\u0002\u1396\u1399\u0003\u0002\u0002\u0002\u1397\u1398\u0007",
    "Y\u0002\u0002\u1398\u139a\u0005\u0382\u01c2\u0002\u1399\u1397\u0003",
    "\u0002\u0002\u0002\u1399\u139a\u0003\u0002\u0002\u0002\u139a\u0181\u0003",
    "\u0002\u0002\u0002\u139b\u139c\u0007\u020b\u0002\u0002\u139c\u139d\u0005",
    "\u0342\u01a2\u0002\u139d\u139e\u0007\u01c6\u0002\u0002\u139e\u0183\u0003",
    "\u0002\u0002\u0002\u139f\u13a1\u0007\u00a2\u0002\u0002\u13a0\u13a2\u0007",
    "_\u0002\u0002\u13a1\u13a0\u0003\u0002\u0002\u0002\u13a1\u13a2\u0003",
    "\u0002\u0002\u0002\u13a2\u13a4\u0003\u0002\u0002\u0002\u13a3\u13a5\u0007",
    "F\u0002\u0002\u13a4\u13a3\u0003\u0002\u0002\u0002\u13a4\u13a5\u0003",
    "\u0002\u0002\u0002\u13a5\u13a6\u0003\u0002\u0002\u0002\u13a6\u13a8\u0005",
    "\u0342\u01a2\u0002\u13a7\u13a9\u0005\u0428\u0215\u0002\u13a8\u13a7\u0003",
    "\u0002\u0002\u0002\u13a8\u13a9\u0003\u0002\u0002\u0002\u13a9\u13ab\u0003",
    "\u0002\u0002\u0002\u13aa\u13ac\u0005\u0188\u00c5\u0002\u13ab\u13aa\u0003",
    "\u0002\u0002\u0002\u13ab\u13ac\u0003\u0002\u0002\u0002\u13ac\u13ad\u0003",
    "\u0002\u0002\u0002\u13ad\u13af\b\u00c3\u0001\u0002\u13ae\u13b0\u0005",
    "\u01e0\u00f1\u0002\u13af\u13ae\u0003\u0002\u0002\u0002\u13af\u13b0\u0003",
    "\u0002\u0002\u0002\u13b0\u13b2\u0003\u0002\u0002\u0002\u13b1\u13b3\u0005",
    "\u0194\u00cb\u0002\u13b2\u13b1\u0003\u0002\u0002\u0002\u13b2\u13b3\u0003",
    "\u0002\u0002\u0002\u13b3\u13b5\u0003\u0002\u0002\u0002\u13b4\u13b6\u0005",
    "\u01e8\u00f5\u0002\u13b5\u13b4\u0003\u0002\u0002\u0002\u13b5\u13b6\u0003",
    "\u0002\u0002\u0002\u13b6\u0185\u0003\u0002\u0002\u0002\u13b7\u13b9\u0007",
    "\u00a2\u0002\u0002\u13b8\u13ba\u0007_\u0002\u0002\u13b9\u13b8\u0003",
    "\u0002\u0002\u0002\u13b9\u13ba\u0003\u0002\u0002\u0002\u13ba\u13bc\u0003",
    "\u0002\u0002\u0002\u13bb\u13bd\u0007F\u0002\u0002\u13bc\u13bb\u0003",
    "\u0002\u0002\u0002\u13bc\u13bd\u0003\u0002\u0002\u0002\u13bd\u13be\u0003",
    "\u0002\u0002\u0002\u13be\u13c0\u0005\u01a0\u00d1\u0002\u13bf\u13c1\u0005",
    "\u0188\u00c5\u0002\u13c0\u13bf\u0003\u0002\u0002\u0002\u13c0\u13c1\u0003",
    "\u0002\u0002\u0002\u13c1\u13c2\u0003\u0002\u0002\u0002\u13c2\u13c4\b",
    "\u00c4\u0001\u0002\u13c3\u13c5\u0005\u01e0\u00f1\u0002\u13c4\u13c3\u0003",
    "\u0002\u0002\u0002\u13c4\u13c5\u0003\u0002\u0002\u0002\u13c5\u0187\u0003",
    "\u0002\u0002\u0002\u13c6\u13c7\u0007\u0088\u0002\u0002\u13c7\u13cc\u0005",
    "\u016c\u00b7\u0002\u13c8\u13c9\u0007\u0364\u0002\u0002\u13c9\u13cb\u0005",
    "\u016c\u00b7\u0002\u13ca\u13c8\u0003\u0002\u0002\u0002\u13cb\u13ce\u0003",
    "\u0002\u0002\u0002\u13cc\u13ca\u0003\u0002\u0002\u0002\u13cc\u13cd\u0003",
    "\u0002\u0002\u0002\u13cd\u0189\u0003\u0002\u0002\u0002\u13ce\u13cc\u0003",
    "\u0002\u0002\u0002\u13cf\u13d0\u0007\u00a2\u0002\u0002\u13d0\u13d3\u0005",
    "\u018c\u00c7\u0002\u13d1\u13d2\u0007\u0088\u0002\u0002\u13d2\u13d4\u0005",
    "\u018e\u00c8\u0002\u13d3\u13d1\u0003\u0002\u0002\u0002\u13d3\u13d4\u0003",
    "\u0002\u0002\u0002\u13d4\u13d5\u0003\u0002\u0002\u0002\u13d5\u13d6\b",
    "\u00c6\u0001\u0002\u13d6\u018b\u0003\u0002\u0002\u0002\u13d7\u13d9\u0007",
    "\u0096\u0002\u0002\u13d8\u13d7\u0003\u0002\u0002\u0002\u13d8\u13d9\u0003",
    "\u0002\u0002\u0002\u13d9\u13da\u0003\u0002\u0002\u0002\u13da\u13dc\u0005",
    "\u0342\u01a2\u0002\u13db\u13dd\u0005\u033a\u019e\u0002\u13dc\u13db\u0003",
    "\u0002\u0002\u0002\u13dc\u13dd\u0003\u0002\u0002\u0002\u13dd\u13df\u0003",
    "\u0002\u0002\u0002\u13de\u13e0\u0005\u0428\u0215\u0002\u13df\u13de\u0003",
    "\u0002\u0002\u0002\u13df\u13e0\u0003\u0002\u0002\u0002\u13e0\u13e8\u0003",
    "\u0002\u0002\u0002\u13e1\u13e2\u0007\u0360\u0002\u0002\u13e2\u13e3\u0005",
    "\u0148\u00a5\u0002\u13e3\u13e5\u0007\u0361\u0002\u0002\u13e4\u13e6\u0005",
    "\u0428\u0215\u0002\u13e5\u13e4\u0003\u0002\u0002\u0002\u13e5\u13e6\u0003",
    "\u0002\u0002\u0002\u13e6\u13e8\u0003\u0002\u0002\u0002\u13e7\u13d8\u0003",
    "\u0002\u0002\u0002\u13e7\u13e1\u0003\u0002\u0002\u0002\u13e8\u018d\u0003",
    "\u0002\u0002\u0002\u13e9\u13ea\u0007\u0360\u0002\u0002\u13ea\u13eb\u0005",
    "\u03ae\u01d8\u0002\u13eb\u13ec\u0007\u0361\u0002\u0002\u13ec\u13ed\u0007",
    "\u0355\u0002\u0002\u13ed\u13ee\u0007\u0360\u0002\u0002\u13ee\u13ef\u0005",
    "\u0148\u00a5\u0002\u13ef\u13f1\u0007\u0361\u0002\u0002\u13f0\u13f2\u0005",
    "\u01e0\u00f1\u0002\u13f1\u13f0\u0003\u0002\u0002\u0002\u13f1\u13f2\u0003",
    "\u0002\u0002\u0002\u13f2\u13ff\u0003\u0002\u0002\u0002\u13f3\u13f8\u0005",
    "\u0190\u00c9\u0002\u13f4\u13f5\u0007\u0364\u0002\u0002\u13f5\u13f7\u0005",
    "\u0190\u00c9\u0002\u13f6\u13f4\u0003\u0002\u0002\u0002\u13f7\u13fa\u0003",
    "\u0002\u0002\u0002\u13f8\u13f6\u0003\u0002\u0002\u0002\u13f8\u13f9\u0003",
    "\u0002\u0002\u0002\u13f9\u13fc\u0003\u0002\u0002\u0002\u13fa\u13f8\u0003",
    "\u0002\u0002\u0002\u13fb\u13fd\u0005\u01e0\u00f1\u0002\u13fc\u13fb\u0003",
    "\u0002\u0002\u0002\u13fc\u13fd\u0003\u0002\u0002\u0002\u13fd\u13ff\u0003",
    "\u0002\u0002\u0002\u13fe\u13e9\u0003\u0002\u0002\u0002\u13fe\u13f3\u0003",
    "\u0002\u0002\u0002\u13ff\u018f\u0003\u0002\u0002\u0002\u1400\u1402\u0005",
    "\u034c\u01a7\u0002\u1401\u1403\u0007\u0355\u0002\u0002\u1402\u1401\u0003",
    "\u0002\u0002\u0002\u1402\u1403\u0003\u0002\u0002\u0002\u1403\u1405\u0003",
    "\u0002\u0002\u0002\u1404\u1406\u0005\u03f8\u01fd\u0002\u1405\u1404\u0003",
    "\u0002\u0002\u0002\u1405\u1406\u0003\u0002\u0002\u0002\u1406\u1407\u0003",
    "\u0002\u0002\u0002\u1407\u1408\b\u00c9\u0001\u0002\u1408\u0191\u0003",
    "\u0002\u0002\u0002\u1409\u140b\u0007*\u0002\u0002\u140a\u140c\u0007",
    ">\u0002\u0002\u140b\u140a\u0003\u0002\u0002\u0002\u140b\u140c\u0003",
    "\u0002\u0002\u0002\u140c\u140d\u0003\u0002\u0002\u0002\u140d\u140f\u0005",
    "\u018c\u00c7\u0002\u140e\u1410\u0005\u01e0\u00f1\u0002\u140f\u140e\u0003",
    "\u0002\u0002\u0002\u140f\u1410\u0003\u0002\u0002\u0002\u1410\u0193\u0003",
    "\u0002\u0002\u0002\u1411\u1412\u0007n\u0002\u0002\u1412\u1413\u0007",
    "\u0013\u0002\u0002\u1413\u1418\u0005\u0196\u00cc\u0002\u1414\u1415\u0007",
    "\u0364\u0002\u0002\u1415\u1417\u0005\u0196\u00cc\u0002\u1416\u1414\u0003",
    "\u0002\u0002\u0002\u1417\u141a\u0003\u0002\u0002\u0002\u1418\u1416\u0003",
    "\u0002\u0002\u0002\u1418\u1419\u0003\u0002\u0002\u0002\u1419\u0195\u0003",
    "\u0002\u0002\u0002\u141a\u1418\u0003\u0002\u0002\u0002\u141b\u141c\u0006",
    "\u00ccA\u0002\u141c\u141e\u0005\u03f6\u01fc\u0002\u141d\u141f\t9\u0002",
    "\u0002\u141e\u141d\u0003\u0002\u0002\u0002\u141e\u141f\u0003\u0002\u0002",
    "\u0002\u141f\u1429\u0003\u0002\u0002\u0002\u1420\u1421\u0006\u00ccB",
    "\u0002\u1421\u1423\u0005\u03f6\u01fc\u0002\u1422\u1424\t9\u0002\u0002",
    "\u1423\u1422\u0003\u0002\u0002\u0002\u1423\u1424\u0003\u0002\u0002\u0002",
    "\u1424\u1426\u0003\u0002\u0002\u0002\u1425\u1427\u0005\u0198\u00cd\u0002",
    "\u1426\u1425\u0003\u0002\u0002\u0002\u1426\u1427\u0003\u0002\u0002\u0002",
    "\u1427\u1429\u0003\u0002\u0002\u0002\u1428\u141b\u0003\u0002\u0002\u0002",
    "\u1428\u1420\u0003\u0002\u0002\u0002\u1429\u0197\u0003\u0002\u0002\u0002",
    "\u142a\u142b\u0007\u0140\u0002\u0002\u142b\u142c\t)\u0002\u0002\u142c",
    "\u0199\u0003\u0002\u0002\u0002\u142d\u142e\u0006\u00ceC\u0002\u142e",
    "\u142f\u0007\u00bd\u0002\u0002\u142f\u1430\u0007\u0013\u0002\u0002\u1430",
    "\u1435\u0005\u03f6\u01fc\u0002\u1431\u1432\u0007\u0364\u0002\u0002\u1432",
    "\u1434\u0005\u03f6\u01fc\u0002\u1433\u1431\u0003\u0002\u0002\u0002\u1434",
    "\u1437\u0003\u0002\u0002\u0002\u1435\u1433\u0003\u0002\u0002\u0002\u1435",
    "\u1436\u0003\u0002\u0002\u0002\u1436\u019b\u0003\u0002\u0002\u0002\u1437",
    "\u1435\u0003\u0002\u0002\u0002\u1438\u1439\u0006\u00cfD\u0002\u1439",
    "\u143a\u0007\u00cc\u0002\u0002\u143a\u143b\u0007\u0013\u0002\u0002\u143b",
    "\u1440\u0005\u03f6\u01fc\u0002\u143c\u143d\u0007\u0364\u0002\u0002\u143d",
    "\u143f\u0005\u03f6\u01fc\u0002\u143e\u143c\u0003\u0002\u0002\u0002\u143f",
    "\u1442\u0003\u0002\u0002\u0002\u1440\u143e\u0003\u0002\u0002\u0002\u1440",
    "\u1441\u0003\u0002\u0002\u0002\u1441\u019d\u0003\u0002\u0002\u0002\u1442",
    "\u1440\u0003\u0002\u0002\u0002\u1443\u1444\u0006\u00d0E\u0002\u1444",
    "\u1445\u0007\u0118\u0002\u0002\u1445\u1446\u0007\u0013\u0002\u0002\u1446",
    "\u144b\u0005\u0196\u00cc\u0002\u1447\u1448\u0007\u0364\u0002\u0002\u1448",
    "\u144a\u0005\u0196\u00cc\u0002\u1449\u1447\u0003\u0002\u0002\u0002\u144a",
    "\u144d\u0003\u0002\u0002\u0002\u144b\u1449\u0003\u0002\u0002\u0002\u144b",
    "\u144c\u0003\u0002\u0002\u0002\u144c\u019f\u0003\u0002\u0002\u0002\u144d",
    "\u144b\u0003\u0002\u0002\u0002\u144e\u1453\u0005\u01a2\u00d2\u0002\u144f",
    "\u1450\u0007\u0364\u0002\u0002\u1450\u1452\u0005\u01a2\u00d2\u0002\u1451",
    "\u144f\u0003\u0002\u0002\u0002\u1452\u1455\u0003\u0002\u0002\u0002\u1453",
    "\u1451\u0003\u0002\u0002\u0002\u1453\u1454\u0003\u0002\u0002\u0002\u1454",
    "\u01a1\u0003\u0002\u0002\u0002\u1455\u1453\u0003\u0002\u0002\u0002\u1456",
    "\u145a\u0005\u01a4\u00d3\u0002\u1457\u1459\u0005\u01b2\u00da\u0002\u1458",
    "\u1457\u0003\u0002\u0002\u0002\u1459\u145c\u0003\u0002\u0002\u0002\u145a",
    "\u1458\u0003\u0002\u0002\u0002\u145a\u145b\u0003\u0002\u0002\u0002\u145b",
    "\u1460\u0003\u0002\u0002\u0002\u145c\u145a\u0003\u0002\u0002\u0002\u145d",
    "\u145f\u0005\u01bc\u00df\u0002\u145e\u145d\u0003\u0002\u0002\u0002\u145f",
    "\u1462\u0003\u0002\u0002\u0002\u1460\u145e\u0003\u0002\u0002\u0002\u1460",
    "\u1461\u0003\u0002\u0002\u0002\u1461\u1474\u0003\u0002\u0002\u0002\u1462",
    "\u1460\u0003\u0002\u0002\u0002\u1463\u1464\u0007\u0360\u0002\u0002\u1464",
    "\u1468\u0005\u01a4\u00d3\u0002\u1465\u1467\u0005\u01b2\u00da\u0002\u1466",
    "\u1465\u0003\u0002\u0002\u0002\u1467\u146a\u0003\u0002\u0002\u0002\u1468",
    "\u1466\u0003\u0002\u0002\u0002\u1468\u1469\u0003\u0002\u0002\u0002\u1469",
    "\u146e\u0003\u0002\u0002\u0002\u146a\u1468\u0003\u0002\u0002\u0002\u146b",
    "\u146d\u0005\u01bc\u00df\u0002\u146c\u146b\u0003\u0002\u0002\u0002\u146d",
    "\u1470\u0003\u0002\u0002\u0002\u146e\u146c\u0003\u0002\u0002\u0002\u146e",
    "\u146f\u0003\u0002\u0002\u0002\u146f\u1471\u0003\u0002\u0002\u0002\u1470",
    "\u146e\u0003\u0002\u0002\u0002\u1471\u1472\u0007\u0361\u0002\u0002\u1472",
    "\u1474\u0003\u0002\u0002\u0002\u1473\u1456\u0003\u0002\u0002\u0002\u1473",
    "\u1463\u0003\u0002\u0002\u0002\u1474\u01a3\u0003\u0002\u0002\u0002\u1475",
    "\u147b\u0005\u0342\u01a2\u0002\u1476\u1477\u0007r\u0002\u0002\u1477",
    "\u1478\u0007\u0360\u0002\u0002\u1478\u1479\u0005\u03a4\u01d3\u0002\u1479",
    "\u147a\u0007\u0361\u0002\u0002\u147a\u147c\u0003\u0002\u0002\u0002\u147b",
    "\u1476\u0003\u0002\u0002\u0002\u147b\u147c\u0003\u0002\u0002\u0002\u147c",
    "\u147e\u0003\u0002\u0002\u0002\u147d\u147f\u0005\u01a6\u00d4\u0002\u147e",
    "\u147d\u0003\u0002\u0002\u0002\u147e\u147f\u0003\u0002\u0002\u0002\u147f",
    "\u14bb\u0003\u0002\u0002\u0002\u1480\u1486\u0005\u0342\u01a2\u0002\u1481",
    "\u1482\u0007r\u0002\u0002\u1482\u1483\u0007\u0360\u0002\u0002\u1483",
    "\u1484\u0005\u03a4\u01d3\u0002\u1484\u1485\u0007\u0361\u0002\u0002\u1485",
    "\u1487\u0003\u0002\u0002\u0002\u1486\u1481\u0003\u0002\u0002\u0002\u1486",
    "\u1487\u0003\u0002\u0002\u0002\u1487\u1488\u0003\u0002\u0002\u0002\u1488",
    "\u148a\u0005\u0428\u0215\u0002\u1489\u148b\u0005\u01a6\u00d4\u0002\u148a",
    "\u1489\u0003\u0002\u0002\u0002\u148a\u148b\u0003\u0002\u0002\u0002\u148b",
    "\u14bb\u0003\u0002\u0002\u0002\u148c\u1492\u0005\u01aa\u00d6\u0002\u148d",
    "\u148e\u0007\u0360\u0002\u0002\u148e\u148f\u0005\u01aa\u00d6\u0002\u148f",
    "\u1490\u0007\u0361\u0002\u0002\u1490\u1492\u0003\u0002\u0002\u0002\u1491",
    "\u148c\u0003\u0002\u0002\u0002\u1491\u148d\u0003\u0002\u0002\u0002\u1492",
    "\u1493\u0003\u0002\u0002\u0002\u1493\u1494\b\u00d3\u0001\u0002\u1494",
    "\u14bb\u0003\u0002\u0002\u0002\u1495\u149b\u0005\u01aa\u00d6\u0002\u1496",
    "\u1497\u0007\u0360\u0002\u0002\u1497\u1498\u0005\u01aa\u00d6\u0002\u1498",
    "\u1499\u0007\u0361\u0002\u0002\u1499\u149b\u0003\u0002\u0002\u0002\u149a",
    "\u1495\u0003\u0002\u0002\u0002\u149a\u1496\u0003\u0002\u0002\u0002\u149b",
    "\u149c\u0003\u0002\u0002\u0002\u149c\u149d\u0005\u0428\u0215\u0002\u149d",
    "\u14bb\u0003\u0002\u0002\u0002\u149e\u149f\u0007\u0360\u0002\u0002\u149f",
    "\u14a0\u0005\u01a0\u00d1\u0002\u14a0\u14a1\u0007\u0361\u0002\u0002\u14a1",
    "\u14bb\u0003\u0002\u0002\u0002\u14a2\u14a3\u0006\u00d3F\u0002\u14a3",
    "\u14a4\u0007\u0360\u0002\u0002\u14a4\u14a5\u0007\u00a6\u0002\u0002\u14a5",
    "\u14aa\u0005\u01ac\u00d7\u0002\u14a6\u14a7\u0007\u0364\u0002\u0002\u14a7",
    "\u14a9\u0005\u01ac\u00d7\u0002\u14a8\u14a6\u0003\u0002\u0002\u0002\u14a9",
    "\u14ac\u0003\u0002\u0002\u0002\u14aa\u14a8\u0003\u0002\u0002\u0002\u14aa",
    "\u14ab\u0003\u0002\u0002\u0002\u14ab\u14ad\u0003\u0002\u0002\u0002\u14ac",
    "\u14aa\u0003\u0002\u0002\u0002\u14ad\u14ae\u0007\u0361\u0002\u0002\u14ae",
    "\u14b0\u0003\u0002\u0002\u0002\u14af\u14b1\u0005\u0428\u0215\u0002\u14b0",
    "\u14af\u0003\u0002\u0002\u0002\u14b0\u14b1\u0003\u0002\u0002\u0002\u14b1",
    "\u14b6\u0003\u0002\u0002\u0002\u14b2\u14b3\u0007\u0360\u0002\u0002\u14b3",
    "\u14b4\u0005\u03a4\u01d3\u0002\u14b4\u14b5\u0007\u0361\u0002\u0002\u14b5",
    "\u14b7\u0003\u0002\u0002\u0002\u14b6\u14b2\u0003\u0002\u0002\u0002\u14b6",
    "\u14b7\u0003\u0002\u0002\u0002\u14b7\u14b8\u0003\u0002\u0002\u0002\u14b8",
    "\u14b9\b\u00d3\u0001\u0002\u14b9\u14bb\u0003\u0002\u0002\u0002\u14ba",
    "\u1475\u0003\u0002\u0002\u0002\u14ba\u1480\u0003\u0002\u0002\u0002\u14ba",
    "\u1491\u0003\u0002\u0002\u0002\u14ba\u149a\u0003\u0002\u0002\u0002\u14ba",
    "\u149e\u0003\u0002\u0002\u0002\u14ba\u14a2\u0003\u0002\u0002\u0002\u14bb",
    "\u01a5\u0003\u0002\u0002\u0002\u14bc\u14bd\u0006\u00d4G\u0002\u14bd",
    "\u14c2\u0005\u01ae\u00d8\u0002\u14be\u14bf\u0007\u0364\u0002\u0002\u14bf",
    "\u14c1\u0005\u01ae\u00d8\u0002\u14c0\u14be\u0003\u0002\u0002\u0002\u14c1",
    "\u14c4\u0003\u0002\u0002\u0002\u14c2\u14c0\u0003\u0002\u0002\u0002\u14c2",
    "\u14c3\u0003\u0002\u0002\u0002\u14c3\u01a7\u0003\u0002\u0002\u0002\u14c4",
    "\u14c2\u0003\u0002\u0002\u0002\u14c5\u14c6\u0005\u0342\u01a2\u0002\u14c6",
    "\u01a9\u0003\u0002\u0002\u0002\u14c7\u14cb\u0005\u0148\u00a5\u0002\u14c8",
    "\u14c9\u0006\u00d6H\u0002\u14c9\u14cb\u0005\u014c\u00a7\u0002\u14ca",
    "\u14c7\u0003\u0002\u0002\u0002\u14ca\u14c8\u0003\u0002\u0002\u0002\u14cb",
    "\u01ab\u0003\u0002\u0002\u0002\u14cc\u14cd\u0007\u0360\u0002\u0002\u14cd",
    "\u14d2\u0005\u03f8\u01fd\u0002\u14ce\u14cf\u0007\u0364\u0002\u0002\u14cf",
    "\u14d1\u0005\u03f8\u01fd\u0002\u14d0\u14ce\u0003\u0002\u0002\u0002\u14d1",
    "\u14d4\u0003\u0002\u0002\u0002\u14d2\u14d0\u0003\u0002\u0002\u0002\u14d2",
    "\u14d3\u0003\u0002\u0002\u0002\u14d3\u14d5\u0003\u0002\u0002\u0002\u14d4",
    "\u14d2\u0003\u0002\u0002\u0002\u14d5\u14d6\u0007\u0361\u0002\u0002\u14d6",
    "\u01ad\u0003\u0002\u0002\u0002\u14d7\u14d8\t:\u0002\u0002\u14d8\u14db",
    "\t\u0019\u0002\u0002\u14d9\u14da\u0007;\u0002\u0002\u14da\u14dc\u0005",
    "\u01b0\u00d9\u0002\u14db\u14d9\u0003\u0002\u0002\u0002\u14db\u14dc\u0003",
    "\u0002\u0002\u0002\u14dc\u14dd\u0003\u0002\u0002\u0002\u14dd\u14de\u0007",
    "\u0360\u0002\u0002\u14de\u14df\u0005\u03a4\u01d3\u0002\u14df\u14e0\u0007",
    "\u0361\u0002\u0002\u14e0\u01af\u0003\u0002\u0002\u0002\u14e1\u14e7\u0007",
    "Q\u0002\u0002\u14e2\u14e3\u0007n\u0002\u0002\u14e3\u14e7\u0007\u0013",
    "\u0002\u0002\u14e4\u14e5\u0007B\u0002\u0002\u14e5\u14e7\u0007\u0013",
    "\u0002\u0002\u14e6\u14e1\u0003\u0002\u0002\u0002\u14e6\u14e2\u0003\u0002",
    "\u0002\u0002\u14e6\u14e4\u0003\u0002\u0002\u0002\u14e7\u01b1\u0003\u0002",
    "\u0002\u0002\u14e8\u14ea\u0005\u01b6\u00dc\u0002\u14e9\u14eb\u0007p",
    "\u0002\u0002\u14ea\u14e9\u0003\u0002\u0002\u0002\u14ea\u14eb\u0003\u0002",
    "\u0002\u0002\u14eb\u14ec\u0003\u0002\u0002\u0002\u14ec\u14ed\u0007Q",
    "\u0002\u0002\u14ed\u14ef\u0005\u01a4\u00d3\u0002\u14ee\u14f0\u0005\u01ba",
    "\u00de\u0002\u14ef\u14ee\u0003\u0002\u0002\u0002\u14ef\u14f0\u0003\u0002",
    "\u0002\u0002\u14f0\u14f1\u0003\u0002\u0002\u0002\u14f1\u14f2\b\u00da",
    "\u0001\u0002\u14f2\u1518\u0003\u0002\u0002\u0002\u14f3\u14f5\u0007e",
    "\u0002\u0002\u14f4\u14f6\u0005\u01b8\u00dd\u0002\u14f5\u14f4\u0003\u0002",
    "\u0002\u0002\u14f5\u14f6\u0003\u0002\u0002\u0002\u14f6\u14f7\u0003\u0002",
    "\u0002\u0002\u14f7\u14f8\u0007Q\u0002\u0002\u14f8\u1518\u0005\u01a4",
    "\u00d3\u0002\u14f9\u14fa\u0006\u00daI\u0002\u14fa\u14fb\u0007\u0095",
    "\u0002\u0002\u14fb\u14fe\u0005\u01a4\u00d3\u0002\u14fc\u14fd\u0007i",
    "\u0002\u0002\u14fd\u14ff\u0005\u03f8\u01fd\u0002\u14fe\u14fc\u0003\u0002",
    "\u0002\u0002\u14fe\u14ff\u0003\u0002\u0002\u0002\u14ff\u1518\u0003\u0002",
    "\u0002\u0002\u1500\u1501\u0006\u00daJ\u0002\u1501\u1502\u0007W\u0002",
    "\u0002\u1502\u1503\u0007\u0110\u0002\u0002\u1503\u1504\u0007Q\u0002",
    "\u0002\u1504\u1506\u0005\u01a4\u00d3\u0002\u1505\u1507\u0005\u01ba\u00de",
    "\u0002\u1506\u1505\u0003\u0002\u0002\u0002\u1506\u1507\u0003\u0002\u0002",
    "\u0002\u1507\u1518\u0003\u0002\u0002\u0002\u1508\u150a\t;\u0002\u0002",
    "\u1509\u1508\u0003\u0002\u0002\u0002\u1509\u150a\u0003\u0002\u0002\u0002",
    "\u150a\u150b\u0003\u0002\u0002\u0002\u150b\u150c\u0007Q\u0002\u0002",
    "\u150c\u150e\u0005\u01a4\u00d3\u0002\u150d\u150f\u0005\u01ba\u00de\u0002",
    "\u150e\u150d\u0003\u0002\u0002\u0002\u150e\u150f\u0003\u0002\u0002\u0002",
    "\u150f\u1518\u0003\u0002\u0002\u0002\u1510\u1511\u0005\u01b4\u00db\u0002",
    "\u1511\u1513\u0005\u01a4\u00d3\u0002\u1512\u1514\u0005\u01ba\u00de\u0002",
    "\u1513\u1512\u0003\u0002\u0002\u0002\u1513\u1514\u0003\u0002\u0002\u0002",
    "\u1514\u1515\u0003\u0002\u0002\u0002\u1515\u1516\b\u00da\u0001\u0002",
    "\u1516\u1518\u0003\u0002\u0002\u0002\u1517\u14e8\u0003\u0002\u0002\u0002",
    "\u1517\u14f3\u0003\u0002\u0002\u0002\u1517\u14f9\u0003\u0002\u0002\u0002",
    "\u1517\u1500\u0003\u0002\u0002\u0002\u1517\u1509\u0003\u0002\u0002\u0002",
    "\u1517\u1510\u0003\u0002\u0002\u0002\u1518\u01b3\u0003\u0002\u0002\u0002",
    "\u1519\u151a\u0005\u042c\u0217\u0002\u151a\u01b5\u0003\u0002\u0002\u0002",
    "\u151b\u151c\u0006\u00dcK\u0002\u151c\u1523\u0007W\u0002\u0002\u151d",
    "\u1523\u0007\u0083\u0002\u0002\u151e\u151f\u0006\u00dcL\u0002\u151f",
    "\u1523\u0007W\u0002\u0002\u1520\u1523\u0007\u0083\u0002\u0002\u1521",
    "\u1523\u0007\u0205\u0002\u0002\u1522\u151b\u0003\u0002\u0002\u0002\u1522",
    "\u151d\u0003\u0002\u0002\u0002\u1522\u151e\u0003\u0002\u0002\u0002\u1522",
    "\u1520\u0003\u0002\u0002\u0002\u1522\u1521\u0003\u0002\u0002\u0002\u1523",
    "\u01b7\u0003\u0002\u0002\u0002\u1524\u1525\u0006\u00ddM\u0002\u1525",
    "\u1527\t<\u0002\u0002\u1526\u1528\u0007p\u0002\u0002\u1527\u1526\u0003",
    "\u0002\u0002\u0002\u1527\u1528\u0003\u0002\u0002\u0002\u1528\u01b9\u0003",
    "\u0002\u0002\u0002\u1529\u152a\u0007i\u0002\u0002\u152a\u1532\u0005",
    "\u03f6\u01fc\u0002\u152b\u152c\u0006\u00deN\u0002\u152c\u152d\u0007",
    "\u00a5\u0002\u0002\u152d\u152e\u0007\u0360\u0002\u0002\u152e\u152f\u0005",
    "\u03a4\u01d3\u0002\u152f\u1530\u0007\u0361\u0002\u0002\u1530\u1532\u0003",
    "\u0002\u0002\u0002\u1531\u1529\u0003\u0002\u0002\u0002\u1531\u152b\u0003",
    "\u0002\u0002\u0002\u1532\u01bb\u0003\u0002\u0002\u0002\u1533\u1534\u0007",
    "\u00de\u0002\u0002\u1534\u1536\u0007\u02d0\u0002\u0002\u1535\u1537\u0007",
    "p\u0002\u0002\u1536\u1535\u0003\u0002\u0002\u0002\u1536\u1537\u0003",
    "\u0002\u0002\u0002\u1537\u1538\u0003\u0002\u0002\u0002\u1538\u153a\u0005",
    "\u03c8\u01e5\u0002\u1539\u153b\u0005\u0376\u01bc\u0002\u153a\u1539\u0003",
    "\u0002\u0002\u0002\u153a\u153b\u0003\u0002\u0002\u0002\u153b\u153e\u0003",
    "\u0002\u0002\u0002\u153c\u153d\u0007\u000e\u0002\u0002\u153d\u153f\u0005",
    "\u03a4\u01d3\u0002\u153e\u153c\u0003\u0002\u0002\u0002\u153e\u153f\u0003",
    "\u0002\u0002\u0002\u153f\u1540\u0003\u0002\u0002\u0002\u1540\u1541\b",
    "\u00df\u0001\u0002\u1541\u01bd\u0003\u0002\u0002\u0002\u1542\u1543\u0007",
    "\u0360\u0002\u0002\u1543\u1544\u0005\u01c2\u00e2\u0002\u1544\u1545\u0007",
    "\u0361\u0002\u0002\u1545\u154b\u0003\u0002\u0002\u0002\u1546\u1547\u0007",
    "\u0360\u0002\u0002\u1547\u1548\u0005\u01be\u00e0\u0002\u1548\u1549\u0007",
    "\u0361\u0002\u0002\u1549\u154b\u0003\u0002\u0002\u0002\u154a\u1542\u0003",
    "\u0002\u0002\u0002\u154a\u1546\u0003\u0002\u0002\u0002\u154b\u01bf\u0003",
    "\u0002\u0002\u0002\u154c\u154d\u0007\u0360\u0002\u0002\u154d\u154e\u0005",
    "\u01c4\u00e3\u0002\u154e\u154f\u0007\u0361\u0002\u0002\u154f\u1555\u0003",
    "\u0002\u0002\u0002\u1550\u1551\u0007\u0360\u0002\u0002\u1551\u1552\u0005",
    "\u01c0\u00e1\u0002\u1552\u1553\u0007\u0361\u0002\u0002\u1553\u1555\u0003",
    "\u0002\u0002\u0002\u1554\u154c\u0003\u0002\u0002\u0002\u1554\u1550\u0003",
    "\u0002\u0002\u0002\u1555\u01c1\u0003\u0002\u0002\u0002\u1556\u1558\u0007",
    "\u0087\u0002\u0002\u1557\u1559\u0005\u01ca\u00e6\u0002\u1558\u1557\u0003",
    "\u0002\u0002\u0002\u1558\u1559\u0003\u0002\u0002\u0002\u1559\u155a\u0003",
    "\u0002\u0002\u0002\u155a\u1590\u0005\u01a8\u00d5\u0002\u155b\u155d\u0007",
    "\u0087\u0002\u0002\u155c\u155e\u0005\u01ca\u00e6\u0002\u155d\u155c\u0003",
    "\u0002\u0002\u0002\u155d\u155e\u0003\u0002\u0002\u0002\u155e\u155f\u0003",
    "\u0002\u0002\u0002\u155f\u1561\u0005\u01d0\u00e9\u0002\u1560\u1562\u0005",
    "\u01d4\u00eb\u0002\u1561\u1560\u0003\u0002\u0002\u0002\u1561\u1562\u0003",
    "\u0002\u0002\u0002\u1562\u1564\u0003\u0002\u0002\u0002\u1563\u1565\u0005",
    "\u01da\u00ee\u0002\u1564\u1563\u0003\u0002\u0002\u0002\u1564\u1565\u0003",
    "\u0002\u0002\u0002\u1565\u1567\u0003\u0002\u0002\u0002\u1566\u1568\u0005",
    "\u0194\u00cb\u0002\u1567\u1566\u0003\u0002\u0002\u0002\u1567\u1568\u0003",
    "\u0002\u0002\u0002\u1568\u156a\u0003\u0002\u0002\u0002\u1569\u156b\u0005",
    "\u019a\u00ce\u0002\u156a\u1569\u0003\u0002\u0002\u0002\u156a\u156b\u0003",
    "\u0002\u0002\u0002\u156b\u156d\u0003\u0002\u0002\u0002\u156c\u156e\u0005",
    "\u019c\u00cf\u0002\u156d\u156c\u0003\u0002\u0002\u0002\u156d\u156e\u0003",
    "\u0002\u0002\u0002\u156e\u1570\u0003\u0002\u0002\u0002\u156f\u1571\u0005",
    "\u019e\u00d0\u0002\u1570\u156f\u0003\u0002\u0002\u0002\u1570\u1571\u0003",
    "\u0002\u0002\u0002\u1571\u1573\u0003\u0002\u0002\u0002\u1572\u1574\u0005",
    "\u01e8\u00f5\u0002\u1573\u1572\u0003\u0002\u0002\u0002\u1573\u1574\u0003",
    "\u0002\u0002\u0002\u1574\u1590\u0003\u0002\u0002\u0002\u1575\u1577\u0007",
    "\u0087\u0002\u0002\u1576\u1578\u0005\u01ca\u00e6\u0002\u1577\u1576\u0003",
    "\u0002\u0002\u0002\u1577\u1578\u0003\u0002\u0002\u0002\u1578\u1579\u0003",
    "\u0002\u0002\u0002\u1579\u157b\u0005\u01d0\u00e9\u0002\u157a\u157c\u0005",
    "\u01da\u00ee\u0002\u157b\u157a\u0003\u0002\u0002\u0002\u157b\u157c\u0003",
    "\u0002\u0002\u0002\u157c\u157e\u0003\u0002\u0002\u0002\u157d\u157f\u0005",
    "\u0194\u00cb\u0002\u157e\u157d\u0003\u0002\u0002\u0002\u157e\u157f\u0003",
    "\u0002\u0002\u0002\u157f\u1581\u0003\u0002\u0002\u0002\u1580\u1582\u0005",
    "\u019a\u00ce\u0002\u1581\u1580\u0003\u0002\u0002\u0002\u1581\u1582\u0003",
    "\u0002\u0002\u0002\u1582\u1584\u0003\u0002\u0002\u0002\u1583\u1585\u0005",
    "\u019c\u00cf\u0002\u1584\u1583\u0003\u0002\u0002\u0002\u1584\u1585\u0003",
    "\u0002\u0002\u0002\u1585\u1587\u0003\u0002\u0002\u0002\u1586\u1588\u0005",
    "\u019e\u00d0\u0002\u1587\u1586\u0003\u0002\u0002\u0002\u1587\u1588\u0003",
    "\u0002\u0002\u0002\u1588\u158a\u0003\u0002\u0002\u0002\u1589\u158b\u0005",
    "\u01e8\u00f5\u0002\u158a\u1589\u0003\u0002\u0002\u0002\u158a\u158b\u0003",
    "\u0002\u0002\u0002\u158b\u158d\u0003\u0002\u0002\u0002\u158c\u158e\u0005",
    "\u01d4\u00eb\u0002\u158d\u158c\u0003\u0002\u0002\u0002\u158d\u158e\u0003",
    "\u0002\u0002\u0002\u158e\u1590\u0003\u0002\u0002\u0002\u158f\u1556\u0003",
    "\u0002\u0002\u0002\u158f\u155b\u0003\u0002\u0002\u0002\u158f\u1575\u0003",
    "\u0002\u0002\u0002\u1590\u01c3\u0003\u0002\u0002\u0002\u1591\u1593\u0007",
    "\u0087\u0002\u0002\u1592\u1594\u0005\u01ca\u00e6\u0002\u1593\u1592\u0003",
    "\u0002\u0002\u0002\u1593\u1594\u0003\u0002\u0002\u0002\u1594\u1595\u0003",
    "\u0002\u0002\u0002\u1595\u15ae\u0005\u01a8\u00d5\u0002\u1596\u1598\u0007",
    "\u0087\u0002\u0002\u1597\u1599\u0005\u01ca\u00e6\u0002\u1598\u1597\u0003",
    "\u0002\u0002\u0002\u1598\u1599\u0003\u0002\u0002\u0002\u1599\u159a\u0003",
    "\u0002\u0002\u0002\u159a\u159c\u0005\u01d0\u00e9\u0002\u159b\u159d\u0005",
    "\u01da\u00ee\u0002\u159c\u159b\u0003\u0002\u0002\u0002\u159c\u159d\u0003",
    "\u0002\u0002\u0002\u159d\u159f\u0003\u0002\u0002\u0002\u159e\u15a0\u0005",
    "\u0194\u00cb\u0002\u159f\u159e\u0003\u0002\u0002\u0002\u159f\u15a0\u0003",
    "\u0002\u0002\u0002\u15a0\u15a2\u0003\u0002\u0002\u0002\u15a1\u15a3\u0005",
    "\u019a\u00ce\u0002\u15a2\u15a1\u0003\u0002\u0002\u0002\u15a2\u15a3\u0003",
    "\u0002\u0002\u0002\u15a3\u15a5\u0003\u0002\u0002\u0002\u15a4\u15a6\u0005",
    "\u019c\u00cf\u0002\u15a5\u15a4\u0003\u0002\u0002\u0002\u15a5\u15a6\u0003",
    "\u0002\u0002\u0002\u15a6\u15a8\u0003\u0002\u0002\u0002\u15a7\u15a9\u0005",
    "\u019e\u00d0\u0002\u15a8\u15a7\u0003\u0002\u0002\u0002\u15a8\u15a9\u0003",
    "\u0002\u0002\u0002\u15a9\u15ab\u0003\u0002\u0002\u0002\u15aa\u15ac\u0005",
    "\u01e8\u00f5\u0002\u15ab\u15aa\u0003\u0002\u0002\u0002\u15ab\u15ac\u0003",
    "\u0002\u0002\u0002\u15ac\u15ae\u0003\u0002\u0002\u0002\u15ad\u1591\u0003",
    "\u0002\u0002\u0002\u15ad\u1596\u0003\u0002\u0002\u0002\u15ae\u01c5\u0003",
    "\u0002\u0002\u0002\u15af\u15b1\u0007\u009e\u0002\u0002\u15b0\u15b2\t",
    "2\u0002\u0002\u15b1\u15b0\u0003\u0002\u0002\u0002\u15b1\u15b2\u0003",
    "\u0002\u0002\u0002\u15b2\u15b3\u0003\u0002\u0002\u0002\u15b3\u15b4\u0005",
    "\u01c0\u00e1\u0002\u15b4\u01c7\u0003\u0002\u0002\u0002\u15b5\u15b7\u0007",
    "\u009e\u0002\u0002\u15b6\u15b8\t2\u0002\u0002\u15b7\u15b6\u0003\u0002",
    "\u0002\u0002\u15b7\u15b8\u0003\u0002\u0002\u0002\u15b8\u15bb\u0003\u0002",
    "\u0002\u0002\u15b9\u15bc\u0005\u01c4\u00e3\u0002\u15ba\u15bc\u0005\u01c0",
    "\u00e1\u0002\u15bb\u15b9\u0003\u0002\u0002\u0002\u15bb\u15ba\u0003\u0002",
    "\u0002\u0002\u15bc\u01c9\u0003\u0002\u0002\u0002\u15bd\u15bf\u0006\u00e6",
    "O\u0002\u15be\u15c0\u0005\u01cc\u00e7\u0002\u15bf\u15be\u0003\u0002",
    "\u0002\u0002\u15c0\u15c1\u0003\u0002\u0002\u0002\u15c1\u15bf\u0003\u0002",
    "\u0002\u0002\u15c1\u15c2\u0003\u0002\u0002\u0002\u15c2\u15c6\u0003\u0002",
    "\u0002\u0002\u15c3\u15c4\u0006\u00e6P\u0002\u15c4\u15c6\u0005\u01ce",
    "\u00e8\u0002\u15c5\u15bd\u0003\u0002\u0002\u0002\u15c5\u15c3\u0003\u0002",
    "\u0002\u0002\u15c6\u01cb\u0003\u0002\u0002\u0002\u15c7\u15d0\t=\u0002",
    "\u0002\u15c8\u15d0\u0007D\u0002\u0002\u15c9\u15d0\u0007\u0095\u0002",
    "\u0002\u15ca\u15d0\u0007\u0092\u0002\u0002\u15cb\u15d0\u0007\u0090\u0002",
    "\u0002\u15cc\u15d0\u0007\u02a7\u0002\u0002\u15cd\u15d0\t>\u0002\u0002",
    "\u15ce\u15d0\u0007\u0091\u0002\u0002\u15cf\u15c7\u0003\u0002\u0002\u0002",
    "\u15cf\u15c8\u0003\u0002\u0002\u0002\u15cf\u15c9\u0003\u0002\u0002\u0002",
    "\u15cf\u15ca\u0003\u0002\u0002\u0002\u15cf\u15cb\u0003\u0002\u0002\u0002",
    "\u15cf\u15cc\u0003\u0002\u0002\u0002\u15cf\u15cd\u0003\u0002\u0002\u0002",
    "\u15cf\u15ce\u0003\u0002\u0002\u0002\u15d0\u01cd\u0003\u0002\u0002\u0002",
    "\u15d1\u15d2\t2\u0002\u0002\u15d2\u01cf\u0003\u0002\u0002\u0002\u15d3",
    "\u15d6\u0007\u034d\u0002\u0002\u15d4\u15d6\u0005\u01d2\u00ea\u0002\u15d5",
    "\u15d3\u0003\u0002\u0002\u0002\u15d5\u15d4\u0003\u0002\u0002\u0002\u15d6",
    "\u15db\u0003\u0002\u0002\u0002\u15d7\u15d8\u0007\u0364\u0002\u0002\u15d8",
    "\u15da\u0005\u01d2\u00ea\u0002\u15d9\u15d7\u0003\u0002\u0002\u0002\u15da",
    "\u15dd\u0003\u0002\u0002\u0002\u15db\u15d9\u0003\u0002\u0002\u0002\u15db",
    "\u15dc\u0003\u0002\u0002\u0002\u15dc\u01d1\u0003\u0002\u0002\u0002\u15dd",
    "\u15db\u0003\u0002\u0002\u0002\u15de\u15df\u0005\u0340\u01a1\u0002\u15df",
    "\u15e0\u0007\u035d\u0002\u0002\u15e0\u15e1\u0007\u034d\u0002\u0002\u15e1",
    "\u15f8\u0003\u0002\u0002\u0002\u15e2\u15e4\u0005\u035c\u01af\u0002\u15e3",
    "\u15e5\u0005\u0428\u0215\u0002\u15e4\u15e3\u0003\u0002\u0002\u0002\u15e4",
    "\u15e5\u0003\u0002\u0002\u0002\u15e5\u15f8\u0003\u0002\u0002\u0002\u15e6",
    "\u15e8\u0005\u03c8\u01e5\u0002\u15e7\u15e9\u0005\u0428\u0215\u0002\u15e8",
    "\u15e7\u0003\u0002\u0002\u0002\u15e8\u15e9\u0003\u0002\u0002\u0002\u15e9",
    "\u15f8\u0003\u0002\u0002\u0002\u15ea\u15ec\u0005\u03f8\u01fd\u0002\u15eb",
    "\u15ed\u0005\u0428\u0215\u0002\u15ec\u15eb\u0003\u0002\u0002\u0002\u15ec",
    "\u15ed\u0003\u0002\u0002\u0002\u15ed\u15f8\u0003\u0002\u0002\u0002\u15ee",
    "\u15f1\u0006\u00eaQ\u0002\u15ef\u15f0\u0007\u037d\u0002\u0002\u15f0",
    "\u15f2\u0007\u0344\u0002\u0002\u15f1\u15ef\u0003\u0002\u0002\u0002\u15f1",
    "\u15f2\u0003\u0002\u0002\u0002\u15f2\u15f3\u0003\u0002\u0002\u0002\u15f3",
    "\u15f5\u0005\u03f8\u01fd\u0002\u15f4\u15f6\u0005\u0428\u0215\u0002\u15f5",
    "\u15f4\u0003\u0002\u0002\u0002\u15f5\u15f6\u0003\u0002\u0002\u0002\u15f6",
    "\u15f8\u0003\u0002\u0002\u0002\u15f7\u15de\u0003\u0002\u0002\u0002\u15f7",
    "\u15e2\u0003\u0002\u0002\u0002\u15f7\u15e6\u0003\u0002\u0002\u0002\u15f7",
    "\u15ea\u0003\u0002\u0002\u0002\u15f7\u15ee\u0003\u0002\u0002\u0002\u15f8",
    "\u01d3\u0003\u0002\u0002\u0002\u15f9\u15fa\u0007N\u0002\u0002\u15fa",
    "\u15ff\u0005\u016e\u00b8\u0002\u15fb\u15fc\u0007\u0364\u0002\u0002\u15fc",
    "\u15fe\u0005\u016e\u00b8\u0002\u15fd\u15fb\u0003\u0002\u0002\u0002\u15fe",
    "\u1601\u0003\u0002\u0002\u0002\u15ff\u15fd\u0003\u0002\u0002\u0002\u15ff",
    "\u1600\u0003\u0002\u0002\u0002\u1600\u1627\u0003\u0002\u0002\u0002\u1601",
    "\u15ff\u0003\u0002\u0002\u0002\u1602\u1605\u0006\u00ebR\u0002\u1603",
    "\u1604\u0007\u00b8\u0002\u0002\u1604\u1606\u0007\u00bf\u0002\u0002\u1605",
    "\u1603\u0003\u0002\u0002\u0002\u1605\u1606\u0003\u0002\u0002\u0002\u1606",
    "\u1607\u0003\u0002\u0002\u0002\u1607\u1608\u0007N\u0002\u0002\u1608",
    "\u1627\u0005\u03b4\u01db\u0002\u1609\u160a\u0006\u00ebS\u0002\u160a",
    "\u160b\u0007N\u0002\u0002\u160b\u160c\u0007\u01e5\u0002\u0002\u160c",
    "\u1627\u0007\u0372\u0002\u0002\u160d\u160e\u0006\u00ebT\u0002\u160e",
    "\u160f\u0007N\u0002\u0002\u160f\u1610\u0007q\u0002\u0002\u1610\u1614",
    "\u0007\u0372\u0002\u0002\u1611\u1612\u0007\u0019\u0002\u0002\u1612\u1613",
    "\u0007\u0088\u0002\u0002\u1613\u1615\u0005\u0368\u01b5\u0002\u1614\u1611",
    "\u0003\u0002\u0002\u0002\u1614\u1615\u0003\u0002\u0002\u0002\u1615\u161c",
    "\u0003\u0002\u0002\u0002\u1616\u1618\t/\u0002\u0002\u1617\u1619\u0005",
    "\u01d6\u00ec\u0002\u1618\u1617\u0003\u0002\u0002\u0002\u1619\u161a\u0003",
    "\u0002\u0002\u0002\u161a\u1618\u0003\u0002\u0002\u0002\u161a\u161b\u0003",
    "\u0002\u0002\u0002\u161b\u161d\u0003\u0002\u0002\u0002\u161c\u1616\u0003",
    "\u0002\u0002\u0002\u161c\u161d\u0003\u0002\u0002\u0002\u161d\u1624\u0003",
    "\u0002\u0002\u0002\u161e\u1620\u0007[\u0002\u0002\u161f\u1621\u0005",
    "\u01d8\u00ed\u0002\u1620\u161f\u0003\u0002\u0002\u0002\u1621\u1622\u0003",
    "\u0002\u0002\u0002\u1622\u1620\u0003\u0002\u0002\u0002\u1622\u1623\u0003",
    "\u0002\u0002\u0002\u1623\u1625\u0003\u0002\u0002\u0002\u1624\u161e\u0003",
    "\u0002\u0002\u0002\u1624\u1625\u0003\u0002\u0002\u0002\u1625\u1627\u0003",
    "\u0002\u0002\u0002\u1626\u15f9\u0003\u0002\u0002\u0002\u1626\u1602\u0003",
    "\u0002\u0002\u0002\u1626\u1609\u0003\u0002\u0002\u0002\u1626\u160d\u0003",
    "\u0002\u0002\u0002\u1627\u01d5\u0003\u0002\u0002\u0002\u1628\u1629\u0007",
    "\u0097\u0002\u0002\u1629\u162a\u0007\u0013\u0002\u0002\u162a\u1635\u0007",
    "\u0372\u0002\u0002\u162b\u162d\u0007l\u0002\u0002\u162c\u162b\u0003",
    "\u0002\u0002\u0002\u162c\u162d\u0003\u0002\u0002\u0002\u162d\u162e\u0003",
    "\u0002\u0002\u0002\u162e\u162f\u00074\u0002\u0002\u162f\u1630\u0007",
    "\u0013\u0002\u0002\u1630\u1635\u0007\u0372\u0002\u0002\u1631\u1632\u0007",
    "5\u0002\u0002\u1632\u1633\u0007\u0013\u0002\u0002\u1633\u1635\u0007",
    "\u0372\u0002\u0002\u1634\u1628\u0003\u0002\u0002\u0002\u1634\u162c\u0003",
    "\u0002\u0002\u0002\u1634\u1631\u0003\u0002\u0002\u0002\u1635\u01d7\u0003",
    "\u0002\u0002\u0002\u1636\u1637\u0007\u0094\u0002\u0002\u1637\u1638\u0007",
    "\u0013\u0002\u0002\u1638\u163d\u0007\u0372\u0002\u0002\u1639\u163a\u0007",
    "\u0097\u0002\u0002\u163a\u163b\u0007\u0013\u0002\u0002\u163b\u163d\u0007",
    "\u0372\u0002\u0002\u163c\u1636\u0003\u0002\u0002\u0002\u163c\u1639\u0003",
    "\u0002\u0002\u0002\u163d\u01d9\u0003\u0002\u0002\u0002\u163e\u163f\u0007",
    ">\u0002\u0002\u163f\u1641\u0005\u01a0\u00d1\u0002\u1640\u1642\u0005",
    "\u01e0\u00f1\u0002\u1641\u1640\u0003\u0002\u0002\u0002\u1641\u1642\u0003",
    "\u0002\u0002\u0002\u1642\u1644\u0003\u0002\u0002\u0002\u1643\u1645\u0005",
    "\u01e2\u00f2\u0002\u1644\u1643\u0003\u0002\u0002\u0002\u1644\u1645\u0003",
    "\u0002\u0002\u0002\u1645\u1647\u0003\u0002\u0002\u0002\u1646\u1648\u0005",
    "\u01dc\u00ef\u0002\u1647\u1646\u0003\u0002\u0002\u0002\u1647\u1648\u0003",
    "\u0002\u0002\u0002\u1648\u164a\u0003\u0002\u0002\u0002\u1649\u164b\u0005",
    "\u01de\u00f0\u0002\u164a\u1649\u0003\u0002\u0002\u0002\u164a\u164b\u0003",
    "\u0002\u0002\u0002\u164b\u01db\u0003\u0002\u0002\u0002\u164c\u164d\u0007",
    "B\u0002\u0002\u164d\u164e\u0007\u0013\u0002\u0002\u164e\u164f\u0005",
    "\u01e4\u00f3\u0002\u164f\u01dd\u0003\u0002\u0002\u0002\u1650\u1651\u0007",
    "C\u0002\u0002\u1651\u1652\u0005\u03f6\u01fc\u0002\u1652\u01df\u0003",
    "\u0002\u0002\u0002\u1653\u1654\u0007\u00a8\u0002\u0002\u1654\u1655\u0005",
    "\u03f6\u01fc\u0002\u1655\u01e1\u0003\u0002\u0002\u0002\u1656\u165a\u0006",
    "\u00f2U\u0002\u1657\u1658\u0007\u02ab\u0002\u0002\u1658\u1659\u0007",
    "\u00aa\u0002\u0002\u1659\u165b\u0005\u03f6\u01fc\u0002\u165a\u1657\u0003",
    "\u0002\u0002\u0002\u165a\u165b\u0003\u0002\u0002\u0002\u165b\u165c\u0003",
    "\u0002\u0002\u0002\u165c\u165d\u0007\u00c3\u0002\u0002\u165d\u165f\u0007",
    "\u0013\u0002\u0002\u165e\u1660\u0007\u00e7\u0002\u0002\u165f\u165e\u0003",
    "\u0002\u0002\u0002\u165f\u1660\u0003\u0002\u0002\u0002\u1660\u1661\u0003",
    "\u0002\u0002\u0002\u1661\u1662\u0005\u03f6\u01fc\u0002\u1662\u01e3\u0003",
    "\u0002\u0002\u0002\u1663\u1664\u0006\u00f3V\u0002\u1664\u1669\u0005",
    "\u01e6\u00f4\u0002\u1665\u1666\u0007\u0364\u0002\u0002\u1666\u1668\u0005",
    "\u01e6\u00f4\u0002\u1667\u1665\u0003\u0002\u0002\u0002\u1668\u166b\u0003",
    "\u0002\u0002\u0002\u1669\u1667\u0003\u0002\u0002\u0002\u1669\u166a\u0003",
    "\u0002\u0002\u0002\u166a\u166e\u0003\u0002\u0002\u0002\u166b\u1669\u0003",
    "\u0002\u0002\u0002\u166c\u166d\u0007\u00aa\u0002\u0002\u166d\u166f\u0007",
    "\u028e\u0002\u0002\u166e\u166c\u0003\u0002\u0002\u0002\u166e\u166f\u0003",
    "\u0002\u0002\u0002\u166f\u168d\u0003\u0002\u0002\u0002\u1670\u168a\u0006",
    "\u00f3W\u0002\u1671\u1676\u0007\u028e\u0002\u0002\u1672\u1676\u0007",
    "\u00c5\u0002\u0002\u1673\u1674\u0007\u00d4\u0002\u0002\u1674\u1676\u0007",
    "\u0114\u0002\u0002\u1675\u1671\u0003\u0002\u0002\u0002\u1675\u1672\u0003",
    "\u0002\u0002\u0002\u1675\u1673\u0003\u0002\u0002\u0002\u1676\u1677\u0003",
    "\u0002\u0002\u0002\u1677\u1678\u0007\u0360\u0002\u0002\u1678\u167d\u0005",
    "\u01e6\u00f4\u0002\u1679\u167a\u0007\u0364\u0002\u0002\u167a\u167c\u0005",
    "\u01e6\u00f4\u0002\u167b\u1679\u0003\u0002\u0002\u0002\u167c\u167f\u0003",
    "\u0002\u0002\u0002\u167d\u167b\u0003\u0002\u0002\u0002\u167d\u167e\u0003",
    "\u0002\u0002\u0002\u167e\u1680\u0003\u0002\u0002\u0002\u167f\u167d\u0003",
    "\u0002\u0002\u0002\u1680\u1681\u0007\u0361\u0002\u0002\u1681\u168b\u0003",
    "\u0002\u0002\u0002\u1682\u1687\u0005\u01e6\u00f4\u0002\u1683\u1684\u0007",
    "\u0364\u0002\u0002\u1684\u1686\u0005\u01e6\u00f4\u0002\u1685\u1683\u0003",
    "\u0002\u0002\u0002\u1686\u1689\u0003\u0002\u0002\u0002\u1687\u1685\u0003",
    "\u0002\u0002\u0002\u1687\u1688\u0003\u0002\u0002\u0002\u1688\u168b\u0003",
    "\u0002\u0002\u0002\u1689\u1687\u0003\u0002\u0002\u0002\u168a\u1675\u0003",
    "\u0002\u0002\u0002\u168a\u1682\u0003\u0002\u0002\u0002\u168b\u168d\u0003",
    "\u0002\u0002\u0002\u168c\u1663\u0003\u0002\u0002\u0002\u168c\u1670\u0003",
    "\u0002\u0002\u0002\u168d\u01e5\u0003\u0002\u0002\u0002\u168e\u1690\u0005",
    "\u03f6\u01fc\u0002\u168f\u1691\t9\u0002\u0002\u1690\u168f\u0003\u0002",
    "\u0002\u0002\u1690\u1691\u0003\u0002\u0002\u0002\u1691\u01e7\u0003\u0002",
    "\u0002\u0002\u1692\u1693\u0006\u00f5X\u0002\u1693\u1697\u0005\u01ea",
    "\u00f6\u0002\u1694\u1695\u0006\u00f5Y\u0002\u1695\u1697\u0005\u01ee",
    "\u00f8\u0002\u1696\u1692\u0003\u0002\u0002\u0002\u1696\u1694\u0003\u0002",
    "\u0002\u0002\u1697\u01e9\u0003\u0002\u0002\u0002\u1698\u16a3\u0007Y",
    "\u0002\u0002\u1699\u169a\u0005\u01ec\u00f7\u0002\u169a\u169b\u0007\u0364",
    "\u0002\u0002\u169b\u169d\u0003\u0002\u0002\u0002\u169c\u1699\u0003\u0002",
    "\u0002\u0002\u169c\u169d\u0003\u0002\u0002\u0002\u169d\u169e\u0003\u0002",
    "\u0002\u0002\u169e\u16a4\u0005\u01ec\u00f7\u0002\u169f\u16a0\u0005\u01ec",
    "\u00f7\u0002\u16a0\u16a1\u0007\u0257\u0002\u0002\u16a1\u16a2\u0005\u01ec",
    "\u00f7\u0002\u16a2\u16a4\u0003\u0002\u0002\u0002\u16a3\u169c\u0003\u0002",
    "\u0002\u0002\u16a3\u169f\u0003\u0002\u0002\u0002\u16a4\u01eb\u0003\u0002",
    "\u0002\u0002\u16a5\u16a8\u0005\u0382\u01c2\u0002\u16a6\u16a8\u0005\u0366",
    "\u01b4\u0002\u16a7\u16a5\u0003\u0002\u0002\u0002\u16a7\u16a6\u0003\u0002",
    "\u0002\u0002\u16a8\u01ed\u0003\u0002\u0002\u0002\u16a9\u16ad\u0007Y",
    "\u0002\u0002\u16aa\u16ab\u0005\u0382\u01c2\u0002\u16ab\u16ac\u0007\u0364",
    "\u0002\u0002\u16ac\u16ae\u0003\u0002\u0002\u0002\u16ad\u16aa\u0003\u0002",
    "\u0002\u0002\u16ad\u16ae\u0003\u0002\u0002\u0002\u16ae\u16af\u0003\u0002",
    "\u0002\u0002\u16af\u16c3\u0005\u0382\u01c2\u0002\u16b0\u16b1\u0007:",
    "\u0002\u0002\u16b1\u16b2\u0007\u0200\u0002\u0002\u16b2\u16b3\u0005\u0382",
    "\u01c2\u0002\u16b3\u16b4\u0007\u0291\u0002\u0002\u16b4\u16b5\u0007\u025c",
    "\u0002\u0002\u16b5\u16c3\u0003\u0002\u0002\u0002\u16b6\u16b7\u0007\u0257",
    "\u0002\u0002\u16b7\u16b8\u0005\u0382\u01c2\u0002\u16b8\u16b9\u0007\u0291",
    "\u0002\u0002\u16b9\u16bb\u0003\u0002\u0002\u0002\u16ba\u16b6\u0003\u0002",
    "\u0002\u0002\u16ba\u16bb\u0003\u0002\u0002\u0002\u16bb\u16bc\u0003\u0002",
    "\u0002\u0002\u16bc\u16bd\u0007:\u0002\u0002\u16bd\u16be\u0007\u0252",
    "\u0002\u0002\u16be\u16bf\u0005\u0382\u01c2\u0002\u16bf\u16c0\u0007\u0291",
    "\u0002\u0002\u16c0\u16c1\u0007\u025c\u0002\u0002\u16c1\u16c3\u0003\u0002",
    "\u0002\u0002\u16c2\u16a9\u0003\u0002\u0002\u0002\u16c2\u16b0\u0003\u0002",
    "\u0002\u0002\u16c2\u16ba\u0003\u0002\u0002\u0002\u16c3\u01ef\u0003\u0002",
    "\u0002\u0002\u16c4\u16c5\u0007\u02ab\u0002\u0002\u16c5\u16ce\u0007\u02c0",
    "\u0002\u0002\u16c6\u16cb\u0005\u020c\u0107\u0002\u16c7\u16c8\u0007\u0364",
    "\u0002\u0002\u16c8\u16ca\u0005\u020c\u0107\u0002\u16c9\u16c7\u0003\u0002",
    "\u0002\u0002\u16ca\u16cd\u0003\u0002\u0002\u0002\u16cb\u16c9\u0003\u0002",
    "\u0002\u0002\u16cb\u16cc\u0003\u0002\u0002\u0002\u16cc\u16cf\u0003\u0002",
    "\u0002\u0002\u16cd\u16cb\u0003\u0002\u0002\u0002\u16ce\u16c6\u0003\u0002",
    "\u0002\u0002\u16ce\u16cf\u0003\u0002\u0002\u0002\u16cf\u01f1\u0003\u0002",
    "\u0002\u0002\u16d0\u16d2\u0007\u01b6\u0002\u0002\u16d1\u16d3\u0007\u02d5",
    "\u0002\u0002\u16d2\u16d1\u0003\u0002\u0002\u0002\u16d2\u16d3\u0003\u0002",
    "\u0002\u0002\u16d3\u01f3\u0003\u0002\u0002\u0002\u16d4\u16d6\u0007\u01cc",
    "\u0002\u0002\u16d5\u16d7\u0007\u02d5\u0002\u0002\u16d6\u16d5\u0003\u0002",
    "\u0002\u0002\u16d6\u16d7\u0003\u0002\u0002\u0002\u16d7\u16dd\u0003\u0002",
    "\u0002\u0002\u16d8\u16da\u0007\r\u0002\u0002\u16d9\u16db\u0007\u0253",
    "\u0002\u0002\u16da\u16d9\u0003\u0002\u0002\u0002\u16da\u16db\u0003\u0002",
    "\u0002\u0002\u16db\u16dc\u0003\u0002\u0002\u0002\u16dc\u16de\u0007\u01bf",
    "\u0002\u0002\u16dd\u16d8\u0003\u0002\u0002\u0002\u16dd\u16de\u0003\u0002",
    "\u0002\u0002\u16de\u16e3\u0003\u0002\u0002\u0002\u16df\u16e1\u0007\u0253",
    "\u0002\u0002\u16e0\u16df\u0003\u0002\u0002\u0002\u16e0\u16e1\u0003\u0002",
    "\u0002\u0002\u16e1\u16e2\u0003\u0002\u0002\u0002\u16e2\u16e4\u0007{",
    "\u0002\u0002\u16e3\u16e0\u0003\u0002\u0002\u0002\u16e3\u16e4\u0003\u0002",
    "\u0002\u0002\u16e4\u01f5\u0003\u0002\u0002\u0002\u16e5\u16e7\u0007\u028d",
    "\u0002\u0002\u16e6\u16e8\u0007\u02d5\u0002\u0002\u16e7\u16e6\u0003\u0002",
    "\u0002\u0002\u16e7\u16e8\u0003\u0002\u0002\u0002\u16e8\u16ee\u0003\u0002",
    "\u0002\u0002\u16e9\u16eb\u0007\r\u0002\u0002\u16ea\u16ec\u0007\u0253",
    "\u0002\u0002\u16eb\u16ea\u0003\u0002\u0002\u0002\u16eb\u16ec\u0003\u0002",
    "\u0002\u0002\u16ec\u16ed\u0003\u0002\u0002\u0002\u16ed\u16ef\u0007\u01bf",
    "\u0002\u0002\u16ee\u16e9\u0003\u0002\u0002\u0002\u16ee\u16ef\u0003\u0002",
    "\u0002\u0002\u16ef\u16f4\u0003\u0002\u0002\u0002\u16f0\u16f2\u0007\u0253",
    "\u0002\u0002\u16f1\u16f0\u0003\u0002\u0002\u0002\u16f1\u16f2\u0003\u0002",
    "\u0002\u0002\u16f2\u16f3\u0003\u0002\u0002\u0002\u16f3\u16f5\u0007{",
    "\u0002\u0002\u16f4\u16f1\u0003\u0002\u0002\u0002\u16f4\u16f5\u0003\u0002",
    "\u0002\u0002\u16f5\u01f7\u0003\u0002\u0002\u0002\u16f6\u16f7\u0007\u0293",
    "\u0002\u0002\u16f7\u16f8\u0005\u0376\u01bc\u0002\u16f8\u01f9\u0003\u0002",
    "\u0002\u0002\u16f9\u16fb\u0007\u028d\u0002\u0002\u16fa\u16fc\u0007\u02d5",
    "\u0002\u0002\u16fb\u16fa\u0003\u0002\u0002\u0002\u16fb\u16fc\u0003\u0002",
    "\u0002\u0002\u16fc\u16fd\u0003\u0002\u0002\u0002\u16fd\u16ff\u0007\u0099",
    "\u0002\u0002\u16fe\u1700\u0007\u0293\u0002\u0002\u16ff\u16fe\u0003\u0002",
    "\u0002\u0002\u16ff\u1700\u0003\u0002\u0002\u0002\u1700\u1701\u0003\u0002",
    "\u0002\u0002\u1701\u1702\u0005\u0376\u01bc\u0002\u1702\u01fb\u0003\u0002",
    "\u0002\u0002\u1703\u1704\u0007{\u0002\u0002\u1704\u1705\u0007\u0293",
    "\u0002\u0002\u1705\u1706\u0005\u0376\u01bc\u0002\u1706\u01fd\u0003\u0002",
    "\u0002\u0002\u1707\u1708\u0007]\u0002\u0002\u1708\u1709\u0007\u02e6",
    "\u0002\u0002\u1709\u170e\u0005\u020e\u0108\u0002\u170a\u170b\u0007\u0364",
    "\u0002\u0002\u170b\u170d\u0005\u020e\u0108\u0002\u170c\u170a\u0003\u0002",
    "\u0002\u0002\u170d\u1710\u0003\u0002\u0002\u0002\u170e\u170c\u0003\u0002",
    "\u0002\u0002\u170e\u170f\u0003\u0002\u0002\u0002\u170f\u01ff\u0003\u0002",
    "\u0002\u0002\u1710\u170e\u0003\u0002\u0002\u0002\u1711\u1712\u0007\u00a0",
    "\u0002\u0002\u1712\u1713\u0007\u02e6\u0002\u0002\u1713\u0201\u0003\u0002",
    "\u0002\u0002\u1714\u1715\t?\u0002\u0002\u1715\u171f\t@\u0002\u0002\u1716",
    "\u1718\u0007\u01cc\u0002\u0002\u1717\u1719\u0007\u02d5\u0002\u0002\u1718",
    "\u1717\u0003\u0002\u0002\u0002\u1718\u1719\u0003\u0002\u0002\u0002\u1719",
    "\u171f\u0003\u0002\u0002\u0002\u171a\u171c\u0007\u028d\u0002\u0002\u171b",
    "\u171d\u0007\u02d5\u0002\u0002\u171c\u171b\u0003\u0002\u0002\u0002\u171c",
    "\u171d\u0003\u0002\u0002\u0002\u171d\u171f\u0003\u0002\u0002\u0002\u171e",
    "\u1714\u0003\u0002\u0002\u0002\u171e\u1716\u0003\u0002\u0002\u0002\u171e",
    "\u171a\u0003\u0002\u0002\u0002\u171f\u0203\u0003\u0002\u0002\u0002\u1720",
    "\u1721\u0007\u0088\u0002\u0002\u1721\u1722\u0007\u01b2\u0002\u0002\u1722",
    "\u1723\u0007\u0355\u0002\u0002\u1723\u1724\t\u001d\u0002\u0002\u1724",
    "\u0205\u0003\u0002\u0002\u0002\u1725\u1726\u0006\u0104Z\u0002\u1726",
    "\u172a\u0005\u020a\u0106\u0002\u1727\u1728\u0006\u0104[\u0002\u1728",
    "\u172a\u0005\u0208\u0105\u0002\u1729\u1725\u0003\u0002\u0002\u0002\u1729",
    "\u1727\u0003\u0002\u0002\u0002\u172a\u0207\u0003\u0002\u0002\u0002\u172b",
    "\u172c\u0007\u0088\u0002\u0002\u172c\u172d\u0007\u02c0\u0002\u0002\u172d",
    "\u172e\u0007w\u0002\u0002\u172e\u1739\tA\u0002\u0002\u172f\u1730\u0007",
    "\u0088\u0002\u0002\u1730\u1731\u0007\u02c0\u0002\u0002\u1731\u1732\u0007",
    "\u021d\u0002\u0002\u1732\u1736\u0007\u0225\u0002\u0002\u1733\u1734\u0007",
    "w\u0002\u0002\u1734\u1737\u0007\u0331\u0002\u0002\u1735\u1737\u0007",
    "\u0333\u0002\u0002\u1736\u1733\u0003\u0002\u0002\u0002\u1736\u1735\u0003",
    "\u0002\u0002\u0002\u1737\u1739\u0003\u0002\u0002\u0002\u1738\u172b\u0003",
    "\u0002\u0002\u0002\u1738\u172f\u0003\u0002\u0002\u0002\u1739\u0209\u0003",
    "\u0002\u0002\u0002\u173a\u173c\u0007\u0088\u0002\u0002\u173b\u173d\t",
    "B\u0002\u0002\u173c\u173b\u0003\u0002\u0002\u0002\u173c\u173d\u0003",
    "\u0002\u0002\u0002\u173d\u173e\u0003\u0002\u0002\u0002\u173e\u173f\u0007",
    "\u02c0\u0002\u0002\u173f\u1744\u0005\u0212\u010a\u0002\u1740\u1741\u0007",
    "\u0364\u0002\u0002\u1741\u1743\u0005\u0212\u010a\u0002\u1742\u1740\u0003",
    "\u0002\u0002\u0002\u1743\u1746\u0003\u0002\u0002\u0002\u1744\u1742\u0003",
    "\u0002\u0002\u0002\u1744\u1745\u0003\u0002\u0002\u0002\u1745\u020b\u0003",
    "\u0002\u0002\u0002\u1746\u1744\u0003\u0002\u0002\u0002\u1747\u1748\u0007",
    "\u00aa\u0002\u0002\u1748\u1749\u0007\u01d3\u0002\u0002\u1749\u174f\u0007",
    "\u029e\u0002\u0002\u174a\u174b\u0007w\u0002\u0002\u174b\u174f\u0007",
    "\u00ab\u0002\u0002\u174c\u174d\u0007w\u0002\u0002\u174d\u174f\u0007",
    "\u025c\u0002\u0002\u174e\u1747\u0003\u0002\u0002\u0002\u174e\u174a\u0003",
    "\u0002\u0002\u0002\u174e\u174c\u0003\u0002\u0002\u0002\u174f\u020d\u0003",
    "\u0002\u0002\u0002\u1750\u1755\u0005\u0342\u01a2\u0002\u1751\u1753\u0007",
    "\u000e\u0002\u0002\u1752\u1751\u0003\u0002\u0002\u0002\u1752\u1753\u0003",
    "\u0002\u0002\u0002\u1753\u1754\u0003\u0002\u0002\u0002\u1754\u1756\u0005",
    "\u0376\u01bc\u0002\u1755\u1752\u0003\u0002\u0002\u0002\u1755\u1756\u0003",
    "\u0002\u0002\u0002\u1756\u1757\u0003\u0002\u0002\u0002\u1757\u1758\u0005",
    "\u0210\u0109\u0002\u1758\u020f\u0003\u0002\u0002\u0002\u1759\u175b\u0007",
    "w\u0002\u0002\u175a\u175c\u0007\u0227\u0002\u0002\u175b\u175a\u0003",
    "\u0002\u0002\u0002\u175b\u175c\u0003\u0002\u0002\u0002\u175c\u1762\u0003",
    "\u0002\u0002\u0002\u175d\u175f\u0007_\u0002\u0002\u175e\u175d\u0003",
    "\u0002\u0002\u0002\u175e\u175f\u0003\u0002\u0002\u0002\u175f\u1760\u0003",
    "\u0002\u0002\u0002\u1760\u1762\u0007\u00ab\u0002\u0002\u1761\u1759\u0003",
    "\u0002\u0002\u0002\u1761\u175e\u0003\u0002\u0002\u0002\u1762\u0211\u0003",
    "\u0002\u0002\u0002\u1763\u1764\u0007\u021d\u0002\u0002\u1764\u1765\u0007",
    "\u0225\u0002\u0002\u1765\u176b\u0005\u0214\u010b\u0002\u1766\u1767\u0007",
    "w\u0002\u0002\u1767\u176b\u0007\u00ab\u0002\u0002\u1768\u1769\u0007",
    "w\u0002\u0002\u1769\u176b\u0007\u025c\u0002\u0002\u176a\u1763\u0003",
    "\u0002\u0002\u0002\u176a\u1766\u0003\u0002\u0002\u0002\u176a\u1768\u0003",
    "\u0002\u0002\u0002\u176b\u0213\u0003\u0002\u0002\u0002\u176c\u176d\u0007",
    "\u0330\u0002\u0002\u176d\u1774\u0007w\u0002\u0002\u176e\u176f\u0007",
    "w\u0002\u0002\u176f\u1774\u0007\u0331\u0002\u0002\u1770\u1771\u0007",
    "w\u0002\u0002\u1771\u1774\u0007\u0332\u0002\u0002\u1772\u1774\u0007",
    "\u0333\u0002\u0002\u1773\u176c\u0003\u0002\u0002\u0002\u1773\u176e\u0003",
    "\u0002\u0002\u0002\u1773\u1770\u0003\u0002\u0002\u0002\u1773\u1772\u0003",
    "\u0002\u0002\u0002\u1774\u0215\u0003\u0002\u0002\u0002\u1775\u1776\u0007",
    "\u0018\u0002\u0002\u1776\u1777\u0007\u022a\u0002\u0002\u1777\u1778\u0007",
    "\u0099\u0002\u0002\u1778\u177d\u0005\u0228\u0115\u0002\u1779\u177a\u0007",
    "\u0364\u0002\u0002\u177a\u177c\u0005\u0228\u0115\u0002\u177b\u1779\u0003",
    "\u0002\u0002\u0002\u177c\u177f\u0003\u0002\u0002\u0002\u177d\u177b\u0003",
    "\u0002\u0002\u0002\u177d\u177e\u0003\u0002\u0002\u0002\u177e\u1781\u0003",
    "\u0002\u0002\u0002\u177f\u177d\u0003\u0002\u0002\u0002\u1780\u1782\u0005",
    "\u0230\u0119\u0002\u1781\u1780\u0003\u0002\u0002\u0002\u1781\u1782\u0003",
    "\u0002\u0002\u0002\u1782\u0217\u0003\u0002\u0002\u0002\u1783\u1784\u0007",
    "\u0018\u0002\u0002\u1784\u1785\u0007\u0289\u0002\u0002\u1785\u1786\u0007",
    "\u01ff\u0002\u0002\u1786\u178b\u0005\u0232\u011a\u0002\u1787\u1788\u0007",
    "\u0364\u0002\u0002\u1788\u178a\u0005\u0232\u011a\u0002\u1789\u1787\u0003",
    "\u0002\u0002\u0002\u178a\u178d\u0003\u0002\u0002\u0002\u178b\u1789\u0003",
    "\u0002\u0002\u0002\u178b\u178c\u0003\u0002\u0002\u0002\u178c\u0219\u0003",
    "\u0002\u0002\u0002\u178d\u178b\u0003\u0002\u0002\u0002\u178e\u178f\u0007",
    "u\u0002\u0002\u178f\u1790\tC\u0002\u0002\u1790\u1795\u0007\u0229\u0002",
    "\u0002\u1791\u1792\u0007\u0099\u0002\u0002\u1792\u1796\u0007\u0372\u0002",
    "\u0002\u1793\u1794\u0007\u0010\u0002\u0002\u1794\u1796\u0007\u0372\u0002",
    "\u0002\u1795\u1791\u0003\u0002\u0002\u0002\u1795\u1793\u0003\u0002\u0002",
    "\u0002\u1796\u021b\u0003\u0002\u0002\u0002\u1797\u1798\u0007\u028a\u0002",
    "\u0002\u1798\u1799\u0007\u022a\u0002\u0002\u1799\u021d\u0003\u0002\u0002",
    "\u0002\u179a\u179b\u0007\u028a\u0002\u0002\u179b\u179d\u0007\u029c\u0002",
    "\u0002\u179c\u179e\u0007\t\u0002\u0002\u179d\u179c\u0003\u0002\u0002",
    "\u0002\u179d\u179e\u0003\u0002\u0002\u0002\u179e\u17a0\u0003\u0002\u0002",
    "\u0002\u179f\u17a1\u0005\u0230\u0119\u0002\u17a0\u179f\u0003\u0002\u0002",
    "\u0002\u17a0\u17a1\u0003\u0002\u0002\u0002\u17a1\u021f\u0003\u0002\u0002",
    "\u0002\u17a2\u17a3\u0007\u02ab\u0002\u0002\u17a3\u17ac\u0007\u029c\u0002",
    "\u0002\u17a4\u17a9\u0005\u0236\u011c\u0002\u17a5\u17a6\u0007\u0364\u0002",
    "\u0002\u17a6\u17a8\u0005\u0236\u011c\u0002\u17a7\u17a5\u0003\u0002\u0002",
    "\u0002\u17a8\u17ab\u0003\u0002\u0002\u0002\u17a9\u17a7\u0003\u0002\u0002",
    "\u0002\u17a9\u17aa\u0003\u0002\u0002\u0002\u17aa\u17ad\u0003\u0002\u0002",
    "\u0002\u17ab\u17a9\u0003\u0002\u0002\u0002\u17ac\u17a4\u0003\u0002\u0002",
    "\u0002\u17ac\u17ad\u0003\u0002\u0002\u0002\u17ad\u17b0\u0003\u0002\u0002",
    "\u0002\u17ae\u17af\u0007\u02c8\u0002\u0002\u17af\u17b1\u0005\u0238\u011d",
    "\u0002\u17b0\u17ae\u0003\u0002\u0002\u0002\u17b0\u17b1\u0003\u0002\u0002",
    "\u0002\u17b1\u17b5\u0003\u0002\u0002\u0002\u17b2\u17b4\u0005\u023a\u011e",
    "\u0002\u17b3\u17b2\u0003\u0002\u0002\u0002\u17b4\u17b7\u0003\u0002\u0002",
    "\u0002\u17b5\u17b3\u0003\u0002\u0002\u0002\u17b5\u17b6\u0003\u0002\u0002",
    "\u0002\u17b6\u17b9\u0003\u0002\u0002\u0002\u17b7\u17b5\u0003\u0002\u0002",
    "\u0002\u17b8\u17ba\u0005\u0230\u0119\u0002\u17b9\u17b8\u0003\u0002\u0002",
    "\u0002\u17b9\u17ba\u0003\u0002\u0002\u0002\u17ba\u0221\u0003\u0002\u0002",
    "\u0002\u17bb\u17bc\u0007\u02b1\u0002\u0002\u17bc\u17c5\u0007\u029c\u0002",
    "\u0002\u17bd\u17c2\u0005\u0236\u011c\u0002\u17be\u17bf\u0007\u0364\u0002",
    "\u0002\u17bf\u17c1\u0005\u0236\u011c\u0002\u17c0\u17be\u0003\u0002\u0002",
    "\u0002\u17c1\u17c4\u0003\u0002\u0002\u0002\u17c2\u17c0\u0003\u0002\u0002",
    "\u0002\u17c2\u17c3\u0003\u0002\u0002\u0002\u17c3\u17c6\u0003\u0002\u0002",
    "\u0002\u17c4\u17c2\u0003\u0002\u0002\u0002\u17c5\u17bd\u0003\u0002\u0002",
    "\u0002\u17c5\u17c6\u0003\u0002\u0002\u0002\u17c6\u0223\u0003\u0002\u0002",
    "\u0002\u17c7\u17c8\u0007\u02ab\u0002\u0002\u17c8\u17c9\u0007\u020a\u0002",
    "\u0002\u17c9\u0225\u0003\u0002\u0002\u0002\u17ca\u17cb\u0007\u02b1\u0002",
    "\u0002\u17cb\u17cc\u0007\u020a\u0002\u0002\u17cc\u0227\u0003\u0002\u0002",
    "\u0002\u17cd\u17ce\u0005\u022a\u0116\u0002\u17ce\u17cf\u0007\u0355\u0002",
    "\u0002\u17cf\u17d0\u0007\u0372\u0002\u0002\u17d0\u17eb\u0003\u0002\u0002",
    "\u0002\u17d1\u17d2\u0005\u022c\u0117\u0002\u17d2\u17d3\u0007\u0355\u0002",
    "\u0002\u17d3\u17d4\u0005\u0382\u01c2\u0002\u17d4\u17eb\u0003\u0002\u0002",
    "\u0002\u17d5\u17d6\u0005\u022e\u0118\u0002\u17d6\u17d7\u0007\u0355\u0002",
    "\u0002\u17d7\u17d8\t\u001d\u0002\u0002\u17d8\u17eb\u0003\u0002\u0002",
    "\u0002\u17d9\u17da\u0007\u022e\u0002\u0002\u17da\u17db\u0007\u0355\u0002",
    "\u0002\u17db\u17eb\u0007\u0375\u0002\u0002\u17dc\u17dd\u0007\u0211\u0002",
    "\u0002\u17dd\u17de\u0007\u0355\u0002\u0002\u17de\u17e7\u0007\u0360\u0002",
    "\u0002\u17df\u17e4\u0005\u0376\u01bc\u0002\u17e0\u17e1\u0007\u0364\u0002",
    "\u0002\u17e1\u17e3\u0005\u0376\u01bc\u0002\u17e2\u17e0\u0003\u0002\u0002",
    "\u0002\u17e3\u17e6\u0003\u0002\u0002\u0002\u17e4\u17e2\u0003\u0002\u0002",
    "\u0002\u17e4\u17e5\u0003\u0002\u0002\u0002\u17e5\u17e8\u0003\u0002\u0002",
    "\u0002\u17e6\u17e4\u0003\u0002\u0002\u0002\u17e7\u17df\u0003\u0002\u0002",
    "\u0002\u17e7\u17e8\u0003\u0002\u0002\u0002\u17e8\u17e9\u0003\u0002\u0002",
    "\u0002\u17e9\u17eb\u0007\u0361\u0002\u0002\u17ea\u17cd\u0003\u0002\u0002",
    "\u0002\u17ea\u17d1\u0003\u0002\u0002\u0002\u17ea\u17d5\u0003\u0002\u0002",
    "\u0002\u17ea\u17d9\u0003\u0002\u0002\u0002\u17ea\u17dc\u0003\u0002\u0002",
    "\u0002\u17eb\u0229\u0003\u0002\u0002\u0002\u17ec\u17ed\tD\u0002\u0002",
    "\u17ed\u022b\u0003\u0002\u0002\u0002\u17ee\u17ef\tE\u0002\u0002\u17ef",
    "\u022d\u0003\u0002\u0002\u0002\u17f0\u17f1\tF\u0002\u0002\u17f1\u022f",
    "\u0003\u0002\u0002\u0002\u17f2\u17f3\u0007;\u0002\u0002\u17f3\u17f4",
    "\u0007\u01c1\u0002\u0002\u17f4\u17f5\u0007\u0372\u0002\u0002\u17f5\u0231",
    "\u0003\u0002\u0002\u0002\u17f6\u17f7\u0007\u0282\u0002\u0002\u17f7\u17f8",
    "\u0007\u0355\u0002\u0002\u17f8\u17f9\u0007\u0360\u0002\u0002\u17f9\u17fa",
    "\u0005\u03a4\u01d3\u0002\u17fa\u17fb\u0007\u0361\u0002\u0002\u17fb\u1828",
    "\u0003\u0002\u0002\u0002\u17fc\u17fd\u0007\u0284\u0002\u0002\u17fd\u17fe",
    "\u0007\u0355\u0002\u0002\u17fe\u17ff\u0007\u0360\u0002\u0002\u17ff\u1800",
    "\u0005\u03a4\u01d3\u0002\u1800\u1801\u0007\u0361\u0002\u0002\u1801\u1828",
    "\u0003\u0002\u0002\u0002\u1802\u1803\u0007\u0283\u0002\u0002\u1803\u1804",
    "\u0007\u0355\u0002\u0002\u1804\u1805\u0007\u0360\u0002\u0002\u1805\u1806",
    "\u0005\u03b0\u01d9\u0002\u1806\u1807\u0007\u0361\u0002\u0002\u1807\u1828",
    "\u0003\u0002\u0002\u0002\u1808\u1809\u0007\u0285\u0002\u0002\u1809\u180a",
    "\u0007\u0355\u0002\u0002\u180a\u180b\u0007\u0360\u0002\u0002\u180b\u180c",
    "\u0005\u03b0\u01d9\u0002\u180c\u180d\u0007\u0361\u0002\u0002\u180d\u1828",
    "\u0003\u0002\u0002\u0002\u180e\u180f\u0007\u0287\u0002\u0002\u180f\u1810",
    "\u0007\u0355\u0002\u0002\u1810\u1811\u0007\u0360\u0002\u0002\u1811\u1812",
    "\u0005\u03ba\u01de\u0002\u1812\u1813\u0007\u0361\u0002\u0002\u1813\u1828",
    "\u0003\u0002\u0002\u0002\u1814\u1815\u0007\u0288\u0002\u0002\u1815\u1816",
    "\u0007\u0355\u0002\u0002\u1816\u1817\u0007\u0360\u0002\u0002\u1817\u1818",
    "\u0005\u03ba\u01de\u0002\u1818\u1819\u0007\u0361\u0002\u0002\u1819\u1828",
    "\u0003\u0002\u0002\u0002\u181a\u181b\u0007\u0286\u0002\u0002\u181b\u181c",
    "\u0007\u0355\u0002\u0002\u181c\u181d\u0007\u0360\u0002\u0002\u181d\u1822",
    "\u0005\u0234\u011b\u0002\u181e\u181f\u0007\u0364\u0002\u0002\u181f\u1821",
    "\u0005\u0234\u011b\u0002\u1820\u181e\u0003\u0002\u0002\u0002\u1821\u1824",
    "\u0003\u0002\u0002\u0002\u1822\u1820\u0003\u0002\u0002\u0002\u1822\u1823",
    "\u0003\u0002\u0002\u0002\u1823\u1825\u0003\u0002\u0002\u0002\u1824\u1822",
    "\u0003\u0002\u0002\u0002\u1825\u1826\u0007\u0361\u0002\u0002\u1826\u1828",
    "\u0003\u0002\u0002\u0002\u1827\u17f6\u0003\u0002\u0002\u0002\u1827\u17fc",
    "\u0003\u0002\u0002\u0002\u1827\u1802\u0003\u0002\u0002\u0002\u1827\u1808",
    "\u0003\u0002\u0002\u0002\u1827\u180e\u0003\u0002\u0002\u0002\u1827\u1814",
    "\u0003\u0002\u0002\u0002\u1827\u181a\u0003\u0002\u0002\u0002\u1828\u0233",
    "\u0003\u0002\u0002\u0002\u1829\u182a\u0007\u0360\u0002\u0002\u182a\u182b",
    "\u0005\u0342\u01a2\u0002\u182b\u182c\u0007\u0364\u0002\u0002\u182c\u182d",
    "\u0005\u0342\u01a2\u0002\u182d\u182e\u0007\u0361\u0002\u0002\u182e\u0235",
    "\u0003\u0002\u0002\u0002\u182f\u1830\tG\u0002\u0002\u1830\u0237\u0003",
    "\u0002\u0002\u0002\u1831\u1832\tH\u0002\u0002\u1832\u1833\u0007\u0355",
    "\u0002\u0002\u1833\u1844\u0005\u023c\u011f\u0002\u1834\u1835\u0007\u0230",
    "\u0002\u0002\u1835\u1836\u0007\u0355\u0002\u0002\u1836\u1837\u0007\u0372",
    "\u0002\u0002\u1837\u1838\u0007\u0364\u0002\u0002\u1838\u1839\u0007\u0231",
    "\u0002\u0002\u1839\u183a\u0007\u0355\u0002\u0002\u183a\u1844\u0005\u0382",
    "\u01c2\u0002\u183b\u183c\u0007\u027c\u0002\u0002\u183c\u183d\u0007\u0355",
    "\u0002\u0002\u183d\u183e\u0007\u0372\u0002\u0002\u183e\u183f\u0007\u0364",
    "\u0002\u0002\u183f\u1840\u0007\u027d\u0002\u0002\u1840\u1841\u0007\u0355",
    "\u0002\u0002\u1841\u1844\u0005\u0382\u01c2\u0002\u1842\u1844\u0007\u02a5",
    "\u0002\u0002\u1843\u1831\u0003\u0002\u0002\u0002\u1843\u1834\u0003\u0002",
    "\u0002\u0002\u1843\u183b\u0003\u0002\u0002\u0002\u1843\u1842\u0003\u0002",
    "\u0002\u0002\u1844\u0239\u0003\u0002\u0002\u0002\u1845\u1846\u0007\u02ca",
    "\u0002\u0002\u1846\u1847\u0007\u0355\u0002\u0002\u1847\u1852\u0007\u0372",
    "\u0002\u0002\u1848\u1849\u0007\u0267\u0002\u0002\u1849\u184a\u0007\u0355",
    "\u0002\u0002\u184a\u1852\u0007\u0372\u0002\u0002\u184b\u184c\u0007\u01dc",
    "\u0002\u0002\u184c\u184d\u0007\u0355\u0002\u0002\u184d\u1852\u0007\u0372",
    "\u0002\u0002\u184e\u184f\u0007\u026a\u0002\u0002\u184f\u1850\u0007\u0355",
    "\u0002\u0002\u1850\u1852\u0007\u0372\u0002\u0002\u1851\u1845\u0003\u0002",
    "\u0002\u0002\u1851\u1848\u0003\u0002\u0002\u0002\u1851\u184b\u0003\u0002",
    "\u0002\u0002\u1851\u184e\u0003\u0002\u0002\u0002\u1852\u023b\u0003\u0002",
    "\u0002\u0002\u1853\u1858\u0005\u036e\u01b8\u0002\u1854\u1855\u0007\u0364",
    "\u0002\u0002\u1855\u1857\u0005\u036e\u01b8\u0002\u1856\u1854\u0003\u0002",
    "\u0002\u0002\u1857\u185a\u0003\u0002\u0002\u0002\u1858\u1856\u0003\u0002",
    "\u0002\u0002\u1858\u1859\u0003\u0002\u0002\u0002\u1859\u185d\u0003\u0002",
    "\u0002\u0002\u185a\u1858\u0003\u0002\u0002\u0002\u185b\u185d\u0007\u0372",
    "\u0002\u0002\u185c\u1853\u0003\u0002\u0002\u0002\u185c\u185b\u0003\u0002",
    "\u0002\u0002\u185d\u023d\u0003\u0002\u0002\u0002\u185e\u185f\u0007\u02d8",
    "\u0002\u0002\u185f\u1860\t?\u0002\u0002\u1860\u1862\u0005\u0370\u01b9",
    "\u0002\u1861\u1863\tI\u0002\u0002\u1862\u1861\u0003\u0002\u0002\u0002",
    "\u1862\u1863\u0003\u0002\u0002\u0002\u1863\u023f\u0003\u0002\u0002\u0002",
    "\u1864\u1865\u0007\u02d8\u0002\u0002\u1865\u1866\u0007\u01ea\u0002\u0002",
    "\u1866\u186c\u0005\u0370\u01b9\u0002\u1867\u186a\u0007\u02b8\u0002\u0002",
    "\u1868\u1869\u0007;\u0002\u0002\u1869\u186b\u0007\u0248\u0002\u0002",
    "\u186a\u1868\u0003\u0002\u0002\u0002\u186a\u186b\u0003\u0002\u0002\u0002",
    "\u186b\u186d\u0003\u0002\u0002\u0002\u186c\u1867\u0003\u0002\u0002\u0002",
    "\u186c\u186d\u0003\u0002\u0002\u0002\u186d\u0241\u0003\u0002\u0002\u0002",
    "\u186e\u186f\u0007\u02d8\u0002\u0002\u186f\u1870\u0007\u026e\u0002\u0002",
    "\u1870\u1871\u0005\u0370\u01b9\u0002\u1871\u0243\u0003\u0002\u0002\u0002",
    "\u1872\u1873\u0007\u02d8\u0002\u0002\u1873\u1874\u0007\u01cc\u0002\u0002",
    "\u1874\u1877\u0005\u0370\u01b9\u0002\u1875\u1876\u0007\u025a\u0002\u0002",
    "\u1876\u1878\u0007\u0268\u0002\u0002\u1877\u1875\u0003\u0002\u0002\u0002",
    "\u1877\u1878\u0003\u0002\u0002\u0002\u1878\u0245\u0003\u0002\u0002\u0002",
    "\u1879\u187a\u0007\u02d8\u0002\u0002\u187a\u187b\u0007\u028d\u0002\u0002",
    "\u187b\u187c\u0005\u0370\u01b9\u0002\u187c\u0247\u0003\u0002\u0002\u0002",
    "\u187d\u187e\u0007\u02d8\u0002\u0002\u187e\u1881\u0007\u0278\u0002\u0002",
    "\u187f\u1880\u0007 \u0002\u0002\u1880\u1882\u0005\u0370\u01b9\u0002",
    "\u1881\u187f\u0003\u0002\u0002\u0002\u1881\u1882\u0003\u0002\u0002\u0002",
    "\u1882\u0249\u0003\u0002\u0002\u0002\u1883\u1884\u0007\u026e\u0002\u0002",
    "\u1884\u1885\u0005\u0376\u01bc\u0002\u1885\u1888\u0007>\u0002\u0002",
    "\u1886\u1889\u0007\u0372\u0002\u0002\u1887\u1889\u0007\u037d\u0002\u0002",
    "\u1888\u1886\u0003\u0002\u0002\u0002\u1888\u1887\u0003\u0002\u0002\u0002",
    "\u1889\u024b\u0003\u0002\u0002\u0002\u188a\u188b\u0007\u02e8\u0002\u0002",
    "\u188b\u188e\u0005\u0376\u01bc\u0002\u188c\u188d\u0007\u00a5\u0002\u0002",
    "\u188d\u188f\u0005\u03bc\u01df\u0002\u188e\u188c\u0003\u0002\u0002\u0002",
    "\u188e\u188f\u0003\u0002\u0002\u0002\u188f\u024d\u0003\u0002\u0002\u0002",
    "\u1890\u1891\tJ\u0002\u0002\u1891\u1892\u0007\u026e\u0002\u0002\u1892",
    "\u1893\u0005\u0376\u01bc\u0002\u1893\u024f\u0003\u0002\u0002\u0002\u1894",
    "\u1897\u0005\u0252\u012a\u0002\u1895\u1897\u0005\u0006\u0004\u0002\u1896",
    "\u1894\u0003\u0002\u0002\u0002\u1896\u1895\u0003\u0002\u0002\u0002\u1897",
    "\u0251\u0003\u0002\u0002\u0002\u1898\u1899\u0005\u0376\u01bc\u0002\u1899",
    "\u189a\u0007\u036d\u0002\u0002\u189a\u189c\u0003\u0002\u0002\u0002\u189b",
    "\u1898\u0003\u0002\u0002\u0002\u189b\u189c\u0003\u0002\u0002\u0002\u189c",
    "\u189d\u0003\u0002\u0002\u0002\u189d\u18a3\u0007\u01b6\u0002\u0002\u189e",
    "\u189f\u0005\u0266\u0134\u0002\u189f\u18a0\u0007\u0365\u0002\u0002\u18a0",
    "\u18a2\u0003\u0002\u0002\u0002\u18a1\u189e\u0003\u0002\u0002\u0002\u18a2",
    "\u18a5\u0003\u0002\u0002\u0002\u18a3\u18a1\u0003\u0002\u0002\u0002\u18a3",
    "\u18a4\u0003\u0002\u0002\u0002\u18a4\u18ab\u0003\u0002\u0002\u0002\u18a5",
    "\u18a3\u0003\u0002\u0002\u0002\u18a6\u18a7\u0005\u0268\u0135\u0002\u18a7",
    "\u18a8\u0007\u0365\u0002\u0002\u18a8\u18aa\u0003\u0002\u0002\u0002\u18a9",
    "\u18a6\u0003\u0002\u0002\u0002\u18aa\u18ad\u0003\u0002\u0002\u0002\u18ab",
    "\u18a9\u0003\u0002\u0002\u0002\u18ab\u18ac\u0003\u0002\u0002\u0002\u18ac",
    "\u18b3\u0003\u0002\u0002\u0002\u18ad\u18ab\u0003\u0002\u0002\u0002\u18ae",
    "\u18af\u0005\u026a\u0136\u0002\u18af\u18b0\u0007\u0365\u0002\u0002\u18b0",
    "\u18b2\u0003\u0002\u0002\u0002\u18b1\u18ae\u0003\u0002\u0002\u0002\u18b2",
    "\u18b5\u0003\u0002\u0002\u0002\u18b3\u18b1\u0003\u0002\u0002\u0002\u18b3",
    "\u18b4\u0003\u0002\u0002\u0002\u18b4\u18bb\u0003\u0002\u0002\u0002\u18b5",
    "\u18b3\u0003\u0002\u0002\u0002\u18b6\u18b7\u0005\u026c\u0137\u0002\u18b7",
    "\u18b8\u0007\u0365\u0002\u0002\u18b8\u18ba\u0003\u0002\u0002\u0002\u18b9",
    "\u18b6\u0003\u0002\u0002\u0002\u18ba\u18bd\u0003\u0002\u0002\u0002\u18bb",
    "\u18b9\u0003\u0002\u0002\u0002\u18bb\u18bc\u0003\u0002\u0002\u0002\u18bc",
    "\u18c3\u0003\u0002\u0002\u0002\u18bd\u18bb\u0003\u0002\u0002\u0002\u18be",
    "\u18bf\u0005\u026e\u0138\u0002\u18bf\u18c0\u0007\u0365\u0002\u0002\u18c0",
    "\u18c2\u0003\u0002\u0002\u0002\u18c1\u18be\u0003\u0002\u0002\u0002\u18c2",
    "\u18c5\u0003\u0002\u0002\u0002\u18c3\u18c1\u0003\u0002\u0002\u0002\u18c3",
    "\u18c4\u0003\u0002\u0002\u0002\u18c4\u18c9\u0003\u0002\u0002\u0002\u18c5",
    "\u18c3\u0003\u0002\u0002\u0002\u18c6\u18c8\u0005\u0276\u013c\u0002\u18c7",
    "\u18c6\u0003\u0002\u0002\u0002\u18c8\u18cb\u0003\u0002\u0002\u0002\u18c9",
    "\u18c7\u0003\u0002\u0002\u0002\u18c9\u18ca\u0003\u0002\u0002\u0002\u18ca",
    "\u18cc\u0003\u0002\u0002\u0002\u18cb\u18c9\u0003\u0002\u0002\u0002\u18cc",
    "\u18ce\u0007\u01ea\u0002\u0002\u18cd\u18cf\u0005\u0376\u01bc\u0002\u18ce",
    "\u18cd\u0003\u0002\u0002\u0002\u18ce\u18cf\u0003\u0002\u0002\u0002\u18cf",
    "\u0253\u0003\u0002\u0002\u0002\u18d0\u18d3\u0007\u0016\u0002\u0002\u18d1",
    "\u18d4\u0005\u0376\u01bc\u0002\u18d2\u18d4\u0005\u03f8\u01fd\u0002\u18d3",
    "\u18d1\u0003\u0002\u0002\u0002\u18d3\u18d2\u0003\u0002\u0002\u0002\u18d3",
    "\u18d4\u0003\u0002\u0002\u0002\u18d4\u18d6\u0003\u0002\u0002\u0002\u18d5",
    "\u18d7\u0005\u0278\u013d\u0002\u18d6\u18d5\u0003\u0002\u0002\u0002\u18d7",
    "\u18d8\u0003\u0002\u0002\u0002\u18d8\u18d6\u0003\u0002\u0002\u0002\u18d8",
    "\u18d9\u0003\u0002\u0002\u0002\u18d9\u18e0\u0003\u0002\u0002\u0002\u18da",
    "\u18dc\u00072\u0002\u0002\u18db\u18dd\u0005\u0276\u013c\u0002\u18dc",
    "\u18db\u0003\u0002\u0002\u0002\u18dd\u18de\u0003\u0002\u0002\u0002\u18de",
    "\u18dc\u0003\u0002\u0002\u0002\u18de\u18df\u0003\u0002\u0002\u0002\u18df",
    "\u18e1\u0003\u0002\u0002\u0002\u18e0\u18da\u0003\u0002\u0002\u0002\u18e0",
    "\u18e1\u0003\u0002\u0002\u0002\u18e1\u18e2\u0003\u0002\u0002\u0002\u18e2",
    "\u18e3\u0007\u01ea\u0002\u0002\u18e3\u18e4\u0007\u0016\u0002\u0002\u18e4",
    "\u0255\u0003\u0002\u0002\u0002\u18e5\u18e6\u0007E\u0002\u0002\u18e6",
    "\u18e7\u0005\u03f8\u01fd\u0002\u18e7\u18e9\u0007\u0098\u0002\u0002\u18e8",
    "\u18ea\u0005\u0276\u013c\u0002\u18e9\u18e8\u0003\u0002\u0002\u0002\u18ea",
    "\u18eb\u0003\u0002\u0002\u0002\u18eb\u18e9\u0003\u0002\u0002\u0002\u18eb",
    "\u18ec\u0003\u0002\u0002\u0002\u18ec\u18f0\u0003\u0002\u0002\u0002\u18ed",
    "\u18ef\u0005\u027a\u013e\u0002\u18ee\u18ed\u0003\u0002\u0002\u0002\u18ef",
    "\u18f2\u0003\u0002\u0002\u0002\u18f0\u18ee\u0003\u0002\u0002\u0002\u18f0",
    "\u18f1\u0003\u0002\u0002\u0002\u18f1\u18f9\u0003\u0002\u0002\u0002\u18f2",
    "\u18f0\u0003\u0002\u0002\u0002\u18f3\u18f5\u00072\u0002\u0002\u18f4",
    "\u18f6\u0005\u0276\u013c\u0002\u18f5\u18f4\u0003\u0002\u0002\u0002\u18f6",
    "\u18f7\u0003\u0002\u0002\u0002\u18f7\u18f5\u0003\u0002\u0002\u0002\u18f7",
    "\u18f8\u0003\u0002\u0002\u0002\u18f8\u18fa\u0003\u0002\u0002\u0002\u18f9",
    "\u18f3\u0003\u0002\u0002\u0002\u18f9\u18fa\u0003\u0002\u0002\u0002\u18fa",
    "\u18fb\u0003\u0002\u0002\u0002\u18fb\u18fc\u0007\u01ea\u0002\u0002\u18fc",
    "\u18fd\u0007E\u0002\u0002\u18fd\u0257\u0003\u0002\u0002\u0002\u18fe",
    "\u18ff\u0007P\u0002\u0002\u18ff\u1900\u0005\u0376\u01bc\u0002\u1900",
    "\u0259\u0003\u0002\u0002\u0002\u1901\u1902\u0007V\u0002\u0002\u1902",
    "\u1903\u0005\u0376\u01bc\u0002\u1903\u025b\u0003\u0002\u0002\u0002\u1904",
    "\u1905\u0005\u0376\u01bc\u0002\u1905\u1906\u0007\u036d\u0002\u0002\u1906",
    "\u1908\u0003\u0002\u0002\u0002\u1907\u1904\u0003\u0002\u0002\u0002\u1907",
    "\u1908\u0003\u0002\u0002\u0002\u1908\u1909\u0003\u0002\u0002\u0002\u1909",
    "\u190b\u0007^\u0002\u0002\u190a\u190c\u0005\u0276\u013c\u0002\u190b",
    "\u190a\u0003\u0002\u0002\u0002\u190c\u190d\u0003\u0002\u0002\u0002\u190d",
    "\u190b\u0003\u0002\u0002\u0002\u190d\u190e\u0003\u0002\u0002\u0002\u190e",
    "\u190f\u0003\u0002\u0002\u0002\u190f\u1910\u0007\u01ea\u0002\u0002\u1910",
    "\u1912\u0007^\u0002\u0002\u1911\u1913\u0005\u0376\u01bc\u0002\u1912",
    "\u1911\u0003\u0002\u0002\u0002\u1912\u1913\u0003\u0002\u0002\u0002\u1913",
    "\u025d\u0003\u0002\u0002\u0002\u1914\u1915\u0005\u0376\u01bc\u0002\u1915",
    "\u1916\u0007\u036d\u0002\u0002\u1916\u1918\u0003\u0002\u0002\u0002\u1917",
    "\u1914\u0003\u0002\u0002\u0002\u1917\u1918\u0003\u0002\u0002\u0002\u1918",
    "\u1919\u0003\u0002\u0002\u0002\u1919\u191b\u0007}\u0002\u0002\u191a",
    "\u191c\u0005\u0276\u013c\u0002\u191b\u191a\u0003\u0002\u0002\u0002\u191c",
    "\u191d\u0003\u0002\u0002\u0002\u191d\u191b\u0003\u0002\u0002\u0002\u191d",
    "\u191e\u0003\u0002\u0002\u0002\u191e\u191f\u0003\u0002\u0002\u0002\u191f",
    "\u1920\u0007\u02c8\u0002\u0002\u1920\u1921\u0005\u03f8\u01fd\u0002\u1921",
    "\u1922\u0007\u01ea\u0002\u0002\u1922\u1924\u0007}\u0002\u0002\u1923",
    "\u1925\u0005\u0376\u01bc\u0002\u1924\u1923\u0003\u0002\u0002\u0002\u1924",
    "\u1925\u0003\u0002\u0002\u0002\u1925\u025f\u0003\u0002\u0002\u0002\u1926",
    "\u1927\u0007\u0081\u0002\u0002\u1927\u1928\u0005\u03f8\u01fd\u0002\u1928",
    "\u0261\u0003\u0002\u0002\u0002\u1929\u192a\u0005\u0376\u01bc\u0002\u192a",
    "\u192b\u0007\u036d\u0002\u0002\u192b\u192d\u0003\u0002\u0002\u0002\u192c",
    "\u1929\u0003\u0002\u0002\u0002\u192c\u192d\u0003\u0002\u0002\u0002\u192d",
    "\u192e\u0003\u0002\u0002\u0002\u192e\u192f\u0007\u00a9\u0002\u0002\u192f",
    "\u1930\u0005\u03f8\u01fd\u0002\u1930\u1932\u0007\u01e4\u0002\u0002\u1931",
    "\u1933\u0005\u0276\u013c\u0002\u1932\u1931\u0003\u0002\u0002\u0002\u1933",
    "\u1934\u0003\u0002\u0002\u0002\u1934\u1932\u0003\u0002\u0002\u0002\u1934",
    "\u1935\u0003\u0002\u0002\u0002\u1935\u1936\u0003\u0002\u0002\u0002\u1936",
    "\u1937\u0007\u01ea\u0002\u0002\u1937\u1939\u0007\u00a9\u0002\u0002\u1938",
    "\u193a\u0005\u0376\u01bc\u0002\u1939\u1938\u0003\u0002\u0002\u0002\u1939",
    "\u193a\u0003\u0002\u0002\u0002\u193a\u0263\u0003\u0002\u0002\u0002\u193b",
    "\u193c\u0007\u01c6\u0002\u0002\u193c\u194b\u0005\u0376\u01bc\u0002\u193d",
    "\u1942\u0007:\u0002\u0002\u193e\u1940\u0007\u0252\u0002\u0002\u193f",
    "\u193e\u0003\u0002\u0002\u0002\u193f\u1940\u0003\u0002\u0002\u0002\u1940",
    "\u1941\u0003\u0002\u0002\u0002\u1941\u1943\u0007>\u0002\u0002\u1942",
    "\u193f\u0003\u0002\u0002\u0002\u1942\u1943\u0003\u0002\u0002\u0002\u1943",
    "\u1944\u0003\u0002\u0002\u0002\u1944\u1945\u0005\u0376\u01bc\u0002\u1945",
    "\u1946\u0007N\u0002\u0002\u1946\u1947\u0005\u03a4\u01d3\u0002\u1947",
    "\u194b\u0003\u0002\u0002\u0002\u1948\u1949\u0007\u025d\u0002\u0002\u1949",
    "\u194b\u0005\u0376\u01bc\u0002\u194a\u193b\u0003\u0002\u0002\u0002\u194a",
    "\u193d\u0003\u0002\u0002\u0002\u194a\u1948\u0003\u0002\u0002\u0002\u194b",
    "\u0265\u0003\u0002\u0002\u0002\u194c\u194d\u0007\'\u0002\u0002\u194d",
    "\u194e\u0005\u03a4\u01d3\u0002\u194e\u1951\u0005\u0392\u01ca\u0002\u194f",
    "\u1950\u0007(\u0002\u0002\u1950\u1952\u0005\u03be\u01e0\u0002\u1951",
    "\u194f\u0003\u0002\u0002\u0002\u1951\u1952\u0003\u0002\u0002\u0002\u1952",
    "\u0267\u0003\u0002\u0002\u0002\u1953\u1954\u0007\'\u0002\u0002\u1954",
    "\u1955\u0005\u0376\u01bc\u0002\u1955\u1956\u0007\u001d\u0002\u0002\u1956",
    "\u1957\u0007;\u0002\u0002\u1957\u1958\u0005\u0272\u013a\u0002\u1958",
    "\u0269\u0003\u0002\u0002\u0002\u1959\u195a\u0007\'\u0002\u0002\u195a",
    "\u195b\u0005\u0376\u01bc\u0002\u195b\u195c\u0007$\u0002\u0002\u195c",
    "\u195d\u0005\u0270\u0139\u0002\u195d\u026b\u0003\u0002\u0002\u0002\u195e",
    "\u195f\u0007\'\u0002\u0002\u195f\u1960\tK\u0002\u0002\u1960\u1961\u0007",
    "\u020b\u0002\u0002\u1961\u1962\u0007;\u0002\u0002\u1962\u1967\u0005",
    "\u0274\u013b\u0002\u1963\u1964\u0007\u0364\u0002\u0002\u1964\u1966\u0005",
    "\u0274\u013b\u0002\u1965\u1963\u0003\u0002\u0002\u0002\u1966\u1969\u0003",
    "\u0002\u0002\u0002\u1967\u1965\u0003\u0002\u0002\u0002\u1967\u1968\u0003",
    "\u0002\u0002\u0002\u1968\u196b\u0003\u0002\u0002\u0002\u1969\u1967\u0003",
    "\u0002\u0002\u0002\u196a\u196c\u0005\u0250\u0129\u0002\u196b\u196a\u0003",
    "\u0002\u0002\u0002\u196b\u196c\u0003\u0002\u0002\u0002\u196c\u196d\u0003",
    "\u0002\u0002\u0002\u196d\u196e\b\u0137\u0001\u0002\u196e\u026d\u0003",
    "\u0002\u0002\u0002\u196f\u1970\u0006\u0138\\\u0002\u1970\u1971\u0007",
    "\'\u0002\u0002\u1971\u1972\u0007\u0126\u0002\u0002\u1972\u1973\u0005",
    "\u0376\u01bc\u0002\u1973\u1974\u0007\u000e\u0002\u0002\u1974\u1975\u0007",
    "\u0290\u0002\u0002\u1975\u1976\u0007\u0360\u0002\u0002\u1976\u197b\u0005",
    "h5\u0002\u1977\u1978\u0007\u0364\u0002\u0002\u1978\u197a\u0005h5\u0002",
    "\u1979\u1977\u0003\u0002\u0002\u0002\u197a\u197d\u0003\u0002\u0002\u0002",
    "\u197b\u1979\u0003\u0002\u0002\u0002\u197b\u197c\u0003\u0002\u0002\u0002",
    "\u197c\u197e\u0003\u0002\u0002\u0002\u197d\u197b\u0003\u0002\u0002\u0002",
    "\u197e\u197f\u0007\u0361\u0002\u0002\u197f\u026f\u0003\u0002\u0002\u0002",
    "\u1980\u1981\u0006\u0139]\u0002\u1981\u1982\u0007;\u0002\u0002\u1982",
    "\u1990\u0005\u0148\u00a5\u0002\u1983\u1986\u0006\u0139^\u0002\u1984",
    "\u1985\u0007\u00aa\u0002\u0002\u1985\u1987\u0007\u00d5\u0002\u0002\u1986",
    "\u1984\u0003\u0002\u0002\u0002\u1986\u1987\u0003\u0002\u0002\u0002\u1987",
    "\u1988\u0003\u0002\u0002\u0002\u1988\u1989\u0007\u00aa\u0002\u0002\u1989",
    "\u198a\u0007\u0081\u0002\u0002\u198a\u198b\u0007\u0099\u0002\u0002\u198b",
    "\u198c\tL\u0002\u0002\u198c\u198d\u0003\u0002\u0002\u0002\u198d\u198e",
    "\u0007;\u0002\u0002\u198e\u1990\u0005\u0148\u00a5\u0002\u198f\u1980",
    "\u0003\u0002\u0002\u0002\u198f\u1983\u0003\u0002\u0002\u0002\u1990\u0271",
    "\u0003\u0002\u0002\u0002\u1991\u1998\u0006\u013a_\u0002\u1992\u1999",
    "\u0005\u0382\u01c2\u0002\u1993\u1995\u0007\u008e\u0002\u0002\u1994\u1996",
    "\u0007\u02ce\u0002\u0002\u1995\u1994\u0003\u0002\u0002\u0002\u1995\u1996",
    "\u0003\u0002\u0002\u0002\u1996\u1997\u0003\u0002\u0002\u0002\u1997\u1999",
    "\u0007\u0372\u0002\u0002\u1998\u1992\u0003\u0002\u0002\u0002\u1998\u1993",
    "\u0003\u0002\u0002\u0002\u1999\u199e\u0003\u0002\u0002\u0002\u199a\u199b",
    "\u0006\u013a`\u0002\u199b\u199c\u0007\u008e\u0002\u0002\u199c\u199e",
    "\u0007\u0372\u0002\u0002\u199d\u1991\u0003\u0002\u0002\u0002\u199d\u199a",
    "\u0003\u0002\u0002\u0002\u199e\u0273\u0003\u0002\u0002\u0002\u199f\u19ab",
    "\u0005\u0382\u01c2\u0002\u19a0\u19a2\u0007\u008e\u0002\u0002\u19a1\u19a3",
    "\u0007\u02ce\u0002\u0002\u19a2\u19a1\u0003\u0002\u0002\u0002\u19a2\u19a3",
    "\u0003\u0002\u0002\u0002\u19a3\u19a4\u0003\u0002\u0002\u0002\u19a4\u19ab",
    "\u0007\u0372\u0002\u0002\u19a5\u19ab\u0005\u0376\u01bc\u0002\u19a6\u19ab",
    "\u0007\u008f\u0002\u0002\u19a7\u19a8\u0007f\u0002\u0002\u19a8\u19ab",
    "\u0007\u0204\u0002\u0002\u19a9\u19ab\u0007\u008d\u0002\u0002\u19aa\u199f",
    "\u0003\u0002\u0002\u0002\u19aa\u19a0\u0003\u0002\u0002\u0002\u19aa\u19a5",
    "\u0003\u0002\u0002\u0002\u19aa\u19a6\u0003\u0002\u0002\u0002\u19aa\u19a7",
    "\u0003\u0002\u0002\u0002\u19aa\u19a9\u0003\u0002\u0002\u0002\u19ab\u0275",
    "\u0003\u0002\u0002\u0002\u19ac\u19af\u0005\u0014\u000b\u0002\u19ad\u19af",
    "\u0005\u0006\u0004\u0002\u19ae\u19ac\u0003\u0002\u0002\u0002\u19ae\u19ad",
    "\u0003\u0002\u0002\u0002\u19af\u19b0\u0003\u0002\u0002\u0002\u19b0\u19b1",
    "\u0007\u0365\u0002\u0002\u19b1\u0277\u0003\u0002\u0002\u0002\u19b2\u19b5",
    "\u0007\u00a7\u0002\u0002\u19b3\u19b6\u0005\u0390\u01c9\u0002\u19b4\u19b6",
    "\u0005\u03f8\u01fd\u0002\u19b5\u19b3\u0003\u0002\u0002\u0002\u19b5\u19b4",
    "\u0003\u0002\u0002\u0002\u19b6\u19b7\u0003\u0002\u0002\u0002\u19b7\u19b9",
    "\u0007\u0098\u0002\u0002\u19b8\u19ba\u0005\u0276\u013c\u0002\u19b9\u19b8",
    "\u0003\u0002\u0002\u0002\u19ba\u19bb\u0003\u0002\u0002\u0002\u19bb\u19b9",
    "\u0003\u0002\u0002\u0002\u19bb\u19bc\u0003\u0002\u0002\u0002\u19bc\u0279",
    "\u0003\u0002\u0002\u0002\u19bd\u19be\u00073\u0002\u0002\u19be\u19bf",
    "\u0005\u03f8\u01fd\u0002\u19bf\u19c1\u0007\u0098\u0002\u0002\u19c0\u19c2",
    "\u0005\u0276\u013c\u0002\u19c1\u19c0\u0003\u0002\u0002\u0002\u19c2\u19c3",
    "\u0003\u0002\u0002\u0002\u19c3\u19c1\u0003\u0002\u0002\u0002\u19c3\u19c4",
    "\u0003\u0002\u0002\u0002\u19c4\u027b\u0003\u0002\u0002\u0002\u19c5\u19c6",
    "\u0007\n\u0002\u0002\u19c6\u19c7\u0007\u02ca\u0002\u0002\u19c7\u19cc",
    "\u0005\u02be\u0160\u0002\u19c8\u19c9\u0007\u0364\u0002\u0002\u19c9\u19cb",
    "\u0005\u02be\u0160\u0002\u19ca\u19c8\u0003\u0002\u0002\u0002\u19cb\u19ce",
    "\u0003\u0002\u0002\u0002\u19cc\u19ca\u0003\u0002\u0002\u0002\u19cc\u19cd",
    "\u0003\u0002\u0002\u0002\u19cd\u19fc\u0003\u0002\u0002\u0002\u19ce\u19cc",
    "\u0003\u0002\u0002\u0002\u19cf\u19d0\u0007\n\u0002\u0002\u19d0\u19d2",
    "\u0007\u02ca\u0002\u0002\u19d1\u19d3\u0005\u03c4\u01e3\u0002\u19d2\u19d1",
    "\u0003\u0002\u0002\u0002\u19d2\u19d3\u0003\u0002\u0002\u0002\u19d3\u19d4",
    "\u0003\u0002\u0002\u0002\u19d4\u19d9\u0005\u02c0\u0161\u0002\u19d5\u19d6",
    "\u0007\u0364\u0002\u0002\u19d6\u19d8\u0005\u02c0\u0161\u0002\u19d7\u19d5",
    "\u0003\u0002\u0002\u0002\u19d8\u19db\u0003\u0002\u0002\u0002\u19d9\u19d7",
    "\u0003\u0002\u0002\u0002\u19d9\u19da\u0003\u0002\u0002\u0002\u19da\u19ea",
    "\u0003\u0002\u0002\u0002\u19db\u19d9\u0003\u0002\u0002\u0002\u19dc\u19e8",
    "\u0007\u007f\u0002\u0002\u19dd\u19e9\u0007\u0255\u0002\u0002\u19de\u19e5",
    "\u0005\u02c2\u0162\u0002\u19df\u19e1\u0007\r\u0002\u0002\u19e0\u19df",
    "\u0003\u0002\u0002\u0002\u19e0\u19e1\u0003\u0002\u0002\u0002\u19e1\u19e2",
    "\u0003\u0002\u0002\u0002\u19e2\u19e4\u0005\u02c2\u0162\u0002\u19e3\u19e0",
    "\u0003\u0002\u0002\u0002\u19e4\u19e7\u0003\u0002\u0002\u0002\u19e5\u19e3",
    "\u0003\u0002\u0002\u0002\u19e5\u19e6\u0003\u0002\u0002\u0002\u19e6\u19e9",
    "\u0003\u0002\u0002\u0002\u19e7\u19e5\u0003\u0002\u0002\u0002\u19e8\u19dd",
    "\u0003\u0002\u0002\u0002\u19e8\u19de\u0003\u0002\u0002\u0002\u19e9\u19eb",
    "\u0003\u0002\u0002\u0002\u19ea\u19dc\u0003\u0002\u0002\u0002\u19ea\u19eb",
    "\u0003\u0002\u0002\u0002\u19eb\u19f2\u0003\u0002\u0002\u0002\u19ec\u19ee",
    "\u0007\u00aa\u0002\u0002\u19ed\u19ef\u0005\u02c4\u0163\u0002\u19ee\u19ed",
    "\u0003\u0002\u0002\u0002\u19ef\u19f0\u0003\u0002\u0002\u0002\u19f0\u19ee",
    "\u0003\u0002\u0002\u0002\u19f0\u19f1\u0003\u0002\u0002\u0002\u19f1\u19f3",
    "\u0003\u0002\u0002\u0002\u19f2\u19ec\u0003\u0002\u0002\u0002\u19f2\u19f3",
    "\u0003\u0002\u0002\u0002\u19f3\u19f8\u0003\u0002\u0002\u0002\u19f4\u19f7",
    "\u0005\u02c6\u0164\u0002\u19f5\u19f7\u0005\u02c8\u0165\u0002\u19f6\u19f4",
    "\u0003\u0002\u0002\u0002\u19f6\u19f5\u0003\u0002\u0002\u0002\u19f7\u19fa",
    "\u0003\u0002\u0002\u0002\u19f8\u19f6\u0003\u0002\u0002\u0002\u19f8\u19f9",
    "\u0003\u0002\u0002\u0002\u19f9\u19fc\u0003\u0002\u0002\u0002\u19fa\u19f8",
    "\u0003\u0002\u0002\u0002\u19fb\u19c5\u0003\u0002\u0002\u0002\u19fb\u19cf",
    "\u0003\u0002\u0002\u0002\u19fc\u027d\u0003\u0002\u0002\u0002\u19fd\u19fe",
    "\u0007!\u0002\u0002\u19fe\u19ff\u0007\u02ca\u0002\u0002\u19ff\u1a04",
    "\u0005\u02c0\u0161\u0002\u1a00\u1a01\u0007\u0364\u0002\u0002\u1a01\u1a03",
    "\u0005\u02c0\u0161\u0002\u1a02\u1a00\u0003\u0002\u0002\u0002\u1a03\u1a06",
    "\u0003\u0002\u0002\u0002\u1a04\u1a02\u0003\u0002\u0002\u0002\u1a04\u1a05",
    "\u0003\u0002\u0002\u0002\u1a05\u1a34\u0003\u0002\u0002\u0002\u1a06\u1a04",
    "\u0003\u0002\u0002\u0002\u1a07\u1a08\u0007!\u0002\u0002\u1a08\u1a0a",
    "\u0007\u02ca\u0002\u0002\u1a09\u1a0b\u0005\u03c6\u01e4\u0002\u1a0a\u1a09",
    "\u0003\u0002\u0002\u0002\u1a0a\u1a0b\u0003\u0002\u0002\u0002\u1a0b\u1a0c",
    "\u0003\u0002\u0002\u0002\u1a0c\u1a11\u0005\u02c0\u0161\u0002\u1a0d\u1a0e",
    "\u0007\u0364\u0002\u0002\u1a0e\u1a10\u0005\u02c0\u0161\u0002\u1a0f\u1a0d",
    "\u0003\u0002\u0002\u0002\u1a10\u1a13\u0003\u0002\u0002\u0002\u1a11\u1a0f",
    "\u0003\u0002\u0002\u0002\u1a11\u1a12\u0003\u0002\u0002\u0002\u1a12\u1a22",
    "\u0003\u0002\u0002\u0002\u1a13\u1a11\u0003\u0002\u0002\u0002\u1a14\u1a20",
    "\u0007\u007f\u0002\u0002\u1a15\u1a21\u0007\u0255\u0002\u0002\u1a16\u1a1d",
    "\u0005\u02c2\u0162\u0002\u1a17\u1a19\u0007\r\u0002\u0002\u1a18\u1a17",
    "\u0003\u0002\u0002\u0002\u1a18\u1a19\u0003\u0002\u0002\u0002\u1a19\u1a1a",
    "\u0003\u0002\u0002\u0002\u1a1a\u1a1c\u0005\u02c2\u0162\u0002\u1a1b\u1a18",
    "\u0003\u0002\u0002\u0002\u1a1c\u1a1f\u0003\u0002\u0002\u0002\u1a1d\u1a1b",
    "\u0003\u0002\u0002\u0002\u1a1d\u1a1e\u0003\u0002\u0002\u0002\u1a1e\u1a21",
    "\u0003\u0002\u0002\u0002\u1a1f\u1a1d\u0003\u0002\u0002\u0002\u1a20\u1a15",
    "\u0003\u0002\u0002\u0002\u1a20\u1a16\u0003\u0002\u0002\u0002\u1a21\u1a23",
    "\u0003\u0002\u0002\u0002\u1a22\u1a14\u0003\u0002\u0002\u0002\u1a22\u1a23",
    "\u0003\u0002\u0002\u0002\u1a23\u1a2a\u0003\u0002\u0002\u0002\u1a24\u1a26",
    "\u0007\u00aa\u0002\u0002\u1a25\u1a27\u0005\u02c4\u0163\u0002\u1a26\u1a25",
    "\u0003\u0002\u0002\u0002\u1a27\u1a28\u0003\u0002\u0002\u0002\u1a28\u1a26",
    "\u0003\u0002\u0002\u0002\u1a28\u1a29\u0003\u0002\u0002\u0002\u1a29\u1a2b",
    "\u0003\u0002\u0002\u0002\u1a2a\u1a24\u0003\u0002\u0002\u0002\u1a2a\u1a2b",
    "\u0003\u0002\u0002\u0002\u1a2b\u1a30\u0003\u0002\u0002\u0002\u1a2c\u1a2f",
    "\u0005\u02c6\u0164\u0002\u1a2d\u1a2f\u0005\u02c8\u0165\u0002\u1a2e\u1a2c",
    "\u0003\u0002\u0002\u0002\u1a2e\u1a2d\u0003\u0002\u0002\u0002\u1a2f\u1a32",
    "\u0003\u0002\u0002\u0002\u1a30\u1a2e\u0003\u0002\u0002\u0002\u1a30\u1a31",
    "\u0003\u0002\u0002\u0002\u1a31\u1a34\u0003\u0002\u0002\u0002\u1a32\u1a30",
    "\u0003\u0002\u0002\u0002\u1a33\u19fd\u0003\u0002\u0002\u0002\u1a33\u1a07",
    "\u0003\u0002\u0002\u0002\u1a34\u027f\u0003\u0002\u0002\u0002\u1a35\u1a36",
    "\u00070\u0002\u0002\u1a36\u1a38\u0007\u02ca\u0002\u0002\u1a37\u1a39",
    "\u0005\u03c4\u01e3\u0002\u1a38\u1a37\u0003\u0002\u0002\u0002\u1a38\u1a39",
    "\u0003\u0002\u0002\u0002\u1a39\u1a3a\u0003\u0002\u0002\u0002\u1a3a\u1a3f",
    "\u0005\u0364\u01b3\u0002\u1a3b\u1a3c\u0007\u0364\u0002\u0002\u1a3c\u1a3e",
    "\u0005\u0364\u01b3\u0002\u1a3d\u1a3b\u0003\u0002\u0002\u0002\u1a3e\u1a41",
    "\u0003\u0002\u0002\u0002\u1a3f\u1a3d\u0003\u0002\u0002\u0002\u1a3f\u1a40",
    "\u0003\u0002\u0002\u0002\u1a40\u0281\u0003\u0002\u0002\u0002\u1a41\u1a3f",
    "\u0003\u0002\u0002\u0002\u1a42\u1a43\u0007A\u0002\u0002\u1a43\u1a48",
    "\u0005\u02ca\u0166\u0002\u1a44\u1a45\u0007\u0364\u0002\u0002\u1a45\u1a47",
    "\u0005\u02ca\u0166\u0002\u1a46\u1a44\u0003\u0002\u0002\u0002\u1a47\u1a4a",
    "\u0003\u0002\u0002\u0002\u1a48\u1a46\u0003\u0002\u0002\u0002\u1a48\u1a49",
    "\u0003\u0002\u0002\u0002\u1a49\u1a4b\u0003\u0002\u0002\u0002\u1a4a\u1a48",
    "\u0003\u0002\u0002\u0002\u1a4b\u1a4d\u0007i\u0002\u0002\u1a4c\u1a4e",
    "\tM\u0002\u0002\u1a4d\u1a4c\u0003\u0002\u0002\u0002\u1a4d\u1a4e\u0003",
    "\u0002\u0002\u0002\u1a4e\u1a4f\u0003\u0002\u0002\u0002\u1a4f\u1a50\u0005",
    "\u02ce\u0168\u0002\u1a50\u1a51\u0007\u0099\u0002\u0002\u1a51\u1a56\u0005",
    "\u02c0\u0161\u0002\u1a52\u1a53\u0007\u0364\u0002\u0002\u1a53\u1a55\u0005",
    "\u02c0\u0161\u0002\u1a54\u1a52\u0003\u0002\u0002\u0002\u1a55\u1a58\u0003",
    "\u0002\u0002\u0002\u1a56\u1a54\u0003\u0002\u0002\u0002\u1a56\u1a57\u0003",
    "\u0002\u0002\u0002\u1a57\u1a67\u0003\u0002\u0002\u0002\u1a58\u1a56\u0003",
    "\u0002\u0002\u0002\u1a59\u1a65\u0007\u007f\u0002\u0002\u1a5a\u1a66\u0007",
    "\u0255\u0002\u0002\u1a5b\u1a62\u0005\u02c2\u0162\u0002\u1a5c\u1a5e\u0007",
    "\r\u0002\u0002\u1a5d\u1a5c\u0003\u0002\u0002\u0002\u1a5d\u1a5e\u0003",
    "\u0002\u0002\u0002\u1a5e\u1a5f\u0003\u0002\u0002\u0002\u1a5f\u1a61\u0005",
    "\u02c2\u0162\u0002\u1a60\u1a5d\u0003\u0002\u0002\u0002\u1a61\u1a64\u0003",
    "\u0002\u0002\u0002\u1a62\u1a60\u0003\u0002\u0002\u0002\u1a62\u1a63\u0003",
    "\u0002\u0002\u0002\u1a63\u1a66\u0003\u0002\u0002\u0002\u1a64\u1a62\u0003",
    "\u0002\u0002\u0002\u1a65\u1a5a\u0003\u0002\u0002\u0002\u1a65\u1a5b\u0003",
    "\u0002\u0002\u0002\u1a66\u1a68\u0003\u0002\u0002\u0002\u1a67\u1a59\u0003",
    "\u0002\u0002\u0002\u1a67\u1a68\u0003\u0002\u0002\u0002\u1a68\u1a72\u0003",
    "\u0002\u0002\u0002\u1a69\u1a6f\u0007\u00aa\u0002\u0002\u1a6a\u1a6b\u0007",
    "A\u0002\u0002\u1a6b\u1a6e\u0007k\u0002\u0002\u1a6c\u1a6e\u0005\u02c4",
    "\u0163\u0002\u1a6d\u1a6a\u0003\u0002\u0002\u0002\u1a6d\u1a6c\u0003\u0002",
    "\u0002\u0002\u1a6e\u1a71\u0003\u0002\u0002\u0002\u1a6f\u1a6d\u0003\u0002",
    "\u0002\u0002\u1a6f\u1a70\u0003\u0002\u0002\u0002\u1a70\u1a73\u0003\u0002",
    "\u0002\u0002\u1a71\u1a6f\u0003\u0002\u0002\u0002\u1a72\u1a69\u0003\u0002",
    "\u0002\u0002\u1a72\u1a73\u0003\u0002\u0002\u0002\u1a73\u0283\u0003\u0002",
    "\u0002\u0002\u1a74\u1a75\u0007A\u0002\u0002\u1a75\u1a76\u0007\u0274",
    "\u0002\u0002\u1a76\u1a77\u0007i\u0002\u0002\u1a77\u1a78\u0005\u0364",
    "\u01b3\u0002\u1a78\u1a79\u0007\u0099\u0002\u0002\u1a79\u1a7e\u0005\u0364",
    "\u01b3\u0002\u1a7a\u1a7b\u0007\u0364\u0002\u0002\u1a7b\u1a7d\u0005\u0364",
    "\u01b3\u0002\u1a7c\u1a7a\u0003\u0002\u0002\u0002\u1a7d\u1a80\u0003\u0002",
    "\u0002\u0002\u1a7e\u1a7c\u0003\u0002\u0002\u0002\u1a7e\u1a7f\u0003\u0002",
    "\u0002\u0002\u1a7f\u1a84\u0003\u0002\u0002\u0002\u1a80\u1a7e\u0003\u0002",
    "\u0002\u0002\u1a81\u1a82\u0007\u00aa\u0002\u0002\u1a82\u1a83\u0007A",
    "\u0002\u0002\u1a83\u1a85\u0007k\u0002\u0002\u1a84\u1a81\u0003\u0002",
    "\u0002\u0002\u1a84\u1a85\u0003\u0002\u0002\u0002\u1a85\u0285\u0003\u0002",
    "\u0002\u0002\u1a86\u1a87\u0007|\u0002\u0002\u1a87\u1a88\u0007\u02ca",
    "\u0002\u0002\u1a88\u1a8d\u0005\u02d0\u0169\u0002\u1a89\u1a8a\u0007\u0364",
    "\u0002\u0002\u1a8a\u1a8c\u0005\u02d0\u0169\u0002\u1a8b\u1a89\u0003\u0002",
    "\u0002\u0002\u1a8c\u1a8f\u0003\u0002\u0002\u0002\u1a8d\u1a8b\u0003\u0002",
    "\u0002\u0002\u1a8d\u1a8e\u0003\u0002\u0002\u0002\u1a8e\u0287\u0003\u0002",
    "\u0002\u0002\u1a8f\u1a8d\u0003\u0002\u0002\u0002\u1a90\u1a91\u0007\u0082",
    "\u0002\u0002\u1a91\u1a96\u0005\u02ca\u0166\u0002\u1a92\u1a93\u0007\u0364",
    "\u0002\u0002\u1a93\u1a95\u0005\u02ca\u0166\u0002\u1a94\u1a92\u0003\u0002",
    "\u0002\u0002\u1a95\u1a98\u0003\u0002\u0002\u0002\u1a96\u1a94\u0003\u0002",
    "\u0002\u0002\u1a96\u1a97\u0003\u0002\u0002\u0002\u1a97\u1a99\u0003\u0002",
    "\u0002\u0002\u1a98\u1a96\u0003\u0002\u0002\u0002\u1a99\u1a9b\u0007i",
    "\u0002\u0002\u1a9a\u1a9c\tM\u0002\u0002\u1a9b\u1a9a\u0003\u0002\u0002",
    "\u0002\u1a9b\u1a9c\u0003\u0002\u0002\u0002\u1a9c\u1a9d\u0003\u0002\u0002",
    "\u0002\u1a9d\u1a9e\u0005\u02ce\u0168\u0002\u1a9e\u1a9f\u0007>\u0002",
    "\u0002\u1a9f\u1aa4\u0005\u0364\u01b3\u0002\u1aa0\u1aa1\u0007\u0364\u0002",
    "\u0002\u1aa1\u1aa3\u0005\u0364\u01b3\u0002\u1aa2\u1aa0\u0003\u0002\u0002",
    "\u0002\u1aa3\u1aa6\u0003\u0002\u0002\u0002\u1aa4\u1aa2\u0003\u0002\u0002",
    "\u0002\u1aa4\u1aa5\u0003\u0002\u0002\u0002\u1aa5\u1ab9\u0003\u0002\u0002",
    "\u0002\u1aa6\u1aa4\u0003\u0002\u0002\u0002\u1aa7\u1aa8\u0007\u0082\u0002",
    "\u0002\u1aa8\u1aaa\u0007\t\u0002\u0002\u1aa9\u1aab\u0007\u02ee\u0002",
    "\u0002\u1aaa\u1aa9\u0003\u0002\u0002\u0002\u1aaa\u1aab\u0003\u0002\u0002",
    "\u0002\u1aab\u1aac\u0003\u0002\u0002\u0002\u1aac\u1aad\u0007\u0364\u0002",
    "\u0002\u1aad\u1aae\u0007A\u0002\u0002\u1aae\u1aaf\u0007k\u0002\u0002",
    "\u1aaf\u1ab0\u0007>\u0002\u0002\u1ab0\u1ab5\u0005\u0364\u01b3\u0002",
    "\u1ab1\u1ab2\u0007\u0364\u0002\u0002\u1ab2\u1ab4\u0005\u0364\u01b3\u0002",
    "\u1ab3\u1ab1\u0003\u0002\u0002\u0002\u1ab4\u1ab7\u0003\u0002\u0002\u0002",
    "\u1ab5\u1ab3\u0003\u0002\u0002\u0002\u1ab5\u1ab6\u0003\u0002\u0002\u0002",
    "\u1ab6\u1ab9\u0003\u0002\u0002\u0002\u1ab7\u1ab5\u0003\u0002\u0002\u0002",
    "\u1ab8\u1a90\u0003\u0002\u0002\u0002\u1ab8\u1aa7\u0003\u0002\u0002\u0002",
    "\u1ab9\u0289\u0003\u0002\u0002\u0002\u1aba\u1abb\u0007\u0082\u0002\u0002",
    "\u1abb\u1abc\u0007\u0274\u0002\u0002\u1abc\u1abd\u0007i\u0002\u0002",
    "\u1abd\u1abe\u0005\u0364\u01b3\u0002\u1abe\u1abf\u0007>\u0002\u0002",
    "\u1abf\u1ac4\u0005\u0364\u01b3\u0002\u1ac0\u1ac1\u0007\u0364\u0002\u0002",
    "\u1ac1\u1ac3\u0005\u0364\u01b3\u0002\u1ac2\u1ac0\u0003\u0002\u0002\u0002",
    "\u1ac3\u1ac6\u0003\u0002\u0002\u0002\u1ac4\u1ac2\u0003\u0002\u0002\u0002",
    "\u1ac4\u1ac5\u0003\u0002\u0002\u0002\u1ac5\u028b\u0003\u0002\u0002\u0002",
    "\u1ac6\u1ac4\u0003\u0002\u0002\u0002\u1ac7\u1ac8\u0007\u0088\u0002\u0002",
    "\u1ac8\u1acb\u0007\u0267\u0002\u0002\u1ac9\u1aca\u0007;\u0002\u0002",
    "\u1aca\u1acc\u0005\u0364\u01b3\u0002\u1acb\u1ac9\u0003\u0002\u0002\u0002",
    "\u1acb\u1acc\u0003\u0002\u0002\u0002\u1acc\u1acd\u0003\u0002\u0002\u0002",
    "\u1acd\u1ad0\u0007\u0355\u0002\u0002\u1ace\u1ad1\u0005\u03ee\u01f8\u0002",
    "\u1acf\u1ad1\u0007\u0372\u0002\u0002\u1ad0\u1ace\u0003\u0002\u0002\u0002",
    "\u1ad0\u1acf\u0003\u0002\u0002\u0002\u1ad1\u028d\u0003\u0002\u0002\u0002",
    "\u1ad2\u1ad3\u0007A\u0002\u0002\u1ad3\u1ad6\u0005\u02aa\u0156\u0002",
    "\u1ad4\u1ad5\u0007i\u0002\u0002\u1ad5\u1ad7\u0005\u02b0\u0159\u0002",
    "\u1ad6\u1ad4\u0003\u0002\u0002\u0002\u1ad6\u1ad7\u0003\u0002\u0002\u0002",
    "\u1ad7\u1ad8\u0003\u0002\u0002\u0002\u1ad8\u1ad9\u0007\u0099\u0002\u0002",
    "\u1ad9\u1add\u0005\u02b2\u015a\u0002\u1ada\u1adb\u0007\u00aa\u0002\u0002",
    "\u1adb\u1adc\u0007A\u0002\u0002\u1adc\u1ade\u0007k\u0002\u0002\u1add",
    "\u1ada\u0003\u0002\u0002\u0002\u1add\u1ade\u0003\u0002\u0002\u0002\u1ade",
    "\u028f\u0003\u0002\u0002\u0002\u1adf\u1ae3\u0007\u0082\u0002\u0002\u1ae0",
    "\u1ae1\u0007A\u0002\u0002\u1ae1\u1ae2\u0007k\u0002\u0002\u1ae2\u1ae4",
    "\u0007;\u0002\u0002\u1ae3\u1ae0\u0003\u0002\u0002\u0002\u1ae3\u1ae4",
    "\u0003\u0002\u0002\u0002\u1ae4\u1ae5\u0003\u0002\u0002\u0002\u1ae5\u1ae8",
    "\u0005\u02aa\u0156\u0002\u1ae6\u1ae7\u0007i\u0002\u0002\u1ae7\u1ae9",
    "\u0005\u02b0\u0159\u0002\u1ae8\u1ae6\u0003\u0002\u0002\u0002\u1ae8\u1ae9",
    "\u0003\u0002\u0002\u0002\u1ae9\u1aea\u0003\u0002\u0002\u0002\u1aea\u1aeb",
    "\u0007>\u0002\u0002\u1aeb\u1aec\u0005\u02b2\u015a\u0002\u1aec\u0291",
    "\u0003\u0002\u0002\u0002\u1aed\u1aee\u0007\u008a\u0002\u0002\u1aee\u1af0",
    "\u0007A\u0002\u0002\u1aef\u1af1\u0005\u02bc\u015f\u0002\u1af0\u1aef",
    "\u0003\u0002\u0002\u0002\u1af0\u1af1\u0003\u0002\u0002\u0002\u1af1\u1afa",
    "\u0003\u0002\u0002\u0002\u1af2\u1af8\u0007i\u0002\u0002\u1af3\u1af5",
    "\u0007\t\u0002\u0002\u1af4\u1af6\u0007\u00b0\u0002\u0002\u1af5\u1af4",
    "\u0003\u0002\u0002\u0002\u1af5\u1af6\u0003\u0002\u0002\u0002\u1af6\u1af9",
    "\u0003\u0002\u0002\u0002\u1af7\u1af9\u0005\u02b0\u0159\u0002\u1af8\u1af3",
    "\u0003\u0002\u0002\u0002\u1af8\u1af7\u0003\u0002\u0002\u0002\u1af9\u1afb",
    "\u0003\u0002\u0002\u0002\u1afa\u1af2\u0003\u0002\u0002\u0002\u1afa\u1afb",
    "\u0003\u0002\u0002\u0002\u1afb\u0293\u0003\u0002\u0002\u0002\u1afc\u1afd",
    "\u0007A\u0002\u0002\u1afd\u1afe\u0007\u00f7\u0002\u0002\u1afe\u1b07",
    "\u0005\u02b6\u015c\u0002\u1aff\u1b00\u0007;\u0002\u0002\u1b00\u1b01",
    "\u0007\u0291\u0002\u0002\u1b01\u1b08\u0005\u01e0\u00f1\u0002\u1b02\u1b03",
    "\u0007;\u0002\u0002\u1b03\u1b04\u0007\u001c\u0002\u0002\u1b04\u1b05",
    "\u0005\u0376\u01bc\u0002\u1b05\u1b06\u0005\u03d6\u01ec\u0002\u1b06\u1b08",
    "\u0003\u0002\u0002\u0002\u1b07\u1aff\u0003\u0002\u0002\u0002\u1b07\u1b02",
    "\u0003\u0002\u0002\u0002\u1b08\u0295\u0003\u0002\u0002\u0002\u1b09\u1b0a",
    "\u0007\u0082\u0002\u0002\u1b0a\u1b0b\u0007\u00f7\u0002\u0002\u1b0b\u1b13",
    "\u0005\u02b6\u015c\u0002\u1b0c\u1b0d\u0007;\u0002\u0002\u1b0d\u1b14",
    "\u0007\u0291\u0002\u0002\u1b0e\u1b0f\u0007;\u0002\u0002\u1b0f\u1b14",
    "\u0007\u01c9\u0002\u0002\u1b10\u1b11\u0007;\u0002\u0002\u1b11\u1b12",
    "\u0007\u001c\u0002\u0002\u1b12\u1b14\u0005\u0376\u01bc\u0002\u1b13\u1b0c",
    "\u0003\u0002\u0002\u0002\u1b13\u1b0e\u0003\u0002\u0002\u0002\u1b13\u1b10",
    "\u0003\u0002\u0002\u0002\u1b14\u0297\u0003\u0002\u0002\u0002\u1b15\u1b16",
    "\u0007\u008a\u0002\u0002\u1b16\u1b17\u0007\u00f7\u0002\u0002\u1b17\u1b18",
    "\u0005\u02b6\u015c\u0002\u1b18\u0299\u0003\u0002\u0002\u0002\u1b19\u1b1a",
    "\u0007A\u0002\u0002\u1b1a\u1b1b\u0007\u00cf\u0002\u0002\u1b1b\u1b1c",
    "\u0005\u0386\u01c4\u0002\u1b1c\u1b1d\u0007i\u0002\u0002\u1b1d\u1b1e",
    "\u0007\u0096\u0002\u0002\u1b1e\u1b1f\u0005\u0342\u01a2\u0002\u1b1f\u1b20",
    "\u0007\u0099\u0002\u0002\u1b20\u1b21\u0005\u02ba\u015e\u0002\u1b21\u029b",
    "\u0003\u0002\u0002\u0002\u1b22\u1b23\u0007\u0082\u0002\u0002\u1b23\u1b24",
    "\u0007\u00cf\u0002\u0002\u1b24\u1b25\u0007i\u0002\u0002\u1b25\u1b26",
    "\u0007\u0096\u0002\u0002\u1b26\u1b29\u0005\u0342\u01a2\u0002\u1b27\u1b28",
    "\u0007>\u0002\u0002\u1b28\u1b2a\u0005\u02ba\u015e\u0002\u1b29\u1b27",
    "\u0003\u0002\u0002\u0002\u1b29\u1b2a\u0003\u0002\u0002\u0002\u1b2a\u029d",
    "\u0003\u0002\u0002\u0002\u1b2b\u1b2c\u0007\u008a\u0002\u0002\u1b2c\u1b2e",
    "\u0007\u00cf\u0002\u0002\u1b2d\u1b2f\u0005\u02ba\u015e\u0002\u1b2e\u1b2d",
    "\u0003\u0002\u0002\u0002\u1b2e\u1b2f\u0003\u0002\u0002\u0002\u1b2f\u1b30",
    "\u0003\u0002\u0002\u0002\u1b30\u1b31\u0007i\u0002\u0002\u1b31\u1b32",
    "\u0007\u0096\u0002\u0002\u1b32\u1b33\u0005\u0342\u01a2\u0002\u1b33\u029f",
    "\u0003\u0002\u0002\u0002\u1b34\u1b35\u0007A\u0002\u0002\u1b35\u1b36",
    "\u0007\u0103\u0002\u0002\u1b36\u1b39\tN\u0002\u0002\u1b37\u1b38\u0007",
    "i\u0002\u0002\u1b38\u1b3a\u0005\u02b8\u015d\u0002\u1b39\u1b37\u0003",
    "\u0002\u0002\u0002\u1b39\u1b3a\u0003\u0002\u0002\u0002\u1b3a\u1b3d\u0003",
    "\u0002\u0002\u0002\u1b3b\u1b3c\u0007\u0099\u0002\u0002\u1b3c\u1b3e\u0005",
    "\u02b4\u015b\u0002\u1b3d\u1b3b\u0003\u0002\u0002\u0002\u1b3d\u1b3e\u0003",
    "\u0002\u0002\u0002\u1b3e\u02a1\u0003\u0002\u0002\u0002\u1b3f\u1b40\u0007",
    "\u0082\u0002\u0002\u1b40\u1b43\u0007\u0103\u0002\u0002\u1b41\u1b42\u0007",
    "i\u0002\u0002\u1b42\u1b44\u0005\u02b8\u015d\u0002\u1b43\u1b41\u0003",
    "\u0002\u0002\u0002\u1b43\u1b44\u0003\u0002\u0002\u0002\u1b44\u1b47\u0003",
    "\u0002\u0002\u0002\u1b45\u1b46\u0007>\u0002\u0002\u1b46\u1b48\u0005",
    "\u02b4\u015b\u0002\u1b47\u1b45\u0003\u0002\u0002\u0002\u1b47\u1b48\u0003",
    "\u0002\u0002\u0002\u1b48\u02a3\u0003\u0002\u0002\u0002\u1b49\u1b4a\u0007",
    "\u008a\u0002\u0002\u1b4a\u1b4c\u0007\u0103\u0002\u0002\u1b4b\u1b4d\u0005",
    "\u02b4\u015b\u0002\u1b4c\u1b4b\u0003\u0002\u0002\u0002\u1b4c\u1b4d\u0003",
    "\u0002\u0002\u0002\u1b4d\u1b50\u0003\u0002\u0002\u0002\u1b4e\u1b4f\u0007",
    "i\u0002\u0002\u1b4f\u1b51\u0005\u02b8\u015d\u0002\u1b50\u1b4e\u0003",
    "\u0002\u0002\u0002\u1b50\u1b51\u0003\u0002\u0002\u0002\u1b51\u02a5\u0003",
    "\u0002\u0002\u0002\u1b52\u1b53\u0007!\u0002\u0002\u1b53\u1b54\u0007",
    "\u0107\u0002\u0002\u1b54\u1b81\u0005\u0376\u01bc\u0002\u1b55\u1b56\u0007",
    "0\u0002\u0002\u1b56\u1b57\u0007\u0107\u0002\u0002\u1b57\u1b81\u0005",
    "\u0376\u01bc\u0002\u1b58\u1b59\u0007\u0088\u0002\u0002\u1b59\u1b5c\u0007",
    "\u0107\u0002\u0002\u1b5a\u1b5d\u0005\u0376\u01bc\u0002\u1b5b\u1b5d\u0007",
    "\t\u0002\u0002\u1b5c\u1b5a\u0003\u0002\u0002\u0002\u1b5c\u1b5b\u0003",
    "\u0002\u0002\u0002\u1b5d\u1b81\u0003\u0002\u0002\u0002\u1b5e\u1b60\u0007",
    "\u008a\u0002\u0002\u1b5f\u1b61\u0007\u00c6\u0002\u0002\u1b60\u1b5f\u0003",
    "\u0002\u0002\u0002\u1b60\u1b61\u0003\u0002\u0002\u0002\u1b61\u1b62\u0003",
    "\u0002\u0002\u0002\u1b62\u1b81\u0007\u0108\u0002\u0002\u1b63\u1b64\u0007",
    "\u008a\u0002\u0002\u1b64\u1b65\u0007\u0107\u0002\u0002\u1b65\u1b66\u0007",
    "A\u0002\u0002\u1b66\u1b81\u0005\u02bc\u015f\u0002\u1b67\u1b69\u0007",
    "A\u0002\u0002\u1b68\u1b6a\u0007\u0107\u0002\u0002\u1b69\u1b68\u0003",
    "\u0002\u0002\u0002\u1b69\u1b6a\u0003\u0002\u0002\u0002\u1b6a\u1b6b\u0003",
    "\u0002\u0002\u0002\u1b6b\u1b6c\u0005\u03a4\u01d3\u0002\u1b6c\u1b6d\u0007",
    "\u0099\u0002\u0002\u1b6d\u1b71\u0005\u02b2\u015a\u0002\u1b6e\u1b6f\u0007",
    "\u00aa\u0002\u0002\u1b6f\u1b70\u0007\u00ae\u0002\u0002\u1b70\u1b72\u0007",
    "k\u0002\u0002\u1b71\u1b6e\u0003\u0002\u0002\u0002\u1b71\u1b72\u0003",
    "\u0002\u0002\u0002\u1b72\u1b81\u0003\u0002\u0002\u0002\u1b73\u1b77\u0007",
    "\u0082\u0002\u0002\u1b74\u1b75\u0007\u00ae\u0002\u0002\u1b75\u1b76\u0007",
    "k\u0002\u0002\u1b76\u1b78\u0007;\u0002\u0002\u1b77\u1b74\u0003\u0002",
    "\u0002\u0002\u1b77\u1b78\u0003\u0002\u0002\u0002\u1b78\u1b7a\u0003\u0002",
    "\u0002\u0002\u1b79\u1b7b\u0007\u0107\u0002\u0002\u1b7a\u1b79\u0003\u0002",
    "\u0002\u0002\u1b7a\u1b7b\u0003\u0002\u0002\u0002\u1b7b\u1b7c\u0003\u0002",
    "\u0002\u0002\u1b7c\u1b7d\u0005\u03a4\u01d3\u0002\u1b7d\u1b7e\u0007>",
    "\u0002\u0002\u1b7e\u1b7f\u0005\u02b2\u015a\u0002\u1b7f\u1b81\u0003\u0002",
    "\u0002\u0002\u1b80\u1b52\u0003\u0002\u0002\u0002\u1b80\u1b55\u0003\u0002",
    "\u0002\u0002\u1b80\u1b58\u0003\u0002\u0002\u0002\u1b80\u1b5e\u0003\u0002",
    "\u0002\u0002\u1b80\u1b63\u0003\u0002\u0002\u0002\u1b80\u1b67\u0003\u0002",
    "\u0002\u0002\u1b80\u1b73\u0003\u0002\u0002\u0002\u1b81\u02a7\u0003\u0002",
    "\u0002\u0002\u1b82\u1b83\u0007\u008a\u0002\u0002\u1b83\u1b84\u0007\u0100",
    "\u0002\u0002\u1b84\u1b85\u0005\u0376\u01bc\u0002\u1b85\u02a9\u0003\u0002",
    "\u0002\u0002\u1b86\u1b8b\u0005\u02ac\u0157\u0002\u1b87\u1b88\u0007\u0364",
    "\u0002\u0002\u1b88\u1b8a\u0005\u02ac\u0157\u0002\u1b89\u1b87\u0003\u0002",
    "\u0002\u0002\u1b8a\u1b8d\u0003\u0002\u0002\u0002\u1b8b\u1b89\u0003\u0002",
    "\u0002\u0002\u1b8b\u1b8c\u0003\u0002\u0002\u0002\u1b8c\u02ab\u0003\u0002",
    "\u0002\u0002\u1b8d\u1b8b\u0003\u0002\u0002\u0002\u1b8e\u1b93\u0005\u02ae",
    "\u0158\u0002\u1b8f\u1b90\u0007\u0360\u0002\u0002\u1b90\u1b91\u0005\u03a4",
    "\u01d3\u0002\u1b91\u1b92\u0007\u0361\u0002\u0002\u1b92\u1b94\u0003\u0002",
    "\u0002\u0002\u1b93\u1b8f\u0003\u0002\u0002\u0002\u1b93\u1b94\u0003\u0002",
    "\u0002\u0002\u1b94\u02ad\u0003\u0002\u0002\u0002\u1b95\u1ba6\u0007\t",
    "\u0002\u0002\u1b96\u1ba6\u0007\n\u0002\u0002\u1b97\u1ba6\u0007\u00a2",
    "\u0002\u0002\u1b98\u1ba6\u0007!\u0002\u0002\u1b99\u1b9a\u0007!\u0002",
    "\u0002\u1b9a\u1ba6\tO\u0002\u0002\u1b9b\u1ba6\u00070\u0002\u0002\u1b9c",
    "\u1ba6\u0007H\u0002\u0002\u1b9d\u1ba6\u0007]\u0002\u0002\u1b9e\u1ba6",
    "\u0007\u0087\u0002\u0002\u1b9f\u1ba6\u0007\u0116\u0002\u0002\u1ba0\u1ba6",
    "\u0007L\u0002\u0002\u1ba1\u1ba6\u0007*\u0002\u0002\u1ba2\u1ba6\u0007",
    "\u02ab\u0002\u0002\u1ba3\u1ba6\u0007\u02b1\u0002\u0002\u1ba4\u1ba6\u0007",
    "\u0226\u0002\u0002\u1ba5\u1b95\u0003\u0002\u0002\u0002\u1ba5\u1b96\u0003",
    "\u0002\u0002\u0002\u1ba5\u1b97\u0003\u0002\u0002\u0002\u1ba5\u1b98\u0003",
    "\u0002\u0002\u0002\u1ba5\u1b99\u0003\u0002\u0002\u0002\u1ba5\u1b9b\u0003",
    "\u0002\u0002\u0002\u1ba5\u1b9c\u0003\u0002\u0002\u0002\u1ba5\u1b9d\u0003",
    "\u0002\u0002\u0002\u1ba5\u1b9e\u0003\u0002\u0002\u0002\u1ba5\u1b9f\u0003",
    "\u0002\u0002\u0002\u1ba5\u1ba0\u0003\u0002\u0002\u0002\u1ba5\u1ba1\u0003",
    "\u0002\u0002\u0002\u1ba5\u1ba2\u0003\u0002\u0002\u0002\u1ba5\u1ba3\u0003",
    "\u0002\u0002\u0002\u1ba5\u1ba4\u0003\u0002\u0002\u0002\u1ba6\u02af\u0003",
    "\u0002\u0002\u0002\u1ba7\u1ba8\t\u0002\u0002\u0002\u1ba8\u1bc2\u0005",
    "\u0424\u0213\u0002\u1ba9\u1bab\u0007\u0096\u0002\u0002\u1baa\u1ba9\u0003",
    "\u0002\u0002\u0002\u1baa\u1bab\u0003\u0002\u0002\u0002\u1bab\u1bb9\u0003",
    "\u0002\u0002\u0002\u1bac\u1baf\u0007\u034d\u0002\u0002\u1bad\u1bae\u0007",
    "\u035d\u0002\u0002\u1bae\u1bb0\u0007\u034d\u0002\u0002\u1baf\u1bad\u0003",
    "\u0002\u0002\u0002\u1baf\u1bb0\u0003\u0002\u0002\u0002\u1bb0\u1bba\u0003",
    "\u0002\u0002\u0002\u1bb1\u1bb2\u0005\u0424\u0213\u0002\u1bb2\u1bb3\u0007",
    "\u035d\u0002\u0002\u1bb3\u1bb4\u0007\u034d\u0002\u0002\u1bb4\u1bba\u0003",
    "\u0002\u0002\u0002\u1bb5\u1bb7\u0005\u0342\u01a2\u0002\u1bb6\u1bb8\u0005",
    "\u033a\u019e\u0002\u1bb7\u1bb6\u0003\u0002\u0002\u0002\u1bb7\u1bb8\u0003",
    "\u0002\u0002\u0002\u1bb8\u1bba\u0003\u0002\u0002\u0002\u1bb9\u1bac\u0003",
    "\u0002\u0002\u0002\u1bb9\u1bb1\u0003\u0002\u0002\u0002\u1bb9\u1bb5\u0003",
    "\u0002\u0002\u0002\u1bba\u1bc2\u0003\u0002\u0002\u0002\u1bbb\u1bbc\t",
    "O\u0002\u0002\u1bbc\u1bc2\u0005\u0376\u01bc\u0002\u1bbd\u1bbe\u0007",
    "\u012c\u0002\u0002\u1bbe\u1bc2\u0005\u0386\u01c4\u0002\u1bbf\u1bc0\u0007",
    "\u0296\u0002\u0002\u1bc0\u1bc2\u0005\u0376\u01bc\u0002\u1bc1\u1ba7\u0003",
    "\u0002\u0002\u0002\u1bc1\u1baa\u0003\u0002\u0002\u0002\u1bc1\u1bbb\u0003",
    "\u0002\u0002\u0002\u1bc1\u1bbd\u0003\u0002\u0002\u0002\u1bc1\u1bbf\u0003",
    "\u0002\u0002\u0002\u1bc2\u02b1\u0003\u0002\u0002\u0002\u1bc3\u1bc8\u0005",
    "\u02bc\u015f\u0002\u1bc4\u1bc5\u0007\u0364\u0002\u0002\u1bc5\u1bc7\u0005",
    "\u02bc\u015f\u0002\u1bc6\u1bc4\u0003\u0002\u0002\u0002\u1bc7\u1bca\u0003",
    "\u0002\u0002\u0002\u1bc8\u1bc6\u0003\u0002\u0002\u0002\u1bc8\u1bc9\u0003",
    "\u0002\u0002\u0002\u1bc9\u02b3\u0003\u0002\u0002\u0002\u1bca\u1bc8\u0003",
    "\u0002\u0002\u0002\u1bcb\u1bcc\u0007\u02ca\u0002\u0002\u1bcc\u1bcd\u0005",
    "\u0376\u01bc\u0002\u1bcd\u02b5\u0003\u0002\u0002\u0002\u1bce\u1bd5\u0007",
    "i\u0002\u0002\u1bcf\u1bd1\u0007\u0096\u0002\u0002\u1bd0\u1bcf\u0003",
    "\u0002\u0002\u0002\u1bd0\u1bd1\u0003\u0002\u0002\u0002\u1bd1\u1bd2\u0003",
    "\u0002\u0002\u0002\u1bd2\u1bd6\u0005\u0342\u01a2\u0002\u1bd3\u1bd4\u0007",
    "\u02d0\u0002\u0002\u1bd4\u1bd6\u0005\u0344\u01a3\u0002\u1bd5\u1bd0\u0003",
    "\u0002\u0002\u0002\u1bd5\u1bd3\u0003\u0002\u0002\u0002\u1bd6\u02b7\u0003",
    "\u0002\u0002\u0002\u1bd7\u1bd8\u0007%\u0002\u0002\u1bd8\u1bdc\u0005",
    "\u0424\u0213\u0002\u1bd9\u1bda\u0007\u02bc\u0002\u0002\u1bda\u1bdc\u0007",
    "\u011a\u0002\u0002\u1bdb\u1bd7\u0003\u0002\u0002\u0002\u1bdb\u1bd9\u0003",
    "\u0002\u0002\u0002\u1bdc\u02b9\u0003\u0002\u0002\u0002\u1bdd\u1bde\u0007",
    "\u02ca\u0002\u0002\u1bde\u1be2\u0005\u0376\u01bc\u0002\u1bdf\u1be0\u0007",
    "B\u0002\u0002\u1be0\u1be2\u0005\u0376\u01bc\u0002\u1be1\u1bdd\u0003",
    "\u0002\u0002\u0002\u1be1\u1bdf\u0003\u0002\u0002\u0002\u1be2\u02bb\u0003",
    "\u0002\u0002\u0002\u1be3\u1be4\u0007\u02ca\u0002\u0002\u1be4\u1bea\u0005",
    "\u0376\u01bc\u0002\u1be5\u1be6\u0007B\u0002\u0002\u1be6\u1bea\u0005",
    "\u0376\u01bc\u0002\u1be7\u1be8\u0007\u0107\u0002\u0002\u1be8\u1bea\u0005",
    "\u0376\u01bc\u0002\u1be9\u1be3\u0003\u0002\u0002\u0002\u1be9\u1be5\u0003",
    "\u0002\u0002\u0002\u1be9\u1be7\u0003\u0002\u0002\u0002\u1bea\u02bd\u0003",
    "\u0002\u0002\u0002\u1beb\u1bec\u0005\u0364\u01b3\u0002\u1bec\u1bed\u0005",
    "\u02c6\u0164\u0002\u1bed\u02bf\u0003\u0002\u0002\u0002\u1bee\u1bef\u0005",
    "\u0364\u01b3\u0002\u1bef\u1bf0\u0007\u0210\u0002\u0002\u1bf0\u1bf1\u0007",
    "\u0013\u0002\u0002\u1bf1\u1bf2\u0007\u0267\u0002\u0002\u1bf2\u1bf3\u0007",
    "\u0372\u0002\u0002\u1bf3\u1c07\u0003\u0002\u0002\u0002\u1bf4\u1bf5\u0005",
    "\u0364\u01b3\u0002\u1bf5\u1bf8\u0007\u0210\u0002\u0002\u1bf6\u1bf7\u0007",
    "\u00aa\u0002\u0002\u1bf7\u1bf9\u0005\u0374\u01bb\u0002\u1bf8\u1bf6\u0003",
    "\u0002\u0002\u0002\u1bf8\u1bf9\u0003\u0002\u0002\u0002\u1bf9\u1bfa\u0003",
    "\u0002\u0002\u0002\u1bfa\u1bfb\u0007\u0013\u0002\u0002\u1bfb\u1bfc\u0007",
    "\u0372\u0002\u0002\u1bfc\u1c07\u0003\u0002\u0002\u0002\u1bfd\u1bfe\u0005",
    "\u0364\u01b3\u0002\u1bfe\u1bff\u0007\u0210\u0002\u0002\u1bff\u1c00\u0007",
    "\u00aa\u0002\u0002\u1c00\u1c03\u0005\u0374\u01bb\u0002\u1c01\u1c02\u0007",
    "\u000e\u0002\u0002\u1c02\u1c04\u0007\u0372\u0002\u0002\u1c03\u1c01\u0003",
    "\u0002\u0002\u0002\u1c03\u1c04\u0003\u0002\u0002\u0002\u1c04\u1c07\u0003",
    "\u0002\u0002\u0002\u1c05\u1c07\u0005\u0364\u01b3\u0002\u1c06\u1bee\u0003",
    "\u0002\u0002\u0002\u1c06\u1bf4\u0003\u0002\u0002\u0002\u1c06\u1bfd\u0003",
    "\u0002\u0002\u0002\u1c06\u1c05\u0003\u0002\u0002\u0002\u1c07\u02c1\u0003",
    "\u0002\u0002\u0002\u1c08\u1c11\u0007\u0093\u0002\u0002\u1c09\u1c11\u0007",
    "\u02d7\u0002\u0002\u1c0a\u1c0b\u0007\u01c4\u0002\u0002\u1c0b\u1c11\u0007",
    "\u0372\u0002\u0002\u1c0c\u1c0d\u0007\u021e\u0002\u0002\u1c0d\u1c11\u0007",
    "\u0372\u0002\u0002\u1c0e\u1c0f\u0007\u02b5\u0002\u0002\u1c0f\u1c11\u0007",
    "\u0372\u0002\u0002\u1c10\u1c08\u0003\u0002\u0002\u0002\u1c10\u1c09\u0003",
    "\u0002\u0002\u0002\u1c10\u1c0a\u0003\u0002\u0002\u0002\u1c10\u1c0c\u0003",
    "\u0002\u0002\u0002\u1c10\u1c0e\u0003\u0002\u0002\u0002\u1c11\u02c3\u0003",
    "\u0002\u0002\u0002\u1c12\u1c13\u0007\u0240\u0002\u0002\u1c13\u1c1b\u0005",
    "\u0382\u01c2\u0002\u1c14\u1c15\u0007\u0243\u0002\u0002\u1c15\u1c1b\u0005",
    "\u0382\u01c2\u0002\u1c16\u1c17\u0007\u023f\u0002\u0002\u1c17\u1c1b\u0005",
    "\u0382\u01c2\u0002\u1c18\u1c19\u0007\u0244\u0002\u0002\u1c19\u1c1b\u0005",
    "\u0382\u01c2\u0002\u1c1a\u1c12\u0003\u0002\u0002\u0002\u1c1a\u1c14\u0003",
    "\u0002\u0002\u0002\u1c1a\u1c16\u0003\u0002\u0002\u0002\u1c1a\u1c18\u0003",
    "\u0002\u0002\u0002\u1c1b\u02c5\u0003\u0002\u0002\u0002\u1c1c\u1c1d\u0007",
    "\u0267\u0002\u0002\u1c1d\u1c24\u0007\u01f7\u0002\u0002\u1c1e\u1c25\u0007",
    "(\u0002\u0002\u1c1f\u1c25\u0007\u0251\u0002\u0002\u1c20\u1c21\u0007",
    "M\u0002\u0002\u1c21\u1c22\u0005\u0382\u01c2\u0002\u1c22\u1c23\u0007",
    "\u02e0\u0002\u0002\u1c23\u1c25\u0003\u0002\u0002\u0002\u1c24\u1c1e\u0003",
    "\u0002\u0002\u0002\u1c24\u1c1f\u0003\u0002\u0002\u0002\u1c24\u1c20\u0003",
    "\u0002\u0002\u0002\u1c24\u1c25\u0003\u0002\u0002\u0002\u1c25\u02c7\u0003",
    "\u0002\u0002\u0002\u1c26\u1c27\u0007\u01aa\u0002\u0002\u1c27\u1c28\t",
    "P\u0002\u0002\u1c28\u02c9\u0003\u0002\u0002\u0002\u1c29\u1c2e\u0005",
    "\u02cc\u0167\u0002\u1c2a\u1c2b\u0007\u0360\u0002\u0002\u1c2b\u1c2c\u0005",
    "\u03a4\u01d3\u0002\u1c2c\u1c2d\u0007\u0361\u0002\u0002\u1c2d\u1c2f\u0003",
    "\u0002\u0002\u0002\u1c2e\u1c2a\u0003\u0002\u0002\u0002\u1c2e\u1c2f\u0003",
    "\u0002\u0002\u0002\u1c2f\u02cb\u0003\u0002\u0002\u0002\u1c30\u1c32\u0007",
    "\t\u0002\u0002\u1c31\u1c33\u0007\u02ee\u0002\u0002\u1c32\u1c31\u0003",
    "\u0002\u0002\u0002\u1c32\u1c33\u0003\u0002\u0002\u0002\u1c33\u1c5b\u0003",
    "\u0002\u0002\u0002\u1c34\u1c36\u0007\n\u0002\u0002\u1c35\u1c37\u0007",
    "\u02e7\u0002\u0002\u1c36\u1c35\u0003\u0002\u0002\u0002\u1c36\u1c37\u0003",
    "\u0002\u0002\u0002\u1c37\u1c5b\u0003\u0002\u0002\u0002\u1c38\u1c3f\u0007",
    "!\u0002\u0002\u1c39\u1c3a\u0007\u02bc\u0002\u0002\u1c3a\u1c40\u0007",
    "\u02e6\u0002\u0002\u1c3b\u1c40\u0007\u02e7\u0002\u0002\u1c3c\u1c40\u0007",
    "\u02d0\u0002\u0002\u1c3d\u1c40\u0007\u02ca\u0002\u0002\u1c3e\u1c40\u0007",
    "\u02bb\u0002\u0002\u1c3f\u1c39\u0003\u0002\u0002\u0002\u1c3f\u1c3b\u0003",
    "\u0002\u0002\u0002\u1c3f\u1c3c\u0003\u0002\u0002\u0002\u1c3f\u1c3d\u0003",
    "\u0002\u0002\u0002\u1c3f\u1c3e\u0003\u0002\u0002\u0002\u1c3f\u1c40\u0003",
    "\u0002\u0002\u0002\u1c40\u1c5b\u0003\u0002\u0002\u0002\u1c41\u1c5b\u0007",
    "*\u0002\u0002\u1c42\u1c5b\u00070\u0002\u0002\u1c43\u1c5b\u0007\u01f2",
    "\u0002\u0002\u1c44\u1c5b\u0007\u02e8\u0002\u0002\u1c45\u1c5b\u0007\u02e9",
    "\u0002\u0002\u1c46\u1c47\u0007A\u0002\u0002\u1c47\u1c5b\u0007k\u0002",
    "\u0002\u1c48\u1c5b\u0007H\u0002\u0002\u1c49\u1c5b\u0007L\u0002\u0002",
    "\u1c4a\u1c4b\u0007]\u0002\u0002\u1c4b\u1c5b\u0007\u02e6\u0002\u0002",
    "\u1c4c\u1c5b\u0007\u02ea\u0002\u0002\u1c4d\u1c5b\u0007\u0274\u0002\u0002",
    "\u1c4e\u1c5b\u0007y\u0002\u0002\u1c4f\u1c5b\u0007\u02eb\u0002\u0002",
    "\u1c50\u1c51\u0007\u0289\u0002\u0002\u1c51\u1c5b\tQ\u0002\u0002\u1c52",
    "\u1c5b\u0007\u0087\u0002\u0002\u1c53\u1c54\u0007\u008a\u0002\u0002\u1c54",
    "\u1c5b\tR\u0002\u0002\u1c55\u1c5b\u0007\u02ec\u0002\u0002\u1c56\u1c5b",
    "\u0007\u02ed\u0002\u0002\u1c57\u1c5b\u0007\u009b\u0002\u0002\u1c58\u1c5b",
    "\u0007\u00a2\u0002\u0002\u1c59\u1c5b\u0007\u00a3\u0002\u0002\u1c5a\u1c30",
    "\u0003\u0002\u0002\u0002\u1c5a\u1c34\u0003\u0002\u0002\u0002\u1c5a\u1c38",
    "\u0003\u0002\u0002\u0002\u1c5a\u1c41\u0003\u0002\u0002\u0002\u1c5a\u1c42",
    "\u0003\u0002\u0002\u0002\u1c5a\u1c43\u0003\u0002\u0002\u0002\u1c5a\u1c44",
    "\u0003\u0002\u0002\u0002\u1c5a\u1c45\u0003\u0002\u0002\u0002\u1c5a\u1c46",
    "\u0003\u0002\u0002\u0002\u1c5a\u1c48\u0003\u0002\u0002\u0002\u1c5a\u1c49",
    "\u0003\u0002\u0002\u0002\u1c5a\u1c4a\u0003\u0002\u0002\u0002\u1c5a\u1c4c",
    "\u0003\u0002\u0002\u0002\u1c5a\u1c4d\u0003\u0002\u0002\u0002\u1c5a\u1c4e",
    "\u0003\u0002\u0002\u0002\u1c5a\u1c4f\u0003\u0002\u0002\u0002\u1c5a\u1c50",
    "\u0003\u0002\u0002\u0002\u1c5a\u1c52\u0003\u0002\u0002\u0002\u1c5a\u1c53",
    "\u0003\u0002\u0002\u0002\u1c5a\u1c55\u0003\u0002\u0002\u0002\u1c5a\u1c56",
    "\u0003\u0002\u0002\u0002\u1c5a\u1c57\u0003\u0002\u0002\u0002\u1c5a\u1c58",
    "\u0003\u0002\u0002\u0002\u1c5a\u1c59\u0003\u0002\u0002\u0002\u1c5b\u02cd",
    "\u0003\u0002\u0002\u0002\u1c5c\u1c6a\u0007\u034d\u0002\u0002\u1c5d\u1c5e",
    "\u0007\u034d\u0002\u0002\u1c5e\u1c5f\u0007\u035d\u0002\u0002\u1c5f\u1c6a",
    "\u0007\u034d\u0002\u0002\u1c60\u1c61\u0005\u0376\u01bc\u0002\u1c61\u1c62",
    "\u0007\u035d\u0002\u0002\u1c62\u1c63\u0007\u034d\u0002\u0002\u1c63\u1c6a",
    "\u0003\u0002\u0002\u0002\u1c64\u1c65\u0005\u0376\u01bc\u0002\u1c65\u1c66",
    "\u0007\u035d\u0002\u0002\u1c66\u1c67\u0005\u0376\u01bc\u0002\u1c67\u1c6a",
    "\u0003\u0002\u0002\u0002\u1c68\u1c6a\u0005\u0376\u01bc\u0002\u1c69\u1c5c",
    "\u0003\u0002\u0002\u0002\u1c69\u1c5d\u0003\u0002\u0002\u0002\u1c69\u1c60",
    "\u0003\u0002\u0002\u0002\u1c69\u1c64\u0003\u0002\u0002\u0002\u1c69\u1c68",
    "\u0003\u0002\u0002\u0002\u1c6a\u02cf\u0003\u0002\u0002\u0002\u1c6b\u1c6c",
    "\u0005\u0364\u01b3\u0002\u1c6c\u1c6d\u0007\u0099\u0002\u0002\u1c6d\u1c6e",
    "\u0005\u0364\u01b3\u0002\u1c6e\u02d1\u0003\u0002\u0002\u0002\u1c6f\u1c71",
    "\u0007\f\u0002\u0002\u1c70\u1c72\tS\u0002\u0002\u1c71\u1c70\u0003\u0002",
    "\u0002\u0002\u1c71\u1c72\u0003\u0002\u0002\u0002\u1c72\u1c73\u0003\u0002",
    "\u0002\u0002\u1c73\u1c74\u0007\u0096\u0002\u0002\u1c74\u1c75\u0005\u03b0",
    "\u01d9\u0002\u1c75\u02d3\u0003\u0002\u0002\u0002\u1c76\u1c77\u0007\u001a",
    "\u0002\u0002\u1c77\u1c78\u0007\u0096\u0002\u0002\u1c78\u1c7c\u0005\u03b0",
    "\u01d9\u0002\u1c79\u1c7b\u0005\u02dc\u016f\u0002\u1c7a\u1c79\u0003\u0002",
    "\u0002\u0002\u1c7b\u1c7e\u0003\u0002\u0002\u0002\u1c7c\u1c7a\u0003\u0002",
    "\u0002\u0002\u1c7c\u1c7d\u0003\u0002\u0002\u0002\u1c7d\u02d5\u0003\u0002",
    "\u0002\u0002\u1c7e\u1c7c\u0003\u0002\u0002\u0002\u1c7f\u1c80\u0007\u01c2",
    "\u0002\u0002\u1c80\u1c81\u0007\u0096\u0002\u0002\u1c81\u1c83\u0005\u03b0",
    "\u01d9\u0002\u1c82\u1c84\tT\u0002\u0002\u1c83\u1c82\u0003\u0002\u0002",
    "\u0002\u1c83\u1c84\u0003\u0002\u0002\u0002\u1c84\u02d7\u0003\u0002\u0002",
    "\u0002\u1c85\u1c87\u0007j\u0002\u0002\u1c86\u1c88\tS\u0002\u0002\u1c87",
    "\u1c86\u0003\u0002\u0002\u0002\u1c87\u1c88\u0003\u0002\u0002\u0002\u1c88",
    "\u1c89\u0003\u0002\u0002\u0002\u1c89\u1c8a\u0007\u0096\u0002\u0002\u1c8a",
    "\u1c8b\u0005\u03b0\u01d9\u0002\u1c8b\u02d9\u0003\u0002\u0002\u0002\u1c8c",
    "\u1c8e\u0007\u0281\u0002\u0002\u1c8d\u1c8f\tS\u0002\u0002\u1c8e\u1c8d",
    "\u0003\u0002\u0002\u0002\u1c8e\u1c8f\u0003\u0002\u0002\u0002\u1c8f\u1c90",
    "\u0003\u0002\u0002\u0002\u1c90\u1c91\u0007\u0096\u0002\u0002\u1c91\u1c93",
    "\u0005\u03b0\u01d9\u0002\u1c92\u1c94\u0007\u0276\u0002\u0002\u1c93\u1c92",
    "\u0003\u0002\u0002\u0002\u1c93\u1c94\u0003\u0002\u0002\u0002\u1c94\u1c96",
    "\u0003\u0002\u0002\u0002\u1c95\u1c97\u0007\u01f9\u0002\u0002\u1c96\u1c95",
    "\u0003\u0002\u0002\u0002\u1c96\u1c97\u0003\u0002\u0002\u0002\u1c97\u1c99",
    "\u0003\u0002\u0002\u0002\u1c98\u1c9a\u0007\u02cb\u0002\u0002\u1c99\u1c98",
    "\u0003\u0002\u0002\u0002\u1c99\u1c9a\u0003\u0002\u0002\u0002\u1c9a\u02db",
    "\u0003\u0002\u0002\u0002\u1c9b\u1c9c\u0007;\u0002\u0002\u1c9c\u1ca3",
    "\u0007\u02c9\u0002\u0002\u1c9d\u1ca3\u0007\u0276\u0002\u0002\u1c9e\u1ca3",
    "\u0007\u01fb\u0002\u0002\u1c9f\u1ca3\u0007\u0245\u0002\u0002\u1ca0\u1ca3",
    "\u0007\u01f9\u0002\u0002\u1ca1\u1ca3\u0007\u01c0\u0002\u0002\u1ca2\u1c9b",
    "\u0003\u0002\u0002\u0002\u1ca2\u1c9d\u0003\u0002\u0002\u0002\u1ca2\u1c9e",
    "\u0003\u0002\u0002\u0002\u1ca2\u1c9f\u0003\u0002\u0002\u0002\u1ca2\u1ca0",
    "\u0003\u0002\u0002\u0002\u1ca2\u1ca1\u0003\u0002\u0002\u0002\u1ca3\u02dd",
    "\u0003\u0002\u0002\u0002\u1ca4\u1ca6\u0007!\u0002\u0002\u1ca5\u1ca7",
    "\u0007\u01ad\u0002\u0002\u1ca6\u1ca5\u0003\u0002\u0002\u0002\u1ca6\u1ca7",
    "\u0003\u0002\u0002\u0002\u1ca7\u1ca8\u0003\u0002\u0002\u0002\u1ca8\u1ca9",
    "\u0007\u0206\u0002\u0002\u1ca9\u1caa\u0005\u0376\u01bc\u0002\u1caa\u1cab",
    "\u0007\u028c\u0002\u0002\u1cab\u1cac\tU\u0002\u0002\u1cac\u1cad\u0007",
    "\u02a1\u0002\u0002\u1cad\u1cae\u0007\u0372\u0002\u0002\u1cae\u02df\u0003",
    "\u0002\u0002\u0002\u1caf\u1cb0\u0007\u0217\u0002\u0002\u1cb0\u1cb1\u0007",
    "\u0269\u0002\u0002\u1cb1\u1cb2\u0005\u0376\u01bc\u0002\u1cb2\u1cb3\u0007",
    "\u02a1\u0002\u0002\u1cb3\u1cb4\u0007\u0372\u0002\u0002\u1cb4\u02e1\u0003",
    "\u0002\u0002\u0002\u1cb5\u1cb6\u0007\u02c6\u0002\u0002\u1cb6\u1cb7\u0007",
    "\u0269\u0002\u0002\u1cb7\u1cb8\u0005\u0376\u01bc\u0002\u1cb8\u02e3\u0003",
    "\u0002\u0002\u0002\u1cb9\u1cba\u0007\u0088\u0002\u0002\u1cba\u1cbf\u0005",
    "\u02ec\u0177\u0002\u1cbb\u1cbc\u0007\u0364\u0002\u0002\u1cbc\u1cbe\u0005",
    "\u02ec\u0177\u0002\u1cbd\u1cbb\u0003\u0002\u0002\u0002\u1cbe\u1cc1\u0003",
    "\u0002\u0002\u0002\u1cbf\u1cbd\u0003\u0002\u0002\u0002\u1cbf\u1cc0\u0003",
    "\u0002\u0002\u0002\u1cc0\u1cde\u0003\u0002\u0002\u0002\u1cc1\u1cbf\u0003",
    "\u0002\u0002\u0002\u1cc2\u1cc3\u0006\u0173a\u0002\u1cc3\u1cc7\u0007",
    "\u0088\u0002\u0002\u1cc4\u1cc5\u0007\u0019\u0002\u0002\u1cc5\u1cc8\u0007",
    "\u0088\u0002\u0002\u1cc6\u1cc8\u0007\u033d\u0002\u0002\u1cc7\u1cc4\u0003",
    "\u0002\u0002\u0002\u1cc7\u1cc6\u0003\u0002\u0002\u0002\u1cc8\u1ccb\u0003",
    "\u0002\u0002\u0002\u1cc9\u1ccc\u0005\u0368\u01b5\u0002\u1cca\u1ccc\u0007",
    "(\u0002\u0002\u1ccb\u1cc9\u0003\u0002\u0002\u0002\u1ccb\u1cca\u0003",
    "\u0002\u0002\u0002\u1ccc\u1cde\u0003\u0002\u0002\u0002\u1ccd\u1cce\u0006",
    "\u0173b\u0002\u1cce\u1ccf\u0007\u0088\u0002\u0002\u1ccf\u1cd6\u0007",
    "\u024f\u0002\u0002\u1cd0\u1cd3\u0005\u0368\u01b5\u0002\u1cd1\u1cd2\u0007",
    "\u001b\u0002\u0002\u1cd2\u1cd4\u0005\u036a\u01b6\u0002\u1cd3\u1cd1\u0003",
    "\u0002\u0002\u0002\u1cd3\u1cd4\u0003\u0002\u0002\u0002\u1cd4\u1cd7\u0003",
    "\u0002\u0002\u0002\u1cd5\u1cd7\u0007(\u0002\u0002\u1cd6\u1cd0\u0003",
    "\u0002\u0002\u0002\u1cd6\u1cd5\u0003\u0002\u0002\u0002\u1cd7\u1cde\u0003",
    "\u0002\u0002\u0002\u1cd8\u1cd9\u0006\u0173c\u0002\u1cd9\u1cde\u0005",
    "\u028c\u0147\u0002\u1cda\u1cde\u0005\u0206\u0104\u0002\u1cdb\u1cdc\u0006",
    "\u0173d\u0002\u1cdc\u1cde\u0005\u0204\u0103\u0002\u1cdd\u1cb9\u0003",
    "\u0002\u0002\u0002\u1cdd\u1cc2\u0003\u0002\u0002\u0002\u1cdd\u1ccd\u0003",
    "\u0002\u0002\u0002\u1cdd\u1cd8\u0003\u0002\u0002\u0002\u1cdd\u1cda\u0003",
    "\u0002\u0002\u0002\u1cdd\u1cdb\u0003\u0002\u0002\u0002\u1cde\u02e5\u0003",
    "\u0002\u0002\u0002\u1cdf\u1ce0\u0006\u0174e\u0002\u1ce0\u1ce5\u0005",
    "\u02e8\u0175\u0002\u1ce1\u1ce2\u0006\u0174f\u0002\u1ce2\u1ce3\u0007",
    "\u008a\u0002\u0002\u1ce3\u1ce5\u0005\u02ea\u0176\u0002\u1ce4\u1cdf\u0003",
    "\u0002\u0002\u0002\u1ce4\u1ce1\u0003\u0002\u0002\u0002\u1ce5\u02e7\u0003",
    "\u0002\u0002\u0002\u1ce6\u1ce7\u0007\u008a\u0002\u0002\u1ce7\u1ce8\t",
    "C\u0002\u0002\u1ce8\u1d7d\u0007\u0229\u0002\u0002\u1ce9\u1cea\u0007",
    "\u008a\u0002\u0002\u1cea\u1ceb\tV\u0002\u0002\u1ceb\u1cee\u0007\u01f3",
    "\u0002\u0002\u1cec\u1ced\u0007G\u0002\u0002\u1ced\u1cef\u0007\u0372",
    "\u0002\u0002\u1cee\u1cec\u0003\u0002\u0002\u0002\u1cee\u1cef\u0003\u0002",
    "\u0002\u0002\u1cef\u1cf2\u0003\u0002\u0002\u0002\u1cf0\u1cf1\u0007>",
    "\u0002\u0002\u1cf1\u1cf3\u0005\u0382\u01c2\u0002\u1cf2\u1cf0\u0003\u0002",
    "\u0002\u0002\u1cf2\u1cf3\u0003\u0002\u0002\u0002\u1cf3\u1cfb\u0003\u0002",
    "\u0002\u0002\u1cf4\u1cf8\u0007Y\u0002\u0002\u1cf5\u1cf6\u0005\u0382",
    "\u01c2\u0002\u1cf6\u1cf7\u0007\u0364\u0002\u0002\u1cf7\u1cf9\u0003\u0002",
    "\u0002\u0002\u1cf8\u1cf5\u0003\u0002\u0002\u0002\u1cf8\u1cf9\u0003\u0002",
    "\u0002\u0002\u1cf9\u1cfa\u0003\u0002\u0002\u0002\u1cfa\u1cfc\u0005\u0382",
    "\u01c2\u0002\u1cfb\u1cf4\u0003\u0002\u0002\u0002\u1cfb\u1cfc\u0003\u0002",
    "\u0002\u0002\u1cfc\u1d7d\u0003\u0002\u0002\u0002\u1cfd\u1cfe\u0007\u008a",
    "\u0002\u0002\u1cfe\u1d00\u0005\u02f4\u017b\u0002\u1cff\u1d01\u0005\u02f6",
    "\u017c\u0002\u1d00\u1cff\u0003\u0002\u0002\u0002\u1d00\u1d01\u0003\u0002",
    "\u0002\u0002\u1d01\u1d7d\u0003\u0002\u0002\u0002\u1d02\u1d04\u0007\u008a",
    "\u0002\u0002\u1d03\u1d05\u0007\u0205\u0002\u0002\u1d04\u1d03\u0003\u0002",
    "\u0002\u0002\u1d04\u1d05\u0003\u0002\u0002\u0002\u1d05\u1d06\u0003\u0002",
    "\u0002\u0002\u1d06\u1d07\t/\u0002\u0002\u1d07\u1d08\tW\u0002\u0002\u1d08",
    "\u1d0a\u0005\u0342\u01a2\u0002\u1d09\u1d0b\u0005\u02fe\u0180\u0002\u1d0a",
    "\u1d09\u0003\u0002\u0002\u0002\u1d0a\u1d0b\u0003\u0002\u0002\u0002\u1d0b",
    "\u1d0d\u0003\u0002\u0002\u0002\u1d0c\u1d0e\u0005\u02f6\u017c\u0002\u1d0d",
    "\u1d0c\u0003\u0002\u0002\u0002\u1d0d\u1d0e\u0003\u0002\u0002\u0002\u1d0e",
    "\u1d7d\u0003\u0002\u0002\u0002\u1d0f\u1d10\u0007\u008a\u0002\u0002\u1d10",
    "\u1d11\u0007!\u0002\u0002\u1d11\u1d13\t\u0002\u0002\u0002\u1d12\u1d14",
    "\u0005\u03c6\u01e4\u0002\u1d13\u1d12\u0003\u0002\u0002\u0002\u1d13\u1d14",
    "\u0003\u0002\u0002\u0002\u1d14\u1d15\u0003\u0002\u0002\u0002\u1d15\u1d7d",
    "\u0005\u0376\u01bc\u0002\u1d16\u1d17\u0007\u008a\u0002\u0002\u1d17\u1d18",
    "\u0007!\u0002\u0002\u1d18\u1d19\tX\u0002\u0002\u1d19\u1d7d\u0005\u0340",
    "\u01a1\u0002\u1d1a\u1d1b\u0007\u008a\u0002\u0002\u1d1b\u1d1c\u0007!",
    "\u0002\u0002\u1d1c\u1d1d\u0007\u02ca\u0002\u0002\u1d1d\u1d7d\u0005\u0364",
    "\u01b3\u0002\u1d1e\u1d1f\u0007\u008a\u0002\u0002\u1d1f\u1d20\u0007\u01ec",
    "\u0002\u0002\u1d20\u1d21\u0005\u036c\u01b7\u0002\u1d21\u1d22\tY\u0002",
    "\u0002\u1d22\u1d7d\u0003\u0002\u0002\u0002\u1d23\u1d24\u0007\u008a\u0002",
    "\u0002\u1d24\u1d7d\u0005\u02f8\u017d\u0002\u1d25\u1d26\u0007\u008a\u0002",
    "\u0002\u1d26\u1d27\tZ\u0002\u0002\u1d27\u1d2b\u0007Y\u0002\u0002\u1d28",
    "\u1d29\u0005\u0382\u01c2\u0002\u1d29\u1d2a\u0007\u0364\u0002\u0002\u1d2a",
    "\u1d2c\u0003\u0002\u0002\u0002\u1d2b\u1d28\u0003\u0002\u0002\u0002\u1d2b",
    "\u1d2c\u0003\u0002\u0002\u0002\u1d2c\u1d2d\u0003\u0002\u0002\u0002\u1d2d",
    "\u1d7d\u0005\u0382\u01c2\u0002\u1d2e\u1d2f\u0007\u008a\u0002\u0002\u1d2f",
    "\u1d30\u0007\u018b\u0002\u0002\u1d30\u1d31\u0007\u0360\u0002\u0002\u1d31",
    "\u1d32\u0007\u034d\u0002\u0002\u1d32\u1d33\u0007\u0361\u0002\u0002\u1d33",
    "\u1d7d\tZ\u0002\u0002\u1d34\u1d35\u0007\u008a\u0002\u0002\u1d35\u1d38",
    "\u0005\u02fa\u017e\u0002\u1d36\u1d37\tW\u0002\u0002\u1d37\u1d39\u0005",
    "\u0376\u01bc\u0002\u1d38\u1d36\u0003\u0002\u0002\u0002\u1d38\u1d39\u0003",
    "\u0002\u0002\u0002\u1d39\u1d3b\u0003\u0002\u0002\u0002\u1d3a\u1d3c\u0005",
    "\u02f6\u017c\u0002\u1d3b\u1d3a\u0003\u0002\u0002\u0002\u1d3b\u1d3c\u0003",
    "\u0002\u0002\u0002\u1d3c\u1d7d\u0003\u0002\u0002\u0002\u1d3d\u1d3e\u0007",
    "\u008a\u0002\u0002\u1d3e\u1d3f\t[\u0002\u0002\u1d3f\u1d40\u0007\u01c8",
    "\u0002\u0002\u1d40\u1d7d\u0005\u0340\u01a1\u0002\u1d41\u1d42\u0007\u008a",
    "\u0002\u0002\u1d42\u1d45\u0007\u0209\u0002\u0002\u1d43\u1d44\u0007;",
    "\u0002\u0002\u1d44\u1d46\u0005\u0364\u01b3\u0002\u1d45\u1d43\u0003\u0002",
    "\u0002\u0002\u1d45\u1d46\u0003\u0002\u0002\u0002\u1d46\u1d7d\u0003\u0002",
    "\u0002\u0002\u1d47\u1d48\u0007\u008a\u0002\u0002\u1d48\u1d49\t\\\u0002",
    "\u0002\u1d49\u1d4a\tW\u0002\u0002\u1d4a\u1d4d\u0005\u0342\u01a2\u0002",
    "\u1d4b\u1d4c\tW\u0002\u0002\u1d4c\u1d4e\u0005\u0376\u01bc\u0002\u1d4d",
    "\u1d4b\u0003\u0002\u0002\u0002\u1d4d\u1d4e\u0003\u0002\u0002\u0002\u1d4e",
    "\u1d51\u0003\u0002\u0002\u0002\u1d4f\u1d50\u0007\u00a8\u0002\u0002\u1d50",
    "\u1d52\u0005\u03f8\u01fd\u0002\u1d51\u1d4f\u0003\u0002\u0002\u0002\u1d51",
    "\u1d52\u0003\u0002\u0002\u0002\u1d52\u1d7d\u0003\u0002\u0002\u0002\u1d53",
    "\u1d54\u0007\u008a\u0002\u0002\u1d54\u1d55\u0007\u025d\u0002\u0002\u1d55",
    "\u1d58\u0007\u02e6\u0002\u0002\u1d56\u1d57\tW\u0002\u0002\u1d57\u1d59",
    "\u0005\u0376\u01bc\u0002\u1d58\u1d56\u0003\u0002\u0002\u0002\u1d58\u1d59",
    "\u0003\u0002\u0002\u0002\u1d59\u1d5b\u0003\u0002\u0002\u0002\u1d5a\u1d5c",
    "\u0005\u02f6\u017c\u0002\u1d5b\u1d5a\u0003\u0002\u0002\u0002\u1d5b\u1d5c",
    "\u0003\u0002\u0002\u0002\u1d5c\u1d7d\u0003\u0002\u0002\u0002\u1d5d\u1d5e",
    "\u0007\u008a\u0002\u0002\u1d5e\u1d5f\u0007\u0272\u0002\u0002\u1d5f\u1d64",
    "\u0005\u02fc\u017f\u0002\u1d60\u1d61\u0007\u0364\u0002\u0002\u1d61\u1d63",
    "\u0005\u02fc\u017f\u0002\u1d62\u1d60\u0003\u0002\u0002\u0002\u1d63\u1d66",
    "\u0003\u0002\u0002\u0002\u1d64\u1d62\u0003\u0002\u0002\u0002\u1d64\u1d65",
    "\u0003\u0002\u0002\u0002\u1d65\u1d6a\u0003\u0002\u0002\u0002\u1d66\u1d64",
    "\u0003\u0002\u0002\u0002\u1d67\u1d68\u0007;\u0002\u0002\u1d68\u1d69",
    "\u0007\u0275\u0002\u0002\u1d69\u1d6b\u0005\u0382\u01c2\u0002\u1d6a\u1d67",
    "\u0003\u0002\u0002\u0002\u1d6a\u1d6b\u0003\u0002\u0002\u0002\u1d6b\u1d6c",
    "\u0003\u0002\u0002\u0002\u1d6c\u1d70\u0007Y\u0002\u0002\u1d6d\u1d6e",
    "\u0005\u0382\u01c2\u0002\u1d6e\u1d6f\u0007\u0364\u0002\u0002\u1d6f\u1d71",
    "\u0003\u0002\u0002\u0002\u1d70\u1d6d\u0003\u0002\u0002\u0002\u1d70\u1d71",
    "\u0003\u0002\u0002\u0002\u1d71\u1d72\u0003\u0002\u0002\u0002\u1d72\u1d73",
    "\u0005\u0382\u01c2\u0002\u1d73\u1d7d\u0003\u0002\u0002\u0002\u1d74\u1d75",
    "\u0007\u008a\u0002\u0002\u1d75\u1d76\u0007\u029c\u0002\u0002\u1d76\u1d7a",
    "\u0007\u02b0\u0002\u0002\u1d77\u1d78\u0007;\u0002\u0002\u1d78\u1d79",
    "\u0007\u01c1\u0002\u0002\u1d79\u1d7b\u0007\u0372\u0002\u0002\u1d7a\u1d77",
    "\u0003\u0002\u0002\u0002\u1d7a\u1d7b\u0003\u0002\u0002\u0002\u1d7b\u1d7d",
    "\u0003\u0002\u0002\u0002\u1d7c\u1ce6\u0003\u0002\u0002\u0002\u1d7c\u1ce9",
    "\u0003\u0002\u0002\u0002\u1d7c\u1cfd\u0003\u0002\u0002\u0002\u1d7c\u1d02",
    "\u0003\u0002\u0002\u0002\u1d7c\u1d0f\u0003\u0002\u0002\u0002\u1d7c\u1d16",
    "\u0003\u0002\u0002\u0002\u1d7c\u1d1a\u0003\u0002\u0002\u0002\u1d7c\u1d1e",
    "\u0003\u0002\u0002\u0002\u1d7c\u1d23\u0003\u0002\u0002\u0002\u1d7c\u1d25",
    "\u0003\u0002\u0002\u0002\u1d7c\u1d2e\u0003\u0002\u0002\u0002\u1d7c\u1d34",
    "\u0003\u0002\u0002\u0002\u1d7c\u1d3d\u0003\u0002\u0002\u0002\u1d7c\u1d41",
    "\u0003\u0002\u0002\u0002\u1d7c\u1d47\u0003\u0002\u0002\u0002\u1d7c\u1d53",
    "\u0003\u0002\u0002\u0002\u1d7c\u1d5d\u0003\u0002\u0002\u0002\u1d7c\u1d74",
    "\u0003\u0002\u0002\u0002\u1d7d\u02e9\u0003\u0002\u0002\u0002\u1d7e\u1d81",
    "\t]\u0002\u0002\u1d7f\u1d80\u0007X\u0002\u0002\u1d80\u1d82\u0005\u0386",
    "\u01c4\u0002\u1d81\u1d7f\u0003\u0002\u0002\u0002\u1d81\u1d82\u0003\u0002",
    "\u0002\u0002\u1d82\u1dd5\u0003\u0002\u0002\u0002\u1d83\u1d8a\u0007\u02e6",
    "\u0002\u0002\u1d84\u1d85\u0007\u00e5\u0002\u0002\u1d85\u1d8a\u0007\u012e",
    "\u0002\u0002\u1d86\u1d8a\u0007\u0111\u0002\u0002\u1d87\u1d8a\u0007\u011e",
    "\u0002\u0002\u1d88\u1d8a\u0007\u00e6\u0002\u0002\u1d89\u1d83\u0003\u0002",
    "\u0002\u0002\u1d89\u1d84\u0003\u0002\u0002\u0002\u1d89\u1d86\u0003\u0002",
    "\u0002\u0002\u1d89\u1d87\u0003\u0002\u0002\u0002\u1d89\u1d88\u0003\u0002",
    "\u0002\u0002\u1d8a\u1d8c\u0003\u0002\u0002\u0002\u1d8b\u1d8d\u0005\u02fe",
    "\u0180\u0002\u1d8c\u1d8b\u0003\u0002\u0002\u0002\u1d8c\u1d8d\u0003\u0002",
    "\u0002\u0002\u1d8d\u1d90\u0003\u0002\u0002\u0002\u1d8e\u1d8f\u0007X",
    "\u0002\u0002\u1d8f\u1d91\u0005\u0360\u01b1\u0002\u1d90\u1d8e\u0003\u0002",
    "\u0002\u0002\u1d90\u1d91\u0003\u0002\u0002\u0002\u1d91\u1dd5\u0003\u0002",
    "\u0002\u0002\u1d92\u1d93\u0007\u00c6\u0002\u0002\u1d93\u1dd5\tO\u0002",
    "\u0002\u1d94\u1d97\t^\u0002\u0002\u1d95\u1d96\u0007X\u0002\u0002\u1d96",
    "\u1d98\u0005\u0360\u01b1\u0002\u1d97\u1d95\u0003\u0002\u0002\u0002\u1d97",
    "\u1d98\u0003\u0002\u0002\u0002\u1d98\u1dd5\u0003\u0002\u0002\u0002\u1d99",
    "\u1d9a\u0007\u01c9\u0002\u0002\u1d9a\u1d9b\tW\u0002\u0002\u1d9b\u1d9d",
    "\u0005\u0342\u01a2\u0002\u1d9c\u1d9e\u0005\u02fe\u0180\u0002\u1d9d\u1d9c",
    "\u0003\u0002\u0002\u0002\u1d9d\u1d9e\u0003\u0002\u0002\u0002\u1d9e\u1dd5",
    "\u0003\u0002\u0002\u0002\u1d9f\u1da0\u0007\u00d3\u0002\u0002\u1da0\u1dd5",
    "\u0005\u035e\u01b0\u0002\u1da1\u1da2\u0007\u00f9\u0002\u0002\u1da2\u1da4",
    "\t_\u0002\u0002\u1da3\u1da5\u0005\u0360\u01b1\u0002\u1da4\u1da3\u0003",
    "\u0002\u0002\u0002\u1da4\u1da5\u0003\u0002\u0002\u0002\u1da5\u1dd5\u0003",
    "\u0002\u0002\u0002\u1da6\u1da7\u0007\u0266\u0002\u0002\u1da7\u1da9\u0005",
    "\u0342\u01a2\u0002\u1da8\u1daa\u0005\u033a\u019e\u0002\u1da9\u1da8\u0003",
    "\u0002\u0002\u0002\u1da9\u1daa\u0003\u0002\u0002\u0002\u1daa\u1dd5\u0003",
    "\u0002\u0002\u0002\u1dab\u1dac\u0007!\u0002\u0002\u1dac\u1dad\u0007",
    "\u0096\u0002\u0002\u1dad\u1dd5\u0005\u0342\u01a2\u0002\u1dae\u1daf\u0007",
    "\u0096\u0002\u0002\u1daf\u1db1\u0007\u01f9\u0002\u0002\u1db0\u1db2\u0005",
    "\u02fe\u0180\u0002\u1db1\u1db0\u0003\u0002\u0002\u0002\u1db1\u1db2\u0003",
    "\u0002\u0002\u0002\u1db2\u1db3\u0003\u0002\u0002\u0002\u1db3\u1db4\u0007",
    "X\u0002\u0002\u1db4\u1db6\u0005\u0360\u01b1\u0002\u1db5\u1db7\u0005",
    "\u033a\u019e\u0002\u1db6\u1db5\u0003\u0002\u0002\u0002\u1db6\u1db7\u0003",
    "\u0002\u0002\u0002\u1db7\u1dd5\u0003\u0002\u0002\u0002\u1db8\u1db9\u0007",
    "\u0122\u0002\u0002\u1db9\u1dbe\u0005\u0342\u01a2\u0002\u1dba\u1dbb\u0007",
    "\u0360\u0002\u0002\u1dbb\u1dbc\u0005\u0386\u01c4\u0002\u1dbc\u1dbd\u0007",
    "\u0361\u0002\u0002\u1dbd\u1dbf\u0003\u0002\u0002\u0002\u1dbe\u1dba\u0003",
    "\u0002\u0002\u0002\u1dbe\u1dbf\u0003\u0002\u0002\u0002\u1dbf\u1dd5\u0003",
    "\u0002\u0002\u0002\u1dc0\u1dc2\u0007\u00d2\u0002\u0002\u1dc1\u1dc0\u0003",
    "\u0002\u0002\u0002\u1dc1\u1dc2\u0003\u0002\u0002\u0002\u1dc2\u1dc3\u0003",
    "\u0002\u0002\u0002\u1dc3\u1dc4\t`\u0002\u0002\u1dc4\u1dc5\u0007i\u0002",
    "\u0002\u1dc5\u1dc7\u0005\u0360\u01b1\u0002\u1dc6\u1dc8\u0005\u02fe\u0180",
    "\u0002\u1dc7\u1dc6\u0003\u0002\u0002\u0002\u1dc7\u1dc8\u0003\u0002\u0002",
    "\u0002\u1dc8\u1dd5\u0003\u0002\u0002\u0002\u1dc9\u1dca\u0007\u01cd\u0002",
    "\u0002\u1dca\u1dcb\u0007\u00b5\u0002\u0002\u1dcb\u1dd5\u0005\u0426\u0214",
    "\u0002\u1dcc\u1dcd\u0007\u00c4\u0002\u0002\u1dcd\u1dd5\u0005\u0386\u01c4",
    "\u0002\u1dce\u1dcf\u0007%\u0002\u0002\u1dcf\u1dd3\u0007\u00e0\u0002",
    "\u0002\u1dd0\u1dd3\u0007\u00c1\u0002\u0002\u1dd1\u1dd3\u0007\u0125\u0002",
    "\u0002\u1dd2\u1dce\u0003\u0002\u0002\u0002\u1dd2\u1dd0\u0003\u0002\u0002",
    "\u0002\u1dd2\u1dd1\u0003\u0002\u0002\u0002\u1dd3\u1dd5\u0003\u0002\u0002",
    "\u0002\u1dd4\u1d7e\u0003\u0002\u0002\u0002\u1dd4\u1d89\u0003\u0002\u0002",
    "\u0002\u1dd4\u1d92\u0003\u0002\u0002\u0002\u1dd4\u1d94\u0003\u0002\u0002",
    "\u0002\u1dd4\u1d99\u0003\u0002\u0002\u0002\u1dd4\u1d9f\u0003\u0002\u0002",
    "\u0002\u1dd4\u1da1\u0003\u0002\u0002\u0002\u1dd4\u1da6\u0003\u0002\u0002",
    "\u0002\u1dd4\u1dab\u0003\u0002\u0002\u0002\u1dd4\u1dae\u0003\u0002\u0002",
    "\u0002\u1dd4\u1db8\u0003\u0002\u0002\u0002\u1dd4\u1dc1\u0003\u0002\u0002",
    "\u0002\u1dd4\u1dc9\u0003\u0002\u0002\u0002\u1dd4\u1dcc\u0003\u0002\u0002",
    "\u0002\u1dd4\u1dd2\u0003\u0002\u0002\u0002\u1dd5\u02eb\u0003\u0002\u0002",
    "\u0002\u1dd6\u1dd7\u0005\u02ee\u0178\u0002\u1dd7\u1dda\ta\u0002\u0002",
    "\u1dd8\u1ddb\u0005\u02f2\u017a\u0002\u1dd9\u1ddb\u0005\u03f8\u01fd\u0002",
    "\u1dda\u1dd8\u0003\u0002\u0002\u0002\u1dda\u1dd9\u0003\u0002\u0002\u0002",
    "\u1ddb\u1de0\u0003\u0002\u0002\u0002\u1ddc\u1ddd\u0005\u02ee\u0178\u0002",
    "\u1ddd\u1dde\b\u0177\u0001\u0002\u1dde\u1de0\u0003\u0002\u0002\u0002",
    "\u1ddf\u1dd6\u0003\u0002\u0002\u0002\u1ddf\u1ddc\u0003\u0002\u0002\u0002",
    "\u1de0\u02ed\u0003\u0002\u0002\u0002\u1de1\u1dec\u0006\u0178g\u0002",
    "\u1de2\u1ded\u0007\u037d\u0002\u0002\u1de3\u1ded\u0007\u037e\u0002\u0002",
    "\u1de4\u1de5\u0007\u0366\u0002\u0002\u1de5\u1de7\u0007\u0366\u0002\u0002",
    "\u1de6\u1de4\u0003\u0002\u0002\u0002\u1de6\u1de7\u0003\u0002\u0002\u0002",
    "\u1de7\u1de8\u0003\u0002\u0002\u0002\u1de8\u1dea\tb\u0002\u0002\u1de9",
    "\u1de6\u0003\u0002\u0002\u0002\u1de9\u1dea\u0003\u0002\u0002\u0002\u1dea",
    "\u1deb\u0003\u0002\u0002\u0002\u1deb\u1ded\u0005\u0376\u01bc\u0002\u1dec",
    "\u1de2\u0003\u0002\u0002\u0002\u1dec\u1de3\u0003\u0002\u0002\u0002\u1dec",
    "\u1de9\u0003\u0002\u0002\u0002\u1ded\u1df4\u0003\u0002\u0002\u0002\u1dee",
    "\u1def\u0006\u0178h\u0002\u1def\u1df4\u0005\u02f0\u0179\u0002\u1df0",
    "\u1df1\u0005\u042a\u0216\u0002\u1df1\u1df2\b\u0178\u0001\u0002\u1df2",
    "\u1df4\u0003\u0002\u0002\u0002\u1df3\u1de1\u0003\u0002\u0002\u0002\u1df3",
    "\u1dee\u0003\u0002\u0002\u0002\u1df3\u1df0\u0003\u0002\u0002\u0002\u1df4",
    "\u02ef\u0003\u0002\u0002\u0002\u1df5\u1df9\u0005\u0376\u01bc\u0002\u1df6",
    "\u1df8\u0005\u037c\u01bf\u0002\u1df7\u1df6\u0003\u0002\u0002\u0002\u1df8",
    "\u1dfb\u0003\u0002\u0002\u0002\u1df9\u1df7\u0003\u0002\u0002\u0002\u1df9",
    "\u1dfa\u0003\u0002\u0002\u0002\u1dfa\u02f1\u0003\u0002\u0002\u0002\u1dfb",
    "\u1df9\u0003\u0002\u0002\u0002\u1dfc\u1dfd\u0006\u017ai\u0002\u1dfd",
    "\u1dfe\tc\u0002\u0002\u1dfe\u02f3\u0003\u0002\u0002\u0002\u1dff\u1e00",
    "\u0007\u0019\u0002\u0002\u1e00\u1e0d\u0007\u0088\u0002\u0002\u1e01\u1e0d",
    "\u0007\u033e\u0002\u0002\u1e02\u1e0d\u0007&\u0002\u0002\u1e03\u1e0d",
    "\u0007\u0086\u0002\u0002\u1e04\u1e05\u0007\u0206\u0002\u0002\u1e05\u1e0d",
    "\u0007\u02b0\u0002\u0002\u1e06\u1e07\u0007t\u0002\u0002\u1e07\u1e0d",
    "\u0007\u02b0\u0002\u0002\u1e08\u1e0a\tB\u0002\u0002\u1e09\u1e08\u0003",
    "\u0002\u0002\u0002\u1e09\u1e0a\u0003\u0002\u0002\u0002\u1e0a\u1e0b\u0003",
    "\u0002\u0002\u0002\u1e0b\u1e0d\td\u0002\u0002\u1e0c\u1dff\u0003\u0002",
    "\u0002\u0002\u1e0c\u1e01\u0003\u0002\u0002\u0002\u1e0c\u1e02\u0003\u0002",
    "\u0002\u0002\u1e0c\u1e03\u0003\u0002\u0002\u0002\u1e0c\u1e04\u0003\u0002",
    "\u0002\u0002\u1e0c\u1e06\u0003\u0002\u0002\u0002\u1e0c\u1e09\u0003\u0002",
    "\u0002\u0002\u1e0d\u02f5\u0003\u0002\u0002\u0002\u1e0e\u1e0f\u0007X",
    "\u0002\u0002\u1e0f\u1e13\u0007\u0372\u0002\u0002\u1e10\u1e11\u0007\u00a8",
    "\u0002\u0002\u1e11\u1e13\u0005\u03f8\u01fd\u0002\u1e12\u1e0e\u0003\u0002",
    "\u0002\u0002\u1e12\u1e10\u0003\u0002\u0002\u0002\u1e13\u02f7\u0003\u0002",
    "\u0002\u0002\u1e14\u1e16\u0007\u02b2\u0002\u0002\u1e15\u1e14\u0003\u0002",
    "\u0002\u0002\u1e15\u1e16\u0003\u0002\u0002\u0002\u1e16\u1e17\u0003\u0002",
    "\u0002\u0002\u1e17\u1e26\u0007\u01ed\u0002\u0002\u1e18\u1e19\u0007\u022a",
    "\u0002\u0002\u1e19\u1e26\u0007\u02b0\u0002\u0002\u1e1a\u1e26\u0007\u026b",
    "\u0002\u0002\u1e1b\u1e26\u0007\u02ee\u0002\u0002\u1e1c\u1e1e\u0007\u0205",
    "\u0002\u0002\u1e1d\u1e1c\u0003\u0002\u0002\u0002\u1e1d\u1e1e\u0003\u0002",
    "\u0002\u0002\u1e1e\u1e1f\u0003\u0002\u0002\u0002\u1e1f\u1e26\u0007\u0271",
    "\u0002\u0002\u1e20\u1e26\u0007\u0273\u0002\u0002\u1e21\u1e22\u0007\u029c",
    "\u0002\u0002\u1e22\u1e26\u0007\u020f\u0002\u0002\u1e23\u1e26\u0007\u01b1",
    "\u0002\u0002\u1e24\u1e26\u0007\u01d6\u0002\u0002\u1e25\u1e15\u0003\u0002",
    "\u0002\u0002\u1e25\u1e18\u0003\u0002\u0002\u0002\u1e25\u1e1a\u0003\u0002",
    "\u0002\u0002\u1e25\u1e1b\u0003\u0002\u0002\u0002\u1e25\u1e1d\u0003\u0002",
    "\u0002\u0002\u1e25\u1e20\u0003\u0002\u0002\u0002\u1e25\u1e21\u0003\u0002",
    "\u0002\u0002\u1e25\u1e23\u0003\u0002\u0002\u0002\u1e25\u1e24\u0003\u0002",
    "\u0002\u0002\u1e26\u02f9\u0003\u0002\u0002\u0002\u1e27\u1e30\u0007\u01f3",
    "\u0002\u0002\u1e28\u1e29\u0007\u0096\u0002\u0002\u1e29\u1e30\u0007\u02b0",
    "\u0002\u0002\u1e2a\u1e2c\u0007\u0205\u0002\u0002\u1e2b\u1e2a\u0003\u0002",
    "\u0002\u0002\u1e2b\u1e2c\u0003\u0002\u0002\u0002\u1e2c\u1e2d\u0003\u0002",
    "\u0002\u0002\u1e2d\u1e30\u0007\u02e6\u0002\u0002\u1e2e\u1e30\u0007\u02c1",
    "\u0002\u0002\u1e2f\u1e27\u0003\u0002\u0002\u0002\u1e2f\u1e28\u0003\u0002",
    "\u0002\u0002\u1e2f\u1e2b\u0003\u0002\u0002\u0002\u1e2f\u1e2e\u0003\u0002",
    "\u0002\u0002\u1e30\u02fb\u0003\u0002\u0002\u0002\u1e31\u1e3e\u0007\t",
    "\u0002\u0002\u1e32\u1e33\u0007\u01b9\u0002\u0002\u1e33\u1e3e\u0007\u021a",
    "\u0002\u0002\u1e34\u1e35\u0007\u01d5\u0002\u0002\u1e35\u1e3e\u0007\u02ba",
    "\u0002\u0002\u1e36\u1e3e\u0007\u01d8\u0002\u0002\u1e37\u1e3e\u0007\u021c",
    "\u0002\u0002\u1e38\u1e3e\u0007\u0329\u0002\u0002\u1e39\u1e3a\u0007\u0262",
    "\u0002\u0002\u1e3a\u1e3e\u0007\u01fc\u0002\u0002\u1e3b\u1e3e\u0007\u02a3",
    "\u0002\u0002\u1e3c\u1e3e\u0007\u02b9\u0002\u0002\u1e3d\u1e31\u0003\u0002",
    "\u0002\u0002\u1e3d\u1e32\u0003\u0002\u0002\u0002\u1e3d\u1e34\u0003\u0002",
    "\u0002\u0002\u1e3d\u1e36\u0003\u0002\u0002\u0002\u1e3d\u1e37\u0003\u0002",
    "\u0002\u0002\u1e3d\u1e38\u0003\u0002\u0002\u0002\u1e3d\u1e39\u0003\u0002",
    "\u0002\u0002\u1e3d\u1e3b\u0003\u0002\u0002\u0002\u1e3d\u1e3c\u0003\u0002",
    "\u0002\u0002\u1e3e\u02fd\u0003\u0002\u0002\u0002\u1e3f\u1e40\tW\u0002",
    "\u0002\u1e40\u1e41\u0005\u0424\u0213\u0002\u1e41\u02ff\u0003\u0002\u0002",
    "\u0002\u1e42\u1e43\u0007\b\u0002\u0002\u1e43\u1e46\te\u0002\u0002\u1e44",
    "\u1e47\u0005\u037e\u01c0\u0002\u1e45\u1e47\u0005\u0386\u01c4\u0002\u1e46",
    "\u1e44\u0003\u0002\u0002\u0002\u1e46\u1e45\u0003\u0002\u0002\u0002\u1e47",
    "\u0301\u0003\u0002\u0002\u0002\u1e48\u1e49\u0007\u0226\u0002\u0002\u1e49",
    "\u1e4a\te\u0002\u0002\u1e4a\u0303\u0003\u0002\u0002\u0002\u1e4b\u1e4c",
    "\u0007\u01b7\u0002\u0002\u1e4c\u1e4d\u0007\u0372\u0002\u0002\u1e4d\u0305",
    "\u0003\u0002\u0002\u0002\u1e4e\u1e4f\u0007\u01bd\u0002\u0002\u1e4f\u1e50",
    "\u0007H\u0002\u0002\u1e50\u1e55\u0005\u031a\u018e\u0002\u1e51\u1e52",
    "\u0007\u0364\u0002\u0002\u1e52\u1e54\u0005\u031a\u018e\u0002\u1e53\u1e51",
    "\u0003\u0002\u0002\u0002\u1e54\u1e57\u0003\u0002\u0002\u0002\u1e55\u1e53",
    "\u0003\u0002\u0002\u0002\u1e55\u1e56\u0003\u0002\u0002\u0002\u1e56\u1e5f",
    "\u0003\u0002\u0002\u0002\u1e57\u1e55\u0003\u0002\u0002\u0002\u1e58\u1e59",
    "\u0007r\u0002\u0002\u1e59\u1e5c\u0007\u0360\u0002\u0002\u1e5a\u1e5d",
    "\u0005\u03a4\u01d3\u0002\u1e5b\u1e5d\u0007\t\u0002\u0002\u1e5c\u1e5a",
    "\u0003\u0002\u0002\u0002\u1e5c\u1e5b\u0003\u0002\u0002\u0002\u1e5d\u1e5e",
    "\u0003\u0002\u0002\u0002\u1e5e\u1e60\u0007\u0361\u0002\u0002\u1e5f\u1e58",
    "\u0003\u0002\u0002\u0002\u1e5f\u1e60\u0003\u0002\u0002\u0002\u1e60\u1e61",
    "\u0003\u0002\u0002\u0002\u1e61\u1e62\u0007G\u0002\u0002\u1e62\u1e63",
    "\u0005\u0376\u01bc\u0002\u1e63\u0307\u0003\u0002\u0002\u0002\u1e64\u1e66",
    "\u0007\u0202\u0002\u0002\u1e65\u1e67\tS\u0002\u0002\u1e66\u1e65\u0003",
    "\u0002\u0002\u0002\u1e66\u1e67\u0003\u0002\u0002\u0002\u1e67\u1e68\u0003",
    "\u0002\u0002\u0002\u1e68\u1e6d\u0005\u031c\u018f\u0002\u1e69\u1e6a\u0007",
    "\u0364\u0002\u0002\u1e6a\u1e6c\u0005\u031c\u018f\u0002\u1e6b\u1e69\u0003",
    "\u0002\u0002\u0002\u1e6c\u1e6f\u0003\u0002\u0002\u0002\u1e6d\u1e6b\u0003",
    "\u0002\u0002\u0002\u1e6d\u1e6e\u0003\u0002\u0002\u0002\u1e6e\u0309\u0003",
    "\u0002\u0002\u0002\u1e6f\u1e6d\u0003\u0002\u0002\u0002\u1e70\u1e72\u0007",
    "T\u0002\u0002\u1e71\u1e73\tf\u0002\u0002\u1e72\u1e71\u0003\u0002\u0002",
    "\u0002\u1e72\u1e73\u0003\u0002\u0002\u0002\u1e73\u1e75\u0003\u0002\u0002",
    "\u0002\u1e74\u1e76\u0005\u0382\u01c2\u0002\u1e75\u1e74\u0003\u0002\u0002",
    "\u0002\u1e76\u1e77\u0003\u0002\u0002\u0002\u1e77\u1e75\u0003\u0002\u0002",
    "\u0002\u1e77\u1e78\u0003\u0002\u0002\u0002\u1e78\u030b\u0003\u0002\u0002",
    "\u0002\u1e79\u1e7a\u0007\\\u0002\u0002\u1e7a\u1e7b\u0007H\u0002\u0002",
    "\u1e7b\u1e7c\u0007N\u0002\u0002\u1e7c\u1e7d\u0007\u01bd\u0002\u0002",
    "\u1e7d\u1e82\u0005\u0320\u0191\u0002\u1e7e\u1e7f\u0007\u0364\u0002\u0002",
    "\u1e7f\u1e81\u0005\u0320\u0191\u0002\u1e80\u1e7e\u0003\u0002\u0002\u0002",
    "\u1e81\u1e84\u0003\u0002\u0002\u0002\u1e82\u1e80\u0003\u0002\u0002\u0002",
    "\u1e82\u1e83\u0003\u0002\u0002\u0002\u1e83\u030d\u0003\u0002\u0002\u0002",
    "\u1e84\u1e82\u0003\u0002\u0002\u0002\u1e85\u1e86\u0007\u028a\u0002\u0002",
    "\u1e86\u1e87\u0007\u0275\u0002\u0002\u1e87\u1e88\u0007\u01bd\u0002\u0002",
    "\u1e88\u030f\u0003\u0002\u0002\u0002\u1e89\u1e8a\u0007\u02ec\u0002\u0002",
    "\u1e8a\u0311\u0003\u0002\u0002\u0002\u1e8b\u1e8c\u0006\u018aj\u0002",
    "\u1e8c\u1e8d\u0007\u00ce\u0002\u0002\u1e8d\u1e8e\u0007\u00fa\u0002\u0002",
    "\u1e8e\u1e95\u0005\u038a\u01c6\u0002\u1e8f\u1e90\u0006\u018ak\u0002",
    "\u1e90\u1e91\u0007\u00ca\u0002\u0002\u1e91\u1e92\u0005\u0314\u018b\u0002",
    "\u1e92\u1e93\b\u018a\u0001\u0002\u1e93\u1e95\u0003\u0002\u0002\u0002",
    "\u1e94\u1e8b\u0003\u0002\u0002\u0002\u1e94\u1e8f\u0003\u0002\u0002\u0002",
    "\u1e95\u0313\u0003\u0002\u0002\u0002\u1e96\u1e98\u000b\u0002\u0002\u0002",
    "\u1e97\u1e99\u000b\u0002\u0002\u0002\u1e98\u1e97\u0003\u0002\u0002\u0002",
    "\u1e98\u1e99\u0003\u0002\u0002\u0002\u1e99\u1e9b\u0003\u0002\u0002\u0002",
    "\u1e9a\u1e9c\u000b\u0002\u0002\u0002\u1e9b\u1e9a\u0003\u0002\u0002\u0002",
    "\u1e9b\u1e9c\u0003\u0002\u0002\u0002\u1e9c\u0315\u0003\u0002\u0002\u0002",
    "\u1e9d\u1e9e\u0007\u00ce\u0002\u0002\u1e9e\u1e9f\u0007\u00fb\u0002\u0002",
    "\u1e9f\u1ea0\u0005\u0318\u018d\u0002\u1ea0\u0317\u0003\u0002\u0002\u0002",
    "\u1ea1\u1ea6\u0005\u0376\u01bc\u0002\u1ea2\u1ea3\u0005\u042a\u0216\u0002",
    "\u1ea3\u1ea4\b\u018d\u0001\u0002\u1ea4\u1ea6\u0003\u0002\u0002\u0002",
    "\u1ea5\u1ea1\u0003\u0002\u0002\u0002\u1ea5\u1ea2\u0003\u0002\u0002\u0002",
    "\u1ea6\u0319\u0003\u0002\u0002\u0002\u1ea7\u1eaf\u0005\u0342\u01a2\u0002",
    "\u1ea8\u1eaa\t\u0019\u0002\u0002\u1ea9\u1ea8\u0003\u0002\u0002\u0002",
    "\u1ea9\u1eaa\u0003\u0002\u0002\u0002\u1eaa\u1eab\u0003\u0002\u0002\u0002",
    "\u1eab\u1eac\u0007\u0360\u0002\u0002\u1eac\u1ead\u0005\u03a4\u01d3\u0002",
    "\u1ead\u1eae\u0007\u0361\u0002\u0002\u1eae\u1eb0\u0003\u0002\u0002\u0002",
    "\u1eaf\u1ea9\u0003\u0002\u0002\u0002\u1eaf\u1eb0\u0003\u0002\u0002\u0002",
    "\u1eb0\u031b\u0003\u0002\u0002\u0002\u1eb1\u1ec4\u0007\u01df\u0002\u0002",
    "\u1eb2\u1ec4\u0007\u020f\u0002\u0002\u1eb3\u1eb5\tg\u0002\u0002\u1eb4",
    "\u1eb3\u0003\u0002\u0002\u0002\u1eb4\u1eb5\u0003\u0002\u0002\u0002\u1eb5",
    "\u1eb6\u0003\u0002\u0002\u0002\u1eb6\u1ec4\u0007\u0229\u0002\u0002\u1eb7",
    "\u1ec4\u0007\u025e\u0002\u0002\u1eb8\u1ec4\u0007\u02ee\u0002\u0002\u1eb9",
    "\u1eba\u0007\u0275\u0002\u0002\u1eba\u1ec4\u0007\u01bd\u0002\u0002\u1ebb",
    "\u1ec4\u0007\u02b0\u0002\u0002\u1ebc\u1ec4\u0007\u02cc\u0002\u0002\u1ebd",
    "\u1ec1\u0007\u02e6\u0002\u0002\u1ebe\u1ebf\u0007\u00aa\u0002\u0002\u1ebf",
    "\u1ec0\u0007w\u0002\u0002\u1ec0\u1ec2\u0007]\u0002\u0002\u1ec1\u1ebe",
    "\u0003\u0002\u0002\u0002\u1ec1\u1ec2\u0003\u0002\u0002\u0002\u1ec2\u1ec4",
    "\u0003\u0002\u0002\u0002\u1ec3\u1eb1\u0003\u0002\u0002\u0002\u1ec3\u1eb2",
    "\u0003\u0002\u0002\u0002\u1ec3\u1eb4\u0003\u0002\u0002\u0002\u1ec3\u1eb7",
    "\u0003\u0002\u0002\u0002\u1ec3\u1eb8\u0003\u0002\u0002\u0002\u1ec3\u1eb9",
    "\u0003\u0002\u0002\u0002\u1ec3\u1ebb\u0003\u0002\u0002\u0002\u1ec3\u1ebc",
    "\u0003\u0002\u0002\u0002\u1ec3\u1ebd\u0003\u0002\u0002\u0002\u1ec4\u1ed0",
    "\u0003\u0002\u0002\u0002\u1ec5\u1ec6\u0007\u027b\u0002\u0002\u1ec6\u1ec8",
    "\u0007\u0229\u0002\u0002\u1ec7\u1ec9\u0005\u0230\u0119\u0002\u1ec8\u1ec7",
    "\u0003\u0002\u0002\u0002\u1ec8\u1ec9\u0003\u0002\u0002\u0002\u1ec9\u1ed0",
    "\u0003\u0002\u0002\u0002\u1eca\u1ecb\u0007\u02e6\u0002\u0002\u1ecb\u1ecd",
    "\u0005\u03b0\u01d9\u0002\u1ecc\u1ece\u0005\u031e\u0190\u0002\u1ecd\u1ecc",
    "\u0003\u0002\u0002\u0002\u1ecd\u1ece\u0003\u0002\u0002\u0002\u1ece\u1ed0",
    "\u0003\u0002\u0002\u0002\u1ecf\u1ec3\u0003\u0002\u0002\u0002\u1ecf\u1ec5",
    "\u0003\u0002\u0002\u0002\u1ecf\u1eca\u0003\u0002\u0002\u0002\u1ed0\u031d",
    "\u0003\u0002\u0002\u0002\u1ed1\u1ed2\u0007\u00aa\u0002\u0002\u1ed2\u1ed3",
    "\u0007w\u0002\u0002\u1ed3\u1ed7\u0007]\u0002\u0002\u1ed4\u1ed5\u0007",
    ";\u0002\u0002\u1ed5\u1ed7\u0007\u01f8\u0002\u0002\u1ed6\u1ed1\u0003",
    "\u0002\u0002\u0002\u1ed6\u1ed4\u0003\u0002\u0002\u0002\u1ed7\u031f\u0003",
    "\u0002\u0002\u0002\u1ed8\u1ee0\u0005\u0342\u01a2\u0002\u1ed9\u1eda\u0007",
    "r\u0002\u0002\u1eda\u1edd\u0007\u0360\u0002\u0002\u1edb\u1ede\u0005",
    "\u03a4\u01d3\u0002\u1edc\u1ede\u0007\t\u0002\u0002\u1edd\u1edb\u0003",
    "\u0002\u0002\u0002\u1edd\u1edc\u0003\u0002\u0002\u0002\u1ede\u1edf\u0003",
    "\u0002\u0002\u0002\u1edf\u1ee1\u0007\u0361\u0002\u0002\u1ee0\u1ed9\u0003",
    "\u0002\u0002\u0002\u1ee0\u1ee1\u0003\u0002\u0002\u0002\u1ee1\u1ee9\u0003",
    "\u0002\u0002\u0002\u1ee2\u1ee4\t\u0019\u0002\u0002\u1ee3\u1ee2\u0003",
    "\u0002\u0002\u0002\u1ee3\u1ee4\u0003\u0002\u0002\u0002\u1ee4\u1ee5\u0003",
    "\u0002\u0002\u0002\u1ee5\u1ee6\u0007\u0360\u0002\u0002\u1ee6\u1ee7\u0005",
    "\u03a4\u01d3\u0002\u1ee7\u1ee8\u0007\u0361\u0002\u0002\u1ee8\u1eea\u0003",
    "\u0002\u0002\u0002\u1ee9\u1ee3\u0003\u0002\u0002\u0002\u1ee9\u1eea\u0003",
    "\u0002\u0002\u0002\u1eea\u1eed\u0003\u0002\u0002\u0002\u1eeb\u1eec\u0007",
    "F\u0002\u0002\u1eec\u1eee\u0007\u0223\u0002\u0002\u1eed\u1eeb\u0003",
    "\u0002\u0002\u0002\u1eed\u1eee\u0003\u0002\u0002\u0002\u1eee\u0321\u0003",
    "\u0002\u0002\u0002\u1eef\u1ef0\u0006\u0192l\u0002\u1ef0\u1ef5\u0005",
    "\u0324\u0193\u0002\u1ef1\u1ef2\u0006\u0192m\u0002\u1ef2\u1ef3\th\u0002",
    "\u0002\u1ef3\u1ef5\u0005\u032a\u0196\u0002\u1ef4\u1eef\u0003\u0002\u0002",
    "\u0002\u1ef4\u1ef1\u0003\u0002\u0002\u0002\u1ef5\u0323\u0003\u0002\u0002",
    "\u0002\u1ef6\u1ef9\u0005\u0326\u0194\u0002\u1ef7\u1ef9\u0005\u0328\u0195",
    "\u0002\u1ef8\u1ef6\u0003\u0002\u0002\u0002\u1ef8\u1ef7\u0003\u0002\u0002",
    "\u0002\u1ef9\u0325\u0003\u0002\u0002\u0002\u1efa\u1efb\ti\u0002\u0002",
    "\u1efb\u1efe\u0005\u0342\u01a2\u0002\u1efc\u1eff\u0005\u0376\u01bc\u0002",
    "\u1efd\u1eff\u0007\u0372\u0002\u0002\u1efe\u1efc\u0003\u0002\u0002\u0002",
    "\u1efe\u1efd\u0003\u0002\u0002\u0002\u1efe\u1eff\u0003\u0002\u0002\u0002",
    "\u1eff\u0327\u0003\u0002\u0002\u0002\u1f00\u1f04\ti\u0002\u0002\u1f01",
    "\u1f02\tj\u0002\u0002\u1f02\u1f03\u0007\u0355\u0002\u0002\u1f03\u1f05",
    "\tk\u0002\u0002\u1f04\u1f01\u0003\u0002\u0002\u0002\u1f04\u1f05\u0003",
    "\u0002\u0002\u0002\u1f05\u1f06\u0003\u0002\u0002\u0002\u1f06\u1f07\u0005",
    "\u0330\u0199\u0002\u1f07\u0329\u0003\u0002\u0002\u0002\u1f08\u1f0d\u0007",
    "%\u0002\u0002\u1f09\u1f0e\u0007\u00df\u0002\u0002\u1f0a\u1f0c\u0007",
    "\u01f9\u0002\u0002\u1f0b\u1f0a\u0003\u0002\u0002\u0002\u1f0b\u1f0c\u0003",
    "\u0002\u0002\u0002\u1f0c\u1f0e\u0003\u0002\u0002\u0002\u1f0d\u1f09\u0003",
    "\u0002\u0002\u0002\u1f0d\u1f0b\u0003\u0002\u0002\u0002\u1f0e\u1f0f\u0003",
    "\u0002\u0002\u0002\u1f0f\u1f37\u0005\u0424\u0213\u0002\u1f10\u1f12\u0007",
    "H\u0002\u0002\u1f11\u1f13\u0007\u00d2\u0002\u0002\u1f12\u1f11\u0003",
    "\u0002\u0002\u0002\u1f12\u1f13\u0003\u0002\u0002\u0002\u1f13\u1f14\u0003",
    "\u0002\u0002\u0002\u1f14\u1f15\u0005\u0376\u01bc\u0002\u1f15\u1f16\u0007",
    "i\u0002\u0002\u1f16\u1f17\u0005\u0342\u01a2\u0002\u1f17\u1f37\u0003",
    "\u0002\u0002\u0002\u1f18\u1f1a\u0007\u0206\u0002\u0002\u1f19\u1f1b\u0007",
    "\u01f9\u0002\u0002\u1f1a\u1f19\u0003\u0002\u0002\u0002\u1f1a\u1f1b\u0003",
    "\u0002\u0002\u0002\u1f1b\u1f1e\u0003\u0002\u0002\u0002\u1f1c\u1f1f\u0005",
    "\u0354\u01ab\u0002\u1f1d\u1f1f\u0005\u0422\u0212\u0002\u1f1e\u1f1c\u0003",
    "\u0002\u0002\u0002\u1f1e\u1f1d\u0003\u0002\u0002\u0002\u1f1f\u1f37\u0003",
    "\u0002\u0002\u0002\u1f20\u1f21\u0007\u00f9\u0002\u0002\u1f21\u1f23\t",
    "l\u0002\u0002\u1f22\u1f24\u0007\u01f9\u0002\u0002\u1f23\u1f22\u0003",
    "\u0002\u0002\u0002\u1f23\u1f24\u0003\u0002\u0002\u0002\u1f24\u1f25\u0003",
    "\u0002\u0002\u0002\u1f25\u1f37\u0005\u0340\u01a1\u0002\u1f26\u1f27\t",
    "m\u0002\u0002\u1f27\u1f37\u0005\u0376\u01bc\u0002\u1f28\u1f2a\tn\u0002",
    "\u0002\u1f29\u1f28\u0003\u0002\u0002\u0002\u1f29\u1f2a\u0003\u0002\u0002",
    "\u0002\u1f2a\u1f2d\u0003\u0002\u0002\u0002\u1f2b\u1f2e\u0005\u034e\u01a8",
    "\u0002\u1f2c\u1f2e\u0005\u0386\u01c4\u0002\u1f2d\u1f2b\u0003\u0002\u0002",
    "\u0002\u1f2d\u1f2c\u0003\u0002\u0002\u0002\u1f2e\u1f30\u0003\u0002\u0002",
    "\u0002\u1f2f\u1f31\u0005\u033a\u019e\u0002\u1f30\u1f2f\u0003\u0002\u0002",
    "\u0002\u1f30\u1f31\u0003\u0002\u0002\u0002\u1f31\u1f37\u0003\u0002\u0002",
    "\u0002\u1f32\u1f34\tn\u0002\u0002\u1f33\u1f32\u0003\u0002\u0002\u0002",
    "\u1f33\u1f34\u0003\u0002\u0002\u0002\u1f34\u1f35\u0003\u0002\u0002\u0002",
    "\u1f35\u1f37\u0005\u0376\u01bc\u0002\u1f36\u1f08\u0003\u0002\u0002\u0002",
    "\u1f36\u1f10\u0003\u0002\u0002\u0002\u1f36\u1f18\u0003\u0002\u0002\u0002",
    "\u1f36\u1f20\u0003\u0002\u0002\u0002\u1f36\u1f26\u0003\u0002\u0002\u0002",
    "\u1f36\u1f29\u0003\u0002\u0002\u0002\u1f36\u1f33\u0003\u0002\u0002\u0002",
    "\u1f37\u032b\u0003\u0002\u0002\u0002\u1f38\u1f39\u0007\u020d\u0002\u0002",
    "\u1f39\u1f3a\u0007\u0372\u0002\u0002\u1f3a\u032d\u0003\u0002\u0002\u0002",
    "\u1f3b\u1f3c\u0007\u00a4\u0002\u0002\u1f3c\u1f3d\u0005\u0424\u0213\u0002",
    "\u1f3d\u032f\u0003\u0002\u0002\u0002\u1f3e\u1f44\u0005\u0148\u00a5\u0002",
    "\u1f3f\u1f44\u0005\u0126\u0094\u0002\u1f40\u1f44\u0005\u012c\u0097\u0002",
    "\u1f41\u1f44\u0005\u0146\u00a4\u0002\u1f42\u1f44\u0005\u014a\u00a6\u0002",
    "\u1f43\u1f3e\u0003\u0002\u0002\u0002\u1f43\u1f3f\u0003\u0002\u0002\u0002",
    "\u1f43\u1f40\u0003\u0002\u0002\u0002\u1f43\u1f41\u0003\u0002\u0002\u0002",
    "\u1f43\u1f42\u0003\u0002\u0002\u0002\u1f44\u1f49\u0003\u0002\u0002\u0002",
    "\u1f45\u1f46\u0007;\u0002\u0002\u1f46\u1f47\u0007\u01d2\u0002\u0002",
    "\u1f47\u1f49\u0005\u0376\u01bc\u0002\u1f48\u1f43\u0003\u0002\u0002\u0002",
    "\u1f48\u1f45\u0003\u0002\u0002\u0002\u1f49\u0331\u0003\u0002\u0002\u0002",
    "\u1f4a\u1f4b\u0007\u00f4\u0002\u0002\u1f4b\u1f4c\u0007\u0013\u0002\u0002",
    "\u1f4c\u1f6d\u0005z>\u0002\u1f4d\u1f4e\u0007\u00f4\u0002\u0002\u1f4e",
    "\u1f4f\u0007\u0013\u0002\u0002\u1f4f\u1f55\u0007v\u0002\u0002\u1f50",
    "\u1f56\u0005z>\u0002\u1f51\u1f52\u0007\u0360\u0002\u0002\u1f52\u1f53",
    "\u0005\u03a4\u01d3\u0002\u1f53\u1f54\u0007\u0361\u0002\u0002\u1f54\u1f56",
    "\u0003\u0002\u0002\u0002\u1f55\u1f50\u0003\u0002\u0002\u0002\u1f55\u1f51",
    "\u0003\u0002\u0002\u0002\u1f56\u1f5d\u0003\u0002\u0002\u0002\u1f57\u1f58",
    "\u0007M\u0002\u0002\u1f58\u1f59\u0007\u0360\u0002\u0002\u1f59\u1f5e",
    "\u0005\u0390\u01c9\u0002\u1f5a\u1f5b\u0005\u03c8\u01e5\u0002\u1f5b\u1f5c",
    "\u0007\u0361\u0002\u0002\u1f5c\u1f5e\u0003\u0002\u0002\u0002\u1f5d\u1f57",
    "\u0003\u0002\u0002\u0002\u1f5d\u1f5a\u0003\u0002\u0002\u0002\u1f5d\u1f5e",
    "\u0003\u0002\u0002\u0002\u1f5e\u1f6a\u0003\u0002\u0002\u0002\u1f5f\u1f60",
    "\u0007\u0360\u0002\u0002\u1f60\u1f65\u0005\u0336\u019c\u0002\u1f61\u1f62",
    "\u0007\u0364\u0002\u0002\u1f62\u1f64\u0005\u0336\u019c\u0002\u1f63\u1f61",
    "\u0003\u0002\u0002\u0002\u1f64\u1f67\u0003\u0002\u0002\u0002\u1f65\u1f63",
    "\u0003\u0002\u0002\u0002\u1f65\u1f66\u0003\u0002\u0002\u0002\u1f66\u1f68",
    "\u0003\u0002\u0002\u0002\u1f67\u1f65\u0003\u0002\u0002\u0002\u1f68\u1f69",
    "\u0007\u0361\u0002\u0002\u1f69\u1f6b\u0003\u0002\u0002\u0002\u1f6a\u1f5f",
    "\u0003\u0002\u0002\u0002\u1f6a\u1f6b\u0003\u0002\u0002\u0002\u1f6b\u1f6d",
    "\u0003\u0002\u0002\u0002\u1f6c\u1f4a\u0003\u0002\u0002\u0002\u1f6c\u1f4d",
    "\u0003\u0002\u0002\u0002\u1f6d\u0333\u0003\u0002\u0002\u0002\u1f6e\u1f6f",
    "\u0005\u0376\u01bc\u0002\u1f6f\u1f70\u0005\u0402\u0202\u0002\u1f70\u1f71",
    "\u0005\u03f8\u01fd\u0002\u1f71\u0335\u0003\u0002\u0002\u0002\u1f72\u1f73",
    "\u0007r\u0002\u0002\u1f73\u1f74\u0005\u0376\u01bc\u0002\u1f74\u1f75",
    "\u0007\u00a6\u0002\u0002\u1f75\u1f76\u0007\u0224\u0002\u0002\u1f76\u1f77",
    "\u0007\u02be\u0002\u0002\u1f77\u1f78\u0007\u0360\u0002\u0002\u1f78\u1f7d",
    "\u0005\u00c6d\u0002\u1f79\u1f7a\u0007\u0364\u0002\u0002\u1f7a\u1f7c",
    "\u0005\u00c6d\u0002\u1f7b\u1f79\u0003\u0002\u0002\u0002\u1f7c\u1f7f",
    "\u0003\u0002\u0002\u0002\u1f7d\u1f7b\u0003\u0002\u0002\u0002\u1f7d\u1f7e",
    "\u0003\u0002\u0002\u0002\u1f7e\u1f80\u0003\u0002\u0002\u0002\u1f7f\u1f7d",
    "\u0003\u0002\u0002\u0002\u1f80\u1f82\u0007\u0361\u0002\u0002\u1f81\u1f83",
    "\u0005\u00a4S\u0002\u1f82\u1f81\u0003\u0002\u0002\u0002\u1f82\u1f83",
    "\u0003\u0002\u0002\u0002\u1f83\u0337\u0003\u0002\u0002\u0002\u1f84\u1f86",
    "\u0005\u033a\u019e\u0002\u1f85\u1f87\u0005\u00a4S\u0002\u1f86\u1f85",
    "\u0003\u0002\u0002\u0002\u1f86\u1f87\u0003\u0002\u0002\u0002\u1f87\u0339",
    "\u0003\u0002\u0002\u0002\u1f88\u1f8b\u0005\u033c\u019f\u0002\u1f89\u1f8b",
    "\u0005\u033e\u01a0\u0002\u1f8a\u1f88\u0003\u0002\u0002\u0002\u1f8a\u1f89",
    "\u0003\u0002\u0002\u0002\u1f8b\u033b\u0003\u0002\u0002\u0002\u1f8c\u1f8d",
    "\u0007r\u0002\u0002\u1f8d\u1f8e\u0005\u03a4\u01d3\u0002\u1f8e\u033d",
    "\u0003\u0002\u0002\u0002\u1f8f\u1f90\u0007r\u0002\u0002\u1f90\u1f91",
    "\u0007\u0360\u0002\u0002\u1f91\u1f92\u0005P)\u0002\u1f92\u1f93\u0007",
    "\u0361\u0002\u0002\u1f93\u033f\u0003\u0002\u0002\u0002\u1f94\u1f98\u0005",
    "\u0376\u01bc\u0002\u1f95\u1f99\u0007\u0379\u0002\u0002\u1f96\u1f97\u0007",
    "\u035d\u0002\u0002\u1f97\u1f99\u0005\u0376\u01bc\u0002\u1f98\u1f95\u0003",
    "\u0002\u0002\u0002\u1f98\u1f96\u0003\u0002\u0002\u0002\u1f98\u1f99\u0003",
    "\u0002\u0002\u0002\u1f99\u1f9f\u0003\u0002\u0002\u0002\u1f9a\u1f9b\u0005",
    "\u0376\u01bc\u0002\u1f9b\u1f9c\u0007\u035d\u0002\u0002\u1f9c\u1f9d\b",
    "\u01a1\u0001\u0002\u1f9d\u1f9f\u0003\u0002\u0002\u0002\u1f9e\u1f94\u0003",
    "\u0002\u0002\u0002\u1f9e\u1f9a\u0003\u0002\u0002\u0002\u1f9f\u0341\u0003",
    "\u0002\u0002\u0002\u1fa0\u1fa5\u0005\u0340\u01a1\u0002\u1fa1\u1fa2\u0005",
    "\u042a\u0216\u0002\u1fa2\u1fa3\b\u01a2\u0001\u0002\u1fa3\u1fa5\u0003",
    "\u0002\u0002\u0002\u1fa4\u1fa0\u0003\u0002\u0002\u0002\u1fa4\u1fa1\u0003",
    "\u0002\u0002\u0002\u1fa5\u0343\u0003\u0002\u0002\u0002\u1fa6\u1fab\u0005",
    "\u0340\u01a1\u0002\u1fa7\u1fa8\u0005\u042a\u0216\u0002\u1fa8\u1fa9\b",
    "\u01a3\u0001\u0002\u1fa9\u1fab\u0003\u0002\u0002\u0002\u1faa\u1fa6\u0003",
    "\u0002\u0002\u0002\u1faa\u1fa7\u0003\u0002\u0002\u0002\u1fab\u0345\u0003",
    "\u0002\u0002\u0002\u1fac\u1fb1\u0005\u0376\u01bc\u0002\u1fad\u1faf\u0005",
    "\u037c\u01bf\u0002\u1fae\u1fb0\u0005\u037c\u01bf\u0002\u1faf\u1fae\u0003",
    "\u0002\u0002\u0002\u1faf\u1fb0\u0003\u0002\u0002\u0002\u1fb0\u1fb2\u0003",
    "\u0002\u0002\u0002\u1fb1\u1fad\u0003\u0002\u0002\u0002\u1fb1\u1fb2\u0003",
    "\u0002\u0002\u0002\u1fb2\u1fbe\u0003\u0002\u0002\u0002\u1fb3\u1fb7\u0005",
    "\u0376\u01bc\u0002\u1fb4\u1fb6\u0005\u037c\u01bf\u0002\u1fb5\u1fb4\u0003",
    "\u0002\u0002\u0002\u1fb6\u1fb9\u0003\u0002\u0002\u0002\u1fb7\u1fb5\u0003",
    "\u0002\u0002\u0002\u1fb7\u1fb8\u0003\u0002\u0002\u0002\u1fb8\u1fba\u0003",
    "\u0002\u0002\u0002\u1fb9\u1fb7\u0003\u0002\u0002\u0002\u1fba\u1fbb\u0007",
    "\u035d\u0002\u0002\u1fbb\u1fbc\b\u01a4\u0001\u0002\u1fbc\u1fbe\u0003",
    "\u0002\u0002\u0002\u1fbd\u1fac\u0003\u0002\u0002\u0002\u1fbd\u1fb3\u0003",
    "\u0002\u0002\u0002\u1fbe\u0347\u0003\u0002\u0002\u0002\u1fbf\u1fc4\u0005",
    "\u0376\u01bc\u0002\u1fc0\u1fc1\u0005\u042a\u0216\u0002\u1fc1\u1fc2\b",
    "\u01a5\u0001\u0002\u1fc2\u1fc4\u0003\u0002\u0002\u0002\u1fc3\u1fbf\u0003",
    "\u0002\u0002\u0002\u1fc3\u1fc0\u0003\u0002\u0002\u0002\u1fc4\u0349\u0003",
    "\u0002\u0002\u0002\u1fc5\u1fca\u0005\u034c\u01a7\u0002\u1fc6\u1fc7\u0005",
    "\u042a\u0216\u0002\u1fc7\u1fc8\b\u01a6\u0001\u0002\u1fc8\u1fca\u0003",
    "\u0002\u0002\u0002\u1fc9\u1fc5\u0003\u0002\u0002\u0002\u1fc9\u1fc6\u0003",
    "\u0002\u0002\u0002\u1fca\u034b\u0003\u0002\u0002\u0002\u1fcb\u1fd0\u0005",
    "\u0376\u01bc\u0002\u1fcc\u1fce\u0005\u037c\u01bf\u0002\u1fcd\u1fcf\u0005",
    "\u037c\u01bf\u0002\u1fce\u1fcd\u0003\u0002\u0002\u0002\u1fce\u1fcf\u0003",
    "\u0002\u0002\u0002\u1fcf\u1fd1\u0003\u0002\u0002\u0002\u1fd0\u1fcc\u0003",
    "\u0002\u0002\u0002\u1fd0\u1fd1\u0003\u0002\u0002\u0002\u1fd1\u1fdd\u0003",
    "\u0002\u0002\u0002\u1fd2\u1fd6\u0005\u0376\u01bc\u0002\u1fd3\u1fd5\u0005",
    "\u037c\u01bf\u0002\u1fd4\u1fd3\u0003\u0002\u0002\u0002\u1fd5\u1fd8\u0003",
    "\u0002\u0002\u0002\u1fd6\u1fd4\u0003\u0002\u0002\u0002\u1fd6\u1fd7\u0003",
    "\u0002\u0002\u0002\u1fd7\u1fd9\u0003\u0002\u0002\u0002\u1fd8\u1fd6\u0003",
    "\u0002\u0002\u0002\u1fd9\u1fda\u0007\u035d\u0002\u0002\u1fda\u1fdb\b",
    "\u01a7\u0001\u0002\u1fdb\u1fdd\u0003\u0002\u0002\u0002\u1fdc\u1fcb\u0003",
    "\u0002\u0002\u0002\u1fdc\u1fd2\u0003\u0002\u0002\u0002\u1fdd\u034d\u0003",
    "\u0002\u0002\u0002\u1fde\u1fe3\u0005\u0350\u01a9\u0002\u1fdf\u1fe0\u0005",
    "\u042a\u0216\u0002\u1fe0\u1fe1\b\u01a8\u0001\u0002\u1fe1\u1fe3\u0003",
    "\u0002\u0002\u0002\u1fe2\u1fde\u0003\u0002\u0002\u0002\u1fe2\u1fdf\u0003",
    "\u0002\u0002\u0002\u1fe3\u034f\u0003\u0002\u0002\u0002\u1fe4\u1fe5\u0005",
    "\u0376\u01bc\u0002\u1fe5\u1fe7\u0005\u037c\u01bf\u0002\u1fe6\u1fe8\u0005",
    "\u037c\u01bf\u0002\u1fe7\u1fe6\u0003\u0002\u0002\u0002\u1fe7\u1fe8\u0003",
    "\u0002\u0002\u0002\u1fe8\u1ff4\u0003\u0002\u0002\u0002\u1fe9\u1fed\u0005",
    "\u0376\u01bc\u0002\u1fea\u1fec\u0005\u037c\u01bf\u0002\u1feb\u1fea\u0003",
    "\u0002\u0002\u0002\u1fec\u1fef\u0003\u0002\u0002\u0002\u1fed\u1feb\u0003",
    "\u0002\u0002\u0002\u1fed\u1fee\u0003\u0002\u0002\u0002\u1fee\u1ff0\u0003",
    "\u0002\u0002\u0002\u1fef\u1fed\u0003\u0002\u0002\u0002\u1ff0\u1ff1\u0007",
    "\u035d\u0002\u0002\u1ff1\u1ff2\b\u01a9\u0001\u0002\u1ff2\u1ff4\u0003",
    "\u0002\u0002\u0002\u1ff3\u1fe4\u0003\u0002\u0002\u0002\u1ff3\u1fe9\u0003",
    "\u0002\u0002\u0002\u1ff4\u0351\u0003\u0002\u0002\u0002\u1ff5\u1ffa\u0005",
    "\u0340\u01a1\u0002\u1ff6\u1ff7\u0005\u042a\u0216\u0002\u1ff7\u1ff8\b",
    "\u01aa\u0001\u0002\u1ff8\u1ffa\u0003\u0002\u0002\u0002\u1ff9\u1ff5\u0003",
    "\u0002\u0002\u0002\u1ff9\u1ff6\u0003\u0002\u0002\u0002\u1ffa\u0353\u0003",
    "\u0002\u0002\u0002\u1ffb\u2000\u0005\u0376\u01bc\u0002\u1ffc\u1ffd\u0005",
    "\u042a\u0216\u0002\u1ffd\u1ffe\b\u01ab\u0001\u0002\u1ffe\u2000\u0003",
    "\u0002\u0002\u0002\u1fff\u1ffb\u0003\u0002\u0002\u0002\u1fff\u1ffc\u0003",
    "\u0002\u0002\u0002\u2000\u0355\u0003\u0002\u0002\u0002\u2001\u2006\u0005",
    "\u0340\u01a1\u0002\u2002\u2003\u0005\u042a\u0216\u0002\u2003\u2004\b",
    "\u01ac\u0001\u0002\u2004\u2006\u0003\u0002\u0002\u0002\u2005\u2001\u0003",
    "\u0002\u0002\u0002\u2005\u2002\u0003\u0002\u0002\u0002\u2006\u0357\u0003",
    "\u0002\u0002\u0002\u2007\u200c\u0005\u0340\u01a1\u0002\u2008\u2009\u0005",
    "\u042a\u0216\u0002\u2009\u200a\b\u01ad\u0001\u0002\u200a\u200c\u0003",
    "\u0002\u0002\u0002\u200b\u2007\u0003\u0002\u0002\u0002\u200b\u2008\u0003",
    "\u0002\u0002\u0002\u200c\u0359\u0003\u0002\u0002\u0002\u200d\u200e\u0005",
    "\u034c\u01a7\u0002\u200e\u035b\u0003\u0002\u0002\u0002\u200f\u2014\u0005",
    "\u035a\u01ae\u0002\u2010\u2011\u0005\u042a\u0216\u0002\u2011\u2012\b",
    "\u01af\u0001\u0002\u2012\u2014\u0003\u0002\u0002\u0002\u2013\u200f\u0003",
    "\u0002\u0002\u0002\u2013\u2010\u0003\u0002\u0002\u0002\u2014\u035d\u0003",
    "\u0002\u0002\u0002\u2015\u201a\u0005\u0360\u01b1\u0002\u2016\u2017\u0005",
    "\u042a\u0216\u0002\u2017\u2018\b\u01b0\u0001\u0002\u2018\u201a\u0003",
    "\u0002\u0002\u0002\u2019\u2015\u0003\u0002\u0002\u0002\u2019\u2016\u0003",
    "\u0002\u0002\u0002\u201a\u035f\u0003\u0002\u0002\u0002\u201b\u201e\u0005",
    "\u0376\u01bc\u0002\u201c\u201e\u0005\u0386\u01c4\u0002\u201d\u201b\u0003",
    "\u0002\u0002\u0002\u201d\u201c\u0003\u0002\u0002\u0002\u201e\u0361\u0003",
    "\u0002\u0002\u0002\u201f\u2022\u0005\u0376\u01bc\u0002\u2020\u2022\u0007",
    "\u0372\u0002\u0002\u2021\u201f\u0003\u0002\u0002\u0002\u2021\u2020\u0003",
    "\u0002\u0002\u0002\u2022\u2027\u0003\u0002\u0002\u0002\u2023\u2024\u0007",
    "\u0360\u0002\u0002\u2024\u2025\u0005\u0382\u01c2\u0002\u2025\u2026\u0007",
    "\u0361\u0002\u0002\u2026\u2028\u0003\u0002\u0002\u0002\u2027\u2023\u0003",
    "\u0002\u0002\u0002\u2027\u2028\u0003\u0002\u0002\u0002\u2028\u202a\u0003",
    "\u0002\u0002\u0002\u2029\u202b\t9\u0002\u0002\u202a\u2029\u0003\u0002",
    "\u0002\u0002\u202a\u202b\u0003\u0002\u0002\u0002\u202b\u0363\u0003\u0002",
    "\u0002\u0002\u202c\u202d\to\u0002\u0002\u202d\u0365\u0003\u0002\u0002",
    "\u0002\u202e\u202f\tp\u0002\u0002\u202f\u0367\u0003\u0002\u0002\u0002",
    "\u2030\u2035\u0007\u0169\u0002\u0002\u2031\u2035\u0005\u040c\u0207\u0002",
    "\u2032\u2035\u0007\u0372\u0002\u0002\u2033\u2035\u0007\u036f\u0002\u0002",
    "\u2034\u2030\u0003\u0002\u0002\u0002\u2034\u2031\u0003\u0002\u0002\u0002",
    "\u2034\u2032\u0003\u0002\u0002\u0002\u2034\u2033\u0003\u0002\u0002\u0002",
    "\u2035\u0369\u0003\u0002\u0002\u0002\u2036\u2039\u0005\u0376\u01bc\u0002",
    "\u2037\u2039\u0007\u0372\u0002\u0002\u2038\u2036\u0003\u0002\u0002\u0002",
    "\u2038\u2037\u0003\u0002\u0002\u0002\u2039\u036b\u0003\u0002\u0002\u0002",
    "\u203a\u203b\tq\u0002\u0002\u203b\u036d\u0003\u0002\u0002\u0002\u203c",
    "\u203d\u0005\u0382\u01c2\u0002\u203d\u203e\u0007\u0352\u0002\u0002\u203e",
    "\u203f\u0005\u0382\u01c2\u0002\u203f\u2040\u0007\u0352\u0002\u0002\u2040",
    "\u2041\u0005\u0382\u01c2\u0002\u2041\u2042\u0007\u0352\u0002\u0002\u2042",
    "\u2043\u0005\u0382\u01c2\u0002\u2043\u2044\u0007\u0352\u0002\u0002\u2044",
    "\u204a\u0005\u0382\u01c2\u0002\u2045\u2046\u0007\u036d\u0002\u0002\u2046",
    "\u2047\u0005\u0382\u01c2\u0002\u2047\u2048\u0007\u0352\u0002\u0002\u2048",
    "\u2049\u0005\u0382\u01c2\u0002\u2049\u204b\u0003\u0002\u0002\u0002\u204a",
    "\u2045\u0003\u0002\u0002\u0002\u204b\u204c\u0003\u0002\u0002\u0002\u204c",
    "\u204a\u0003\u0002\u0002\u0002\u204c\u204d\u0003\u0002\u0002\u0002\u204d",
    "\u036f\u0003\u0002\u0002\u0002\u204e\u2055\u0005\u0372\u01ba\u0002\u204f",
    "\u2050\u0007\u0364\u0002\u0002\u2050\u2053\u0005\u0372\u01ba\u0002\u2051",
    "\u2052\u0007\u0364\u0002\u0002\u2052\u2054\u0005\u0382\u01c2\u0002\u2053",
    "\u2051\u0003\u0002\u0002\u0002\u2053\u2054\u0003\u0002\u0002\u0002\u2054",
    "\u2056\u0003\u0002\u0002\u0002\u2055\u204f\u0003\u0002\u0002\u0002\u2055",
    "\u2056\u0003\u0002\u0002\u0002\u2056\u0371\u0003\u0002\u0002\u0002\u2057",
    "\u205f\u0007\u0372\u0002\u0002\u2058\u205f\u0007\u0377\u0002\u0002\u2059",
    "\u205b\u0007\u0374\u0002\u0002\u205a\u2059\u0003\u0002\u0002\u0002\u205b",
    "\u205c\u0003\u0002\u0002\u0002\u205c\u205a\u0003\u0002\u0002\u0002\u205c",
    "\u205d\u0003\u0002\u0002\u0002\u205d\u205f\u0003\u0002\u0002\u0002\u205e",
    "\u2057\u0003\u0002\u0002\u0002\u205e\u2058\u0003\u0002\u0002\u0002\u205e",
    "\u205a\u0003\u0002\u0002\u0002\u205f\u0373\u0003\u0002\u0002\u0002\u2060",
    "\u2063\u0005\u0376\u01bc\u0002\u2061\u2063\u0007\u0372\u0002\u0002\u2062",
    "\u2060\u0003\u0002\u0002\u0002\u2062\u2061\u0003\u0002\u0002\u0002\u2063",
    "\u0375\u0003\u0002\u0002\u0002\u2064\u2068\u0005\u0378\u01bd\u0002\u2065",
    "\u2068\u0007\u037b\u0002\u0002\u2066\u2068\u0007\u036f\u0002\u0002\u2067",
    "\u2064\u0003\u0002\u0002\u0002\u2067\u2065\u0003\u0002\u0002\u0002\u2067",
    "\u2066\u0003\u0002\u0002\u0002\u2068\u0377\u0003\u0002\u0002\u0002\u2069",
    "\u2076\u0007\u037a\u0002\u0002\u206a\u2076\u0005\u040c\u0207\u0002\u206b",
    "\u2076\u0005\u040e\u0208\u0002\u206c\u2076\u0005\u036c\u01b7\u0002\u206d",
    "\u2076\u0005\u0410\u0209\u0002\u206e\u2076\u0005\u0412\u020a\u0002\u206f",
    "\u2076\u0005\u0414\u020b\u0002\u2070\u2076\u0005\u0416\u020c\u0002\u2071",
    "\u2076\u0005\u041e\u0210\u0002\u2072\u2076\u0005\u041c\u020f\u0002\u2073",
    "\u2076\u0005\u041a\u020e\u0002\u2074\u2076\u0005\u037a\u01be\u0002\u2075",
    "\u2069\u0003\u0002\u0002\u0002\u2075\u206a\u0003\u0002\u0002\u0002\u2075",
    "\u206b\u0003\u0002\u0002\u0002\u2075\u206c\u0003\u0002\u0002\u0002\u2075",
    "\u206d\u0003\u0002\u0002\u0002\u2075\u206e\u0003\u0002\u0002\u0002\u2075",
    "\u206f\u0003\u0002\u0002\u0002\u2075\u2070\u0003\u0002\u0002\u0002\u2075",
    "\u2071\u0003\u0002\u0002\u0002\u2075\u2072\u0003\u0002\u0002\u0002\u2075",
    "\u2073\u0003\u0002\u0002\u0002\u2075\u2074\u0003\u0002\u0002\u0002\u2076",
    "\u0379\u0003\u0002\u0002\u0002\u2077\u2078\u0007\u037f\u0002\u0002\u2078",
    "\u037b\u0003\u0002\u0002\u0002\u2079\u207d\u0007\u0379\u0002\u0002\u207a",
    "\u207b\u0007\u035d\u0002\u0002\u207b\u207d\u0005\u0376\u01bc\u0002\u207c",
    "\u2079\u0003\u0002\u0002\u0002\u207c\u207a\u0003\u0002\u0002\u0002\u207d",
    "\u037d\u0003\u0002\u0002\u0002\u207e\u207f\u0007\u034e\u0002\u0002\u207f",
    "\u2087\u0005\u0380\u01c1\u0002\u2080\u2081\u0007\u035d\u0002\u0002\u2081",
    "\u2084\u0005\u0380\u01c1\u0002\u2082\u2084\u0005\u037c\u01bf\u0002\u2083",
    "\u2080\u0003\u0002\u0002\u0002\u2083\u2082\u0003\u0002\u0002\u0002\u2084",
    "\u2086\u0003\u0002\u0002\u0002\u2085\u2083\u0003\u0002\u0002\u0002\u2086",
    "\u2089\u0003\u0002\u0002\u0002\u2087\u2085\u0003\u0002\u0002\u0002\u2087",
    "\u2088\u0003\u0002\u0002\u0002\u2088\u208b\u0003\u0002\u0002\u0002\u2089",
    "\u2087\u0003\u0002\u0002\u0002\u208a\u207e\u0003\u0002\u0002\u0002\u208b",
    "\u208c\u0003\u0002\u0002\u0002\u208c\u208a\u0003\u0002\u0002\u0002\u208c",
    "\u208d\u0003\u0002\u0002\u0002\u208d\u037f\u0003\u0002\u0002\u0002\u208e",
    "\u2092\u0005\u0378\u01bd\u0002\u208f\u2092\u0007\u0352\u0002\u0002\u2090",
    "\u2092\u0007\u036d\u0002\u0002\u2091\u208e\u0003\u0002\u0002\u0002\u2091",
    "\u208f\u0003\u0002\u0002\u0002\u2091\u2090\u0003\u0002\u0002\u0002\u2092",
    "\u2095\u0003\u0002\u0002\u0002\u2093\u2091\u0003\u0002\u0002\u0002\u2093",
    "\u2094\u0003\u0002\u0002\u0002\u2094\u0381\u0003\u0002\u0002\u0002\u2095",
    "\u2093\u0003\u0002\u0002\u0002\u2096\u2097\tr\u0002\u0002\u2097\u0383",
    "\u0003\u0002\u0002\u0002\u2098\u209b\u0007\u0370\u0002\u0002\u2099\u209b",
    "\u0005\u0382\u01c2\u0002\u209a\u2098\u0003\u0002\u0002\u0002\u209a\u2099",
    "\u0003\u0002\u0002\u0002\u209b\u0385\u0003\u0002\u0002\u0002\u209c\u209e",
    "\u0007\u0378\u0002\u0002\u209d\u209c\u0003\u0002\u0002\u0002\u209d\u209e",
    "\u0003\u0002\u0002\u0002\u209e\u209f\u0003\u0002\u0002\u0002\u209f\u20a2",
    "\u0007\u0372\u0002\u0002\u20a0\u20a2\u0007\u0371\u0002\u0002\u20a1\u209d",
    "\u0003\u0002\u0002\u0002\u20a1\u20a0\u0003\u0002\u0002\u0002\u20a2\u20a4",
    "\u0003\u0002\u0002\u0002\u20a3\u20a5\u0007\u0372\u0002\u0002\u20a4\u20a3",
    "\u0003\u0002\u0002\u0002\u20a5\u20a6\u0003\u0002\u0002\u0002\u20a6\u20a4",
    "\u0003\u0002\u0002\u0002\u20a6\u20a7\u0003\u0002\u0002\u0002\u20a7\u20b3",
    "\u0003\u0002\u0002\u0002\u20a8\u20aa\u0007\u0378\u0002\u0002\u20a9\u20a8",
    "\u0003\u0002\u0002\u0002\u20a9\u20aa\u0003\u0002\u0002\u0002\u20aa\u20ab",
    "\u0003\u0002\u0002\u0002\u20ab\u20ae\u0007\u0372\u0002\u0002\u20ac\u20ae",
    "\u0007\u0371\u0002\u0002\u20ad\u20a9\u0003\u0002\u0002\u0002\u20ad\u20ac",
    "\u0003\u0002\u0002\u0002\u20ae\u20b0\u0003\u0002\u0002\u0002\u20af\u20b1",
    "\u0005\u0388\u01c5\u0002\u20b0\u20af\u0003\u0002\u0002\u0002\u20b0\u20b1",
    "\u0003\u0002\u0002\u0002\u20b1\u20b3\u0003\u0002\u0002\u0002\u20b2\u20a1",
    "\u0003\u0002\u0002\u0002\u20b2\u20ad\u0003\u0002\u0002\u0002\u20b3\u0387",
    "\u0003\u0002\u0002\u0002\u20b4\u20b5\u0006\u01c5n\u0002\u20b5\u20b6",
    "\u0007\u001b\u0002\u0002\u20b6\u20b7\u0005\u036a\u01b6\u0002\u20b7\u0389",
    "\u0003\u0002\u0002\u0002\u20b8\u20b9\ts\u0002\u0002\u20b9\u038b\u0003",
    "\u0002\u0002\u0002\u20ba\u20bc\u0007\u0378\u0002\u0002\u20bb\u20ba\u0003",
    "\u0002\u0002\u0002\u20bb\u20bc\u0003\u0002\u0002\u0002\u20bc\u20bd\u0003",
    "\u0002\u0002\u0002\u20bd\u20be\u0007\u0374\u0002\u0002\u20be\u038d\u0003",
    "\u0002\u0002\u0002\u20bf\u20c1\u0007f\u0002\u0002\u20c0\u20bf\u0003",
    "\u0002\u0002\u0002\u20c0\u20c1\u0003\u0002\u0002\u0002\u20c1\u20c2\u0003",
    "\u0002\u0002\u0002\u20c2\u20c3\tt\u0002\u0002\u20c3\u038f\u0003\u0002",
    "\u0002\u0002\u20c4\u20d1\u0005\u0386\u01c4\u0002\u20c5\u20d1\u0005\u0382",
    "\u01c2\u0002\u20c6\u20c7\u0007\u0352\u0002\u0002\u20c7\u20d1\u0005\u0382",
    "\u01c2\u0002\u20c8\u20d1\u0005\u038c\u01c7\u0002\u20c9\u20d1\u0005\u038a",
    "\u01c6\u0002\u20ca\u20d1\u0007\u0375\u0002\u0002\u20cb\u20d1\u0007\u0377",
    "\u0002\u0002\u20cc\u20ce\u0007f\u0002\u0002\u20cd\u20cc\u0003\u0002",
    "\u0002\u0002\u20cd\u20ce\u0003\u0002\u0002\u0002\u20ce\u20cf\u0003\u0002",
    "\u0002\u0002\u20cf\u20d1\tt\u0002\u0002\u20d0\u20c4\u0003\u0002\u0002",
    "\u0002\u20d0\u20c5\u0003\u0002\u0002\u0002\u20d0\u20c6\u0003\u0002\u0002",
    "\u0002\u20d0\u20c8\u0003\u0002\u0002\u0002\u20d0\u20c9\u0003\u0002\u0002",
    "\u0002\u20d0\u20ca\u0003\u0002\u0002\u0002\u20d0\u20cb\u0003\u0002\u0002",
    "\u0002\u20d0\u20cd\u0003\u0002\u0002\u0002\u20d1\u0391\u0003\u0002\u0002",
    "\u0002\u20d2\u20d3\u0006\u01cao\u0002\u20d3\u20d7\u0005\u0396\u01cc",
    "\u0002\u20d4\u20d5\u0006\u01cap\u0002\u20d5\u20d7\u0005\u0394\u01cb",
    "\u0002\u20d6\u20d2\u0003\u0002\u0002\u0002\u20d6\u20d4\u0003\u0002\u0002",
    "\u0002\u20d7\u0393\u0003\u0002\u0002\u0002\u20d8\u20da\tu\u0002\u0002",
    "\u20d9\u20db\u0005\u039e\u01d0\u0002\u20da\u20d9\u0003\u0002\u0002\u0002",
    "\u20da\u20db\u0003\u0002\u0002\u0002\u20db\u20dd\u0003\u0002\u0002\u0002",
    "\u20dc\u20de\u0007\u0169\u0002\u0002\u20dd\u20dc\u0003\u0002\u0002\u0002",
    "\u20dd\u20de\u0003\u0002\u0002\u0002\u20de\u20e5\u0003\u0002\u0002\u0002",
    "\u20df\u20e0\u0007\u0019\u0002\u0002\u20e0\u20e3\u0007\u0088\u0002\u0002",
    "\u20e1\u20e3\u0007\u033d\u0002\u0002\u20e2\u20df\u0003\u0002\u0002\u0002",
    "\u20e2\u20e1\u0003\u0002\u0002\u0002\u20e3\u20e4\u0003\u0002\u0002\u0002",
    "\u20e4\u20e6\u0005\u0368\u01b5\u0002\u20e5\u20e2\u0003\u0002\u0002\u0002",
    "\u20e5\u20e6\u0003\u0002\u0002\u0002\u20e6\u213f\u0003\u0002\u0002\u0002",
    "\u20e7\u20e8\u0007\u0168\u0002\u0002\u20e8\u20ea\tv\u0002\u0002\u20e9",
    "\u20eb\u0005\u039e\u01d0\u0002\u20ea\u20e9\u0003\u0002\u0002\u0002\u20ea",
    "\u20eb\u0003\u0002\u0002\u0002\u20eb\u20ed\u0003\u0002\u0002\u0002\u20ec",
    "\u20ee\u0007\u0169\u0002\u0002\u20ed\u20ec\u0003\u0002\u0002\u0002\u20ed",
    "\u20ee\u0003\u0002\u0002\u0002\u20ee\u213f\u0003\u0002\u0002\u0002\u20ef",
    "\u20f0\u0007\u0250\u0002\u0002\u20f0\u20f2\u0007\u0166\u0002\u0002\u20f1",
    "\u20f3\u0005\u039e\u01d0\u0002\u20f2\u20f1\u0003\u0002\u0002\u0002\u20f2",
    "\u20f3\u0003\u0002\u0002\u0002\u20f3\u20f5\u0003\u0002\u0002\u0002\u20f4",
    "\u20f6\u0007\u0169\u0002\u0002\u20f5\u20f4\u0003\u0002\u0002\u0002\u20f5",
    "\u20f6\u0003\u0002\u0002\u0002\u20f6\u213f\u0003\u0002\u0002\u0002\u20f7",
    "\u20f8\u0007\u0168\u0002\u0002\u20f8\u20f9\tw\u0002\u0002\u20f9\u20fb",
    "\u0007\u0174\u0002\u0002\u20fa\u20fc\u0005\u039e\u01d0\u0002\u20fb\u20fa",
    "\u0003\u0002\u0002\u0002\u20fb\u20fc\u0003\u0002\u0002\u0002\u20fc\u20fe",
    "\u0003\u0002\u0002\u0002\u20fd\u20ff\u0007\u0169\u0002\u0002\u20fe\u20fd",
    "\u0003\u0002\u0002\u0002\u20fe\u20ff\u0003\u0002\u0002\u0002\u20ff\u213f",
    "\u0003\u0002\u0002\u0002\u2100\u2102\tx\u0002\u0002\u2101\u2103\u0005",
    "\u039e\u01d0\u0002\u2102\u2101\u0003\u0002\u0002\u0002\u2102\u2103\u0003",
    "\u0002\u0002\u0002\u2103\u2105\u0003\u0002\u0002\u0002\u2104\u2106\t",
    "y\u0002\u0002\u2105\u2104\u0003\u0002\u0002\u0002\u2105\u2106\u0003",
    "\u0002\u0002\u0002\u2106\u2108\u0003\u0002\u0002\u0002\u2107\u2109\u0007",
    "\u00ad\u0002\u0002\u2108\u2107\u0003\u0002\u0002\u0002\u2108\u2109\u0003",
    "\u0002\u0002\u0002\u2109\u213f\u0003\u0002\u0002\u0002\u210a\u210c\u0007",
    "\u0159\u0002\u0002\u210b\u210d\u0005\u03a0\u01d1\u0002\u210c\u210b\u0003",
    "\u0002\u0002\u0002\u210c\u210d\u0003\u0002\u0002\u0002\u210d\u210f\u0003",
    "\u0002\u0002\u0002\u210e\u2110\ty\u0002\u0002\u210f\u210e\u0003\u0002",
    "\u0002\u0002\u210f\u2110\u0003\u0002\u0002\u0002\u2110\u2112\u0003\u0002",
    "\u0002\u0002\u2111\u2113\u0007\u00ad\u0002\u0002\u2112\u2111\u0003\u0002",
    "\u0002\u0002\u2112\u2113\u0003\u0002\u0002\u0002\u2113\u213f\u0003\u0002",
    "\u0002\u0002\u2114\u2116\u0007\u015a\u0002\u0002\u2115\u2117\u0007\u015b",
    "\u0002\u0002\u2116\u2115\u0003\u0002\u0002\u0002\u2116\u2117\u0003\u0002",
    "\u0002\u0002\u2117\u2119\u0003\u0002\u0002\u0002\u2118\u211a\u0005\u03a0",
    "\u01d1\u0002\u2119\u2118\u0003\u0002\u0002\u0002\u2119\u211a\u0003\u0002",
    "\u0002\u0002\u211a\u211c\u0003\u0002\u0002\u0002\u211b\u211d\ty\u0002",
    "\u0002\u211c\u211b\u0003\u0002\u0002\u0002\u211c\u211d\u0003\u0002\u0002",
    "\u0002\u211d\u211f\u0003\u0002\u0002\u0002\u211e\u2120\u0007\u00ad\u0002",
    "\u0002\u211f\u211e\u0003\u0002\u0002\u0002\u211f\u2120\u0003\u0002\u0002",
    "\u0002\u2120\u213f\u0003\u0002\u0002\u0002\u2121\u2123\tz\u0002\u0002",
    "\u2122\u2124\u0005\u03a2\u01d2\u0002\u2123\u2122\u0003\u0002\u0002\u0002",
    "\u2123\u2124\u0003\u0002\u0002\u0002\u2124\u2126\u0003\u0002\u0002\u0002",
    "\u2125\u2127\ty\u0002\u0002\u2126\u2125\u0003\u0002\u0002\u0002\u2126",
    "\u2127\u0003\u0002\u0002\u0002\u2127\u2129\u0003\u0002\u0002\u0002\u2128",
    "\u212a\u0007\u00ad\u0002\u0002\u2129\u2128\u0003\u0002\u0002\u0002\u2129",
    "\u212a\u0003\u0002\u0002\u0002\u212a\u213f\u0003\u0002\u0002\u0002\u212b",
    "\u213f\t{\u0002\u0002\u212c\u212e\t|\u0002\u0002\u212d\u212f\u0005\u039e",
    "\u01d0\u0002\u212e\u212d\u0003\u0002\u0002\u0002\u212e\u212f\u0003\u0002",
    "\u0002\u0002\u212f\u213f\u0003\u0002\u0002\u0002\u2130\u2131\t}\u0002",
    "\u0002\u2131\u2133\u0005\u039a\u01ce\u0002\u2132\u2134\u0007\u0169\u0002",
    "\u0002\u2133\u2132\u0003\u0002\u0002\u0002\u2133\u2134\u0003\u0002\u0002",
    "\u0002\u2134\u213b\u0003\u0002\u0002\u0002\u2135\u2136\u0007\u0019\u0002",
    "\u0002\u2136\u2139\u0007\u0088\u0002\u0002\u2137\u2139\u0007\u033d\u0002",
    "\u0002\u2138\u2135\u0003\u0002\u0002\u0002\u2138\u2137\u0003\u0002\u0002",
    "\u0002\u2139\u213a\u0003\u0002\u0002\u0002\u213a\u213c\u0005\u0368\u01b5",
    "\u0002\u213b\u2138\u0003\u0002\u0002\u0002\u213b\u213c\u0003\u0002\u0002",
    "\u0002\u213c\u213f\u0003\u0002\u0002\u0002\u213d\u213f\t~\u0002\u0002",
    "\u213e\u20d8\u0003\u0002\u0002\u0002\u213e\u20e7\u0003\u0002\u0002\u0002",
    "\u213e\u20ef\u0003\u0002\u0002\u0002\u213e\u20f7\u0003\u0002\u0002\u0002",
    "\u213e\u2100\u0003\u0002\u0002\u0002\u213e\u210a\u0003\u0002\u0002\u0002",
    "\u213e\u2114\u0003\u0002\u0002\u0002\u213e\u2121\u0003\u0002\u0002\u0002",
    "\u213e\u212b\u0003\u0002\u0002\u0002\u213e\u212c\u0003\u0002\u0002\u0002",
    "\u213e\u2130\u0003\u0002\u0002\u0002\u213e\u213d\u0003\u0002\u0002\u0002",
    "\u213f\u0395\u0003\u0002\u0002\u0002\u2140\u217d\t\u007f\u0002\u0002",
    "\u2141\u2144\u0007\u0160\u0002\u0002\u2142\u2143\u0007\u033f\u0002\u0002",
    "\u2143\u2145\u0005\u0386\u01c4\u0002\u2144\u2142\u0003\u0002\u0002\u0002",
    "\u2144\u2145\u0003\u0002\u0002\u0002\u2145\u217d\u0003\u0002\u0002\u0002",
    "\u2146\u2148\t\u0080\u0002\u0002\u2147\u2149\u0005\u039e\u01d0\u0002",
    "\u2148\u2147\u0003\u0002\u0002\u0002\u2148\u2149\u0003\u0002\u0002\u0002",
    "\u2149\u217d\u0003\u0002\u0002\u0002\u214a\u214b\u0007M\u0002\u0002",
    "\u214b\u214c\u0007\u0164\u0002\u0002\u214c\u214d\u0007\u0099\u0002\u0002",
    "\u214d\u2153\u0007\u02df\u0002\u0002\u214e\u214f\u0007M\u0002\u0002",
    "\u214f\u2150\u0007\u02e0\u0002\u0002\u2150\u2151\u0007\u0099\u0002\u0002",
    "\u2151\u2153\u0007\u02e4\u0002\u0002\u2152\u214a\u0003\u0002\u0002\u0002",
    "\u2152\u214e\u0003\u0002\u0002\u0002\u2153\u217d\u0003\u0002\u0002\u0002",
    "\u2154\u2156\t\u0081\u0002\u0002\u2155\u2157\u0005\u03a2\u01d2\u0002",
    "\u2156\u2155\u0003\u0002\u0002\u0002\u2156\u2157\u0003\u0002\u0002\u0002",
    "\u2157\u217d\u0003\u0002\u0002\u0002\u2158\u2159\u0007\u0176\u0002\u0002",
    "\u2159\u215a\u0007\u0357\u0002\u0002\u215a\u215b\u0005\u0396\u01cc\u0002",
    "\u215b\u215c\u0007\u0356\u0002\u0002\u215c\u217d\u0003\u0002\u0002\u0002",
    "\u215d\u215e\u0007\u00e3\u0002\u0002\u215e\u215f\u0007\u0357\u0002\u0002",
    "\u215f\u2160\u0005\u0396\u01cc\u0002\u2160\u2161\u0007\u0364\u0002\u0002",
    "\u2161\u2162\u0005\u0396\u01cc\u0002\u2162\u2163\u0007\u0356\u0002\u0002",
    "\u2163\u217d\u0003\u0002\u0002\u0002\u2164\u2165\u0007\u009e\u0002\u0002",
    "\u2165\u2166\u0007\u0357\u0002\u0002\u2166\u216b\u0005\u0396\u01cc\u0002",
    "\u2167\u2168\u0007\u0364\u0002\u0002\u2168\u216a\u0005\u0396\u01cc\u0002",
    "\u2169\u2167\u0003\u0002\u0002\u0002\u216a\u216d\u0003\u0002\u0002\u0002",
    "\u216b\u2169\u0003\u0002\u0002\u0002\u216b\u216c\u0003\u0002\u0002\u0002",
    "\u216c\u216e\u0003\u0002\u0002\u0002\u216d\u216b\u0003\u0002\u0002\u0002",
    "\u216e\u216f\u0007\u0356\u0002\u0002\u216f\u217d\u0003\u0002\u0002\u0002",
    "\u2170\u2171\u0007\u017a\u0002\u0002\u2171\u2172\u0007\u0357\u0002\u0002",
    "\u2172\u2177\u0005\u0398\u01cd\u0002\u2173\u2174\u0007\u0364\u0002\u0002",
    "\u2174\u2176\u0005\u0398\u01cd\u0002\u2175\u2173\u0003\u0002\u0002\u0002",
    "\u2176\u2179\u0003\u0002\u0002\u0002\u2177\u2175\u0003\u0002\u0002\u0002",
    "\u2177\u2178\u0003\u0002\u0002\u0002\u2178\u217a\u0003\u0002\u0002\u0002",
    "\u2179\u2177\u0003\u0002\u0002\u0002\u217a\u217b\u0007\u0356\u0002\u0002",
    "\u217b\u217d\u0003\u0002\u0002\u0002\u217c\u2140\u0003\u0002\u0002\u0002",
    "\u217c\u2141\u0003\u0002\u0002\u0002\u217c\u2146\u0003\u0002\u0002\u0002",
    "\u217c\u2152\u0003\u0002\u0002\u0002\u217c\u2154\u0003\u0002\u0002\u0002",
    "\u217c\u2158\u0003\u0002\u0002\u0002\u217c\u215d\u0003\u0002\u0002\u0002",
    "\u217c\u2164\u0003\u0002\u0002\u0002\u217c\u2170\u0003\u0002\u0002\u0002",
    "\u217d\u0397\u0003\u0002\u0002\u0002\u217e\u217f\u0005\u0376\u01bc\u0002",
    "\u217f\u2180\u0007\u036d\u0002\u0002\u2180\u2181\u0005\u0396\u01cc\u0002",
    "\u2181\u0399\u0003\u0002\u0002\u0002\u2182\u2183\u0007\u0360\u0002\u0002",
    "\u2183\u2188\u0007\u0372\u0002\u0002\u2184\u2185\u0007\u0364\u0002\u0002",
    "\u2185\u2187\u0007\u0372\u0002\u0002\u2186\u2184\u0003\u0002\u0002\u0002",
    "\u2187\u218a\u0003\u0002\u0002\u0002\u2188\u2186\u0003\u0002\u0002\u0002",
    "\u2188\u2189\u0003\u0002\u0002\u0002\u2189\u218b\u0003\u0002\u0002\u0002",
    "\u218a\u2188\u0003\u0002\u0002\u0002\u218b\u218c\u0007\u0361\u0002\u0002",
    "\u218c\u039b\u0003\u0002\u0002\u0002\u218d\u218f\t\u0082\u0002\u0002",
    "\u218e\u2190\u0005\u039e\u01d0\u0002\u218f\u218e\u0003\u0002\u0002\u0002",
    "\u218f\u2190\u0003\u0002\u0002\u0002\u2190\u21a4\u0003\u0002\u0002\u0002",
    "\u2191\u2193\u0007\u0165\u0002\u0002\u2192\u2194\u0005\u039e\u01d0\u0002",
    "\u2193\u2192\u0003\u0002\u0002\u0002\u2193\u2194\u0003\u0002\u0002\u0002",
    "\u2194\u2198\u0003\u0002\u0002\u0002\u2195\u2196\u0007\u0019\u0002\u0002",
    "\u2196\u2197\u0007\u0088\u0002\u0002\u2197\u2199\u0005\u0368\u01b5\u0002",
    "\u2198\u2195\u0003\u0002\u0002\u0002\u2198\u2199\u0003\u0002\u0002\u0002",
    "\u2199\u21a4\u0003\u0002\u0002\u0002\u219a\u21a4\t\u0083\u0002\u0002",
    "\u219b\u219d\u0007\u015d\u0002\u0002\u219c\u219e\u0005\u03a0\u01d1\u0002",
    "\u219d\u219c\u0003\u0002\u0002\u0002\u219d\u219e\u0003\u0002\u0002\u0002",
    "\u219e\u21a4\u0003\u0002\u0002\u0002\u219f\u21a1\ty\u0002\u0002\u21a0",
    "\u21a2\u0007\u0157\u0002\u0002\u21a1\u21a0\u0003\u0002\u0002\u0002\u21a1",
    "\u21a2\u0003\u0002\u0002\u0002\u21a2\u21a4\u0003\u0002\u0002\u0002\u21a3",
    "\u218d\u0003\u0002\u0002\u0002\u21a3\u2191\u0003\u0002\u0002\u0002\u21a3",
    "\u219a\u0003\u0002\u0002\u0002\u21a3\u219b\u0003\u0002\u0002\u0002\u21a3",
    "\u219f\u0003\u0002\u0002\u0002\u21a4\u039d\u0003\u0002\u0002\u0002\u21a5",
    "\u21a6\u0007\u0360\u0002\u0002\u21a6\u21a7\u0005\u0382\u01c2\u0002\u21a7",
    "\u21a8\u0007\u0361\u0002\u0002\u21a8\u039f\u0003\u0002\u0002\u0002\u21a9",
    "\u21aa\u0007\u0360\u0002\u0002\u21aa\u21ab\u0005\u0382\u01c2\u0002\u21ab",
    "\u21ac\u0007\u0364\u0002\u0002\u21ac\u21ad\u0005\u0382\u01c2\u0002\u21ad",
    "\u21ae\u0007\u0361\u0002\u0002\u21ae\u03a1\u0003\u0002\u0002\u0002\u21af",
    "\u21b0\u0007\u0360\u0002\u0002\u21b0\u21b3\u0005\u0382\u01c2\u0002\u21b1",
    "\u21b2\u0007\u0364\u0002\u0002\u21b2\u21b4\u0005\u0382\u01c2\u0002\u21b3",
    "\u21b1\u0003\u0002\u0002\u0002\u21b3\u21b4\u0003\u0002\u0002\u0002\u21b4",
    "\u21b5\u0003\u0002\u0002\u0002\u21b5\u21b6\u0007\u0361\u0002\u0002\u21b6",
    "\u03a3\u0003\u0002\u0002\u0002\u21b7\u21bc\u0005\u0376\u01bc\u0002\u21b8",
    "\u21b9\u0007\u0364\u0002\u0002\u21b9\u21bb\u0005\u0376\u01bc\u0002\u21ba",
    "\u21b8\u0003\u0002\u0002\u0002\u21bb\u21be\u0003\u0002\u0002\u0002\u21bc",
    "\u21ba\u0003\u0002\u0002\u0002\u21bc\u21bd\u0003\u0002\u0002\u0002\u21bd",
    "\u03a5\u0003\u0002\u0002\u0002\u21be\u21bc\u0003\u0002\u0002\u0002\u21bf",
    "\u21c4\u0005\u03a8\u01d5\u0002\u21c0\u21c1\u0007\u0364\u0002\u0002\u21c1",
    "\u21c3\u0005\u03a8\u01d5\u0002\u21c2\u21c0\u0003\u0002\u0002\u0002\u21c3",
    "\u21c6\u0003\u0002\u0002\u0002\u21c4\u21c2\u0003\u0002\u0002\u0002\u21c4",
    "\u21c5\u0003\u0002\u0002\u0002\u21c5\u03a7\u0003\u0002\u0002\u0002\u21c6",
    "\u21c4\u0003\u0002\u0002\u0002\u21c7\u21c9\u0005\u0376\u01bc\u0002\u21c8",
    "\u21ca\t9\u0002\u0002\u21c9\u21c8\u0003\u0002\u0002\u0002\u21c9\u21ca",
    "\u0003\u0002\u0002\u0002\u21ca\u03a9\u0003\u0002\u0002\u0002\u21cb\u21d0",
    "\u0005\u0340\u01a1\u0002\u21cc\u21cd\u0007\u0364\u0002\u0002\u21cd\u21cf",
    "\u0005\u0340\u01a1\u0002\u21ce\u21cc\u0003\u0002\u0002\u0002\u21cf\u21d2",
    "\u0003\u0002\u0002\u0002\u21d0\u21ce\u0003\u0002\u0002\u0002\u21d0\u21d1",
    "\u0003\u0002\u0002\u0002\u21d1\u03ab\u0003\u0002\u0002\u0002\u21d2\u21d0",
    "\u0003\u0002\u0002\u0002\u21d3\u21d8\u0005\u0348\u01a5\u0002\u21d4\u21d5",
    "\u0007\u0364\u0002\u0002\u21d5\u21d7\u0005\u0348\u01a5\u0002\u21d6\u21d4",
    "\u0003\u0002\u0002\u0002\u21d7\u21da\u0003\u0002\u0002\u0002\u21d8\u21d6",
    "\u0003\u0002\u0002\u0002\u21d8\u21d9\u0003\u0002\u0002\u0002\u21d9\u03ad",
    "\u0003\u0002\u0002\u0002\u21da\u21d8\u0003\u0002\u0002\u0002\u21db\u21e0",
    "\u0005\u034c\u01a7\u0002\u21dc\u21dd\u0007\u0364\u0002\u0002\u21dd\u21df",
    "\u0005\u034c\u01a7\u0002\u21de\u21dc\u0003\u0002\u0002\u0002\u21df\u21e2",
    "\u0003\u0002\u0002\u0002\u21e0\u21de\u0003\u0002\u0002\u0002\u21e0\u21e1",
    "\u0003\u0002\u0002\u0002\u21e1\u03af\u0003\u0002\u0002\u0002\u21e2\u21e0",
    "\u0003\u0002\u0002\u0002\u21e3\u21e8\u0005\u0342\u01a2\u0002\u21e4\u21e5",
    "\u0007\u0364\u0002\u0002\u21e5\u21e7\u0005\u0342\u01a2\u0002\u21e6\u21e4",
    "\u0003\u0002\u0002\u0002\u21e7\u21ea\u0003\u0002\u0002\u0002\u21e8\u21e6",
    "\u0003\u0002\u0002\u0002\u21e8\u21e9\u0003\u0002\u0002\u0002\u21e9\u03b1",
    "\u0003\u0002\u0002\u0002\u21ea\u21e8\u0003\u0002\u0002\u0002\u21eb\u21ec",
    "\u0007\u0360\u0002\u0002\u21ec\u21f1\u0005\u0362\u01b2\u0002\u21ed\u21ee",
    "\u0007\u0364\u0002\u0002\u21ee\u21f0\u0005\u0362\u01b2\u0002\u21ef\u21ed",
    "\u0003\u0002\u0002\u0002\u21f0\u21f3\u0003\u0002\u0002\u0002\u21f1\u21ef",
    "\u0003\u0002\u0002\u0002\u21f1\u21f2\u0003\u0002\u0002\u0002\u21f2\u21f4",
    "\u0003\u0002\u0002\u0002\u21f3\u21f1\u0003\u0002\u0002\u0002\u21f4\u21f5",
    "\u0007\u0361\u0002\u0002\u21f5\u03b3\u0003\u0002\u0002\u0002\u21f6\u21fb",
    "\u0005\u03f8\u01fd\u0002\u21f7\u21f8\u0007\u0364\u0002\u0002\u21f8\u21fa",
    "\u0005\u03f8\u01fd\u0002\u21f9\u21f7\u0003\u0002\u0002\u0002\u21fa\u21fd",
    "\u0003\u0002\u0002\u0002\u21fb\u21f9\u0003\u0002\u0002\u0002\u21fb\u21fc",
    "\u0003\u0002\u0002\u0002\u21fc\u03b5\u0003\u0002\u0002\u0002\u21fd\u21fb",
    "\u0003\u0002\u0002\u0002\u21fe\u2203\u0005\u03c2\u01e2\u0002\u21ff\u2200",
    "\u0007\u0364\u0002\u0002\u2200\u2202\u0005\u03c2\u01e2\u0002\u2201\u21ff",
    "\u0003\u0002\u0002\u0002\u2202\u2205\u0003\u0002\u0002\u0002\u2203\u2201",
    "\u0003\u0002\u0002\u0002\u2203\u2204\u0003\u0002\u0002\u0002\u2204\u03b7",
    "\u0003\u0002\u0002\u0002\u2205\u2203\u0003\u0002\u0002\u0002\u2206\u220b",
    "\u0005\u0390\u01c9\u0002\u2207\u2208\u0007\u0364\u0002\u0002\u2208\u220a",
    "\u0005\u0390\u01c9\u0002\u2209\u2207\u0003\u0002\u0002\u0002\u220a\u220d",
    "\u0003\u0002\u0002\u0002\u220b\u2209\u0003\u0002\u0002\u0002\u220b\u220c",
    "\u0003\u0002\u0002\u0002\u220c\u03b9\u0003\u0002\u0002\u0002\u220d\u220b",
    "\u0003\u0002\u0002\u0002\u220e\u2213\u0007\u0372\u0002\u0002\u220f\u2210",
    "\u0007\u0364\u0002\u0002\u2210\u2212\u0007\u0372\u0002\u0002\u2211\u220f",
    "\u0003\u0002\u0002\u0002\u2212\u2215\u0003\u0002\u0002\u0002\u2213\u2211",
    "\u0003\u0002\u0002\u0002\u2213\u2214\u0003\u0002\u0002\u0002\u2214\u03bb",
    "\u0003\u0002\u0002\u0002\u2215\u2213\u0003\u0002\u0002\u0002\u2216\u221b",
    "\u0007\u037d\u0002\u0002\u2217\u2218\u0007\u0364\u0002\u0002\u2218\u221a",
    "\u0007\u037d\u0002\u0002\u2219\u2217\u0003\u0002\u0002\u0002\u221a\u221d",
    "\u0003\u0002\u0002\u0002\u221b\u2219\u0003\u0002\u0002\u0002\u221b\u221c",
    "\u0003\u0002\u0002\u0002\u221c\u03bd\u0003\u0002\u0002\u0002\u221d\u221b",
    "\u0003\u0002\u0002\u0002\u221e\u222a\u0007h\u0002\u0002\u221f\u2221",
    "\u0005\u0400\u0201\u0002\u2220\u221f\u0003\u0002\u0002\u0002\u2220\u2221",
    "\u0003\u0002\u0002\u0002\u2221\u2222\u0003\u0002\u0002\u0002\u2222\u222a",
    "\u0005\u0390\u01c9\u0002\u2223\u2227\u0005\u03c0\u01e1\u0002\u2224\u2225",
    "\u0007i\u0002\u0002\u2225\u2226\u0007\u00a2\u0002\u0002\u2226\u2228",
    "\u0005\u03c0\u01e1\u0002\u2227\u2224\u0003\u0002\u0002\u0002\u2227\u2228",
    "\u0003\u0002\u0002\u0002\u2228\u222a\u0003\u0002\u0002\u0002\u2229\u221e",
    "\u0003\u0002\u0002\u0002\u2229\u2220\u0003\u0002\u0002\u0002\u2229\u2223",
    "\u0003\u0002\u0002\u0002\u222a\u03bf\u0003\u0002\u0002\u0002\u222b\u2231",
    "\t\u0084\u0002\u0002\u222c\u222e\u0007\u0360\u0002\u0002\u222d\u222f",
    "\u0005\u0382\u01c2\u0002\u222e\u222d\u0003\u0002\u0002\u0002\u222e\u222f",
    "\u0003\u0002\u0002\u0002\u222f\u2230\u0003\u0002\u0002\u0002\u2230\u2232",
    "\u0007\u0361\u0002\u0002\u2231\u222c\u0003\u0002\u0002\u0002\u2231\u2232",
    "\u0003\u0002\u0002\u0002\u2232\u223a\u0003\u0002\u0002\u0002\u2233\u2234",
    "\u0007\u01a1\u0002\u0002\u2234\u2236\u0007\u0360\u0002\u0002\u2235\u2237",
    "\u0005\u0382\u01c2\u0002\u2236\u2235\u0003\u0002\u0002\u0002\u2236\u2237",
    "\u0003\u0002\u0002\u0002\u2237\u2238\u0003\u0002\u0002\u0002\u2238\u223a",
    "\u0007\u0361\u0002\u0002\u2239\u222b\u0003\u0002\u0002\u0002\u2239\u2233",
    "\u0003\u0002\u0002\u0002\u223a\u03c1\u0003\u0002\u0002\u0002\u223b\u223e",
    "\u0005\u03f8\u01fd\u0002\u223c\u223e\u0007(\u0002\u0002\u223d\u223b",
    "\u0003\u0002\u0002\u0002\u223d\u223c\u0003\u0002\u0002\u0002\u223e\u03c3",
    "\u0003\u0002\u0002\u0002\u223f\u2240\u0007E\u0002\u0002\u2240\u2241",
    "\u00076\u0002\u0002\u2241\u03c5\u0003\u0002\u0002\u0002\u2242\u2243",
    "\u0007E\u0002\u0002\u2243\u2244\u0007f\u0002\u0002\u2244\u2245\u0007",
    "6\u0002\u0002\u2245\u03c7\u0003\u0002\u0002\u0002\u2246\u2254\u0005",
    "\u03ca\u01e6\u0002\u2247\u224c\u0005\u0340\u01a1\u0002\u2248\u2249\u0007",
    "\u0360\u0002\u0002\u2249\u224a\u0005\u03f0\u01f9\u0002\u224a\u224b\u0007",
    "\u0361\u0002\u0002\u224b\u224d\u0003\u0002\u0002\u0002\u224c\u2248\u0003",
    "\u0002\u0002\u0002\u224c\u224d\u0003\u0002\u0002\u0002\u224d\u224e\u0003",
    "\u0002\u0002\u0002\u224e\u224f\b\u01e5\u0001\u0002\u224f\u2254\u0003",
    "\u0002\u0002\u0002\u2250\u2254\u0005\u03de\u01f0\u0002\u2251\u2252\u0006",
    "\u01e5q\u0002\u2252\u2254\u0005\u03ee\u01f8\u0002\u2253\u2246\u0003",
    "\u0002\u0002\u0002\u2253\u2247\u0003\u0002\u0002\u0002\u2253\u2250\u0003",
    "\u0002\u0002\u0002\u2253\u2251\u0003\u0002\u0002\u0002\u2254\u03c9\u0003",
    "\u0002\u0002\u0002\u2255\u2256\u0006\u01e6r\u0002\u2256\u225a\u0005",
    "\u03cc\u01e7\u0002\u2257\u2258\u0006\u01e6s\u0002\u2258\u225a\u0005",
    "\u03ce\u01e8\u0002\u2259\u2255\u0003\u0002\u0002\u0002\u2259\u2257\u0003",
    "\u0002\u0002\u0002\u225a\u03cb\u0003\u0002\u0002\u0002\u225b\u22c5\t",
    "\u0085\u0002\u0002\u225c\u225d\u0007 \u0002\u0002\u225d\u225e\u0007",
    "\u0360\u0002\u0002\u225e\u225f\u0005\u03f8\u01fd\u0002\u225f\u2260\u0007",
    "\u0364\u0002\u0002\u2260\u2261\u0005\u039c\u01cf\u0002\u2261\u2262\u0007",
    "\u0361\u0002\u0002\u2262\u22c5\u0003\u0002\u0002\u0002\u2263\u2264\u0007",
    " \u0002\u0002\u2264\u2265\u0007\u0360\u0002\u0002\u2265\u2266\u0005",
    "\u03f8\u01fd\u0002\u2266\u2267\u0007\u00a5\u0002\u0002\u2267\u2268\u0005",
    "\u0368\u01b5\u0002\u2268\u2269\u0007\u0361\u0002\u0002\u2269\u22c5\u0003",
    "\u0002\u0002\u0002\u226a\u226b\u0007\u0017\u0002\u0002\u226b\u226c\u0007",
    "\u0360\u0002\u0002\u226c\u226d\u0005\u03f8\u01fd\u0002\u226d\u226e\u0007",
    "\u000e\u0002\u0002\u226e\u226f\u0005\u039c\u01cf\u0002\u226f\u2270\u0007",
    "\u0361\u0002\u0002\u2270\u22c5\u0003\u0002\u0002\u0002\u2271\u2272\u0007",
    "\u00a6\u0002\u0002\u2272\u2273\u0007\u0360\u0002\u0002\u2273\u2274\u0005",
    "\u034c\u01a7\u0002\u2274\u2275\u0007\u0361\u0002\u0002\u2275\u22c5\u0003",
    "\u0002\u0002\u0002\u2276\u22c5\u0005\u03d6\u01ec\u0002\u2277\u2278\u0007",
    "\u0165\u0002\u0002\u2278\u2279\u0007\u0360\u0002\u0002\u2279\u227c\u0005",
    "\u03f0\u01f9\u0002\u227a\u227b\u0007\u00a5\u0002\u0002\u227b\u227d\u0005",
    "\u0368\u01b5\u0002\u227c\u227a\u0003\u0002\u0002\u0002\u227c\u227d\u0003",
    "\u0002\u0002\u0002\u227d\u227e\u0003\u0002\u0002\u0002\u227e\u227f\u0007",
    "\u0361\u0002\u0002\u227f\u22c5\u0003\u0002\u0002\u0002\u2280\u2281\u0007",
    "\u01a2\u0002\u0002\u2281\u2284\u0007\u0360\u0002\u0002\u2282\u2285\u0005",
    "\u0386\u01c4\u0002\u2283\u2285\u0005\u03f8\u01fd\u0002\u2284\u2282\u0003",
    "\u0002\u0002\u0002\u2284\u2283\u0003\u0002\u0002\u0002\u2285\u2286\u0003",
    "\u0002\u0002\u0002\u2286\u2289\u0007G\u0002\u0002\u2287\u228a\u0005",
    "\u0386\u01c4\u0002\u2288\u228a\u0005\u03f8\u01fd\u0002\u2289\u2287\u0003",
    "\u0002\u0002\u0002\u2289\u2288\u0003\u0002\u0002\u0002\u228a\u228b\u0003",
    "\u0002\u0002\u0002\u228b\u228c\u0007\u0361\u0002\u0002\u228c\u22c5\u0003",
    "\u0002\u0002\u0002\u228d\u22c5\u0005\u03d2\u01ea\u0002\u228e\u228f\u0007",
    "\u01a6\u0002\u0002\u228f\u2290\u0007\u0360\u0002\u0002\u2290\u2293\t",
    "\u0086\u0002\u0002\u2291\u2294\u0005\u0386\u01c4\u0002\u2292\u2294\u0005",
    "\u03f8\u01fd\u0002\u2293\u2291\u0003\u0002\u0002\u0002\u2293\u2292\u0003",
    "\u0002\u0002\u0002\u2293\u2294\u0003\u0002\u0002\u0002\u2294\u2295\u0003",
    "\u0002\u0002\u0002\u2295\u2298\u0007>\u0002\u0002\u2296\u2299\u0005",
    "\u0386\u01c4\u0002\u2297\u2299\u0005\u03f8\u01fd\u0002\u2298\u2296\u0003",
    "\u0002\u0002\u0002\u2298\u2297\u0003\u0002\u0002\u0002\u2299\u229a\u0003",
    "\u0002\u0002\u0002\u229a\u229b\u0007\u0361\u0002\u0002\u229b\u22c5\u0003",
    "\u0002\u0002\u0002\u229c\u229d\u0007\u01a6\u0002\u0002\u229d\u22a0\u0007",
    "\u0360\u0002\u0002\u229e\u22a1\u0005\u0386\u01c4\u0002\u229f\u22a1\u0005",
    "\u03f8\u01fd\u0002\u22a0\u229e\u0003\u0002\u0002\u0002\u22a0\u229f\u0003",
    "\u0002\u0002\u0002\u22a1\u22a2\u0003\u0002\u0002\u0002\u22a2\u22a5\u0007",
    ">\u0002\u0002\u22a3\u22a6\u0005\u0386\u01c4\u0002\u22a4\u22a6\u0005",
    "\u03f8\u01fd\u0002\u22a5\u22a3\u0003\u0002\u0002\u0002\u22a5\u22a4\u0003",
    "\u0002\u0002\u0002\u22a6\u22a7\u0003\u0002\u0002\u0002\u22a7\u22a8\u0007",
    "\u0361\u0002\u0002\u22a8\u22c5\u0003\u0002\u0002\u0002\u22a9\u22aa\u0007",
    "\u0343\u0002\u0002\u22aa\u22ad\u0007\u0360\u0002\u0002\u22ab\u22ae\u0005",
    "\u0386\u01c4\u0002\u22ac\u22ae\u0005\u03f8\u01fd\u0002\u22ad\u22ab\u0003",
    "\u0002\u0002\u0002\u22ad\u22ac\u0003\u0002\u0002\u0002\u22ae\u22b5\u0003",
    "\u0002\u0002\u0002\u22af\u22b0\u0007\u000e\u0002\u0002\u22b0\u22b1\t",
    "\u0087\u0002\u0002\u22b1\u22b2\u0007\u0360\u0002\u0002\u22b2\u22b3\u0005",
    "\u0382\u01c2\u0002\u22b3\u22b4\u0007\u0361\u0002\u0002\u22b4\u22b6\u0003",
    "\u0002\u0002\u0002\u22b5\u22af\u0003\u0002\u0002\u0002\u22b5\u22b6\u0003",
    "\u0002\u0002\u0002\u22b6\u22b8\u0003\u0002\u0002\u0002\u22b7\u22b9\u0005",
    "\u03da\u01ee\u0002\u22b8\u22b7\u0003\u0002\u0002\u0002\u22b8\u22b9\u0003",
    "\u0002\u0002\u0002\u22b9\u22ba\u0003\u0002\u0002\u0002\u22ba\u22bb\u0007",
    "\u0361\u0002\u0002\u22bb\u22c5\u0003\u0002\u0002\u0002\u22bc\u22c5\u0005",
    "\u03d4\u01eb\u0002\u22bd\u22be\u0007\u0340\u0002\u0002\u22be\u22bf\u0007",
    "\u0360\u0002\u0002\u22bf\u22c0\t\u0083\u0002\u0002\u22c0\u22c1\u0007",
    "\u0364\u0002\u0002\u22c1\u22c2\u0005\u0386\u01c4\u0002\u22c2\u22c3\u0007",
    "\u0361\u0002\u0002\u22c3\u22c5\u0003\u0002\u0002\u0002\u22c4\u225b\u0003",
    "\u0002\u0002\u0002\u22c4\u225c\u0003\u0002\u0002\u0002\u22c4\u2263\u0003",
    "\u0002\u0002\u0002\u22c4\u226a\u0003\u0002\u0002\u0002\u22c4\u2271\u0003",
    "\u0002\u0002\u0002\u22c4\u2276\u0003\u0002\u0002\u0002\u22c4\u2277\u0003",
    "\u0002\u0002\u0002\u22c4\u2280\u0003\u0002\u0002\u0002\u22c4\u228d\u0003",
    "\u0002\u0002\u0002\u22c4\u228e\u0003\u0002\u0002\u0002\u22c4\u229c\u0003",
    "\u0002\u0002\u0002\u22c4\u22a9\u0003\u0002\u0002\u0002\u22c4\u22bc\u0003",
    "\u0002\u0002\u0002\u22c4\u22bd\u0003\u0002\u0002\u0002\u22c5\u03cd\u0003",
    "\u0002\u0002\u0002\u22c6\u22cb\u0005\u03d0\u01e9\u0002\u22c7\u22cb\u0005",
    "\u03d6\u01ec\u0002\u22c8\u22cb\u0005\u03d2\u01ea\u0002\u22c9\u22cb\u0005",
    "\u03d4\u01eb\u0002\u22ca\u22c6\u0003\u0002\u0002\u0002\u22ca\u22c7\u0003",
    "\u0002\u0002\u0002\u22ca\u22c8\u0003\u0002\u0002\u0002\u22ca\u22c9\u0003",
    "\u0002\u0002\u0002\u22cb\u03cf\u0003\u0002\u0002\u0002\u22cc\u22cd\u0007",
    "\u0017\u0002\u0002\u22cd\u22ce\u0007\u0360\u0002\u0002\u22ce\u22cf\u0005",
    "\u03f8\u01fd\u0002\u22cf\u22d0\u0007\u000e\u0002\u0002\u22d0\u22d1\u0005",
    "\u0392\u01ca\u0002\u22d1\u22d2\u0007\u0361\u0002\u0002\u22d2\u03d1\u0003",
    "\u0002\u0002\u0002\u22d3\u22d4\t\u0088\u0002\u0002\u22d4\u22d7\u0007",
    "\u0360\u0002\u0002\u22d5\u22d8\u0005\u0386\u01c4\u0002\u22d6\u22d8\u0005",
    "\u03f8\u01fd\u0002\u22d7\u22d5\u0003\u0002\u0002\u0002\u22d7\u22d6\u0003",
    "\u0002\u0002\u0002\u22d8\u22d9\u0003\u0002\u0002\u0002\u22d9\u22dc\u0007",
    ">\u0002\u0002\u22da\u22dd\u0005\u0382\u01c2\u0002\u22db\u22dd\u0005",
    "\u03f8\u01fd\u0002\u22dc\u22da\u0003\u0002\u0002\u0002\u22dc\u22db\u0003",
    "\u0002\u0002\u0002\u22dd\u22e3\u0003\u0002\u0002\u0002\u22de\u22e1\u0007",
    ";\u0002\u0002\u22df\u22e2\u0005\u0382\u01c2\u0002\u22e0\u22e2\u0005",
    "\u03f8\u01fd\u0002\u22e1\u22df\u0003\u0002\u0002\u0002\u22e1\u22e0\u0003",
    "\u0002\u0002\u0002\u22e2\u22e4\u0003\u0002\u0002\u0002\u22e3\u22de\u0003",
    "\u0002\u0002\u0002\u22e3\u22e4\u0003\u0002\u0002\u0002\u22e4\u22e5\u0003",
    "\u0002\u0002\u0002\u22e5\u22e6\u0007\u0361\u0002\u0002\u22e6\u03d3\u0003",
    "\u0002\u0002\u0002\u22e7\u22e8\u0007\u019f\u0002\u0002\u22e8\u22e9\u0007",
    "\u0360\u0002\u0002\u22e9\u22ea\u0005^0\u0002\u22ea\u22ed\u0007>\u0002",
    "\u0002\u22eb\u22ee\u0005\u0386\u01c4\u0002\u22ec\u22ee\u0005\u03f8\u01fd",
    "\u0002\u22ed\u22eb\u0003\u0002\u0002\u0002\u22ed\u22ec\u0003\u0002\u0002",
    "\u0002\u22ee\u22ef\u0003\u0002\u0002\u0002\u22ef\u22f0\u0007\u0361\u0002",
    "\u0002\u22f0\u03d5\u0003\u0002\u0002\u0002\u22f1\u22f2\u0007\u0016\u0002",
    "\u0002\u22f2\u22f4\u0005\u03f8\u01fd\u0002\u22f3\u22f5\u0005\u03d8\u01ed",
    "\u0002\u22f4\u22f3\u0003\u0002\u0002\u0002\u22f5\u22f6\u0003\u0002\u0002",
    "\u0002\u22f6\u22f4\u0003\u0002\u0002\u0002\u22f6\u22f7\u0003\u0002\u0002",
    "\u0002\u22f7\u22fa\u0003\u0002\u0002\u0002\u22f8\u22f9\u00072\u0002",
    "\u0002\u22f9\u22fb\u0005\u03f2\u01fa\u0002\u22fa\u22f8\u0003\u0002\u0002",
    "\u0002\u22fa\u22fb\u0003\u0002\u0002\u0002\u22fb\u22fc\u0003\u0002\u0002",
    "\u0002\u22fc\u22fd\u0007\u01ea\u0002\u0002\u22fd\u230b\u0003\u0002\u0002",
    "\u0002\u22fe\u2300\u0007\u0016\u0002\u0002\u22ff\u2301\u0005\u03d8\u01ed",
    "\u0002\u2300\u22ff\u0003\u0002\u0002\u0002\u2301\u2302\u0003\u0002\u0002",
    "\u0002\u2302\u2300\u0003\u0002\u0002\u0002\u2302\u2303\u0003\u0002\u0002",
    "\u0002\u2303\u2306\u0003\u0002\u0002\u0002\u2304\u2305\u00072\u0002",
    "\u0002\u2305\u2307\u0005\u03f2\u01fa\u0002\u2306\u2304\u0003\u0002\u0002",
    "\u0002\u2306\u2307\u0003\u0002\u0002\u0002\u2307\u2308\u0003\u0002\u0002",
    "\u0002\u2308\u2309\u0007\u01ea\u0002\u0002\u2309\u230b\u0003\u0002\u0002",
    "\u0002\u230a\u22f1\u0003\u0002\u0002\u0002\u230a\u22fe\u0003\u0002\u0002",
    "\u0002\u230b\u03d7\u0003\u0002\u0002\u0002\u230c\u230d\u0007\u00a7\u0002",
    "\u0002\u230d\u230e\u0005\u03f2\u01fa\u0002\u230e\u230f\u0007\u0098\u0002",
    "\u0002\u230f\u2310\u0005\u03f2\u01fa\u0002\u2310\u03d9\u0003\u0002\u0002",
    "\u0002\u2311\u2312\u0007\u0225\u0002\u0002\u2312\u2317\u0005\u03dc\u01ef",
    "\u0002\u2313\u2314\u0007\u0364\u0002\u0002\u2314\u2316\u0005\u03dc\u01ef",
    "\u0002\u2315\u2313\u0003\u0002\u0002\u0002\u2316\u2319\u0003\u0002\u0002",
    "\u0002\u2317\u2315\u0003\u0002\u0002\u0002\u2317\u2318\u0003\u0002\u0002",
    "\u0002\u2318\u2320\u0003\u0002\u0002\u0002\u2319\u2317\u0003\u0002\u0002",
    "\u0002\u231a\u231b\u0007\u0225\u0002\u0002\u231b\u231c\u0005\u0382\u01c2",
    "\u0002\u231c\u231d\u0007\u0352\u0002\u0002\u231d\u231e\u0005\u0382\u01c2",
    "\u0002\u231e\u2320\u0003\u0002\u0002\u0002\u231f\u2311\u0003\u0002\u0002",
    "\u0002\u231f\u231a\u0003\u0002\u0002\u0002\u2320\u03db\u0003\u0002\u0002",
    "\u0002\u2321\u2323\u0005\u0382\u01c2\u0002\u2322\u2324\t\u0089\u0002",
    "\u0002\u2323\u2322\u0003\u0002\u0002\u0002\u2323\u2324\u0003\u0002\u0002",
    "\u0002\u2324\u03dd\u0003\u0002\u0002\u0002\u2325\u2326\u0006\u01f0t",
    "\u0002\u2326\u232a\u0005\u03e0\u01f1\u0002\u2327\u2328\u0006\u01f0u",
    "\u0002\u2328\u232a\u0005\u03e2\u01f2\u0002\u2329\u2325\u0003\u0002\u0002",
    "\u0002\u2329\u2327\u0003\u0002\u0002\u0002\u232a\u03df\u0003\u0002\u0002",
    "\u0002\u232b\u232c\t\u008a\u0002\u0002\u232c\u232e\u0007\u0360\u0002",
    "\u0002\u232d\u232f\t2\u0002\u0002\u232e\u232d\u0003\u0002\u0002\u0002",
    "\u232e\u232f\u0003\u0002\u0002\u0002\u232f\u2330\u0003\u0002\u0002\u0002",
    "\u2330\u2331\u0005\u03f2\u01fa\u0002\u2331\u2332\u0007\u0361\u0002\u0002",
    "\u2332\u2364\u0003\u0002\u0002\u0002\u2333\u2334\u0007\u018b\u0002\u0002",
    "\u2334\u233a\u0007\u0360\u0002\u0002\u2335\u233b\u0007\u034d\u0002\u0002",
    "\u2336\u2338\u0007\t\u0002\u0002\u2337\u2336\u0003\u0002\u0002\u0002",
    "\u2337\u2338\u0003\u0002\u0002\u0002\u2338\u2339\u0003\u0002\u0002\u0002",
    "\u2339\u233b\u0005\u03f2\u01fa\u0002\u233a\u2335\u0003\u0002\u0002\u0002",
    "\u233a\u2337\u0003\u0002\u0002\u0002\u233b\u233c\u0003\u0002\u0002\u0002",
    "\u233c\u2364\u0007\u0361\u0002\u0002\u233d\u233e\u0007\u018b\u0002\u0002",
    "\u233e\u233f\u0007\u0360\u0002\u0002\u233f\u2340\u0007.\u0002\u0002",
    "\u2340\u2341\u0005\u03f0\u01f9\u0002\u2341\u2342\u0007\u0361\u0002\u0002",
    "\u2342\u2364\u0003\u0002\u0002\u0002\u2343\u2344\t\u008b\u0002\u0002",
    "\u2344\u2346\u0007\u0360\u0002\u0002\u2345\u2347\u0007\t\u0002\u0002",
    "\u2346\u2345\u0003\u0002\u0002\u0002\u2346\u2347\u0003\u0002\u0002\u0002",
    "\u2347\u2348\u0003\u0002\u0002\u0002\u2348\u2349\u0005\u03f2\u01fa\u0002",
    "\u2349\u234a\u0007\u0361\u0002\u0002\u234a\u2364\u0003\u0002\u0002\u0002",
    "\u234b\u234c\u0007\u018c\u0002\u0002\u234c\u234e\u0007\u0360\u0002\u0002",
    "\u234d\u234f\u0007.\u0002\u0002\u234e\u234d\u0003\u0002\u0002\u0002",
    "\u234e\u234f\u0003\u0002\u0002\u0002\u234f\u2350\u0003\u0002\u0002\u0002",
    "\u2350\u235b\u0005\u03f0\u01f9\u0002\u2351\u2352\u0007n\u0002\u0002",
    "\u2352\u2353\u0007\u0013\u0002\u0002\u2353\u2358\u0005\u0196\u00cc\u0002",
    "\u2354\u2355\u0007\u0364\u0002\u0002\u2355\u2357\u0005\u0196\u00cc\u0002",
    "\u2356\u2354\u0003\u0002\u0002\u0002\u2357\u235a\u0003\u0002\u0002\u0002",
    "\u2358\u2356\u0003\u0002\u0002\u0002\u2358\u2359\u0003\u0002\u0002\u0002",
    "\u2359\u235c\u0003\u0002\u0002\u0002\u235a\u2358\u0003\u0002\u0002\u0002",
    "\u235b\u2351\u0003\u0002\u0002\u0002\u235b\u235c\u0003\u0002\u0002\u0002",
    "\u235c\u235f\u0003\u0002\u0002\u0002\u235d\u235e\u0007\u0089\u0002\u0002",
    "\u235e\u2360\u0007\u0372\u0002\u0002\u235f\u235d\u0003\u0002\u0002\u0002",
    "\u235f\u2360\u0003\u0002\u0002\u0002\u2360\u2361\u0003\u0002\u0002\u0002",
    "\u2361\u2362\u0007\u0361\u0002\u0002\u2362\u2364\u0003\u0002\u0002\u0002",
    "\u2363\u232b\u0003\u0002\u0002\u0002\u2363\u2333\u0003\u0002\u0002\u0002",
    "\u2363\u233d\u0003\u0002\u0002\u0002\u2363\u2343\u0003\u0002\u0002\u0002",
    "\u2363\u234b\u0003\u0002\u0002\u0002\u2364\u03e1\u0003\u0002\u0002\u0002",
    "\u2365\u2366\u0005\u0376\u01bc\u0002\u2366\u2369\u0007\u0360\u0002\u0002",
    "\u2367\u236a\u0007\u034d\u0002\u0002\u2368\u236a\u0005\u03f2\u01fa\u0002",
    "\u2369\u2367\u0003\u0002\u0002\u0002\u2369\u2368\u0003\u0002\u0002\u0002",
    "\u236a\u236b\u0003\u0002\u0002\u0002\u236b\u236e\u0007\u0361\u0002\u0002",
    "\u236c\u236d\u0007\u0142\u0002\u0002\u236d\u236f\u0005\u03e4\u01f3\u0002",
    "\u236e\u236c\u0003\u0002\u0002\u0002\u236e\u236f\u0003\u0002\u0002\u0002",
    "\u236f\u03e3\u0003\u0002\u0002\u0002\u2370\u2382\u0007\u0360\u0002\u0002",
    "\u2371\u2372\u0007r\u0002\u0002\u2372\u2380\u0007\u0013\u0002\u0002",
    "\u2373\u2375\u0005\u03f8\u01fd\u0002\u2374\u2373\u0003\u0002\u0002\u0002",
    "\u2375\u2376\u0003\u0002\u0002\u0002\u2376\u2374\u0003\u0002\u0002\u0002",
    "\u2376\u2377\u0003\u0002\u0002\u0002\u2377\u2381\u0003\u0002\u0002\u0002",
    "\u2378\u237a\u0007\u0360\u0002\u0002\u2379\u237b\u0005\u03f8\u01fd\u0002",
    "\u237a\u2379\u0003\u0002\u0002\u0002\u237b\u237c\u0003\u0002\u0002\u0002",
    "\u237c\u237a\u0003\u0002\u0002\u0002\u237c\u237d\u0003\u0002\u0002\u0002",
    "\u237d\u237e\u0003\u0002\u0002\u0002\u237e\u237f\u0007\u0361\u0002\u0002",
    "\u237f\u2381\u0003\u0002\u0002\u0002\u2380\u2374\u0003\u0002\u0002\u0002",
    "\u2380\u2378\u0003\u0002\u0002\u0002\u2381\u2383\u0003\u0002\u0002\u0002",
    "\u2382\u2371\u0003\u0002\u0002\u0002\u2382\u2383\u0003\u0002\u0002\u0002",
    "\u2383\u2388\u0003\u0002\u0002\u0002\u2384\u2386\u0005\u0194\u00cb\u0002",
    "\u2385\u2387\u0005\u03e6\u01f4\u0002\u2386\u2385\u0003\u0002\u0002\u0002",
    "\u2386\u2387\u0003\u0002\u0002\u0002\u2387\u2389\u0003\u0002\u0002\u0002",
    "\u2388\u2384\u0003\u0002\u0002\u0002\u2388\u2389\u0003\u0002\u0002\u0002",
    "\u2389\u238a\u0003\u0002\u0002\u0002\u238a\u238b\u0007\u0361\u0002\u0002",
    "\u238b\u03e5\u0003\u0002\u0002\u0002\u238c\u2393\t\u008c\u0002\u0002",
    "\u238d\u2394\u0005\u03ea\u01f6\u0002\u238e\u238f\u0007\u0011\u0002\u0002",
    "\u238f\u2390\u0005\u03e8\u01f5\u0002\u2390\u2391\u0007\r\u0002\u0002",
    "\u2391\u2392\u0005\u03ec\u01f7\u0002\u2392\u2394\u0003\u0002\u0002\u0002",
    "\u2393\u238d\u0003\u0002\u0002\u0002\u2393\u238e\u0003\u0002\u0002\u0002",
    "\u2394\u03e7\u0003\u0002\u0002\u0002\u2395\u2396\u0007\u0128\u0002\u0002",
    "\u2396\u239d\u0007\u00ff\u0002\u0002\u2397\u2398\u0007\u00c6\u0002\u0002",
    "\u2398\u239d\u0007\u0290\u0002\u0002\u2399\u239a\u0005\u03f8\u01fd\u0002",
    "\u239a\u239b\t\u008d\u0002\u0002\u239b\u239d\u0003\u0002\u0002\u0002",
    "\u239c\u2395\u0003\u0002\u0002\u0002\u239c\u2397\u0003\u0002\u0002\u0002",
    "\u239c\u2399\u0003\u0002\u0002\u0002\u239d\u03e9\u0003\u0002\u0002\u0002",
    "\u239e\u239f\u0007\u0128\u0002\u0002\u239f\u23a6\u0007\u00ff\u0002\u0002",
    "\u23a0\u23a1\u0007\u00c6\u0002\u0002\u23a1\u23a6\u0007\u0290\u0002\u0002",
    "\u23a2\u23a3\u0005\u03f8\u01fd\u0002\u23a3\u23a4\u0007\u00ff\u0002\u0002",
    "\u23a4\u23a6\u0003\u0002\u0002\u0002\u23a5\u239e\u0003\u0002\u0002\u0002",
    "\u23a5\u23a0\u0003\u0002\u0002\u0002\u23a5\u23a2\u0003\u0002\u0002\u0002",
    "\u23a6\u03eb\u0003\u0002\u0002\u0002\u23a7\u23a8\u0007\u0128\u0002\u0002",
    "\u23a8\u23af\u0007\u00d1\u0002\u0002\u23a9\u23aa\u0007\u00c6\u0002\u0002",
    "\u23aa\u23af\u0007\u0290\u0002\u0002\u23ab\u23ac\u0005\u03f8\u01fd\u0002",
    "\u23ac\u23ad\t\u008d\u0002\u0002\u23ad\u23af\u0003\u0002\u0002\u0002",
    "\u23ae\u23a7\u0003\u0002\u0002\u0002\u23ae\u23a9\u0003\u0002\u0002\u0002",
    "\u23ae\u23ab\u0003\u0002\u0002\u0002\u23af\u03ed\u0003\u0002\u0002\u0002",
    "\u23b0\u23b1\t\u008e\u0002\u0002\u23b1\u23b2\u0007\u0360\u0002\u0002",
    "\u23b2\u23b3\u0005\u03f2\u01fa\u0002\u23b3\u23b4\u0007\u0361\u0002\u0002",
    "\u23b4\u03ef\u0003\u0002\u0002\u0002\u23b5\u23ba\u0005\u03f2\u01fa\u0002",
    "\u23b6\u23b7\u0007\u0364\u0002\u0002\u23b7\u23b9\u0005\u03f2\u01fa\u0002",
    "\u23b8\u23b6\u0003\u0002\u0002\u0002\u23b9\u23bc\u0003\u0002\u0002\u0002",
    "\u23ba\u23b8\u0003\u0002\u0002\u0002\u23ba\u23bb\u0003\u0002\u0002\u0002",
    "\u23bb\u03f1\u0003\u0002\u0002\u0002\u23bc\u23ba\u0003\u0002\u0002\u0002",
    "\u23bd\u23c3\u0005\u0390\u01c9\u0002\u23be\u23c3\u0005\u035a\u01ae\u0002",
    "\u23bf\u23c3\u0005\u03c8\u01e5\u0002\u23c0\u23c3\u0005\u03f8\u01fd\u0002",
    "\u23c1\u23c3\u0005\u03f4\u01fb\u0002\u23c2\u23bd\u0003\u0002\u0002\u0002",
    "\u23c2\u23be\u0003\u0002\u0002\u0002\u23c2\u23bf\u0003\u0002\u0002\u0002",
    "\u23c2\u23c0\u0003\u0002\u0002\u0002\u23c2\u23c1\u0003\u0002\u0002\u0002",
    "\u23c3\u03f3\u0003\u0002\u0002\u0002\u23c4\u23c5\u0005\u042a\u0216\u0002",
    "\u23c5\u03f5\u0003\u0002\u0002\u0002\u23c6\u23cb\u0005\u03f8\u01fd\u0002",
    "\u23c7\u23c8\u0005\u042a\u0216\u0002\u23c8\u23c9\b\u01fc\u0001\u0002",
    "\u23c9\u23cb\u0003\u0002\u0002\u0002\u23ca\u23c6\u0003\u0002\u0002\u0002",
    "\u23ca\u23c7\u0003\u0002\u0002\u0002\u23cb\u03f7\u0003\u0002\u0002\u0002",
    "\u23cc\u23cd\b\u01fd\u0001\u0002\u23cd\u23ce\t\u008f\u0002\u0002\u23ce",
    "\u23e2\u0005\u03f8\u01fd\u0007\u23cf\u23d0\u0005\u03fa\u01fe\u0002\u23d0",
    "\u23d2\u0007O\u0002\u0002\u23d1\u23d3\u0007f\u0002\u0002\u23d2\u23d1",
    "\u0003\u0002\u0002\u0002\u23d2\u23d3\u0003\u0002\u0002\u0002\u23d3\u23d4",
    "\u0003\u0002\u0002\u0002\u23d4\u23d5\t\u0090\u0002\u0002\u23d5\u23e2",
    "\u0003\u0002\u0002\u0002\u23d6\u23d7\u0005\u03fa\u01fe\u0002\u23d7\u23d9",
    "\u0007O\u0002\u0002\u23d8\u23da\u0007f\u0002\u0002\u23d9\u23d8\u0003",
    "\u0002\u0002\u0002\u23d9\u23da\u0003\u0002\u0002\u0002\u23da\u23dc\u0003",
    "\u0002\u0002\u0002\u23db\u23dd\t\u0090\u0002\u0002\u23dc\u23db\u0003",
    "\u0002\u0002\u0002\u23dc\u23dd\u0003\u0002\u0002\u0002\u23dd\u23de\u0003",
    "\u0002\u0002\u0002\u23de\u23df\b\u01fd\u0001\u0002\u23df\u23e2\u0003",
    "\u0002\u0002\u0002\u23e0\u23e2\u0005\u03fa\u01fe\u0002\u23e1\u23cc\u0003",
    "\u0002\u0002\u0002\u23e1\u23cf\u0003\u0002\u0002\u0002\u23e1\u23d6\u0003",
    "\u0002\u0002\u0002\u23e1\u23e0\u0003\u0002\u0002\u0002\u23e2\u23e9\u0003",
    "\u0002\u0002\u0002\u23e3\u23e4\f\u0006\u0002\u0002\u23e4\u23e5\u0005",
    "\u0404\u0203\u0002\u23e5\u23e6\u0005\u03f8\u01fd\u0007\u23e6\u23e8\u0003",
    "\u0002\u0002\u0002\u23e7\u23e3\u0003\u0002\u0002\u0002\u23e8\u23eb\u0003",
    "\u0002\u0002\u0002\u23e9\u23e7\u0003\u0002\u0002\u0002\u23e9\u23ea\u0003",
    "\u0002\u0002\u0002\u23ea\u03f9\u0003\u0002\u0002\u0002\u23eb\u23e9\u0003",
    "\u0002\u0002\u0002\u23ec\u23ed\b\u01fe\u0001\u0002\u23ed\u23ee\u0005",
    "\u03fc\u01ff\u0002\u23ee\u2428\u0003\u0002\u0002\u0002\u23ef\u23f0\f",
    "\t\u0002\u0002\u23f0\u23f1\u0005\u0402\u0202\u0002\u23f1\u23f2\u0005",
    "\u03fa\u01fe\n\u23f2\u2427\u0003\u0002\u0002\u0002\u23f3\u23f5\f\u0007",
    "\u0002\u0002\u23f4\u23f6\u0007f\u0002\u0002\u23f5\u23f4\u0003\u0002",
    "\u0002\u0002\u23f5\u23f6\u0003\u0002\u0002\u0002\u23f6\u23f7\u0003\u0002",
    "\u0002\u0002\u23f7\u23f8\u0007\u0011\u0002\u0002\u23f8\u23f9\u0005\u03fa",
    "\u01fe\u0002\u23f9\u23fa\u0007\r\u0002\u0002\u23fa\u23fb\u0005\u03fa",
    "\u01fe\b\u23fb\u2427\u0003\u0002\u0002\u0002\u23fc\u23fd\f\u0006\u0002",
    "\u0002\u23fd\u23fe\u0007\u02a2\u0002\u0002\u23fe\u23ff\u0007X\u0002",
    "\u0002\u23ff\u2427\u0005\u03fa\u01fe\u0007\u2400\u2402\f\u0004\u0002",
    "\u0002\u2401\u2403\u0007f\u0002\u0002\u2402\u2401\u0003\u0002\u0002",
    "\u0002\u2402\u2403\u0003\u0002\u0002\u0002\u2403\u2404\u0003\u0002\u0002",
    "\u0002\u2404\u2405\t\u0091\u0002\u0002\u2405\u2427\u0005\u03fa\u01fe",
    "\u0005\u2406\u2408\f\u000b\u0002\u0002\u2407\u2409\u0007f\u0002\u0002",
    "\u2408\u2407\u0003\u0002\u0002\u0002\u2408\u2409\u0003\u0002\u0002\u0002",
    "\u2409\u240a\u0003\u0002\u0002\u0002\u240a\u240b\u0007G\u0002\u0002",
    "\u240b\u240e\u0007\u0360\u0002\u0002\u240c\u240f\u0005\u01aa\u00d6\u0002",
    "\u240d\u240f\u0005\u03b4\u01db\u0002\u240e\u240c\u0003\u0002\u0002\u0002",
    "\u240e\u240d\u0003\u0002\u0002\u0002\u240f\u2410\u0003\u0002\u0002\u0002",
    "\u2410\u2411\u0007\u0361\u0002\u0002\u2411\u2427\u0003\u0002\u0002\u0002",
    "\u2412\u2413\f\n\u0002\u0002\u2413\u2414\u0007O\u0002\u0002\u2414\u2427",
    "\u0005\u038e\u01c8\u0002\u2415\u2416\f\b\u0002\u0002\u2416\u2417\u0005",
    "\u0402\u0202\u0002\u2417\u2418\t\u0092\u0002\u0002\u2418\u2419\u0007",
    "\u0360\u0002\u0002\u2419\u241a\u0005\u01aa\u00d6\u0002\u241a\u241b\u0007",
    "\u0361\u0002\u0002\u241b\u2427\u0003\u0002\u0002\u0002\u241c\u241e\f",
    "\u0005\u0002\u0002\u241d\u241f\u0007f\u0002\u0002\u241e\u241d\u0003",
    "\u0002\u0002\u0002\u241e\u241f\u0003\u0002\u0002\u0002\u241f\u2420\u0003",
    "\u0002\u0002\u0002\u2420\u2421\u0007X\u0002\u0002\u2421\u2424\u0005",
    "\u03fa\u01fe\u0002\u2422\u2423\u0007\u01f0\u0002\u0002\u2423\u2425\u0007",
    "\u0372\u0002\u0002\u2424\u2422\u0003\u0002\u0002\u0002\u2424\u2425\u0003",
    "\u0002\u0002\u0002\u2425\u2427\u0003\u0002\u0002\u0002\u2426\u23ef\u0003",
    "\u0002\u0002\u0002\u2426\u23f3\u0003\u0002\u0002\u0002\u2426\u23fc\u0003",
    "\u0002\u0002\u0002\u2426\u2400\u0003\u0002\u0002\u0002\u2426\u2406\u0003",
    "\u0002\u0002\u0002\u2426\u2412\u0003\u0002\u0002\u0002\u2426\u2415\u0003",
    "\u0002\u0002\u0002\u2426\u241c\u0003\u0002\u0002\u0002\u2427\u242a\u0003",
    "\u0002\u0002\u0002\u2428\u2426\u0003\u0002\u0002\u0002\u2428\u2429\u0003",
    "\u0002\u0002\u0002\u2429\u03fb\u0003\u0002\u0002\u0002\u242a\u2428\u0003",
    "\u0002\u0002\u0002\u242b\u242c\b\u01ff\u0001\u0002\u242c\u2465\u0005",
    "\u0390\u01c9\u0002\u242d\u2465\u0005\u035a\u01ae\u0002\u242e\u2465\u0005",
    "\u03c8\u01e5\u0002\u242f\u2430\u0006\u01ff\u007f\u0002\u2430\u2465\u0005",
    "\u04a2\u0252\u0002\u2431\u2434\u0006\u01ff\u0080\u0002\u2432\u2435\u0005",
    "\u04c2\u0262\u0002\u2433\u2435\u0007\u008c\u0002\u0002\u2434\u2432\u0003",
    "\u0002\u0002\u0002\u2434\u2433\u0003\u0002\u0002\u0002\u2435\u2436\u0003",
    "\u0002\u0002\u0002\u2436\u2465\u0005\u040a\u0206\u0002\u2437\u2438\u0006",
    "\u01ff\u0081\u0002\u2438\u2465\u0005\u0366\u01b4\u0002\u2439\u243d\u0005",
    "\u0400\u0201\u0002\u243a\u243d\u0005\u03fe\u0200\u0002\u243b\u243d\u0007",
    "f\u0002\u0002\u243c\u2439\u0003\u0002\u0002\u0002\u243c\u243a\u0003",
    "\u0002\u0002\u0002\u243c\u243b\u0003\u0002\u0002\u0002\u243d\u243e\u0003",
    "\u0002\u0002\u0002\u243e\u2465\u0005\u03fc\u01ff\u000b\u243f\u2440\u0007",
    "\u0169\u0002\u0002\u2440\u2465\u0005\u03fc\u01ff\n\u2441\u2442\u0007",
    "\u0360\u0002\u0002\u2442\u2447\u0005\u03f8\u01fd\u0002\u2443\u2444\u0007",
    "\u0364\u0002\u0002\u2444\u2446\u0005\u03f8\u01fd\u0002\u2445\u2443\u0003",
    "\u0002\u0002\u0002\u2446\u2449\u0003\u0002\u0002\u0002\u2447\u2445\u0003",
    "\u0002\u0002\u0002\u2447\u2448\u0003\u0002\u0002\u0002\u2448\u244a\u0003",
    "\u0002\u0002\u0002\u2449\u2447\u0003\u0002\u0002\u0002\u244a\u244b\u0007",
    "\u0361\u0002\u0002\u244b\u2465\u0003\u0002\u0002\u0002\u244c\u244d\u0007",
    "\u0290\u0002\u0002\u244d\u244e\u0007\u0360\u0002\u0002\u244e\u2451\u0005",
    "\u03f8\u01fd\u0002\u244f\u2450\u0007\u0364\u0002\u0002\u2450\u2452\u0005",
    "\u03f8\u01fd\u0002\u2451\u244f\u0003\u0002\u0002\u0002\u2452\u2453\u0003",
    "\u0002\u0002\u0002\u2453\u2451\u0003\u0002\u0002\u0002\u2453\u2454\u0003",
    "\u0002\u0002\u0002\u2454\u2455\u0003\u0002\u0002\u0002\u2455\u2456\u0007",
    "\u0361\u0002\u0002\u2456\u2465\u0003\u0002\u0002\u0002\u2457\u2458\u0007",
    "6\u0002\u0002\u2458\u2459\u0007\u0360\u0002\u0002\u2459\u245a\u0005",
    "\u01aa\u00d6\u0002\u245a\u245b\u0007\u0361\u0002\u0002\u245b\u2465\u0003",
    "\u0002\u0002\u0002\u245c\u245d\u0007\u0360\u0002\u0002\u245d\u245e\u0005",
    "\u01aa\u00d6\u0002\u245e\u245f\u0007\u0361\u0002\u0002\u245f\u2465\u0003",
    "\u0002\u0002\u0002\u2460\u2461\u0007M\u0002\u0002\u2461\u2462\u0005",
    "\u03f8\u01fd\u0002\u2462\u2463\u0005^0\u0002\u2463\u2465\u0003\u0002",
    "\u0002\u0002\u2464\u242b\u0003\u0002\u0002\u0002\u2464\u242d\u0003\u0002",
    "\u0002\u0002\u2464\u242e\u0003\u0002\u0002\u0002\u2464\u242f\u0003\u0002",
    "\u0002\u0002\u2464\u2431\u0003\u0002\u0002\u0002\u2464\u2437\u0003\u0002",
    "\u0002\u0002\u2464\u243c\u0003\u0002\u0002\u0002\u2464\u243f\u0003\u0002",
    "\u0002\u0002\u2464\u2441\u0003\u0002\u0002\u0002\u2464\u244c\u0003\u0002",
    "\u0002\u0002\u2464\u2457\u0003\u0002\u0002\u0002\u2464\u245c\u0003\u0002",
    "\u0002\u0002\u2464\u2460\u0003\u0002\u0002\u0002\u2465\u2473\u0003\u0002",
    "\u0002\u0002\u2466\u2467\f\u0004\u0002\u0002\u2467\u2468\u0005\u0406",
    "\u0204\u0002\u2468\u2469\u0005\u03fc\u01ff\u0005\u2469\u2472\u0003\u0002",
    "\u0002\u0002\u246a\u246b\f\u0003\u0002\u0002\u246b\u246c\u0005\u0408",
    "\u0205\u0002\u246c\u246d\u0005\u03fc\u01ff\u0004\u246d\u2472\u0003\u0002",
    "\u0002\u0002\u246e\u246f\f\r\u0002\u0002\u246f\u2470\u0007\u001b\u0002",
    "\u0002\u2470\u2472\u0005\u036a\u01b6\u0002\u2471\u2466\u0003\u0002\u0002",
    "\u0002\u2471\u246a\u0003\u0002\u0002\u0002\u2471\u246e\u0003\u0002\u0002",
    "\u0002\u2472\u2475\u0003\u0002\u0002\u0002\u2473\u2471\u0003\u0002\u0002",
    "\u0002\u2473\u2474\u0003\u0002\u0002\u0002\u2474\u03fd\u0003\u0002\u0002",
    "\u0002\u2475\u2473\u0003\u0002\u0002\u0002\u2476\u2477\u0006\u0200\u0085",
    "\u0002\u2477\u2478\u0007\u0101\u0002\u0002\u2478\u03ff\u0003\u0002\u0002",
    "\u0002\u2479\u247a\t\u0093\u0002\u0002\u247a\u0401\u0003\u0002\u0002",
    "\u0002\u247b\u248a\u0007\u0355\u0002\u0002\u247c\u248a\u0007\u0356\u0002",
    "\u0002\u247d\u248a\u0007\u0357\u0002\u0002\u247e\u247f\u0007\u0357\u0002",
    "\u0002\u247f\u248a\u0007\u0355\u0002\u0002\u2480\u2481\u0007\u0356\u0002",
    "\u0002\u2481\u248a\u0007\u0355\u0002\u0002\u2482\u2483\u0007\u0357\u0002",
    "\u0002\u2483\u248a\u0007\u0356\u0002\u0002\u2484\u2485\u0007\u0358\u0002",
    "\u0002\u2485\u248a\u0007\u0355\u0002\u0002\u2486\u2487\u0007\u0357\u0002",
    "\u0002\u2487\u2488\u0007\u0355\u0002\u0002\u2488\u248a\u0007\u0356\u0002",
    "\u0002\u2489\u247b\u0003\u0002\u0002\u0002\u2489\u247c\u0003\u0002\u0002",
    "\u0002\u2489\u247d\u0003\u0002\u0002\u0002\u2489\u247e\u0003\u0002\u0002",
    "\u0002\u2489\u2480\u0003\u0002\u0002\u0002\u2489\u2482\u0003\u0002\u0002",
    "\u0002\u2489\u2484\u0003\u0002\u0002\u0002\u2489\u2486\u0003\u0002\u0002",
    "\u0002\u248a\u0403\u0003\u0002\u0002\u0002\u248b\u2493\u0007\r\u0002",
    "\u0002\u248c\u248d\u0007\u035b\u0002\u0002\u248d\u2493\u0007\u035b\u0002",
    "\u0002\u248e\u2493\u0007\u00ac\u0002\u0002\u248f\u2493\u0007m\u0002",
    "\u0002\u2490\u2491\u0007\u035a\u0002\u0002\u2491\u2493\u0007\u035a\u0002",
    "\u0002\u2492\u248b\u0003\u0002\u0002\u0002\u2492\u248c\u0003\u0002\u0002",
    "\u0002\u2492\u248e\u0003\u0002\u0002\u0002\u2492\u248f\u0003\u0002\u0002",
    "\u0002\u2492\u2490\u0003\u0002\u0002\u0002\u2493\u0405\u0003\u0002\u0002",
    "\u0002\u2494\u2495\u0007\u0357\u0002\u0002\u2495\u249c\u0007\u0357\u0002",
    "\u0002\u2496\u2497\u0007\u0356\u0002\u0002\u2497\u249c\u0007\u0356\u0002",
    "\u0002\u2498\u249c\u0007\u035b\u0002\u0002\u2499\u249c\u0007\u035c\u0002",
    "\u0002\u249a\u249c\u0007\u035a\u0002\u0002\u249b\u2494\u0003\u0002\u0002",
    "\u0002\u249b\u2496\u0003\u0002\u0002\u0002\u249b\u2498\u0003\u0002\u0002",
    "\u0002\u249b\u2499\u0003\u0002\u0002\u0002\u249b\u249a\u0003\u0002\u0002",
    "\u0002\u249c\u0407\u0003\u0002\u0002\u0002\u249d\u249e\t\u0094\u0002",
    "\u0002\u249e\u0409\u0003\u0002\u0002\u0002\u249f\u24a0\u0007\u034f\u0002",
    "\u0002\u24a0\u24a1\t\u0095\u0002\u0002\u24a1\u040b\u0003\u0002\u0002",
    "\u0002\u24a2\u24a3\t\u0096\u0002\u0002\u24a3\u040d\u0003\u0002\u0002",
    "\u0002\u24a4\u24a5\t\u0097\u0002\u0002\u24a5\u040f\u0003\u0002\u0002",
    "\u0002\u24a6\u24a7\t\u0098\u0002\u0002\u24a7\u0411\u0003\u0002\u0002",
    "\u0002\u24a8\u24a9\t\u0099\u0002\u0002\u24a9\u0413\u0003\u0002\u0002",
    "\u0002\u24aa\u24ab\t\u009a\u0002\u0002\u24ab\u0415\u0003\u0002\u0002",
    "\u0002\u24ac\u25da\u0007\u01aa\u0002\u0002\u24ad\u25da\u0007\u01ab\u0002",
    "\u0002\u24ae\u25da\u0007\u01ac\u0002\u0002\u24af\u25da\u0007\u01ad\u0002",
    "\u0002\u24b0\u25da\u0007\u01ae\u0002\u0002\u24b1\u25da\u0007\u01af\u0002",
    "\u0002\u24b2\u25da\u0007\u01b0\u0002\u0002\u24b3\u25da\u0007\u01b1\u0002",
    "\u0002\u24b4\u25da\u0007\u01b2\u0002\u0002\u24b5\u25da\u0007\u01b3\u0002",
    "\u0002\u24b6\u25da\u0007\u01b4\u0002\u0002\u24b7\u25da\u0007\u01b5\u0002",
    "\u0002\u24b8\u25da\u0007\u01b7\u0002\u0002\u24b9\u25da\u0007\u01b8\u0002",
    "\u0002\u24ba\u25da\u0007\u01b9\u0002\u0002\u24bb\u25da\u0007\u01ba\u0002",
    "\u0002\u24bc\u25da\u0007\u01bb\u0002\u0002\u24bd\u25da\u0007\u01bc\u0002",
    "\u0002\u24be\u25da\u0007\u01bd\u0002\u0002\u24bf\u25da\u0007\u01be\u0002",
    "\u0002\u24c0\u25da\u0007\u01bf\u0002\u0002\u24c1\u25da\u0007\u01c0\u0002",
    "\u0002\u24c2\u25da\u0007\u01c1\u0002\u0002\u24c3\u25da\u0007\u01c2\u0002",
    "\u0002\u24c4\u25da\u0007\u01c3\u0002\u0002\u24c5\u25da\u0007\u01c4\u0002",
    "\u0002\u24c6\u25da\u0007\u01c5\u0002\u0002\u24c7\u25da\u0007\u01c6\u0002",
    "\u0002\u24c8\u25da\u0007\u01c7\u0002\u0002\u24c9\u25da\u0007\u01c8\u0002",
    "\u0002\u24ca\u25da\u0007\u01c9\u0002\u0002\u24cb\u25da\u0007\u01ca\u0002",
    "\u0002\u24cc\u25da\u0007\u01cb\u0002\u0002\u24cd\u25da\u0007\u01cc\u0002",
    "\u0002\u24ce\u25da\u0007\u01cd\u0002\u0002\u24cf\u25da\u0007\u01ce\u0002",
    "\u0002\u24d0\u25da\u0007\u01cf\u0002\u0002\u24d1\u25da\u0007\u01d0\u0002",
    "\u0002\u24d2\u25da\u0007\u01d1\u0002\u0002\u24d3\u25da\u0007\u01d2\u0002",
    "\u0002\u24d4\u25da\u0007\u01d3\u0002\u0002\u24d5\u25da\u0007\u01d4\u0002",
    "\u0002\u24d6\u25da\u0007\u01d5\u0002\u0002\u24d7\u25da\u0007\u01d6\u0002",
    "\u0002\u24d8\u25da\u0007\u01d7\u0002\u0002\u24d9\u25da\u0007\u01d8\u0002",
    "\u0002\u24da\u25da\u0007\u01d9\u0002\u0002\u24db\u25da\u0007\u01da\u0002",
    "\u0002\u24dc\u25da\u0007\u01db\u0002\u0002\u24dd\u25da\u0007\u01dc\u0002",
    "\u0002\u24de\u25da\u0007\u01dd\u0002\u0002\u24df\u25da\u0007\u01de\u0002",
    "\u0002\u24e0\u25da\u0007\u01df\u0002\u0002\u24e1\u25da\u0007\u01e0\u0002",
    "\u0002\u24e2\u25da\u0007\u01e1\u0002\u0002\u24e3\u25da\u0007\u01e2\u0002",
    "\u0002\u24e4\u25da\u0007\u01e3\u0002\u0002\u24e5\u25da\u0007\u01e4\u0002",
    "\u0002\u24e6\u25da\u0007\u01e5\u0002\u0002\u24e7\u25da\u0007\u01e6\u0002",
    "\u0002\u24e8\u25da\u0007\u01e7\u0002\u0002\u24e9\u25da\u0007\u01e8\u0002",
    "\u0002\u24ea\u25da\u0007\u01e9\u0002\u0002\u24eb\u25da\u0007\u01eb\u0002",
    "\u0002\u24ec\u25da\u0007\u01ec\u0002\u0002\u24ed\u25da\u0007\u01ed\u0002",
    "\u0002\u24ee\u25da\u0007\u01ee\u0002\u0002\u24ef\u25da\u0007\u01ef\u0002",
    "\u0002\u24f0\u25da\u0007\u01f0\u0002\u0002\u24f1\u25da\u0007\u01f1\u0002",
    "\u0002\u24f2\u25da\u0007\u01f2\u0002\u0002\u24f3\u25da\u0007\u01f3\u0002",
    "\u0002\u24f4\u25da\u0007\u01f4\u0002\u0002\u24f5\u25da\u0007\u01f5\u0002",
    "\u0002\u24f6\u25da\u0007\u01f6\u0002\u0002\u24f7\u25da\u0007\u01f7\u0002",
    "\u0002\u24f8\u25da\u0007\u01f8\u0002\u0002\u24f9\u25da\u0007\u01fa\u0002",
    "\u0002\u24fa\u25da\u0007\u01fb\u0002\u0002\u24fb\u25da\u0007\u01fc\u0002",
    "\u0002\u24fc\u25da\u0007\u01fd\u0002\u0002\u24fd\u25da\u0007\u01fe\u0002",
    "\u0002\u24fe\u25da\u0007\u01ff\u0002\u0002\u24ff\u25da\u0007\u0200\u0002",
    "\u0002\u2500\u25da\u0007\u0201\u0002\u0002\u2501\u25da\u0007\u0202\u0002",
    "\u0002\u2502\u25da\u0007\u0203\u0002\u0002\u2503\u25da\u0007\u0204\u0002",
    "\u0002\u2504\u25da\u0007\u0205\u0002\u0002\u2505\u25da\u0007\u0207\u0002",
    "\u0002\u2506\u25da\u0007\u0208\u0002\u0002\u2507\u25da\u0007\u0209\u0002",
    "\u0002\u2508\u25da\u0007\u020a\u0002\u0002\u2509\u25da\u0007\u020b\u0002",
    "\u0002\u250a\u25da\u0007\u020c\u0002\u0002\u250b\u25da\u0007\u020d\u0002",
    "\u0002\u250c\u25da\u0007\u020e\u0002\u0002\u250d\u25da\u0007\u020f\u0002",
    "\u0002\u250e\u25da\u0007\u0210\u0002\u0002\u250f\u25da\u0007\u0211\u0002",
    "\u0002\u2510\u25da\u0007\u0212\u0002\u0002\u2511\u25da\u0007\u0213\u0002",
    "\u0002\u2512\u25da\u0007\u0214\u0002\u0002\u2513\u25da\u0007\u0215\u0002",
    "\u0002\u2514\u25da\u0007\u0216\u0002\u0002\u2515\u25da\u0007\u0217\u0002",
    "\u0002\u2516\u25da\u0007\u0218\u0002\u0002\u2517\u25da\u0007\u0219\u0002",
    "\u0002\u2518\u25da\u0007\u021a\u0002\u0002\u2519\u25da\u0007\u021b\u0002",
    "\u0002\u251a\u25da\u0007\u021c\u0002\u0002\u251b\u25da\u0007\u021d\u0002",
    "\u0002\u251c\u25da\u0007\u021e\u0002\u0002\u251d\u25da\u0007\u021f\u0002",
    "\u0002\u251e\u25da\u0007\u0220\u0002\u0002\u251f\u25da\u0007\u0221\u0002",
    "\u0002\u2520\u25da\u0007\u0222\u0002\u0002\u2521\u25da\u0007\u0223\u0002",
    "\u0002\u2522\u25da\u0007\u0224\u0002\u0002\u2523\u25da\u0007\u0225\u0002",
    "\u0002\u2524\u25da\u0007\u0226\u0002\u0002\u2525\u25da\u0007\u0227\u0002",
    "\u0002\u2526\u25da\u0007\u0228\u0002\u0002\u2527\u25da\u0007\u0229\u0002",
    "\u0002\u2528\u25da\u0007\u022a\u0002\u0002\u2529\u25da\u0007\u022b\u0002",
    "\u0002\u252a\u25da\u0007\u022c\u0002\u0002\u252b\u25da\u0007\u022d\u0002",
    "\u0002\u252c\u25da\u0007\u022e\u0002\u0002\u252d\u25da\u0007\u022f\u0002",
    "\u0002\u252e\u25da\u0007\u0230\u0002\u0002\u252f\u25da\u0007\u0231\u0002",
    "\u0002\u2530\u25da\u0007\u0232\u0002\u0002\u2531\u25da\u0007\u0233\u0002",
    "\u0002\u2532\u25da\u0007\u0234\u0002\u0002\u2533\u25da\u0007\u0235\u0002",
    "\u0002\u2534\u25da\u0007\u0236\u0002\u0002\u2535\u25da\u0007\u0237\u0002",
    "\u0002\u2536\u25da\u0007\u0238\u0002\u0002\u2537\u25da\u0007\u0239\u0002",
    "\u0002\u2538\u25da\u0007\u023a\u0002\u0002\u2539\u25da\u0007\u023b\u0002",
    "\u0002\u253a\u25da\u0007\u023c\u0002\u0002\u253b\u25da\u0007\u023d\u0002",
    "\u0002\u253c\u25da\u0007\u023e\u0002\u0002\u253d\u25da\u0007\u023f\u0002",
    "\u0002\u253e\u25da\u0007\u0240\u0002\u0002\u253f\u25da\u0007\u0241\u0002",
    "\u0002\u2540\u25da\u0007\u0242\u0002\u0002\u2541\u25da\u0007\u0243\u0002",
    "\u0002\u2542\u25da\u0007\u0244\u0002\u0002\u2543\u25da\u0007\u0245\u0002",
    "\u0002\u2544\u25da\u0007\u0329\u0002\u0002\u2545\u25da\u0007\u0246\u0002",
    "\u0002\u2546\u25da\u0007\u0247\u0002\u0002\u2547\u25da\u0007\u0248\u0002",
    "\u0002\u2548\u25da\u0007\u0249\u0002\u0002\u2549\u25da\u0007\u024a\u0002",
    "\u0002\u254a\u25da\u0007\u024b\u0002\u0002\u254b\u25da\u0007\u024c\u0002",
    "\u0002\u254c\u25da\u0007\u024d\u0002\u0002\u254d\u25da\u0007\u024e\u0002",
    "\u0002\u254e\u25da\u0007\u024f\u0002\u0002\u254f\u25da\u0007\u0250\u0002",
    "\u0002\u2550\u25da\u0007\u0251\u0002\u0002\u2551\u25da\u0007\u0252\u0002",
    "\u0002\u2552\u25da\u0007\u0253\u0002\u0002\u2553\u25da\u0007\u0254\u0002",
    "\u0002\u2554\u25da\u0007\u0255\u0002\u0002\u2555\u25da\u0007\u0256\u0002",
    "\u0002\u2556\u25da\u0007\u0257\u0002\u0002\u2557\u25da\u0007\u0258\u0002",
    "\u0002\u2558\u25da\u0007\u0259\u0002\u0002\u2559\u25da\u0007\u025a\u0002",
    "\u0002\u255a\u25da\u0007\u025b\u0002\u0002\u255b\u25da\u0007\u025c\u0002",
    "\u0002\u255c\u25da\u0007\u025d\u0002\u0002\u255d\u25da\u0007\u025e\u0002",
    "\u0002\u255e\u25da\u0007\u025f\u0002\u0002\u255f\u25da\u0007\u0260\u0002",
    "\u0002\u2560\u25da\u0007\u0261\u0002\u0002\u2561\u25da\u0007\u0262\u0002",
    "\u0002\u2562\u25da\u0007\u0263\u0002\u0002\u2563\u25da\u0007\u0264\u0002",
    "\u0002\u2564\u25da\u0007\u0265\u0002\u0002\u2565\u25da\u0007\u0266\u0002",
    "\u0002\u2566\u25da\u0007\u0267\u0002\u0002\u2567\u25da\u0007\u0268\u0002",
    "\u0002\u2568\u25da\u0007\u026b\u0002\u0002\u2569\u25da\u0007\u026a\u0002",
    "\u0002\u256a\u25da\u0007\u0269\u0002\u0002\u256b\u25da\u0007\u026c\u0002",
    "\u0002\u256c\u25da\u0007\u026d\u0002\u0002\u256d\u25da\u0007\u026e\u0002",
    "\u0002\u256e\u25da\u0007\u026f\u0002\u0002\u256f\u25da\u0007\u0270\u0002",
    "\u0002\u2570\u25da\u0007\u0271\u0002\u0002\u2571\u25da\u0007\u0272\u0002",
    "\u0002\u2572\u25da\u0007\u0273\u0002\u0002\u2573\u25da\u0007\u0274\u0002",
    "\u0002\u2574\u25da\u0007\u0275\u0002\u0002\u2575\u25da\u0007\u0276\u0002",
    "\u0002\u2576\u25da\u0007\u0277\u0002\u0002\u2577\u25da\u0007\u0278\u0002",
    "\u0002\u2578\u25da\u0007\u0279\u0002\u0002\u2579\u25da\u0007\u027a\u0002",
    "\u0002\u257a\u25da\u0007\u027b\u0002\u0002\u257b\u25da\u0007\u027e\u0002",
    "\u0002\u257c\u25da\u0007\u027c\u0002\u0002\u257d\u25da\u0007\u027d\u0002",
    "\u0002\u257e\u25da\u0007\u027f\u0002\u0002\u257f\u25da\u0007\u0280\u0002",
    "\u0002\u2580\u25da\u0007\u0281\u0002\u0002\u2581\u25da\u0007\u0282\u0002",
    "\u0002\u2582\u25da\u0007\u0283\u0002\u0002\u2583\u25da\u0007\u0284\u0002",
    "\u0002\u2584\u25da\u0007\u0285\u0002\u0002\u2585\u25da\u0007\u0286\u0002",
    "\u0002\u2586\u25da\u0007\u0287\u0002\u0002\u2587\u25da\u0007\u0288\u0002",
    "\u0002\u2588\u25da\u0007\u0289\u0002\u0002\u2589\u25da\u0007\u028a\u0002",
    "\u0002\u258a\u25da\u0007\u028b\u0002\u0002\u258b\u25da\u0007\u028c\u0002",
    "\u0002\u258c\u25da\u0007\u028d\u0002\u0002\u258d\u25da\u0007\u028e\u0002",
    "\u0002\u258e\u25da\u0007\u028f\u0002\u0002\u258f\u25da\u0007\u0290\u0002",
    "\u0002\u2590\u25da\u0007\u0291\u0002\u0002\u2591\u25da\u0007\u0292\u0002",
    "\u0002\u2592\u25da\u0007\u0293\u0002\u0002\u2593\u25da\u0007\u0294\u0002",
    "\u0002\u2594\u25da\u0007\u0295\u0002\u0002\u2595\u25da\u0007\u0175\u0002",
    "\u0002\u2596\u25da\u0007\u0296\u0002\u0002\u2597\u25da\u0007\u0297\u0002",
    "\u0002\u2598\u25da\u0007\u0298\u0002\u0002\u2599\u25da\u0007\u0299\u0002",
    "\u0002\u259a\u25da\u0007\u029a\u0002\u0002\u259b\u25da\u0007\u029b\u0002",
    "\u0002\u259c\u25da\u0007\u029c\u0002\u0002\u259d\u25da\u0007\u029d\u0002",
    "\u0002\u259e\u25da\u0007\u029e\u0002\u0002\u259f\u25da\u0007\u029f\u0002",
    "\u0002\u25a0\u25da\u0007\u02a0\u0002\u0002\u25a1\u25da\u0007\u02a1\u0002",
    "\u0002\u25a2\u25da\u0007\u02a2\u0002\u0002\u25a3\u25da\u0007\u02a3\u0002",
    "\u0002\u25a4\u25da\u0007\u02a4\u0002\u0002\u25a5\u25da\u0007\u02a5\u0002",
    "\u0002\u25a6\u25da\u0007\u02a6\u0002\u0002\u25a7\u25da\u0007\u02a7\u0002",
    "\u0002\u25a8\u25da\u0007\u02a8\u0002\u0002\u25a9\u25da\u0007\u02a9\u0002",
    "\u0002\u25aa\u25da\u0007\u02aa\u0002\u0002\u25ab\u25da\u0007\u02ab\u0002",
    "\u0002\u25ac\u25da\u0007\u02ac\u0002\u0002\u25ad\u25da\u0007\u02ad\u0002",
    "\u0002\u25ae\u25da\u0007\u02ae\u0002\u0002\u25af\u25da\u0007\u02af\u0002",
    "\u0002\u25b0\u25da\u0007\u02b0\u0002\u0002\u25b1\u25da\u0007\u02b1\u0002",
    "\u0002\u25b2\u25da\u0007\u02b2\u0002\u0002\u25b3\u25da\u0007\u02b4\u0002",
    "\u0002\u25b4\u25da\u0007\u02b5\u0002\u0002\u25b5\u25da\u0007\u02b6\u0002",
    "\u0002\u25b6\u25da\u0007\u02b7\u0002\u0002\u25b7\u25da\u0007\u02b8\u0002",
    "\u0002\u25b8\u25da\u0007\u02b9\u0002\u0002\u25b9\u25da\u0007\u02ba\u0002",
    "\u0002\u25ba\u25da\u0007\u02bb\u0002\u0002\u25bb\u25da\u0007\u02bc\u0002",
    "\u0002\u25bc\u25da\u0007\u02bd\u0002\u0002\u25bd\u25da\u0007\u02be\u0002",
    "\u0002\u25be\u25da\u0007\u02bf\u0002\u0002\u25bf\u25da\u0007\u02c0\u0002",
    "\u0002\u25c0\u25da\u0007\u02c1\u0002\u0002\u25c1\u25da\u0007\u02c2\u0002",
    "\u0002\u25c2\u25da\u0007\u02c3\u0002\u0002\u25c3\u25da\u0007\u02c4\u0002",
    "\u0002\u25c4\u25da\u0007\u02c5\u0002\u0002\u25c5\u25da\u0007\u02c6\u0002",
    "\u0002\u25c6\u25da\u0007\u02c7\u0002\u0002\u25c7\u25da\u0007\u02c8\u0002",
    "\u0002\u25c8\u25da\u0007\u02c9\u0002\u0002\u25c9\u25da\u0007\u02ca\u0002",
    "\u0002\u25ca\u25da\u0007\u02cb\u0002\u0002\u25cb\u25da\u0007\u02cc\u0002",
    "\u0002\u25cc\u25da\u0007\u02cd\u0002\u0002\u25cd\u25da\u0007\u02ce\u0002",
    "\u0002\u25ce\u25da\u0007\u02cf\u0002\u0002\u25cf\u25da\u0007\u02d0\u0002",
    "\u0002\u25d0\u25da\u0007\u02d2\u0002\u0002\u25d1\u25da\u0007\u02d3\u0002",
    "\u0002\u25d2\u25da\u0007\u02d4\u0002\u0002\u25d3\u25da\u0007\u02d5\u0002",
    "\u0002\u25d4\u25da\u0007\u02d6\u0002\u0002\u25d5\u25da\u0007\u02d7\u0002",
    "\u0002\u25d6\u25da\u0007\u02d8\u0002\u0002\u25d7\u25da\u0007\u02d9\u0002",
    "\u0002\u25d8\u25da\u0005\u0418\u020d\u0002\u25d9\u24ac\u0003\u0002\u0002",
    "\u0002\u25d9\u24ad\u0003\u0002\u0002\u0002\u25d9\u24ae\u0003\u0002\u0002",
    "\u0002\u25d9\u24af\u0003\u0002\u0002\u0002\u25d9\u24b0\u0003\u0002\u0002",
    "\u0002\u25d9\u24b1\u0003\u0002\u0002\u0002\u25d9\u24b2\u0003\u0002\u0002",
    "\u0002\u25d9\u24b3\u0003\u0002\u0002\u0002\u25d9\u24b4\u0003\u0002\u0002",
    "\u0002\u25d9\u24b5\u0003\u0002\u0002\u0002\u25d9\u24b6\u0003\u0002\u0002",
    "\u0002\u25d9\u24b7\u0003\u0002\u0002\u0002\u25d9\u24b8\u0003\u0002\u0002",
    "\u0002\u25d9\u24b9\u0003\u0002\u0002\u0002\u25d9\u24ba\u0003\u0002\u0002",
    "\u0002\u25d9\u24bb\u0003\u0002\u0002\u0002\u25d9\u24bc\u0003\u0002\u0002",
    "\u0002\u25d9\u24bd\u0003\u0002\u0002\u0002\u25d9\u24be\u0003\u0002\u0002",
    "\u0002\u25d9\u24bf\u0003\u0002\u0002\u0002\u25d9\u24c0\u0003\u0002\u0002",
    "\u0002\u25d9\u24c1\u0003\u0002\u0002\u0002\u25d9\u24c2\u0003\u0002\u0002",
    "\u0002\u25d9\u24c3\u0003\u0002\u0002\u0002\u25d9\u24c4\u0003\u0002\u0002",
    "\u0002\u25d9\u24c5\u0003\u0002\u0002\u0002\u25d9\u24c6\u0003\u0002\u0002",
    "\u0002\u25d9\u24c7\u0003\u0002\u0002\u0002\u25d9\u24c8\u0003\u0002\u0002",
    "\u0002\u25d9\u24c9\u0003\u0002\u0002\u0002\u25d9\u24ca\u0003\u0002\u0002",
    "\u0002\u25d9\u24cb\u0003\u0002\u0002\u0002\u25d9\u24cc\u0003\u0002\u0002",
    "\u0002\u25d9\u24cd\u0003\u0002\u0002\u0002\u25d9\u24ce\u0003\u0002\u0002",
    "\u0002\u25d9\u24cf\u0003\u0002\u0002\u0002\u25d9\u24d0\u0003\u0002\u0002",
    "\u0002\u25d9\u24d1\u0003\u0002\u0002\u0002\u25d9\u24d2\u0003\u0002\u0002",
    "\u0002\u25d9\u24d3\u0003\u0002\u0002\u0002\u25d9\u24d4\u0003\u0002\u0002",
    "\u0002\u25d9\u24d5\u0003\u0002\u0002\u0002\u25d9\u24d6\u0003\u0002\u0002",
    "\u0002\u25d9\u24d7\u0003\u0002\u0002\u0002\u25d9\u24d8\u0003\u0002\u0002",
    "\u0002\u25d9\u24d9\u0003\u0002\u0002\u0002\u25d9\u24da\u0003\u0002\u0002",
    "\u0002\u25d9\u24db\u0003\u0002\u0002\u0002\u25d9\u24dc\u0003\u0002\u0002",
    "\u0002\u25d9\u24dd\u0003\u0002\u0002\u0002\u25d9\u24de\u0003\u0002\u0002",
    "\u0002\u25d9\u24df\u0003\u0002\u0002\u0002\u25d9\u24e0\u0003\u0002\u0002",
    "\u0002\u25d9\u24e1\u0003\u0002\u0002\u0002\u25d9\u24e2\u0003\u0002\u0002",
    "\u0002\u25d9\u24e3\u0003\u0002\u0002\u0002\u25d9\u24e4\u0003\u0002\u0002",
    "\u0002\u25d9\u24e5\u0003\u0002\u0002\u0002\u25d9\u24e6\u0003\u0002\u0002",
    "\u0002\u25d9\u24e7\u0003\u0002\u0002\u0002\u25d9\u24e8\u0003\u0002\u0002",
    "\u0002\u25d9\u24e9\u0003\u0002\u0002\u0002\u25d9\u24ea\u0003\u0002\u0002",
    "\u0002\u25d9\u24eb\u0003\u0002\u0002\u0002\u25d9\u24ec\u0003\u0002\u0002",
    "\u0002\u25d9\u24ed\u0003\u0002\u0002\u0002\u25d9\u24ee\u0003\u0002\u0002",
    "\u0002\u25d9\u24ef\u0003\u0002\u0002\u0002\u25d9\u24f0\u0003\u0002\u0002",
    "\u0002\u25d9\u24f1\u0003\u0002\u0002\u0002\u25d9\u24f2\u0003\u0002\u0002",
    "\u0002\u25d9\u24f3\u0003\u0002\u0002\u0002\u25d9\u24f4\u0003\u0002\u0002",
    "\u0002\u25d9\u24f5\u0003\u0002\u0002\u0002\u25d9\u24f6\u0003\u0002\u0002",
    "\u0002\u25d9\u24f7\u0003\u0002\u0002\u0002\u25d9\u24f8\u0003\u0002\u0002",
    "\u0002\u25d9\u24f9\u0003\u0002\u0002\u0002\u25d9\u24fa\u0003\u0002\u0002",
    "\u0002\u25d9\u24fb\u0003\u0002\u0002\u0002\u25d9\u24fc\u0003\u0002\u0002",
    "\u0002\u25d9\u24fd\u0003\u0002\u0002\u0002\u25d9\u24fe\u0003\u0002\u0002",
    "\u0002\u25d9\u24ff\u0003\u0002\u0002\u0002\u25d9\u2500\u0003\u0002\u0002",
    "\u0002\u25d9\u2501\u0003\u0002\u0002\u0002\u25d9\u2502\u0003\u0002\u0002",
    "\u0002\u25d9\u2503\u0003\u0002\u0002\u0002\u25d9\u2504\u0003\u0002\u0002",
    "\u0002\u25d9\u2505\u0003\u0002\u0002\u0002\u25d9\u2506\u0003\u0002\u0002",
    "\u0002\u25d9\u2507\u0003\u0002\u0002\u0002\u25d9\u2508\u0003\u0002\u0002",
    "\u0002\u25d9\u2509\u0003\u0002\u0002\u0002\u25d9\u250a\u0003\u0002\u0002",
    "\u0002\u25d9\u250b\u0003\u0002\u0002\u0002\u25d9\u250c\u0003\u0002\u0002",
    "\u0002\u25d9\u250d\u0003\u0002\u0002\u0002\u25d9\u250e\u0003\u0002\u0002",
    "\u0002\u25d9\u250f\u0003\u0002\u0002\u0002\u25d9\u2510\u0003\u0002\u0002",
    "\u0002\u25d9\u2511\u0003\u0002\u0002\u0002\u25d9\u2512\u0003\u0002\u0002",
    "\u0002\u25d9\u2513\u0003\u0002\u0002\u0002\u25d9\u2514\u0003\u0002\u0002",
    "\u0002\u25d9\u2515\u0003\u0002\u0002\u0002\u25d9\u2516\u0003\u0002\u0002",
    "\u0002\u25d9\u2517\u0003\u0002\u0002\u0002\u25d9\u2518\u0003\u0002\u0002",
    "\u0002\u25d9\u2519\u0003\u0002\u0002\u0002\u25d9\u251a\u0003\u0002\u0002",
    "\u0002\u25d9\u251b\u0003\u0002\u0002\u0002\u25d9\u251c\u0003\u0002\u0002",
    "\u0002\u25d9\u251d\u0003\u0002\u0002\u0002\u25d9\u251e\u0003\u0002\u0002",
    "\u0002\u25d9\u251f\u0003\u0002\u0002\u0002\u25d9\u2520\u0003\u0002\u0002",
    "\u0002\u25d9\u2521\u0003\u0002\u0002\u0002\u25d9\u2522\u0003\u0002\u0002",
    "\u0002\u25d9\u2523\u0003\u0002\u0002\u0002\u25d9\u2524\u0003\u0002\u0002",
    "\u0002\u25d9\u2525\u0003\u0002\u0002\u0002\u25d9\u2526\u0003\u0002\u0002",
    "\u0002\u25d9\u2527\u0003\u0002\u0002\u0002\u25d9\u2528\u0003\u0002\u0002",
    "\u0002\u25d9\u2529\u0003\u0002\u0002\u0002\u25d9\u252a\u0003\u0002\u0002",
    "\u0002\u25d9\u252b\u0003\u0002\u0002\u0002\u25d9\u252c\u0003\u0002\u0002",
    "\u0002\u25d9\u252d\u0003\u0002\u0002\u0002\u25d9\u252e\u0003\u0002\u0002",
    "\u0002\u25d9\u252f\u0003\u0002\u0002\u0002\u25d9\u2530\u0003\u0002\u0002",
    "\u0002\u25d9\u2531\u0003\u0002\u0002\u0002\u25d9\u2532\u0003\u0002\u0002",
    "\u0002\u25d9\u2533\u0003\u0002\u0002\u0002\u25d9\u2534\u0003\u0002\u0002",
    "\u0002\u25d9\u2535\u0003\u0002\u0002\u0002\u25d9\u2536\u0003\u0002\u0002",
    "\u0002\u25d9\u2537\u0003\u0002\u0002\u0002\u25d9\u2538\u0003\u0002\u0002",
    "\u0002\u25d9\u2539\u0003\u0002\u0002\u0002\u25d9\u253a\u0003\u0002\u0002",
    "\u0002\u25d9\u253b\u0003\u0002\u0002\u0002\u25d9\u253c\u0003\u0002\u0002",
    "\u0002\u25d9\u253d\u0003\u0002\u0002\u0002\u25d9\u253e\u0003\u0002\u0002",
    "\u0002\u25d9\u253f\u0003\u0002\u0002\u0002\u25d9\u2540\u0003\u0002\u0002",
    "\u0002\u25d9\u2541\u0003\u0002\u0002\u0002\u25d9\u2542\u0003\u0002\u0002",
    "\u0002\u25d9\u2543\u0003\u0002\u0002\u0002\u25d9\u2544\u0003\u0002\u0002",
    "\u0002\u25d9\u2545\u0003\u0002\u0002\u0002\u25d9\u2546\u0003\u0002\u0002",
    "\u0002\u25d9\u2547\u0003\u0002\u0002\u0002\u25d9\u2548\u0003\u0002\u0002",
    "\u0002\u25d9\u2549\u0003\u0002\u0002\u0002\u25d9\u254a\u0003\u0002\u0002",
    "\u0002\u25d9\u254b\u0003\u0002\u0002\u0002\u25d9\u254c\u0003\u0002\u0002",
    "\u0002\u25d9\u254d\u0003\u0002\u0002\u0002\u25d9\u254e\u0003\u0002\u0002",
    "\u0002\u25d9\u254f\u0003\u0002\u0002\u0002\u25d9\u2550\u0003\u0002\u0002",
    "\u0002\u25d9\u2551\u0003\u0002\u0002\u0002\u25d9\u2552\u0003\u0002\u0002",
    "\u0002\u25d9\u2553\u0003\u0002\u0002\u0002\u25d9\u2554\u0003\u0002\u0002",
    "\u0002\u25d9\u2555\u0003\u0002\u0002\u0002\u25d9\u2556\u0003\u0002\u0002",
    "\u0002\u25d9\u2557\u0003\u0002\u0002\u0002\u25d9\u2558\u0003\u0002\u0002",
    "\u0002\u25d9\u2559\u0003\u0002\u0002\u0002\u25d9\u255a\u0003\u0002\u0002",
    "\u0002\u25d9\u255b\u0003\u0002\u0002\u0002\u25d9\u255c\u0003\u0002\u0002",
    "\u0002\u25d9\u255d\u0003\u0002\u0002\u0002\u25d9\u255e\u0003\u0002\u0002",
    "\u0002\u25d9\u255f\u0003\u0002\u0002\u0002\u25d9\u2560\u0003\u0002\u0002",
    "\u0002\u25d9\u2561\u0003\u0002\u0002\u0002\u25d9\u2562\u0003\u0002\u0002",
    "\u0002\u25d9\u2563\u0003\u0002\u0002\u0002\u25d9\u2564\u0003\u0002\u0002",
    "\u0002\u25d9\u2565\u0003\u0002\u0002\u0002\u25d9\u2566\u0003\u0002\u0002",
    "\u0002\u25d9\u2567\u0003\u0002\u0002\u0002\u25d9\u2568\u0003\u0002\u0002",
    "\u0002\u25d9\u2569\u0003\u0002\u0002\u0002\u25d9\u256a\u0003\u0002\u0002",
    "\u0002\u25d9\u256b\u0003\u0002\u0002\u0002\u25d9\u256c\u0003\u0002\u0002",
    "\u0002\u25d9\u256d\u0003\u0002\u0002\u0002\u25d9\u256e\u0003\u0002\u0002",
    "\u0002\u25d9\u256f\u0003\u0002\u0002\u0002\u25d9\u2570\u0003\u0002\u0002",
    "\u0002\u25d9\u2571\u0003\u0002\u0002\u0002\u25d9\u2572\u0003\u0002\u0002",
    "\u0002\u25d9\u2573\u0003\u0002\u0002\u0002\u25d9\u2574\u0003\u0002\u0002",
    "\u0002\u25d9\u2575\u0003\u0002\u0002\u0002\u25d9\u2576\u0003\u0002\u0002",
    "\u0002\u25d9\u2577\u0003\u0002\u0002\u0002\u25d9\u2578\u0003\u0002\u0002",
    "\u0002\u25d9\u2579\u0003\u0002\u0002\u0002\u25d9\u257a\u0003\u0002\u0002",
    "\u0002\u25d9\u257b\u0003\u0002\u0002\u0002\u25d9\u257c\u0003\u0002\u0002",
    "\u0002\u25d9\u257d\u0003\u0002\u0002\u0002\u25d9\u257e\u0003\u0002\u0002",
    "\u0002\u25d9\u257f\u0003\u0002\u0002\u0002\u25d9\u2580\u0003\u0002\u0002",
    "\u0002\u25d9\u2581\u0003\u0002\u0002\u0002\u25d9\u2582\u0003\u0002\u0002",
    "\u0002\u25d9\u2583\u0003\u0002\u0002\u0002\u25d9\u2584\u0003\u0002\u0002",
    "\u0002\u25d9\u2585\u0003\u0002\u0002\u0002\u25d9\u2586\u0003\u0002\u0002",
    "\u0002\u25d9\u2587\u0003\u0002\u0002\u0002\u25d9\u2588\u0003\u0002\u0002",
    "\u0002\u25d9\u2589\u0003\u0002\u0002\u0002\u25d9\u258a\u0003\u0002\u0002",
    "\u0002\u25d9\u258b\u0003\u0002\u0002\u0002\u25d9\u258c\u0003\u0002\u0002",
    "\u0002\u25d9\u258d\u0003\u0002\u0002\u0002\u25d9\u258e\u0003\u0002\u0002",
    "\u0002\u25d9\u258f\u0003\u0002\u0002\u0002\u25d9\u2590\u0003\u0002\u0002",
    "\u0002\u25d9\u2591\u0003\u0002\u0002\u0002\u25d9\u2592\u0003\u0002\u0002",
    "\u0002\u25d9\u2593\u0003\u0002\u0002\u0002\u25d9\u2594\u0003\u0002\u0002",
    "\u0002\u25d9\u2595\u0003\u0002\u0002\u0002\u25d9\u2596\u0003\u0002\u0002",
    "\u0002\u25d9\u2597\u0003\u0002\u0002\u0002\u25d9\u2598\u0003\u0002\u0002",
    "\u0002\u25d9\u2599\u0003\u0002\u0002\u0002\u25d9\u259a\u0003\u0002\u0002",
    "\u0002\u25d9\u259b\u0003\u0002\u0002\u0002\u25d9\u259c\u0003\u0002\u0002",
    "\u0002\u25d9\u259d\u0003\u0002\u0002\u0002\u25d9\u259e\u0003\u0002\u0002",
    "\u0002\u25d9\u259f\u0003\u0002\u0002\u0002\u25d9\u25a0\u0003\u0002\u0002",
    "\u0002\u25d9\u25a1\u0003\u0002\u0002\u0002\u25d9\u25a2\u0003\u0002\u0002",
    "\u0002\u25d9\u25a3\u0003\u0002\u0002\u0002\u25d9\u25a4\u0003\u0002\u0002",
    "\u0002\u25d9\u25a5\u0003\u0002\u0002\u0002\u25d9\u25a6\u0003\u0002\u0002",
    "\u0002\u25d9\u25a7\u0003\u0002\u0002\u0002\u25d9\u25a8\u0003\u0002\u0002",
    "\u0002\u25d9\u25a9\u0003\u0002\u0002\u0002\u25d9\u25aa\u0003\u0002\u0002",
    "\u0002\u25d9\u25ab\u0003\u0002\u0002\u0002\u25d9\u25ac\u0003\u0002\u0002",
    "\u0002\u25d9\u25ad\u0003\u0002\u0002\u0002\u25d9\u25ae\u0003\u0002\u0002",
    "\u0002\u25d9\u25af\u0003\u0002\u0002\u0002\u25d9\u25b0\u0003\u0002\u0002",
    "\u0002\u25d9\u25b1\u0003\u0002\u0002\u0002\u25d9\u25b2\u0003\u0002\u0002",
    "\u0002\u25d9\u25b3\u0003\u0002\u0002\u0002\u25d9\u25b4\u0003\u0002\u0002",
    "\u0002\u25d9\u25b5\u0003\u0002\u0002\u0002\u25d9\u25b6\u0003\u0002\u0002",
    "\u0002\u25d9\u25b7\u0003\u0002\u0002\u0002\u25d9\u25b8\u0003\u0002\u0002",
    "\u0002\u25d9\u25b9\u0003\u0002\u0002\u0002\u25d9\u25ba\u0003\u0002\u0002",
    "\u0002\u25d9\u25bb\u0003\u0002\u0002\u0002\u25d9\u25bc\u0003\u0002\u0002",
    "\u0002\u25d9\u25bd\u0003\u0002\u0002\u0002\u25d9\u25be\u0003\u0002\u0002",
    "\u0002\u25d9\u25bf\u0003\u0002\u0002\u0002\u25d9\u25c0\u0003\u0002\u0002",
    "\u0002\u25d9\u25c1\u0003\u0002\u0002\u0002\u25d9\u25c2\u0003\u0002\u0002",
    "\u0002\u25d9\u25c3\u0003\u0002\u0002\u0002\u25d9\u25c4\u0003\u0002\u0002",
    "\u0002\u25d9\u25c5\u0003\u0002\u0002\u0002\u25d9\u25c6\u0003\u0002\u0002",
    "\u0002\u25d9\u25c7\u0003\u0002\u0002\u0002\u25d9\u25c8\u0003\u0002\u0002",
    "\u0002\u25d9\u25c9\u0003\u0002\u0002\u0002\u25d9\u25ca\u0003\u0002\u0002",
    "\u0002\u25d9\u25cb\u0003\u0002\u0002\u0002\u25d9\u25cc\u0003\u0002\u0002",
    "\u0002\u25d9\u25cd\u0003\u0002\u0002\u0002\u25d9\u25ce\u0003\u0002\u0002",
    "\u0002\u25d9\u25cf\u0003\u0002\u0002\u0002\u25d9\u25d0\u0003\u0002\u0002",
    "\u0002\u25d9\u25d1\u0003\u0002\u0002\u0002\u25d9\u25d2\u0003\u0002\u0002",
    "\u0002\u25d9\u25d3\u0003\u0002\u0002\u0002\u25d9\u25d4\u0003\u0002\u0002",
    "\u0002\u25d9\u25d5\u0003\u0002\u0002\u0002\u25d9\u25d6\u0003\u0002\u0002",
    "\u0002\u25d9\u25d7\u0003\u0002\u0002\u0002\u25d9\u25d8\u0003\u0002\u0002",
    "\u0002\u25da\u0417\u0003\u0002\u0002\u0002\u25db\u25dc\u0006\u020d\u0086",
    "\u0002\u25dc\u25df\u0007\u01f9\u0002\u0002\u25dd\u25df\u0007\u0206\u0002",
    "\u0002\u25de\u25db\u0003\u0002\u0002\u0002\u25de\u25dd\u0003\u0002\u0002",
    "\u0002\u25df\u0419\u0003\u0002\u0002\u0002\u25e0\u25e1\t\u009b\u0002",
    "\u0002\u25e1\u041b\u0003\u0002\u0002\u0002\u25e2\u25e5\u0005\u0162\u00b2",
    "\u0002\u25e3\u25e5\u0007\u0321\u0002\u0002\u25e4\u25e2\u0003\u0002\u0002",
    "\u0002\u25e4\u25e3\u0003\u0002\u0002\u0002\u25e5\u041d\u0003\u0002\u0002",
    "\u0002\u25e6\u263a\u0007\u0176\u0002\u0002\u25e7\u263a\u0007\u0187\u0002",
    "\u0002\u25e8\u263a\u0007\u0011\u0002\u0002\u25e9\u263a\u0007\u0169\u0002",
    "\u0002\u25ea\u263a\u0007\u0016\u0002\u0002\u25eb\u263a\u0007\u0165\u0002",
    "\u0002\u25ec\u263a\u0007\u033d\u0002\u0002\u25ed\u263a\u0007\u033e\u0002",
    "\u0002\u25ee\u263a\u0007\u018b\u0002\u0002\u25ef\u263a\u0007\u0197\u0002",
    "\u0002\u25f0\u263a\u0007\u0198\u0002\u0002\u25f1\u263a\u0007\u0199\u0002",
    "\u0002\u25f2\u263a\u0007#\u0002\u0002\u25f3\u263a\u0007\u0160\u0002",
    "\u0002\u25f4\u263a\u0007\u019d\u0002\u0002\u25f5\u263a\u0007\u019e\u0002",
    "\u0002\u25f6\u263a\u0007\u02e0\u0002\u0002\u25f7\u263a\u0007\u015d\u0002",
    "\u0002\u25f8\u263a\u0007\u0131\u0002\u0002\u25f9\u263a\u0007\u0353\u0002",
    "\u0002\u25fa\u263a\u00076\u0002\u0002\u25fb\u263a\u0007\u019f\u0002",
    "\u0002\u25fc\u263a\u0007\u033f\u0002\u0002\u25fd\u263a\u0007\u0334\u0002",
    "\u0002\u25fe\u263a\u0007\u0340\u0002\u0002\u25ff\u263a\u0007\u018c\u0002",
    "\u0002\u2600\u263a\u0007\u02e1\u0002\u0002\u2601\u263a\u0007E\u0002",
    "\u0002\u2602\u263a\u0007G\u0002\u0002\u2603\u263a\u0007H\u0002\u0002",
    "\u2604\u263a\u0007\u013b\u0002\u0002\u2605\u263a\u0007W\u0002\u0002",
    "\u2606\u263a\u0007X\u0002\u0002\u2607\u263a\u0007\u0337\u0002\u0002",
    "\u2608\u263a\u0007\u019a\u0002\u0002\u2609\u263a\u0007\u0341\u0002\u0002",
    "\u260a\u263a\u0007\u00e3\u0002\u0002\u260b\u263a\u0007\u018d\u0002\u0002",
    "\u260c\u263a\u0007\u02e5\u0002\u0002\u260d\u263a\u0007\u018e\u0002\u0002",
    "\u260e\u263a\u0007\u02e2\u0002\u0002\u260f\u263a\u0007\u0354\u0002\u0002",
    "\u2610\u263a\u0007\u02df\u0002\u0002\u2611\u263a\u0007\u0338\u0002\u0002",
    "\u2612\u263a\u0007\u0339\u0002\u0002\u2613\u263a\u0007\u033a\u0002\u0002",
    "\u2614\u263a\u0007\u033b\u0002\u0002\u2615\u263a\u0007\u033c\u0002\u0002",
    "\u2616\u263a\u0007\u01a2\u0002\u0002\u2617\u263a\u0007\u02de\u0002\u0002",
    "\u2618\u263a\u0007z\u0002\u0002\u2619\u263a\u0007}\u0002\u0002\u261a",
    "\u263a\u0007~\u0002\u0002\u261b\u263a\u0007\u0342\u0002\u0002\u261c",
    "\u263a\u0007\u0083\u0002\u0002\u261d\u263a\u0007\u0084\u0002\u0002\u261e",
    "\u263a\u0007\u02e4\u0002\u0002\u261f\u263a\u0007\u011a\u0002\u0002\u2620",
    "\u263a\u0007\u018f\u0002\u0002\u2621\u263a\u0007\u0190\u0002\u0002\u2622",
    "\u263a\u0007\u0192\u0002\u0002\u2623\u263a\u0007\u0191\u0002\u0002\u2624",
    "\u263a\u0007\u017a\u0002\u0002\u2625\u263a\u0007\u01a3\u0002\u0002\u2626",
    "\u263a\u0007\u01a4\u0002\u0002\u2627\u263a\u0007\u0193\u0002\u0002\u2628",
    "\u263a\u0007\u01a5\u0002\u0002\u2629\u263a\u0007\u011f\u0002\u0002\u262a",
    "\u263a\u0007\u0161\u0002\u0002\u262b\u263a\u0007\u0162\u0002\u0002\u262c",
    "\u263a\u0007\u01a6\u0002\u0002\u262d\u263a\u0007\u0129\u0002\u0002\u262e",
    "\u263a\u0007\u0166\u0002\u0002\u262f\u263a\u0007\u017b\u0002\u0002\u2630",
    "\u263a\u0007\u0196\u0002\u0002\u2631\u263a\u0007\u0194\u0002\u0002\u2632",
    "\u263a\u0007\u0195\u0002\u0002\u2633\u263a\u0007\u02e3\u0002\u0002\u2634",
    "\u263a\u0007\u0343\u0002\u0002\u2635\u263a\u0007\u00a7\u0002\u0002\u2636",
    "\u263a\u0007\u0164\u0002\u0002\u2637\u2638\u0006\u0210\u0087\u0002\u2638",
    "\u263a\u0005\u0420\u0211\u0002\u2639\u25e6\u0003\u0002\u0002\u0002\u2639",
    "\u25e7\u0003\u0002\u0002\u0002\u2639\u25e8\u0003\u0002\u0002\u0002\u2639",
    "\u25e9\u0003\u0002\u0002\u0002\u2639\u25ea\u0003\u0002\u0002\u0002\u2639",
    "\u25eb\u0003\u0002\u0002\u0002\u2639\u25ec\u0003\u0002\u0002\u0002\u2639",
    "\u25ed\u0003\u0002\u0002\u0002\u2639\u25ee\u0003\u0002\u0002\u0002\u2639",
    "\u25ef\u0003\u0002\u0002\u0002\u2639\u25f0\u0003\u0002\u0002\u0002\u2639",
    "\u25f1\u0003\u0002\u0002\u0002\u2639\u25f2\u0003\u0002\u0002\u0002\u2639",
    "\u25f3\u0003\u0002\u0002\u0002\u2639\u25f4\u0003\u0002\u0002\u0002\u2639",
    "\u25f5\u0003\u0002\u0002\u0002\u2639\u25f6\u0003\u0002\u0002\u0002\u2639",
    "\u25f7\u0003\u0002\u0002\u0002\u2639\u25f8\u0003\u0002\u0002\u0002\u2639",
    "\u25f9\u0003\u0002\u0002\u0002\u2639\u25fa\u0003\u0002\u0002\u0002\u2639",
    "\u25fb\u0003\u0002\u0002\u0002\u2639\u25fc\u0003\u0002\u0002\u0002\u2639",
    "\u25fd\u0003\u0002\u0002\u0002\u2639\u25fe\u0003\u0002\u0002\u0002\u2639",
    "\u25ff\u0003\u0002\u0002\u0002\u2639\u2600\u0003\u0002\u0002\u0002\u2639",
    "\u2601\u0003\u0002\u0002\u0002\u2639\u2602\u0003\u0002\u0002\u0002\u2639",
    "\u2603\u0003\u0002\u0002\u0002\u2639\u2604\u0003\u0002\u0002\u0002\u2639",
    "\u2605\u0003\u0002\u0002\u0002\u2639\u2606\u0003\u0002\u0002\u0002\u2639",
    "\u2607\u0003\u0002\u0002\u0002\u2639\u2608\u0003\u0002\u0002\u0002\u2639",
    "\u2609\u0003\u0002\u0002\u0002\u2639\u260a\u0003\u0002\u0002\u0002\u2639",
    "\u260b\u0003\u0002\u0002\u0002\u2639\u260c\u0003\u0002\u0002\u0002\u2639",
    "\u260d\u0003\u0002\u0002\u0002\u2639\u260e\u0003\u0002\u0002\u0002\u2639",
    "\u260f\u0003\u0002\u0002\u0002\u2639\u2610\u0003\u0002\u0002\u0002\u2639",
    "\u2611\u0003\u0002\u0002\u0002\u2639\u2612\u0003\u0002\u0002\u0002\u2639",
    "\u2613\u0003\u0002\u0002\u0002\u2639\u2614\u0003\u0002\u0002\u0002\u2639",
    "\u2615\u0003\u0002\u0002\u0002\u2639\u2616\u0003\u0002\u0002\u0002\u2639",
    "\u2617\u0003\u0002\u0002\u0002\u2639\u2618\u0003\u0002\u0002\u0002\u2639",
    "\u2619\u0003\u0002\u0002\u0002\u2639\u261a\u0003\u0002\u0002\u0002\u2639",
    "\u261b\u0003\u0002\u0002\u0002\u2639\u261c\u0003\u0002\u0002\u0002\u2639",
    "\u261d\u0003\u0002\u0002\u0002\u2639\u261e\u0003\u0002\u0002\u0002\u2639",
    "\u261f\u0003\u0002\u0002\u0002\u2639\u2620\u0003\u0002\u0002\u0002\u2639",
    "\u2621\u0003\u0002\u0002\u0002\u2639\u2622\u0003\u0002\u0002\u0002\u2639",
    "\u2623\u0003\u0002\u0002\u0002\u2639\u2624\u0003\u0002\u0002\u0002\u2639",
    "\u2625\u0003\u0002\u0002\u0002\u2639\u2626\u0003\u0002\u0002\u0002\u2639",
    "\u2627\u0003\u0002\u0002\u0002\u2639\u2628\u0003\u0002\u0002\u0002\u2639",
    "\u2629\u0003\u0002\u0002\u0002\u2639\u262a\u0003\u0002\u0002\u0002\u2639",
    "\u262b\u0003\u0002\u0002\u0002\u2639\u262c\u0003\u0002\u0002\u0002\u2639",
    "\u262d\u0003\u0002\u0002\u0002\u2639\u262e\u0003\u0002\u0002\u0002\u2639",
    "\u262f\u0003\u0002\u0002\u0002\u2639\u2630\u0003\u0002\u0002\u0002\u2639",
    "\u2631\u0003\u0002\u0002\u0002\u2639\u2632\u0003\u0002\u0002\u0002\u2639",
    "\u2633\u0003\u0002\u0002\u0002\u2639\u2634\u0003\u0002\u0002\u0002\u2639",
    "\u2635\u0003\u0002\u0002\u0002\u2639\u2636\u0003\u0002\u0002\u0002\u2639",
    "\u2637\u0003\u0002\u0002\u0002\u263a\u041f\u0003\u0002\u0002\u0002\u263b",
    "\u263c\u0007%\u0002\u0002\u263c\u0421\u0003\u0002\u0002\u0002\u263d",
    "\u263e\t\u009c\u0002\u0002\u263e\u0423\u0003\u0002\u0002\u0002\u263f",
    "\u2644\u0005\u0376\u01bc\u0002\u2640\u2641\u0005\u042a\u0216\u0002\u2641",
    "\u2642\b\u0213\u0001\u0002\u2642\u2644\u0003\u0002\u0002\u0002\u2643",
    "\u263f\u0003\u0002\u0002\u0002\u2643\u2640\u0003\u0002\u0002\u0002\u2644",
    "\u0425\u0003\u0002\u0002\u0002\u2645\u2648\u0005\u0376\u01bc\u0002\u2646",
    "\u2648\u0005\u042a\u0216\u0002\u2647\u2645\u0003\u0002\u0002\u0002\u2647",
    "\u2646\u0003\u0002\u0002\u0002\u2648\u0427\u0003\u0002\u0002\u0002\u2649",
    "\u264b\u0007\u000e\u0002\u0002\u264a\u2649\u0003\u0002\u0002\u0002\u264a",
    "\u264b\u0003\u0002\u0002\u0002\u264b\u264c\u0003\u0002\u0002\u0002\u264c",
    "\u264d\u0005\u0376\u01bc\u0002\u264d\u0429\u0003\u0002\u0002\u0002\u264e",
    "\u2650\u0007\u0380\u0002\u0002\u264f\u264e\u0003\u0002\u0002\u0002\u264f",
    "\u2650\u0003\u0002\u0002\u0002\u2650\u042b\u0003\u0002\u0002\u0002\u2651",
    "\u2652\u0007\u0380\u0002\u0002\u2652\u042d\u0003\u0002\u0002\u0002\u2653",
    "\u2655\u0005\u0430\u0219\u0002\u2654\u2656\u0007\u0365\u0002\u0002\u2655",
    "\u2654\u0003\u0002\u0002\u0002\u2655\u2656\u0003\u0002\u0002\u0002\u2656",
    "\u2668\u0003\u0002\u0002\u0002\u2657\u2659\u0005\u0432\u021a\u0002\u2658",
    "\u265a\u0007\u0365\u0002\u0002\u2659\u2658\u0003\u0002\u0002\u0002\u2659",
    "\u265a\u0003\u0002\u0002\u0002\u265a\u2668\u0003\u0002\u0002\u0002\u265b",
    "\u265d\u0005\u0436\u021c\u0002\u265c\u265e\u0007\u0365\u0002\u0002\u265d",
    "\u265c\u0003\u0002\u0002\u0002\u265d\u265e\u0003\u0002\u0002\u0002\u265e",
    "\u2668\u0003\u0002\u0002\u0002\u265f\u2661\u0005\u043c\u021f\u0002\u2660",
    "\u2662\u0007\u0365\u0002\u0002\u2661\u2660\u0003\u0002\u0002\u0002\u2661",
    "\u2662\u0003\u0002\u0002\u0002\u2662\u2668\u0003\u0002\u0002\u0002\u2663",
    "\u2665\u0005\u043e\u0220\u0002\u2664\u2666\u0007\u0365\u0002\u0002\u2665",
    "\u2664\u0003\u0002\u0002\u0002\u2665\u2666\u0003\u0002\u0002\u0002\u2666",
    "\u2668\u0003\u0002\u0002\u0002\u2667\u2653\u0003\u0002\u0002\u0002\u2667",
    "\u2657\u0003\u0002\u0002\u0002\u2667\u265b\u0003\u0002\u0002\u0002\u2667",
    "\u265f\u0003\u0002\u0002\u0002\u2667\u2663\u0003\u0002\u0002\u0002\u2668",
    "\u042f\u0003\u0002\u0002\u0002\u2669\u266a\u0007\'\u0002\u0002\u266a",
    "\u266c\u0005\u049a\u024e\u0002\u266b\u2669\u0003\u0002\u0002\u0002\u266b",
    "\u266c\u0003\u0002\u0002\u0002\u266c\u266d\u0003\u0002\u0002\u0002\u266d",
    "\u266e\u0005\u049c\u024f\u0002\u266e\u0431\u0003\u0002\u0002\u0002\u266f",
    "\u2672\u0007!\u0002\u0002\u2670\u2671\u0007m\u0002\u0002\u2671\u2673",
    "\u0007~\u0002\u0002\u2672\u2670\u0003\u0002\u0002\u0002\u2672\u2673",
    "\u0003\u0002\u0002\u0002\u2673\u2674\u0003\u0002\u0002\u0002\u2674\u2675",
    "\u0005\u0434\u021b\u0002\u2675\u0433\u0003\u0002\u0002\u0002\u2676\u2677",
    "\u0007\u0206\u0002\u0002\u2677\u2678\u0005\u0340\u01a1\u0002\u2678\u2681",
    "\u0007\u0360\u0002\u0002\u2679\u267e\u0005\u04a0\u0251\u0002\u267a\u267b",
    "\u0007\u0364\u0002\u0002\u267b\u267d\u0005\u04a0\u0251\u0002\u267c\u267a",
    "\u0003\u0002\u0002\u0002\u267d\u2680\u0003\u0002\u0002\u0002\u267e\u267c",
    "\u0003\u0002\u0002\u0002\u267e\u267f\u0003\u0002\u0002\u0002\u267f\u2682",
    "\u0003\u0002\u0002\u0002\u2680\u267e\u0003\u0002\u0002\u0002\u2681\u2679",
    "\u0003\u0002\u0002\u0002\u2681\u2682\u0003\u0002\u0002\u0002\u2682\u2683",
    "\u0003\u0002\u0002\u0002\u2683\u2684\u0007\u0361\u0002\u0002\u2684\u2685",
    "\u0007\u0081\u0002\u0002\u2685\u2686\u0005\u04b0\u0259\u0002\u2686\u2687",
    "\u0005\u0440\u0221\u0002\u2687\u2688\u0005\u0498\u024d\u0002\u2688\u0435",
    "\u0003\u0002\u0002\u0002\u2689\u268c\u0007!\u0002\u0002\u268a\u268b",
    "\u0007m\u0002\u0002\u268b\u268d\u0007~\u0002\u0002\u268c\u268a\u0003",
    "\u0002\u0002\u0002\u268c\u268d\u0003\u0002\u0002\u0002\u268d\u268e\u0003",
    "\u0002\u0002\u0002\u268e\u268f\u0005\u0438\u021d\u0002\u268f\u0437\u0003",
    "\u0002\u0002\u0002\u2690\u2691\u0007t\u0002\u0002\u2691\u2692\u0005",
    "\u0340\u01a1\u0002\u2692\u269b\u0007\u0360\u0002\u0002\u2693\u2698\u0005",
    "\u04a0\u0251\u0002\u2694\u2695\u0007\u0364\u0002\u0002\u2695\u2697\u0005",
    "\u04a0\u0251\u0002\u2696\u2694\u0003\u0002\u0002\u0002\u2697\u269a\u0003",
    "\u0002\u0002\u0002\u2698\u2696\u0003\u0002\u0002\u0002\u2698\u2699\u0003",
    "\u0002\u0002\u0002\u2699\u269c\u0003\u0002\u0002\u0002\u269a\u2698\u0003",
    "\u0002\u0002\u0002\u269b\u2693\u0003\u0002\u0002\u0002\u269b\u269c\u0003",
    "\u0002\u0002\u0002\u269c\u269d\u0003\u0002\u0002\u0002\u269d\u269e\u0007",
    "\u0361\u0002\u0002\u269e\u269f\u0005\u0440\u0221\u0002\u269f\u26a0\u0005",
    "\u0498\u024d\u0002\u26a0\u0439\u0003\u0002\u0002\u0002\u26a1\u26a3\u0007",
    "0\u0002\u0002\u26a2\u26a4\u0007\u00f9\u0002\u0002\u26a3\u26a2\u0003",
    "\u0002\u0002\u0002\u26a3\u26a4\u0003\u0002\u0002\u0002\u26a4\u26a5\u0003",
    "\u0002\u0002\u0002\u26a5\u26a7\u0007\u00f2\u0002\u0002\u26a6\u26a8\u0005",
    "\u03c4\u01e3\u0002\u26a7\u26a6\u0003\u0002\u0002\u0002\u26a7\u26a8\u0003",
    "\u0002\u0002\u0002\u26a8\u26a9\u0003\u0002\u0002\u0002\u26a9\u26aa\u0005",
    "\u0358\u01ad\u0002\u26aa\u043b\u0003\u0002\u0002\u0002\u26ab\u26ae\u0007",
    "!\u0002\u0002\u26ac\u26ad\u0007m\u0002\u0002\u26ad\u26af\u0007~\u0002",
    "\u0002\u26ae\u26ac\u0003\u0002\u0002\u0002\u26ae\u26af\u0003\u0002\u0002",
    "\u0002\u26af\u26b0\u0003\u0002\u0002\u0002\u26b0\u26b1\u0007\u00f2\u0002",
    "\u0002\u26b1\u26b2\u0005\u0340\u01a1\u0002\u26b2\u26b4\u0005\u0440\u0221",
    "\u0002\u26b3\u26b5\u0007\'\u0002\u0002\u26b4\u26b3\u0003\u0002\u0002",
    "\u0002\u26b4\u26b5\u0003\u0002\u0002\u0002\u26b5\u26b7\u0003\u0002\u0002",
    "\u0002\u26b6\u26b8\u0005\u0442\u0222\u0002\u26b7\u26b6\u0003\u0002\u0002",
    "\u0002\u26b7\u26b8\u0003\u0002\u0002\u0002\u26b8\u26b9\u0003\u0002\u0002",
    "\u0002\u26b9\u26bb\u0007\u01ea\u0002\u0002\u26ba\u26bc\u0005\u0376\u01bc",
    "\u0002\u26bb\u26ba\u0003\u0002\u0002\u0002\u26bb\u26bc\u0003\u0002\u0002",
    "\u0002\u26bc\u043d\u0003\u0002\u0002\u0002\u26bd\u26c0\u0007!\u0002",
    "\u0002\u26be\u26bf\u0007m\u0002\u0002\u26bf\u26c1\u0007~\u0002\u0002",
    "\u26c0\u26be\u0003\u0002\u0002\u0002\u26c0\u26c1\u0003\u0002\u0002\u0002",
    "\u26c1\u26c2\u0003\u0002\u0002\u0002\u26c2\u26c3\u0007\u00f2\u0002\u0002",
    "\u26c3\u26c4\u0007\u00b6\u0002\u0002\u26c4\u26c5\u0005\u0340\u01a1\u0002",
    "\u26c5\u26c7\u0005\u0440\u0221\u0002\u26c6\u26c8\u0007\'\u0002\u0002",
    "\u26c7\u26c6\u0003\u0002\u0002\u0002\u26c7\u26c8\u0003\u0002\u0002\u0002",
    "\u26c8\u26ca\u0003\u0002\u0002\u0002\u26c9\u26cb\u0005\u0444\u0223\u0002",
    "\u26ca\u26c9\u0003\u0002\u0002\u0002\u26ca\u26cb\u0003\u0002\u0002\u0002",
    "\u26cb\u26cd\u0003\u0002\u0002\u0002\u26cc\u26ce\u0005\u049e\u0250\u0002",
    "\u26cd\u26cc\u0003\u0002\u0002\u0002\u26cd\u26ce\u0003\u0002\u0002\u0002",
    "\u26ce\u26cf\u0003\u0002\u0002\u0002\u26cf\u26d1\u0007\u01ea\u0002\u0002",
    "\u26d0\u26d2\u0005\u04b4\u025b\u0002\u26d1\u26d0\u0003\u0002\u0002\u0002",
    "\u26d1\u26d2\u0003\u0002\u0002\u0002\u26d2\u043f\u0003\u0002\u0002\u0002",
    "\u26d3\u26d4\t\u009d\u0002\u0002\u26d4\u0441\u0003\u0002\u0002\u0002",
    "\u26d5\u26d7\u0005\u0446\u0224\u0002\u26d6\u26d8\u0007\u0365\u0002\u0002",
    "\u26d7\u26d6\u0003\u0002\u0002\u0002\u26d7\u26d8\u0003\u0002\u0002\u0002",
    "\u26d8\u26da\u0003\u0002\u0002\u0002\u26d9\u26d5\u0003\u0002\u0002\u0002",
    "\u26da\u26db\u0003\u0002\u0002\u0002\u26db\u26d9\u0003\u0002\u0002\u0002",
    "\u26db\u26dc\u0003\u0002\u0002\u0002\u26dc\u0443\u0003\u0002\u0002\u0002",
    "\u26dd\u26df\u0005\u0448\u0225\u0002\u26de\u26e0\u0007\u0365\u0002\u0002",
    "\u26df\u26de\u0003\u0002\u0002\u0002\u26df\u26e0\u0003\u0002\u0002\u0002",
    "\u26e0\u26e2\u0003\u0002\u0002\u0002\u26e1\u26dd\u0003\u0002\u0002\u0002",
    "\u26e2\u26e3\u0003\u0002\u0002\u0002\u26e3\u26e1\u0003\u0002\u0002\u0002",
    "\u26e3\u26e4\u0003\u0002\u0002\u0002\u26e4\u0445\u0003\u0002\u0002\u0002",
    "\u26e5\u26ed\u0005\u0458\u022d\u0002\u26e6\u26ed\u0005\u0450\u0229\u0002",
    "\u26e7\u26ed\u0005\u0452\u022a\u0002\u26e8\u26ed\u0005\u0456\u022c\u0002",
    "\u26e9\u26ed\u0005\u0460\u0231\u0002\u26ea\u26ed\u0005\u044a\u0226\u0002",
    "\u26eb\u26ed\u0005\u044c\u0227\u0002\u26ec\u26e5\u0003\u0002\u0002\u0002",
    "\u26ec\u26e6\u0003\u0002\u0002\u0002\u26ec\u26e7\u0003\u0002\u0002\u0002",
    "\u26ec\u26e8\u0003\u0002\u0002\u0002\u26ec\u26e9\u0003\u0002\u0002\u0002",
    "\u26ec\u26ea\u0003\u0002\u0002\u0002\u26ec\u26eb\u0003\u0002\u0002\u0002",
    "\u26ed\u0447\u0003\u0002\u0002\u0002\u26ee\u26f6\u0005\u0458\u022d\u0002",
    "\u26ef\u26f6\u0005\u0450\u0229\u0002\u26f0\u26f6\u0005\u0452\u022a\u0002",
    "\u26f1\u26f6\u0005\u0456\u022c\u0002\u26f2\u26f6\u0005\u0460\u0231\u0002",
    "\u26f3\u26f6\u0005\u0438\u021d\u0002\u26f4\u26f6\u0005\u0434\u021b\u0002",
    "\u26f5\u26ee\u0003\u0002\u0002\u0002\u26f5\u26ef\u0003\u0002\u0002\u0002",
    "\u26f5\u26f0\u0003\u0002\u0002\u0002\u26f5\u26f1\u0003\u0002\u0002\u0002",
    "\u26f5\u26f2\u0003\u0002\u0002\u0002\u26f5\u26f3\u0003\u0002\u0002\u0002",
    "\u26f5\u26f4\u0003\u0002\u0002\u0002\u26f6\u0449\u0003\u0002\u0002\u0002",
    "\u26f7\u26f8\u0007t\u0002\u0002\u26f8\u26f9\u0005\u0376\u01bc\u0002",
    "\u26f9\u2702\u0007\u0360\u0002\u0002\u26fa\u26ff\u0005\u04a0\u0251\u0002",
    "\u26fb\u26fc\u0007\u0364\u0002\u0002\u26fc\u26fe\u0005\u04a0\u0251\u0002",
    "\u26fd\u26fb\u0003\u0002\u0002\u0002\u26fe\u2701\u0003\u0002\u0002\u0002",
    "\u26ff\u26fd\u0003\u0002\u0002\u0002\u26ff\u2700\u0003\u0002\u0002\u0002",
    "\u2700\u2703\u0003\u0002\u0002\u0002\u2701\u26ff\u0003\u0002\u0002\u0002",
    "\u2702\u26fa\u0003\u0002\u0002\u0002\u2702\u2703\u0003\u0002\u0002\u0002",
    "\u2703\u2704\u0003\u0002\u0002\u0002\u2704\u2705\u0007\u0361\u0002\u0002",
    "\u2705\u044b\u0003\u0002\u0002\u0002\u2706\u2707\u0007\u0206\u0002\u0002",
    "\u2707\u2708\u0005\u0376\u01bc\u0002\u2708\u2711\u0007\u0360\u0002\u0002",
    "\u2709\u270e\u0005\u04a0\u0251\u0002\u270a\u270b\u0007\u0364\u0002\u0002",
    "\u270b\u270d\u0005\u04a0\u0251\u0002\u270c\u270a\u0003\u0002\u0002\u0002",
    "\u270d\u2710\u0003\u0002\u0002\u0002\u270e\u270c\u0003\u0002\u0002\u0002",
    "\u270e\u270f\u0003\u0002\u0002\u0002\u270f\u2712\u0003\u0002\u0002\u0002",
    "\u2710\u270e\u0003\u0002\u0002\u0002\u2711\u2709\u0003\u0002\u0002\u0002",
    "\u2711\u2712\u0003\u0002\u0002\u0002\u2712\u2713\u0003\u0002\u0002\u0002",
    "\u2713\u2714\u0007\u0361\u0002\u0002\u2714\u2715\u0007\u0081\u0002\u0002",
    "\u2715\u2716\u0005\u04b0\u0259\u0002\u2716\u044d\u0003\u0002\u0002\u0002",
    "\u2717\u271d\u0005\u0458\u022d\u0002\u2718\u271d\u0005\u0450\u0229\u0002",
    "\u2719\u271d\u0005\u0452\u022a\u0002\u271a\u271d\u0005\u0456\u022c\u0002",
    "\u271b\u271d\u0005\u0460\u0231\u0002\u271c\u2717\u0003\u0002\u0002\u0002",
    "\u271c\u2718\u0003\u0002\u0002\u0002\u271c\u2719\u0003\u0002\u0002\u0002",
    "\u271c\u271a\u0003\u0002\u0002\u0002\u271c\u271b\u0003\u0002\u0002\u0002",
    "\u271d\u044f\u0003\u0002\u0002\u0002\u271e\u2720\u0005\u0376\u01bc\u0002",
    "\u271f\u2721\u0007\u0130\u0002\u0002\u2720\u271f\u0003\u0002\u0002\u0002",
    "\u2720\u2721\u0003\u0002\u0002\u0002\u2721\u2722\u0003\u0002\u0002\u0002",
    "\u2722\u2725\u0005\u04b0\u0259\u0002\u2723\u2724\u0007f\u0002\u0002",
    "\u2724\u2726\u0007h\u0002\u0002\u2725\u2723\u0003\u0002\u0002\u0002",
    "\u2725\u2726\u0003\u0002\u0002\u0002\u2726\u2728\u0003\u0002\u0002\u0002",
    "\u2727\u2729\u0005\u04b2\u025a\u0002\u2728\u2727\u0003\u0002\u0002\u0002",
    "\u2728\u2729\u0003\u0002\u0002\u0002\u2729\u0451\u0003\u0002\u0002\u0002",
    "\u272a\u272b\u0007$\u0002\u0002\u272b\u2737\u0005\u0376\u01bc\u0002",
    "\u272c\u272d\u0007\u0360\u0002\u0002\u272d\u2732\u0005\u0454\u022b\u0002",
    "\u272e\u272f\u0007\u0364\u0002\u0002\u272f\u2731\u0005\u0454\u022b\u0002",
    "\u2730\u272e\u0003\u0002\u0002\u0002\u2731\u2734\u0003\u0002\u0002\u0002",
    "\u2732\u2730\u0003\u0002\u0002\u0002\u2732\u2733\u0003\u0002\u0002\u0002",
    "\u2733\u2735\u0003\u0002\u0002\u0002\u2734\u2732\u0003\u0002\u0002\u0002",
    "\u2735\u2736\u0007\u0361\u0002\u0002\u2736\u2738\u0003\u0002\u0002\u0002",
    "\u2737\u272c\u0003\u0002\u0002\u0002\u2737\u2738\u0003\u0002\u0002\u0002",
    "\u2738\u273b\u0003\u0002\u0002\u0002\u2739\u273a\u0007\u0081\u0002\u0002",
    "\u273a\u273c\u0005\u04b0\u0259\u0002\u273b\u2739\u0003\u0002\u0002\u0002",
    "\u273b\u273c\u0003\u0002\u0002\u0002\u273c\u273f\u0003\u0002\u0002\u0002",
    "\u273d\u273e\u0007O\u0002\u0002\u273e\u2740\u0005\u0148\u00a5\u0002",
    "\u273f\u273d\u0003\u0002\u0002\u0002\u273f\u2740\u0003\u0002\u0002\u0002",
    "\u2740\u0453\u0003\u0002\u0002\u0002\u2741\u2746\u0005\u0376\u01bc\u0002",
    "\u2742\u2744\u0007G\u0002\u0002\u2743\u2742\u0003\u0002\u0002\u0002",
    "\u2743\u2744\u0003\u0002\u0002\u0002\u2744\u2745\u0003\u0002\u0002\u0002",
    "\u2745\u2747\u0005\u04b0\u0259\u0002\u2746\u2743\u0003\u0002\u0002\u0002",
    "\u2746\u2747\u0003\u0002\u0002\u0002\u2747\u2749\u0003\u0002\u0002\u0002",
    "\u2748\u274a\u0005\u04b2\u025a\u0002\u2749\u2748\u0003\u0002\u0002\u0002",
    "\u2749\u274a\u0003\u0002\u0002\u0002\u274a\u0455\u0003\u0002\u0002\u0002",
    "\u274b\u274c\u0005\u0376\u01bc\u0002\u274c\u274d\u0007\u0133\u0002\u0002",
    "\u274d\u0457\u0003\u0002\u0002\u0002\u274e\u2758\u0007\u0145\u0002\u0002",
    "\u274f\u2759\u0007\u0151\u0002\u0002\u2750\u2759\u0007\u012f\u0002\u0002",
    "\u2751\u2752\u0007\u0135\u0002\u0002\u2752\u2753\u0007\u0360\u0002\u0002",
    "\u2753\u2754\u0005\u04ba\u025e\u0002\u2754\u2755\u0007\u0364\u0002\u0002",
    "\u2755\u2756\u0005\u04b8\u025d\u0002\u2756\u2757\u0007\u0361\u0002\u0002",
    "\u2757\u2759\u0003\u0002\u0002\u0002\u2758\u274f\u0003\u0002\u0002\u0002",
    "\u2758\u2750\u0003\u0002\u0002\u0002\u2758\u2751\u0003\u0002\u0002\u0002",
    "\u2759\u0459\u0003\u0002\u0002\u0002\u275a\u275b\u0007\u0147\u0002\u0002",
    "\u275b\u275c\u0007\u0360\u0002\u0002\u275c\u2761\u0005\u045c\u022f\u0002",
    "\u275d\u275e\u0007\u0364\u0002\u0002\u275e\u2760\u0005\u045c\u022f\u0002",
    "\u275f\u275d\u0003\u0002\u0002\u0002\u2760\u2763\u0003\u0002\u0002\u0002",
    "\u2761\u275f\u0003\u0002\u0002\u0002\u2761\u2762\u0003\u0002\u0002\u0002",
    "\u2762\u2764\u0003\u0002\u0002\u0002\u2763\u2761\u0003\u0002\u0002\u0002",
    "\u2764\u2765\u0007\u0361\u0002\u0002\u2765\u045b\u0003\u0002\u0002\u0002",
    "\u2766\u2768\u0005\u0376\u01bc\u0002\u2767\u2769\u0005\u04b0\u0259\u0002",
    "\u2768\u2767\u0003\u0002\u0002\u0002\u2768\u2769\u0003\u0002\u0002\u0002",
    "\u2769\u276c\u0003\u0002\u0002\u0002\u276a\u276b\u0007f\u0002\u0002",
    "\u276b\u276d\u0007h\u0002\u0002\u276c\u276a\u0003\u0002\u0002\u0002",
    "\u276c\u276d\u0003\u0002\u0002\u0002\u276d\u276f\u0003\u0002\u0002\u0002",
    "\u276e\u2770\u0005\u04b2\u025a\u0002\u276f\u276e\u0003\u0002\u0002\u0002",
    "\u276f\u2770\u0003\u0002\u0002\u0002\u2770\u045d\u0003\u0002\u0002\u0002",
    "\u2771\u2772\u0007\u0148\u0002\u0002\u2772\u2775\u0007$\u0002\u0002",
    "\u2773\u2774\u0007\u0081\u0002\u0002\u2774\u2776\u0005\u04b0\u0259\u0002",
    "\u2775\u2773\u0003\u0002\u0002\u0002\u2775\u2776\u0003\u0002\u0002\u0002",
    "\u2776\u045f\u0003\u0002\u0002\u0002\u2777\u2778\u0007\u0126\u0002\u0002",
    "\u2778\u2779\u0005\u0376\u01bc\u0002\u2779\u277e\u0007O\u0002\u0002",
    "\u277a\u277f\u0005\u0462\u0232\u0002\u277b\u277f\u0005\u0466\u0234\u0002",
    "\u277c\u277f\u0005\u045a\u022e\u0002\u277d\u277f\u0005\u045e\u0230\u0002",
    "\u277e\u277a\u0003\u0002\u0002\u0002\u277e\u277b\u0003\u0002\u0002\u0002",
    "\u277e\u277c\u0003\u0002\u0002\u0002\u277e\u277d\u0003\u0002\u0002\u0002",
    "\u277f\u0461\u0003\u0002\u0002\u0002\u2780\u2781\u0007\u0096\u0002\u0002",
    "\u2781\u2782\u0007\u0141\u0002\u0002\u2782\u2784\u0005\u04b0\u0259\u0002",
    "\u2783\u2785\u0005\u0464\u0233\u0002\u2784\u2783\u0003\u0002\u0002\u0002",
    "\u2784\u2785\u0003\u0002\u0002\u0002\u2785\u2788\u0003\u0002\u0002\u0002",
    "\u2786\u2787\u0007f\u0002\u0002\u2787\u2789\u0007h\u0002\u0002\u2788",
    "\u2786\u0003\u0002\u0002\u0002\u2788\u2789\u0003\u0002\u0002\u0002\u2789",
    "\u0463\u0003\u0002\u0002\u0002\u278a\u278d\u0007\u0138\u0002\u0002\u278b",
    "\u278d\u0007H\u0002\u0002\u278c\u278a\u0003\u0002\u0002\u0002\u278c",
    "\u278b\u0003\u0002\u0002\u0002\u278d\u278e\u0003\u0002\u0002\u0002\u278e",
    "\u278f\u0007\u0013\u0002\u0002\u278f\u2790\u0005\u04b0\u0259\u0002\u2790",
    "\u0465\u0003\u0002\u0002\u0002\u2791\u2792\u0007\u0152\u0002\u0002\u2792",
    "\u2793\u0007\u0360\u0002\u0002\u2793\u2794\u0005\u03f8\u01fd\u0002\u2794",
    "\u2795\u0007\u0361\u0002\u0002\u2795\u2796\u0007\u0141\u0002\u0002\u2796",
    "\u2799\u0005\u04b0\u0259\u0002\u2797\u2798\u0007f\u0002\u0002\u2798",
    "\u279a\u0007h\u0002\u0002\u2799\u2797\u0003\u0002\u0002\u0002\u2799",
    "\u279a\u0003\u0002\u0002\u0002\u279a\u27a7\u0003\u0002\u0002\u0002\u279b",
    "\u279c\u0007\u0174\u0002\u0002\u279c\u279d\u0007\u0176\u0002\u0002\u279d",
    "\u279e\u0007\u0360\u0002\u0002\u279e\u279f\u0005\u03f8\u01fd\u0002\u279f",
    "\u27a0\u0007\u0361\u0002\u0002\u27a0\u27a1\u0007\u0141\u0002\u0002\u27a1",
    "\u27a4\u0005\u04b0\u0259\u0002\u27a2\u27a3\u0007f\u0002\u0002\u27a3",
    "\u27a5\u0007h\u0002\u0002\u27a4\u27a2\u0003\u0002\u0002\u0002\u27a4",
    "\u27a5\u0003\u0002\u0002\u0002\u27a5\u27a7\u0003\u0002\u0002\u0002\u27a6",
    "\u2791\u0003\u0002\u0002\u0002\u27a6\u279b\u0003\u0002\u0002\u0002\u27a7",
    "\u0467\u0003\u0002\u0002\u0002\u27a8\u27aa\u0005\u046a\u0236\u0002\u27a9",
    "\u27a8\u0003\u0002\u0002\u0002\u27aa\u27ab\u0003\u0002\u0002\u0002\u27ab",
    "\u27a9\u0003\u0002\u0002\u0002\u27ab\u27ac\u0003\u0002\u0002\u0002\u27ac",
    "\u0469\u0003\u0002\u0002\u0002\u27ad\u27b2\u0005\u046e\u0238\u0002\u27ae",
    "\u27b0\u0007\u0365\u0002\u0002\u27af\u27ae\u0003\u0002\u0002\u0002\u27af",
    "\u27b0\u0003\u0002\u0002\u0002\u27b0\u27b3\u0003\u0002\u0002\u0002\u27b1",
    "\u27b3\u0007\u0002\u0002\u0003\u27b2\u27af\u0003\u0002\u0002\u0002\u27b2",
    "\u27b1\u0003\u0002\u0002\u0002\u27b3\u27b6\u0003\u0002\u0002\u0002\u27b4",
    "\u27b6\u0005\u046c\u0237\u0002\u27b5\u27ad\u0003\u0002\u0002\u0002\u27b5",
    "\u27b4\u0003\u0002\u0002\u0002\u27b6\u046b\u0003\u0002\u0002\u0002\u27b7",
    "\u27b8\u0007\u0357\u0002\u0002\u27b8\u27b9\u0007\u0357\u0002\u0002\u27b9",
    "\u27ba\u0005\u04b4\u025b\u0002\u27ba\u27bb\u0007\u0356\u0002\u0002\u27bb",
    "\u27bc\u0007\u0356\u0002\u0002\u27bc\u046d\u0003\u0002\u0002\u0002\u27bd",
    "\u27cb\u0005\u0498\u024d\u0002\u27be\u27cb\u0005\u0474\u023b\u0002\u27bf",
    "\u27cb\u0005\u0476\u023c\u0002\u27c0\u27cb\u0005\u0478\u023d\u0002\u27c1",
    "\u27cb\u0005\u047a\u023e\u0002\u27c2\u27cb\u0005\u0480\u0241\u0002\u27c3",
    "\u27cb\u0005\u0484\u0243\u0002\u27c4\u27cb\u0005\u048e\u0248\u0002\u27c5",
    "\u27cb\u0005\u0490\u0249\u0002\u27c6\u27cb\u0005\u0492\u024a\u0002\u27c7",
    "\u27cb\u0005\u04c8\u0265\u0002\u27c8\u27cb\u0005\u0470\u0239\u0002\u27c9",
    "\u27cb\u0005\u0472\u023a\u0002\u27ca\u27bd\u0003\u0002\u0002\u0002\u27ca",
    "\u27be\u0003\u0002\u0002\u0002\u27ca\u27bf\u0003\u0002\u0002\u0002\u27ca",
    "\u27c0\u0003\u0002\u0002\u0002\u27ca\u27c1\u0003\u0002\u0002\u0002\u27ca",
    "\u27c2\u0003\u0002\u0002\u0002\u27ca\u27c3\u0003\u0002\u0002\u0002\u27ca",
    "\u27c4\u0003\u0002\u0002\u0002\u27ca\u27c5\u0003\u0002\u0002\u0002\u27ca",
    "\u27c6\u0003\u0002\u0002\u0002\u27ca\u27c7\u0003\u0002\u0002\u0002\u27ca",
    "\u27c8\u0003\u0002\u0002\u0002\u27ca\u27c9\u0003\u0002\u0002\u0002\u27cb",
    "\u046f\u0003\u0002\u0002\u0002\u27cc\u27cd\u0005\u04a2\u0252\u0002\u27cd",
    "\u27ce\u0007\u0344\u0002\u0002\u27ce\u27cf\u0005\u03f8\u01fd\u0002\u27cf",
    "\u0471\u0003\u0002\u0002\u0002\u27d0\u27d2\u0007\u0014\u0002\u0002\u27d1",
    "\u27d0\u0003\u0002\u0002\u0002\u27d1\u27d2\u0003\u0002\u0002\u0002\u27d2",
    "\u27d3\u0003\u0002\u0002\u0002\u27d3\u27d4\u0005\u04a2\u0252\u0002\u27d4",
    "\u0473\u0003\u0002\u0002\u0002\u27d5\u27d7\u0007\u001f\u0002\u0002\u27d6",
    "\u27d8\u0005\u04b4\u025b\u0002\u27d7\u27d6\u0003\u0002\u0002\u0002\u27d7",
    "\u27d8\u0003\u0002\u0002\u0002\u27d8\u27db\u0003\u0002\u0002\u0002\u27d9",
    "\u27da\u0007\u00a7\u0002\u0002\u27da\u27dc\u0005\u04c6\u0264\u0002\u27db",
    "\u27d9\u0003\u0002\u0002\u0002\u27db\u27dc\u0003\u0002\u0002\u0002\u27dc",
    "\u0475\u0003\u0002\u0002\u0002\u27dd\u27df\u00077\u0002\u0002\u27de",
    "\u27e0\u0005\u04b4\u025b\u0002\u27df\u27de\u0003\u0002\u0002\u0002\u27df",
    "\u27e0\u0003\u0002\u0002\u0002\u27e0\u27e3\u0003\u0002\u0002\u0002\u27e1",
    "\u27e2\u0007\u00a7\u0002\u0002\u27e2\u27e4\u0005\u04c6\u0264\u0002\u27e3",
    "\u27e1\u0003\u0002\u0002\u0002\u27e3\u27e4\u0003\u0002\u0002\u0002\u27e4",
    "\u0477\u0003\u0002\u0002\u0002\u27e5\u27e6\u0007\u0137\u0002\u0002\u27e6",
    "\u27e7\u0005\u04b4\u025b\u0002\u27e7\u0479\u0003\u0002\u0002\u0002\u27e8",
    "\u27e9\u0007E\u0002\u0002\u27e9\u27ea\u0005\u04c6\u0264\u0002\u27ea",
    "\u27eb\u0007\u0098\u0002\u0002\u27eb\u27ef\u0005\u0468\u0235\u0002\u27ec",
    "\u27ee\u0005\u047c\u023f\u0002\u27ed\u27ec\u0003\u0002\u0002\u0002\u27ee",
    "\u27f1\u0003\u0002\u0002\u0002\u27ef\u27ed\u0003\u0002\u0002\u0002\u27ef",
    "\u27f0\u0003\u0002\u0002\u0002\u27f0\u27f3\u0003\u0002\u0002\u0002\u27f1",
    "\u27ef\u0003\u0002\u0002\u0002\u27f2\u27f4\u0005\u047e\u0240\u0002\u27f3",
    "\u27f2\u0003\u0002\u0002\u0002\u27f3\u27f4\u0003\u0002\u0002\u0002\u27f4",
    "\u27f5\u0003\u0002\u0002\u0002\u27f5\u27f6\u0007\u01ea\u0002\u0002\u27f6",
    "\u27f7\u0007E\u0002\u0002\u27f7\u047b\u0003\u0002\u0002\u0002\u27f8",
    "\u27f9\u0007\u0132\u0002\u0002\u27f9\u27fa\u0005\u04c6\u0264\u0002\u27fa",
    "\u27fb\u0007\u0098\u0002\u0002\u27fb\u27fc\u0005\u0468\u0235\u0002\u27fc",
    "\u047d\u0003\u0002\u0002\u0002\u27fd\u27fe\u00072\u0002\u0002\u27fe",
    "\u27ff\u0005\u0468\u0235\u0002\u27ff\u047f\u0003\u0002\u0002\u0002\u2800",
    "\u2802\u0005\u046c\u0237\u0002\u2801\u2800\u0003\u0002\u0002\u0002\u2801",
    "\u2802\u0003\u0002\u0002\u0002\u2802\u2807\u0003\u0002\u0002\u0002\u2803",
    "\u2804\u0007\u00a9\u0002\u0002\u2804\u2808\u0005\u04c6\u0264\u0002\u2805",
    "\u2806\u0007;\u0002\u0002\u2806\u2808\u0005\u0482\u0242\u0002\u2807",
    "\u2803\u0003\u0002\u0002\u0002\u2807\u2805\u0003\u0002\u0002\u0002\u2807",
    "\u2808\u0003\u0002\u0002\u0002\u2808\u2809\u0003\u0002\u0002\u0002\u2809",
    "\u280a\u0007^\u0002\u0002\u280a\u280b\u0005\u0468\u0235\u0002\u280b",
    "\u280c\u0007\u01ea\u0002\u0002\u280c\u280e\u0007^\u0002\u0002\u280d",
    "\u280f\u0005\u04b4\u025b\u0002\u280e\u280d\u0003\u0002\u0002\u0002\u280e",
    "\u280f\u0003\u0002\u0002\u0002\u280f\u0481\u0003\u0002\u0002\u0002\u2810",
    "\u2811\u0005\u0376\u01bc\u0002\u2811\u2813\u0007G\u0002\u0002\u2812",
    "\u2814\u0007\u0342\u0002\u0002\u2813\u2812\u0003\u0002\u0002\u0002\u2813",
    "\u2814\u0003\u0002\u0002\u0002\u2814\u2815\u0003\u0002\u0002\u0002\u2815",
    "\u2816\u0005\u048a\u0246\u0002\u2816\u2817\u0007\u0382\u0002\u0002\u2817",
    "\u2818\u0005\u048c\u0247\u0002\u2818\u282a\u0003\u0002\u0002\u0002\u2819",
    "\u281a\u0005\u0376\u01bc\u0002\u281a\u2827\u0007G\u0002\u0002\u281b",
    "\u2821\u0005\u04c2\u0262\u0002\u281c\u281e\u0007\u0360\u0002\u0002\u281d",
    "\u281f\u0005\u03b4\u01db\u0002\u281e\u281d\u0003\u0002\u0002\u0002\u281e",
    "\u281f\u0003\u0002\u0002\u0002\u281f\u2820\u0003\u0002\u0002\u0002\u2820",
    "\u2822\u0007\u0361\u0002\u0002\u2821\u281c\u0003\u0002\u0002\u0002\u2821",
    "\u2822\u0003\u0002\u0002\u0002\u2822\u2828\u0003\u0002\u0002\u0002\u2823",
    "\u2824\u0007\u0360\u0002\u0002\u2824\u2825\u0005\u0148\u00a5\u0002\u2825",
    "\u2826\u0007\u0361\u0002\u0002\u2826\u2828\u0003\u0002\u0002\u0002\u2827",
    "\u281b\u0003\u0002\u0002\u0002\u2827\u2823\u0003\u0002\u0002\u0002\u2828",
    "\u282a\u0003\u0002\u0002\u0002\u2829\u2810\u0003\u0002\u0002\u0002\u2829",
    "\u2819\u0003\u0002\u0002\u0002\u282a\u0483\u0003\u0002\u0002\u0002\u282b",
    "\u282c\u0007\u0136\u0002\u0002\u282c\u282d\u0005\u0376\u01bc\u0002\u282d",
    "\u282e\u0007G\u0002\u0002\u282e\u2831\u0005\u0486\u0244\u0002\u282f",
    "\u2830\u0007\u014e\u0002\u0002\u2830\u2832\u0007\u0134\u0002\u0002\u2831",
    "\u282f\u0003\u0002\u0002\u0002\u2831\u2832\u0003\u0002\u0002\u0002\u2832",
    "\u2833\u0003\u0002\u0002\u0002\u2833\u2834\u0005\u04c8\u0265\u0002\u2834",
    "\u0485\u0003\u0002\u0002\u0002\u2835\u2836\u0005\u048a\u0246\u0002\u2836",
    "\u2837\u0007\u0382\u0002\u0002\u2837\u2838\u0005\u048c\u0247\u0002\u2838",
    "\u2840\u0003\u0002\u0002\u0002\u2839\u283a\u0007\u013a\u0002\u0002\u283a",
    "\u283b\u0007\u0141\u0002\u0002\u283b\u283d\u0005\u0340\u01a1\u0002\u283c",
    "\u283e\u0005\u0488\u0245\u0002\u283d\u283c\u0003\u0002\u0002\u0002\u283d",
    "\u283e\u0003\u0002\u0002\u0002\u283e\u2840\u0003\u0002\u0002\u0002\u283f",
    "\u2835\u0003\u0002\u0002\u0002\u283f\u2839\u0003\u0002\u0002\u0002\u2840",
    "\u0487\u0003\u0002\u0002\u0002\u2841\u2842\u0007\u0011\u0002\u0002\u2842",
    "\u2843\u0005\u048a\u0246\u0002\u2843\u2844\u0007\r\u0002\u0002\u2844",
    "\u2845\u0005\u048c\u0247\u0002\u2845\u0489\u0003\u0002\u0002\u0002\u2846",
    "\u2847\u0005\u04dc\u026f\u0002\u2847\u048b\u0003\u0002\u0002\u0002\u2848",
    "\u2849\u0005\u04dc\u026f\u0002\u2849\u048d\u0003\u0002\u0002\u0002\u284a",
    "\u284b\u0007h\u0002\u0002\u284b\u048f\u0003\u0002\u0002\u0002\u284c",
    "\u284d\u0007\u0146\u0002\u0002\u284d\u284e\u0005\u04ba\u025e\u0002\u284e",
    "\u0491\u0003\u0002\u0002\u0002\u284f\u2851\u0007\u0081\u0002\u0002\u2850",
    "\u2852\u0005\u03f8\u01fd\u0002\u2851\u2850\u0003\u0002\u0002\u0002\u2851",
    "\u2852\u0003\u0002\u0002\u0002\u2852\u0493\u0003\u0002\u0002\u0002\u2853",
    "\u2855\u0007\u0133\u0002\u0002\u2854\u2856\u0005\u0496\u024c\u0002\u2855",
    "\u2854\u0003\u0002\u0002\u0002\u2856\u2857\u0003\u0002\u0002\u0002\u2857",
    "\u2855\u0003\u0002\u0002\u0002\u2857\u2858\u0003\u0002\u0002\u0002\u2858",
    "\u0495\u0003\u0002\u0002\u0002\u2859\u285a\u0007\u00a7\u0002\u0002\u285a",
    "\u285f\u0005\u04ba\u025e\u0002\u285b\u285c\u0007m\u0002\u0002\u285c",
    "\u285e\u0005\u04ba\u025e\u0002\u285d\u285b\u0003\u0002\u0002\u0002\u285e",
    "\u2861\u0003\u0002\u0002\u0002\u285f\u285d\u0003\u0002\u0002\u0002\u285f",
    "\u2860\u0003\u0002\u0002\u0002\u2860\u2864\u0003\u0002\u0002\u0002\u2861",
    "\u285f\u0003\u0002\u0002\u0002\u2862\u2863\u0007\u0098\u0002\u0002\u2863",
    "\u2865\u0005\u0468\u0235\u0002\u2864\u2862\u0003\u0002\u0002\u0002\u2864",
    "\u2865\u0003\u0002\u0002\u0002\u2865\u2866\u0003\u0002\u0002\u0002\u2866",
    "\u2867\b\u024c\u0001\u0002\u2867\u0497\u0003\u0002\u0002\u0002\u2868",
    "\u286a\u0007\'\u0002\u0002\u2869\u2868\u0003\u0002\u0002\u0002\u2869",
    "\u286a\u0003\u0002\u0002\u0002\u286a\u286c\u0003\u0002\u0002\u0002\u286b",
    "\u286d\u0005\u049a\u024e\u0002\u286c\u286b\u0003\u0002\u0002\u0002\u286c",
    "\u286d\u0003\u0002\u0002\u0002\u286d\u286e\u0003\u0002\u0002\u0002\u286e",
    "\u286f\u0005\u049c\u024f\u0002\u286f\u0499\u0003\u0002\u0002\u0002\u2870",
    "\u2872\u0005\u044e\u0228\u0002\u2871\u2873\u0007\u0365\u0002\u0002\u2872",
    "\u2871\u0003\u0002\u0002\u0002\u2872\u2873\u0003\u0002\u0002\u0002\u2873",
    "\u2875\u0003\u0002\u0002\u0002\u2874\u2870\u0003\u0002\u0002\u0002\u2875",
    "\u2876\u0003\u0002\u0002\u0002\u2876\u2874\u0003\u0002\u0002\u0002\u2876",
    "\u2877\u0003\u0002\u0002\u0002\u2877\u049b\u0003\u0002\u0002\u0002\u2878",
    "\u2879\u0007\u01b6\u0002\u0002\u2879\u287b\u0005\u0468\u0235\u0002\u287a",
    "\u287c\u0005\u0494\u024b\u0002\u287b\u287a\u0003\u0002\u0002\u0002\u287b",
    "\u287c\u0003\u0002\u0002\u0002\u287c\u287d\u0003\u0002\u0002\u0002\u287d",
    "\u287f\u0007\u01ea\u0002\u0002\u287e\u2880\u0005\u04b4\u025b\u0002\u287f",
    "\u287e\u0003\u0002\u0002\u0002\u287f\u2880\u0003\u0002\u0002\u0002\u2880",
    "\u2881\u0003\u0002\u0002\u0002\u2881\u2882\b\u024f\u0001\u0002\u2882",
    "\u049d\u0003\u0002\u0002\u0002\u2883\u2884\u0007\u01b6\u0002\u0002\u2884",
    "\u2886\u0005\u0468\u0235\u0002\u2885\u2887\u0005\u0494\u024b\u0002\u2886",
    "\u2885\u0003\u0002\u0002\u0002\u2886\u2887\u0003\u0002\u0002\u0002\u2887",
    "\u049f\u0003\u0002\u0002\u0002\u2888\u288c\u0005\u0376\u01bc\u0002\u2889",
    "\u288b\t\u009e\u0002\u0002\u288a\u2889\u0003\u0002\u0002\u0002\u288b",
    "\u288e\u0003\u0002\u0002\u0002\u288c\u288a\u0003\u0002\u0002\u0002\u288c",
    "\u288d\u0003\u0002\u0002\u0002\u288d\u2890\u0003\u0002\u0002\u0002\u288e",
    "\u288c\u0003\u0002\u0002\u0002\u288f\u2891\u0005\u04b0\u0259\u0002\u2890",
    "\u288f\u0003\u0002\u0002\u0002\u2890\u2891\u0003\u0002\u0002\u0002\u2891",
    "\u2893\u0003\u0002\u0002\u0002\u2892\u2894\u0005\u04b2\u025a\u0002\u2893",
    "\u2892\u0003\u0002\u0002\u0002\u2893\u2894\u0003\u0002\u0002\u0002\u2894",
    "\u04a1\u0003\u0002\u0002\u0002\u2895\u2899\u0005\u04a4\u0253\u0002\u2896",
    "\u2898\u0005\u04a6\u0254\u0002\u2897\u2896\u0003\u0002\u0002\u0002\u2898",
    "\u289b\u0003\u0002\u0002\u0002\u2899\u2897\u0003\u0002\u0002\u0002\u2899",
    "\u289a\u0003\u0002\u0002\u0002\u289a\u04a3\u0003\u0002\u0002\u0002\u289b",
    "\u2899\u0003\u0002\u0002\u0002\u289c\u289e\u0005\u04be\u0260\u0002\u289d",
    "\u289f\u0005\u04a8\u0255\u0002\u289e\u289d\u0003\u0002\u0002\u0002\u289e",
    "\u289f\u0003\u0002\u0002\u0002\u289f\u04a5\u0003\u0002\u0002\u0002\u28a0",
    "\u28a2\u0005\u04c0\u0261\u0002\u28a1\u28a0\u0003\u0002\u0002\u0002\u28a1",
    "\u28a2\u0003\u0002\u0002\u0002\u28a2\u28a3\u0003\u0002\u0002\u0002\u28a3",
    "\u28a9\u0005\u04a8\u0255\u0002\u28a4\u28a6\u0005\u04c0\u0261\u0002\u28a5",
    "\u28a7\u0005\u04a8\u0255\u0002\u28a6\u28a5\u0003\u0002\u0002\u0002\u28a6",
    "\u28a7\u0003\u0002\u0002\u0002\u28a7\u28a9\u0003\u0002\u0002\u0002\u28a8",
    "\u28a1\u0003\u0002\u0002\u0002\u28a8\u28a4\u0003\u0002\u0002\u0002\u28a9",
    "\u04a7\u0003\u0002\u0002\u0002\u28aa\u28ad\u0005\u04aa\u0256\u0002\u28ab",
    "\u28ad\u0005\u04ae\u0258\u0002\u28ac\u28aa\u0003\u0002\u0002\u0002\u28ac",
    "\u28ab\u0003\u0002\u0002\u0002\u28ad\u04a9\u0003\u0002\u0002\u0002\u28ae",
    "\u28b7\u0007\u0360\u0002\u0002\u28af\u28b4\u0005\u04ac\u0257\u0002\u28b0",
    "\u28b1\u0007\u0364\u0002\u0002\u28b1\u28b3\u0005\u04ac\u0257\u0002\u28b2",
    "\u28b0\u0003\u0002\u0002\u0002\u28b3\u28b6\u0003\u0002\u0002\u0002\u28b4",
    "\u28b2\u0003\u0002\u0002\u0002\u28b4\u28b5\u0003\u0002\u0002\u0002\u28b5",
    "\u28b8\u0003\u0002\u0002\u0002\u28b6\u28b4\u0003\u0002\u0002\u0002\u28b7",
    "\u28af\u0003\u0002\u0002\u0002\u28b7\u28b8\u0003\u0002\u0002\u0002\u28b8",
    "\u28b9\u0003\u0002\u0002\u0002\u28b9\u28ba\u0007\u0361\u0002\u0002\u28ba",
    "\u04ab\u0003\u0002\u0002\u0002\u28bb\u28bc\u0005\u0376\u01bc\u0002\u28bc",
    "\u28bd\u0007\u0355\u0002\u0002\u28bd\u28be\u0007\u0356\u0002\u0002\u28be",
    "\u28c0\u0003\u0002\u0002\u0002\u28bf\u28bb\u0003\u0002\u0002\u0002\u28bf",
    "\u28c0\u0003\u0002\u0002\u0002\u28c0\u28c1\u0003\u0002\u0002\u0002\u28c1",
    "\u28c2\u0005\u03f8\u01fd\u0002\u28c2\u04ad\u0003\u0002\u0002\u0002\u28c3",
    "\u28c4\u0007\u0362\u0002\u0002\u28c4\u28c5\u0005\u03f8\u01fd\u0002\u28c5",
    "\u28c6\u0007\u0363\u0002\u0002\u28c6\u04af\u0003\u0002\u0002\u0002\u28c7",
    "\u28d7\u0005\u0392\u01ca\u0002\u28c8\u28ca\u0007\u0148\u0002\u0002\u28c9",
    "\u28c8\u0003\u0002\u0002\u0002\u28c9\u28ca\u0003\u0002\u0002\u0002\u28ca",
    "\u28cb\u0003\u0002\u0002\u0002\u28cb\u28cf\u0005\u0376\u01bc\u0002\u28cc",
    "\u28ce\u0005\u037c\u01bf\u0002\u28cd\u28cc\u0003\u0002\u0002\u0002\u28ce",
    "\u28d1\u0003\u0002\u0002\u0002\u28cf\u28cd\u0003\u0002\u0002\u0002\u28cf",
    "\u28d0\u0003\u0002\u0002\u0002\u28d0\u28d4\u0003\u0002\u0002\u0002\u28d1",
    "\u28cf\u0003\u0002\u0002\u0002\u28d2\u28d3\u0007\u034f\u0002\u0002\u28d3",
    "\u28d5\t\u009f\u0002\u0002\u28d4\u28d2\u0003\u0002\u0002\u0002\u28d4",
    "\u28d5\u0003\u0002\u0002\u0002\u28d5\u28d7\u0003\u0002\u0002\u0002\u28d6",
    "\u28c7\u0003\u0002\u0002\u0002\u28d6\u28c9\u0003\u0002\u0002\u0002\u28d7",
    "\u04b1\u0003\u0002\u0002\u0002\u28d8\u28d9\t\u00a0\u0002\u0002\u28d9",
    "\u28da\u0005\u03f8\u01fd\u0002\u28da\u04b3\u0003\u0002\u0002\u0002\u28db",
    "\u28dc\u0005\u0376\u01bc\u0002\u28dc\u04b5\u0003\u0002\u0002\u0002\u28dd",
    "\u28de\t\u00a1\u0002\u0002\u28de\u04b7\u0003\u0002\u0002\u0002\u28df",
    "\u28e0\u0007\u0352\u0002\u0002\u28e0\u28e1\u0005\u04b6\u025c\u0002\u28e1",
    "\u04b9\u0003\u0002\u0002\u0002\u28e2\u28e7\u0005\u0346\u01a4\u0002\u28e3",
    "\u28e4\u0005\u042a\u0216\u0002\u28e4\u28e5\b\u025e\u0001\u0002\u28e5",
    "\u28e7\u0003\u0002\u0002\u0002\u28e6\u28e2\u0003\u0002\u0002\u0002\u28e6",
    "\u28e3\u0003\u0002\u0002\u0002\u28e7\u04bb\u0003\u0002\u0002\u0002\u28e8",
    "\u28ec\u0005\u0376\u01bc\u0002\u28e9\u28eb\u0005\u037c\u01bf\u0002\u28ea",
    "\u28e9\u0003\u0002\u0002\u0002\u28eb\u28ee\u0003\u0002\u0002\u0002\u28ec",
    "\u28ea\u0003\u0002\u0002\u0002\u28ec\u28ed\u0003\u0002\u0002\u0002\u28ed",
    "\u04bd\u0003\u0002\u0002\u0002\u28ee\u28ec\u0003\u0002\u0002\u0002\u28ef",
    "\u28f3\u0005\u0376\u01bc\u0002\u28f0\u28f2\u0005\u037c\u01bf\u0002\u28f1",
    "\u28f0\u0003\u0002\u0002\u0002\u28f2\u28f5\u0003\u0002\u0002\u0002\u28f3",
    "\u28f1\u0003\u0002\u0002\u0002\u28f3\u28f4\u0003\u0002\u0002\u0002\u28f4",
    "\u28f6\u0003\u0002\u0002\u0002\u28f5\u28f3\u0003\u0002\u0002\u0002\u28f6",
    "\u28f7\u0007\u035d\u0002\u0002\u28f7\u28f8\b\u0260\u0001\u0002\u28f8",
    "\u2901\u0003\u0002\u0002\u0002\u28f9\u28fd\u0005\u0376\u01bc\u0002\u28fa",
    "\u28fc\u0005\u037c\u01bf\u0002\u28fb\u28fa\u0003\u0002\u0002\u0002\u28fc",
    "\u28ff\u0003\u0002\u0002\u0002\u28fd\u28fb\u0003\u0002\u0002\u0002\u28fd",
    "\u28fe\u0003\u0002\u0002\u0002\u28fe\u2901\u0003\u0002\u0002\u0002\u28ff",
    "\u28fd\u0003\u0002\u0002\u0002\u2900\u28ef\u0003\u0002\u0002\u0002\u2900",
    "\u28f9\u0003\u0002\u0002\u0002\u2901\u04bf\u0003\u0002\u0002\u0002\u2902",
    "\u2906\u0005\u037c\u01bf\u0002\u2903\u2905\u0005\u037c\u01bf\u0002\u2904",
    "\u2903\u0003\u0002\u0002\u0002\u2905\u2908\u0003\u0002\u0002\u0002\u2906",
    "\u2904\u0003\u0002\u0002\u0002\u2906\u2907\u0003\u0002\u0002\u0002\u2907",
    "\u2912\u0003\u0002\u0002\u0002\u2908\u2906\u0003\u0002\u0002\u0002\u2909",
    "\u290b\u0005\u037c\u01bf\u0002\u290a\u2909\u0003\u0002\u0002\u0002\u290b",
    "\u290e\u0003\u0002\u0002\u0002\u290c\u290a\u0003\u0002\u0002\u0002\u290c",
    "\u290d\u0003\u0002\u0002\u0002\u290d\u290f\u0003\u0002\u0002\u0002\u290e",
    "\u290c\u0003\u0002\u0002\u0002\u290f\u2910\u0007\u035d\u0002\u0002\u2910",
    "\u2912\b\u0261\u0001\u0002\u2911\u2902\u0003\u0002\u0002\u0002\u2911",
    "\u290c\u0003\u0002\u0002\u0002\u2912\u04c1\u0003\u0002\u0002\u0002\u2913",
    "\u2914\u0005\u0340\u01a1\u0002\u2914\u04c3\u0003\u0002\u0002\u0002\u2915",
    "\u2917\t\u00a2\u0002\u0002\u2916\u2918\u0007;\u0002\u0002\u2917\u2916",
    "\u0003\u0002\u0002\u0002\u2917\u2918\u0003\u0002\u0002\u0002\u2918\u2919",
    "\u0003\u0002\u0002\u0002\u2919\u291b\u0007\u0360\u0002\u0002\u291a\u291c",
    "\u0005\u03b4\u01db\u0002\u291b\u291a\u0003\u0002\u0002\u0002\u291b\u291c",
    "\u0003\u0002\u0002\u0002\u291c\u291d\u0003\u0002\u0002\u0002\u291d\u291e",
    "\u0007\u0361\u0002\u0002\u291e\u04c5\u0003\u0002\u0002\u0002\u291f\u2920",
    "\u0005\u03f8\u01fd\u0002\u2920\u04c7\u0003\u0002\u0002\u0002\u2921\u2926",
    "\u0005\u04ca\u0266\u0002\u2922\u2926\u0005\f\u0007\u0002\u2923\u2926",
    "\u0005\u04d2\u026a\u0002\u2924\u2926\u0005\u000e\b\u0002\u2925\u2921",
    "\u0003\u0002\u0002\u0002\u2925\u2922\u0003\u0002\u0002\u0002\u2925\u2923",
    "\u0003\u0002\u0002\u0002\u2925\u2924\u0003\u0002\u0002\u0002\u2926\u04c9",
    "\u0003\u0002\u0002\u0002\u2927\u2928\u0007\u02e8\u0002\u0002\u2928\u2929",
    "\u0007\u00d7\u0002\u0002\u2929\u292b\u0005\u03f8\u01fd\u0002\u292a\u292c",
    "\u0005\u04cc\u0267\u0002\u292b\u292a\u0003\u0002\u0002\u0002\u292b\u292c",
    "\u0003\u0002\u0002\u0002\u292c\u292e\u0003\u0002\u0002\u0002\u292d\u292f",
    "\u0005\u04ce\u0268\u0002\u292e\u292d\u0003\u0002\u0002\u0002\u292e\u292f",
    "\u0003\u0002\u0002\u0002\u292f\u04cb\u0003\u0002\u0002\u0002\u2930\u2931",
    "\u0007\u00b8\u0002\u0002\u2931\u2933\u0007\u00bf\u0002\u0002\u2932\u2930",
    "\u0003\u0002\u0002\u0002\u2932\u2933\u0003\u0002\u0002\u0002\u2933\u2934",
    "\u0003\u0002\u0002\u0002\u2934\u2935\u0007N\u0002\u0002\u2935\u2936",
    "\u0005\u03b4\u01db\u0002\u2936\u04cd\u0003\u0002\u0002\u0002\u2937\u2938",
    "\u0007\u00a5\u0002\u0002\u2938\u293d\u0005\u04d0\u0269\u0002\u2939\u293a",
    "\u0007\u0364\u0002\u0002\u293a\u293c\u0005\u04d0\u0269\u0002\u293b\u2939",
    "\u0003\u0002\u0002\u0002\u293c\u293f\u0003\u0002\u0002\u0002\u293d\u293b",
    "\u0003\u0002\u0002\u0002\u293d\u293e\u0003\u0002\u0002\u0002\u293e\u04cf",
    "\u0003\u0002\u0002\u0002\u293f\u293d\u0003\u0002\u0002\u0002\u2940\u2941",
    "\t\u009e\u0002\u0002\u2941\u2942\u0005\u03f8\u01fd\u0002\u2942\u04d1",
    "\u0003\u0002\u0002\u0002\u2943\u2948\u0005\u04d4\u026b\u0002\u2944\u2948",
    "\u0005\u04d6\u026c\u0002\u2945\u2948\u0005\u04d8\u026d\u0002\u2946\u2948",
    "\u0005\u04da\u026e\u0002\u2947\u2943\u0003\u0002\u0002\u0002\u2947\u2944",
    "\u0003\u0002\u0002\u0002\u2947\u2945\u0003\u0002\u0002\u0002\u2947\u2946",
    "\u0003\u0002\u0002\u0002\u2948\u04d3\u0003\u0002\u0002\u0002\u2949\u294a",
    "\u0007\u01c6\u0002\u0002\u294a\u294b\u0005\u04c2\u0262\u0002\u294b\u04d5",
    "\u0003\u0002\u0002\u0002\u294c\u294d\u0007\u025d\u0002\u0002\u294d\u2953",
    "\u0005\u04c2\u0262\u0002\u294e\u2950\u0007\u0360\u0002\u0002\u294f\u2951",
    "\u0005\u03b4\u01db\u0002\u2950\u294f\u0003\u0002\u0002\u0002\u2950\u2951",
    "\u0003\u0002\u0002\u0002\u2951\u2952\u0003\u0002\u0002\u0002\u2952\u2954",
    "\u0007\u0361\u0002\u0002\u2953\u294e\u0003\u0002\u0002\u0002\u2953\u2954",
    "\u0003\u0002\u0002\u0002\u2954\u04d7\u0003\u0002\u0002\u0002\u2955\u2956",
    "\u0007:\u0002\u0002\u2956\u2959\u0005\u04c2\u0262\u0002\u2957\u2958",
    "\u0007\u00b8\u0002\u0002\u2958\u295a\u0007\u00bf\u0002\u0002\u2959\u2957",
    "\u0003\u0002\u0002\u0002\u2959\u295a\u0003\u0002\u0002\u0002\u295a\u295b",
    "\u0003\u0002\u0002\u0002\u295b\u295c\u0007N\u0002\u0002\u295c\u2961",
    "\u0005\u0346\u01a4\u0002\u295d\u295e\u0007\u0364\u0002\u0002\u295e\u2960",
    "\u0005\u0346\u01a4\u0002\u295f\u295d\u0003\u0002\u0002\u0002\u2960\u2963",
    "\u0003\u0002\u0002\u0002\u2961\u295f\u0003\u0002\u0002\u0002\u2961\u2962",
    "\u0003\u0002\u0002\u0002\u2962\u2965\u0003\u0002\u0002\u0002\u2963\u2961",
    "\u0003\u0002\u0002\u0002\u2964\u2966\u0005\u01e8\u00f5\u0002\u2965\u2964",
    "\u0003\u0002\u0002\u0002\u2965\u2966\u0003\u0002\u0002\u0002\u2966\u04d9",
    "\u0003\u0002\u0002\u0002\u2967\u2968\u0007\u025d\u0002\u0002\u2968\u2969",
    "\u0005\u04c2\u0262\u0002\u2969\u296c\u0007;\u0002\u0002\u296a\u296d",
    "\u0005\u0148\u00a5\u0002\u296b\u296d\u0005\u03f8\u01fd\u0002\u296c\u296a",
    "\u0003\u0002\u0002\u0002\u296c\u296b\u0003\u0002\u0002\u0002\u296d\u296f",
    "\u0003\u0002\u0002\u0002\u296e\u2970\u0005\u04ce\u0268\u0002\u296f\u296e",
    "\u0003\u0002\u0002\u0002\u296f\u2970\u0003\u0002\u0002\u0002\u2970\u04db",
    "\u0003\u0002\u0002\u0002\u2971\u2972\u0005\u03f8\u01fd\u0002\u2972\u04dd",
    "\u0003\u0002\u0002\u0002\u059a\u04df\u04e2\u04e8\u04eb\u04ee\u04f0\u04f5",
    "\u04f8\u04fb\u0508\u0532\u0534\u0542\u0548\u054a\u0556\u055a\u056c\u0572",
    "\u057e\u0593\u0599\u059b\u05a1\u05ac\u05bd\u05bf\u05c8\u05d3\u05da\u05de",
    "\u05e7\u05ea\u05ed\u05f1\u05f8\u05fb\u0600\u0608\u060d\u0612\u0615\u0620",
    "\u0623\u0627\u062a\u062e\u0631\u0635\u0638\u063b\u063f\u0642\u0646\u064c",
    "\u064f\u0655\u065b\u0662\u0669\u066c\u0672\u0678\u0681\u068b\u0696\u0699",
    "\u06a9\u06b0\u06ba\u06c0\u06c4\u06c8\u06cc\u06d0\u06d4\u06d7\u06db\u06df",
    "\u06e3\u06e8\u06f3\u06f7\u06fa\u0708\u070b\u070f\u0712\u0716\u0719\u071d",
    "\u0720\u0724\u0727\u072a\u072e\u0731\u0735\u073b\u0748\u0750\u0755\u075a",
    "\u075d\u0762\u076a\u076d\u0772\u0776\u077b\u077f\u0786\u0789\u0791\u0798",
    "\u079b\u07a3\u07a8\u07ab\u07b0\u07b3\u07b7\u07bb\u07be\u07c1\u07c5\u07cd",
    "\u07d1\u07d8\u07e0\u07ec\u07fd\u07ff\u0806\u080c\u0814\u0817\u081e\u0821",
    "\u0823\u0829\u082f\u0840\u0847\u084e\u0857\u085a\u0865\u086c\u0879\u087e",
    "\u088e\u0893\u0899\u089c\u089f\u08a6\u08ac\u08b0\u08b3\u08b8\u08bd\u08c0",
    "\u08c3\u08c7\u08ca\u08cd\u08d0\u08d3\u08d7\u08da\u08dd\u08e0\u08e3\u08e5",
    "\u08ed\u08f6\u0900\u0906\u090b\u090e\u0917\u091a\u091f\u092c\u0933\u0938",
    "\u093f\u0946\u0954\u0956\u0963\u0966\u0969\u096c\u0976\u097c\u098a\u098d",
    "\u09a7\u09aa\u09b0\u09bb\u09c5\u09d5\u09da\u09dc\u09f8\u09fb\u0a07\u0a0b",
    "\u0a0d\u0a12\u0a15\u0a1b\u0a20\u0a22\u0a26\u0a29\u0a2c\u0a32\u0a37\u0a39",
    "\u0a3e\u0a45\u0a47\u0a4e\u0a52\u0a62\u0a6b\u0a70\u0a74\u0a77\u0a7f\u0a87",
    "\u0a89\u0a91\u0a95\u0a98\u0a9e\u0aa3\u0aa6\u0aac\u0aaf\u0ab3\u0ab8\u0abd",
    "\u0ac1\u0ac6\u0ac9\u0ace\u0ad2\u0ad6\u0adb\u0ae0\u0ae5\u0aeb\u0af0\u0af5",
    "\u0afb\u0b00\u0b05\u0b0a\u0b0f\u0b14\u0b19\u0b1e\u0b23\u0b28\u0b2d\u0b33",
    "\u0b38\u0b3e\u0b48\u0b4f\u0b51\u0b59\u0b5e\u0b61\u0b69\u0b6f\u0b7f\u0b8b",
    "\u0b8d\u0b90\u0b98\u0b9e\u0ba4\u0bb1\u0bb8\u0bc0\u0bc3\u0bce\u0bd6\u0bd9",
    "\u0be5\u0bec\u0bf4\u0bf7\u0c03\u0c0a\u0c12\u0c15\u0c1c\u0c24\u0c27\u0c29",
    "\u0c2e\u0c36\u0c3f\u0c43\u0c47\u0c4c\u0c52\u0c58\u0c5d\u0c62\u0c67\u0c6c",
    "\u0c6f\u0c7c\u0c85\u0c92\u0c96\u0c9d\u0ca2\u0ca5\u0caa\u0cad\u0cb1\u0cb5",
    "\u0cbd\u0cd0\u0cd3\u0cd6\u0cda\u0ce4\u0cf1\u0d04\u0d07\u0d0b\u0d13\u0d16",
    "\u0d1b\u0d23\u0d29\u0d2d\u0d37\u0d39\u0d4a\u0d4d\u0d52\u0d58\u0d5f\u0d62",
    "\u0d65\u0d69\u0d6e\u0d73\u0d7a\u0d7e\u0d89\u0d91\u0d94\u0d9a\u0da0\u0da2",
    "\u0da7\u0dad\u0db3\u0db5\u0db9\u0dbc\u0dbf\u0dc5\u0dcb\u0dce\u0dd4\u0dda",
    "\u0ddc\u0de1\u0de9\u0deb\u0df4\u0df9\u0e01\u0e05\u0e0d\u0e17\u0e1c\u0e23",
    "\u0e27\u0e2b\u0e3d\u0e41\u0e4d\u0e50\u0e59\u0e6a\u0e76\u0e7d\u0e84\u0e93",
    "\u0ea0\u0ea6\u0eac\u0eb2\u0eb8\u0ebe\u0ec4\u0ed4\u0ed9\u0ee4\u0ee9\u0eed",
    "\u0ef3\u0efc\u0f07\u0f0f\u0f15\u0f1a\u0f1d\u0f1f\u0f23\u0f28\u0f2d\u0f2f",
    "\u0f33\u0f3d\u0f42\u0f46\u0f49\u0f4f\u0f5f\u0f62\u0f6c\u0f6f\u0f81\u0f89",
    "\u0f8b\u0f91\u0f99\u0f9b\u0fa4\u0fa9\u0fb0\u0fb3\u0fbb\u0fc7\u0fcf\u0fd9",
    "\u0fe0\u0fe4\u0fe6\u0feb\u0ff2\u0ff9\u0ffc\u1000\u1003\u1010\u1016\u101a",
    "\u1021\u1028\u102c\u1030\u1035\u1039\u103d\u103f\u1046\u1049\u104e\u1056",
    "\u105d\u1061\u1067\u106a\u1076\u107b\u1085\u108a\u108d\u1094\u1097\u109c",
    "\u10a0\u10a9\u10af\u10b5\u10b9\u10bc\u10c3\u10cb\u10ce\u10d5\u10d9\u10dd",
    "\u10e0\u10e3\u10e6\u10e9\u10ec\u10ef\u10f2\u10f5\u10fe\u1102\u1105\u110d",
    "\u1112\u1115\u111a\u1124\u1129\u112f\u1131\u1137\u1139\u113f\u1147\u114c",
    "\u114f\u1154\u115a\u1160\u1163\u1168\u1172\u1175\u117a\u1182\u118a\u1190",
    "\u1198\u119d\u11a5\u11a8\u11af\u11b2\u11b5\u11bb\u11be\u11c6\u11cc\u11d5",
    "\u11d8\u11dc\u11e0\u11e6\u11ea\u11ee\u11f0\u11f3\u11f6\u11f9\u11ff\u1203",
    "\u1206\u1209\u120c\u120f\u1211\u1216\u121a\u1223\u1227\u1237\u1242\u1251",
    "\u1253\u125a\u1261\u1267\u1275\u127e\u128a\u1295\u129a\u129d\u12aa\u12ae",
    "\u12b1\u12b4\u12b9\u12bb\u12c5\u12d2\u12d9\u12de\u12e5\u12ef\u12fb\u12ff",
    "\u1303\u130e\u1313\u131b\u131f\u1322\u1325\u132e\u1332\u1335\u1339\u133d",
    "\u1340\u1343\u1348\u134e\u1352\u135c\u1362\u1366\u136c\u1370\u1376\u1379",
    "\u1385\u1389\u138d\u1395\u1399\u13a1\u13a4\u13a8\u13ab\u13af\u13b2\u13b5",
    "\u13b9\u13bc\u13c0\u13c4\u13cc\u13d3\u13d8\u13dc\u13df\u13e5\u13e7\u13f1",
    "\u13f8\u13fc\u13fe\u1402\u1405\u140b\u140f\u1418\u141e\u1423\u1426\u1428",
    "\u1435\u1440\u144b\u1453\u145a\u1460\u1468\u146e\u1473\u147b\u147e\u1486",
    "\u148a\u1491\u149a\u14aa\u14b0\u14b6\u14ba\u14c2\u14ca\u14d2\u14db\u14e6",
    "\u14ea\u14ef\u14f5\u14fe\u1506\u1509\u150e\u1513\u1517\u1522\u1527\u1531",
    "\u1536\u153a\u153e\u154a\u1554\u1558\u155d\u1561\u1564\u1567\u156a\u156d",
    "\u1570\u1573\u1577\u157b\u157e\u1581\u1584\u1587\u158a\u158d\u158f\u1593",
    "\u1598\u159c\u159f\u15a2\u15a5\u15a8\u15ab\u15ad\u15b1\u15b7\u15bb\u15c1",
    "\u15c5\u15cf\u15d5\u15db\u15e4\u15e8\u15ec\u15f1\u15f5\u15f7\u15ff\u1605",
    "\u1614\u161a\u161c\u1622\u1624\u1626\u162c\u1634\u163c\u1641\u1644\u1647",
    "\u164a\u165a\u165f\u1669\u166e\u1675\u167d\u1687\u168a\u168c\u1690\u1696",
    "\u169c\u16a3\u16a7\u16ad\u16ba\u16c2\u16cb\u16ce\u16d2\u16d6\u16da\u16dd",
    "\u16e0\u16e3\u16e7\u16eb\u16ee\u16f1\u16f4\u16fb\u16ff\u170e\u1718\u171c",
    "\u171e\u1729\u1736\u1738\u173c\u1744\u174e\u1752\u1755\u175b\u175e\u1761",
    "\u176a\u1773\u177d\u1781\u178b\u1795\u179d\u17a0\u17a9\u17ac\u17b0\u17b5",
    "\u17b9\u17c2\u17c5\u17e4\u17e7\u17ea\u1822\u1827\u1843\u1851\u1858\u185c",
    "\u1862\u186a\u186c\u1877\u1881\u1888\u188e\u1896\u189b\u18a3\u18ab\u18b3",
    "\u18bb\u18c3\u18c9\u18ce\u18d3\u18d8\u18de\u18e0\u18eb\u18f0\u18f7\u18f9",
    "\u1907\u190d\u1912\u1917\u191d\u1924\u192c\u1934\u1939\u193f\u1942\u194a",
    "\u1951\u1967\u196b\u197b\u1986\u198f\u1995\u1998\u199d\u19a2\u19aa\u19ae",
    "\u19b5\u19bb\u19c3\u19cc\u19d2\u19d9\u19e0\u19e5\u19e8\u19ea\u19f0\u19f2",
    "\u19f6\u19f8\u19fb\u1a04\u1a0a\u1a11\u1a18\u1a1d\u1a20\u1a22\u1a28\u1a2a",
    "\u1a2e\u1a30\u1a33\u1a38\u1a3f\u1a48\u1a4d\u1a56\u1a5d\u1a62\u1a65\u1a67",
    "\u1a6d\u1a6f\u1a72\u1a7e\u1a84\u1a8d\u1a96\u1a9b\u1aa4\u1aaa\u1ab5\u1ab8",
    "\u1ac4\u1acb\u1ad0\u1ad6\u1add\u1ae3\u1ae8\u1af0\u1af5\u1af8\u1afa\u1b07",
    "\u1b13\u1b29\u1b2e\u1b39\u1b3d\u1b43\u1b47\u1b4c\u1b50\u1b5c\u1b60\u1b69",
    "\u1b71\u1b77\u1b7a\u1b80\u1b8b\u1b93\u1ba5\u1baa\u1baf\u1bb7\u1bb9\u1bc1",
    "\u1bc8\u1bd0\u1bd5\u1bdb\u1be1\u1be9\u1bf8\u1c03\u1c06\u1c10\u1c1a\u1c24",
    "\u1c2e\u1c32\u1c36\u1c3f\u1c5a\u1c69\u1c71\u1c7c\u1c83\u1c87\u1c8e\u1c93",
    "\u1c96\u1c99\u1ca2\u1ca6\u1cbf\u1cc7\u1ccb\u1cd3\u1cd6\u1cdd\u1ce4\u1cee",
    "\u1cf2\u1cf8\u1cfb\u1d00\u1d04\u1d0a\u1d0d\u1d13\u1d2b\u1d38\u1d3b\u1d45",
    "\u1d4d\u1d51\u1d58\u1d5b\u1d64\u1d6a\u1d70\u1d7a\u1d7c\u1d81\u1d89\u1d8c",
    "\u1d90\u1d97\u1d9d\u1da4\u1da9\u1db1\u1db6\u1dbe\u1dc1\u1dc7\u1dd2\u1dd4",
    "\u1dda\u1ddf\u1de6\u1de9\u1dec\u1df3\u1df9\u1e09\u1e0c\u1e12\u1e15\u1e1d",
    "\u1e25\u1e2b\u1e2f\u1e3d\u1e46\u1e55\u1e5c\u1e5f\u1e66\u1e6d\u1e72\u1e77",
    "\u1e82\u1e94\u1e98\u1e9b\u1ea5\u1ea9\u1eaf\u1eb4\u1ec1\u1ec3\u1ec8\u1ecd",
    "\u1ecf\u1ed6\u1edd\u1ee0\u1ee3\u1ee9\u1eed\u1ef4\u1ef8\u1efe\u1f04\u1f0b",
    "\u1f0d\u1f12\u1f1a\u1f1e\u1f23\u1f29\u1f2d\u1f30\u1f33\u1f36\u1f43\u1f48",
    "\u1f55\u1f5d\u1f65\u1f6a\u1f6c\u1f7d\u1f82\u1f86\u1f8a\u1f98\u1f9e\u1fa4",
    "\u1faa\u1faf\u1fb1\u1fb7\u1fbd\u1fc3\u1fc9\u1fce\u1fd0\u1fd6\u1fdc\u1fe2",
    "\u1fe7\u1fed\u1ff3\u1ff9\u1fff\u2005\u200b\u2013\u2019\u201d\u2021\u2027",
    "\u202a\u2034\u2038\u204c\u2053\u2055\u205c\u205e\u2062\u2067\u2075\u207c",
    "\u2083\u2087\u208c\u2091\u2093\u209a\u209d\u20a1\u20a6\u20a9\u20ad\u20b0",
    "\u20b2\u20bb\u20c0\u20cd\u20d0\u20d6\u20da\u20dd\u20e2\u20e5\u20ea\u20ed",
    "\u20f2\u20f5\u20fb\u20fe\u2102\u2105\u2108\u210c\u210f\u2112\u2116\u2119",
    "\u211c\u211f\u2123\u2126\u2129\u212e\u2133\u2138\u213b\u213e\u2144\u2148",
    "\u2152\u2156\u216b\u2177\u217c\u2188\u218f\u2193\u2198\u219d\u21a1\u21a3",
    "\u21b3\u21bc\u21c4\u21c9\u21d0\u21d8\u21e0\u21e8\u21f1\u21fb\u2203\u220b",
    "\u2213\u221b\u2220\u2227\u2229\u222e\u2231\u2236\u2239\u223d\u224c\u2253",
    "\u2259\u227c\u2284\u2289\u2293\u2298\u22a0\u22a5\u22ad\u22b5\u22b8\u22c4",
    "\u22ca\u22d7\u22dc\u22e1\u22e3\u22ed\u22f6\u22fa\u2302\u2306\u230a\u2317",
    "\u231f\u2323\u2329\u232e\u2337\u233a\u2346\u234e\u2358\u235b\u235f\u2363",
    "\u2369\u236e\u2376\u237c\u2380\u2382\u2386\u2388\u2393\u239c\u23a5\u23ae",
    "\u23ba\u23c2\u23ca\u23d2\u23d9\u23dc\u23e1\u23e9\u23f5\u2402\u2408\u240e",
    "\u241e\u2424\u2426\u2428\u2434\u243c\u2447\u2453\u2464\u2471\u2473\u2489",
    "\u2492\u249b\u25d9\u25de\u25e4\u2639\u2643\u2647\u264a\u264f\u2655\u2659",
    "\u265d\u2661\u2665\u2667\u266b\u2672\u267e\u2681\u268c\u2698\u269b\u26a3",
    "\u26a7\u26ae\u26b4\u26b7\u26bb\u26c0\u26c7\u26ca\u26cd\u26d1\u26d7\u26db",
    "\u26df\u26e3\u26ec\u26f5\u26ff\u2702\u270e\u2711\u271c\u2720\u2725\u2728",
    "\u2732\u2737\u273b\u273f\u2743\u2746\u2749\u2758\u2761\u2768\u276c\u276f",
    "\u2775\u277e\u2784\u2788\u278c\u2799\u27a4\u27a6\u27ab\u27af\u27b2\u27b5",
    "\u27ca\u27d1\u27d7\u27db\u27df\u27e3\u27ef\u27f3\u2801\u2807\u280e\u2813",
    "\u281e\u2821\u2827\u2829\u2831\u283d\u283f\u2851\u2857\u285f\u2864\u2869",
    "\u286c\u2872\u2876\u287b\u287f\u2886\u288c\u2890\u2893\u2899\u289e\u28a1",
    "\u28a6\u28a8\u28ac\u28b4\u28b7\u28bf\u28c9\u28cf\u28d4\u28d6\u28e6\u28ec",
    "\u28f3\u28fd\u2900\u2906\u290c\u2911\u2917\u291b\u2925\u292b\u292e\u2932",
    "\u293d\u2947\u2950\u2953\u2959\u2961\u2965\u296c\u296f"].join("");


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.PredictionContextCache();

export default class MySqlParser extends antlr4.Parser {

    static grammarFileName = "MySqlParser.g4";
    static literalNames = [ null, null, null, null, null, null, "'ADD'", 
                            "'ALL'", "'ALTER'", "'ALWAYS'", "'ANALYZE'", 
                            "'AND'", "'AS'", "'ASC'", "'BEFORE'", "'BETWEEN'", 
                            "'BOTH'", "'BY'", "'CALL'", "'CASCADE'", "'CASE'", 
                            "'CAST'", "'CHANGE'", "'CHARACTER'", "'CHECK'", 
                            "'COLLATE'", "'COLUMN'", "'CONDITION'", "'CONSTRAINT'", 
                            "'CONTINUE'", "'CONVERT'", "'CREATE'", "'CROSS'", 
                            "'CURRENT_USER'", "'CURSOR'", "'DATABASE'", 
                            "'DATABASES'", "'DECLARE'", "'DEFAULT'", "'DELAYED'", 
                            "'DELETE'", "'DESC'", "'DESCRIBE'", "'DETERMINISTIC'", 
                            "'DISTINCT'", "'DISTINCTROW'", "'DROP'", "'EACH'", 
                            "'ELSE'", "'ELSEIF'", "'ENCLOSED'", "'ESCAPED'", 
                            "'EXISTS'", "'EXIT'", "'EXPLAIN'", "'FALSE'", 
                            "'FETCH'", "'FOR'", "'FORCE'", "'FOREIGN'", 
                            "'FROM'", "'FULLTEXT'", "'GENERATED'", "'GRANT'", 
                            "'GROUP'", "'HAVING'", "'HIGH_PRIORITY'", "'IF'", 
                            "'IGNORE'", "'IN'", "'INDEX'", "'INFILE'", "'INNER'", 
                            "'INOUT'", "'INSERT'", "'INTERVAL'", "'INTO'", 
                            "'IS'", "'ITERATE'", "'JOIN'", "'KEY'", "'KEYS'", 
                            "'KILL'", "'LEADING'", "'LEAVE'", "'LEFT'", 
                            "'LIKE'", "'LIMIT'", "'LINEAR'", "'LINES'", 
                            "'LOAD'", "'LOCK'", "'LOOP'", "'LOW_PRIORITY'", 
                            "'MASTER_BIND'", "'MASTER_SSL_VERIFY_SERVER_CERT'", 
                            "'MATCH'", "'MAXVALUE'", "'MODIFIES'", "'NATURAL'", 
                            "'NOT'", "'NO_WRITE_TO_BINLOG'", "'NULL'", "'ON'", 
                            "'OPTIMIZE'", "'OPTION'", "'OPTIONALLY'", "'OR'", 
                            "'ORDER'", "'OUT'", "'OUTER'", "'OUTFILE'", 
                            "'PARTITION'", "'PRIMARY'", "'PROCEDURE'", "'PURGE'", 
                            "'RANGE'", "'READ'", "'READS'", "'REFERENCES'", 
                            "'REGEXP'", "'RELEASE'", "'RENAME'", "'REPEAT'", 
                            "'REPLACE'", "'REQUIRE'", "'RESTRICT'", "'RETURN'", 
                            "'REVOKE'", "'RIGHT'", "'RLIKE'", "'SCHEMA'", 
                            "'SCHEMAS'", "'SELECT'", "'SET'", "'SEPARATOR'", 
                            "'SHOW'", "'SPATIAL'", "'SQL'", "'SQLEXCEPTION'", 
                            "'SQLSTATE'", "'SQLWARNING'", "'SQL_BIG_RESULT'", 
                            "'SQL_CALC_FOUND_ROWS'", "'SQL_SMALL_RESULT'", 
                            "'SSL'", "'STARTING'", "'STRAIGHT_JOIN'", "'TABLE'", 
                            "'TERMINATED'", "'THEN'", "'TO'", "'TRAILING'", 
                            "'TRIGGER'", "'TRUE'", "'UNDO'", "'UNION'", 
                            "'UNIQUE'", "'UNLOCK'", "'UNSIGNED'", "'UPDATE'", 
                            "'USAGE'", "'USE'", "'USING'", "'VALUES'", "'WHEN'", 
                            "'WHERE'", "'WHILE'", "'WITH'", "'WRITE'", "'XOR'", 
                            "'ZEROFILL'", "'ADMIN'", "'ANALYZER'", "'APP'", 
                            "'APPEND'", "'APPS'", "'APPLICATION'", "'APPLICATIONS'", 
                            "'BLACKLIST'", "'BODY'", "'BUCKETS'", "'BULK'", 
                            "'CACHEDMETRIC'", "'CACHEDMETRICS'", "'CALLER'", 
                            "'CAPACITY'", "'CLUSTER'", "'CLUSTERED'", "'COLLECT'", 
                            "'COLLECTION'", "'COMPACTIONS'", "'CONCATENATE'", 
                            "'CONNECT'", "'CONF'", "'CUBE'", "'CURRENT'", 
                            "'DBPROPERTIES'", "'DB2'", "'DELIMITED'", "'DELIMITER'", 
                            "'DIRECTORIES'", "'DISTRIBUTE'", "'EXTERNAL'", 
                            "'!SET'", "'FACL'", "'FILEFORMAT'", "'FOLLOWING'", 
                            "'FORMATTED'", "'FUNCTIONS'", "'GROUPING'", 
                            "'HOLD'", "'INCEPTOR'", "'IMMEDIATE'", "'INPATH'", 
                            "'INPUTDRIVER'", "'INPUTFORMAT'", "'ITEMS'", 
                            "'JAR'", "'JARS'", "'LATERAL'", "'LINK'", "'LINKS'", 
                            "'LOCATION'", "'LOCKS'", "'MAP'", "'MATCHED'", 
                            "'MATERIALIZED'", "'METRICS'", "'NOCYCLE'", 
                            "'NORELY'", "'NOVALIDATE'", "'NONSTRICT'", "'NO_DROP'", 
                            "'NO_INDEX'", "'OFF'", "'ORACLE'", "'OUTPUTDRIVER'", 
                            "'OUTPUTFORMAT'", "'OVERWRITE'", "'PACKAGE'", 
                            "'PACKAGES'", "'PARTITIONED'", "'PERCENT'", 
                            "'PERMANENT'", "'PERMISSION'", "'PRETTY'", "'PLSQL'", 
                            "'PLSQLUSESLASH'", "'PLSQLCLIENTDIALECT'", "'POLICY'", 
                            "'POLICYBASES'", "'POLICIES'", "'PRECEDING'", 
                            "'PRINCIPALS'", "'PRIOR'", "'PROTECTION'", "'QUOTA'", 
                            "'READONLY'", "'REJECT'", "'RELY'", "'ROLE'", 
                            "'ROLES'", "'RULE'", "'RULEBASE'", "'RULEBASES'", 
                            "'RULEFUNCTION'", "'RULEFUNCTIONS'", "'RULES'", 
                            "'SEGMENT'", "'SEMI'", "'SEQUENCES'", "'SERDE'", 
                            "'SERDEPROPERTIES'", "'SETS'", "'SHARD'", "'SHOW_DATABASE'", 
                            "'SKEWED'", "'SORT'", "'SORTED'", "'SPACE'", 
                            "'STATISTICS'", "'STREAMJOB'", "'STREAMJOBS'", 
                            "'STREAMS'", "'SYSTIMESTAMP'", "'TABLESIZE'", 
                            "'TABLET'", "'TBLPROPERTIES'", "'TD'", "'TOUCH'", 
                            "'TRANSACTIONS'", "'TYPE'", "'UNARCHIVE'", "'UNBOUNDED'", 
                            "'UNIONTYPE'", "'UNLIMITED'", "'UNSET'", "'URI'", 
                            "'VALIDATE'", "'VIEWS'", "'AUTONOMOUS_TRANSACTION'", 
                            "'CONSTANT'", "'DENSE_RANK'", "'ELSIF'", "'EXCEPTION'", 
                            "'EXCEPTIONS'", "'EXCEPTION_INIT'", "'FORALL'", 
                            "'GOTO'", "'INDEXED'", "'INDICATOR'", "'INDICES'", 
                            "'INLINE'", "'ISOPEN'", "'KEEP'", "'NOCOPY'", 
                            "'NOTFOUND'", "'NULLS'", "'OF'", "'OVER'", "'PIPE'", 
                            "'PIPELINED'", "'PRAGMA'", "'RAISE'", "'RECORD'", 
                            "'REF'", "'RESPECT'", "'RESTRICT_REFERENCES'", 
                            "'RESULT_CACHE'", "'ROWTYPE'", "'ROWCOUNT'", 
                            "'SAVE'", "'SIBLINGS'", "'SUBTYPE'", "'SERIALLY_REUSABLE'", 
                            "'VARRAY'", "'TINYINT'", "'SMALLINT'", "'MEDIUMINT'", 
                            "'INT'", "'INTEGER'", "'BIGINT'", "'REAL'", 
                            "'DOUBLE'", "'PRECISION'", "'FLOAT'", "'DECIMAL'", 
                            "'DEC'", "'NUMERIC'", "'DATE'", "'TIME'", "'TIMESTAMP'", 
                            "'DATETIME'", "'YEAR'", "'CHAR'", "'VARCHAR'", 
                            "'NVARCHAR'", "'NATIONAL'", "'BINARY'", "'VARBINARY'", 
                            "'TINYBLOB'", "'BLOB'", "'MEDIUMBLOB'", "'LONGBLOB'", 
                            "'TINYTEXT'", "'TEXT'", "'MEDIUMTEXT'", "'LONGTEXT'", 
                            "'ENUM'", "'VARYING'", "'SERIAL'", "'ARRAY'", 
                            "'CLOB'", "'GEO'", "'NUMBER'", "'STRUCT'", "'VARCHAR2'", 
                            "'YEAR_MONTH'", "'DAY_HOUR'", "'DAY_MINUTE'", 
                            "'DAY_SECOND'", "'HOUR_MINUTE'", "'HOUR_SECOND'", 
                            "'MINUTE_SECOND'", "'SECOND_MICROSECOND'", "'MINUTE_MICROSECOND'", 
                            "'HOUR_MICROSECOND'", "'DAY_MICROSECOND'", "'AVG'", 
                            "'BIT_AND'", "'BIT_OR'", "'BIT_XOR'", "'COUNT'", 
                            "'GROUP_CONCAT'", "'MAX'", "'MIN'", "'STD'", 
                            "'STDDEV'", "'STDDEV_POP'", "'STDDEV_SAMP'", 
                            "'SUM'", "'VAR_POP'", "'VAR_SAMP'", "'VARIANCE'", 
                            "'CURRENT_DATE'", "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", 
                            "'LOCALTIME'", "'CURDATE'", "'CURTIME'", "'DATE_ADD'", 
                            "'DATE_SUB'", "'EXTRACT'", "'LOCALTIMESTAMP'", 
                            "'NOW'", "'POSITION'", "'SUBSTR'", "'SUBSTRING'", 
                            "'SYSDATE'", "'TRIM'", "'UTC_DATE'", "'UTC_TIME'", 
                            "'UTC_TIMESTAMP'", "'ACCOUNT'", "'ACTION'", 
                            "'AFTER'", "'AGGREGATE'", "'ALGORITHM'", "'ANY'", 
                            "'AT'", "'AUTHORS'", "'AUTOCOMMIT'", "'AUTOEXTEND_SIZE'", 
                            "'AUTO_INCREMENT'", "'AVG_ROW_LENGTH'", "'BEGIN'", 
                            "'BINLOG'", "'BIT'", "'BLOCK'", "'BOOL'", "'BOOLEAN'", 
                            "'BTREE'", "'CACHE'", "'CASCADED'", "'CHAIN'", 
                            "'CHANGED'", "'CHANNEL'", "'CHECKSUM'", "'PAGE_CHECKSUM'", 
                            "'CIPHER'", "'CLIENT'", "'CLOSE'", "'COALESCE'", 
                            "'CODE'", "'COLUMNS'", "'COLUMN_FORMAT'", "'COMMENT'", 
                            "'COMMIT'", "'COMPACT'", "'COMPLETION'", "'COMPRESSED'", 
                            "'COMPRESSION'", "'CONCURRENT'", "'CONNECTION'", 
                            "'CONSISTENT'", "'CONTAINS'", "'CONTEXT'", "'CONTRIBUTORS'", 
                            "'COPY'", "'CPU'", "'DATA'", "'DATAFILE'", "'DEALLOCATE'", 
                            "'DEFAULT_AUTH'", "'DEFINER'", "'DELAY_KEY_WRITE'", 
                            "'DES_KEY_FILE'", "'DIRECTORY'", "'DISABLE'", 
                            "'DISCARD'", "'DISK'", "'DO'", "'DUMPFILE'", 
                            "'DUPLICATE'", "'DYNAMIC'", "'ENABLE'", "'ENCRYPTION'", 
                            "'END'", "'ENDS'", "'ENGINE'", "'ENGINES'", 
                            "'ERROR'", "'ERRORS'", "'ESCAPE'", "'EVEN'", 
                            "'EVENT'", "'EVENTS'", "'EVERY'", "'EXCHANGE'", 
                            "'EXCLUSIVE'", "'EXPIRE'", "'EXPORT'", "'EXTENDED'", 
                            "'EXTENT_SIZE'", "'FAST'", "'FAULTS'", "'FIELDS'", 
                            "'FILE_BLOCK_SIZE'", "'FILTER'", "'FIRST'", 
                            "'FIXED'", "'FLUSH'", "'FOLLOWS'", "'FOUND'", 
                            "'FULL'", "'FUNCTION'", "'GENERAL'", "'GLOBAL'", 
                            "'GRANTS'", "'GROUP_REPLICATION'", "'HANDLER'", 
                            "'HASH'", "'HELP'", "'HOST'", "'HOSTS'", "'IDENTIFIED'", 
                            "'IGNORE_SERVER_IDS'", "'IMPORT'", "'INDEXES'", 
                            "'INITIAL_SIZE'", "'INPLACE'", "'INSERT_METHOD'", 
                            "'INSTALL'", "'INSTANCE'", "'INVOKER'", "'IO'", 
                            "'IO_THREAD'", "'IPC'", "'ISOLATION'", "'ISSUER'", 
                            "'JSON'", "'KEY_BLOCK_SIZE'", "'LANGUAGE'", 
                            "'LAST'", "'LEAVES'", "'LESS'", "'LEVEL'", "'LIST'", 
                            "'LOCAL'", "'LOGFILE'", "'LOGS'", "'MASTER'", 
                            "'MASTER_AUTO_POSITION'", "'MASTER_CONNECT_RETRY'", 
                            "'MASTER_DELAY'", "'MASTER_HEARTBEAT_PERIOD'", 
                            "'MASTER_HOST'", "'MASTER_LOG_FILE'", "'MASTER_LOG_POS'", 
                            "'MASTER_PASSWORD'", "'MASTER_PORT'", "'MASTER_RETRY_COUNT'", 
                            "'MASTER_SSL'", "'MASTER_SSL_CA'", "'MASTER_SSL_CAPATH'", 
                            "'MASTER_SSL_CERT'", "'MASTER_SSL_CIPHER'", 
                            "'MASTER_SSL_CRL'", "'MASTER_SSL_CRLPATH'", 
                            "'MASTER_SSL_KEY'", "'MASTER_TLS_VERSION'", 
                            "'MASTER_USER'", "'MAX_CONNECTIONS_PER_HOUR'", 
                            "'MAX_QUERIES_PER_HOUR'", "'MAX_ROWS'", "'MAX_SIZE'", 
                            "'MAX_UPDATES_PER_HOUR'", "'MAX_USER_CONNECTIONS'", 
                            "'MEDIUM'", "'MERGE'", "'MID'", "'MIGRATE'", 
                            "'MIN_ROWS'", "'MODE'", "'MODIFY'", "'MUTEX'", 
                            "'MYSQL'", "'NAME'", "'NAMES'", "'NCHAR'", "'NEVER'", 
                            "'NEXT'", "'NO'", "'NODEGROUP'", "'NONE'", "'OFFLINE'", 
                            "'OFFSET'", "'OJ'", "'OLD_PASSWORD'", "'ONE'", 
                            "'ONLINE'", "'ONLY'", "'OPEN'", "'OPTIMIZER_COSTS'", 
                            "'OPTIONS'", "'OWNER'", "'PACK_KEYS'", "'PAGE'", 
                            "'PARSER'", "'PARTIAL'", "'PARTITIONING'", "'PARTITIONS'", 
                            "'PASSWORD'", "'PHASE'", "'PLUGIN'", "'PLUGIN_DIR'", 
                            "'PLUGINS'", "'PORT'", "'PRECEDES'", "'PREPARE'", 
                            "'PRESERVE'", "'PREV'", "'PROCESSLIST'", "'PROFILE'", 
                            "'PROFILES'", "'PROXY'", "'QUERY'", "'QUICK'", 
                            "'REBUILD'", "'RECOVER'", "'REDO_BUFFER_SIZE'", 
                            "'REDUNDANT'", "'RELAY'", "'RELAY_LOG_FILE'", 
                            "'RELAY_LOG_POS'", "'RELAYLOG'", "'REMOVE'", 
                            "'REORGANIZE'", "'REPAIR'", "'REPLICATE_DO_DB'", 
                            "'REPLICATE_DO_TABLE'", "'REPLICATE_IGNORE_DB'", 
                            "'REPLICATE_IGNORE_TABLE'", "'REPLICATE_REWRITE_DB'", 
                            "'REPLICATE_WILD_DO_TABLE'", "'REPLICATE_WILD_IGNORE_TABLE'", 
                            "'REPLICATION'", "'RESET'", "'RESUME'", "'RETURNS'", 
                            "'ROLLBACK'", "'ROLLUP'", "'ROTATE'", "'ROW'", 
                            "'ROWS'", "'ROW_FORMAT'", "'SAVEPOINT'", "'SCHEDULE'", 
                            "'SECURITY'", "'SERVER'", "'SESSION'", "'SHARE'", 
                            "'SHARED'", "'SIGNED'", "'SIMPLE'", "'SLAVE'", 
                            "'SLOW'", "'SNAPSHOT'", "'SOCKET'", "'SOME'", 
                            "'SONAME'", "'SOUNDS'", "'SOURCE'", "'SQL_AFTER_GTIDS'", 
                            "'SQL_AFTER_MTS_GAPS'", "'SQL_BEFORE_GTIDS'", 
                            "'SQL_BUFFER_RESULT'", "'SQL_CACHE'", "'SQL_NO_CACHE'", 
                            "'SQL_THREAD'", "'START'", "'STARTS'", "'STATS_AUTO_RECALC'", 
                            "'STATS_PERSISTENT'", "'STATS_SAMPLE_PAGES'", 
                            "'STATUS'", "'STOP'", "'STORAGE'", "'STORED'", 
                            "'STRING'", "'SUBJECT'", "'SUBPARTITION'", "'SUBPARTITIONS'", 
                            "'SUSPEND'", "'SWAPS'", "'SWITCHES'", "'TABLESPACE'", 
                            "'TEMPORARY'", "'TEMPTABLE'", "'THAN'", "'TRADITIONAL'", 
                            "'TRANSACTION'", "'TRIGGERS'", "'TRUNCATE'", 
                            "'UNDEFINED'", "'UNDOFILE'", "'UNDO_BUFFER_SIZE'", 
                            "'UNINSTALL'", "'UNKNOWN'", "'UNTIL'", "'UPGRADE'", 
                            "'USER'", "'USE_FRM'", "'USER_RESOURCES'", "'VALIDATION'", 
                            "'VALUE'", "'VARIABLES'", "'VIEW'", "'VIRTUAL'", 
                            "'WAIT'", "'WARNINGS'", "'WITHOUT'", "'WORK'", 
                            "'WRAPPER'", "'X509'", "'XA'", "'XML'", "'EUR'", 
                            "'USA'", "'JIS'", "'ISO'", "'QUARTER'", "'MONTH'", 
                            "'DAY'", "'HOUR'", "'MINUTE'", "'WEEK'", "'SECOND'", 
                            "'MICROSECOND'", "'TABLES'", "'ROUTINE'", "'EXECUTE'", 
                            "'FILE'", "'PROCESS'", "'RELOAD'", "'SHUTDOWN'", 
                            "'SUPER'", "'PRIVILEGES'", "'ARMSCII8'", "'ASCII'", 
                            "'BIG5'", "'CP1250'", "'CP1251'", "'CP1256'", 
                            "'CP1257'", "'CP850'", "'CP852'", "'CP866'", 
                            "'CP932'", "'DEC8'", "'EUCJPMS'", "'EUCKR'", 
                            "'GB2312'", "'GBK'", "'GEOSTD8'", "'GREEK'", 
                            "'HEBREW'", "'HP8'", "'KEYBCS2'", "'KOI8R'", 
                            "'KOI8U'", "'LATIN1'", "'LATIN2'", "'LATIN5'", 
                            "'LATIN7'", "'MACCE'", "'MACROMAN'", "'SJIS'", 
                            "'SWE7'", "'TIS620'", "'UCS2'", "'UJIS'", "'UTF16'", 
                            "'UTF16LE'", "'UTF32'", "'UTF8'", "'UTF8MB3'", 
                            "'UTF8MB4'", "'CSVFILE'", "'ES'", "'FWCFILE'", 
                            "'HOLODESK'", "'HYPERDRIVE'", "'ORC'", "'ORC_TRANSACTION'", 
                            "'PARQUET'", "'RCFILE'", "'SEQUENCEFILE'", "'STARGATE'", 
                            "'STELLARDB'", "'TEXTFILE'", "'ARCHIVE'", "'BLACKHOLE'", 
                            "'CSV'", "'FEDERATED'", "'INNODB'", "'MEMORY'", 
                            "'MRG_MYISAM'", "'MYISAM'", "'NDB'", "'NDBCLUSTER'", 
                            "'PERFORMANCE_SCHEMA'", "'TOKUDB'", "'REPEATABLE'", 
                            "'COMMITTED'", "'UNCOMMITTED'", "'SERIALIZABLE'", 
                            "'GEOMETRYCOLLECTION'", "'GEOMCOLLECTION'", 
                            "'GEOMETRY'", "'LINESTRING'", "'MULTILINESTRING'", 
                            "'MULTIPOINT'", "'MULTIPOLYGON'", "'POINT'", 
                            "'POLYGON'", "'CHARSET'", "'COLLATION'", "'FORMAT'", 
                            "'GET_FORMAT'", "'LOG'", "'REVERSE'", "'WEIGHT_STRING'", 
                            "':='", "'+='", "'-='", "'*='", "'/='", "'%='", 
                            "'&='", "'^='", "'|='", "'*'", "'/'", "'%'", 
                            "'+'", "'--'", "'-'", "'DIV'", "'MOD'", "'='", 
                            "'>'", "'<'", "'!'", "'~'", "'|'", "'&'", "'^'", 
                            "'.'", "'{'", "'}'", "'('", "')'", "'['", "']'", 
                            "','", "';'", "'@'", "'0'", "'1'", "'2'", "'''", 
                            "'\"'", "'`'", "':'", "'$'", null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, "'?'", "'_'", 
                            "'..'" ];
    static symbolicNames = [ null, "SPACE", "SPEC_MYSQL_COMMENT", "COMMENT_INPUT", 
                             "MINUS_COMMENT", "LINE_COMMENT", "ADD", "ALL", 
                             "ALTER", "ALWAYS", "ANALYZE", "AND", "AS", 
                             "ASC", "BEFORE", "BETWEEN", "BOTH", "BY", "CALL", 
                             "CASCADE", "CASE", "CAST", "CHANGE", "CHARACTER", 
                             "CHECK", "COLLATE", "COLUMN", "CONDITION", 
                             "CONSTRAINT", "CONTINUE", "CONVERT", "CREATE", 
                             "CROSS", "CURRENT_USER", "CURSOR", "DATABASE", 
                             "DATABASES", "DECLARE", "DEFAULT", "DELAYED", 
                             "DELETE", "DESC", "DESCRIBE", "DETERMINISTIC", 
                             "DISTINCT", "DISTINCTROW", "DROP", "EACH", 
                             "ELSE", "ELSEIF", "ENCLOSED", "ESCAPED", "EXISTS", 
                             "EXIT", "EXPLAIN", "FALSE", "FETCH", "FOR", 
                             "FORCE", "FOREIGN", "FROM", "FULLTEXT", "GENERATED", 
                             "GRANT", "GROUP", "HAVING", "HIGH_PRIORITY", 
                             "IF", "IGNORE", "IN", "INDEX", "INFILE", "INNER", 
                             "INOUT", "INSERT", "INTERVAL", "INTO", "IS", 
                             "ITERATE", "JOIN", "KEY", "KEYS", "KILL", "LEADING", 
                             "LEAVE", "LEFT", "LIKE", "LIMIT", "LINEAR", 
                             "LINES", "LOAD", "LOCK", "LOOP", "LOW_PRIORITY", 
                             "MASTER_BIND", "MASTER_SSL_VERIFY_SERVER_CERT", 
                             "MATCH", "MAXVALUE", "MODIFIES", "NATURAL", 
                             "NOT", "NO_WRITE_TO_BINLOG", "NULL_LITERAL", 
                             "ON", "OPTIMIZE", "OPTION", "OPTIONALLY", "OR", 
                             "ORDER", "OUT", "OUTER", "OUTFILE", "PARTITION", 
                             "PRIMARY", "PROCEDURE", "PURGE", "RANGE", "READ", 
                             "READS", "REFERENCES", "REGEXP", "RELEASE", 
                             "RENAME", "REPEAT", "REPLACE", "REQUIRE", "RESTRICT", 
                             "RETURN", "REVOKE", "RIGHT", "RLIKE", "SCHEMA", 
                             "SCHEMAS", "SELECT", "SET", "SEPARATOR", "SHOW", 
                             "SPATIAL", "SQL", "SQLEXCEPTION", "SQLSTATE", 
                             "SQLWARNING", "SQL_BIG_RESULT", "SQL_CALC_FOUND_ROWS", 
                             "SQL_SMALL_RESULT", "SSL", "STARTING", "STRAIGHT_JOIN", 
                             "TABLE", "TERMINATED", "THEN", "TO", "TRAILING", 
                             "TRIGGER", "TRUE", "UNDO", "UNION", "UNIQUE", 
                             "UNLOCK", "UNSIGNED", "UPDATE", "USAGE", "USE", 
                             "USING", "VALUES", "WHEN", "WHERE", "WHILE", 
                             "WITH", "WRITE", "XOR", "ZEROFILL", "ADMIN", 
                             "ANALYZER", "APP", "APPEND", "APPS", "APPLICATION", 
                             "APPLICATIONS", "BLACKLIST", "BODY", "BUCKETS", 
                             "BULK", "CACHEDMETRIC", "CACHEDMETRICS", "CALLER", 
                             "CAPACITY", "CLUSTER", "CLUSTERED", "COLLECT", 
                             "COLLECTION", "COMPACTIONS", "CONCATENATE", 
                             "CONNECT", "CONF", "CUBE", "CURRENT", "DBPROPERTIES", 
                             "DB2", "DELIMITED", "DELIMITER", "DIRECTORIES", 
                             "DISTRIBUTE", "EXTERNAL", "EXCLAMATION_SET", 
                             "FACL", "FILEFORMAT", "FOLLOWING", "FORMATTED", 
                             "FUNCTIONS", "GROUPING", "HOLD", "INCEPTOR", 
                             "IMMEDIATE", "INPATH", "INPUTDRIVER", "INPUTFORMAT", 
                             "ITEMS", "JAR", "JARS", "LATERAL", "LINK", 
                             "LINKS", "LOCATION", "LOCKS", "MAP", "MATCHED", 
                             "MATERIALIZED", "METRICS", "NOCYCLE", "NORELY", 
                             "NOVALIDATE", "NONSTRICT", "NO_DROP", "NO_INDEX", 
                             "OFF", "ORACLE", "OUTPUTDRIVER", "OUTPUTFORMAT", 
                             "OVERWRITE", "PACKAGE", "PACKAGES", "PARTITIONED", 
                             "PERCENT", "PERMANENT", "PERMISSION", "PRETTY", 
                             "PLSQL", "PLSQLUSESLASH", "PLSQLCLIENTDIALECT", 
                             "POLICY", "POLICYBASES", "POLICIES", "PRECEDING", 
                             "PRINCIPALS", "PRIOR", "PROTECTION", "QUOTA", 
                             "READONLY", "REJECT", "RELY", "ROLE", "ROLES", 
                             "RULE", "RULEBASE", "RULEBASES", "RULEFUNCTION", 
                             "RULEFUNCTIONS", "RULES", "SEGMENT", "SEMI2", 
                             "SEQUENCES", "SERDE", "SERDEPROPERTIES", "SETS", 
                             "SHARD", "SHOW_DATABASE", "SKEWED", "SORT", 
                             "SORTED", "SPACE2", "STATISTICS", "STREAMJOB", 
                             "STREAMJOBS", "STREAMS", "SYSTIMESTAMP", "TABLESIZE", 
                             "TABLET", "TBLPROPERTIES", "TD", "TOUCH", "TRANSACTIONS", 
                             "TYPE", "UNARCHIVE", "UNBOUNDED", "UNIONTYPE", 
                             "UNLIMITED", "UNSET", "URI", "VALIDATE", "VIEWS", 
                             "AUTONOMOUS_TRANSACTION", "CONSTANT", "DENSE_RANK", 
                             "ELSIF", "EXCEPTION", "EXCEPTIONS", "EXCEPTION_INIT", 
                             "FORALL", "GOTO", "INDEXED", "INDICATOR", "INDICES", 
                             "INLINE", "ISOPEN", "KEEP", "NOCOPY", "NOTFOUND", 
                             "NULLS", "OF", "OVER", "PIPE", "PIPELINED", 
                             "PRAGMA", "RAISE", "RECORD", "REF", "RESPECT", 
                             "RESTRICT_REFERENCES", "RESULT_CACHE", "ROWTYPE", 
                             "ROWCOUNT", "SAVE", "SIBLINGS", "SUBTYPE", 
                             "SERIALLY_REUSABLE", "VARRAY", "TINYINT", "SMALLINT", 
                             "MEDIUMINT", "INT", "INTEGER", "BIGINT", "REAL", 
                             "DOUBLE", "PRECISION", "FLOAT", "DECIMAL", 
                             "DEC", "NUMERIC", "DATE", "TIME", "TIMESTAMP", 
                             "DATETIME", "YEAR", "CHAR", "VARCHAR", "NVARCHAR", 
                             "NATIONAL", "BINARY", "VARBINARY", "TINYBLOB", 
                             "BLOB", "MEDIUMBLOB", "LONGBLOB", "TINYTEXT", 
                             "TEXT", "MEDIUMTEXT", "LONGTEXT", "ENUM", "VARYING", 
                             "SERIAL", "ARRAY", "CLOB", "GEO", "NUMBER", 
                             "STRUCT", "VARCHAR2", "YEAR_MONTH", "DAY_HOUR", 
                             "DAY_MINUTE", "DAY_SECOND", "HOUR_MINUTE", 
                             "HOUR_SECOND", "MINUTE_SECOND", "SECOND_MICROSECOND", 
                             "MINUTE_MICROSECOND", "HOUR_MICROSECOND", "DAY_MICROSECOND", 
                             "AVG", "BIT_AND", "BIT_OR", "BIT_XOR", "COUNT", 
                             "GROUP_CONCAT", "MAX", "MIN", "STD", "STDDEV", 
                             "STDDEV_POP", "STDDEV_SAMP", "SUM", "VAR_POP", 
                             "VAR_SAMP", "VARIANCE", "CURRENT_DATE", "CURRENT_TIME", 
                             "CURRENT_TIMESTAMP", "LOCALTIME", "CURDATE", 
                             "CURTIME", "DATE_ADD", "DATE_SUB", "EXTRACT", 
                             "LOCALTIMESTAMP", "NOW", "POSITION", "SUBSTR", 
                             "SUBSTRING", "SYSDATE", "TRIM", "UTC_DATE", 
                             "UTC_TIME", "UTC_TIMESTAMP", "ACCOUNT", "ACTION", 
                             "AFTER", "AGGREGATE", "ALGORITHM", "ANY", "AT", 
                             "AUTHORS", "AUTOCOMMIT", "AUTOEXTEND_SIZE", 
                             "AUTO_INCREMENT", "AVG_ROW_LENGTH", "BEGIN", 
                             "BINLOG", "BIT", "BLOCK", "BOOL", "BOOLEAN", 
                             "BTREE", "CACHE", "CASCADED", "CHAIN", "CHANGED", 
                             "CHANNEL", "CHECKSUM", "PAGE_CHECKSUM", "CIPHER", 
                             "CLIENT", "CLOSE", "COALESCE", "CODE", "COLUMNS", 
                             "COLUMN_FORMAT", "COMMENT", "COMMIT", "COMPACT", 
                             "COMPLETION", "COMPRESSED", "COMPRESSION", 
                             "CONCURRENT", "CONNECTION", "CONSISTENT", "CONTAINS", 
                             "CONTEXT", "CONTRIBUTORS", "COPY", "CPU", "DATA", 
                             "DATAFILE", "DEALLOCATE", "DEFAULT_AUTH", "DEFINER", 
                             "DELAY_KEY_WRITE", "DES_KEY_FILE", "DIRECTORY", 
                             "DISABLE", "DISCARD", "DISK", "DO", "DUMPFILE", 
                             "DUPLICATE", "DYNAMIC", "ENABLE", "ENCRYPTION", 
                             "END", "ENDS", "ENGINE", "ENGINES", "ERROR", 
                             "ERRORS", "ESCAPE", "EVEN", "EVENT", "EVENTS", 
                             "EVERY", "EXCHANGE", "EXCLUSIVE", "EXPIRE", 
                             "EXPORT", "EXTENDED", "EXTENT_SIZE", "FAST", 
                             "FAULTS", "FIELDS", "FILE_BLOCK_SIZE", "FILTER", 
                             "FIRST", "FIXED", "FLUSH", "FOLLOWS", "FOUND", 
                             "FULL", "FUNCTION", "GENERAL", "GLOBAL", "GRANTS", 
                             "GROUP_REPLICATION", "HANDLER", "HASH", "HELP", 
                             "HOST", "HOSTS", "IDENTIFIED", "IGNORE_SERVER_IDS", 
                             "IMPORT", "INDEXES", "INITIAL_SIZE", "INPLACE", 
                             "INSERT_METHOD", "INSTALL", "INSTANCE", "INVOKER", 
                             "IO", "IO_THREAD", "IPC", "ISOLATION", "ISSUER", 
                             "JSON", "KEY_BLOCK_SIZE", "LANGUAGE", "LAST", 
                             "LEAVES", "LESS", "LEVEL", "LIST", "LOCAL", 
                             "LOGFILE", "LOGS", "MASTER", "MASTER_AUTO_POSITION", 
                             "MASTER_CONNECT_RETRY", "MASTER_DELAY", "MASTER_HEARTBEAT_PERIOD", 
                             "MASTER_HOST", "MASTER_LOG_FILE", "MASTER_LOG_POS", 
                             "MASTER_PASSWORD", "MASTER_PORT", "MASTER_RETRY_COUNT", 
                             "MASTER_SSL", "MASTER_SSL_CA", "MASTER_SSL_CAPATH", 
                             "MASTER_SSL_CERT", "MASTER_SSL_CIPHER", "MASTER_SSL_CRL", 
                             "MASTER_SSL_CRLPATH", "MASTER_SSL_KEY", "MASTER_TLS_VERSION", 
                             "MASTER_USER", "MAX_CONNECTIONS_PER_HOUR", 
                             "MAX_QUERIES_PER_HOUR", "MAX_ROWS", "MAX_SIZE", 
                             "MAX_UPDATES_PER_HOUR", "MAX_USER_CONNECTIONS", 
                             "MEDIUM", "MERGE", "MID", "MIGRATE", "MIN_ROWS", 
                             "MODE", "MODIFY", "MUTEX", "MYSQL", "NAME", 
                             "NAMES", "NCHAR", "NEVER", "NEXT", "NO", "NODEGROUP", 
                             "NONE", "OFFLINE", "OFFSET", "OJ", "OLD_PASSWORD", 
                             "ONE", "ONLINE", "ONLY", "OPEN", "OPTIMIZER_COSTS", 
                             "OPTIONS", "OWNER", "PACK_KEYS", "PAGE", "PARSER", 
                             "PARTIAL", "PARTITIONING", "PARTITIONS", "PASSWORD", 
                             "PHASE", "PLUGIN", "PLUGIN_DIR", "PLUGINS", 
                             "PORT", "PRECEDES", "PREPARE", "PRESERVE", 
                             "PREV", "PROCESSLIST", "PROFILE", "PROFILES", 
                             "PROXY", "QUERY", "QUICK", "REBUILD", "RECOVER", 
                             "REDO_BUFFER_SIZE", "REDUNDANT", "RELAY", "RELAY_LOG_FILE", 
                             "RELAY_LOG_POS", "RELAYLOG", "REMOVE", "REORGANIZE", 
                             "REPAIR", "REPLICATE_DO_DB", "REPLICATE_DO_TABLE", 
                             "REPLICATE_IGNORE_DB", "REPLICATE_IGNORE_TABLE", 
                             "REPLICATE_REWRITE_DB", "REPLICATE_WILD_DO_TABLE", 
                             "REPLICATE_WILD_IGNORE_TABLE", "REPLICATION", 
                             "RESET", "RESUME", "RETURNS", "ROLLBACK", "ROLLUP", 
                             "ROTATE", "ROW", "ROWS", "ROW_FORMAT", "SAVEPOINT", 
                             "SCHEDULE", "SECURITY", "SERVER", "SESSION", 
                             "SHARE", "SHARED", "SIGNED", "SIMPLE", "SLAVE", 
                             "SLOW", "SNAPSHOT", "SOCKET", "SOME", "SONAME", 
                             "SOUNDS", "SOURCE", "SQL_AFTER_GTIDS", "SQL_AFTER_MTS_GAPS", 
                             "SQL_BEFORE_GTIDS", "SQL_BUFFER_RESULT", "SQL_CACHE", 
                             "SQL_NO_CACHE", "SQL_THREAD", "START", "STARTS", 
                             "STATS_AUTO_RECALC", "STATS_PERSISTENT", "STATS_SAMPLE_PAGES", 
                             "STATUS", "STOP", "STORAGE", "STORED", "STRING", 
                             "SUBJECT", "SUBPARTITION", "SUBPARTITIONS", 
                             "SUSPEND", "SWAPS", "SWITCHES", "TABLESPACE", 
                             "TEMPORARY", "TEMPTABLE", "THAN", "TRADITIONAL", 
                             "TRANSACTION", "TRIGGERS", "TRUNCATE", "UNDEFINED", 
                             "UNDOFILE", "UNDO_BUFFER_SIZE", "UNINSTALL", 
                             "UNKNOWN", "UNTIL", "UPGRADE", "USER", "USE_FRM", 
                             "USER_RESOURCES", "VALIDATION", "VALUE", "VARIABLES", 
                             "VIEW", "VIRTUAL", "WAIT", "WARNINGS", "WITHOUT", 
                             "WORK", "WRAPPER", "X509", "XA", "XML", "EUR", 
                             "USA", "JIS", "ISO", "QUARTER", "MONTH", "DAY", 
                             "HOUR", "MINUTE", "WEEK", "SECOND", "MICROSECOND", 
                             "TABLES", "ROUTINE", "EXECUTE", "FILE", "PROCESS", 
                             "RELOAD", "SHUTDOWN", "SUPER", "PRIVILEGES", 
                             "ARMSCII8", "ASCII", "BIG5", "CP1250", "CP1251", 
                             "CP1256", "CP1257", "CP850", "CP852", "CP866", 
                             "CP932", "DEC8", "EUCJPMS", "EUCKR", "GB2312", 
                             "GBK", "GEOSTD8", "GREEK", "HEBREW", "HP8", 
                             "KEYBCS2", "KOI8R", "KOI8U", "LATIN1", "LATIN2", 
                             "LATIN5", "LATIN7", "MACCE", "MACROMAN", "SJIS", 
                             "SWE7", "TIS620", "UCS2", "UJIS", "UTF16", 
                             "UTF16LE", "UTF32", "UTF8", "UTF8MB3", "UTF8MB4", 
                             "CSVFILE", "ES", "FWCFILE", "HOLODESK", "HYPERDRIVE", 
                             "ORC", "ORC_TRANSACTION", "PARQUET", "RCFILE", 
                             "SEQUENCEFILE", "STARGATE", "STELLARDB", "TEXTFILE", 
                             "ARCHIVE", "BLACKHOLE", "CSV", "FEDERATED", 
                             "INNODB", "MEMORY", "MRG_MYISAM", "MYISAM", 
                             "NDB", "NDBCLUSTER", "PERFORMANCE_SCHEMA", 
                             "TOKUDB", "REPEATABLE", "COMMITTED", "UNCOMMITTED", 
                             "SERIALIZABLE", "GEOMETRYCOLLECTION", "GEOMCOLLECTION", 
                             "GEOMETRY", "LINESTRING", "MULTILINESTRING", 
                             "MULTIPOINT", "MULTIPOLYGON", "POINT", "POLYGON", 
                             "CHARSET", "COLLATION", "FORMAT", "GET_FORMAT", 
                             "LOG", "REVERSE", "WEIGHT_STRING", "VAR_ASSIGN", 
                             "PLUS_ASSIGN", "MINUS_ASSIGN", "MULT_ASSIGN", 
                             "DIV_ASSIGN", "MOD_ASSIGN", "AND_ASSIGN", "XOR_ASSIGN", 
                             "OR_ASSIGN", "STAR", "DIVIDE", "MODULE", "PLUS", 
                             "MINUSMINUS", "MINUS", "DIV", "MOD", "EQUAL_SYMBOL", 
                             "GREATER_SYMBOL", "LESS_SYMBOL", "EXCLAMATION_SYMBOL", 
                             "BIT_NOT_OP", "BIT_OR_OP", "BIT_AND_OP", "BIT_XOR_OP", 
                             "DOT", "LC_BRACKET", "RC_BRACKET", "LR_BRACKET", 
                             "RR_BRACKET", "LS_BRACKET", "RS_BRACKET", "COMMA", 
                             "SEMI", "AT_SIGN", "ZERO_DECIMAL", "ONE_DECIMAL", 
                             "TWO_DECIMAL", "SINGLE_QUOTE_SYMB", "DOUBLE_QUOTE_SYMB", 
                             "REVERSE_QUOTE_SYMB", "COLON_SYMB", "DOLLAR_SIGN", 
                             "CHARSET_REVERSE_QOUTE_STRING", "FILESIZE_LITERAL", 
                             "START_NATIONAL_STRING_LITERAL", "STRING_LITERAL", 
                             "DECIMAL_LITERAL", "HEXADECIMAL_LITERAL", "REAL_LITERAL", 
                             "NULL_SPEC_LITERAL", "BIT_STRING", "STRING_CHARSET_NAME", 
                             "DOT_ID", "ID", "REVERSE_QUOTE_ID", "STRING_USER_NAME", 
                             "LOCAL_ID", "GLOBAL_ID", "TEMPLATE_ID", "QUESTION_MARK", 
                             "INTRODUCER", "TWO_DOTS", "ERROR_RECONGNIGION" ];
    static ruleNames = [ "root", "sqlStatements", "sqlStatement", "emptyStatement", 
                         "ddlStatement", "dmlStatement", "transactionStatement", 
                         "replicationStatement", "preparedStatement", "compoundStatement", 
                         "administrationStatement", "utilityStatement", 
                         "dclStatement", "anchorStatement", "startAnchor", 
                         "createAnchor", "dropAnchor", "createDatabase", 
                         "createEvent", "createIndex", "createLogfileGroup", 
                         "createProcedure", "createFunction", "createTemporaryFunction", 
                         "createServer", "createTable", "createTablespaceInnodb", 
                         "createTablespaceNdb", "createTrigger", "createView", 
                         "createViewMysql", "createViewInceptor", "createDatabaseOption", 
                         "mysqlCreateDatabaseOption", "inceptorCreateDatabaseOption", 
                         "keyOrValueProperties", "keyProperties", "keyValueProperties", 
                         "keyValueProperty", "idValueProperties", "idValueProperty", 
                         "orReplaceDialectAction", "ownerStatement", "scheduleExpression", 
                         "timestampValue", "intervalExpr", "intervalType", 
                         "enableType", "indexType", "indexOption", "procedureParameter", 
                         "functionParameter", "permanentFunctionResource", 
                         "routineOption", "serverOption", "createTableHead", 
                         "createTableAsKeyViolate", "createTableQuery", 
                         "createTableLikeOption", "createTableCreateOption", 
                         "createDefinitions", "createDefinition", "createColumnDeclaration", 
                         "columnDefinition", "columnConstraintMysql", "columnConstraintInceptor", 
                         "columnAnalyzer", "constraintOpts", "asSelectStatement", 
                         "uidCommentList", "uidComment", "tableBuckets", 
                         "intoBuckets", "tableSkewed", "setSerde", "esProps", 
                         "holoProps", "holoTableSize", "dialectWithNoData", 
                         "commentClause", "setLocationDefinition", "locationDefinition", 
                         "tblPropertiesDefinition", "errorLogTableDefinition", 
                         "errorRejectSpec", "tableConstraint", "tableConstraintMysql", 
                         "tableConstraintInceptor", "referenceDefinition", 
                         "referenceAction", "referenceControlType", "indexColumnDefinition", 
                         "tableOption", "tablespaceStorage", "partitionDefinitions", 
                         "partitionFunctionDefinition", "subpartitionFunctionDefinition", 
                         "partitionDefinition", "partitionDefinerAtom", 
                         "partitionDefinerVector", "subpartitionDefinition", 
                         "partitionOption", "alterDatabase", "alterEvent", 
                         "alterFunction", "alterInstance", "alterLogfileGroup", 
                         "alterProcedure", "alterServer", "alterTable", 
                         "alterTablespace", "alterView", "alterDatabaseOption", 
                         "alterDatabaseSetDbproperties", "alterDatabaseSetOwner", 
                         "alterDatabaseAnchor", "alterTableAction", "alterSpecification", 
                         "alterSpecificationMysql", "alterSpecificationMysqlItem", 
                         "alterSpecificationInceptor", "intoTable", "alterSpecificationAnchor", 
                         "alterSpecificationColumn", "alterSpecificationPartition", 
                         "alterTablePartitionOption", "alterSpecificationSkewed", 
                         "alterSpecificationConstraint", "foreignKeyReferences", 
                         "restrictOrCascade", "dropDatabase", "dropEvent", 
                         "dropIndex", "dropLogfileGroup", "dropProcedure", 
                         "dropFunction", "dropServer", "dropTable", "dropTablespace", 
                         "dropTrigger", "dropView", "functionType", "renameTable", 
                         "renameTableClause", "truncateTable", "callStatement", 
                         "deleteStatement", "doStatement", "handlerStatement", 
                         "insertStatement", "fromInsertStatement", "fromInsertStatementInsert", 
                         "fromInsertStatementSelect", "insertTypeAnchor", 
                         "insertFile", "loadDataStatement", "loadDataMysql", 
                         "loadDataInceptor", "loadDataInceptorTable", "loadDataInceptorAnchor", 
                         "loadXmlStatement", "mergeStatement", "replaceStatement", 
                         "selectStatement", "updateStatement", "withStatement", 
                         "withCommonTableExpression", "insertPartitionSpec", 
                         "insertOnDuplicate", "rowFormatDelimited", "rowFormatDelimitedTail", 
                         "rowFormatSerde", "rowFormatSerdeTail", "rowFormat", 
                         "fileStore", "fileFormat", "fileFormatEnum", "fileStoreBy", 
                         "insertAction", "insertStatementValue", "insertValueClause", 
                         "updatedElement", "assignmentField", "mergeUsingClause", 
                         "mergeUpdateClause", "mergeInsertClause", "lockClause", 
                         "singleDeleteStatement", "multipleDeleteStatement", 
                         "handlerOpenStatement", "handlerReadIndexStatement", 
                         "handlerReadStatement", "handlerCloseStatement", 
                         "singleUpdateStatement", "multipleUpdateStatement", 
                         "setUpdatedElements", "updateStatementInceptor", 
                         "crudTargetClause", "updateAssignClause", "updateAssignClauseElement", 
                         "deleteStatementInceptor", "orderByClause", "orderByExpression", 
                         "nullsOrder", "clusterByClause", "distributeByClause", 
                         "sortByClause", "tableSources", "tableSource", 
                         "tableSourceItem", "tableSourceItemIndex", "fromClauseSuggester", 
                         "selectStatementPlus", "valuesSourceExprs", "indexHint", 
                         "indexHintType", "joinPart", "joinTypeAnchor", 
                         "joinOuterType", "joinNaturalSubType", "joinCondition", 
                         "lateralView", "queryExpression", "queryExpressionNointo", 
                         "querySpecification", "querySpecificationNointo", 
                         "unionParenthesis", "unionStatement", "selectSpec", 
                         "selectSpecMysql", "selectSpecInceptor", "selectElements", 
                         "selectElement", "selectIntoExpression", "selectFieldsInto", 
                         "selectLinesInto", "fromClause", "groupByClause", 
                         "havingClause", "whereExpressionOptional", "hierarchyClause", 
                         "groupByItems", "groupByItem", "limitClause", "limitClauseMysql", 
                         "limitClauseAtom", "limitClauseInceptor", "startTransaction", 
                         "beginWork", "commitWork", "rollbackWork", "savepointStatement", 
                         "rollbackStatement", "releaseStatement", "lockTables", 
                         "unlockTables", "transactionStatementInceptor", 
                         "setAutocommitStatement", "setTransactionStatement", 
                         "setTransactionStatementInceptor", "setTransactionStatementMysql", 
                         "transactionMode", "lockTableElement", "lockAction", 
                         "transactionOption", "transactionLevel", "changeMaster", 
                         "changeReplicationFilter", "purgeBinaryLogs", "resetMaster", 
                         "resetSlave", "startSlave", "stopSlave", "startGroupReplication", 
                         "stopGroupReplication", "masterOption", "stringMasterOption", 
                         "decimalMasterOption", "boolMasterOption", "channelOption", 
                         "replicationFilter", "tablePair", "threadType", 
                         "untilOption", "connectionOption", "gtuidSet", 
                         "xaStartTransaction", "xaEndTransaction", "xaPrepareStatement", 
                         "xaCommitWork", "xaRollbackWork", "xaRecoverWork", 
                         "prepareStatement", "executeStatement", "deallocatePrepare", 
                         "routineBody", "blockStatement", "caseStatement", 
                         "ifStatement", "iterateStatement", "leaveStatement", 
                         "loopStatement", "repeatStatement", "returnStatement", 
                         "whileStatement", "cursorStatement", "declareVariable", 
                         "declareCondition", "declareCursor", "declareHandler", 
                         "declareRowDataType", "cursorDialectOption", "conditionDialectOption", 
                         "handlerConditionValue", "procedureSqlStatement", 
                         "caseAlternative", "elifAlternative", "alterUser", 
                         "createUser", "dropUser", "grantStatement", "grantProxy", 
                         "renameUser", "revokeStatement", "revokeProxy", 
                         "setPasswordStatement", "grantStatementInceptor", 
                         "revokeStatementInceptor", "showGrantInceptor", 
                         "grantPermission", "revokePermission", "showPermission", 
                         "grantFacl", "revokeFacl", "showFacl", "grantQuota", 
                         "revokeQuota", "showQuota", "roleStatementInceptor", 
                         "showPrincipal", "privilegeList", "privlegeDef", 
                         "privilegeType", "privilegeObjectSpec", "principalNames", 
                         "quotaUser", "onTableOrView", "quotaDb", "userOrGroup", 
                         "principalName", "userSpecification", "userAuthOption", 
                         "tlsOption", "userResourceOption", "userPasswordOption", 
                         "userLockOption", "privelegeClause", "privilege", 
                         "privilegeLevel", "renameUserClause", "analyzeTable", 
                         "checkTable", "checksumTable", "optimizeTable", 
                         "repairTable", "checkTableOption", "createUdfunction", 
                         "installPlugin", "uninstallPlugin", "setStatement", 
                         "showStatement", "showStatementMysql", "showStatementInceptor", 
                         "variableAssignment", "variableClause", "variableFullId", 
                         "variableExprReserved", "showCommonEntity", "showFilter", 
                         "showGlobalInfoClause", "showSchemaEntity", "showProfileType", 
                         "fromDatabase", "addJarStatement", "listJarStatement", 
                         "binlogStatement", "cacheIndexStatement", "flushStatement", 
                         "killStatement", "loadIndexIntoCache", "resetStatement", 
                         "shutdownStatement", "setDelimiter", "setDelimiterToken", 
                         "setPlsqlDialect", "setPlsqlDialectId", "tableIndexes", 
                         "flushOption", "flushTableOption", "loadedTableIndexes", 
                         "describeStatement", "describeStatementMysql", 
                         "simpleDescribeStatement", "fullDescribeStatement", 
                         "describeStatementInceptor", "helpStatement", "useStatement", 
                         "describeObjectClause", "tablePartitionedBy", "dropPartitionAtom", 
                         "rangePartition", "partitionPlus", "partitionSpec", 
                         "partitionSpecList", "partitionSpecMap", "fullId", 
                         "tableName", "viewName", "tripleId", "columnUid", 
                         "fullColumnNameOptional", "fullColumnName", "prefixedColumnNameOptional", 
                         "prefixedColumnName", "funcName", "udfName", "procName", 
                         "packName", "funcColumnName", "funcColumnNameOptional", 
                         "wildFuncOptional", "wildUid", "indexColumnName", 
                         "userName", "mysqlVariable", "charsetName", "collationName", 
                         "engineName", "uuidSet", "xid", "xuidStringId", 
                         "authPlugin", "uid", "simpleId", "templateId", 
                         "dottedId", "filePath", "fileSegment", "decimalLiteral", 
                         "fileSizeLiteral", "stringLiteral", "stringLiteralCollate", 
                         "booleanLiteral", "hexadecimalLiteral", "nullNotnull", 
                         "constant", "dataType", "mySqlDataType", "inceptorDataType", 
                         "inceptorStructDataTypeItem", "collectionOptions", 
                         "convertedDataType", "lengthOneDimension", "lengthTwoDimension", 
                         "lengthTwoOptionalDimension", "uidList", "uidOrderList", 
                         "uidOrder", "fullIdList", "columnUids", "columnNames", 
                         "tables", "indexColumnNames", "expressions", "expressionsWithDefaults", 
                         "constants", "simpleStrings", "userVariables", 
                         "defaultValue", "currentTimestamp", "expressionOrDefault", 
                         "ifExists", "ifNotExists", "functionCall", "specificFunction", 
                         "specificFunctionMysql", "specificFunctionInceptor", 
                         "castFunctionInceptor", "substringFunction", "extractFunction", 
                         "caseFunction", "caseFuncAlternative", "levelsInWeightString", 
                         "levelInWeightListElement", "aggregateWindowedFunction", 
                         "aggregateWindowedFunctionMysql", "aggregateWindowedFunctionInceptor", 
                         "windowOverSpec", "windowClause", "windowStartBoundary", 
                         "windowStartBoundaryDefault", "windowEndBoundary", 
                         "passwordFunctionClause", "functionArgs", "functionArg", 
                         "functionArgOptional", "expressionOptional", "expression", 
                         "predicate", "expressionAtom", "unaryPriorOperator", 
                         "unaryOperator", "comparisonOperator", "logicalOperator", 
                         "bitOperator", "mathOperator", "cursorAttribute", 
                         "charsetNameBase", "transactionLevelBase", "privilegesBase", 
                         "intervalTypeBase", "dataTypeBase", "keywordsCanBeId", 
                         "keywordsCanBeIdMysql", "inceptorKeywordCanBeId", 
                         "fileFormatCanBeId", "functionNameBase", "functionNameBaseMysql", 
                         "functionNameBaseExtra", "databaseName", "databaseNameAllowEmpty", 
                         "baseElementAlias", "emptyElement", "placeholder", 
                         "plsqlStatement", "anonymousBlock", "createFunctionBody", 
                         "functionBody", "createProcedureBody", "procedureBody", 
                         "dropPackage", "createPackage", "createPackageBody", 
                         "isOrAs", "packageObjSpecs", "packageObjBodys", 
                         "packageObjSpec", "packageObjBody", "procedureSpec", 
                         "functionSpec", "declareSpec", "variableDeclaration", 
                         "cursorDeclaration", "cursorParameter", "exceptionDeclaration", 
                         "pragmaDeclaration", "recordTypeDef", "fieldSpec", 
                         "refCursorTypeDef", "typeDeclaration", "tableTypeDef", 
                         "tableIndexedByPart", "varrayTypeDef", "seqOfStatements", 
                         "labelOrSqlStatement", "labelDeclaration", "procedureSqlStatement2", 
                         "assignmentStatement", "procedureWildcard", "continueStatement", 
                         "exitStatement", "gotoStatement", "ifStatement2", 
                         "elsifPart", "elsePart", "loopStatement2", "cursorLoopParam", 
                         "forallStatement", "boundsClause", "betweenBound", 
                         "lowerBound", "upperBound", "nullStatement", "raiseStatement", 
                         "returnStatement2", "exceptionBlock", "exceptionHandler", 
                         "blockStatement2", "declareBlock", "seqStatementBlock", 
                         "packageBodyBlock", "parameter", "generalElement", 
                         "generalElementPart", "generalElementPartChain", 
                         "generalArgument", "functionArgument", "argument", 
                         "arrayArgument", "typeSpec", "defaultValuePart", 
                         "labelName", "numeric", "numericNegative", "exceptionName", 
                         "routineName", "idExpression", "chainedIdExpression", 
                         "cursorName", "partitionExtensionClause", "condition", 
                         "normalSqlStatement", "executeImmediate", "bulkCollectClause", 
                         "usingClause", "usingClauseElement", "cursorManipulationStatements", 
                         "closeStatement", "openStatement", "fetchStatement", 
                         "openForStatement", "concatenation" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = MySqlParser.ruleNames;
        this.literalNames = MySqlParser.literalNames;
        this.symbolicNames = MySqlParser.symbolicNames;
    }

    get atn() {
        return atn;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 2:
    	    		return this.sqlStatement_sempred(localctx, predIndex);
    	case 4:
    	    		return this.ddlStatement_sempred(localctx, predIndex);
    	case 5:
    	    		return this.dmlStatement_sempred(localctx, predIndex);
    	case 6:
    	    		return this.transactionStatement_sempred(localctx, predIndex);
    	case 7:
    	    		return this.replicationStatement_sempred(localctx, predIndex);
    	case 8:
    	    		return this.preparedStatement_sempred(localctx, predIndex);
    	case 10:
    	    		return this.administrationStatement_sempred(localctx, predIndex);
    	case 11:
    	    		return this.utilityStatement_sempred(localctx, predIndex);
    	case 12:
    	    		return this.dclStatement_sempred(localctx, predIndex);
    	case 23:
    	    		return this.createTemporaryFunction_sempred(localctx, predIndex);
    	case 29:
    	    		return this.createView_sempred(localctx, predIndex);
    	case 32:
    	    		return this.createDatabaseOption_sempred(localctx, predIndex);
    	case 41:
    	    		return this.orReplaceDialectAction_sempred(localctx, predIndex);
    	case 55:
    	    		return this.createTableHead_sempred(localctx, predIndex);
    	case 56:
    	    		return this.createTableAsKeyViolate_sempred(localctx, predIndex);
    	case 57:
    	    		return this.createTableQuery_sempred(localctx, predIndex);
    	case 58:
    	    		return this.createTableLikeOption_sempred(localctx, predIndex);
    	case 59:
    	    		return this.createTableCreateOption_sempred(localctx, predIndex);
    	case 61:
    	    		return this.createDefinition_sempred(localctx, predIndex);
    	case 63:
    	    		return this.columnDefinition_sempred(localctx, predIndex);
    	case 78:
    	    		return this.dialectWithNoData_sempred(localctx, predIndex);
    	case 83:
    	    		return this.errorLogTableDefinition_sempred(localctx, predIndex);
    	case 85:
    	    		return this.tableConstraint_sempred(localctx, predIndex);
    	case 102:
    	    		return this.alterDatabase_sempred(localctx, predIndex);
    	case 112:
    	    		return this.alterDatabaseOption_sempred(localctx, predIndex);
    	case 116:
    	    		return this.alterTableAction_sempred(localctx, predIndex);
    	case 117:
    	    		return this.alterSpecification_sempred(localctx, predIndex);
    	case 130:
    	    		return this.dropDatabase_sempred(localctx, predIndex);
    	case 137:
    	    		return this.dropTable_sempred(localctx, predIndex);
    	case 140:
    	    		return this.dropView_sempred(localctx, predIndex);
    	case 141:
    	    		return this.functionType_sempred(localctx, predIndex);
    	case 144:
    	    		return this.truncateTable_sempred(localctx, predIndex);
    	case 146:
    	    		return this.deleteStatement_sempred(localctx, predIndex);
    	case 155:
    	    		return this.loadDataStatement_sempred(localctx, predIndex);
    	case 161:
    	    		return this.mergeStatement_sempred(localctx, predIndex);
    	case 164:
    	    		return this.updateStatement_sempred(localctx, predIndex);
    	case 165:
    	    		return this.withStatement_sempred(localctx, predIndex);
    	case 167:
    	    		return this.insertPartitionSpec_sempred(localctx, predIndex);
    	case 178:
    	    		return this.insertAction_sempred(localctx, predIndex);
    	case 202:
    	    		return this.orderByExpression_sempred(localctx, predIndex);
    	case 204:
    	    		return this.clusterByClause_sempred(localctx, predIndex);
    	case 205:
    	    		return this.distributeByClause_sempred(localctx, predIndex);
    	case 206:
    	    		return this.sortByClause_sempred(localctx, predIndex);
    	case 209:
    	    		return this.tableSourceItem_sempred(localctx, predIndex);
    	case 210:
    	    		return this.tableSourceItemIndex_sempred(localctx, predIndex);
    	case 212:
    	    		return this.selectStatementPlus_sempred(localctx, predIndex);
    	case 216:
    	    		return this.joinPart_sempred(localctx, predIndex);
    	case 218:
    	    		return this.joinOuterType_sempred(localctx, predIndex);
    	case 219:
    	    		return this.joinNaturalSubType_sempred(localctx, predIndex);
    	case 220:
    	    		return this.joinCondition_sempred(localctx, predIndex);
    	case 228:
    	    		return this.selectSpec_sempred(localctx, predIndex);
    	case 232:
    	    		return this.selectElement_sempred(localctx, predIndex);
    	case 233:
    	    		return this.selectIntoExpression_sempred(localctx, predIndex);
    	case 240:
    	    		return this.hierarchyClause_sempred(localctx, predIndex);
    	case 241:
    	    		return this.groupByItems_sempred(localctx, predIndex);
    	case 243:
    	    		return this.limitClause_sempred(localctx, predIndex);
    	case 258:
    	    		return this.setTransactionStatement_sempred(localctx, predIndex);
    	case 310:
    	    		return this.declareRowDataType_sempred(localctx, predIndex);
    	case 311:
    	    		return this.cursorDialectOption_sempred(localctx, predIndex);
    	case 312:
    	    		return this.conditionDialectOption_sempred(localctx, predIndex);
    	case 369:
    	    		return this.setStatement_sempred(localctx, predIndex);
    	case 370:
    	    		return this.showStatement_sempred(localctx, predIndex);
    	case 374:
    	    		return this.variableClause_sempred(localctx, predIndex);
    	case 376:
    	    		return this.variableExprReserved_sempred(localctx, predIndex);
    	case 392:
    	    		return this.setDelimiter_sempred(localctx, predIndex);
    	case 400:
    	    		return this.describeStatement_sempred(localctx, predIndex);
    	case 451:
    	    		return this.stringLiteralCollate_sempred(localctx, predIndex);
    	case 456:
    	    		return this.dataType_sempred(localctx, predIndex);
    	case 483:
    	    		return this.functionCall_sempred(localctx, predIndex);
    	case 484:
    	    		return this.specificFunction_sempred(localctx, predIndex);
    	case 494:
    	    		return this.aggregateWindowedFunction_sempred(localctx, predIndex);
    	case 507:
    	    		return this.expression_sempred(localctx, predIndex);
    	case 508:
    	    		return this.predicate_sempred(localctx, predIndex);
    	case 509:
    	    		return this.expressionAtom_sempred(localctx, predIndex);
    	case 510:
    	    		return this.unaryPriorOperator_sempred(localctx, predIndex);
    	case 523:
    	    		return this.keywordsCanBeIdMysql_sempred(localctx, predIndex);
    	case 526:
    	    		return this.functionNameBase_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    sqlStatement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.isDialect('inceptor');
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    ddlStatement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 1:
    			return this.isDialect('mysql');
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    dmlStatement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 2:
    			return this.isDialect('inceptor');
    		case 3:
    			return this.isDialect('mysql');
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    transactionStatement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 4:
    			return this.isDialect('mysql');
    		case 5:
    			return this.isDialect('inceptor');
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    replicationStatement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 6:
    			return this.isDialect('mysql');
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    preparedStatement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 7:
    			return this.isDialect('mysql');
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    administrationStatement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 8:
    			return this.isDialect('mysql');
    		case 9:
    			return this.isDialect('inceptor');
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    utilityStatement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 10:
    			return this.isDialect('mysql');
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    dclStatement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 11:
    			return this.isDialect('mysql');
    		case 12:
    			return this.isDialect('inceptor');
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    createTemporaryFunction_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 13:
    			return this.isDialect('inceptor');
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    createView_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 14:
    			return this.isDialect('mysql');
    		case 15:
    			return this.isDialect('inceptor');
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    createDatabaseOption_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 16:
    			return this.isDialect('mysql');
    		case 17:
    			return this.isDialect('inceptor');
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    orReplaceDialectAction_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 18:
    			return this.isDialect('inceptor');
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    createTableHead_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 19:
    			return this.isDialect('mysql');
    		case 20:
    			return this.isDialect('inceptor');
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    createTableAsKeyViolate_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 21:
    			return this.isDialect('mysql');
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    createTableQuery_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 22:
    			return this.isDialect('mysql');
    		case 23:
    			return this.isDialect('inceptor');
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    createTableLikeOption_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 24:
    			return this.isDialect('inceptor');
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    createTableCreateOption_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 25:
    			return this.isDialect('mysql');
    		case 26:
    			return this.isDialect('inceptor');
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    createDefinition_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 27:
    			return this.isDialect('mysql');
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    columnDefinition_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 28:
    			return this.isDialect('mysql');
    		case 29:
    			return this.isDialect('inceptor');
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    dialectWithNoData_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 30:
    			return this.isDialect('inceptor');
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    errorLogTableDefinition_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 31:
    			return this.isDialect('inceptor');
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    tableConstraint_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 32:
    			return this.isDialect('mysql');
    		case 33:
    			return this.isDialect('inceptor');
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    alterDatabase_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 34:
    			return this.isDialect('mysql');
    		case 35:
    			return this.isDialect('mysql');
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    alterDatabaseOption_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 36:
    			return this.isDialect('mysql');
    		case 37:
    			return this.isDialect('inceptor');
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    alterTableAction_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 38:
    			return this.isDialect('mysql');
    		case 39:
    			return this.isDialect('inceptor');
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    alterSpecification_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 40:
    			return this.isDialect('mysql');
    		case 41:
    			return this.isDialect('inceptor');
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    dropDatabase_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 42:
    			return this.isDialect('mysql');
    		case 43:
    			return this.isDialect('inceptor');
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    dropTable_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 44:
    			return this.isDialect('mysql');
    		case 45:
    			return this.isDialect('inceptor');
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    dropView_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 46:
    			return this.isDialect('mysql');
    		case 47:
    			return this.isDialect('inceptor');
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    functionType_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 48:
    			return this.isDialect('inceptor');
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    truncateTable_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 49:
    			return this.isDialect('inceptor');
    		case 50:
    			return this.isDialect('mysql');
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    deleteStatement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 51:
    			return this.isDialect('mysql');
    		case 52:
    			return this.isDialect('inceptor');
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    loadDataStatement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 53:
    			return this.isDialect('mysql');
    		case 54:
    			return this.isDialect('inceptor');
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    mergeStatement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 55:
    			return this.isDialect('inceptor');
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    updateStatement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 56:
    			return this.isDialect('mysql');
    		case 57:
    			return this.isDialect('inceptor');
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    withStatement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 58:
    			return this.isDialect('inceptor');
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    insertPartitionSpec_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 59:
    			return this.isDialect('mysql');
    		case 60:
    			return this.isDialect('inceptor');
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    insertAction_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 61:
    			return this.isDialect('mysql');
    		case 62:
    			return this.isDialect('inceptor');
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    orderByExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 63:
    			return this.isDialect('mysql');
    		case 64:
    			return this.isDialect('inceptor');
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    clusterByClause_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 65:
    			return this.isDialect('inceptor');
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    distributeByClause_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 66:
    			return this.isDialect('inceptor');
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    sortByClause_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 67:
    			return this.isDialect('inceptor');
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    tableSourceItem_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 68:
    			return this.isDialect('inceptor');
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    tableSourceItemIndex_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 69:
    			return this.isDialect('mysql');
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    selectStatementPlus_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 70:
    			return this.isDialect('inceptor');
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    joinPart_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 71:
    			return this.isDialect('mysql');
    		case 72:
    			return this.isDialect('inceptor');
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    joinOuterType_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 73:
    			return this.isDialect('mysql');
    		case 74:
    			return this.isDialect('inceptor');
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    joinNaturalSubType_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 75:
    			return this.isDialect('mysql');
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    joinCondition_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 76:
    			return this.isDialect('mysql');
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    selectSpec_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 77:
    			return this.isDialect('mysql');
    		case 78:
    			return this.isDialect('inceptor');
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    selectElement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 79:
    			return this.isDialect('mysql');
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    selectIntoExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 80:
    			return this.isDialect('inceptor');
    		case 81:
    			return this.isDialect('mysql');
    		case 82:
    			return this.isDialect('mysql');
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    hierarchyClause_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 83:
    			return this.isDialect('inceptor');
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    groupByItems_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 84:
    			return this.isDialect('mysql');
    		case 85:
    			return this.isDialect('inceptor');
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    limitClause_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 86:
    			return this.isDialect('mysql');
    		case 87:
    			return this.isDialect('inceptor');
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    setTransactionStatement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 88:
    			return this.isDialect('mysql');
    		case 89:
    			return this.isDialect('inceptor');
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    declareRowDataType_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 90:
    			return this.isDialect('inceptor');
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    cursorDialectOption_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 91:
    			return this.isDialect('mysql');
    		case 92:
    			return this.isDialect('inceptor');
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    conditionDialectOption_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 93:
    			return this.isDialect('mysql');
    		case 94:
    			return this.isDialect('inceptor');
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    setStatement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 95:
    			return this.isDialect('mysql');
    		case 96:
    			return this.isDialect('mysql');
    		case 97:
    			return this.isDialect('mysql');
    		case 98:
    			return this.isDialect('mysql');
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    showStatement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 99:
    			return this.isDialect('mysql');
    		case 100:
    			return this.isDialect('inceptor');
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    variableClause_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 101:
    			return this.isDialect('mysql');
    		case 102:
    			return this.isDialect('inceptor');
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    variableExprReserved_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 103:
    			return this.isDialect('inceptor');
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    setDelimiter_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 104:
    			return this.isDialect('inceptor');
    		case 105:
    			return this.isDialect('mysql');
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    describeStatement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 106:
    			return this.isDialect('mysql');
    		case 107:
    			return this.isDialect('inceptor');
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    stringLiteralCollate_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 108:
    			return this.isDialect('mysql');
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    dataType_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 109:
    			return this.isDialect('inceptor');
    		case 110:
    			return this.isDialect('mysql');
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    functionCall_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 111:
    			return this.isDialect('mysql');
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    specificFunction_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 112:
    			return this.isDialect('mysql');
    		case 113:
    			return this.isDialect('inceptor');
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    aggregateWindowedFunction_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 114:
    			return this.isDialect('mysql');
    		case 115:
    			return this.isDialect('inceptor');
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    expression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 116:
    			return this.precpred(this._ctx, 4);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    predicate_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 117:
    			return this.precpred(this._ctx, 7);
    		case 118:
    			return this.precpred(this._ctx, 5);
    		case 119:
    			return this.precpred(this._ctx, 4);
    		case 120:
    			return this.precpred(this._ctx, 2);
    		case 121:
    			return this.precpred(this._ctx, 9);
    		case 122:
    			return this.precpred(this._ctx, 8);
    		case 123:
    			return this.precpred(this._ctx, 6);
    		case 124:
    			return this.precpred(this._ctx, 3);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    expressionAtom_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 125:
    			return this.isDialect('inceptor');
    		case 126:
    			return this.isDialect('inceptor');
    		case 127:
    			return this.isDialect('mysql');
    		case 128:
    			return this.precpred(this._ctx, 2);
    		case 129:
    			return this.precpred(this._ctx, 1);
    		case 130:
    			return this.precpred(this._ctx, 11);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    unaryPriorOperator_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 131:
    			return this.isDialect('inceptor');
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    keywordsCanBeIdMysql_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 132:
    			return this.isDialect('mysql');
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    functionNameBase_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 133:
    			return this.isDialect('mysql');
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	root() {
	    let localctx = new RootContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, MySqlParser.RULE_root);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1245;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,0,this._ctx);
	        if(la_===1) {
	            this.state = 1244;
	            this.sqlStatements();

	        }
	        this.state = 1248;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.MINUSMINUS) {
	            this.state = 1247;
	            this.match(MySqlParser.MINUSMINUS);
	        }

	        this.state = 1250;
	        this.match(MySqlParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sqlStatements() {
	    let localctx = new SqlStatementsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, MySqlParser.RULE_sqlStatements);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1262;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,5,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1260;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,4,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 1252;
	                    this.sqlStatement();
	                    this.state = 1254;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
	                    if(la_===1) {
	                        this.state = 1253;
	                        this.match(MySqlParser.MINUSMINUS);

	                    }
	                    this.state = 1257;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,3,this._ctx);
	                    if(la_===1) {
	                        this.state = 1256;
	                        this.match(MySqlParser.SEMI);

	                    }
	                    break;

	                case 2:
	                    this.state = 1259;
	                    this.emptyStatement();
	                    break;

	                } 
	            }
	            this.state = 1264;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,5,this._ctx);
	        }

	        this.state = 1273;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,8,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1265;
	            this.sqlStatement();
	            this.state = 1270;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,7,this._ctx);
	            if(la_===1) {
	                this.state = 1267;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===MySqlParser.MINUSMINUS) {
	                    this.state = 1266;
	                    this.match(MySqlParser.MINUSMINUS);
	                }

	                this.state = 1269;
	                this.match(MySqlParser.SEMI);

	            }
	            break;

	        case 2:
	            this.state = 1272;
	            this.emptyStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sqlStatement() {
	    let localctx = new SqlStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, MySqlParser.RULE_sqlStatement);
	    try {
	        this.state = 1286;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,9,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1275;
	            this.dclStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1276;
	            this.ddlStatement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1277;
	            this.dmlStatement();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1278;
	            this.transactionStatement();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1279;
	            this.replicationStatement();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1280;
	            this.preparedStatement();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1281;
	            this.administrationStatement();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1282;
	            this.utilityStatement();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1283;
	            this.anchorStatement();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1284;
	            if (!( this.isDialect('inceptor'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('inceptor')");
	            }

	            this.state = 1285;
	            this.plsqlStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	emptyStatement() {
	    let localctx = new EmptyStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, MySqlParser.RULE_emptyStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1288;
	        this.match(MySqlParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ddlStatement() {
	    let localctx = new DdlStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, MySqlParser.RULE_ddlStatement);
	    try {
	        this.state = 1330;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,11,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1290;
	            this.createDatabase();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1291;
	            this.createIndex();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1292;
	            this.createProcedure();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1293;
	            this.createFunction();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1294;
	            this.createTable();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1295;
	            this.createView();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1296;
	            this.createTemporaryFunction();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1297;
	            this.alterDatabase();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1298;
	            this.alterProcedure();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1299;
	            this.alterTable();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1300;
	            this.dropDatabase();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 1301;
	            this.dropIndex();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 1302;
	            this.dropPackage();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 1303;
	            this.dropProcedure();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 1304;
	            this.dropFunction();
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 1305;
	            this.dropTable();
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 1306;
	            this.dropView();
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 1307;
	            this.truncateTable();
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 1308;
	            if (!( this.isDialect('mysql'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('mysql')");
	            }
	            this.state = 1328;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,10,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1309;
	                this.createEvent();
	                break;

	            case 2:
	                this.state = 1310;
	                this.createLogfileGroup();
	                break;

	            case 3:
	                this.state = 1311;
	                this.createServer();
	                break;

	            case 4:
	                this.state = 1312;
	                this.createTablespaceInnodb();
	                break;

	            case 5:
	                this.state = 1313;
	                this.createTablespaceNdb();
	                break;

	            case 6:
	                this.state = 1314;
	                this.createTrigger();
	                break;

	            case 7:
	                this.state = 1315;
	                this.alterEvent();
	                break;

	            case 8:
	                this.state = 1316;
	                this.alterFunction();
	                break;

	            case 9:
	                this.state = 1317;
	                this.alterInstance();
	                break;

	            case 10:
	                this.state = 1318;
	                this.alterLogfileGroup();
	                break;

	            case 11:
	                this.state = 1319;
	                this.alterServer();
	                break;

	            case 12:
	                this.state = 1320;
	                this.alterTablespace();
	                break;

	            case 13:
	                this.state = 1321;
	                this.alterView();
	                break;

	            case 14:
	                this.state = 1322;
	                this.dropEvent();
	                break;

	            case 15:
	                this.state = 1323;
	                this.dropLogfileGroup();
	                break;

	            case 16:
	                this.state = 1324;
	                this.dropServer();
	                break;

	            case 17:
	                this.state = 1325;
	                this.dropTablespace();
	                break;

	            case 18:
	                this.state = 1326;
	                this.dropTrigger();
	                break;

	            case 19:
	                this.state = 1327;
	                this.renameTable();
	                break;

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dmlStatement() {
	    let localctx = new DmlStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, MySqlParser.RULE_dmlStatement);
	    try {
	        this.state = 1352;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,14,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1332;
	            this.selectStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1333;
	            this.insertStatement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1334;
	            this.updateStatement();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1335;
	            this.deleteStatement();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1336;
	            this.callStatement();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1337;
	            this.loadDataStatement();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1338;
	            this.doStatement();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1339;
	            if (!( this.isDialect('inceptor'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('inceptor')");
	            }
	            this.state = 1344;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,12,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1340;
	                this.insertFile();
	                break;

	            case 2:
	                this.state = 1341;
	                this.mergeStatement();
	                break;

	            case 3:
	                this.state = 1342;
	                this.withStatement();
	                break;

	            case 4:
	                this.state = 1343;
	                this.fromInsertStatement();
	                break;

	            }
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1346;
	            if (!( this.isDialect('mysql'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('mysql')");
	            }
	            this.state = 1350;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case MySqlParser.REPLACE:
	                this.state = 1347;
	                this.replaceStatement();
	                break;
	            case MySqlParser.LOAD:
	                this.state = 1348;
	                this.loadXmlStatement();
	                break;
	            case MySqlParser.HANDLER:
	                this.state = 1349;
	                this.handlerStatement();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transactionStatement() {
	    let localctx = new TransactionStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, MySqlParser.RULE_transactionStatement);
	    try {
	        this.state = 1368;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1354;
	            if (!( this.isDialect('mysql'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('mysql')");
	            }
	            this.state = 1364;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1355;
	                this.startTransaction();
	                break;

	            case 2:
	                this.state = 1356;
	                this.beginWork();
	                break;

	            case 3:
	                this.state = 1357;
	                this.commitWork();
	                break;

	            case 4:
	                this.state = 1358;
	                this.rollbackWork();
	                break;

	            case 5:
	                this.state = 1359;
	                this.lockTables();
	                break;

	            case 6:
	                this.state = 1360;
	                this.unlockTables();
	                break;

	            case 7:
	                this.state = 1361;
	                this.savepointStatement();
	                break;

	            case 8:
	                this.state = 1362;
	                this.releaseStatement();
	                break;

	            case 9:
	                this.state = 1363;
	                this.rollbackStatement();
	                break;

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1366;
	            if (!( this.isDialect('inceptor'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('inceptor')");
	            }
	            this.state = 1367;
	            this.transactionStatementInceptor();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	replicationStatement() {
	    let localctx = new ReplicationStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, MySqlParser.RULE_replicationStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1370;
	        if (!( this.isDialect('mysql'))) {
	            throw new antlr4.error.FailedPredicateException(this, "this.isDialect('mysql')");
	        }
	        this.state = 1386;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1371;
	            this.changeMaster();
	            break;

	        case 2:
	            this.state = 1372;
	            this.changeReplicationFilter();
	            break;

	        case 3:
	            this.state = 1373;
	            this.purgeBinaryLogs();
	            break;

	        case 4:
	            this.state = 1374;
	            this.resetMaster();
	            break;

	        case 5:
	            this.state = 1375;
	            this.resetSlave();
	            break;

	        case 6:
	            this.state = 1376;
	            this.startSlave();
	            break;

	        case 7:
	            this.state = 1377;
	            this.stopSlave();
	            break;

	        case 8:
	            this.state = 1378;
	            this.startGroupReplication();
	            break;

	        case 9:
	            this.state = 1379;
	            this.stopGroupReplication();
	            break;

	        case 10:
	            this.state = 1380;
	            this.xaStartTransaction();
	            break;

	        case 11:
	            this.state = 1381;
	            this.xaEndTransaction();
	            break;

	        case 12:
	            this.state = 1382;
	            this.xaPrepareStatement();
	            break;

	        case 13:
	            this.state = 1383;
	            this.xaCommitWork();
	            break;

	        case 14:
	            this.state = 1384;
	            this.xaRollbackWork();
	            break;

	        case 15:
	            this.state = 1385;
	            this.xaRecoverWork();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	preparedStatement() {
	    let localctx = new PreparedStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, MySqlParser.RULE_preparedStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1388;
	        if (!( this.isDialect('mysql'))) {
	            throw new antlr4.error.FailedPredicateException(this, "this.isDialect('mysql')");
	        }
	        this.state = 1392;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.PREPARE:
	            this.state = 1389;
	            this.prepareStatement();
	            break;
	        case MySqlParser.EXECUTE:
	            this.state = 1390;
	            this.executeStatement();
	            break;
	        case MySqlParser.DROP:
	        case MySqlParser.DEALLOCATE:
	            this.state = 1391;
	            this.deallocatePrepare();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compoundStatement() {
	    let localctx = new CompoundStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, MySqlParser.RULE_compoundStatement);
	    try {
	        this.state = 1404;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,19,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1394;
	            this.blockStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1395;
	            this.caseStatement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1396;
	            this.ifStatement();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1397;
	            this.leaveStatement();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1398;
	            this.loopStatement();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1399;
	            this.repeatStatement();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1400;
	            this.whileStatement();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1401;
	            this.iterateStatement();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1402;
	            this.returnStatement();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1403;
	            this.cursorStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	administrationStatement() {
	    let localctx = new AdministrationStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, MySqlParser.RULE_administrationStatement);
	    try {
	        this.state = 1433;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,22,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1406;
	            this.analyzeTable();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1407;
	            this.setStatement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1408;
	            this.showStatement();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1409;
	            this.setDelimiter();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1410;
	            if (!( this.isDialect('mysql'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('mysql')");
	            }
	            this.state = 1425;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case MySqlParser.CHECKSUM:
	                this.state = 1411;
	                this.checksumTable();
	                break;
	            case MySqlParser.OPTIMIZE:
	                this.state = 1412;
	                this.optimizeTable();
	                break;
	            case MySqlParser.REPAIR:
	                this.state = 1413;
	                this.repairTable();
	                break;
	            case MySqlParser.CHECK:
	                this.state = 1414;
	                this.checkTable();
	                break;
	            case MySqlParser.CREATE:
	                this.state = 1415;
	                this.createUdfunction();
	                break;
	            case MySqlParser.INSTALL:
	                this.state = 1416;
	                this.installPlugin();
	                break;
	            case MySqlParser.UNINSTALL:
	                this.state = 1417;
	                this.uninstallPlugin();
	                break;
	            case MySqlParser.BINLOG:
	                this.state = 1418;
	                this.binlogStatement();
	                break;
	            case MySqlParser.CACHE:
	                this.state = 1419;
	                this.cacheIndexStatement();
	                break;
	            case MySqlParser.FLUSH:
	                this.state = 1420;
	                this.flushStatement();
	                break;
	            case MySqlParser.KILL:
	                this.state = 1421;
	                this.killStatement();
	                break;
	            case MySqlParser.LOAD:
	                this.state = 1422;
	                this.loadIndexIntoCache();
	                break;
	            case MySqlParser.RESET:
	                this.state = 1423;
	                this.resetStatement();
	                break;
	            case MySqlParser.SHUTDOWN:
	                this.state = 1424;
	                this.shutdownStatement();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1427;
	            if (!( this.isDialect('inceptor'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('inceptor')");
	            }
	            this.state = 1431;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case MySqlParser.ADD:
	                this.state = 1428;
	                this.addJarStatement();
	                break;
	            case MySqlParser.LIST:
	                this.state = 1429;
	                this.listJarStatement();
	                break;
	            case MySqlParser.EXCLAMATION_SET:
	                this.state = 1430;
	                this.setPlsqlDialect();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	utilityStatement() {
	    let localctx = new UtilityStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, MySqlParser.RULE_utilityStatement);
	    try {
	        this.state = 1439;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,23,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1435;
	            this.describeStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1436;
	            this.useStatement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1437;
	            if (!( this.isDialect('mysql'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('mysql')");
	            }

	            this.state = 1438;
	            this.helpStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dclStatement() {
	    let localctx = new DclStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, MySqlParser.RULE_dclStatement);
	    try {
	        this.state = 1469;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,26,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1441;
	            if (!( this.isDialect('mysql'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('mysql')");
	            }
	            this.state = 1450;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,24,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1442;
	                this.alterUser();
	                break;

	            case 2:
	                this.state = 1443;
	                this.createUser();
	                break;

	            case 3:
	                this.state = 1444;
	                this.dropUser();
	                break;

	            case 4:
	                this.state = 1445;
	                this.grantStatement();
	                break;

	            case 5:
	                this.state = 1446;
	                this.grantProxy();
	                break;

	            case 6:
	                this.state = 1447;
	                this.renameUser();
	                break;

	            case 7:
	                this.state = 1448;
	                this.revokeStatement();
	                break;

	            case 8:
	                this.state = 1449;
	                this.revokeProxy();
	                break;

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1452;
	            if (!( this.isDialect('inceptor'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('inceptor')");
	            }
	            this.state = 1467;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,25,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1453;
	                this.grantFacl();
	                break;

	            case 2:
	                this.state = 1454;
	                this.grantPermission();
	                break;

	            case 3:
	                this.state = 1455;
	                this.grantQuota();
	                break;

	            case 4:
	                this.state = 1456;
	                this.grantStatementInceptor();
	                break;

	            case 5:
	                this.state = 1457;
	                this.revokeFacl();
	                break;

	            case 6:
	                this.state = 1458;
	                this.revokePermission();
	                break;

	            case 7:
	                this.state = 1459;
	                this.revokeQuota();
	                break;

	            case 8:
	                this.state = 1460;
	                this.revokeStatementInceptor();
	                break;

	            case 9:
	                this.state = 1461;
	                this.roleStatementInceptor();
	                break;

	            case 10:
	                this.state = 1462;
	                this.showFacl();
	                break;

	            case 11:
	                this.state = 1463;
	                this.showGrantInceptor();
	                break;

	            case 12:
	                this.state = 1464;
	                this.showPermission();
	                break;

	            case 13:
	                this.state = 1465;
	                this.showPrincipal();
	                break;

	            case 14:
	                this.state = 1466;
	                this.showQuota();
	                break;

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	anchorStatement() {
	    let localctx = new AnchorStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, MySqlParser.RULE_anchorStatement);
	    try {
	        this.state = 1478;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.CREATE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1471;
	            this.match(MySqlParser.CREATE);
	            this.state = 1472;
	            this.createAnchor();
	            break;
	        case MySqlParser.DROP:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1473;
	            this.match(MySqlParser.DROP);
	            this.state = 1474;
	            this.dropAnchor();
	            break;
	        case MySqlParser.QUESTION_MARK:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1475;
	            localctx._startAnchor = this.startAnchor();

	                    this.notifyPlaceholderError(localctx._startAnchor, 'Please provide statement')
	                  
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	startAnchor() {
	    let localctx = new StartAnchorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, MySqlParser.RULE_startAnchor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1480;
	        this.placeholder();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createAnchor() {
	    let localctx = new CreateAnchorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, MySqlParser.RULE_createAnchor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1482;
	        this.placeholder();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropAnchor() {
	    let localctx = new DropAnchorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, MySqlParser.RULE_dropAnchor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1484;
	        this.placeholder();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createDatabase() {
	    let localctx = new CreateDatabaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, MySqlParser.RULE_createDatabase);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1486;
	        this.match(MySqlParser.CREATE);
	        this.state = 1487;
	        localctx.dbFormat = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(_la===MySqlParser.DATABASE || _la===MySqlParser.SCHEMA)) {
	            localctx.dbFormat = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1489;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,28,this._ctx);
	        if(la_===1) {
	            this.state = 1488;
	            this.ifNotExists();

	        }
	        this.state = 1491;
	        this.databaseName();
	        this.state = 1492;
	        this.createDatabaseOption();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createEvent() {
	    let localctx = new CreateEventContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, MySqlParser.RULE_createEvent);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1494;
	        this.match(MySqlParser.CREATE);
	        this.state = 1496;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.DEFINER) {
	            this.state = 1495;
	            this.ownerStatement();
	        }

	        this.state = 1498;
	        this.match(MySqlParser.EVENT);
	        this.state = 1500;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
	        if(la_===1) {
	            this.state = 1499;
	            this.ifNotExists();

	        }
	        this.state = 1502;
	        this.fullId();
	        this.state = 1503;
	        this.match(MySqlParser.ON);
	        this.state = 1504;
	        this.match(MySqlParser.SCHEDULE);
	        this.state = 1505;
	        this.scheduleExpression();
	        this.state = 1512;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.ON) {
	            this.state = 1506;
	            this.match(MySqlParser.ON);
	            this.state = 1507;
	            this.match(MySqlParser.COMPLETION);
	            this.state = 1509;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.NOT) {
	                this.state = 1508;
	                this.match(MySqlParser.NOT);
	            }

	            this.state = 1511;
	            this.match(MySqlParser.PRESERVE);
	        }

	        this.state = 1515;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.DISABLE || _la===MySqlParser.ENABLE) {
	            this.state = 1514;
	            this.enableType();
	        }

	        this.state = 1519;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.COMMENT) {
	            this.state = 1517;
	            this.match(MySqlParser.COMMENT);
	            this.state = 1518;
	            this.match(MySqlParser.STRING_LITERAL);
	        }

	        this.state = 1521;
	        this.match(MySqlParser.DO);
	        this.state = 1522;
	        this.routineBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createIndex() {
	    let localctx = new CreateIndexContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, MySqlParser.RULE_createIndex);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1524;
	        this.match(MySqlParser.CREATE);
	        this.state = 1526;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.OFFLINE || _la===MySqlParser.ONLINE) {
	            this.state = 1525;
	            localctx.intimeAction = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.OFFLINE || _la===MySqlParser.ONLINE)) {
	                localctx.intimeAction = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 1529;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.FULLTEXT || _la===MySqlParser.SPATIAL || _la===MySqlParser.UNIQUE) {
	            this.state = 1528;
	            localctx.indexCategory = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.FULLTEXT || _la===MySqlParser.SPATIAL || _la===MySqlParser.UNIQUE)) {
	                localctx.indexCategory = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 1531;
	        this.match(MySqlParser.INDEX);
	        this.state = 1532;
	        this.uid();
	        this.state = 1534;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.USING) {
	            this.state = 1533;
	            this.indexType();
	        }

	        this.state = 1536;
	        this.match(MySqlParser.ON);
	        this.state = 1537;
	        this.tableName();
	        this.state = 1538;
	        this.indexColumnNames();
	        this.state = 1542;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,38,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1539;
	                this.indexOption(); 
	            }
	            this.state = 1544;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,38,this._ctx);
	        }

	        this.state = 1555;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,41,this._ctx);
	        if(la_===1) {
	            this.state = 1545;
	            this.match(MySqlParser.ALGORITHM);
	            this.state = 1547;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 1546;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1549;
	            localctx.algType = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.DEFAULT || _la===MySqlParser.COPY || _la===MySqlParser.INPLACE)) {
	                localctx.algType = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }

	        } else if(la_===2) {
	            this.state = 1550;
	            this.match(MySqlParser.LOCK);
	            this.state = 1552;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 1551;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1554;
	            localctx.lockType = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.DEFAULT || _la===MySqlParser.EXCLUSIVE || _la===MySqlParser.NONE || _la===MySqlParser.SHARED)) {
	                localctx.lockType = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createLogfileGroup() {
	    let localctx = new CreateLogfileGroupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, MySqlParser.RULE_createLogfileGroup);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1557;
	        this.match(MySqlParser.CREATE);
	        this.state = 1558;
	        this.match(MySqlParser.LOGFILE);
	        this.state = 1559;
	        this.match(MySqlParser.GROUP);
	        this.state = 1560;
	        this.uid();
	        this.state = 1561;
	        this.match(MySqlParser.ADD);
	        this.state = 1562;
	        this.match(MySqlParser.UNDOFILE);
	        this.state = 1563;
	        localctx.undoFile = this.match(MySqlParser.STRING_LITERAL);
	        this.state = 1569;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.INITIAL_SIZE) {
	            this.state = 1564;
	            this.match(MySqlParser.INITIAL_SIZE);
	            this.state = 1566;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 1565;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1568;
	            localctx.initSize = this.fileSizeLiteral();
	        }

	        this.state = 1576;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.UNDO_BUFFER_SIZE) {
	            this.state = 1571;
	            this.match(MySqlParser.UNDO_BUFFER_SIZE);
	            this.state = 1573;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 1572;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1575;
	            localctx.undoSize = this.fileSizeLiteral();
	        }

	        this.state = 1583;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.REDO_BUFFER_SIZE) {
	            this.state = 1578;
	            this.match(MySqlParser.REDO_BUFFER_SIZE);
	            this.state = 1580;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 1579;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1582;
	            localctx.redoSize = this.fileSizeLiteral();
	        }

	        this.state = 1590;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.NODEGROUP) {
	            this.state = 1585;
	            this.match(MySqlParser.NODEGROUP);
	            this.state = 1587;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,48,this._ctx);
	            if(la_===1) {
	                this.state = 1586;
	                this.match(MySqlParser.EQUAL_SYMBOL);

	            }
	            this.state = 1589;
	            this.uid();
	        }

	        this.state = 1593;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.WAIT) {
	            this.state = 1592;
	            this.match(MySqlParser.WAIT);
	        }

	        this.state = 1600;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.COMMENT) {
	            this.state = 1595;
	            this.match(MySqlParser.COMMENT);
	            this.state = 1597;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 1596;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1599;
	            localctx.comment = this.match(MySqlParser.STRING_LITERAL);
	        }

	        this.state = 1602;
	        this.match(MySqlParser.ENGINE);
	        this.state = 1604;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.EQUAL_SYMBOL) {
	            this.state = 1603;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	        }

	        this.state = 1606;
	        this.engineName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createProcedure() {
	    let localctx = new CreateProcedureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, MySqlParser.RULE_createProcedure);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1608;
	        this.match(MySqlParser.CREATE);
	        this.state = 1610;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,54,this._ctx);
	        if(la_===1) {
	            this.state = 1609;
	            this.orReplaceDialectAction();

	        }
	        this.state = 1613;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.DEFINER) {
	            this.state = 1612;
	            this.ownerStatement();
	        }

	        this.state = 1615;
	        this.match(MySqlParser.PROCEDURE);
	        this.state = 1616;
	        this.fullId();
	        this.state = 1617;
	        this.match(MySqlParser.LR_BRACKET);
	        this.state = 1619;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,56,this._ctx);
	        if(la_===1) {
	            this.state = 1618;
	            this.procedureParameter();

	        }
	        this.state = 1625;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MySqlParser.COMMA) {
	            this.state = 1621;
	            this.match(MySqlParser.COMMA);
	            this.state = 1622;
	            this.procedureParameter();
	            this.state = 1627;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1628;
	        this.match(MySqlParser.RR_BRACKET);
	        this.state = 1632;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,58,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1629;
	                this.routineOption(); 
	            }
	            this.state = 1634;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,58,this._ctx);
	        }

	        this.state = 1635;
	        this.routineBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createFunction() {
	    let localctx = new CreateFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, MySqlParser.RULE_createFunction);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1637;
	        this.match(MySqlParser.CREATE);
	        this.state = 1639;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,59,this._ctx);
	        if(la_===1) {
	            this.state = 1638;
	            this.orReplaceDialectAction();

	        }
	        this.state = 1642;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.DEFINER) {
	            this.state = 1641;
	            this.ownerStatement();
	        }

	        this.state = 1644;
	        this.match(MySqlParser.FUNCTION);
	        this.state = 1645;
	        this.fullId();
	        this.state = 1646;
	        this.match(MySqlParser.LR_BRACKET);
	        this.state = 1648;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,61,this._ctx);
	        if(la_===1) {
	            this.state = 1647;
	            this.functionParameter();

	        }
	        this.state = 1654;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MySqlParser.COMMA) {
	            this.state = 1650;
	            this.match(MySqlParser.COMMA);
	            this.state = 1651;
	            this.functionParameter();
	            this.state = 1656;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1657;
	        this.match(MySqlParser.RR_BRACKET);
	        this.state = 1658;
	        this.match(MySqlParser.RETURNS);
	        this.state = 1659;
	        this.dataType();
	        this.state = 1663;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,63,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1660;
	                this.routineOption(); 
	            }
	            this.state = 1665;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,63,this._ctx);
	        }

	        this.state = 1666;
	        this.routineBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createTemporaryFunction() {
	    let localctx = new CreateTemporaryFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, MySqlParser.RULE_createTemporaryFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1668;
	        if (!( this.isDialect('inceptor'))) {
	            throw new antlr4.error.FailedPredicateException(this, "this.isDialect('inceptor')");
	        }
	        this.state = 1669;
	        this.match(MySqlParser.CREATE);
	        this.state = 1670;
	        this.functionType();
	        this.state = 1671;
	        this.match(MySqlParser.FUNCTION);
	        this.state = 1673;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,64,this._ctx);
	        if(la_===1) {
	            this.state = 1672;
	            this.ifNotExists();

	        }
	        this.state = 1675;
	        this.uid();
	        this.state = 1676;
	        this.match(MySqlParser.AS);
	        this.state = 1677;
	        this.stringLiteral();
	        this.state = 1687;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,66,this._ctx);
	        if(la_===1) {
	            this.state = 1678;
	            this.match(MySqlParser.USING);
	            this.state = 1679;
	            this.permanentFunctionResource();
	            this.state = 1684;
	            this._errHandler.sync(this);
	            let _alt = this._interp.adaptivePredict(this._input,65,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1680;
	                    this.match(MySqlParser.COMMA);
	                    this.state = 1681;
	                    this.permanentFunctionResource(); 
	                }
	                this.state = 1686;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,65,this._ctx);
	            }


	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createServer() {
	    let localctx = new CreateServerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, MySqlParser.RULE_createServer);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1689;
	        this.match(MySqlParser.CREATE);
	        this.state = 1690;
	        this.match(MySqlParser.SERVER);
	        this.state = 1691;
	        this.uid();
	        this.state = 1692;
	        this.match(MySqlParser.FOREIGN);
	        this.state = 1693;
	        this.match(MySqlParser.DATA);
	        this.state = 1694;
	        this.match(MySqlParser.WRAPPER);
	        this.state = 1695;
	        localctx.wrapperName = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(_la===MySqlParser.MYSQL || _la===MySqlParser.STRING_LITERAL)) {
	            localctx.wrapperName = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1696;
	        this.match(MySqlParser.OPTIONS);
	        this.state = 1697;
	        this.match(MySqlParser.LR_BRACKET);
	        this.state = 1698;
	        this.serverOption();
	        this.state = 1703;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MySqlParser.COMMA) {
	            this.state = 1699;
	            this.match(MySqlParser.COMMA);
	            this.state = 1700;
	            this.serverOption();
	            this.state = 1705;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1706;
	        this.match(MySqlParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createTable() {
	    let localctx = new CreateTableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, MySqlParser.RULE_createTable);
	    try {
	        this.state = 1766;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,80,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new CopyCreateTableContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1708;
	            this.createTableHead();
	            this.state = 1710;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,68,this._ctx);
	            if(la_===1) {
	                this.state = 1709;
	                this.ifNotExists();

	            }
	            this.state = 1712;
	            this.tableName();
	            this.state = 1720;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case MySqlParser.LIKE:
	                this.state = 1713;
	                this.match(MySqlParser.LIKE);
	                this.state = 1714;
	                this.tableName();
	                break;
	            case MySqlParser.LR_BRACKET:
	                this.state = 1715;
	                this.match(MySqlParser.LR_BRACKET);
	                this.state = 1716;
	                this.match(MySqlParser.LIKE);
	                this.state = 1717;
	                localctx.parenthesisTable = this.tableName();
	                this.state = 1718;
	                this.match(MySqlParser.RR_BRACKET);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 1722;
	            this.createTableLikeOption();
	            break;

	        case 2:
	            localctx = new QueryCreateTableContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1724;
	            this.createTableHead();
	            this.state = 1726;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,70,this._ctx);
	            if(la_===1) {
	                this.state = 1725;
	                this.ifNotExists();

	            }
	            this.state = 1728;
	            this.tableName();
	            this.state = 1730;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,71,this._ctx);
	            if(la_===1) {
	                this.state = 1729;
	                this.createDefinitions();

	            }
	            this.state = 1732;
	            this.createTableCreateOption();
	            this.state = 1734;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,72,this._ctx);
	            if(la_===1) {
	                this.state = 1733;
	                this.createTableAsKeyViolate();

	            }
	            this.state = 1736;
	            this.createTableQuery();
	            this.state = 1738;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,73,this._ctx);
	            if(la_===1) {
	                this.state = 1737;
	                this.dialectWithNoData();

	            }
	            break;

	        case 3:
	            localctx = new QueryCreateTableContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1740;
	            this.createTableHead();
	            this.state = 1742;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,74,this._ctx);
	            if(la_===1) {
	                this.state = 1741;
	                this.ifNotExists();

	            }
	            this.state = 1744;
	            this.tableName();
	            this.state = 1746;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,75,this._ctx);
	            if(la_===1) {
	                this.state = 1745;
	                this.createDefinitions();

	            }
	            this.state = 1749;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,76,this._ctx);
	            if(la_===1) {
	                this.state = 1748;
	                this.createTableAsKeyViolate();

	            }
	            this.state = 1751;
	            this.createTableQuery();
	            this.state = 1753;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,77,this._ctx);
	            if(la_===1) {
	                this.state = 1752;
	                this.dialectWithNoData();

	            }
	            break;

	        case 4:
	            localctx = new ColumnCreateTableContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1755;
	            this.createTableHead();
	            this.state = 1757;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,78,this._ctx);
	            if(la_===1) {
	                this.state = 1756;
	                this.ifNotExists();

	            }
	            this.state = 1759;
	            this.tableName();
	            this.state = 1761;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,79,this._ctx);
	            if(la_===1) {
	                this.state = 1760;
	                localctx._createDefinitions = this.createDefinitions();

	            }

	                     // createDefinitions -> createDefinitions? Error-Tolerant
	                     this.checkContextExist(localctx._createDefinitions, 'Please provide create table definition');

	                   
	            this.state = 1764;
	            this.createTableCreateOption();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createTablespaceInnodb() {
	    let localctx = new CreateTablespaceInnodbContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, MySqlParser.RULE_createTablespaceInnodb);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1768;
	        this.match(MySqlParser.CREATE);
	        this.state = 1769;
	        this.match(MySqlParser.TABLESPACE);
	        this.state = 1770;
	        this.uid();
	        this.state = 1771;
	        this.match(MySqlParser.ADD);
	        this.state = 1772;
	        this.match(MySqlParser.DATAFILE);
	        this.state = 1773;
	        localctx.datafile = this.match(MySqlParser.STRING_LITERAL);
	        this.state = 1777;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,81,this._ctx);
	        if(la_===1) {
	            this.state = 1774;
	            this.match(MySqlParser.FILE_BLOCK_SIZE);
	            this.state = 1775;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 1776;
	            localctx.fileBlockSize = this.fileSizeLiteral();

	        }
	        this.state = 1784;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,83,this._ctx);
	        if(la_===1) {
	            this.state = 1779;
	            this.match(MySqlParser.ENGINE);
	            this.state = 1781;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 1780;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1783;
	            this.engineName();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createTablespaceNdb() {
	    let localctx = new CreateTablespaceNdbContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, MySqlParser.RULE_createTablespaceNdb);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1786;
	        this.match(MySqlParser.CREATE);
	        this.state = 1787;
	        this.match(MySqlParser.TABLESPACE);
	        this.state = 1788;
	        this.uid();
	        this.state = 1789;
	        this.match(MySqlParser.ADD);
	        this.state = 1790;
	        this.match(MySqlParser.DATAFILE);
	        this.state = 1791;
	        localctx.datafile = this.match(MySqlParser.STRING_LITERAL);
	        this.state = 1792;
	        this.match(MySqlParser.USE);
	        this.state = 1793;
	        this.match(MySqlParser.LOGFILE);
	        this.state = 1794;
	        this.match(MySqlParser.GROUP);
	        this.state = 1795;
	        this.uid();
	        this.state = 1801;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.EXTENT_SIZE) {
	            this.state = 1796;
	            this.match(MySqlParser.EXTENT_SIZE);
	            this.state = 1798;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 1797;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1800;
	            localctx.extentSize = this.fileSizeLiteral();
	        }

	        this.state = 1808;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.INITIAL_SIZE) {
	            this.state = 1803;
	            this.match(MySqlParser.INITIAL_SIZE);
	            this.state = 1805;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 1804;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1807;
	            localctx.initialSize = this.fileSizeLiteral();
	        }

	        this.state = 1815;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.AUTOEXTEND_SIZE) {
	            this.state = 1810;
	            this.match(MySqlParser.AUTOEXTEND_SIZE);
	            this.state = 1812;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 1811;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1814;
	            localctx.autoextendSize = this.fileSizeLiteral();
	        }

	        this.state = 1822;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.MAX_SIZE) {
	            this.state = 1817;
	            this.match(MySqlParser.MAX_SIZE);
	            this.state = 1819;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 1818;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1821;
	            localctx.maxSize = this.fileSizeLiteral();
	        }

	        this.state = 1829;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.NODEGROUP) {
	            this.state = 1824;
	            this.match(MySqlParser.NODEGROUP);
	            this.state = 1826;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,92,this._ctx);
	            if(la_===1) {
	                this.state = 1825;
	                this.match(MySqlParser.EQUAL_SYMBOL);

	            }
	            this.state = 1828;
	            this.uid();
	        }

	        this.state = 1832;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.WAIT) {
	            this.state = 1831;
	            this.match(MySqlParser.WAIT);
	        }

	        this.state = 1839;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.COMMENT) {
	            this.state = 1834;
	            this.match(MySqlParser.COMMENT);
	            this.state = 1836;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 1835;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1838;
	            localctx.comment = this.match(MySqlParser.STRING_LITERAL);
	        }

	        this.state = 1841;
	        this.match(MySqlParser.ENGINE);
	        this.state = 1843;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.EQUAL_SYMBOL) {
	            this.state = 1842;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	        }

	        this.state = 1845;
	        this.engineName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createTrigger() {
	    let localctx = new CreateTriggerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, MySqlParser.RULE_createTrigger);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1847;
	        this.match(MySqlParser.CREATE);
	        this.state = 1849;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.DEFINER) {
	            this.state = 1848;
	            this.ownerStatement();
	        }

	        this.state = 1851;
	        this.match(MySqlParser.TRIGGER);
	        this.state = 1852;
	        localctx.thisTrigger = this.fullId();
	        this.state = 1853;
	        localctx.triggerTime = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(_la===MySqlParser.BEFORE || _la===MySqlParser.AFTER)) {
	            localctx.triggerTime = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1854;
	        localctx.triggerEvent = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(_la===MySqlParser.DELETE || _la===MySqlParser.INSERT || _la===MySqlParser.UPDATE)) {
	            localctx.triggerEvent = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1855;
	        this.match(MySqlParser.ON);
	        this.state = 1856;
	        this.tableName();
	        this.state = 1857;
	        this.match(MySqlParser.FOR);
	        this.state = 1858;
	        this.match(MySqlParser.EACH);
	        this.state = 1859;
	        this.match(MySqlParser.ROW);
	        this.state = 1862;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,99,this._ctx);
	        if(la_===1) {
	            this.state = 1860;
	            localctx.triggerPlace = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.FOLLOWS || _la===MySqlParser.PRECEDES)) {
	                localctx.triggerPlace = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1861;
	            localctx.otherTrigger = this.fullId();

	        }
	        this.state = 1864;
	        this.routineBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createView() {
	    let localctx = new CreateViewContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, MySqlParser.RULE_createView);
	    try {
	        this.state = 1870;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,100,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1866;
	            if (!( this.isDialect('mysql'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('mysql')");
	            }
	            this.state = 1867;
	            this.createViewMysql();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1868;
	            if (!( this.isDialect('inceptor'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('inceptor')");
	            }
	            this.state = 1869;
	            this.createViewInceptor();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createViewMysql() {
	    let localctx = new CreateViewMysqlContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, MySqlParser.RULE_createViewMysql);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1872;
	        this.match(MySqlParser.CREATE);
	        this.state = 1875;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.OR) {
	            this.state = 1873;
	            this.match(MySqlParser.OR);
	            this.state = 1874;
	            this.match(MySqlParser.REPLACE);
	        }

	        this.state = 1880;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.ALGORITHM) {
	            this.state = 1877;
	            this.match(MySqlParser.ALGORITHM);
	            this.state = 1878;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 1879;
	            localctx.algType = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.MERGE || _la===MySqlParser.TEMPTABLE || _la===MySqlParser.UNDEFINED)) {
	                localctx.algType = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 1883;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.DEFINER) {
	            this.state = 1882;
	            this.ownerStatement();
	        }

	        this.state = 1888;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.SQL) {
	            this.state = 1885;
	            this.match(MySqlParser.SQL);
	            this.state = 1886;
	            this.match(MySqlParser.SECURITY);
	            this.state = 1887;
	            localctx.secContext = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.DEFINER || _la===MySqlParser.INVOKER)) {
	                localctx.secContext = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 1890;
	        this.match(MySqlParser.VIEW);
	        this.state = 1891;
	        this.viewName();
	        this.state = 1896;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,105,this._ctx);
	        if(la_===1) {
	            this.state = 1892;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 1893;
	            this.uidList();
	            this.state = 1894;
	            this.match(MySqlParser.RR_BRACKET);

	        }
	        this.state = 1899;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,106,this._ctx);
	        if(la_===1) {
	            this.state = 1898;
	            localctx._asSelectStatement = this.asSelectStatement();

	        }

	                // asSelectStatement -> asSelectStatement? Error-Tolerant
	                this.checkContextExist(localctx._asSelectStatement, 'Please provide as select statement');
	              
	        this.state = 1908;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,108,this._ctx);
	        if(la_===1) {
	            this.state = 1902;
	            this.match(MySqlParser.WITH);
	            this.state = 1904;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.CASCADED || _la===MySqlParser.LOCAL) {
	                this.state = 1903;
	                localctx.checkOption = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===MySqlParser.CASCADED || _la===MySqlParser.LOCAL)) {
	                    localctx.checkOption = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 1906;
	            this.match(MySqlParser.CHECK);
	            this.state = 1907;
	            this.match(MySqlParser.OPTION);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createViewInceptor() {
	    let localctx = new CreateViewInceptorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, MySqlParser.RULE_createViewInceptor);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1910;
	        this.match(MySqlParser.CREATE);
	        this.state = 1913;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.OR) {
	            this.state = 1911;
	            this.match(MySqlParser.OR);
	            this.state = 1912;
	            this.match(MySqlParser.REPLACE);
	        }

	        this.state = 1915;
	        this.match(MySqlParser.VIEW);
	        this.state = 1917;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,110,this._ctx);
	        if(la_===1) {
	            this.state = 1916;
	            this.ifNotExists();

	        }
	        this.state = 1919;
	        this.viewName();
	        this.state = 1924;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,111,this._ctx);
	        if(la_===1) {
	            this.state = 1920;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 1921;
	            this.uidCommentList();
	            this.state = 1922;
	            this.match(MySqlParser.RR_BRACKET);

	        }
	        this.state = 1927;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,112,this._ctx);
	        if(la_===1) {
	            this.state = 1926;
	            this.commentClause();

	        }
	        this.state = 1935;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,113,this._ctx);
	        if(la_===1) {
	            this.state = 1929;
	            this.match(MySqlParser.PARTITIONED);
	            this.state = 1930;
	            this.match(MySqlParser.ON);
	            this.state = 1931;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 1932;
	            this.uidList();
	            this.state = 1933;
	            this.match(MySqlParser.RR_BRACKET);

	        }
	        this.state = 1942;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,114,this._ctx);
	        if(la_===1) {
	            this.state = 1937;
	            this.match(MySqlParser.TBLPROPERTIES);
	            this.state = 1938;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 1939;
	            this.keyValueProperties();
	            this.state = 1940;
	            this.match(MySqlParser.RR_BRACKET);

	        }
	        this.state = 1945;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,115,this._ctx);
	        if(la_===1) {
	            this.state = 1944;
	            localctx._asSelectStatement = this.asSelectStatement();

	        }

	                // asSelectStatement -> asSelectStatement? Error-Tolerant
	                this.checkContextExist(localctx._asSelectStatement, 'Please provide as select statement');
	              
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createDatabaseOption() {
	    let localctx = new CreateDatabaseOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, MySqlParser.RULE_createDatabaseOption);
	    try {
	        this.state = 1958;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,117,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1949;
	            if (!( this.isDialect('mysql'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('mysql')");
	            }
	            this.state = 1953;
	            this._errHandler.sync(this);
	            let _alt = this._interp.adaptivePredict(this._input,116,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1950;
	                    this.mysqlCreateDatabaseOption(); 
	                }
	                this.state = 1955;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,116,this._ctx);
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1956;
	            if (!( this.isDialect('inceptor'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('inceptor')");
	            }
	            this.state = 1957;
	            this.inceptorCreateDatabaseOption();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mysqlCreateDatabaseOption() {
	    let localctx = new MysqlCreateDatabaseOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, MySqlParser.RULE_mysqlCreateDatabaseOption);
	    var _la = 0; // Token type
	    try {
	        this.state = 1980;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,123,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1961;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.DEFAULT) {
	                this.state = 1960;
	                this.match(MySqlParser.DEFAULT);
	            }

	            this.state = 1966;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case MySqlParser.CHARACTER:
	                this.state = 1963;
	                this.match(MySqlParser.CHARACTER);
	                this.state = 1964;
	                this.match(MySqlParser.SET);
	                break;
	            case MySqlParser.CHARSET:
	                this.state = 1965;
	                this.match(MySqlParser.CHARSET);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 1969;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 1968;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1971;
	            this.charsetName();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1973;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.DEFAULT) {
	                this.state = 1972;
	                this.match(MySqlParser.DEFAULT);
	            }

	            this.state = 1975;
	            this.match(MySqlParser.COLLATE);
	            this.state = 1977;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,122,this._ctx);
	            if(la_===1) {
	                this.state = 1976;
	                this.match(MySqlParser.EQUAL_SYMBOL);

	            }
	            this.state = 1979;
	            this.collationName();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inceptorCreateDatabaseOption() {
	    let localctx = new InceptorCreateDatabaseOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, MySqlParser.RULE_inceptorCreateDatabaseOption);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1983;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,124,this._ctx);
	        if(la_===1) {
	            this.state = 1982;
	            this.commentClause();

	        }
	        this.state = 1987;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,125,this._ctx);
	        if(la_===1) {
	            this.state = 1985;
	            this.match(MySqlParser.LOCATION);
	            this.state = 1986;
	            this.stringLiteral();

	        }
	        this.state = 1995;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,126,this._ctx);
	        if(la_===1) {
	            this.state = 1989;
	            this.match(MySqlParser.WITH);
	            this.state = 1990;
	            this.match(MySqlParser.DBPROPERTIES);
	            this.state = 1991;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 1992;
	            this.keyValueProperties();
	            this.state = 1993;
	            this.match(MySqlParser.RR_BRACKET);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyOrValueProperties() {
	    let localctx = new KeyOrValuePropertiesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, MySqlParser.RULE_keyOrValueProperties);
	    try {
	        this.state = 1999;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,127,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1997;
	            this.keyValueProperties();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1998;
	            this.keyProperties();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyProperties() {
	    let localctx = new KeyPropertiesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, MySqlParser.RULE_keyProperties);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2001;
	        this.stringLiteral();
	        this.state = 2006;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,128,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2002;
	                this.match(MySqlParser.COMMA);
	                this.state = 2003;
	                this.stringLiteral(); 
	            }
	            this.state = 2008;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,128,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyValueProperties() {
	    let localctx = new KeyValuePropertiesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, MySqlParser.RULE_keyValueProperties);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2009;
	        this.keyValueProperty();
	        this.state = 2014;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,129,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2010;
	                this.match(MySqlParser.COMMA);
	                this.state = 2011;
	                this.keyValueProperty(); 
	            }
	            this.state = 2016;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,129,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyValueProperty() {
	    let localctx = new KeyValuePropertyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, MySqlParser.RULE_keyValueProperty);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2017;
	        localctx.key = this.stringLiteral();
	        this.state = 2018;
	        this.match(MySqlParser.EQUAL_SYMBOL);
	        this.state = 2019;
	        localctx.value = this.stringLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	idValueProperties() {
	    let localctx = new IdValuePropertiesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, MySqlParser.RULE_idValueProperties);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2021;
	        this.idValueProperty();
	        this.state = 2026;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MySqlParser.COMMA) {
	            this.state = 2022;
	            this.match(MySqlParser.COMMA);
	            this.state = 2023;
	            this.idValueProperty();
	            this.state = 2028;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	idValueProperty() {
	    let localctx = new IdValuePropertyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, MySqlParser.RULE_idValueProperty);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2029;
	        localctx.key = this.uid();
	        this.state = 2030;
	        this.match(MySqlParser.EQUAL_SYMBOL);
	        this.state = 2031;
	        localctx.value = this.constant();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orReplaceDialectAction() {
	    let localctx = new OrReplaceDialectActionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, MySqlParser.RULE_orReplaceDialectAction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2033;
	        if (!( this.isDialect('inceptor'))) {
	            throw new antlr4.error.FailedPredicateException(this, "this.isDialect('inceptor')");
	        }
	        this.state = 2034;
	        this.match(MySqlParser.OR);
	        this.state = 2035;
	        this.match(MySqlParser.REPLACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ownerStatement() {
	    let localctx = new OwnerStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, MySqlParser.RULE_ownerStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2037;
	        this.match(MySqlParser.DEFINER);
	        this.state = 2038;
	        this.match(MySqlParser.EQUAL_SYMBOL);
	        this.state = 2045;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.STRING_LITERAL:
	        case MySqlParser.ID:
	        case MySqlParser.STRING_USER_NAME:
	            this.state = 2039;
	            this.userName();
	            break;
	        case MySqlParser.CURRENT_USER:
	            this.state = 2040;
	            this.match(MySqlParser.CURRENT_USER);
	            this.state = 2043;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.LR_BRACKET) {
	                this.state = 2041;
	                this.match(MySqlParser.LR_BRACKET);
	                this.state = 2042;
	                this.match(MySqlParser.RR_BRACKET);
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	scheduleExpression() {
	    let localctx = new ScheduleExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, MySqlParser.RULE_scheduleExpression);
	    try {
	        this.state = 2081;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.AT:
	            localctx = new PreciseScheduleContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2047;
	            this.match(MySqlParser.AT);
	            this.state = 2048;
	            this.timestampValue();
	            this.state = 2052;
	            this._errHandler.sync(this);
	            let _alt = this._interp.adaptivePredict(this._input,133,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 2049;
	                    this.intervalExpr(); 
	                }
	                this.state = 2054;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,133,this._ctx);
	            }

	            break;
	        case MySqlParser.EVERY:
	            localctx = new IntervalScheduleContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2055;
	            this.match(MySqlParser.EVERY);
	            this.state = 2058;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,134,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 2056;
	                this.decimalLiteral();
	                break;

	            case 2:
	                this.state = 2057;
	                this.expression(0);
	                break;

	            }
	            this.state = 2060;
	            this.intervalType();
	            this.state = 2069;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,136,this._ctx);
	            if(la_===1) {
	                this.state = 2061;
	                this.match(MySqlParser.STARTS);
	                this.state = 2062;
	                localctx.start_ = this.timestampValue();
	                this.state = 2066;
	                this._errHandler.sync(this);
	                let _alt = this._interp.adaptivePredict(this._input,135,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 2063;
	                        localctx._intervalExpr = this.intervalExpr();
	                        localctx.startIntervals.push(localctx._intervalExpr); 
	                    }
	                    this.state = 2068;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,135,this._ctx);
	                }


	            }
	            this.state = 2079;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,138,this._ctx);
	            if(la_===1) {
	                this.state = 2071;
	                this.match(MySqlParser.ENDS);
	                this.state = 2072;
	                localctx.end = this.timestampValue();
	                this.state = 2076;
	                this._errHandler.sync(this);
	                let _alt = this._interp.adaptivePredict(this._input,137,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 2073;
	                        localctx._intervalExpr = this.intervalExpr();
	                        localctx.endIntervals.push(localctx._intervalExpr); 
	                    }
	                    this.state = 2078;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,137,this._ctx);
	                }


	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	timestampValue() {
	    let localctx = new TimestampValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, MySqlParser.RULE_timestampValue);
	    try {
	        this.state = 2087;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,140,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2083;
	            this.match(MySqlParser.CURRENT_TIMESTAMP);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2084;
	            this.stringLiteral();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2085;
	            this.decimalLiteral();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2086;
	            this.expression(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	intervalExpr() {
	    let localctx = new IntervalExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, MySqlParser.RULE_intervalExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2089;
	        this.match(MySqlParser.PLUS);
	        this.state = 2090;
	        this.match(MySqlParser.INTERVAL);
	        this.state = 2093;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,141,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 2091;
	            this.decimalLiteral();
	            break;

	        case 2:
	            this.state = 2092;
	            this.expression(0);
	            break;

	        }
	        this.state = 2095;
	        this.intervalType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	intervalType() {
	    let localctx = new IntervalTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, MySqlParser.RULE_intervalType);
	    try {
	        this.state = 2110;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.QUARTER:
	        case MySqlParser.MONTH:
	        case MySqlParser.DAY:
	        case MySqlParser.HOUR:
	        case MySqlParser.MINUTE:
	        case MySqlParser.WEEK:
	        case MySqlParser.SECOND:
	        case MySqlParser.MICROSECOND:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2097;
	            this.intervalTypeBase();
	            break;
	        case MySqlParser.YEAR:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2098;
	            this.match(MySqlParser.YEAR);
	            break;
	        case MySqlParser.YEAR_MONTH:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2099;
	            this.match(MySqlParser.YEAR_MONTH);
	            break;
	        case MySqlParser.DAY_HOUR:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2100;
	            this.match(MySqlParser.DAY_HOUR);
	            break;
	        case MySqlParser.DAY_MINUTE:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2101;
	            this.match(MySqlParser.DAY_MINUTE);
	            break;
	        case MySqlParser.DAY_SECOND:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2102;
	            this.match(MySqlParser.DAY_SECOND);
	            break;
	        case MySqlParser.HOUR_MINUTE:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2103;
	            this.match(MySqlParser.HOUR_MINUTE);
	            break;
	        case MySqlParser.HOUR_SECOND:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 2104;
	            this.match(MySqlParser.HOUR_SECOND);
	            break;
	        case MySqlParser.MINUTE_SECOND:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 2105;
	            this.match(MySqlParser.MINUTE_SECOND);
	            break;
	        case MySqlParser.SECOND_MICROSECOND:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 2106;
	            this.match(MySqlParser.SECOND_MICROSECOND);
	            break;
	        case MySqlParser.MINUTE_MICROSECOND:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 2107;
	            this.match(MySqlParser.MINUTE_MICROSECOND);
	            break;
	        case MySqlParser.HOUR_MICROSECOND:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 2108;
	            this.match(MySqlParser.HOUR_MICROSECOND);
	            break;
	        case MySqlParser.DAY_MICROSECOND:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 2109;
	            this.match(MySqlParser.DAY_MICROSECOND);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enableType() {
	    let localctx = new EnableTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, MySqlParser.RULE_enableType);
	    try {
	        this.state = 2117;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,143,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2112;
	            this.match(MySqlParser.ENABLE);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2113;
	            this.match(MySqlParser.DISABLE);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2114;
	            this.match(MySqlParser.DISABLE);
	            this.state = 2115;
	            this.match(MySqlParser.ON);
	            this.state = 2116;
	            this.match(MySqlParser.SLAVE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	indexType() {
	    let localctx = new IndexTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, MySqlParser.RULE_indexType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2119;
	        this.match(MySqlParser.USING);
	        this.state = 2120;
	        _la = this._input.LA(1);
	        if(!(_la===MySqlParser.BTREE || _la===MySqlParser.HASH)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	indexOption() {
	    let localctx = new IndexOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, MySqlParser.RULE_indexOption);
	    var _la = 0; // Token type
	    try {
	        this.state = 2133;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.KEY_BLOCK_SIZE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2122;
	            this.match(MySqlParser.KEY_BLOCK_SIZE);
	            this.state = 2124;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 2123;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 2126;
	            this.fileSizeLiteral();
	            break;
	        case MySqlParser.USING:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2127;
	            this.indexType();
	            break;
	        case MySqlParser.WITH:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2128;
	            this.match(MySqlParser.WITH);
	            this.state = 2129;
	            this.match(MySqlParser.PARSER);
	            this.state = 2130;
	            this.uid();
	            break;
	        case MySqlParser.COMMENT:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2131;
	            this.match(MySqlParser.COMMENT);
	            this.state = 2132;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureParameter() {
	    let localctx = new ProcedureParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, MySqlParser.RULE_procedureParameter);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2136;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,146,this._ctx);
	        if(la_===1) {
	            this.state = 2135;
	            localctx.direction = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.IN || _la===MySqlParser.INOUT || _la===MySqlParser.OUT)) {
	                localctx.direction = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }

	        }
	        this.state = 2138;
	        this.uid();
	        this.state = 2139;
	        this.dataType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionParameter() {
	    let localctx = new FunctionParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, MySqlParser.RULE_functionParameter);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2141;
	        this.uid();
	        this.state = 2142;
	        this.dataType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	permanentFunctionResource() {
	    let localctx = new PermanentFunctionResourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, MySqlParser.RULE_permanentFunctionResource);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2144;
	        _la = this._input.LA(1);
	        if(!(_la===MySqlParser.JAR || _la===MySqlParser.FILE || _la===MySqlParser.ARCHIVE)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 2147;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.DIVIDE:
	            this.state = 2145;
	            this.filePath();
	            break;
	        case MySqlParser.START_NATIONAL_STRING_LITERAL:
	        case MySqlParser.STRING_LITERAL:
	        case MySqlParser.STRING_CHARSET_NAME:
	            this.state = 2146;
	            this.stringLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	routineOption() {
	    let localctx = new RoutineOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, MySqlParser.RULE_routineOption);
	    var _la = 0; // Token type
	    try {
	        this.state = 2172;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.COMMENT:
	            localctx = new RoutineCommentContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2149;
	            this.match(MySqlParser.COMMENT);
	            this.state = 2150;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case MySqlParser.LANGUAGE:
	            localctx = new RoutineLanguageContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2151;
	            this.match(MySqlParser.LANGUAGE);
	            this.state = 2152;
	            this.match(MySqlParser.SQL);
	            break;
	        case MySqlParser.DETERMINISTIC:
	        case MySqlParser.NOT:
	            localctx = new RoutineBehaviorContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2154;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.NOT) {
	                this.state = 2153;
	                this.match(MySqlParser.NOT);
	            }

	            this.state = 2156;
	            this.match(MySqlParser.DETERMINISTIC);
	            break;
	        case MySqlParser.MODIFIES:
	        case MySqlParser.READS:
	        case MySqlParser.CONTAINS:
	        case MySqlParser.NO:
	            localctx = new RoutineDataContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2167;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case MySqlParser.CONTAINS:
	                this.state = 2157;
	                this.match(MySqlParser.CONTAINS);
	                this.state = 2158;
	                this.match(MySqlParser.SQL);
	                break;
	            case MySqlParser.NO:
	                this.state = 2159;
	                this.match(MySqlParser.NO);
	                this.state = 2160;
	                this.match(MySqlParser.SQL);
	                break;
	            case MySqlParser.READS:
	                this.state = 2161;
	                this.match(MySqlParser.READS);
	                this.state = 2162;
	                this.match(MySqlParser.SQL);
	                this.state = 2163;
	                this.match(MySqlParser.DATA);
	                break;
	            case MySqlParser.MODIFIES:
	                this.state = 2164;
	                this.match(MySqlParser.MODIFIES);
	                this.state = 2165;
	                this.match(MySqlParser.SQL);
	                this.state = 2166;
	                this.match(MySqlParser.DATA);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        case MySqlParser.SQL:
	            localctx = new RoutineSecurityContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2169;
	            this.match(MySqlParser.SQL);
	            this.state = 2170;
	            this.match(MySqlParser.SECURITY);
	            this.state = 2171;
	            localctx.context = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.DEFINER || _la===MySqlParser.INVOKER)) {
	                localctx.context = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	serverOption() {
	    let localctx = new ServerOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, MySqlParser.RULE_serverOption);
	    try {
	        this.state = 2188;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.HOST:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2174;
	            this.match(MySqlParser.HOST);
	            this.state = 2175;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case MySqlParser.DATABASE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2176;
	            this.match(MySqlParser.DATABASE);
	            this.state = 2177;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case MySqlParser.USER:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2178;
	            this.match(MySqlParser.USER);
	            this.state = 2179;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case MySqlParser.PASSWORD:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2180;
	            this.match(MySqlParser.PASSWORD);
	            this.state = 2181;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case MySqlParser.SOCKET:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2182;
	            this.match(MySqlParser.SOCKET);
	            this.state = 2183;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case MySqlParser.OWNER:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2184;
	            this.match(MySqlParser.OWNER);
	            this.state = 2185;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case MySqlParser.PORT:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2186;
	            this.match(MySqlParser.PORT);
	            this.state = 2187;
	            this.decimalLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createTableHead() {
	    let localctx = new CreateTableHeadContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, MySqlParser.RULE_createTableHead);
	    var _la = 0; // Token type
	    try {
	        this.state = 2205;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,155,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2190;
	            if (!( this.isDialect('mysql'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('mysql')");
	            }
	            this.state = 2191;
	            this.match(MySqlParser.CREATE);
	            this.state = 2193;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.TEMPORARY) {
	                this.state = 2192;
	                this.match(MySqlParser.TEMPORARY);
	            }

	            this.state = 2195;
	            this.match(MySqlParser.TABLE);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2196;
	            if (!( this.isDialect('inceptor'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('inceptor')");
	            }
	            this.state = 2197;
	            this.match(MySqlParser.CREATE);
	            this.state = 2199;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.TEMPORARY) {
	                this.state = 2198;
	                this.match(MySqlParser.TEMPORARY);
	            }

	            this.state = 2202;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EXTERNAL) {
	                this.state = 2201;
	                this.match(MySqlParser.EXTERNAL);
	            }

	            this.state = 2204;
	            this.match(MySqlParser.TABLE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createTableAsKeyViolate() {
	    let localctx = new CreateTableAsKeyViolateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, MySqlParser.RULE_createTableAsKeyViolate);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2207;
	        if (!( this.isDialect('mysql'))) {
	            throw new antlr4.error.FailedPredicateException(this, "this.isDialect('mysql')");
	        }
	        this.state = 2208;
	        localctx.keyViolate = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(_la===MySqlParser.IGNORE || _la===MySqlParser.REPLACE)) {
	            localctx.keyViolate = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createTableQuery() {
	    let localctx = new CreateTableQueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, MySqlParser.RULE_createTableQuery);
	    var _la = 0; // Token type
	    try {
	        this.state = 2218;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,157,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2210;
	            if (!( this.isDialect('mysql'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('mysql')");
	            }
	            this.state = 2212;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.AS) {
	                this.state = 2211;
	                this.match(MySqlParser.AS);
	            }

	            this.state = 2214;
	            this.selectStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2215;
	            if (!( this.isDialect('inceptor'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('inceptor')");
	            }
	            this.state = 2216;
	            this.match(MySqlParser.AS);
	            this.state = 2217;
	            this.selectStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createTableLikeOption() {
	    let localctx = new CreateTableLikeOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, MySqlParser.RULE_createTableLikeOption);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2220;
	        if (!( this.isDialect('inceptor'))) {
	            throw new antlr4.error.FailedPredicateException(this, "this.isDialect('inceptor')");
	        }
	        this.state = 2222;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,158,this._ctx);
	        if(la_===1) {
	            this.state = 2221;
	            this.locationDefinition();

	        }
	        this.state = 2225;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,159,this._ctx);
	        if(la_===1) {
	            this.state = 2224;
	            this.tblPropertiesDefinition();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createTableCreateOption() {
	    let localctx = new CreateTableCreateOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, MySqlParser.RULE_createTableCreateOption);
	    var _la = 0; // Token type
	    try {
	        this.state = 2275;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,174,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2227;
	            if (!( this.isDialect('mysql'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('mysql')");
	            }
	            this.state = 2238;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,162,this._ctx);
	            if(la_===1) {
	                this.state = 2228;
	                this.tableOption();
	                this.state = 2235;
	                this._errHandler.sync(this);
	                let _alt = this._interp.adaptivePredict(this._input,161,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 2230;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                        if(_la===MySqlParser.COMMA) {
	                            this.state = 2229;
	                            this.match(MySqlParser.COMMA);
	                        }

	                        this.state = 2232;
	                        this.tableOption(); 
	                    }
	                    this.state = 2237;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,161,this._ctx);
	                }


	            }
	            this.state = 2241;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,163,this._ctx);
	            if(la_===1) {
	                this.state = 2240;
	                this.partitionDefinitions();

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2243;
	            if (!( this.isDialect('inceptor'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('inceptor')");
	            }
	            this.state = 2245;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,164,this._ctx);
	            if(la_===1) {
	                this.state = 2244;
	                this.commentClause();

	            }
	            this.state = 2248;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,165,this._ctx);
	            if(la_===1) {
	                this.state = 2247;
	                this.tablePartitionedBy();

	            }
	            this.state = 2251;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,166,this._ctx);
	            if(la_===1) {
	                this.state = 2250;
	                this.tableBuckets();

	            }
	            this.state = 2254;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,167,this._ctx);
	            if(la_===1) {
	                this.state = 2253;
	                this.tableSkewed();

	            }
	            this.state = 2257;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,168,this._ctx);
	            if(la_===1) {
	                this.state = 2256;
	                this.rowFormat();

	            }
	            this.state = 2261;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,169,this._ctx);
	            if(la_===1) {
	                this.state = 2259;
	                this.fileStore();

	            } else if(la_===2) {
	                this.state = 2260;
	                this.fileStoreBy();

	            }
	            this.state = 2264;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,170,this._ctx);
	            if(la_===1) {
	                this.state = 2263;
	                this.esProps();

	            }
	            this.state = 2267;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,171,this._ctx);
	            if(la_===1) {
	                this.state = 2266;
	                this.locationDefinition();

	            }
	            this.state = 2270;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,172,this._ctx);
	            if(la_===1) {
	                this.state = 2269;
	                this.tblPropertiesDefinition();

	            }
	            this.state = 2273;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,173,this._ctx);
	            if(la_===1) {
	                this.state = 2272;
	                this.errorLogTableDefinition();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createDefinitions() {
	    let localctx = new CreateDefinitionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, MySqlParser.RULE_createDefinitions);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2277;
	        this.match(MySqlParser.LR_BRACKET);
	        this.state = 2278;
	        this.createDefinition();
	        this.state = 2283;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MySqlParser.COMMA) {
	            this.state = 2279;
	            this.match(MySqlParser.COMMA);
	            this.state = 2280;
	            this.createDefinition();
	            this.state = 2285;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2286;
	        this.match(MySqlParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createDefinition() {
	    let localctx = new CreateDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, MySqlParser.RULE_createDefinition);
	    try {
	        this.state = 2292;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,176,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2288;
	            this.createColumnDeclaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2289;
	            this.tableConstraint();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2290;
	            if (!( this.isDialect('mysql'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('mysql')");
	            }
	            this.state = 2291;
	            this.indexColumnDefinition();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createColumnDeclaration() {
	    let localctx = new CreateColumnDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, MySqlParser.RULE_createColumnDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2294;
	        this.uid();
	        this.state = 2295;
	        this.columnDefinition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnDefinition() {
	    let localctx = new ColumnDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, MySqlParser.RULE_columnDefinition);
	    try {
	        this.state = 2316;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,180,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2297;
	            if (!( this.isDialect('mysql'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('mysql')");
	            }
	            this.state = 2298;
	            this.dataType();
	            this.state = 2302;
	            this._errHandler.sync(this);
	            let _alt = this._interp.adaptivePredict(this._input,177,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 2299;
	                    this.columnConstraintMysql(); 
	                }
	                this.state = 2304;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,177,this._ctx);
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2305;
	            if (!( this.isDialect('inceptor'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('inceptor')");
	            }
	            this.state = 2306;
	            this.dataType();
	            this.state = 2308;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,178,this._ctx);
	            if(la_===1) {
	                this.state = 2307;
	                this.columnAnalyzer();

	            }
	            this.state = 2313;
	            this._errHandler.sync(this);
	            let _alt = this._interp.adaptivePredict(this._input,179,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 2310;
	                    this.columnConstraintInceptor(); 
	                }
	                this.state = 2315;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,179,this._ctx);
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnConstraintMysql() {
	    let localctx = new ColumnConstraintMysqlContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, MySqlParser.RULE_columnConstraintMysql);
	    var _la = 0; // Token type
	    try {
	        this.state = 2358;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.NOT:
	        case MySqlParser.NULL_LITERAL:
	        case MySqlParser.NULL_SPEC_LITERAL:
	            localctx = new NullColumnConstraintContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2318;
	            this.nullNotnull();
	            break;
	        case MySqlParser.DEFAULT:
	            localctx = new DefaultColumnConstraintContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2319;
	            this.match(MySqlParser.DEFAULT);
	            this.state = 2320;
	            this.defaultValue();
	            break;
	        case MySqlParser.ON:
	        case MySqlParser.AUTO_INCREMENT:
	            localctx = new AutoIncrementColumnConstraintContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2325;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case MySqlParser.AUTO_INCREMENT:
	                this.state = 2321;
	                this.match(MySqlParser.AUTO_INCREMENT);
	                break;
	            case MySqlParser.ON:
	                this.state = 2322;
	                this.match(MySqlParser.ON);
	                this.state = 2323;
	                this.match(MySqlParser.UPDATE);
	                this.state = 2324;
	                this.currentTimestamp();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        case MySqlParser.KEY:
	        case MySqlParser.PRIMARY:
	            localctx = new PrimaryKeyColumnConstraintContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2328;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.PRIMARY) {
	                this.state = 2327;
	                this.match(MySqlParser.PRIMARY);
	            }

	            this.state = 2330;
	            this.match(MySqlParser.KEY);
	            break;
	        case MySqlParser.UNIQUE:
	            localctx = new UniqueKeyColumnConstraintContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2331;
	            this.match(MySqlParser.UNIQUE);
	            this.state = 2333;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,183,this._ctx);
	            if(la_===1) {
	                this.state = 2332;
	                this.match(MySqlParser.KEY);

	            }
	            break;
	        case MySqlParser.COMMENT:
	            localctx = new CommentColumnConstraintContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2335;
	            this.match(MySqlParser.COMMENT);
	            this.state = 2336;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case MySqlParser.COLUMN_FORMAT:
	            localctx = new FormatColumnConstraintContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2337;
	            this.match(MySqlParser.COLUMN_FORMAT);
	            this.state = 2338;
	            localctx.colformat = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.DEFAULT || _la===MySqlParser.DYNAMIC || _la===MySqlParser.FIXED)) {
	                localctx.colformat = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case MySqlParser.STORAGE:
	            localctx = new StorageColumnConstraintContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 2339;
	            this.match(MySqlParser.STORAGE);
	            this.state = 2340;
	            localctx.storageval = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.DEFAULT || _la===MySqlParser.DISK || _la===MySqlParser.MEMORY)) {
	                localctx.storageval = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case MySqlParser.REFERENCES:
	            localctx = new ReferenceColumnConstraintContext(this, localctx);
	            this.enterOuterAlt(localctx, 9);
	            this.state = 2341;
	            this.referenceDefinition();
	            break;
	        case MySqlParser.COLLATE:
	            localctx = new CollateColumnConstraintContext(this, localctx);
	            this.enterOuterAlt(localctx, 10);
	            this.state = 2342;
	            this.match(MySqlParser.COLLATE);
	            this.state = 2343;
	            this.collationName();
	            break;
	        case MySqlParser.AS:
	        case MySqlParser.GENERATED:
	            localctx = new GeneratedColumnConstraintContext(this, localctx);
	            this.enterOuterAlt(localctx, 11);
	            this.state = 2346;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.GENERATED) {
	                this.state = 2344;
	                this.match(MySqlParser.GENERATED);
	                this.state = 2345;
	                this.match(MySqlParser.ALWAYS);
	            }

	            this.state = 2348;
	            this.match(MySqlParser.AS);
	            this.state = 2349;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 2350;
	            this.expression(0);
	            this.state = 2351;
	            this.match(MySqlParser.RR_BRACKET);
	            this.state = 2353;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,185,this._ctx);
	            if(la_===1) {
	                this.state = 2352;
	                _la = this._input.LA(1);
	                if(!(_la===MySqlParser.STORED || _la===MySqlParser.VIRTUAL)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }

	            }
	            break;
	        case MySqlParser.SERIAL:
	            localctx = new SerialDefaultColumnConstraintContext(this, localctx);
	            this.enterOuterAlt(localctx, 12);
	            this.state = 2355;
	            this.match(MySqlParser.SERIAL);
	            this.state = 2356;
	            this.match(MySqlParser.DEFAULT);
	            this.state = 2357;
	            this.match(MySqlParser.VALUE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnConstraintInceptor() {
	    let localctx = new ColumnConstraintInceptorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, MySqlParser.RULE_columnConstraintInceptor);
	    var _la = 0; // Token type
	    try {
	        this.state = 2388;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,190,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2360;
	            this.match(MySqlParser.NOT);
	            this.state = 2361;
	            this.match(MySqlParser.NULL_LITERAL);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2362;
	            this.match(MySqlParser.UNIQUE);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2365;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.CONSTRAINT) {
	                this.state = 2363;
	                this.match(MySqlParser.CONSTRAINT);
	                this.state = 2364;
	                this.uid();
	            }

	            this.state = 2367;
	            this.match(MySqlParser.PRIMARY);
	            this.state = 2368;
	            this.match(MySqlParser.KEY);
	            this.state = 2369;
	            this.constraintOpts();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2372;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.CONSTRAINT) {
	                this.state = 2370;
	                this.match(MySqlParser.CONSTRAINT);
	                this.state = 2371;
	                this.uid();
	            }

	            this.state = 2374;
	            this.match(MySqlParser.REFERENCES);
	            this.state = 2375;
	            this.tableName();
	            this.state = 2376;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 2377;
	            this.uid();
	            this.state = 2378;
	            this.match(MySqlParser.RR_BRACKET);
	            this.state = 2379;
	            this.constraintOpts();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2381;
	            this.match(MySqlParser.COMMENT);
	            this.state = 2382;
	            this.stringLiteral();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2383;
	            this.match(MySqlParser.DEFAULT);
	            this.state = 2386;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,189,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 2384;
	                this.constant();
	                break;

	            case 2:
	                this.state = 2385;
	                this.match(MySqlParser.NULL_LITERAL);
	                break;

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnAnalyzer() {
	    let localctx = new ColumnAnalyzerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, MySqlParser.RULE_columnAnalyzer);
	    try {
	        this.state = 2401;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.WITH:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2390;
	            this.match(MySqlParser.WITH);
	            this.state = 2391;
	            this.match(MySqlParser.ANALYZER);
	            this.state = 2392;
	            localctx.p = this.stringLiteral();
	            this.state = 2393;
	            localctx.analyzer = this.stringLiteral();
	            break;
	        case MySqlParser.APPEND:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2395;
	            this.match(MySqlParser.APPEND);
	            this.state = 2396;
	            this.match(MySqlParser.ANALYZER);
	            this.state = 2397;
	            localctx.p = this.stringLiteral();
	            this.state = 2398;
	            localctx.analyzer = this.stringLiteral();
	            break;
	        case MySqlParser.NO_INDEX:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2400;
	            this.match(MySqlParser.NO_INDEX);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constraintOpts() {
	    let localctx = new ConstraintOptsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, MySqlParser.RULE_constraintOpts);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2404;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,192,this._ctx);
	        if(la_===1) {
	            this.state = 2403;
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.DISABLE || _la===MySqlParser.ENABLE)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }

	        }
	        this.state = 2407;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,193,this._ctx);
	        if(la_===1) {
	            this.state = 2406;
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.NOVALIDATE || _la===MySqlParser.VALIDATE)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }

	        }
	        this.state = 2410;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,194,this._ctx);
	        if(la_===1) {
	            this.state = 2409;
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.NORELY || _la===MySqlParser.RELY)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	asSelectStatement() {
	    let localctx = new AsSelectStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, MySqlParser.RULE_asSelectStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2412;
	        this.match(MySqlParser.AS);
	        this.state = 2413;
	        this.selectStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	uidCommentList() {
	    let localctx = new UidCommentListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, MySqlParser.RULE_uidCommentList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2415;
	        this.uidComment();
	        this.state = 2420;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MySqlParser.COMMA) {
	            this.state = 2416;
	            this.match(MySqlParser.COMMA);
	            this.state = 2417;
	            this.uidComment();
	            this.state = 2422;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	uidComment() {
	    let localctx = new UidCommentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, MySqlParser.RULE_uidComment);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2423;
	        this.uid();
	        this.state = 2426;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.COMMENT) {
	            this.state = 2424;
	            this.match(MySqlParser.COMMENT);
	            this.state = 2425;
	            this.stringLiteral();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableBuckets() {
	    let localctx = new TableBucketsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, MySqlParser.RULE_tableBuckets);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2428;
	        this.match(MySqlParser.CLUSTERED);
	        this.state = 2429;
	        this.match(MySqlParser.BY);

	        this.state = 2430;
	        this.match(MySqlParser.LR_BRACKET);
	        this.state = 2431;
	        this.uidList();
	        this.state = 2432;
	        this.match(MySqlParser.RR_BRACKET);
	        this.state = 2440;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,197,this._ctx);
	        if(la_===1) {
	            this.state = 2434;
	            this.match(MySqlParser.SORTED);
	            this.state = 2435;
	            this.match(MySqlParser.BY);

	            this.state = 2436;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 2437;
	            this.uidOrderList();
	            this.state = 2438;
	            this.match(MySqlParser.RR_BRACKET);

	        }
	        this.state = 2443;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,198,this._ctx);
	        if(la_===1) {
	            this.state = 2442;
	            localctx._intoBuckets = this.intoBuckets();

	        }

	                this.checkContextExist(localctx._intoBuckets, 'Please provide INTO ... BUCKETS part');
	              
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	intoBuckets() {
	    let localctx = new IntoBucketsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, MySqlParser.RULE_intoBuckets);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2447;
	        this.match(MySqlParser.INTO);
	        this.state = 2448;
	        this.decimalLiteral();
	        this.state = 2449;
	        this.match(MySqlParser.BUCKETS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableSkewed() {
	    let localctx = new TableSkewedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, MySqlParser.RULE_tableSkewed);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2451;
	        this.match(MySqlParser.SKEWED);
	        this.state = 2452;
	        this.match(MySqlParser.BY);
	        this.state = 2453;
	        this.match(MySqlParser.LR_BRACKET);
	        this.state = 2454;
	        this.uidList();
	        this.state = 2455;
	        this.match(MySqlParser.RR_BRACKET);
	        this.state = 2456;
	        this.match(MySqlParser.ON);
	        this.state = 2457;
	        this.match(MySqlParser.LR_BRACKET);
	        this.state = 2472;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.FALSE:
	        case MySqlParser.NOT:
	        case MySqlParser.NULL_LITERAL:
	        case MySqlParser.TRUE:
	        case MySqlParser.MINUS:
	        case MySqlParser.ZERO_DECIMAL:
	        case MySqlParser.ONE_DECIMAL:
	        case MySqlParser.TWO_DECIMAL:
	        case MySqlParser.START_NATIONAL_STRING_LITERAL:
	        case MySqlParser.STRING_LITERAL:
	        case MySqlParser.DECIMAL_LITERAL:
	        case MySqlParser.HEXADECIMAL_LITERAL:
	        case MySqlParser.REAL_LITERAL:
	        case MySqlParser.NULL_SPEC_LITERAL:
	        case MySqlParser.BIT_STRING:
	        case MySqlParser.STRING_CHARSET_NAME:
	            this.state = 2458;
	            this.constants();
	            break;
	        case MySqlParser.LR_BRACKET:
	            this.state = 2459;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 2460;
	            this.constants();
	            this.state = 2461;
	            this.match(MySqlParser.RR_BRACKET);
	            this.state = 2462;
	            this.match(MySqlParser.COMMA);
	            this.state = 2469;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.LR_BRACKET) {
	                this.state = 2463;
	                this.match(MySqlParser.LR_BRACKET);
	                this.state = 2464;
	                this.constants();
	                this.state = 2465;
	                this.match(MySqlParser.RR_BRACKET);
	                this.state = 2471;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 2474;
	        this.match(MySqlParser.RR_BRACKET);
	        this.state = 2478;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,201,this._ctx);
	        if(la_===1) {
	            this.state = 2475;
	            this.match(MySqlParser.STORED);
	            this.state = 2476;
	            this.match(MySqlParser.AS);
	            this.state = 2477;
	            this.match(MySqlParser.DIRECTORIES);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setSerde() {
	    let localctx = new SetSerdeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, MySqlParser.RULE_setSerde);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2480;
	        this.match(MySqlParser.SET);
	        this.state = 2481;
	        this.match(MySqlParser.SERDE);
	        this.state = 2482;
	        this.stringLiteral();
	        this.state = 2489;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,202,this._ctx);
	        if(la_===1) {
	            this.state = 2483;
	            this.match(MySqlParser.WITH);
	            this.state = 2484;
	            this.match(MySqlParser.SERDEPROPERTIES);
	            this.state = 2485;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 2486;
	            this.keyOrValueProperties();
	            this.state = 2487;
	            this.match(MySqlParser.RR_BRACKET);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	esProps() {
	    let localctx = new EsPropsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, MySqlParser.RULE_esProps);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2491;
	        this.match(MySqlParser.WITH);
	        this.state = 2492;
	        this.match(MySqlParser.SHARD);
	        this.state = 2493;
	        this.match(MySqlParser.NUMBER);
	        this.state = 2494;
	        this.decimalLiteral();
	        this.state = 2495;
	        this.match(MySqlParser.REPLICATION);
	        this.state = 2496;
	        this.decimalLiteral();
	        this.state = 2499;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,203,this._ctx);
	        if(la_===1) {
	            this.state = 2497;
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.DISABLE || _la===MySqlParser.ENABLE)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 2498;
	            this.match(MySqlParser.ALL);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	holoProps() {
	    let localctx = new HoloPropsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, MySqlParser.RULE_holoProps);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2501;
	        this.match(MySqlParser.WITH);
	        this.state = 2502;
	        this.match(MySqlParser.TABLET);
	        this.state = 2503;
	        this.match(MySqlParser.NUMBER);
	        this.state = 2504;
	        this.decimalLiteral();
	        this.state = 2505;
	        this.match(MySqlParser.CAPACITY);
	        this.state = 2506;
	        this.match(MySqlParser.NUMBER);
	        this.state = 2507;
	        this.decimalLiteral();
	        this.state = 2508;
	        this.match(MySqlParser.REPLICATION);
	        this.state = 2509;
	        this.decimalLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	holoTableSize() {
	    let localctx = new HoloTableSizeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, MySqlParser.RULE_holoTableSize);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2511;
	        this.match(MySqlParser.WITH);
	        this.state = 2512;
	        this.match(MySqlParser.TABLESIZE);
	        this.state = 2515;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.ZERO_DECIMAL:
	        case MySqlParser.ONE_DECIMAL:
	        case MySqlParser.TWO_DECIMAL:
	        case MySqlParser.DECIMAL_LITERAL:
	            this.state = 2513;
	            this.decimalLiteral();
	            break;
	        case MySqlParser.START_NATIONAL_STRING_LITERAL:
	        case MySqlParser.STRING_LITERAL:
	        case MySqlParser.STRING_CHARSET_NAME:
	            this.state = 2514;
	            this.stringLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 2522;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,206,this._ctx);
	        if(la_===1) {
	            this.state = 2517;
	            this.match(MySqlParser.REPLICATION);
	            this.state = 2520;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case MySqlParser.ZERO_DECIMAL:
	            case MySqlParser.ONE_DECIMAL:
	            case MySqlParser.TWO_DECIMAL:
	            case MySqlParser.DECIMAL_LITERAL:
	                this.state = 2518;
	                this.decimalLiteral();
	                break;
	            case MySqlParser.START_NATIONAL_STRING_LITERAL:
	            case MySqlParser.STRING_LITERAL:
	            case MySqlParser.STRING_CHARSET_NAME:
	                this.state = 2519;
	                this.stringLiteral();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dialectWithNoData() {
	    let localctx = new DialectWithNoDataContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, MySqlParser.RULE_dialectWithNoData);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2524;
	        if (!( this.isDialect('inceptor'))) {
	            throw new antlr4.error.FailedPredicateException(this, "this.isDialect('inceptor')");
	        }
	        this.state = 2525;
	        this.match(MySqlParser.WITH);
	        this.state = 2526;
	        this.match(MySqlParser.NO);
	        this.state = 2527;
	        this.match(MySqlParser.DATA);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	commentClause() {
	    let localctx = new CommentClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, MySqlParser.RULE_commentClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2529;
	        this.match(MySqlParser.COMMENT);
	        this.state = 2530;
	        this.stringLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setLocationDefinition() {
	    let localctx = new SetLocationDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, MySqlParser.RULE_setLocationDefinition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2532;
	        this.match(MySqlParser.SET);
	        this.state = 2533;
	        this.match(MySqlParser.LOCATION);
	        this.state = 2534;
	        this.stringLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	locationDefinition() {
	    let localctx = new LocationDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, MySqlParser.RULE_locationDefinition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2536;
	        this.match(MySqlParser.LOCATION);
	        this.state = 2537;
	        this.stringLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tblPropertiesDefinition() {
	    let localctx = new TblPropertiesDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, MySqlParser.RULE_tblPropertiesDefinition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2539;
	        this.match(MySqlParser.TBLPROPERTIES);
	        this.state = 2540;
	        this.match(MySqlParser.LR_BRACKET);
	        this.state = 2541;
	        this.keyValueProperties();
	        this.state = 2542;
	        this.match(MySqlParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	errorLogTableDefinition() {
	    let localctx = new ErrorLogTableDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, MySqlParser.RULE_errorLogTableDefinition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2544;
	        if (!( this.isDialect('inceptor'))) {
	            throw new antlr4.error.FailedPredicateException(this, "this.isDialect('inceptor')");
	        }
	        this.state = 2545;
	        this.match(MySqlParser.LOG);
	        this.state = 2546;
	        this.match(MySqlParser.ERRORS);
	        this.state = 2547;
	        this.match(MySqlParser.INTO);
	        this.state = 2548;
	        this.tableName();
	        this.state = 2550;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,207,this._ctx);
	        if(la_===1) {
	            this.state = 2549;
	            this.match(MySqlParser.OVERWRITE);

	        }
	        this.state = 2553;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,208,this._ctx);
	        if(la_===1) {
	            this.state = 2552;
	            this.errorRejectSpec();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	errorRejectSpec() {
	    let localctx = new ErrorRejectSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, MySqlParser.RULE_errorRejectSpec);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2555;
	        this.match(MySqlParser.SEGMENT);
	        this.state = 2556;
	        this.match(MySqlParser.REJECT);
	        this.state = 2557;
	        this.match(MySqlParser.LIMIT);
	        this.state = 2558;
	        this.numeric();
	        this.state = 2559;
	        _la = this._input.LA(1);
	        if(!(_la===MySqlParser.PERCENT || _la===MySqlParser.ROWS)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableConstraint() {
	    let localctx = new TableConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, MySqlParser.RULE_tableConstraint);
	    try {
	        this.state = 2565;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,209,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2561;
	            if (!( this.isDialect('mysql'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('mysql')");
	            }
	            this.state = 2562;
	            this.tableConstraintMysql();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2563;
	            if (!( this.isDialect('inceptor'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('inceptor')");
	            }
	            this.state = 2564;
	            this.tableConstraintInceptor();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableConstraintMysql() {
	    let localctx = new TableConstraintMysqlContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, MySqlParser.RULE_tableConstraintMysql);
	    var _la = 0; // Token type
	    try {
	        this.state = 2636;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,226,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new PrimaryKeyTableConstraintContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2571;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.CONSTRAINT) {
	                this.state = 2567;
	                this.match(MySqlParser.CONSTRAINT);
	                this.state = 2569;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,210,this._ctx);
	                if(la_===1) {
	                    this.state = 2568;
	                    localctx.name = this.uid();

	                }
	            }

	            this.state = 2573;
	            this.match(MySqlParser.PRIMARY);
	            this.state = 2574;
	            this.match(MySqlParser.KEY);
	            this.state = 2576;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,212,this._ctx);
	            if(la_===1) {
	                this.state = 2575;
	                localctx.index = this.uid();

	            }
	            this.state = 2579;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.USING) {
	                this.state = 2578;
	                this.indexType();
	            }

	            this.state = 2581;
	            this.indexColumnNames();
	            this.state = 2585;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.USING || _la===MySqlParser.WITH || _la===MySqlParser.COMMENT || _la===MySqlParser.KEY_BLOCK_SIZE) {
	                this.state = 2582;
	                this.indexOption();
	                this.state = 2587;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 2:
	            localctx = new UniqueKeyTableConstraintContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2592;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.CONSTRAINT) {
	                this.state = 2588;
	                this.match(MySqlParser.CONSTRAINT);
	                this.state = 2590;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,215,this._ctx);
	                if(la_===1) {
	                    this.state = 2589;
	                    localctx.name = this.uid();

	                }
	            }

	            this.state = 2594;
	            this.match(MySqlParser.UNIQUE);
	            this.state = 2596;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,217,this._ctx);
	            if(la_===1) {
	                this.state = 2595;
	                localctx.indexFormat = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===MySqlParser.INDEX || _la===MySqlParser.KEY)) {
	                    localctx.indexFormat = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }

	            }
	            this.state = 2599;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,218,this._ctx);
	            if(la_===1) {
	                this.state = 2598;
	                localctx.index = this.uid();

	            }
	            this.state = 2602;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.USING) {
	                this.state = 2601;
	                this.indexType();
	            }

	            this.state = 2604;
	            this.indexColumnNames();
	            this.state = 2608;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.USING || _la===MySqlParser.WITH || _la===MySqlParser.COMMENT || _la===MySqlParser.KEY_BLOCK_SIZE) {
	                this.state = 2605;
	                this.indexOption();
	                this.state = 2610;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 3:
	            localctx = new ForeignKeyTableConstraintContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2615;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.CONSTRAINT) {
	                this.state = 2611;
	                this.match(MySqlParser.CONSTRAINT);
	                this.state = 2613;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,221,this._ctx);
	                if(la_===1) {
	                    this.state = 2612;
	                    localctx.name = this.uid();

	                }
	            }

	            this.state = 2617;
	            this.match(MySqlParser.FOREIGN);
	            this.state = 2618;
	            this.match(MySqlParser.KEY);
	            this.state = 2620;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,223,this._ctx);
	            if(la_===1) {
	                this.state = 2619;
	                localctx.index = this.uid();

	            }
	            this.state = 2622;
	            this.indexColumnNames();
	            this.state = 2623;
	            this.referenceDefinition();
	            break;

	        case 4:
	            localctx = new CheckTableConstraintContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2629;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.CONSTRAINT) {
	                this.state = 2625;
	                this.match(MySqlParser.CONSTRAINT);
	                this.state = 2627;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,224,this._ctx);
	                if(la_===1) {
	                    this.state = 2626;
	                    localctx.name = this.uid();

	                }
	            }

	            this.state = 2631;
	            this.match(MySqlParser.CHECK);
	            this.state = 2632;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 2633;
	            this.expression(0);
	            this.state = 2634;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableConstraintInceptor() {
	    let localctx = new TableConstraintInceptorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, MySqlParser.RULE_tableConstraintInceptor);
	    var _la = 0; // Token type
	    try {
	        this.state = 2665;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,229,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2640;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.CONSTRAINT) {
	                this.state = 2638;
	                this.match(MySqlParser.CONSTRAINT);
	                this.state = 2639;
	                this.uid();
	            }

	            this.state = 2642;
	            this.match(MySqlParser.FOREIGN);
	            this.state = 2643;
	            this.match(MySqlParser.KEY);
	            this.state = 2644;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 2645;
	            this.uidList();
	            this.state = 2646;
	            this.match(MySqlParser.RR_BRACKET);
	            this.state = 2647;
	            this.match(MySqlParser.REFERENCES);
	            this.state = 2648;
	            localctx.tabName = this.tableName();
	            this.state = 2649;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 2650;
	            this.uidList();
	            this.state = 2651;
	            this.match(MySqlParser.RR_BRACKET);
	            this.state = 2652;
	            this.constraintOpts();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2656;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.CONSTRAINT) {
	                this.state = 2654;
	                this.match(MySqlParser.CONSTRAINT);
	                this.state = 2655;
	                this.uid();
	            }

	            this.state = 2658;
	            this.match(MySqlParser.PRIMARY);
	            this.state = 2659;
	            this.match(MySqlParser.KEY);
	            this.state = 2660;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 2661;
	            this.uidList();
	            this.state = 2662;
	            this.match(MySqlParser.RR_BRACKET);
	            this.state = 2663;
	            this.constraintOpts();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	referenceDefinition() {
	    let localctx = new ReferenceDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, MySqlParser.RULE_referenceDefinition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2667;
	        this.match(MySqlParser.REFERENCES);
	        this.state = 2668;
	        this.tableName();
	        this.state = 2670;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,230,this._ctx);
	        if(la_===1) {
	            this.state = 2669;
	            this.indexColumnNames();

	        }
	        this.state = 2674;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,231,this._ctx);
	        if(la_===1) {
	            this.state = 2672;
	            this.match(MySqlParser.MATCH);
	            this.state = 2673;
	            localctx.matchType = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.FULL || _la===MySqlParser.PARTIAL || _la===MySqlParser.SIMPLE)) {
	                localctx.matchType = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }

	        }
	        this.state = 2677;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,232,this._ctx);
	        if(la_===1) {
	            this.state = 2676;
	            this.referenceAction();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	referenceAction() {
	    let localctx = new ReferenceActionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, MySqlParser.RULE_referenceAction);
	    try {
	        this.state = 2695;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,235,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2679;
	            this.match(MySqlParser.ON);
	            this.state = 2680;
	            this.match(MySqlParser.DELETE);
	            this.state = 2681;
	            localctx.onDelete = this.referenceControlType();
	            this.state = 2685;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,233,this._ctx);
	            if(la_===1) {
	                this.state = 2682;
	                this.match(MySqlParser.ON);
	                this.state = 2683;
	                this.match(MySqlParser.UPDATE);
	                this.state = 2684;
	                localctx.onUpdate = this.referenceControlType();

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2687;
	            this.match(MySqlParser.ON);
	            this.state = 2688;
	            this.match(MySqlParser.UPDATE);
	            this.state = 2689;
	            localctx.onUpdate = this.referenceControlType();
	            this.state = 2693;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,234,this._ctx);
	            if(la_===1) {
	                this.state = 2690;
	                this.match(MySqlParser.ON);
	                this.state = 2691;
	                this.match(MySqlParser.DELETE);
	                this.state = 2692;
	                localctx.onDelete = this.referenceControlType();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	referenceControlType() {
	    let localctx = new ReferenceControlTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, MySqlParser.RULE_referenceControlType);
	    try {
	        this.state = 2703;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.RESTRICT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2697;
	            this.match(MySqlParser.RESTRICT);
	            break;
	        case MySqlParser.CASCADE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2698;
	            this.match(MySqlParser.CASCADE);
	            break;
	        case MySqlParser.SET:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2699;
	            this.match(MySqlParser.SET);
	            this.state = 2700;
	            this.match(MySqlParser.NULL_LITERAL);
	            break;
	        case MySqlParser.NO:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2701;
	            this.match(MySqlParser.NO);
	            this.state = 2702;
	            this.match(MySqlParser.ACTION);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	indexColumnDefinition() {
	    let localctx = new IndexColumnDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, MySqlParser.RULE_indexColumnDefinition);
	    var _la = 0; // Token type
	    try {
	        this.state = 2733;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.INDEX:
	        case MySqlParser.KEY:
	            localctx = new SimpleIndexDeclarationContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2705;
	            localctx.indexFormat = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.INDEX || _la===MySqlParser.KEY)) {
	                localctx.indexFormat = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 2707;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,237,this._ctx);
	            if(la_===1) {
	                this.state = 2706;
	                this.uid();

	            }
	            this.state = 2710;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.USING) {
	                this.state = 2709;
	                this.indexType();
	            }

	            this.state = 2712;
	            this.indexColumnNames();
	            this.state = 2716;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.USING || _la===MySqlParser.WITH || _la===MySqlParser.COMMENT || _la===MySqlParser.KEY_BLOCK_SIZE) {
	                this.state = 2713;
	                this.indexOption();
	                this.state = 2718;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        case MySqlParser.FULLTEXT:
	        case MySqlParser.SPATIAL:
	            localctx = new SpecialIndexDeclarationContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2719;
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.FULLTEXT || _la===MySqlParser.SPATIAL)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 2721;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,240,this._ctx);
	            if(la_===1) {
	                this.state = 2720;
	                localctx.indexFormat = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===MySqlParser.INDEX || _la===MySqlParser.KEY)) {
	                    localctx.indexFormat = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }

	            }
	            this.state = 2724;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,241,this._ctx);
	            if(la_===1) {
	                this.state = 2723;
	                this.uid();

	            }
	            this.state = 2726;
	            this.indexColumnNames();
	            this.state = 2730;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.USING || _la===MySqlParser.WITH || _la===MySqlParser.COMMENT || _la===MySqlParser.KEY_BLOCK_SIZE) {
	                this.state = 2727;
	                this.indexOption();
	                this.state = 2732;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableOption() {
	    let localctx = new TableOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, MySqlParser.RULE_tableOption);
	    var _la = 0; // Token type
	    try {
	        this.state = 2876;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,272,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new TableOptionEngineContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2735;
	            this.match(MySqlParser.ENGINE);
	            this.state = 2737;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 2736;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 2739;
	            this.engineName();
	            break;

	        case 2:
	            localctx = new TableOptionAutoIncrementContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2740;
	            this.match(MySqlParser.AUTO_INCREMENT);
	            this.state = 2742;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 2741;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 2744;
	            this.decimalLiteral();
	            break;

	        case 3:
	            localctx = new TableOptionAverageContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2745;
	            this.match(MySqlParser.AVG_ROW_LENGTH);
	            this.state = 2747;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 2746;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 2749;
	            this.decimalLiteral();
	            break;

	        case 4:
	            localctx = new TableOptionCharsetContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2751;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.DEFAULT) {
	                this.state = 2750;
	                this.match(MySqlParser.DEFAULT);
	            }

	            this.state = 2756;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case MySqlParser.CHARACTER:
	                this.state = 2753;
	                this.match(MySqlParser.CHARACTER);
	                this.state = 2754;
	                this.match(MySqlParser.SET);
	                break;
	            case MySqlParser.CHARSET:
	                this.state = 2755;
	                this.match(MySqlParser.CHARSET);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 2759;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 2758;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 2761;
	            this.charsetName();
	            break;

	        case 5:
	            localctx = new TableOptionChecksumContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2762;
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.CHECKSUM || _la===MySqlParser.PAGE_CHECKSUM)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 2764;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 2763;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 2766;
	            localctx.boolValue = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.ZERO_DECIMAL || _la===MySqlParser.ONE_DECIMAL)) {
	                localctx.boolValue = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 6:
	            localctx = new TableOptionCollateContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2768;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.DEFAULT) {
	                this.state = 2767;
	                this.match(MySqlParser.DEFAULT);
	            }

	            this.state = 2770;
	            this.match(MySqlParser.COLLATE);
	            this.state = 2772;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,252,this._ctx);
	            if(la_===1) {
	                this.state = 2771;
	                this.match(MySqlParser.EQUAL_SYMBOL);

	            }
	            this.state = 2774;
	            this.collationName();
	            break;

	        case 7:
	            localctx = new TableOptionCommentContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2775;
	            this.match(MySqlParser.COMMENT);
	            this.state = 2777;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 2776;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 2779;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;

	        case 8:
	            localctx = new TableOptionCompressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 2780;
	            this.match(MySqlParser.COMPRESSION);
	            this.state = 2782;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 2781;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 2784;
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.STRING_LITERAL || _la===MySqlParser.ID)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 9:
	            localctx = new TableOptionConnectionContext(this, localctx);
	            this.enterOuterAlt(localctx, 9);
	            this.state = 2785;
	            this.match(MySqlParser.CONNECTION);
	            this.state = 2787;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 2786;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 2789;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;

	        case 10:
	            localctx = new TableOptionDataDirectoryContext(this, localctx);
	            this.enterOuterAlt(localctx, 10);
	            this.state = 2790;
	            this.match(MySqlParser.DATA);
	            this.state = 2791;
	            this.match(MySqlParser.DIRECTORY);
	            this.state = 2793;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 2792;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 2795;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;

	        case 11:
	            localctx = new TableOptionDelayContext(this, localctx);
	            this.enterOuterAlt(localctx, 11);
	            this.state = 2796;
	            this.match(MySqlParser.DELAY_KEY_WRITE);
	            this.state = 2798;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 2797;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 2800;
	            localctx.boolValue = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.ZERO_DECIMAL || _la===MySqlParser.ONE_DECIMAL)) {
	                localctx.boolValue = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 12:
	            localctx = new TableOptionEncryptionContext(this, localctx);
	            this.enterOuterAlt(localctx, 12);
	            this.state = 2801;
	            this.match(MySqlParser.ENCRYPTION);
	            this.state = 2803;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 2802;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 2805;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;

	        case 13:
	            localctx = new TableOptionIndexDirectoryContext(this, localctx);
	            this.enterOuterAlt(localctx, 13);
	            this.state = 2806;
	            this.match(MySqlParser.INDEX);
	            this.state = 2807;
	            this.match(MySqlParser.DIRECTORY);
	            this.state = 2809;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 2808;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 2811;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;

	        case 14:
	            localctx = new TableOptionInsertMethodContext(this, localctx);
	            this.enterOuterAlt(localctx, 14);
	            this.state = 2812;
	            this.match(MySqlParser.INSERT_METHOD);
	            this.state = 2814;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 2813;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 2816;
	            localctx.insertMethod = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.FIRST || _la===MySqlParser.LAST || _la===MySqlParser.NO)) {
	                localctx.insertMethod = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 15:
	            localctx = new TableOptionKeyBlockSizeContext(this, localctx);
	            this.enterOuterAlt(localctx, 15);
	            this.state = 2817;
	            this.match(MySqlParser.KEY_BLOCK_SIZE);
	            this.state = 2819;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 2818;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 2821;
	            this.fileSizeLiteral();
	            break;

	        case 16:
	            localctx = new TableOptionMaxRowsContext(this, localctx);
	            this.enterOuterAlt(localctx, 16);
	            this.state = 2822;
	            this.match(MySqlParser.MAX_ROWS);
	            this.state = 2824;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 2823;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 2826;
	            this.decimalLiteral();
	            break;

	        case 17:
	            localctx = new TableOptionMinRowsContext(this, localctx);
	            this.enterOuterAlt(localctx, 17);
	            this.state = 2827;
	            this.match(MySqlParser.MIN_ROWS);
	            this.state = 2829;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 2828;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 2831;
	            this.decimalLiteral();
	            break;

	        case 18:
	            localctx = new TableOptionPackKeysContext(this, localctx);
	            this.enterOuterAlt(localctx, 18);
	            this.state = 2832;
	            this.match(MySqlParser.PACK_KEYS);
	            this.state = 2834;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 2833;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 2836;
	            localctx.extBoolValue = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.DEFAULT || _la===MySqlParser.ZERO_DECIMAL || _la===MySqlParser.ONE_DECIMAL)) {
	                localctx.extBoolValue = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 19:
	            localctx = new TableOptionPasswordContext(this, localctx);
	            this.enterOuterAlt(localctx, 19);
	            this.state = 2837;
	            this.match(MySqlParser.PASSWORD);
	            this.state = 2839;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 2838;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 2841;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;

	        case 20:
	            localctx = new TableOptionRowFormatContext(this, localctx);
	            this.enterOuterAlt(localctx, 20);
	            this.state = 2842;
	            this.match(MySqlParser.ROW_FORMAT);
	            this.state = 2844;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 2843;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 2846;
	            localctx.rowFormatValue = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.DEFAULT || ((((_la - 459)) & ~0x1f) == 0 && ((1 << (_la - 459)) & ((1 << (MySqlParser.COMPACT - 459)) | (1 << (MySqlParser.COMPRESSED - 459)) | (1 << (MySqlParser.DYNAMIC - 459)))) !== 0) || _la===MySqlParser.FIXED || _la===MySqlParser.REDUNDANT)) {
	                localctx.rowFormatValue = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 21:
	            localctx = new TableOptionRecalculationContext(this, localctx);
	            this.enterOuterAlt(localctx, 21);
	            this.state = 2847;
	            this.match(MySqlParser.STATS_AUTO_RECALC);
	            this.state = 2849;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 2848;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 2851;
	            localctx.extBoolValue = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.DEFAULT || _la===MySqlParser.ZERO_DECIMAL || _la===MySqlParser.ONE_DECIMAL)) {
	                localctx.extBoolValue = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 22:
	            localctx = new TableOptionPersistentContext(this, localctx);
	            this.enterOuterAlt(localctx, 22);
	            this.state = 2852;
	            this.match(MySqlParser.STATS_PERSISTENT);
	            this.state = 2854;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 2853;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 2856;
	            localctx.extBoolValue = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.DEFAULT || _la===MySqlParser.ZERO_DECIMAL || _la===MySqlParser.ONE_DECIMAL)) {
	                localctx.extBoolValue = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 23:
	            localctx = new TableOptionSamplePageContext(this, localctx);
	            this.enterOuterAlt(localctx, 23);
	            this.state = 2857;
	            this.match(MySqlParser.STATS_SAMPLE_PAGES);
	            this.state = 2859;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 2858;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 2861;
	            this.decimalLiteral();
	            break;

	        case 24:
	            localctx = new TableOptionTablespaceContext(this, localctx);
	            this.enterOuterAlt(localctx, 24);
	            this.state = 2862;
	            this.match(MySqlParser.TABLESPACE);
	            this.state = 2863;
	            this.uid();
	            this.state = 2865;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,270,this._ctx);
	            if(la_===1) {
	                this.state = 2864;
	                this.tablespaceStorage();

	            }
	            break;

	        case 25:
	            localctx = new TableOptionTablespaceContext(this, localctx);
	            this.enterOuterAlt(localctx, 25);
	            this.state = 2867;
	            this.tablespaceStorage();
	            break;

	        case 26:
	            localctx = new TableOptionUnionContext(this, localctx);
	            this.enterOuterAlt(localctx, 26);
	            this.state = 2868;
	            this.match(MySqlParser.UNION);
	            this.state = 2870;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 2869;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 2872;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 2873;
	            this.tables();
	            this.state = 2874;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tablespaceStorage() {
	    let localctx = new TablespaceStorageContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, MySqlParser.RULE_tablespaceStorage);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2878;
	        this.match(MySqlParser.STORAGE);
	        this.state = 2879;
	        _la = this._input.LA(1);
	        if(!(_la===MySqlParser.DEFAULT || _la===MySqlParser.DISK || _la===MySqlParser.MEMORY)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partitionDefinitions() {
	    let localctx = new PartitionDefinitionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, MySqlParser.RULE_partitionDefinitions);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2881;
	        this.match(MySqlParser.PARTITION);
	        this.state = 2882;
	        this.match(MySqlParser.BY);
	        this.state = 2883;
	        this.partitionFunctionDefinition();
	        this.state = 2886;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,273,this._ctx);
	        if(la_===1) {
	            this.state = 2884;
	            this.match(MySqlParser.PARTITIONS);
	            this.state = 2885;
	            localctx.count = this.decimalLiteral();

	        }
	        this.state = 2895;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,275,this._ctx);
	        if(la_===1) {
	            this.state = 2888;
	            this.match(MySqlParser.SUBPARTITION);
	            this.state = 2889;
	            this.match(MySqlParser.BY);
	            this.state = 2890;
	            this.subpartitionFunctionDefinition();
	            this.state = 2893;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,274,this._ctx);
	            if(la_===1) {
	                this.state = 2891;
	                this.match(MySqlParser.SUBPARTITIONS);
	                this.state = 2892;
	                localctx.subCount = this.decimalLiteral();

	            }

	        }
	        this.state = 2908;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,277,this._ctx);
	        if(la_===1) {
	            this.state = 2897;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 2898;
	            this.partitionDefinition();
	            this.state = 2903;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.COMMA) {
	                this.state = 2899;
	                this.match(MySqlParser.COMMA);
	                this.state = 2900;
	                this.partitionDefinition();
	                this.state = 2905;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2906;
	            this.match(MySqlParser.RR_BRACKET);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partitionFunctionDefinition() {
	    let localctx = new PartitionFunctionDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, MySqlParser.RULE_partitionFunctionDefinition);
	    var _la = 0; // Token type
	    try {
	        this.state = 2955;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,283,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new PartitionFunctionHashContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2911;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.LINEAR) {
	                this.state = 2910;
	                this.match(MySqlParser.LINEAR);
	            }

	            this.state = 2913;
	            this.match(MySqlParser.HASH);
	            this.state = 2914;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 2915;
	            this.expression(0);
	            this.state = 2916;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 2:
	            localctx = new PartitionFunctionKeyContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2919;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.LINEAR) {
	                this.state = 2918;
	                this.match(MySqlParser.LINEAR);
	            }

	            this.state = 2921;
	            this.match(MySqlParser.KEY);
	            this.state = 2925;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.ALGORITHM) {
	                this.state = 2922;
	                this.match(MySqlParser.ALGORITHM);
	                this.state = 2923;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	                this.state = 2924;
	                localctx.algType = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===MySqlParser.ONE_DECIMAL || _la===MySqlParser.TWO_DECIMAL)) {
	                    localctx.algType = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 2927;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 2928;
	            this.uidList();
	            this.state = 2929;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 3:
	            localctx = new PartitionFunctionRangeContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2931;
	            this.match(MySqlParser.RANGE);
	            this.state = 2941;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case MySqlParser.LR_BRACKET:
	                this.state = 2932;
	                this.match(MySqlParser.LR_BRACKET);
	                this.state = 2933;
	                this.expression(0);
	                this.state = 2934;
	                this.match(MySqlParser.RR_BRACKET);
	                break;
	            case MySqlParser.COLUMNS:
	                this.state = 2936;
	                this.match(MySqlParser.COLUMNS);
	                this.state = 2937;
	                this.match(MySqlParser.LR_BRACKET);
	                this.state = 2938;
	                this.uidList();
	                this.state = 2939;
	                this.match(MySqlParser.RR_BRACKET);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 4:
	            localctx = new PartitionFunctionListContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2943;
	            this.match(MySqlParser.LIST);
	            this.state = 2953;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case MySqlParser.LR_BRACKET:
	                this.state = 2944;
	                this.match(MySqlParser.LR_BRACKET);
	                this.state = 2945;
	                this.expression(0);
	                this.state = 2946;
	                this.match(MySqlParser.RR_BRACKET);
	                break;
	            case MySqlParser.COLUMNS:
	                this.state = 2948;
	                this.match(MySqlParser.COLUMNS);
	                this.state = 2949;
	                this.match(MySqlParser.LR_BRACKET);
	                this.state = 2950;
	                this.uidList();
	                this.state = 2951;
	                this.match(MySqlParser.RR_BRACKET);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subpartitionFunctionDefinition() {
	    let localctx = new SubpartitionFunctionDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, MySqlParser.RULE_subpartitionFunctionDefinition);
	    var _la = 0; // Token type
	    try {
	        this.state = 2978;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,287,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new SubPartitionFunctionHashContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2958;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.LINEAR) {
	                this.state = 2957;
	                this.match(MySqlParser.LINEAR);
	            }

	            this.state = 2960;
	            this.match(MySqlParser.HASH);
	            this.state = 2961;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 2962;
	            this.expression(0);
	            this.state = 2963;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 2:
	            localctx = new SubPartitionFunctionKeyContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2966;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.LINEAR) {
	                this.state = 2965;
	                this.match(MySqlParser.LINEAR);
	            }

	            this.state = 2968;
	            this.match(MySqlParser.KEY);
	            this.state = 2972;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.ALGORITHM) {
	                this.state = 2969;
	                this.match(MySqlParser.ALGORITHM);
	                this.state = 2970;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	                this.state = 2971;
	                localctx.algType = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===MySqlParser.ONE_DECIMAL || _la===MySqlParser.TWO_DECIMAL)) {
	                    localctx.algType = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 2974;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 2975;
	            this.uidList();
	            this.state = 2976;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partitionDefinition() {
	    let localctx = new PartitionDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, MySqlParser.RULE_partitionDefinition);
	    var _la = 0; // Token type
	    try {
	        this.state = 3111;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,306,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new PartitionComparisionContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2980;
	            this.match(MySqlParser.PARTITION);
	            this.state = 2981;
	            this.uid();
	            this.state = 2982;
	            this.match(MySqlParser.VALUES);
	            this.state = 2983;
	            this.match(MySqlParser.LESS);
	            this.state = 2984;
	            this.match(MySqlParser.THAN);
	            this.state = 2985;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 2986;
	            this.partitionDefinerAtom();
	            this.state = 2991;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.COMMA) {
	                this.state = 2987;
	                this.match(MySqlParser.COMMA);
	                this.state = 2988;
	                this.partitionDefinerAtom();
	                this.state = 2993;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2994;
	            this.match(MySqlParser.RR_BRACKET);
	            this.state = 2998;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.INDEX || _la===MySqlParser.COMMENT || _la===MySqlParser.DATA || _la===MySqlParser.ENGINE || ((((_la - 575)) & ~0x1f) == 0 && ((1 << (_la - 575)) & ((1 << (MySqlParser.MAX_ROWS - 575)) | (1 << (MySqlParser.MIN_ROWS - 575)) | (1 << (MySqlParser.NODEGROUP - 575)))) !== 0) || _la===MySqlParser.STORAGE || _la===MySqlParser.TABLESPACE) {
	                this.state = 2995;
	                this.partitionOption();
	                this.state = 3000;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 3009;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.SUBPARTITION) {
	                this.state = 3001;
	                this.subpartitionDefinition();
	                this.state = 3006;
	                this._errHandler.sync(this);
	                let _alt = this._interp.adaptivePredict(this._input,290,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 3002;
	                        this.match(MySqlParser.COMMA);
	                        this.state = 3003;
	                        this.subpartitionDefinition(); 
	                    }
	                    this.state = 3008;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,290,this._ctx);
	                }

	            }

	            break;

	        case 2:
	            localctx = new PartitionComparisionContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3011;
	            this.match(MySqlParser.PARTITION);
	            this.state = 3012;
	            this.uid();
	            this.state = 3013;
	            this.match(MySqlParser.VALUES);
	            this.state = 3014;
	            this.match(MySqlParser.LESS);
	            this.state = 3015;
	            this.match(MySqlParser.THAN);
	            this.state = 3016;
	            this.partitionDefinerAtom();
	            this.state = 3020;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.INDEX || _la===MySqlParser.COMMENT || _la===MySqlParser.DATA || _la===MySqlParser.ENGINE || ((((_la - 575)) & ~0x1f) == 0 && ((1 << (_la - 575)) & ((1 << (MySqlParser.MAX_ROWS - 575)) | (1 << (MySqlParser.MIN_ROWS - 575)) | (1 << (MySqlParser.NODEGROUP - 575)))) !== 0) || _la===MySqlParser.STORAGE || _la===MySqlParser.TABLESPACE) {
	                this.state = 3017;
	                this.partitionOption();
	                this.state = 3022;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 3031;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.SUBPARTITION) {
	                this.state = 3023;
	                this.subpartitionDefinition();
	                this.state = 3028;
	                this._errHandler.sync(this);
	                let _alt = this._interp.adaptivePredict(this._input,293,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 3024;
	                        this.match(MySqlParser.COMMA);
	                        this.state = 3025;
	                        this.subpartitionDefinition(); 
	                    }
	                    this.state = 3030;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,293,this._ctx);
	                }

	            }

	            break;

	        case 3:
	            localctx = new PartitionListAtomContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3033;
	            this.match(MySqlParser.PARTITION);
	            this.state = 3034;
	            this.uid();
	            this.state = 3035;
	            this.match(MySqlParser.VALUES);
	            this.state = 3036;
	            this.match(MySqlParser.IN);
	            this.state = 3037;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 3038;
	            this.partitionDefinerAtom();
	            this.state = 3043;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.COMMA) {
	                this.state = 3039;
	                this.match(MySqlParser.COMMA);
	                this.state = 3040;
	                this.partitionDefinerAtom();
	                this.state = 3045;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 3046;
	            this.match(MySqlParser.RR_BRACKET);
	            this.state = 3050;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.INDEX || _la===MySqlParser.COMMENT || _la===MySqlParser.DATA || _la===MySqlParser.ENGINE || ((((_la - 575)) & ~0x1f) == 0 && ((1 << (_la - 575)) & ((1 << (MySqlParser.MAX_ROWS - 575)) | (1 << (MySqlParser.MIN_ROWS - 575)) | (1 << (MySqlParser.NODEGROUP - 575)))) !== 0) || _la===MySqlParser.STORAGE || _la===MySqlParser.TABLESPACE) {
	                this.state = 3047;
	                this.partitionOption();
	                this.state = 3052;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 3061;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.SUBPARTITION) {
	                this.state = 3053;
	                this.subpartitionDefinition();
	                this.state = 3058;
	                this._errHandler.sync(this);
	                let _alt = this._interp.adaptivePredict(this._input,297,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 3054;
	                        this.match(MySqlParser.COMMA);
	                        this.state = 3055;
	                        this.subpartitionDefinition(); 
	                    }
	                    this.state = 3060;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,297,this._ctx);
	                }

	            }

	            break;

	        case 4:
	            localctx = new PartitionListVectorContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3063;
	            this.match(MySqlParser.PARTITION);
	            this.state = 3064;
	            this.uid();
	            this.state = 3065;
	            this.match(MySqlParser.VALUES);
	            this.state = 3066;
	            this.match(MySqlParser.IN);
	            this.state = 3067;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 3068;
	            this.partitionDefinerVector();
	            this.state = 3073;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.COMMA) {
	                this.state = 3069;
	                this.match(MySqlParser.COMMA);
	                this.state = 3070;
	                this.partitionDefinerVector();
	                this.state = 3075;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 3076;
	            this.match(MySqlParser.RR_BRACKET);
	            this.state = 3080;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.INDEX || _la===MySqlParser.COMMENT || _la===MySqlParser.DATA || _la===MySqlParser.ENGINE || ((((_la - 575)) & ~0x1f) == 0 && ((1 << (_la - 575)) & ((1 << (MySqlParser.MAX_ROWS - 575)) | (1 << (MySqlParser.MIN_ROWS - 575)) | (1 << (MySqlParser.NODEGROUP - 575)))) !== 0) || _la===MySqlParser.STORAGE || _la===MySqlParser.TABLESPACE) {
	                this.state = 3077;
	                this.partitionOption();
	                this.state = 3082;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 3091;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.SUBPARTITION) {
	                this.state = 3083;
	                this.subpartitionDefinition();
	                this.state = 3088;
	                this._errHandler.sync(this);
	                let _alt = this._interp.adaptivePredict(this._input,301,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 3084;
	                        this.match(MySqlParser.COMMA);
	                        this.state = 3085;
	                        this.subpartitionDefinition(); 
	                    }
	                    this.state = 3090;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,301,this._ctx);
	                }

	            }

	            break;

	        case 5:
	            localctx = new PartitionSimpleContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3093;
	            this.match(MySqlParser.PARTITION);
	            this.state = 3094;
	            this.uid();
	            this.state = 3098;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.INDEX || _la===MySqlParser.COMMENT || _la===MySqlParser.DATA || _la===MySqlParser.ENGINE || ((((_la - 575)) & ~0x1f) == 0 && ((1 << (_la - 575)) & ((1 << (MySqlParser.MAX_ROWS - 575)) | (1 << (MySqlParser.MIN_ROWS - 575)) | (1 << (MySqlParser.NODEGROUP - 575)))) !== 0) || _la===MySqlParser.STORAGE || _la===MySqlParser.TABLESPACE) {
	                this.state = 3095;
	                this.partitionOption();
	                this.state = 3100;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 3109;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.SUBPARTITION) {
	                this.state = 3101;
	                this.subpartitionDefinition();
	                this.state = 3106;
	                this._errHandler.sync(this);
	                let _alt = this._interp.adaptivePredict(this._input,304,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 3102;
	                        this.match(MySqlParser.COMMA);
	                        this.state = 3103;
	                        this.subpartitionDefinition(); 
	                    }
	                    this.state = 3108;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,304,this._ctx);
	                }

	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partitionDefinerAtom() {
	    let localctx = new PartitionDefinerAtomContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, MySqlParser.RULE_partitionDefinerAtom);
	    try {
	        this.state = 3116;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,307,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3113;
	            this.constant();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3114;
	            this.expression(0);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3115;
	            this.match(MySqlParser.MAXVALUE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partitionDefinerVector() {
	    let localctx = new PartitionDefinerVectorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, MySqlParser.RULE_partitionDefinerVector);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3118;
	        this.match(MySqlParser.LR_BRACKET);
	        this.state = 3119;
	        this.partitionDefinerAtom();
	        this.state = 3122; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 3120;
	            this.match(MySqlParser.COMMA);
	            this.state = 3121;
	            this.partitionDefinerAtom();
	            this.state = 3124; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===MySqlParser.COMMA);
	        this.state = 3126;
	        this.match(MySqlParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subpartitionDefinition() {
	    let localctx = new SubpartitionDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 200, MySqlParser.RULE_subpartitionDefinition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3128;
	        this.match(MySqlParser.SUBPARTITION);
	        this.state = 3129;
	        this.uid();
	        this.state = 3133;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MySqlParser.INDEX || _la===MySqlParser.COMMENT || _la===MySqlParser.DATA || _la===MySqlParser.ENGINE || ((((_la - 575)) & ~0x1f) == 0 && ((1 << (_la - 575)) & ((1 << (MySqlParser.MAX_ROWS - 575)) | (1 << (MySqlParser.MIN_ROWS - 575)) | (1 << (MySqlParser.NODEGROUP - 575)))) !== 0) || _la===MySqlParser.STORAGE || _la===MySqlParser.TABLESPACE) {
	            this.state = 3130;
	            this.partitionOption();
	            this.state = 3135;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partitionOption() {
	    let localctx = new PartitionOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 202, MySqlParser.RULE_partitionOption);
	    var _la = 0; // Token type
	    try {
	        this.state = 3181;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.ENGINE:
	        case MySqlParser.STORAGE:
	            localctx = new PartitionOptionEngineContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3137;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.STORAGE) {
	                this.state = 3136;
	                this.match(MySqlParser.STORAGE);
	            }

	            this.state = 3139;
	            this.match(MySqlParser.ENGINE);
	            this.state = 3141;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 3140;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 3143;
	            this.engineName();
	            break;
	        case MySqlParser.COMMENT:
	            localctx = new PartitionOptionCommentContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3144;
	            this.match(MySqlParser.COMMENT);
	            this.state = 3146;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 3145;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 3148;
	            localctx.comment = this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case MySqlParser.DATA:
	            localctx = new PartitionOptionDataDirectoryContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3149;
	            this.match(MySqlParser.DATA);
	            this.state = 3150;
	            this.match(MySqlParser.DIRECTORY);
	            this.state = 3152;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 3151;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 3154;
	            localctx.dataDirectory = this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case MySqlParser.INDEX:
	            localctx = new PartitionOptionIndexDirectoryContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3155;
	            this.match(MySqlParser.INDEX);
	            this.state = 3156;
	            this.match(MySqlParser.DIRECTORY);
	            this.state = 3158;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 3157;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 3160;
	            localctx.indexDirectory = this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case MySqlParser.MAX_ROWS:
	            localctx = new PartitionOptionMaxRowsContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3161;
	            this.match(MySqlParser.MAX_ROWS);
	            this.state = 3163;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 3162;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 3165;
	            localctx.maxRows = this.decimalLiteral();
	            break;
	        case MySqlParser.MIN_ROWS:
	            localctx = new PartitionOptionMinRowsContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 3166;
	            this.match(MySqlParser.MIN_ROWS);
	            this.state = 3168;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 3167;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 3170;
	            localctx.minRows = this.decimalLiteral();
	            break;
	        case MySqlParser.TABLESPACE:
	            localctx = new PartitionOptionTablespaceContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 3171;
	            this.match(MySqlParser.TABLESPACE);
	            this.state = 3173;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,317,this._ctx);
	            if(la_===1) {
	                this.state = 3172;
	                this.match(MySqlParser.EQUAL_SYMBOL);

	            }
	            this.state = 3175;
	            localctx.tablespace = this.uid();
	            break;
	        case MySqlParser.NODEGROUP:
	            localctx = new PartitionOptionNodeGroupContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 3176;
	            this.match(MySqlParser.NODEGROUP);
	            this.state = 3178;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,318,this._ctx);
	            if(la_===1) {
	                this.state = 3177;
	                this.match(MySqlParser.EQUAL_SYMBOL);

	            }
	            this.state = 3180;
	            localctx.nodegroup = this.uid();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterDatabase() {
	    let localctx = new AlterDatabaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 204, MySqlParser.RULE_alterDatabase);
	    var _la = 0; // Token type
	    try {
	        this.state = 3216;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,322,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new AlterUpgradeNameContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3183;
	            this.match(MySqlParser.ALTER);
	            this.state = 3184;
	            localctx.dbFormat = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.DATABASE || _la===MySqlParser.SCHEMA)) {
	                localctx.dbFormat = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 3185;
	            this.databaseName();
	            this.state = 3186;
	            this.alterDatabaseOption();
	            break;

	        case 2:
	            localctx = new AlterSimpleDatabaseContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3188;
	            if (!( this.isDialect('mysql'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('mysql')");
	            }
	            this.state = 3189;
	            this.match(MySqlParser.ALTER);
	            this.state = 3190;
	            localctx.dbFormat = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.DATABASE || _la===MySqlParser.SCHEMA)) {
	                localctx.dbFormat = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 3192; 
	            this._errHandler.sync(this);
	            let _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 3191;
	            		this.mysqlCreateDatabaseOption();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 3194; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,320, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;

	        case 3:
	            localctx = new AlterSimpleDatabaseContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3196;
	            if (!( this.isDialect('mysql'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('mysql')");
	            }
	            this.state = 3197;
	            this.match(MySqlParser.ALTER);
	            this.state = 3198;
	            localctx.dbFormat = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.DATABASE || _la===MySqlParser.SCHEMA)) {
	                localctx.dbFormat = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 3199;
	            this.databaseName();
	            this.state = 3201; 
	            this._errHandler.sync(this);
	            let _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 3200;
	            		this.mysqlCreateDatabaseOption();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 3203; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,321, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;

	        case 4:
	            localctx = new AlterMissingBodyContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3205;
	            this.match(MySqlParser.ALTER);
	            this.state = 3206;
	            localctx.dbFormat = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.DATABASE || _la===MySqlParser.SCHEMA)) {
	                localctx.dbFormat = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 3207;
	            this.databaseName();

	                    this.notifyErrorListeners('Please provide alter body');
	                  
	            break;

	        case 5:
	            localctx = new AlterDbPlacholderContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3210;
	            this.match(MySqlParser.ALTER);
	            this.state = 3211;
	            localctx.dbFormat = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.DATABASE || _la===MySqlParser.SCHEMA)) {
	                localctx.dbFormat = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 3212;
	            this.databaseName();
	            this.state = 3213;
	            localctx._alterDatabaseAnchor = this.alterDatabaseAnchor();

	                    this.notifyPlaceholderError(localctx._alterDatabaseAnchor, 'Please provide alter specification')
	                  
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterEvent() {
	    let localctx = new AlterEventContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 206, MySqlParser.RULE_alterEvent);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3218;
	        this.match(MySqlParser.ALTER);
	        this.state = 3220;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.DEFINER) {
	            this.state = 3219;
	            this.ownerStatement();
	        }

	        this.state = 3222;
	        this.match(MySqlParser.EVENT);
	        this.state = 3223;
	        this.fullId();
	        this.state = 3227;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,324,this._ctx);
	        if(la_===1) {
	            this.state = 3224;
	            this.match(MySqlParser.ON);
	            this.state = 3225;
	            this.match(MySqlParser.SCHEDULE);
	            this.state = 3226;
	            this.scheduleExpression();

	        }
	        this.state = 3235;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,326,this._ctx);
	        if(la_===1) {
	            this.state = 3229;
	            this.match(MySqlParser.ON);
	            this.state = 3230;
	            this.match(MySqlParser.COMPLETION);
	            this.state = 3232;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.NOT) {
	                this.state = 3231;
	                this.match(MySqlParser.NOT);
	            }

	            this.state = 3234;
	            this.match(MySqlParser.PRESERVE);

	        }
	        this.state = 3240;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,327,this._ctx);
	        if(la_===1) {
	            this.state = 3237;
	            this.match(MySqlParser.RENAME);
	            this.state = 3238;
	            this.match(MySqlParser.TO);
	            this.state = 3239;
	            this.fullId();

	        }
	        this.state = 3243;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,328,this._ctx);
	        if(la_===1) {
	            this.state = 3242;
	            this.enableType();

	        }
	        this.state = 3247;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,329,this._ctx);
	        if(la_===1) {
	            this.state = 3245;
	            this.match(MySqlParser.COMMENT);
	            this.state = 3246;
	            this.match(MySqlParser.STRING_LITERAL);

	        }
	        this.state = 3251;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,330,this._ctx);
	        if(la_===1) {
	            this.state = 3249;
	            this.match(MySqlParser.DO);
	            this.state = 3250;
	            this.routineBody();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterFunction() {
	    let localctx = new AlterFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 208, MySqlParser.RULE_alterFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3253;
	        this.match(MySqlParser.ALTER);
	        this.state = 3254;
	        this.match(MySqlParser.FUNCTION);
	        this.state = 3255;
	        this.fullId();
	        this.state = 3259;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,331,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 3256;
	                this.routineOption(); 
	            }
	            this.state = 3261;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,331,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterInstance() {
	    let localctx = new AlterInstanceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 210, MySqlParser.RULE_alterInstance);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3262;
	        this.match(MySqlParser.ALTER);
	        this.state = 3263;
	        this.match(MySqlParser.INSTANCE);
	        this.state = 3264;
	        this.match(MySqlParser.ROTATE);
	        this.state = 3265;
	        this.match(MySqlParser.INNODB);
	        this.state = 3266;
	        this.match(MySqlParser.MASTER);
	        this.state = 3267;
	        this.match(MySqlParser.KEY);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterLogfileGroup() {
	    let localctx = new AlterLogfileGroupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 212, MySqlParser.RULE_alterLogfileGroup);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3269;
	        this.match(MySqlParser.ALTER);
	        this.state = 3270;
	        this.match(MySqlParser.LOGFILE);
	        this.state = 3271;
	        this.match(MySqlParser.GROUP);
	        this.state = 3272;
	        this.uid();
	        this.state = 3273;
	        this.match(MySqlParser.ADD);
	        this.state = 3274;
	        this.match(MySqlParser.UNDOFILE);
	        this.state = 3275;
	        this.match(MySqlParser.STRING_LITERAL);
	        this.state = 3281;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.INITIAL_SIZE) {
	            this.state = 3276;
	            this.match(MySqlParser.INITIAL_SIZE);
	            this.state = 3278;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 3277;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 3280;
	            this.fileSizeLiteral();
	        }

	        this.state = 3284;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.WAIT) {
	            this.state = 3283;
	            this.match(MySqlParser.WAIT);
	        }

	        this.state = 3286;
	        this.match(MySqlParser.ENGINE);
	        this.state = 3288;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.EQUAL_SYMBOL) {
	            this.state = 3287;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	        }

	        this.state = 3290;
	        this.engineName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterProcedure() {
	    let localctx = new AlterProcedureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 214, MySqlParser.RULE_alterProcedure);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3292;
	        this.match(MySqlParser.ALTER);
	        this.state = 3293;
	        this.match(MySqlParser.PROCEDURE);
	        this.state = 3294;
	        this.fullId();
	        this.state = 3298;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,336,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 3295;
	                this.routineOption(); 
	            }
	            this.state = 3300;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,336,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterServer() {
	    let localctx = new AlterServerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 216, MySqlParser.RULE_alterServer);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3301;
	        this.match(MySqlParser.ALTER);
	        this.state = 3302;
	        this.match(MySqlParser.SERVER);
	        this.state = 3303;
	        this.uid();
	        this.state = 3304;
	        this.match(MySqlParser.OPTIONS);
	        this.state = 3305;
	        this.match(MySqlParser.LR_BRACKET);
	        this.state = 3306;
	        this.serverOption();
	        this.state = 3311;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MySqlParser.COMMA) {
	            this.state = 3307;
	            this.match(MySqlParser.COMMA);
	            this.state = 3308;
	            this.serverOption();
	            this.state = 3313;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 3314;
	        this.match(MySqlParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterTable() {
	    let localctx = new AlterTableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 218, MySqlParser.RULE_alterTable);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3316;
	        this.match(MySqlParser.ALTER);
	        this.state = 3317;
	        this.alterTableAction();
	        this.state = 3318;
	        this.tableName();
	        this.state = 3319;
	        this.alterSpecification();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterTablespace() {
	    let localctx = new AlterTablespaceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 220, MySqlParser.RULE_alterTablespace);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3321;
	        this.match(MySqlParser.ALTER);
	        this.state = 3322;
	        this.match(MySqlParser.TABLESPACE);
	        this.state = 3323;
	        this.uid();
	        this.state = 3324;
	        localctx.objectAction = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(_la===MySqlParser.ADD || _la===MySqlParser.DROP)) {
	            localctx.objectAction = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 3325;
	        this.match(MySqlParser.DATAFILE);
	        this.state = 3326;
	        this.match(MySqlParser.STRING_LITERAL);
	        this.state = 3330;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.INITIAL_SIZE) {
	            this.state = 3327;
	            this.match(MySqlParser.INITIAL_SIZE);
	            this.state = 3328;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 3329;
	            this.fileSizeLiteral();
	        }

	        this.state = 3333;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.WAIT) {
	            this.state = 3332;
	            this.match(MySqlParser.WAIT);
	        }

	        this.state = 3335;
	        this.match(MySqlParser.ENGINE);
	        this.state = 3337;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.EQUAL_SYMBOL) {
	            this.state = 3336;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	        }

	        this.state = 3339;
	        this.engineName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterView() {
	    let localctx = new AlterViewContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 222, MySqlParser.RULE_alterView);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3341;
	        this.match(MySqlParser.ALTER);
	        this.state = 3345;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.ALGORITHM) {
	            this.state = 3342;
	            this.match(MySqlParser.ALGORITHM);
	            this.state = 3343;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 3344;
	            localctx.algType = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.MERGE || _la===MySqlParser.TEMPTABLE || _la===MySqlParser.UNDEFINED)) {
	                localctx.algType = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 3348;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.DEFINER) {
	            this.state = 3347;
	            this.ownerStatement();
	        }

	        this.state = 3353;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.SQL) {
	            this.state = 3350;
	            this.match(MySqlParser.SQL);
	            this.state = 3351;
	            this.match(MySqlParser.SECURITY);
	            this.state = 3352;
	            localctx.secContext = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.DEFINER || _la===MySqlParser.INVOKER)) {
	                localctx.secContext = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 3355;
	        this.match(MySqlParser.VIEW);
	        this.state = 3356;
	        this.fullId();
	        this.state = 3361;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.LR_BRACKET) {
	            this.state = 3357;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 3358;
	            this.uidList();
	            this.state = 3359;
	            this.match(MySqlParser.RR_BRACKET);
	        }

	        this.state = 3363;
	        this.match(MySqlParser.AS);
	        this.state = 3364;
	        this.selectStatement();
	        this.state = 3371;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,346,this._ctx);
	        if(la_===1) {
	            this.state = 3365;
	            this.match(MySqlParser.WITH);
	            this.state = 3367;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.CASCADED || _la===MySqlParser.LOCAL) {
	                this.state = 3366;
	                localctx.checkOpt = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===MySqlParser.CASCADED || _la===MySqlParser.LOCAL)) {
	                    localctx.checkOpt = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 3369;
	            this.match(MySqlParser.CHECK);
	            this.state = 3370;
	            this.match(MySqlParser.OPTION);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterDatabaseOption() {
	    let localctx = new AlterDatabaseOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 224, MySqlParser.RULE_alterDatabaseOption);
	    try {
	        this.state = 3383;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,348,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3373;
	            if (!( this.isDialect('mysql'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('mysql')");
	            }
	            this.state = 3374;
	            this.match(MySqlParser.UPGRADE);
	            this.state = 3375;
	            this.match(MySqlParser.DATA);
	            this.state = 3376;
	            this.match(MySqlParser.DIRECTORY);
	            this.state = 3377;
	            this.match(MySqlParser.NAME);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3378;
	            if (!( this.isDialect('inceptor'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('inceptor')");
	            }
	            this.state = 3381;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,347,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 3379;
	                this.alterDatabaseSetDbproperties();
	                break;

	            case 2:
	                this.state = 3380;
	                this.alterDatabaseSetOwner();
	                break;

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterDatabaseSetDbproperties() {
	    let localctx = new AlterDatabaseSetDbpropertiesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 226, MySqlParser.RULE_alterDatabaseSetDbproperties);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3385;
	        this.match(MySqlParser.SET);
	        this.state = 3386;
	        this.match(MySqlParser.DBPROPERTIES);
	        this.state = 3387;
	        this.match(MySqlParser.LR_BRACKET);
	        this.state = 3388;
	        this.keyValueProperties();
	        this.state = 3389;
	        this.match(MySqlParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterDatabaseSetOwner() {
	    let localctx = new AlterDatabaseSetOwnerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 228, MySqlParser.RULE_alterDatabaseSetOwner);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3391;
	        this.match(MySqlParser.SET);
	        this.state = 3392;
	        this.match(MySqlParser.OWNER);
	        this.state = 3393;
	        _la = this._input.LA(1);
	        if(!(_la===MySqlParser.GROUP || _la===MySqlParser.ROLE || _la===MySqlParser.USER)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 3394;
	        this.uid();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterDatabaseAnchor() {
	    let localctx = new AlterDatabaseAnchorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 230, MySqlParser.RULE_alterDatabaseAnchor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3396;
	        this.placeholder();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterTableAction() {
	    let localctx = new AlterTableActionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 232, MySqlParser.RULE_alterTableAction);
	    var _la = 0; // Token type
	    try {
	        this.state = 3408;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,351,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3398;
	            if (!( this.isDialect('mysql'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('mysql')");
	            }
	            this.state = 3400;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.OFFLINE || _la===MySqlParser.ONLINE) {
	                this.state = 3399;
	                localctx.intimeAction = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===MySqlParser.OFFLINE || _la===MySqlParser.ONLINE)) {
	                    localctx.intimeAction = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 3403;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.IGNORE) {
	                this.state = 3402;
	                this.match(MySqlParser.IGNORE);
	            }

	            this.state = 3405;
	            this.match(MySqlParser.TABLE);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3406;
	            if (!( this.isDialect('inceptor'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('inceptor')");
	            }
	            this.state = 3407;
	            this.match(MySqlParser.TABLE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterSpecification() {
	    let localctx = new AlterSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 234, MySqlParser.RULE_alterSpecification);
	    try {
	        this.state = 3414;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,352,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3410;
	            if (!( this.isDialect('mysql'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('mysql')");
	            }
	            this.state = 3411;
	            this.alterSpecificationMysql();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3412;
	            if (!( this.isDialect('inceptor'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('inceptor')");
	            }
	            this.state = 3413;
	            this.alterSpecificationInceptor();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterSpecificationMysql() {
	    let localctx = new AlterSpecificationMysqlContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 236, MySqlParser.RULE_alterSpecificationMysql);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3424;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,354,this._ctx);
	        if(la_===1) {
	            this.state = 3416;
	            this.alterSpecificationMysqlItem();
	            this.state = 3421;
	            this._errHandler.sync(this);
	            let _alt = this._interp.adaptivePredict(this._input,353,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 3417;
	                    this.match(MySqlParser.COMMA);
	                    this.state = 3418;
	                    this.alterSpecificationMysqlItem(); 
	                }
	                this.state = 3423;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,353,this._ctx);
	            }


	        }
	        this.state = 3427;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,355,this._ctx);
	        if(la_===1) {
	            this.state = 3426;
	            this.partitionDefinitions();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterSpecificationMysqlItem() {
	    let localctx = new AlterSpecificationMysqlItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 238, MySqlParser.RULE_alterSpecificationMysqlItem);
	    var _la = 0; // Token type
	    try {
	        this.state = 3778;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,409,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new AlterByTableOptionContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3429;
	            this.tableOption();
	            this.state = 3436;
	            this._errHandler.sync(this);
	            let _alt = this._interp.adaptivePredict(this._input,357,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 3431;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===MySqlParser.COMMA) {
	                        this.state = 3430;
	                        this.match(MySqlParser.COMMA);
	                    }

	                    this.state = 3433;
	                    this.tableOption(); 
	                }
	                this.state = 3438;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,357,this._ctx);
	            }

	            break;

	        case 2:
	            localctx = new AlterByAddColumnContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3439;
	            this.match(MySqlParser.ADD);
	            this.state = 3441;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,358,this._ctx);
	            if(la_===1) {
	                this.state = 3440;
	                this.match(MySqlParser.COLUMN);

	            }
	            this.state = 3443;
	            this.uid();
	            this.state = 3444;
	            this.columnDefinition();
	            this.state = 3448;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,359,this._ctx);
	            if(la_===1) {
	                this.state = 3445;
	                this.match(MySqlParser.FIRST);

	            } else if(la_===2) {
	                this.state = 3446;
	                this.match(MySqlParser.AFTER);
	                this.state = 3447;
	                this.uid();

	            }
	            break;

	        case 3:
	            localctx = new AlterByAddColumnsContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3450;
	            this.match(MySqlParser.ADD);
	            this.state = 3452;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.COLUMN) {
	                this.state = 3451;
	                this.match(MySqlParser.COLUMN);
	            }

	            this.state = 3454;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 3455;
	            this.uid();
	            this.state = 3456;
	            this.columnDefinition();
	            this.state = 3463;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.COMMA) {
	                this.state = 3457;
	                this.match(MySqlParser.COMMA);
	                this.state = 3458;
	                this.uid();
	                this.state = 3459;
	                this.columnDefinition();
	                this.state = 3465;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 3466;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 4:
	            localctx = new AlterByAddIndexContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3468;
	            this.match(MySqlParser.ADD);
	            this.state = 3469;
	            localctx.indexFormat = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.INDEX || _la===MySqlParser.KEY)) {
	                localctx.indexFormat = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 3471;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,362,this._ctx);
	            if(la_===1) {
	                this.state = 3470;
	                this.uid();

	            }
	            this.state = 3474;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.USING) {
	                this.state = 3473;
	                this.indexType();
	            }

	            this.state = 3476;
	            this.indexColumnNames();
	            this.state = 3480;
	            this._errHandler.sync(this);
	            let _alt = this._interp.adaptivePredict(this._input,364,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 3477;
	                    this.indexOption(); 
	                }
	                this.state = 3482;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,364,this._ctx);
	            }

	            break;

	        case 5:
	            localctx = new AlterByAddPrimaryKeyContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3483;
	            this.match(MySqlParser.ADD);
	            this.state = 3488;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.CONSTRAINT) {
	                this.state = 3484;
	                this.match(MySqlParser.CONSTRAINT);
	                this.state = 3486;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,365,this._ctx);
	                if(la_===1) {
	                    this.state = 3485;
	                    localctx.name = this.uid();

	                }
	            }

	            this.state = 3490;
	            this.match(MySqlParser.PRIMARY);
	            this.state = 3491;
	            this.match(MySqlParser.KEY);
	            this.state = 3493;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.USING) {
	                this.state = 3492;
	                this.indexType();
	            }

	            this.state = 3495;
	            this.indexColumnNames();
	            this.state = 3499;
	            this._errHandler.sync(this);
	            let _alt = this._interp.adaptivePredict(this._input,368,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 3496;
	                    this.indexOption(); 
	                }
	                this.state = 3501;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,368,this._ctx);
	            }

	            break;

	        case 6:
	            localctx = new AlterByAddUniqueKeyContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 3502;
	            this.match(MySqlParser.ADD);
	            this.state = 3507;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.CONSTRAINT) {
	                this.state = 3503;
	                this.match(MySqlParser.CONSTRAINT);
	                this.state = 3505;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,369,this._ctx);
	                if(la_===1) {
	                    this.state = 3504;
	                    localctx.name = this.uid();

	                }
	            }

	            this.state = 3509;
	            this.match(MySqlParser.UNIQUE);
	            this.state = 3511;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,371,this._ctx);
	            if(la_===1) {
	                this.state = 3510;
	                localctx.indexFormat = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===MySqlParser.INDEX || _la===MySqlParser.KEY)) {
	                    localctx.indexFormat = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }

	            }
	            this.state = 3514;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,372,this._ctx);
	            if(la_===1) {
	                this.state = 3513;
	                localctx.indexName = this.uid();

	            }
	            this.state = 3517;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.USING) {
	                this.state = 3516;
	                this.indexType();
	            }

	            this.state = 3519;
	            this.indexColumnNames();
	            this.state = 3523;
	            this._errHandler.sync(this);
	            let _alt = this._interp.adaptivePredict(this._input,374,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 3520;
	                    this.indexOption(); 
	                }
	                this.state = 3525;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,374,this._ctx);
	            }

	            break;

	        case 7:
	            localctx = new AlterByAddSpecialIndexContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 3526;
	            this.match(MySqlParser.ADD);
	            this.state = 3527;
	            localctx.keyType = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.FULLTEXT || _la===MySqlParser.SPATIAL)) {
	                localctx.keyType = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 3529;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,375,this._ctx);
	            if(la_===1) {
	                this.state = 3528;
	                localctx.indexFormat = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===MySqlParser.INDEX || _la===MySqlParser.KEY)) {
	                    localctx.indexFormat = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }

	            }
	            this.state = 3532;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,376,this._ctx);
	            if(la_===1) {
	                this.state = 3531;
	                this.uid();

	            }
	            this.state = 3534;
	            this.indexColumnNames();
	            this.state = 3538;
	            this._errHandler.sync(this);
	            let _alt = this._interp.adaptivePredict(this._input,377,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 3535;
	                    this.indexOption(); 
	                }
	                this.state = 3540;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,377,this._ctx);
	            }

	            break;

	        case 8:
	            localctx = new AlterByAddForeignKeyContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 3541;
	            this.match(MySqlParser.ADD);
	            this.state = 3546;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.CONSTRAINT) {
	                this.state = 3542;
	                this.match(MySqlParser.CONSTRAINT);
	                this.state = 3544;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,378,this._ctx);
	                if(la_===1) {
	                    this.state = 3543;
	                    localctx.name = this.uid();

	                }
	            }

	            this.state = 3548;
	            this.match(MySqlParser.FOREIGN);
	            this.state = 3549;
	            this.match(MySqlParser.KEY);
	            this.state = 3551;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,380,this._ctx);
	            if(la_===1) {
	                this.state = 3550;
	                localctx.indexName = this.uid();

	            }
	            this.state = 3553;
	            this.indexColumnNames();
	            this.state = 3554;
	            this.referenceDefinition();
	            break;

	        case 9:
	            localctx = new AlterByAddCheckTableConstraintContext(this, localctx);
	            this.enterOuterAlt(localctx, 9);
	            this.state = 3556;
	            this.match(MySqlParser.ADD);
	            this.state = 3561;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.CONSTRAINT) {
	                this.state = 3557;
	                this.match(MySqlParser.CONSTRAINT);
	                this.state = 3559;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,381,this._ctx);
	                if(la_===1) {
	                    this.state = 3558;
	                    localctx.name = this.uid();

	                }
	            }

	            this.state = 3563;
	            this.match(MySqlParser.CHECK);
	            this.state = 3564;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 3565;
	            this.expression(0);
	            this.state = 3566;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 10:
	            localctx = new AlterBySetAlgorithmContext(this, localctx);
	            this.enterOuterAlt(localctx, 10);
	            this.state = 3568;
	            this.match(MySqlParser.ALGORITHM);
	            this.state = 3570;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 3569;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 3572;
	            localctx.algType = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.DEFAULT || _la===MySqlParser.COPY || _la===MySqlParser.INPLACE)) {
	                localctx.algType = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 11:
	            localctx = new AlterByChangeDefaultContext(this, localctx);
	            this.enterOuterAlt(localctx, 11);
	            this.state = 3573;
	            this.match(MySqlParser.ALTER);
	            this.state = 3575;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,384,this._ctx);
	            if(la_===1) {
	                this.state = 3574;
	                this.match(MySqlParser.COLUMN);

	            }
	            this.state = 3577;
	            this.uid();
	            this.state = 3583;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case MySqlParser.SET:
	                this.state = 3578;
	                this.match(MySqlParser.SET);
	                this.state = 3579;
	                this.match(MySqlParser.DEFAULT);
	                this.state = 3580;
	                this.defaultValue();
	                break;
	            case MySqlParser.DROP:
	                this.state = 3581;
	                this.match(MySqlParser.DROP);
	                this.state = 3582;
	                this.match(MySqlParser.DEFAULT);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 12:
	            localctx = new AlterByChangeColumnContext(this, localctx);
	            this.enterOuterAlt(localctx, 12);
	            this.state = 3585;
	            this.match(MySqlParser.CHANGE);
	            this.state = 3587;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,386,this._ctx);
	            if(la_===1) {
	                this.state = 3586;
	                this.match(MySqlParser.COLUMN);

	            }
	            this.state = 3589;
	            localctx.oldColumn = this.uid();
	            this.state = 3590;
	            localctx.newColumn = this.uid();
	            this.state = 3591;
	            this.columnDefinition();
	            this.state = 3595;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,387,this._ctx);
	            if(la_===1) {
	                this.state = 3592;
	                this.match(MySqlParser.FIRST);

	            } else if(la_===2) {
	                this.state = 3593;
	                this.match(MySqlParser.AFTER);
	                this.state = 3594;
	                localctx.afterColumn = this.uid();

	            }
	            break;

	        case 13:
	            localctx = new AlterByRenameColumnContext(this, localctx);
	            this.enterOuterAlt(localctx, 13);
	            this.state = 3597;
	            this.match(MySqlParser.RENAME);
	            this.state = 3598;
	            this.match(MySqlParser.COLUMN);
	            this.state = 3599;
	            localctx.oldColumn = this.uid();
	            this.state = 3600;
	            this.match(MySqlParser.TO);
	            this.state = 3601;
	            localctx.newColumn = this.uid();
	            break;

	        case 14:
	            localctx = new AlterByLockContext(this, localctx);
	            this.enterOuterAlt(localctx, 14);
	            this.state = 3603;
	            this.match(MySqlParser.LOCK);
	            this.state = 3605;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 3604;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 3607;
	            localctx.lockType = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.DEFAULT || _la===MySqlParser.EXCLUSIVE || _la===MySqlParser.NONE || _la===MySqlParser.SHARED)) {
	                localctx.lockType = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 15:
	            localctx = new AlterByModifyColumnContext(this, localctx);
	            this.enterOuterAlt(localctx, 15);
	            this.state = 3608;
	            this.match(MySqlParser.MODIFY);
	            this.state = 3610;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,389,this._ctx);
	            if(la_===1) {
	                this.state = 3609;
	                this.match(MySqlParser.COLUMN);

	            }
	            this.state = 3612;
	            this.uid();
	            this.state = 3613;
	            this.columnDefinition();
	            this.state = 3617;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,390,this._ctx);
	            if(la_===1) {
	                this.state = 3614;
	                this.match(MySqlParser.FIRST);

	            } else if(la_===2) {
	                this.state = 3615;
	                this.match(MySqlParser.AFTER);
	                this.state = 3616;
	                this.uid();

	            }
	            break;

	        case 16:
	            localctx = new AlterByDropColumnContext(this, localctx);
	            this.enterOuterAlt(localctx, 16);
	            this.state = 3619;
	            this.match(MySqlParser.DROP);
	            this.state = 3621;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,391,this._ctx);
	            if(la_===1) {
	                this.state = 3620;
	                this.match(MySqlParser.COLUMN);

	            }
	            this.state = 3623;
	            this.uid();
	            this.state = 3625;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,392,this._ctx);
	            if(la_===1) {
	                this.state = 3624;
	                this.match(MySqlParser.RESTRICT);

	            }
	            break;

	        case 17:
	            localctx = new AlterByDropPrimaryKeyContext(this, localctx);
	            this.enterOuterAlt(localctx, 17);
	            this.state = 3627;
	            this.match(MySqlParser.DROP);
	            this.state = 3628;
	            this.match(MySqlParser.PRIMARY);
	            this.state = 3629;
	            this.match(MySqlParser.KEY);
	            break;

	        case 18:
	            localctx = new AlterByDropIndexContext(this, localctx);
	            this.enterOuterAlt(localctx, 18);
	            this.state = 3630;
	            this.match(MySqlParser.DROP);
	            this.state = 3631;
	            localctx.indexFormat = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.INDEX || _la===MySqlParser.KEY)) {
	                localctx.indexFormat = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 3632;
	            this.uid();
	            break;

	        case 19:
	            localctx = new AlterByDropForeignKeyContext(this, localctx);
	            this.enterOuterAlt(localctx, 19);
	            this.state = 3633;
	            this.match(MySqlParser.DROP);
	            this.state = 3634;
	            this.match(MySqlParser.FOREIGN);
	            this.state = 3635;
	            this.match(MySqlParser.KEY);
	            this.state = 3636;
	            this.uid();
	            break;

	        case 20:
	            localctx = new AlterByDisableKeysContext(this, localctx);
	            this.enterOuterAlt(localctx, 20);
	            this.state = 3637;
	            this.match(MySqlParser.DISABLE);
	            this.state = 3638;
	            this.match(MySqlParser.KEYS);
	            break;

	        case 21:
	            localctx = new AlterByEnableKeysContext(this, localctx);
	            this.enterOuterAlt(localctx, 21);
	            this.state = 3639;
	            this.match(MySqlParser.ENABLE);
	            this.state = 3640;
	            this.match(MySqlParser.KEYS);
	            break;

	        case 22:
	            localctx = new AlterByRenameContext(this, localctx);
	            this.enterOuterAlt(localctx, 22);
	            this.state = 3641;
	            this.match(MySqlParser.RENAME);
	            this.state = 3643;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,393,this._ctx);
	            if(la_===1) {
	                this.state = 3642;
	                localctx.renameFormat = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===MySqlParser.AS || _la===MySqlParser.TO)) {
	                    localctx.renameFormat = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }

	            }
	            this.state = 3647;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,394,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 3645;
	                this.uid();
	                break;

	            case 2:
	                this.state = 3646;
	                this.fullId();
	                break;

	            }
	            break;

	        case 23:
	            localctx = new AlterByOrderContext(this, localctx);
	            this.enterOuterAlt(localctx, 23);
	            this.state = 3649;
	            this.match(MySqlParser.ORDER);
	            this.state = 3650;
	            this.match(MySqlParser.BY);
	            this.state = 3651;
	            this.uidList();
	            break;

	        case 24:
	            localctx = new AlterByConvertCharsetContext(this, localctx);
	            this.enterOuterAlt(localctx, 24);
	            this.state = 3652;
	            this.match(MySqlParser.CONVERT);
	            this.state = 3653;
	            this.match(MySqlParser.TO);
	            this.state = 3654;
	            this.match(MySqlParser.CHARACTER);
	            this.state = 3655;
	            this.match(MySqlParser.SET);
	            this.state = 3656;
	            this.charsetName();
	            this.state = 3659;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,395,this._ctx);
	            if(la_===1) {
	                this.state = 3657;
	                this.match(MySqlParser.COLLATE);
	                this.state = 3658;
	                this.collationName();

	            }
	            break;

	        case 25:
	            localctx = new AlterByDefaultCharsetContext(this, localctx);
	            this.enterOuterAlt(localctx, 25);
	            this.state = 3662;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.DEFAULT) {
	                this.state = 3661;
	                this.match(MySqlParser.DEFAULT);
	            }

	            this.state = 3664;
	            this.match(MySqlParser.CHARACTER);
	            this.state = 3665;
	            this.match(MySqlParser.SET);
	            this.state = 3666;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 3667;
	            this.charsetName();
	            this.state = 3671;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,397,this._ctx);
	            if(la_===1) {
	                this.state = 3668;
	                this.match(MySqlParser.COLLATE);
	                this.state = 3669;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	                this.state = 3670;
	                this.collationName();

	            }
	            break;

	        case 26:
	            localctx = new AlterByDiscardTablespaceContext(this, localctx);
	            this.enterOuterAlt(localctx, 26);
	            this.state = 3673;
	            this.match(MySqlParser.DISCARD);
	            this.state = 3674;
	            this.match(MySqlParser.TABLESPACE);
	            break;

	        case 27:
	            localctx = new AlterByImportTablespaceContext(this, localctx);
	            this.enterOuterAlt(localctx, 27);
	            this.state = 3675;
	            this.match(MySqlParser.IMPORT);
	            this.state = 3676;
	            this.match(MySqlParser.TABLESPACE);
	            break;

	        case 28:
	            localctx = new AlterByForceContext(this, localctx);
	            this.enterOuterAlt(localctx, 28);
	            this.state = 3677;
	            this.match(MySqlParser.FORCE);
	            break;

	        case 29:
	            localctx = new AlterByValidateContext(this, localctx);
	            this.enterOuterAlt(localctx, 29);
	            this.state = 3678;
	            localctx.validationFormat = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.WITH || _la===MySqlParser.WITHOUT)) {
	                localctx.validationFormat = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 3679;
	            this.match(MySqlParser.VALIDATION);
	            break;

	        case 30:
	            localctx = new AlterByAddPartitionContext(this, localctx);
	            this.enterOuterAlt(localctx, 30);
	            this.state = 3680;
	            this.match(MySqlParser.ADD);
	            this.state = 3681;
	            this.match(MySqlParser.PARTITION);
	            this.state = 3682;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 3683;
	            this.partitionDefinition();
	            this.state = 3688;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.COMMA) {
	                this.state = 3684;
	                this.match(MySqlParser.COMMA);
	                this.state = 3685;
	                this.partitionDefinition();
	                this.state = 3690;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 3691;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 31:
	            localctx = new AlterByDropPartitionContext(this, localctx);
	            this.enterOuterAlt(localctx, 31);
	            this.state = 3693;
	            this.match(MySqlParser.DROP);
	            this.state = 3694;
	            this.match(MySqlParser.PARTITION);
	            this.state = 3695;
	            this.uidList();
	            break;

	        case 32:
	            localctx = new AlterByDiscardPartitionContext(this, localctx);
	            this.enterOuterAlt(localctx, 32);
	            this.state = 3696;
	            this.match(MySqlParser.DISCARD);
	            this.state = 3697;
	            this.match(MySqlParser.PARTITION);
	            this.state = 3700;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,399,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 3698;
	                this.uidList();
	                break;

	            case 2:
	                this.state = 3699;
	                this.match(MySqlParser.ALL);
	                break;

	            }
	            this.state = 3702;
	            this.match(MySqlParser.TABLESPACE);
	            break;

	        case 33:
	            localctx = new AlterByImportPartitionContext(this, localctx);
	            this.enterOuterAlt(localctx, 33);
	            this.state = 3703;
	            this.match(MySqlParser.IMPORT);
	            this.state = 3704;
	            this.match(MySqlParser.PARTITION);
	            this.state = 3707;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,400,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 3705;
	                this.uidList();
	                break;

	            case 2:
	                this.state = 3706;
	                this.match(MySqlParser.ALL);
	                break;

	            }
	            this.state = 3709;
	            this.match(MySqlParser.TABLESPACE);
	            break;

	        case 34:
	            localctx = new AlterByTruncatePartitionContext(this, localctx);
	            this.enterOuterAlt(localctx, 34);
	            this.state = 3710;
	            this.match(MySqlParser.TRUNCATE);
	            this.state = 3711;
	            this.match(MySqlParser.PARTITION);
	            this.state = 3714;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,401,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 3712;
	                this.uidList();
	                break;

	            case 2:
	                this.state = 3713;
	                this.match(MySqlParser.ALL);
	                break;

	            }
	            break;

	        case 35:
	            localctx = new AlterByCoalescePartitionContext(this, localctx);
	            this.enterOuterAlt(localctx, 35);
	            this.state = 3716;
	            this.match(MySqlParser.COALESCE);
	            this.state = 3717;
	            this.match(MySqlParser.PARTITION);
	            this.state = 3718;
	            this.decimalLiteral();
	            break;

	        case 36:
	            localctx = new AlterByReorganizePartitionContext(this, localctx);
	            this.enterOuterAlt(localctx, 36);
	            this.state = 3719;
	            this.match(MySqlParser.REORGANIZE);
	            this.state = 3720;
	            this.match(MySqlParser.PARTITION);
	            this.state = 3721;
	            this.uidList();
	            this.state = 3722;
	            this.match(MySqlParser.INTO);
	            this.state = 3723;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 3724;
	            this.partitionDefinition();
	            this.state = 3729;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.COMMA) {
	                this.state = 3725;
	                this.match(MySqlParser.COMMA);
	                this.state = 3726;
	                this.partitionDefinition();
	                this.state = 3731;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 3732;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 37:
	            localctx = new AlterByExchangePartitionContext(this, localctx);
	            this.enterOuterAlt(localctx, 37);
	            this.state = 3734;
	            this.match(MySqlParser.EXCHANGE);
	            this.state = 3735;
	            this.match(MySqlParser.PARTITION);
	            this.state = 3736;
	            this.uid();
	            this.state = 3737;
	            this.match(MySqlParser.WITH);
	            this.state = 3738;
	            this.match(MySqlParser.TABLE);
	            this.state = 3739;
	            this.tableName();
	            this.state = 3742;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,403,this._ctx);
	            if(la_===1) {
	                this.state = 3740;
	                localctx.validationFormat = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===MySqlParser.WITH || _la===MySqlParser.WITHOUT)) {
	                    localctx.validationFormat = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 3741;
	                this.match(MySqlParser.VALIDATION);

	            }
	            break;

	        case 38:
	            localctx = new AlterByAnalyzePartitionContext(this, localctx);
	            this.enterOuterAlt(localctx, 38);
	            this.state = 3744;
	            this.match(MySqlParser.ANALYZE);
	            this.state = 3745;
	            this.match(MySqlParser.PARTITION);
	            this.state = 3748;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,404,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 3746;
	                this.uidList();
	                break;

	            case 2:
	                this.state = 3747;
	                this.match(MySqlParser.ALL);
	                break;

	            }
	            break;

	        case 39:
	            localctx = new AlterByCheckPartitionContext(this, localctx);
	            this.enterOuterAlt(localctx, 39);
	            this.state = 3750;
	            this.match(MySqlParser.CHECK);
	            this.state = 3751;
	            this.match(MySqlParser.PARTITION);
	            this.state = 3754;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,405,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 3752;
	                this.uidList();
	                break;

	            case 2:
	                this.state = 3753;
	                this.match(MySqlParser.ALL);
	                break;

	            }
	            break;

	        case 40:
	            localctx = new AlterByOptimizePartitionContext(this, localctx);
	            this.enterOuterAlt(localctx, 40);
	            this.state = 3756;
	            this.match(MySqlParser.OPTIMIZE);
	            this.state = 3757;
	            this.match(MySqlParser.PARTITION);
	            this.state = 3760;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,406,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 3758;
	                this.uidList();
	                break;

	            case 2:
	                this.state = 3759;
	                this.match(MySqlParser.ALL);
	                break;

	            }
	            break;

	        case 41:
	            localctx = new AlterByRebuildPartitionContext(this, localctx);
	            this.enterOuterAlt(localctx, 41);
	            this.state = 3762;
	            this.match(MySqlParser.REBUILD);
	            this.state = 3763;
	            this.match(MySqlParser.PARTITION);
	            this.state = 3766;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,407,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 3764;
	                this.uidList();
	                break;

	            case 2:
	                this.state = 3765;
	                this.match(MySqlParser.ALL);
	                break;

	            }
	            break;

	        case 42:
	            localctx = new AlterByRepairPartitionContext(this, localctx);
	            this.enterOuterAlt(localctx, 42);
	            this.state = 3768;
	            this.match(MySqlParser.REPAIR);
	            this.state = 3769;
	            this.match(MySqlParser.PARTITION);
	            this.state = 3772;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,408,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 3770;
	                this.uidList();
	                break;

	            case 2:
	                this.state = 3771;
	                this.match(MySqlParser.ALL);
	                break;

	            }
	            break;

	        case 43:
	            localctx = new AlterByRemovePartitioningContext(this, localctx);
	            this.enterOuterAlt(localctx, 43);
	            this.state = 3774;
	            this.match(MySqlParser.REMOVE);
	            this.state = 3775;
	            this.match(MySqlParser.PARTITIONING);
	            break;

	        case 44:
	            localctx = new AlterByUpgradePartitioningContext(this, localctx);
	            this.enterOuterAlt(localctx, 44);
	            this.state = 3776;
	            this.match(MySqlParser.UPGRADE);
	            this.state = 3777;
	            this.match(MySqlParser.PARTITIONING);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterSpecificationInceptor() {
	    let localctx = new AlterSpecificationInceptorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 240, MySqlParser.RULE_alterSpecificationInceptor);
	    var _la = 0; // Token type
	    try {
	        this.state = 3834;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,416,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new AlterByRenameTableContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3780;
	            this.match(MySqlParser.RENAME);
	            this.state = 3781;
	            this.match(MySqlParser.TO);
	            this.state = 3782;
	            this.tableName();
	            break;

	        case 2:
	            localctx = new AlterBySetTbpropertiesContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3783;
	            this.match(MySqlParser.SET);
	            this.state = 3794;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case MySqlParser.TBLPROPERTIES:
	                this.state = 3784;
	                this.match(MySqlParser.TBLPROPERTIES);
	                this.state = 3785;
	                this.match(MySqlParser.LR_BRACKET);
	                this.state = 3786;
	                this.keyValueProperties();
	                this.state = 3787;
	                this.match(MySqlParser.RR_BRACKET);
	                break;
	            case MySqlParser.SERDEPROPERTIES:
	                this.state = 3789;
	                this.match(MySqlParser.SERDEPROPERTIES);
	                this.state = 3790;
	                this.match(MySqlParser.LR_BRACKET);
	                this.state = 3791;
	                this.keyValueProperties();
	                this.state = 3792;
	                this.match(MySqlParser.RR_BRACKET);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 3:
	            localctx = new AlterByUnSetTbpropertiesContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3796;
	            this.match(MySqlParser.UNSET);
	            this.state = 3797;
	            this.match(MySqlParser.TBLPROPERTIES);
	            this.state = 3799;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.IF) {
	                this.state = 3798;
	                this.ifExists();
	            }

	            this.state = 3801;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 3802;
	            this.uidList();
	            this.state = 3803;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 4:
	            localctx = new AlterBySetLocationContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3805;
	            this.setLocationDefinition();
	            break;

	        case 5:
	            localctx = new AlterByErrorLogContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3806;
	            this.match(MySqlParser.SET);
	            this.state = 3807;
	            this.match(MySqlParser.ERRORS);
	            this.state = 3808;
	            this.match(MySqlParser.LOG);
	            this.state = 3810;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.ON || _la===MySqlParser.OFF) {
	                this.state = 3809;
	                _la = this._input.LA(1);
	                if(!(_la===MySqlParser.ON || _la===MySqlParser.OFF)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 3812;
	            this.intoTable();
	            this.state = 3815;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,413,this._ctx);
	            if(la_===1) {
	                this.state = 3813;
	                this.match(MySqlParser.OVERWRITE);
	                this.state = 3814;
	                _la = this._input.LA(1);
	                if(!(_la===MySqlParser.ON || _la===MySqlParser.OFF)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }

	            }
	            this.state = 3819;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,414,this._ctx);
	            if(la_===1) {
	                this.state = 3817;
	                this.match(MySqlParser.REJECT);
	                this.state = 3818;
	                _la = this._input.LA(1);
	                if(!(_la===MySqlParser.ON || _la===MySqlParser.OFF)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }

	            }
	            this.state = 3825;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,415,this._ctx);
	            if(la_===1) {
	                this.state = 3821;
	                this.match(MySqlParser.LIMIT);
	                this.state = 3822;
	                this.constant();
	                this.state = 3823;
	                _la = this._input.LA(1);
	                if(!(_la===MySqlParser.PERCENT || _la===MySqlParser.ROWS)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }

	            }
	            break;

	        case 6:
	            localctx = new AlterByColumnContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 3827;
	            this.alterSpecificationColumn();
	            break;

	        case 7:
	            localctx = new AlterByPartitionContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 3828;
	            this.alterSpecificationPartition();
	            break;

	        case 8:
	            localctx = new AlterBySkewedContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 3829;
	            this.alterSpecificationSkewed();
	            break;

	        case 9:
	            localctx = new AlterByAddConstraintContext(this, localctx);
	            this.enterOuterAlt(localctx, 9);
	            this.state = 3830;
	            this.alterSpecificationConstraint();
	            break;

	        case 10:
	            localctx = new AlterByPlaceholerContext(this, localctx);
	            this.enterOuterAlt(localctx, 10);
	            this.state = 3831;
	            localctx._alterSpecificationAnchor = this.alterSpecificationAnchor();

	                    this.notifyPlaceholderError(localctx._alterSpecificationAnchor, 'Please provide alter specification')
	                  
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	intoTable() {
	    let localctx = new IntoTableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 242, MySqlParser.RULE_intoTable);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3836;
	        this.match(MySqlParser.INTO);
	        this.state = 3837;
	        this.tableName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterSpecificationAnchor() {
	    let localctx = new AlterSpecificationAnchorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 244, MySqlParser.RULE_alterSpecificationAnchor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3839;
	        this.placeholder();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterSpecificationColumn() {
	    let localctx = new AlterSpecificationColumnContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 246, MySqlParser.RULE_alterSpecificationColumn);
	    var _la = 0; // Token type
	    try {
	        this.state = 3869;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.ADD:
	        case MySqlParser.REPLACE:
	            localctx = new AlterSpecificationColumnAddContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3841;
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.ADD || _la===MySqlParser.REPLACE)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 3842;
	            this.match(MySqlParser.COLUMNS);
	            this.state = 3843;
	            this.createDefinitions();
	            this.state = 3845;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,417,this._ctx);
	            if(la_===1) {
	                this.state = 3844;
	                this.restrictOrCascade();

	            }
	            break;
	        case MySqlParser.DELETE:
	            localctx = new AlterSpecificationColumnDeleteContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3847;
	            this.match(MySqlParser.DELETE);
	            this.state = 3848;
	            this.match(MySqlParser.COLUMNS);
	            this.state = 3849;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 3850;
	            this.uidList();
	            this.state = 3851;
	            this.match(MySqlParser.RR_BRACKET);
	            this.state = 3853;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,418,this._ctx);
	            if(la_===1) {
	                this.state = 3852;
	                this.restrictOrCascade();

	            }
	            break;
	        case MySqlParser.CHANGE:
	            localctx = new AlterSpecificationColumnRenameContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3855;
	            this.match(MySqlParser.CHANGE);
	            this.state = 3856;
	            this.match(MySqlParser.COLUMN);
	            this.state = 3857;
	            localctx.column = this.uid();
	            this.state = 3859;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,419,this._ctx);
	            if(la_===1) {
	                this.state = 3858;
	                localctx._createColumnDeclaration = this.createColumnDeclaration();

	            }

	                   this.checkContextExist(localctx._createColumnDeclaration, 'Please define change to column');
	                 
	            this.state = 3864;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,420,this._ctx);
	            if(la_===1) {
	                this.state = 3862;
	                _la = this._input.LA(1);
	                if(!(_la===MySqlParser.FIRST || _la===MySqlParser.LAST)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 3863;
	                this.uid();

	            }
	            this.state = 3867;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,421,this._ctx);
	            if(la_===1) {
	                this.state = 3866;
	                this.restrictOrCascade();

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterSpecificationPartition() {
	    let localctx = new AlterSpecificationPartitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 248, MySqlParser.RULE_alterSpecificationPartition);
	    var _la = 0; // Token type
	    try {
	        this.state = 3936;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,434,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new AlterSpecificationPartitionAddContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3871;
	            this.match(MySqlParser.ADD);
	            this.state = 3873;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.IF) {
	                this.state = 3872;
	                this.ifNotExists();
	            }

	            this.state = 3885;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,426,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 3876; 
	                this._errHandler.sync(this);
	                let _alt = 1;
	                do {
	                	switch (_alt) {
	                	case 1:
	                		this.state = 3875;
	                		this.partitionPlus();
	                		break;
	                	default:
	                		throw new antlr4.error.NoViableAltException(this);
	                	}
	                	this.state = 3878; 
	                	this._errHandler.sync(this);
	                	_alt = this._interp.adaptivePredict(this._input,424, this._ctx);
	                } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	                break;

	            case 2:
	                this.state = 3881; 
	                this._errHandler.sync(this);
	                let _alt = 1;
	                do {
	                	switch (_alt) {
	                	case 1:
	                		this.state = 3880;
	                		this.rangePartition();
	                		break;
	                	default:
	                		throw new antlr4.error.NoViableAltException(this);
	                	}
	                	this.state = 3883; 
	                	this._errHandler.sync(this);
	                	_alt = this._interp.adaptivePredict(this._input,425, this._ctx);
	                } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	                break;

	            }
	            break;

	        case 2:
	            localctx = new AlterSpecificationPartitionDropContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3887;
	            this.match(MySqlParser.DROP);
	            this.state = 3889;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.IF) {
	                this.state = 3888;
	                this.ifExists();
	            }

	            this.state = 3891;
	            this.match(MySqlParser.PARTITION);
	            this.state = 3904;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,429,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 3892;
	                this.uidList();
	                break;

	            case 2:
	                this.state = 3893;
	                this.match(MySqlParser.LR_BRACKET);
	                this.state = 3894;
	                this.dropPartitionAtom();
	                this.state = 3899;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===MySqlParser.COMMA) {
	                    this.state = 3895;
	                    this.match(MySqlParser.COMMA);
	                    this.state = 3896;
	                    this.dropPartitionAtom();
	                    this.state = 3901;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 3902;
	                this.match(MySqlParser.RR_BRACKET);
	                break;

	            }
	            this.state = 3908;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,430,this._ctx);
	            if(la_===1) {
	                this.state = 3906;
	                this.match(MySqlParser.IGNORE);
	                this.state = 3907;
	                this.match(MySqlParser.PROTECTION);

	            }
	            this.state = 3911;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,431,this._ctx);
	            if(la_===1) {
	                this.state = 3910;
	                this.match(MySqlParser.PURGE);

	            }
	            break;

	        case 3:
	            localctx = new AlterSpecificationPartitionArchiveContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3913;
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.TOUCH || _la===MySqlParser.UNARCHIVE || _la===MySqlParser.ARCHIVE)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 3917;
	            this._errHandler.sync(this);
	            let _alt = this._interp.adaptivePredict(this._input,432,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 3914;
	                    this.partitionSpec(); 
	                }
	                this.state = 3919;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,432,this._ctx);
	            }

	            break;

	        case 4:
	            localctx = new AlterSpecificationPartitionExchangeContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3920;
	            this.match(MySqlParser.EXCHANGE);
	            this.state = 3921;
	            this.partitionSpec();
	            this.state = 3922;
	            this.match(MySqlParser.WITH);
	            this.state = 3923;
	            this.match(MySqlParser.TABLE);
	            this.state = 3924;
	            this.tableName();
	            break;

	        case 5:
	            localctx = new AlterSpecificationPartitionColumnContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3926;
	            this.match(MySqlParser.PARTITION);
	            this.state = 3927;
	            this.match(MySqlParser.COLUMN);
	            this.state = 3928;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 3929;
	            this.createDefinition();
	            this.state = 3930;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 6:
	            localctx = new AlterSpecificationPartitionOptionsContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 3933;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.PARTITION) {
	                this.state = 3932;
	                this.partitionSpec();
	            }

	            this.state = 3935;
	            this.alterTablePartitionOption();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterTablePartitionOption() {
	    let localctx = new AlterTablePartitionOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 250, MySqlParser.RULE_alterTablePartitionOption);
	    var _la = 0; // Token type
	    try {
	        this.state = 3993;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,442,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3938;
	            this.match(MySqlParser.SET);
	            this.state = 3939;
	            this.match(MySqlParser.FILEFORMAT);
	            this.state = 3940;
	            this.fileFormat();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3941;
	            this.setLocationDefinition();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3942;
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.DISABLE || _la===MySqlParser.ENABLE)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 3949;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case MySqlParser.OFFLINE:
	                this.state = 3943;
	                this.match(MySqlParser.OFFLINE);
	                break;
	            case MySqlParser.NO_DROP:
	                this.state = 3944;
	                this.match(MySqlParser.NO_DROP);
	                this.state = 3946;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,435,this._ctx);
	                if(la_===1) {
	                    this.state = 3945;
	                    this.match(MySqlParser.CASCADE);

	                }
	                break;
	            case MySqlParser.READONLY:
	                this.state = 3948;
	                this.match(MySqlParser.READONLY);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3951;
	            this.match(MySqlParser.CONCATENATE);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3952;
	            this.setSerde();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 3953;
	            this.match(MySqlParser.SET);
	            this.state = 3954;
	            this.match(MySqlParser.SERDEPROPERTIES);
	            this.state = 3955;
	            this.keyOrValueProperties();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 3956;
	            this.match(MySqlParser.RENAME);
	            this.state = 3957;
	            this.match(MySqlParser.TO);
	            this.state = 3958;
	            this.partitionSpec();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 3959;
	            this.intoBuckets();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 3960;
	            this.match(MySqlParser.NOT);
	            this.state = 3961;
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.CLUSTERED || _la===MySqlParser.SORTED)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 3962;
	            this.tableBuckets();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 3977;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case MySqlParser.COMPACT:
	                this.state = 3963;
	                this.match(MySqlParser.COMPACT);
	                this.state = 3964;
	                this.stringLiteral();
	                this.state = 3967;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,437,this._ctx);
	                if(la_===1) {
	                    this.state = 3965;
	                    this.match(MySqlParser.AND);
	                    this.state = 3966;
	                    this.match(MySqlParser.WAIT);

	                }
	                break;
	            case MySqlParser.ENABLE:
	                this.state = 3969;
	                this.match(MySqlParser.ENABLE);
	                this.state = 3970;
	                this.match(MySqlParser.COMPACT);
	                break;
	            case MySqlParser.DISABLE:
	                this.state = 3971;
	                this.match(MySqlParser.DISABLE);
	                this.state = 3972;
	                this.match(MySqlParser.COMPACT);
	                this.state = 3975;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,438,this._ctx);
	                if(la_===1) {
	                    this.state = 3973;
	                    this.match(MySqlParser.FOR);
	                    this.state = 3974;
	                    this.stringLiteral();

	                }
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 3979;
	            this.match(MySqlParser.UPDATE);
	            this.state = 3980;
	            this.match(MySqlParser.STATISTICS);
	            this.state = 3981;
	            this.match(MySqlParser.FOR);
	            this.state = 3983;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,440,this._ctx);
	            if(la_===1) {
	                this.state = 3982;
	                this.match(MySqlParser.COLUMNS);

	            }
	            this.state = 3985;
	            localctx.column = this.uid();
	            this.state = 3986;
	            this.match(MySqlParser.SET);
	            this.state = 3987;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 3988;
	            this.keyOrValueProperties();
	            this.state = 3989;
	            this.match(MySqlParser.RR_BRACKET);
	            this.state = 3991;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,441,this._ctx);
	            if(la_===1) {
	                this.state = 3990;
	                this.commentClause();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterSpecificationSkewed() {
	    let localctx = new AlterSpecificationSkewedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 252, MySqlParser.RULE_alterSpecificationSkewed);
	    try {
	        this.state = 4002;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,443,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3995;
	            this.tableSkewed();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3996;
	            this.match(MySqlParser.NOT);
	            this.state = 3997;
	            this.match(MySqlParser.SKEWED);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3998;
	            this.match(MySqlParser.NOT);
	            this.state = 3999;
	            this.match(MySqlParser.STORED);
	            this.state = 4000;
	            this.match(MySqlParser.AS);
	            this.state = 4001;
	            this.match(MySqlParser.DIRECTORIES);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterSpecificationConstraint() {
	    let localctx = new AlterSpecificationConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 254, MySqlParser.RULE_alterSpecificationConstraint);
	    var _la = 0; // Token type
	    try {
	        this.state = 4037;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,448,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new AlterSpecificationConstraintForeignKeyContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4004;
	            this.match(MySqlParser.ADD);
	            this.state = 4007;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.CONSTRAINT) {
	                this.state = 4005;
	                this.match(MySqlParser.CONSTRAINT);
	                this.state = 4006;
	                this.uid();
	            }

	            this.state = 4009;
	            this.match(MySqlParser.FOREIGN);
	            this.state = 4010;
	            this.match(MySqlParser.KEY);
	            this.state = 4011;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 4012;
	            localctx.columns = this.uidList();
	            this.state = 4014;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,445,this._ctx);
	            if(la_===1) {
	                this.state = 4013;
	                this.match(MySqlParser.RR_BRACKET);

	            }
	            this.state = 4017;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,446,this._ctx);
	            if(la_===1) {
	                this.state = 4016;
	                localctx._foreignKeyReferences = this.foreignKeyReferences();

	            }
	            this.state = 4019;
	            this.constraintOpts();

	                    this.checkContextExist(localctx._foreignKeyReferences, 'Please define foreign key');
	                  
	            break;

	        case 2:
	            localctx = new AlterSpecificationConstraintPrimaryKeyContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4022;
	            this.match(MySqlParser.ADD);
	            this.state = 4025;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.CONSTRAINT) {
	                this.state = 4023;
	                this.match(MySqlParser.CONSTRAINT);
	                this.state = 4024;
	                this.uid();
	            }

	            this.state = 4027;
	            this.match(MySqlParser.PRIMARY);
	            this.state = 4028;
	            this.match(MySqlParser.KEY);
	            this.state = 4029;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 4030;
	            this.uidList();
	            this.state = 4031;
	            this.match(MySqlParser.RR_BRACKET);
	            this.state = 4032;
	            this.constraintOpts();
	            break;

	        case 3:
	            localctx = new AlterSpecificationConstraintDropContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4034;
	            this.match(MySqlParser.DROP);
	            this.state = 4035;
	            this.match(MySqlParser.CONSTRAINT);
	            this.state = 4036;
	            this.uid();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	foreignKeyReferences() {
	    let localctx = new ForeignKeyReferencesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 256, MySqlParser.RULE_foreignKeyReferences);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4039;
	        this.match(MySqlParser.REFERENCES);
	        this.state = 4040;
	        this.tableName();
	        this.state = 4045;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,449,this._ctx);
	        if(la_===1) {
	            this.state = 4041;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 4042;
	            localctx.refs = localctx._uidList = this.uidList();
	            this.state = 4043;
	            this.match(MySqlParser.RR_BRACKET);

	        }

	                this.checkContextExist(localctx._uidList, 'Please define reference colunm');
	              
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	restrictOrCascade() {
	    let localctx = new RestrictOrCascadeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 258, MySqlParser.RULE_restrictOrCascade);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4049;
	        _la = this._input.LA(1);
	        if(!(_la===MySqlParser.CASCADE || _la===MySqlParser.RESTRICT)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropDatabase() {
	    let localctx = new DropDatabaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 260, MySqlParser.RULE_dropDatabase);
	    var _la = 0; // Token type
	    try {
	        this.state = 4068;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,453,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4051;
	            if (!( this.isDialect('mysql'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('mysql')");
	            }
	            this.state = 4052;
	            this.match(MySqlParser.DROP);
	            this.state = 4053;
	            localctx.dbFormat = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.DATABASE || _la===MySqlParser.SCHEMA)) {
	                localctx.dbFormat = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 4055;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,450,this._ctx);
	            if(la_===1) {
	                this.state = 4054;
	                this.ifExists();

	            }
	            this.state = 4057;
	            this.databaseName();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4058;
	            if (!( this.isDialect('inceptor'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('inceptor')");
	            }
	            this.state = 4059;
	            this.match(MySqlParser.DROP);
	            this.state = 4060;
	            localctx.dbFormat = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.DATABASE || _la===MySqlParser.SCHEMA)) {
	                localctx.dbFormat = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 4062;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,451,this._ctx);
	            if(la_===1) {
	                this.state = 4061;
	                this.ifExists();

	            }
	            this.state = 4064;
	            this.databaseName();
	            this.state = 4066;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,452,this._ctx);
	            if(la_===1) {
	                this.state = 4065;
	                this.restrictOrCascade();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropEvent() {
	    let localctx = new DropEventContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 262, MySqlParser.RULE_dropEvent);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4070;
	        this.match(MySqlParser.DROP);
	        this.state = 4071;
	        this.match(MySqlParser.EVENT);
	        this.state = 4073;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,454,this._ctx);
	        if(la_===1) {
	            this.state = 4072;
	            this.ifExists();

	        }
	        this.state = 4075;
	        this.fullId();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropIndex() {
	    let localctx = new DropIndexContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 264, MySqlParser.RULE_dropIndex);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4077;
	        this.match(MySqlParser.DROP);
	        this.state = 4078;
	        this.match(MySqlParser.INDEX);
	        this.state = 4080;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,455,this._ctx);
	        if(la_===1) {
	            this.state = 4079;
	            localctx.intimeAction = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.OFFLINE || _la===MySqlParser.ONLINE)) {
	                localctx.intimeAction = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }

	        }
	        this.state = 4082;
	        this.uid();
	        this.state = 4083;
	        this.match(MySqlParser.ON);
	        this.state = 4084;
	        this.tableName();
	        this.state = 4090;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,457,this._ctx);
	        if(la_===1) {
	            this.state = 4085;
	            this.match(MySqlParser.ALGORITHM);
	            this.state = 4087;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 4086;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 4089;
	            localctx.algType = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.DEFAULT || _la===MySqlParser.COPY || _la===MySqlParser.INPLACE)) {
	                localctx.algType = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }

	        }
	        this.state = 4097;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,459,this._ctx);
	        if(la_===1) {
	            this.state = 4092;
	            this.match(MySqlParser.LOCK);
	            this.state = 4094;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 4093;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 4096;
	            localctx.lockType = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.DEFAULT || _la===MySqlParser.EXCLUSIVE || _la===MySqlParser.NONE || _la===MySqlParser.SHARED)) {
	                localctx.lockType = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropLogfileGroup() {
	    let localctx = new DropLogfileGroupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 266, MySqlParser.RULE_dropLogfileGroup);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4099;
	        this.match(MySqlParser.DROP);
	        this.state = 4100;
	        this.match(MySqlParser.LOGFILE);
	        this.state = 4101;
	        this.match(MySqlParser.GROUP);
	        this.state = 4102;
	        this.uid();
	        this.state = 4103;
	        this.match(MySqlParser.ENGINE);
	        this.state = 4104;
	        this.match(MySqlParser.EQUAL_SYMBOL);
	        this.state = 4105;
	        this.engineName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropProcedure() {
	    let localctx = new DropProcedureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 268, MySqlParser.RULE_dropProcedure);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4107;
	        this.match(MySqlParser.DROP);
	        this.state = 4108;
	        this.match(MySqlParser.PROCEDURE);
	        this.state = 4110;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,460,this._ctx);
	        if(la_===1) {
	            this.state = 4109;
	            this.ifExists();

	        }
	        this.state = 4112;
	        this.procName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropFunction() {
	    let localctx = new DropFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 270, MySqlParser.RULE_dropFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4114;
	        this.match(MySqlParser.DROP);
	        this.state = 4116;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,461,this._ctx);
	        if(la_===1) {
	            this.state = 4115;
	            this.functionType();

	        }
	        this.state = 4118;
	        this.match(MySqlParser.FUNCTION);
	        this.state = 4120;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,462,this._ctx);
	        if(la_===1) {
	            this.state = 4119;
	            this.ifExists();

	        }
	        this.state = 4122;
	        this.funcName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropServer() {
	    let localctx = new DropServerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 272, MySqlParser.RULE_dropServer);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4124;
	        this.match(MySqlParser.DROP);
	        this.state = 4125;
	        this.match(MySqlParser.SERVER);
	        this.state = 4127;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,463,this._ctx);
	        if(la_===1) {
	            this.state = 4126;
	            this.ifExists();

	        }
	        this.state = 4129;
	        this.uid();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropTable() {
	    let localctx = new DropTableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 274, MySqlParser.RULE_dropTable);
	    var _la = 0; // Token type
	    try {
	        this.state = 4157;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,470,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4131;
	            if (!( this.isDialect('mysql'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('mysql')");
	            }
	            this.state = 4132;
	            this.match(MySqlParser.DROP);
	            this.state = 4134;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.TEMPORARY) {
	                this.state = 4133;
	                this.match(MySqlParser.TEMPORARY);
	            }

	            this.state = 4136;
	            this.match(MySqlParser.TABLE);
	            this.state = 4138;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,465,this._ctx);
	            if(la_===1) {
	                this.state = 4137;
	                this.ifExists();

	            }
	            this.state = 4140;
	            this.tables();
	            this.state = 4142;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,466,this._ctx);
	            if(la_===1) {
	                this.state = 4141;
	                localctx.dropType = this.restrictOrCascade();

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4144;
	            if (!( this.isDialect('inceptor'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('inceptor')");
	            }
	            this.state = 4145;
	            this.match(MySqlParser.DROP);
	            this.state = 4147;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.TEMPORARY) {
	                this.state = 4146;
	                this.match(MySqlParser.TEMPORARY);
	            }

	            this.state = 4149;
	            this.match(MySqlParser.TABLE);
	            this.state = 4151;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,468,this._ctx);
	            if(la_===1) {
	                this.state = 4150;
	                this.ifExists();

	            }
	            this.state = 4153;
	            this.tableName();
	            this.state = 4155;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,469,this._ctx);
	            if(la_===1) {
	                this.state = 4154;
	                this.match(MySqlParser.PURGE);

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropTablespace() {
	    let localctx = new DropTablespaceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 276, MySqlParser.RULE_dropTablespace);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4159;
	        this.match(MySqlParser.DROP);
	        this.state = 4160;
	        this.match(MySqlParser.TABLESPACE);
	        this.state = 4161;
	        this.uid();
	        this.state = 4167;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,472,this._ctx);
	        if(la_===1) {
	            this.state = 4162;
	            this.match(MySqlParser.ENGINE);
	            this.state = 4164;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 4163;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 4166;
	            this.engineName();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropTrigger() {
	    let localctx = new DropTriggerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 278, MySqlParser.RULE_dropTrigger);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4169;
	        this.match(MySqlParser.DROP);
	        this.state = 4170;
	        this.match(MySqlParser.TRIGGER);
	        this.state = 4172;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,473,this._ctx);
	        if(la_===1) {
	            this.state = 4171;
	            this.ifExists();

	        }
	        this.state = 4174;
	        this.fullId();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropView() {
	    let localctx = new DropViewContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 280, MySqlParser.RULE_dropView);
	    try {
	        this.state = 4200;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,478,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4176;
	            if (!( this.isDialect('mysql'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('mysql')");
	            }
	            this.state = 4177;
	            this.match(MySqlParser.DROP);
	            this.state = 4178;
	            this.match(MySqlParser.VIEW);
	            this.state = 4180;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,474,this._ctx);
	            if(la_===1) {
	                this.state = 4179;
	                this.ifExists();

	            }
	            this.state = 4182;
	            this.viewName();
	            this.state = 4187;
	            this._errHandler.sync(this);
	            let _alt = this._interp.adaptivePredict(this._input,475,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 4183;
	                    this.match(MySqlParser.COMMA);
	                    this.state = 4184;
	                    this.viewName(); 
	                }
	                this.state = 4189;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,475,this._ctx);
	            }

	            this.state = 4191;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,476,this._ctx);
	            if(la_===1) {
	                this.state = 4190;
	                localctx.dropType = this.restrictOrCascade();

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4193;
	            if (!( this.isDialect('inceptor'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('inceptor')");
	            }
	            this.state = 4194;
	            this.match(MySqlParser.DROP);
	            this.state = 4195;
	            this.match(MySqlParser.VIEW);
	            this.state = 4197;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,477,this._ctx);
	            if(la_===1) {
	                this.state = 4196;
	                this.ifExists();

	            }
	            this.state = 4199;
	            this.viewName();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionType() {
	    let localctx = new FunctionTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 282, MySqlParser.RULE_functionType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4202;
	        if (!( this.isDialect('inceptor'))) {
	            throw new antlr4.error.FailedPredicateException(this, "this.isDialect('inceptor')");
	        }
	        this.state = 4203;
	        _la = this._input.LA(1);
	        if(!(_la===MySqlParser.PERMANENT || _la===MySqlParser.TEMPORARY)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	renameTable() {
	    let localctx = new RenameTableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 284, MySqlParser.RULE_renameTable);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4205;
	        this.match(MySqlParser.RENAME);
	        this.state = 4206;
	        this.match(MySqlParser.TABLE);
	        this.state = 4207;
	        this.renameTableClause();
	        this.state = 4212;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,479,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 4208;
	                this.match(MySqlParser.COMMA);
	                this.state = 4209;
	                this.renameTableClause(); 
	            }
	            this.state = 4214;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,479,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	renameTableClause() {
	    let localctx = new RenameTableClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 286, MySqlParser.RULE_renameTableClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4215;
	        this.tableName();
	        this.state = 4217;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,480,this._ctx);
	        if(la_===1) {
	            this.state = 4216;
	            localctx._TO = this.match(MySqlParser.TO);

	        }
	        this.state = 4219;
	        this.tableName();

	              // TO -> TO? Error-Tolerant
	              this.checkTokenExist(localctx._TO, 'Please provide keyword TO between table');
	            
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	truncateTable() {
	    let localctx = new TruncateTableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 288, MySqlParser.RULE_truncateTable);
	    try {
	        this.state = 4235;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,483,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4222;
	            if (!( this.isDialect('inceptor'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('inceptor')");
	            }
	            this.state = 4223;
	            this.match(MySqlParser.TRUNCATE);
	            this.state = 4224;
	            this.match(MySqlParser.TABLE);
	            this.state = 4225;
	            this.tableName();
	            this.state = 4227;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,481,this._ctx);
	            if(la_===1) {
	                this.state = 4226;
	                this.partitionSpec();

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4229;
	            if (!( this.isDialect('mysql'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('mysql')");
	            }
	            this.state = 4230;
	            this.match(MySqlParser.TRUNCATE);
	            this.state = 4232;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,482,this._ctx);
	            if(la_===1) {
	                this.state = 4231;
	                this.match(MySqlParser.TABLE);

	            }
	            this.state = 4234;
	            this.tableName();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	callStatement() {
	    let localctx = new CallStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 290, MySqlParser.RULE_callStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4237;
	        this.match(MySqlParser.CALL);
	        this.state = 4238;
	        this.fullId();
	        this.state = 4245;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,485,this._ctx);
	        if(la_===1) {
	            this.state = 4239;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 4242;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,484,this._ctx);
	            if(la_===1) {
	                this.state = 4240;
	                this.constants();

	            } else if(la_===2) {
	                this.state = 4241;
	                this.expressions();

	            }
	            this.state = 4244;
	            this.match(MySqlParser.RR_BRACKET);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	deleteStatement() {
	    let localctx = new DeleteStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 292, MySqlParser.RULE_deleteStatement);
	    try {
	        this.state = 4254;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,487,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4247;
	            if (!( this.isDialect('mysql'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('mysql')");
	            }
	            this.state = 4250;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,486,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 4248;
	                this.singleDeleteStatement();
	                break;

	            case 2:
	                this.state = 4249;
	                this.multipleDeleteStatement();
	                break;

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4252;
	            if (!( this.isDialect('inceptor'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('inceptor')");
	            }
	            this.state = 4253;
	            this.deleteStatementInceptor();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	doStatement() {
	    let localctx = new DoStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 294, MySqlParser.RULE_doStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4256;
	        this.match(MySqlParser.DO);
	        this.state = 4257;
	        this.expressions();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	handlerStatement() {
	    let localctx = new HandlerStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 296, MySqlParser.RULE_handlerStatement);
	    try {
	        this.state = 4263;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,488,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4259;
	            this.handlerOpenStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4260;
	            this.handlerReadIndexStatement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4261;
	            this.handlerReadStatement();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4262;
	            this.handlerCloseStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertStatement() {
	    let localctx = new InsertStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 298, MySqlParser.RULE_insertStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4265;
	        this.match(MySqlParser.INSERT);
	        this.state = 4266;
	        this.insertAction();
	        this.state = 4267;
	        this.tableName();
	        this.state = 4269;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,489,this._ctx);
	        if(la_===1) {
	            this.state = 4268;
	            this.insertPartitionSpec();

	        }
	        this.state = 4279;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,491,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 4275;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,490,this._ctx);
	            if(la_===1) {
	                this.state = 4271;
	                this.match(MySqlParser.LR_BRACKET);
	                this.state = 4272;
	                localctx.columns = this.columnUids();
	                this.state = 4273;
	                this.match(MySqlParser.RR_BRACKET);

	            }
	            this.state = 4277;
	            this.insertStatementValue();
	            break;

	        case 2:
	            this.state = 4278;
	            this.setUpdatedElements();
	            break;

	        }
	        this.state = 4282;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,492,this._ctx);
	        if(la_===1) {
	            this.state = 4281;
	            this.insertOnDuplicate();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fromInsertStatement() {
	    let localctx = new FromInsertStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 300, MySqlParser.RULE_fromInsertStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4284;
	        this.match(MySqlParser.FROM);
	        this.state = 4285;
	        this.tableSources();
	        this.state = 4287; 
	        this._errHandler.sync(this);
	        let _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 4286;
	        		this.fromInsertStatementInsert();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 4289; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,493, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fromInsertStatementInsert() {
	    let localctx = new FromInsertStatementInsertContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 302, MySqlParser.RULE_fromInsertStatementInsert);
	    try {
	        this.state = 4307;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.INSERT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4291;
	            this.match(MySqlParser.INSERT);
	            this.state = 4292;
	            this.insertAction();
	            this.state = 4293;
	            this.tableName();
	            this.state = 4297;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,494,this._ctx);
	            if(la_===1) {
	                this.state = 4294;
	                this.partitionSpec();
	                this.state = 4295;
	                this.ifNotExists();

	            }
	            this.state = 4300;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,495,this._ctx);
	            if(la_===1) {
	                this.state = 4299;
	                localctx._fromInsertStatementSelect = this.fromInsertStatementSelect();

	            }

	                    this.checkContextExist(localctx._fromInsertStatementSelect, 'Please provide select statement');
	                  
	            break;
	        case MySqlParser.QUESTION_MARK:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4304;
	            localctx._insertTypeAnchor = this.insertTypeAnchor();

	                    this.notifyPlaceholderError(localctx._insertTypeAnchor, 'Please provide insert statement')
	                  
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fromInsertStatementSelect() {
	    let localctx = new FromInsertStatementSelectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 304, MySqlParser.RULE_fromInsertStatementSelect);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4309;
	        this.match(MySqlParser.SELECT);
	        this.state = 4311;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,497,this._ctx);
	        if(la_===1) {
	            this.state = 4310;
	            this.selectSpec();

	        }
	        this.state = 4313;
	        this.selectElements();
	        this.state = 4315;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,498,this._ctx);
	        if(la_===1) {
	            this.state = 4314;
	            this.whereExpressionOptional();

	        }
	        this.state = 4318;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,499,this._ctx);
	        if(la_===1) {
	            this.state = 4317;
	            this.hierarchyClause();

	        }
	        this.state = 4321;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,500,this._ctx);
	        if(la_===1) {
	            this.state = 4320;
	            this.groupByClause();

	        }
	        this.state = 4324;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,501,this._ctx);
	        if(la_===1) {
	            this.state = 4323;
	            this.havingClause();

	        }
	        this.state = 4327;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,502,this._ctx);
	        if(la_===1) {
	            this.state = 4326;
	            this.orderByClause();

	        }
	        this.state = 4330;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,503,this._ctx);
	        if(la_===1) {
	            this.state = 4329;
	            this.clusterByClause();

	        }
	        this.state = 4333;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,504,this._ctx);
	        if(la_===1) {
	            this.state = 4332;
	            this.distributeByClause();

	        }
	        this.state = 4336;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,505,this._ctx);
	        if(la_===1) {
	            this.state = 4335;
	            this.sortByClause();

	        }
	        this.state = 4339;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,506,this._ctx);
	        if(la_===1) {
	            this.state = 4338;
	            this.limitClause();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertTypeAnchor() {
	    let localctx = new InsertTypeAnchorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 306, MySqlParser.RULE_insertTypeAnchor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4341;
	        this.placeholder();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertFile() {
	    let localctx = new InsertFileContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 308, MySqlParser.RULE_insertFile);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4343;
	        this.match(MySqlParser.INSERT);
	        this.state = 4344;
	        this.match(MySqlParser.OVERWRITE);
	        this.state = 4348;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.DIRECTORY:
	            this.state = 4345;
	            this.match(MySqlParser.DIRECTORY);
	            break;
	        case MySqlParser.LOCAL:
	            this.state = 4346;
	            this.match(MySqlParser.LOCAL);
	            this.state = 4347;
	            this.match(MySqlParser.DIRECTORY);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 4350;
	        localctx.filename = this.stringLiteral();
	        this.state = 4352;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.ROW) {
	            this.state = 4351;
	            this.rowFormatDelimited();
	        }

	        this.state = 4355;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.STORED) {
	            this.state = 4354;
	            this.fileStore();
	        }

	        this.state = 4357;
	        this.selectStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	loadDataStatement() {
	    let localctx = new LoadDataStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 310, MySqlParser.RULE_loadDataStatement);
	    try {
	        this.state = 4363;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,510,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4359;
	            if (!( this.isDialect('mysql'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('mysql')");
	            }
	            this.state = 4360;
	            this.loadDataMysql();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4361;
	            if (!( this.isDialect('inceptor'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('inceptor')");
	            }
	            this.state = 4362;
	            this.loadDataInceptor();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	loadDataMysql() {
	    let localctx = new LoadDataMysqlContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 312, MySqlParser.RULE_loadDataMysql);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4365;
	        this.match(MySqlParser.LOAD);
	        this.state = 4366;
	        this.match(MySqlParser.DATA);
	        this.state = 4368;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.LOW_PRIORITY || _la===MySqlParser.CONCURRENT) {
	            this.state = 4367;
	            localctx.priority = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.LOW_PRIORITY || _la===MySqlParser.CONCURRENT)) {
	                localctx.priority = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 4371;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.LOCAL) {
	            this.state = 4370;
	            this.match(MySqlParser.LOCAL);
	        }

	        this.state = 4373;
	        this.match(MySqlParser.INFILE);
	        this.state = 4374;
	        localctx.filename = this.match(MySqlParser.STRING_LITERAL);
	        this.state = 4376;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.IGNORE || _la===MySqlParser.REPLACE) {
	            this.state = 4375;
	            localctx.violation = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.IGNORE || _la===MySqlParser.REPLACE)) {
	                localctx.violation = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 4378;
	        this.match(MySqlParser.INTO);
	        this.state = 4379;
	        this.match(MySqlParser.TABLE);
	        this.state = 4380;
	        this.tableName();
	        this.state = 4386;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,514,this._ctx);
	        if(la_===1) {
	            this.state = 4381;
	            this.match(MySqlParser.PARTITION);
	            this.state = 4382;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 4383;
	            this.uidList();
	            this.state = 4384;
	            this.match(MySqlParser.RR_BRACKET);

	        }
	        this.state = 4391;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,515,this._ctx);
	        if(la_===1) {
	            this.state = 4388;
	            this.match(MySqlParser.CHARACTER);
	            this.state = 4389;
	            this.match(MySqlParser.SET);
	            this.state = 4390;
	            localctx.charset = this.charsetName();

	        }
	        this.state = 4399;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,517,this._ctx);
	        if(la_===1) {
	            this.state = 4393;
	            localctx.fieldsFormat = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.COLUMNS || _la===MySqlParser.FIELDS)) {
	                localctx.fieldsFormat = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 4395; 
	            this._errHandler.sync(this);
	            let _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 4394;
	            		this.selectFieldsInto();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 4397; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,516, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );

	        }
	        this.state = 4407;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,519,this._ctx);
	        if(la_===1) {
	            this.state = 4401;
	            this.match(MySqlParser.LINES);
	            this.state = 4403; 
	            this._errHandler.sync(this);
	            let _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 4402;
	            		this.selectLinesInto();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 4405; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,518, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );

	        }
	        this.state = 4413;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,520,this._ctx);
	        if(la_===1) {
	            this.state = 4409;
	            this.match(MySqlParser.IGNORE);
	            this.state = 4410;
	            this.decimalLiteral();
	            this.state = 4411;
	            localctx.linesFormat = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.LINES || _la===MySqlParser.ROWS)) {
	                localctx.linesFormat = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }

	        }
	        this.state = 4426;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,522,this._ctx);
	        if(la_===1) {
	            this.state = 4415;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 4416;
	            this.assignmentField();
	            this.state = 4421;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.COMMA) {
	                this.state = 4417;
	                this.match(MySqlParser.COMMA);
	                this.state = 4418;
	                this.assignmentField();
	                this.state = 4423;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 4424;
	            this.match(MySqlParser.RR_BRACKET);

	        }
	        this.state = 4429;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,523,this._ctx);
	        if(la_===1) {
	            this.state = 4428;
	            this.setUpdatedElements();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	loadDataInceptor() {
	    let localctx = new LoadDataInceptorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 314, MySqlParser.RULE_loadDataInceptor);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4431;
	        this.match(MySqlParser.LOAD);
	        this.state = 4432;
	        this.match(MySqlParser.DATA);
	        this.state = 4434;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.LOCAL) {
	            this.state = 4433;
	            this.match(MySqlParser.LOCAL);
	        }

	        this.state = 4436;
	        this.match(MySqlParser.INPATH);
	        this.state = 4437;
	        localctx.path = this.stringLiteral();
	        this.state = 4438;
	        this.loadDataInceptorTable();
	        this.state = 4440;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,525,this._ctx);
	        if(la_===1) {
	            this.state = 4439;
	            this.partitionSpec();

	        }
	        this.state = 4446;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,526,this._ctx);
	        if(la_===1) {
	            this.state = 4442;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 4443;
	            this.uidList();
	            this.state = 4444;
	            this.match(MySqlParser.RR_BRACKET);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	loadDataInceptorTable() {
	    let localctx = new LoadDataInceptorTableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 316, MySqlParser.RULE_loadDataInceptorTable);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4454;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.INTO:
	        case MySqlParser.OVERWRITE:
	            this.state = 4449;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.OVERWRITE) {
	                this.state = 4448;
	                this.match(MySqlParser.OVERWRITE);
	            }

	            this.state = 4451;
	            this.match(MySqlParser.INTO);
	            this.state = 4452;
	            this.match(MySqlParser.TABLE);
	            break;
	        case MySqlParser.QUESTION_MARK:
	            this.state = 4453;
	            this.loadDataInceptorAnchor();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 4456;
	        this.tableName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	loadDataInceptorAnchor() {
	    let localctx = new LoadDataInceptorAnchorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 318, MySqlParser.RULE_loadDataInceptorAnchor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4458;
	        this.placeholder();

	                this.notifyErrorListeners('Please provide load table')
	              
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	loadXmlStatement() {
	    let localctx = new LoadXmlStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 320, MySqlParser.RULE_loadXmlStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4461;
	        this.match(MySqlParser.LOAD);
	        this.state = 4462;
	        this.match(MySqlParser.XML);
	        this.state = 4464;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.LOW_PRIORITY || _la===MySqlParser.CONCURRENT) {
	            this.state = 4463;
	            localctx.priority = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.LOW_PRIORITY || _la===MySqlParser.CONCURRENT)) {
	                localctx.priority = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 4467;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.LOCAL) {
	            this.state = 4466;
	            this.match(MySqlParser.LOCAL);
	        }

	        this.state = 4469;
	        this.match(MySqlParser.INFILE);
	        this.state = 4470;
	        localctx.filename = this.match(MySqlParser.STRING_LITERAL);
	        this.state = 4472;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.IGNORE || _la===MySqlParser.REPLACE) {
	            this.state = 4471;
	            localctx.violation = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.IGNORE || _la===MySqlParser.REPLACE)) {
	                localctx.violation = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 4474;
	        this.match(MySqlParser.INTO);
	        this.state = 4475;
	        this.match(MySqlParser.TABLE);
	        this.state = 4476;
	        this.tableName();
	        this.state = 4480;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,532,this._ctx);
	        if(la_===1) {
	            this.state = 4477;
	            this.match(MySqlParser.CHARACTER);
	            this.state = 4478;
	            this.match(MySqlParser.SET);
	            this.state = 4479;
	            localctx.charset = this.charsetName();

	        }
	        this.state = 4488;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,533,this._ctx);
	        if(la_===1) {
	            this.state = 4482;
	            this.match(MySqlParser.ROWS);
	            this.state = 4483;
	            this.match(MySqlParser.IDENTIFIED);
	            this.state = 4484;
	            this.match(MySqlParser.BY);
	            this.state = 4485;
	            this.match(MySqlParser.LESS_SYMBOL);
	            this.state = 4486;
	            localctx.tag = this.match(MySqlParser.STRING_LITERAL);
	            this.state = 4487;
	            this.match(MySqlParser.GREATER_SYMBOL);

	        }
	        this.state = 4494;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,534,this._ctx);
	        if(la_===1) {
	            this.state = 4490;
	            this.match(MySqlParser.IGNORE);
	            this.state = 4491;
	            this.decimalLiteral();
	            this.state = 4492;
	            localctx.linesFormat = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.LINES || _la===MySqlParser.ROWS)) {
	                localctx.linesFormat = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }

	        }
	        this.state = 4507;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,536,this._ctx);
	        if(la_===1) {
	            this.state = 4496;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 4497;
	            this.assignmentField();
	            this.state = 4502;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.COMMA) {
	                this.state = 4498;
	                this.match(MySqlParser.COMMA);
	                this.state = 4499;
	                this.assignmentField();
	                this.state = 4504;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 4505;
	            this.match(MySqlParser.RR_BRACKET);

	        }
	        this.state = 4518;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,538,this._ctx);
	        if(la_===1) {
	            this.state = 4509;
	            this.match(MySqlParser.SET);
	            this.state = 4510;
	            this.updatedElement();
	            this.state = 4515;
	            this._errHandler.sync(this);
	            let _alt = this._interp.adaptivePredict(this._input,537,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 4511;
	                    this.match(MySqlParser.COMMA);
	                    this.state = 4512;
	                    this.updatedElement(); 
	                }
	                this.state = 4517;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,537,this._ctx);
	            }


	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mergeStatement() {
	    let localctx = new MergeStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 322, MySqlParser.RULE_mergeStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4520;
	        if (!( this.isDialect('inceptor'))) {
	            throw new antlr4.error.FailedPredicateException(this, "this.isDialect('inceptor')");
	        }
	        this.state = 4521;
	        this.match(MySqlParser.MERGE);
	        this.state = 4522;
	        this.match(MySqlParser.INTO);
	        this.state = 4523;
	        this.crudTargetClause();
	        this.state = 4525;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,539,this._ctx);
	        if(la_===1) {
	            this.state = 4524;
	            localctx._mergeUsingClause = this.mergeUsingClause();

	        }
	        this.state = 4528;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,540,this._ctx);
	        if(la_===1) {
	            this.state = 4527;
	            this.mergeUpdateClause();

	        }
	        this.state = 4531;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,541,this._ctx);
	        if(la_===1) {
	            this.state = 4530;
	            this.mergeInsertClause();

	        }

	                this.checkContextExist(localctx._mergeUsingClause, 'Please provide USING clause');
	              
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	replaceStatement() {
	    let localctx = new ReplaceStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 324, MySqlParser.RULE_replaceStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4535;
	        this.match(MySqlParser.REPLACE);
	        this.state = 4537;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,542,this._ctx);
	        if(la_===1) {
	            this.state = 4536;
	            localctx.priority = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.DELAYED || _la===MySqlParser.LOW_PRIORITY)) {
	                localctx.priority = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }

	        }
	        this.state = 4540;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,543,this._ctx);
	        if(la_===1) {
	            this.state = 4539;
	            this.match(MySqlParser.INTO);

	        }
	        this.state = 4542;
	        this.tableName();
	        this.state = 4548;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,544,this._ctx);
	        if(la_===1) {
	            this.state = 4543;
	            this.match(MySqlParser.PARTITION);
	            this.state = 4544;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 4545;
	            localctx.partitions = this.uidList();
	            this.state = 4546;
	            this.match(MySqlParser.RR_BRACKET);

	        }
	        this.state = 4566;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,547,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 4554;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,545,this._ctx);
	            if(la_===1) {
	                this.state = 4550;
	                this.match(MySqlParser.LR_BRACKET);
	                this.state = 4551;
	                localctx.columns = this.uidList();
	                this.state = 4552;
	                this.match(MySqlParser.RR_BRACKET);

	            }
	            this.state = 4556;
	            this.insertStatementValue();
	            break;

	        case 2:
	            this.state = 4557;
	            this.match(MySqlParser.SET);
	            this.state = 4558;
	            localctx.setFirst = this.updatedElement();
	            this.state = 4563;
	            this._errHandler.sync(this);
	            let _alt = this._interp.adaptivePredict(this._input,546,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 4559;
	                    this.match(MySqlParser.COMMA);
	                    this.state = 4560;
	                    localctx._updatedElement = this.updatedElement();
	                    localctx.setElements.push(localctx._updatedElement); 
	                }
	                this.state = 4565;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,546,this._ctx);
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectStatement() {
	    let localctx = new SelectStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 326, MySqlParser.RULE_selectStatement);
	    var _la = 0; // Token type
	    try {
	        this.state = 4623;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,563,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new SimpleSelectContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4568;
	            this.querySpecification();
	            this.state = 4570;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,548,this._ctx);
	            if(la_===1) {
	                this.state = 4569;
	                this.lockClause();

	            }
	            break;

	        case 2:
	            localctx = new ParenthesisSelectContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4572;
	            this.queryExpression();
	            this.state = 4574;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,549,this._ctx);
	            if(la_===1) {
	                this.state = 4573;
	                this.lockClause();

	            }
	            break;

	        case 3:
	            localctx = new UnionSelectContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4576;
	            this.querySpecificationNointo();
	            this.state = 4578; 
	            this._errHandler.sync(this);
	            let _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 4577;
	            		this.unionStatement();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 4580; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,550, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            this.state = 4590;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,553,this._ctx);
	            if(la_===1) {
	                this.state = 4582;
	                this.match(MySqlParser.UNION);
	                this.state = 4584;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===MySqlParser.ALL || _la===MySqlParser.DISTINCT) {
	                    this.state = 4583;
	                    localctx.unionType = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===MySqlParser.ALL || _la===MySqlParser.DISTINCT)) {
	                        localctx.unionType = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                }

	                this.state = 4588;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case MySqlParser.SELECT:
	                    this.state = 4586;
	                    this.querySpecification();
	                    break;
	                case MySqlParser.LR_BRACKET:
	                    this.state = 4587;
	                    this.queryExpression();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }

	            }
	            this.state = 4593;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,554,this._ctx);
	            if(la_===1) {
	                this.state = 4592;
	                this.orderByClause();

	            }
	            this.state = 4596;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,555,this._ctx);
	            if(la_===1) {
	                this.state = 4595;
	                this.limitClause();

	            }
	            this.state = 4599;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,556,this._ctx);
	            if(la_===1) {
	                this.state = 4598;
	                this.lockClause();

	            }
	            break;

	        case 4:
	            localctx = new UnionParenthesisSelectContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4601;
	            this.queryExpressionNointo();
	            this.state = 4603; 
	            this._errHandler.sync(this);
	            let _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 4602;
	            		this.unionParenthesis();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 4605; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,557, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            this.state = 4612;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,559,this._ctx);
	            if(la_===1) {
	                this.state = 4607;
	                this.match(MySqlParser.UNION);
	                this.state = 4609;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===MySqlParser.ALL || _la===MySqlParser.DISTINCT) {
	                    this.state = 4608;
	                    localctx.unionType = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===MySqlParser.ALL || _la===MySqlParser.DISTINCT)) {
	                        localctx.unionType = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                }

	                this.state = 4611;
	                this.queryExpression();

	            }
	            this.state = 4615;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,560,this._ctx);
	            if(la_===1) {
	                this.state = 4614;
	                this.orderByClause();

	            }
	            this.state = 4618;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,561,this._ctx);
	            if(la_===1) {
	                this.state = 4617;
	                this.limitClause();

	            }
	            this.state = 4621;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,562,this._ctx);
	            if(la_===1) {
	                this.state = 4620;
	                this.lockClause();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	updateStatement() {
	    let localctx = new UpdateStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 328, MySqlParser.RULE_updateStatement);
	    try {
	        this.state = 4632;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,565,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4625;
	            if (!( this.isDialect('mysql'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('mysql')");
	            }
	            this.state = 4628;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,564,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 4626;
	                this.singleUpdateStatement();
	                break;

	            case 2:
	                this.state = 4627;
	                this.multipleUpdateStatement();
	                break;

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4630;
	            if (!( this.isDialect('inceptor'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('inceptor')");
	            }
	            this.state = 4631;
	            this.updateStatementInceptor();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	withStatement() {
	    let localctx = new WithStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 330, MySqlParser.RULE_withStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4634;
	        if (!( this.isDialect('inceptor'))) {
	            throw new antlr4.error.FailedPredicateException(this, "this.isDialect('inceptor')");
	        }
	        this.state = 4635;
	        this.match(MySqlParser.WITH);
	        this.state = 4636;
	        this.withCommonTableExpression();
	        this.state = 4641;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,566,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 4637;
	                this.match(MySqlParser.COMMA);
	                this.state = 4638;
	                this.withCommonTableExpression(); 
	            }
	            this.state = 4643;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,566,this._ctx);
	        }

	        this.state = 4645;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,567,this._ctx);
	        if(la_===1) {
	            this.state = 4644;
	            localctx._selectStatement = this.selectStatement();

	        }

	              // selectStatement -> selectStatement? Error-Tolerant
	              this.checkContextExist(localctx._selectStatement, 'Please provide select statement');
	            
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	withCommonTableExpression() {
	    let localctx = new WithCommonTableExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 332, MySqlParser.RULE_withCommonTableExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4649;
	        this.uid();
	        this.state = 4650;
	        this.match(MySqlParser.AS);
	        this.state = 4651;
	        this.queryExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertPartitionSpec() {
	    let localctx = new InsertPartitionSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 334, MySqlParser.RULE_insertPartitionSpec);
	    try {
	        this.state = 4661;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,568,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4653;
	            if (!( this.isDialect('mysql'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('mysql')");
	            }
	            this.state = 4654;
	            this.match(MySqlParser.PARTITION);
	            this.state = 4655;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 4656;
	            localctx.partitions = this.uidList();
	            this.state = 4657;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4659;
	            if (!( this.isDialect('inceptor'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('inceptor')");
	            }
	            this.state = 4660;
	            this.partitionSpec();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertOnDuplicate() {
	    let localctx = new InsertOnDuplicateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 336, MySqlParser.RULE_insertOnDuplicate);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4663;
	        this.match(MySqlParser.ON);
	        this.state = 4664;
	        this.match(MySqlParser.DUPLICATE);
	        this.state = 4665;
	        this.match(MySqlParser.KEY);
	        this.state = 4666;
	        this.match(MySqlParser.UPDATE);
	        this.state = 4667;
	        localctx.duplicatedFirst = this.updatedElement();
	        this.state = 4672;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,569,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 4668;
	                this.match(MySqlParser.COMMA);
	                this.state = 4669;
	                localctx._updatedElement = this.updatedElement();
	                localctx.duplicatedElements.push(localctx._updatedElement); 
	            }
	            this.state = 4674;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,569,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rowFormatDelimited() {
	    let localctx = new RowFormatDelimitedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 338, MySqlParser.RULE_rowFormatDelimited);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4675;
	        this.match(MySqlParser.ROW);
	        this.state = 4676;
	        this.match(MySqlParser.FORMAT);
	        this.state = 4677;
	        this.match(MySqlParser.DELIMITED);
	        this.state = 4678;
	        this.rowFormatDelimitedTail();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rowFormatDelimitedTail() {
	    let localctx = new RowFormatDelimitedTailContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 340, MySqlParser.RULE_rowFormatDelimitedTail);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4689;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,571,this._ctx);
	        if(la_===1) {
	            this.state = 4680;
	            this.match(MySqlParser.FIELDS);
	            this.state = 4681;
	            this.match(MySqlParser.TERMINATED);
	            this.state = 4682;
	            this.match(MySqlParser.BY);
	            this.state = 4683;
	            this.stringLiteral();
	            this.state = 4687;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,570,this._ctx);
	            if(la_===1) {
	                this.state = 4684;
	                this.match(MySqlParser.ESCAPED);
	                this.state = 4685;
	                this.match(MySqlParser.BY);
	                this.state = 4686;
	                this.stringLiteral();

	            }

	        }
	        this.state = 4696;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,572,this._ctx);
	        if(la_===1) {
	            this.state = 4691;
	            this.match(MySqlParser.COLLECTION);
	            this.state = 4692;
	            this.match(MySqlParser.ITEMS);
	            this.state = 4693;
	            this.match(MySqlParser.TERMINATED);
	            this.state = 4694;
	            this.match(MySqlParser.BY);
	            this.state = 4695;
	            this.stringLiteral();

	        }
	        this.state = 4703;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,573,this._ctx);
	        if(la_===1) {
	            this.state = 4698;
	            this.match(MySqlParser.MAP);
	            this.state = 4699;
	            this.match(MySqlParser.KEYS);
	            this.state = 4700;
	            this.match(MySqlParser.TERMINATED);
	            this.state = 4701;
	            this.match(MySqlParser.BY);
	            this.state = 4702;
	            this.stringLiteral();

	        }
	        this.state = 4709;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,574,this._ctx);
	        if(la_===1) {
	            this.state = 4705;
	            this.match(MySqlParser.LINES);
	            this.state = 4706;
	            this.match(MySqlParser.TERMINATED);
	            this.state = 4707;
	            this.match(MySqlParser.BY);
	            this.state = 4708;
	            this.stringLiteral();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rowFormatSerde() {
	    let localctx = new RowFormatSerdeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 342, MySqlParser.RULE_rowFormatSerde);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4711;
	        this.match(MySqlParser.ROW);
	        this.state = 4712;
	        this.match(MySqlParser.FORMAT);
	        this.state = 4713;
	        this.match(MySqlParser.SERDE);
	        this.state = 4714;
	        this.rowFormatSerdeTail();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rowFormatSerdeTail() {
	    let localctx = new RowFormatSerdeTailContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 344, MySqlParser.RULE_rowFormatSerdeTail);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4716;
	        this.stringLiteral();
	        this.state = 4723;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,575,this._ctx);
	        if(la_===1) {
	            this.state = 4717;
	            this.match(MySqlParser.WITH);
	            this.state = 4718;
	            this.match(MySqlParser.SERDEPROPERTIES);
	            this.state = 4719;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 4720;
	            this.keyValueProperties();
	            this.state = 4721;
	            this.match(MySqlParser.RR_BRACKET);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rowFormat() {
	    let localctx = new RowFormatContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 346, MySqlParser.RULE_rowFormat);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4725;
	        this.match(MySqlParser.ROW);
	        this.state = 4726;
	        this.match(MySqlParser.FORMAT);
	        this.state = 4732;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,576,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 4727;
	            this.match(MySqlParser.DELIMITED);
	            break;

	        case 2:
	            this.state = 4728;
	            this.match(MySqlParser.DELIMITED);
	            this.state = 4729;
	            this.rowFormatDelimitedTail();
	            break;

	        case 3:
	            this.state = 4730;
	            this.match(MySqlParser.SERDE);
	            this.state = 4731;
	            this.rowFormatSerdeTail();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fileStore() {
	    let localctx = new FileStoreContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 348, MySqlParser.RULE_fileStore);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4734;
	        this.match(MySqlParser.STORED);
	        this.state = 4735;
	        this.match(MySqlParser.AS);
	        this.state = 4736;
	        this.fileFormat();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fileFormat() {
	    let localctx = new FileFormatContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 350, MySqlParser.RULE_fileFormat);
	    try {
	        this.state = 4763;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,580,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4738;
	            this.fileFormatEnum();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4739;
	            this.match(MySqlParser.STARGATE);
	            this.state = 4744;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,577,this._ctx);
	            if(la_===1) {
	                this.state = 4740;
	                this.match(MySqlParser.LR_BRACKET);
	                this.state = 4741;
	                this.uid();
	                this.state = 4742;
	                this.match(MySqlParser.RR_BRACKET);

	            }
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4746;
	            this.match(MySqlParser.INPUTFORMAT);
	            this.state = 4747;
	            localctx.inFmt = this.stringLiteral();
	            this.state = 4748;
	            this.match(MySqlParser.OUTPUTFORMAT);
	            this.state = 4749;
	            localctx.outFmt = this.stringLiteral();
	            this.state = 4755;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,578,this._ctx);
	            if(la_===1) {
	                this.state = 4750;
	                this.match(MySqlParser.INPUTDRIVER);
	                this.state = 4751;
	                localctx.inDriver = this.stringLiteral();
	                this.state = 4752;
	                this.match(MySqlParser.OUTPUTDRIVER);
	                this.state = 4753;
	                localctx.outDriver = this.stringLiteral();

	            }
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4757;
	            this.match(MySqlParser.HOLODESK);
	            this.state = 4760;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,579,this._ctx);
	            if(la_===1) {
	                this.state = 4758;
	                this.holoProps();

	            } else if(la_===2) {
	                this.state = 4759;
	                this.holoTableSize();

	            }
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4762;
	            this.uid();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fileFormatEnum() {
	    let localctx = new FileFormatEnumContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 352, MySqlParser.RULE_fileFormatEnum);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4765;
	        _la = this._input.LA(1);
	        if(!(((((_la - 789)) & ~0x1f) == 0 && ((1 << (_la - 789)) & ((1 << (MySqlParser.CSVFILE - 789)) | (1 << (MySqlParser.ES - 789)) | (1 << (MySqlParser.FWCFILE - 789)) | (1 << (MySqlParser.HYPERDRIVE - 789)) | (1 << (MySqlParser.ORC - 789)) | (1 << (MySqlParser.ORC_TRANSACTION - 789)) | (1 << (MySqlParser.PARQUET - 789)) | (1 << (MySqlParser.RCFILE - 789)) | (1 << (MySqlParser.SEQUENCEFILE - 789)) | (1 << (MySqlParser.STELLARDB - 789)) | (1 << (MySqlParser.TEXTFILE - 789)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fileStoreBy() {
	    let localctx = new FileStoreByContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 354, MySqlParser.RULE_fileStoreBy);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4767;
	        this.match(MySqlParser.STORED);
	        this.state = 4768;
	        this.match(MySqlParser.BY);
	        this.state = 4769;
	        this.stringLiteral();
	        this.state = 4776;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,581,this._ctx);
	        if(la_===1) {
	            this.state = 4770;
	            this.match(MySqlParser.WITH);
	            this.state = 4771;
	            this.match(MySqlParser.SERDEPROPERTIES);
	            this.state = 4772;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 4773;
	            this.keyValueProperties();
	            this.state = 4774;
	            this.match(MySqlParser.RR_BRACKET);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertAction() {
	    let localctx = new InsertActionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 356, MySqlParser.RULE_insertAction);
	    var _la = 0; // Token type
	    try {
	        this.state = 4793;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,586,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4778;
	            if (!( this.isDialect('mysql'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('mysql')");
	            }
	            this.state = 4780;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,582,this._ctx);
	            if(la_===1) {
	                this.state = 4779;
	                localctx.priority = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===MySqlParser.DELAYED || _la===MySqlParser.HIGH_PRIORITY || _la===MySqlParser.LOW_PRIORITY)) {
	                    localctx.priority = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }

	            }
	            this.state = 4783;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,583,this._ctx);
	            if(la_===1) {
	                this.state = 4782;
	                this.match(MySqlParser.IGNORE);

	            }
	            this.state = 4786;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,584,this._ctx);
	            if(la_===1) {
	                this.state = 4785;
	                this.match(MySqlParser.INTO);

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4788;
	            if (!( this.isDialect('inceptor'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('inceptor')");
	            }
	            this.state = 4789;
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.INTO || _la===MySqlParser.OVERWRITE)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 4791;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,585,this._ctx);
	            if(la_===1) {
	                this.state = 4790;
	                this.match(MySqlParser.TABLE);

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertStatementValue() {
	    let localctx = new InsertStatementValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 358, MySqlParser.RULE_insertStatementValue);
	    var _la = 0; // Token type
	    try {
	        this.state = 4803;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,587,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4795;
	            this.querySpecification();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4796;
	            this.withStatement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4797;
	            this.insertValueClause();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4798;
	            this.emptyElement();
	            this.notifyErrorListeners('Please provide insert statement');
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4801;
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.VALUES || _la===MySqlParser.VALUE)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.notifyErrorListeners('Please provide insert value');
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertValueClause() {
	    let localctx = new InsertValueClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 360, MySqlParser.RULE_insertValueClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4805;
	        localctx.insertFormat = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(_la===MySqlParser.VALUES || _la===MySqlParser.VALUE)) {
	            localctx.insertFormat = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 4806;
	        this.match(MySqlParser.LR_BRACKET);
	        this.state = 4807;
	        this.expressionsWithDefaults();
	        this.state = 4808;
	        this.match(MySqlParser.RR_BRACKET);
	        this.state = 4816;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,588,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 4809;
	                this.match(MySqlParser.COMMA);
	                this.state = 4810;
	                this.match(MySqlParser.LR_BRACKET);
	                this.state = 4811;
	                this.expressionsWithDefaults();
	                this.state = 4812;
	                this.match(MySqlParser.RR_BRACKET); 
	            }
	            this.state = 4818;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,588,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	updatedElement() {
	    let localctx = new UpdatedElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 362, MySqlParser.RULE_updatedElement);
	    try {
	        this.state = 4828;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,590,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4819;
	            this.fullColumnNameOptional();
	            this.state = 4820;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 4823;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,589,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 4821;
	                this.expression(0);
	                break;

	            case 2:
	                this.state = 4822;
	                this.match(MySqlParser.DEFAULT);
	                break;

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4825;
	            this.fullColumnNameOptional();
	            this.notifyErrorListeners('Please provide updated statement `= updated expression`');
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignmentField() {
	    let localctx = new AssignmentFieldContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 364, MySqlParser.RULE_assignmentField);
	    try {
	        this.state = 4835;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,591,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4830;
	            this.uid();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4831;
	            this.match(MySqlParser.LOCAL_ID);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4832;
	            this.emptyElement();

	                    this.notifyErrorListeners('Please provide variable');
	                  
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mergeUsingClause() {
	    let localctx = new MergeUsingClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 366, MySqlParser.RULE_mergeUsingClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4837;
	        this.match(MySqlParser.USING);
	        this.state = 4838;
	        this.tableSourceItem();
	        this.state = 4839;
	        this.match(MySqlParser.ON);
	        this.state = 4845;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,592,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 4840;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 4841;
	            this.expression(0);
	            this.state = 4842;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 2:
	            this.state = 4844;
	            this.expression(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mergeUpdateClause() {
	    let localctx = new MergeUpdateClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 368, MySqlParser.RULE_mergeUpdateClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4847;
	        this.match(MySqlParser.WHEN);
	        this.state = 4848;
	        this.match(MySqlParser.MATCHED);
	        this.state = 4849;
	        this.match(MySqlParser.THEN);
	        this.state = 4850;
	        this.match(MySqlParser.UPDATE);
	        this.state = 4851;
	        this.match(MySqlParser.SET);
	        this.state = 4852;
	        this.updateAssignClauseElement();
	        this.state = 4857;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,593,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 4853;
	                this.match(MySqlParser.COMMA);
	                this.state = 4854;
	                this.updateAssignClauseElement(); 
	            }
	            this.state = 4859;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,593,this._ctx);
	        }

	        this.state = 4861;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,594,this._ctx);
	        if(la_===1) {
	            this.state = 4860;
	            this.match(MySqlParser.DELETE);

	        }
	        this.state = 4865;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,595,this._ctx);
	        if(la_===1) {
	            this.state = 4863;
	            this.match(MySqlParser.WHERE);
	            this.state = 4864;
	            this.expression(0);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mergeInsertClause() {
	    let localctx = new MergeInsertClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 370, MySqlParser.RULE_mergeInsertClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4867;
	        this.match(MySqlParser.WHEN);
	        this.state = 4868;
	        this.match(MySqlParser.NOT);
	        this.state = 4869;
	        this.match(MySqlParser.MATCHED);
	        this.state = 4870;
	        this.match(MySqlParser.THEN);
	        this.state = 4871;
	        this.match(MySqlParser.INSERT);
	        this.state = 4876;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.LR_BRACKET) {
	            this.state = 4872;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 4873;
	            this.uidList();
	            this.state = 4874;
	            this.match(MySqlParser.RR_BRACKET);
	        }

	        this.state = 4878;
	        this.insertValueClause();
	        this.state = 4881;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,597,this._ctx);
	        if(la_===1) {
	            this.state = 4879;
	            this.match(MySqlParser.WHERE);
	            this.state = 4880;
	            this.expression(0);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lockClause() {
	    let localctx = new LockClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 372, MySqlParser.RULE_lockClause);
	    try {
	        this.state = 4889;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.FOR:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4883;
	            this.match(MySqlParser.FOR);
	            this.state = 4884;
	            this.match(MySqlParser.UPDATE);
	            break;
	        case MySqlParser.LOCK:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4885;
	            this.match(MySqlParser.LOCK);
	            this.state = 4886;
	            this.match(MySqlParser.IN);
	            this.state = 4887;
	            this.match(MySqlParser.SHARE);
	            this.state = 4888;
	            this.match(MySqlParser.MODE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	singleDeleteStatement() {
	    let localctx = new SingleDeleteStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 374, MySqlParser.RULE_singleDeleteStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4891;
	        this.match(MySqlParser.DELETE);
	        this.state = 4893;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.LOW_PRIORITY) {
	            this.state = 4892;
	            localctx.priority = this.match(MySqlParser.LOW_PRIORITY);
	        }

	        this.state = 4896;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.QUICK) {
	            this.state = 4895;
	            this.match(MySqlParser.QUICK);
	        }

	        this.state = 4899;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.IGNORE) {
	            this.state = 4898;
	            this.match(MySqlParser.IGNORE);
	        }

	        this.state = 4901;
	        this.match(MySqlParser.FROM);
	        this.state = 4902;
	        this.tableName();
	        this.state = 4908;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,602,this._ctx);
	        if(la_===1) {
	            this.state = 4903;
	            this.match(MySqlParser.PARTITION);
	            this.state = 4904;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 4905;
	            this.uidList();
	            this.state = 4906;
	            this.match(MySqlParser.RR_BRACKET);

	        }
	        this.state = 4912;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,603,this._ctx);
	        if(la_===1) {
	            this.state = 4910;
	            this.match(MySqlParser.WHERE);
	            this.state = 4911;
	            this.expression(0);

	        }
	        this.state = 4915;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,604,this._ctx);
	        if(la_===1) {
	            this.state = 4914;
	            this.orderByClause();

	        }
	        this.state = 4919;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,605,this._ctx);
	        if(la_===1) {
	            this.state = 4917;
	            this.match(MySqlParser.LIMIT);
	            this.state = 4918;
	            this.decimalLiteral();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multipleDeleteStatement() {
	    let localctx = new MultipleDeleteStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 376, MySqlParser.RULE_multipleDeleteStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4921;
	        this.match(MySqlParser.DELETE);
	        this.state = 4923;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,606,this._ctx);
	        if(la_===1) {
	            this.state = 4922;
	            localctx.priority = this.match(MySqlParser.LOW_PRIORITY);

	        }
	        this.state = 4926;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,607,this._ctx);
	        if(la_===1) {
	            this.state = 4925;
	            this.match(MySqlParser.QUICK);

	        }
	        this.state = 4929;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,608,this._ctx);
	        if(la_===1) {
	            this.state = 4928;
	            this.match(MySqlParser.IGNORE);

	        }
	        this.state = 4970;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,615,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 4931;
	            this.tableName();
	            this.state = 4934;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.DOT) {
	                this.state = 4932;
	                this.match(MySqlParser.DOT);
	                this.state = 4933;
	                this.match(MySqlParser.STAR);
	            }

	            this.state = 4944;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.COMMA) {
	                this.state = 4936;
	                this.match(MySqlParser.COMMA);
	                this.state = 4937;
	                this.tableName();
	                this.state = 4940;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===MySqlParser.DOT) {
	                    this.state = 4938;
	                    this.match(MySqlParser.DOT);
	                    this.state = 4939;
	                    this.match(MySqlParser.STAR);
	                }

	                this.state = 4946;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 4947;
	            this.match(MySqlParser.FROM);
	            this.state = 4948;
	            this.tableSources();
	            break;

	        case 2:
	            this.state = 4950;
	            this.match(MySqlParser.FROM);
	            this.state = 4951;
	            this.tableName();
	            this.state = 4954;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.DOT) {
	                this.state = 4952;
	                this.match(MySqlParser.DOT);
	                this.state = 4953;
	                this.match(MySqlParser.STAR);
	            }

	            this.state = 4964;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.COMMA) {
	                this.state = 4956;
	                this.match(MySqlParser.COMMA);
	                this.state = 4957;
	                this.tableName();
	                this.state = 4960;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===MySqlParser.DOT) {
	                    this.state = 4958;
	                    this.match(MySqlParser.DOT);
	                    this.state = 4959;
	                    this.match(MySqlParser.STAR);
	                }

	                this.state = 4966;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 4967;
	            this.match(MySqlParser.USING);
	            this.state = 4968;
	            this.tableSources();
	            break;

	        }
	        this.state = 4974;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,616,this._ctx);
	        if(la_===1) {
	            this.state = 4972;
	            this.match(MySqlParser.WHERE);
	            this.state = 4973;
	            this.expression(0);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	handlerOpenStatement() {
	    let localctx = new HandlerOpenStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 378, MySqlParser.RULE_handlerOpenStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4976;
	        this.match(MySqlParser.HANDLER);
	        this.state = 4977;
	        this.tableName();
	        this.state = 4978;
	        this.match(MySqlParser.OPEN);
	        this.state = 4983;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,618,this._ctx);
	        if(la_===1) {
	            this.state = 4980;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,617,this._ctx);
	            if(la_===1) {
	                this.state = 4979;
	                this.match(MySqlParser.AS);

	            }
	            this.state = 4982;
	            this.uid();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	handlerReadIndexStatement() {
	    let localctx = new HandlerReadIndexStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 380, MySqlParser.RULE_handlerReadIndexStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4985;
	        this.match(MySqlParser.HANDLER);
	        this.state = 4986;
	        this.tableName();
	        this.state = 4987;
	        this.match(MySqlParser.READ);
	        this.state = 4988;
	        localctx.index = this.uid();
	        this.state = 4995;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.EQUAL_SYMBOL:
	        case MySqlParser.GREATER_SYMBOL:
	        case MySqlParser.LESS_SYMBOL:
	        case MySqlParser.EXCLAMATION_SYMBOL:
	            this.state = 4989;
	            this.comparisonOperator();
	            this.state = 4990;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 4991;
	            this.constants();
	            this.state = 4992;
	            this.match(MySqlParser.RR_BRACKET);
	            break;
	        case MySqlParser.FIRST:
	        case MySqlParser.LAST:
	        case MySqlParser.NEXT:
	        case MySqlParser.PREV:
	            this.state = 4994;
	            localctx.moveOrder = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.FIRST || _la===MySqlParser.LAST || _la===MySqlParser.NEXT || _la===MySqlParser.PREV)) {
	                localctx.moveOrder = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 4999;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,620,this._ctx);
	        if(la_===1) {
	            this.state = 4997;
	            this.match(MySqlParser.WHERE);
	            this.state = 4998;
	            this.expression(0);

	        }
	        this.state = 5003;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,621,this._ctx);
	        if(la_===1) {
	            this.state = 5001;
	            this.match(MySqlParser.LIMIT);
	            this.state = 5002;
	            this.decimalLiteral();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	handlerReadStatement() {
	    let localctx = new HandlerReadStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 382, MySqlParser.RULE_handlerReadStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5005;
	        this.match(MySqlParser.HANDLER);
	        this.state = 5006;
	        this.tableName();
	        this.state = 5007;
	        this.match(MySqlParser.READ);
	        this.state = 5008;
	        localctx.moveOrder = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(_la===MySqlParser.FIRST || _la===MySqlParser.NEXT)) {
	            localctx.moveOrder = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 5011;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,622,this._ctx);
	        if(la_===1) {
	            this.state = 5009;
	            this.match(MySqlParser.WHERE);
	            this.state = 5010;
	            this.expression(0);

	        }
	        this.state = 5015;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,623,this._ctx);
	        if(la_===1) {
	            this.state = 5013;
	            this.match(MySqlParser.LIMIT);
	            this.state = 5014;
	            this.decimalLiteral();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	handlerCloseStatement() {
	    let localctx = new HandlerCloseStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 384, MySqlParser.RULE_handlerCloseStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5017;
	        this.match(MySqlParser.HANDLER);
	        this.state = 5018;
	        this.tableName();
	        this.state = 5019;
	        this.match(MySqlParser.CLOSE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	singleUpdateStatement() {
	    let localctx = new SingleUpdateStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 386, MySqlParser.RULE_singleUpdateStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5021;
	        this.match(MySqlParser.UPDATE);
	        this.state = 5023;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,624,this._ctx);
	        if(la_===1) {
	            this.state = 5022;
	            localctx.priority = this.match(MySqlParser.LOW_PRIORITY);

	        }
	        this.state = 5026;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,625,this._ctx);
	        if(la_===1) {
	            this.state = 5025;
	            this.match(MySqlParser.IGNORE);

	        }
	        this.state = 5028;
	        this.tableName();
	        this.state = 5030;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,626,this._ctx);
	        if(la_===1) {
	            this.state = 5029;
	            this.baseElementAlias();

	        }
	        this.state = 5033;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,627,this._ctx);
	        if(la_===1) {
	            this.state = 5032;
	            localctx._setUpdatedElements = this.setUpdatedElements();

	        }

	                // setUpdatedElements -> setUpdatedElements? Error-Tolerant
	                this.checkContextExist(localctx._setUpdatedElements, 'Please provide set statement');
	              
	        this.state = 5037;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,628,this._ctx);
	        if(la_===1) {
	            this.state = 5036;
	            this.whereExpressionOptional();

	        }
	        this.state = 5040;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,629,this._ctx);
	        if(la_===1) {
	            this.state = 5039;
	            this.orderByClause();

	        }
	        this.state = 5043;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,630,this._ctx);
	        if(la_===1) {
	            this.state = 5042;
	            this.limitClause();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multipleUpdateStatement() {
	    let localctx = new MultipleUpdateStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 388, MySqlParser.RULE_multipleUpdateStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5045;
	        this.match(MySqlParser.UPDATE);
	        this.state = 5047;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,631,this._ctx);
	        if(la_===1) {
	            this.state = 5046;
	            localctx.priority = this.match(MySqlParser.LOW_PRIORITY);

	        }
	        this.state = 5050;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,632,this._ctx);
	        if(la_===1) {
	            this.state = 5049;
	            this.match(MySqlParser.IGNORE);

	        }
	        this.state = 5052;
	        this.tableSources();
	        this.state = 5054;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,633,this._ctx);
	        if(la_===1) {
	            this.state = 5053;
	            localctx._setUpdatedElements = this.setUpdatedElements();

	        }

	                // setUpdatedElements -> setUpdatedElements? Error-Tolerant
	                this.checkContextExist(localctx._setUpdatedElements, 'Please provide set statement');
	              
	        this.state = 5058;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,634,this._ctx);
	        if(la_===1) {
	            this.state = 5057;
	            this.whereExpressionOptional();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setUpdatedElements() {
	    let localctx = new SetUpdatedElementsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 390, MySqlParser.RULE_setUpdatedElements);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5060;
	        this.match(MySqlParser.SET);
	        this.state = 5061;
	        this.updatedElement();
	        this.state = 5066;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,635,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 5062;
	                this.match(MySqlParser.COMMA);
	                this.state = 5063;
	                this.updatedElement(); 
	            }
	            this.state = 5068;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,635,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	updateStatementInceptor() {
	    let localctx = new UpdateStatementInceptorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 392, MySqlParser.RULE_updateStatementInceptor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5069;
	        this.match(MySqlParser.UPDATE);
	        this.state = 5070;
	        this.crudTargetClause();
	        this.state = 5073;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,636,this._ctx);
	        if(la_===1) {
	            this.state = 5071;
	            this.match(MySqlParser.SET);
	            this.state = 5072;
	            localctx._updateAssignClause = this.updateAssignClause();

	        }

	                // (SET ...) -> (SET ...)? Error-Tolerant
	                this.checkContextExist(localctx._updateAssignClause, 'Please provide set statement');
	              
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	crudTargetClause() {
	    let localctx = new CrudTargetClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 394, MySqlParser.RULE_crudTargetClause);
	    try {
	        this.state = 5093;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,641,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new CrudTargetTableContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5078;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,637,this._ctx);
	            if(la_===1) {
	                this.state = 5077;
	                this.match(MySqlParser.TABLE);

	            }
	            this.state = 5080;
	            this.tableName();
	            this.state = 5082;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,638,this._ctx);
	            if(la_===1) {
	                this.state = 5081;
	                this.partitionSpec();

	            }
	            this.state = 5085;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,639,this._ctx);
	            if(la_===1) {
	                this.state = 5084;
	                this.baseElementAlias();

	            }
	            break;

	        case 2:
	            localctx = new CrudTargetSubqueryContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5087;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 5088;
	            this.selectStatement();
	            this.state = 5089;
	            this.match(MySqlParser.RR_BRACKET);
	            this.state = 5091;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,640,this._ctx);
	            if(la_===1) {
	                this.state = 5090;
	                this.baseElementAlias();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	updateAssignClause() {
	    let localctx = new UpdateAssignClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 396, MySqlParser.RULE_updateAssignClause);
	    try {
	        this.state = 5116;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,645,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5095;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 5096;
	            this.columnNames();
	            this.state = 5097;
	            this.match(MySqlParser.RR_BRACKET);
	            this.state = 5098;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 5099;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 5100;
	            this.selectStatement();
	            this.state = 5101;
	            this.match(MySqlParser.RR_BRACKET);
	            this.state = 5103;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,642,this._ctx);
	            if(la_===1) {
	                this.state = 5102;
	                this.whereExpressionOptional();

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5105;
	            this.updateAssignClauseElement();
	            this.state = 5110;
	            this._errHandler.sync(this);
	            let _alt = this._interp.adaptivePredict(this._input,643,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 5106;
	                    this.match(MySqlParser.COMMA);
	                    this.state = 5107;
	                    this.updateAssignClauseElement(); 
	                }
	                this.state = 5112;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,643,this._ctx);
	            }

	            this.state = 5114;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,644,this._ctx);
	            if(la_===1) {
	                this.state = 5113;
	                this.whereExpressionOptional();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	updateAssignClauseElement() {
	    let localctx = new UpdateAssignClauseElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 398, MySqlParser.RULE_updateAssignClauseElement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5118;
	        this.fullColumnName();
	        this.state = 5120;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,646,this._ctx);
	        if(la_===1) {
	            this.state = 5119;
	            localctx.OP = this.match(MySqlParser.EQUAL_SYMBOL);

	        }
	        this.state = 5123;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,647,this._ctx);
	        if(la_===1) {
	            this.state = 5122;
	            localctx._expression = this.expression(0);

	        }

	                this.checkContextExist(localctx._expression, 'Please provide updated expression');
	                this.checkTokenExist(localctx.OP, 'Please provide updated expression');
	              
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	deleteStatementInceptor() {
	    let localctx = new DeleteStatementInceptorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 400, MySqlParser.RULE_deleteStatementInceptor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5127;
	        this.match(MySqlParser.DELETE);
	        this.state = 5129;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,648,this._ctx);
	        if(la_===1) {
	            this.state = 5128;
	            this.match(MySqlParser.FROM);

	        }
	        this.state = 5131;
	        this.crudTargetClause();
	        this.state = 5133;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,649,this._ctx);
	        if(la_===1) {
	            this.state = 5132;
	            this.whereExpressionOptional();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orderByClause() {
	    let localctx = new OrderByClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 402, MySqlParser.RULE_orderByClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5135;
	        this.match(MySqlParser.ORDER);
	        this.state = 5136;
	        this.match(MySqlParser.BY);
	        this.state = 5137;
	        this.orderByExpression();
	        this.state = 5142;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,650,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 5138;
	                this.match(MySqlParser.COMMA);
	                this.state = 5139;
	                this.orderByExpression(); 
	            }
	            this.state = 5144;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,650,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orderByExpression() {
	    let localctx = new OrderByExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 404, MySqlParser.RULE_orderByExpression);
	    var _la = 0; // Token type
	    try {
	        this.state = 5158;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,654,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5145;
	            if (!( this.isDialect('mysql'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('mysql')");
	            }
	            this.state = 5146;
	            this.expressionOptional();
	            this.state = 5148;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,651,this._ctx);
	            if(la_===1) {
	                this.state = 5147;
	                localctx.order = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===MySqlParser.ASC || _la===MySqlParser.DESC)) {
	                    localctx.order = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5150;
	            if (!( this.isDialect('inceptor'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('inceptor')");
	            }
	            this.state = 5151;
	            this.expressionOptional();
	            this.state = 5153;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,652,this._ctx);
	            if(la_===1) {
	                this.state = 5152;
	                localctx.order = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===MySqlParser.ASC || _la===MySqlParser.DESC)) {
	                    localctx.order = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }

	            }
	            this.state = 5156;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,653,this._ctx);
	            if(la_===1) {
	                this.state = 5155;
	                this.nullsOrder();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nullsOrder() {
	    let localctx = new NullsOrderContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 406, MySqlParser.RULE_nullsOrder);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5160;
	        this.match(MySqlParser.NULLS);
	        this.state = 5161;
	        _la = this._input.LA(1);
	        if(!(_la===MySqlParser.FIRST || _la===MySqlParser.LAST)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	clusterByClause() {
	    let localctx = new ClusterByClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 408, MySqlParser.RULE_clusterByClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5163;
	        if (!( this.isDialect('inceptor'))) {
	            throw new antlr4.error.FailedPredicateException(this, "this.isDialect('inceptor')");
	        }
	        this.state = 5164;
	        this.match(MySqlParser.CLUSTER);
	        this.state = 5165;
	        this.match(MySqlParser.BY);
	        this.state = 5166;
	        this.expressionOptional();
	        this.state = 5171;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,655,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 5167;
	                this.match(MySqlParser.COMMA);
	                this.state = 5168;
	                this.expressionOptional(); 
	            }
	            this.state = 5173;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,655,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	distributeByClause() {
	    let localctx = new DistributeByClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 410, MySqlParser.RULE_distributeByClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5174;
	        if (!( this.isDialect('inceptor'))) {
	            throw new antlr4.error.FailedPredicateException(this, "this.isDialect('inceptor')");
	        }
	        this.state = 5175;
	        this.match(MySqlParser.DISTRIBUTE);
	        this.state = 5176;
	        this.match(MySqlParser.BY);
	        this.state = 5177;
	        this.expressionOptional();
	        this.state = 5182;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,656,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 5178;
	                this.match(MySqlParser.COMMA);
	                this.state = 5179;
	                this.expressionOptional(); 
	            }
	            this.state = 5184;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,656,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sortByClause() {
	    let localctx = new SortByClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 412, MySqlParser.RULE_sortByClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5185;
	        if (!( this.isDialect('inceptor'))) {
	            throw new antlr4.error.FailedPredicateException(this, "this.isDialect('inceptor')");
	        }
	        this.state = 5186;
	        this.match(MySqlParser.SORT);
	        this.state = 5187;
	        this.match(MySqlParser.BY);
	        this.state = 5188;
	        this.orderByExpression();
	        this.state = 5193;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,657,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 5189;
	                this.match(MySqlParser.COMMA);
	                this.state = 5190;
	                this.orderByExpression(); 
	            }
	            this.state = 5195;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,657,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableSources() {
	    let localctx = new TableSourcesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 414, MySqlParser.RULE_tableSources);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5196;
	        this.tableSource();
	        this.state = 5201;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,658,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 5197;
	                this.match(MySqlParser.COMMA);
	                this.state = 5198;
	                this.tableSource(); 
	            }
	            this.state = 5203;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,658,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableSource() {
	    let localctx = new TableSourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 416, MySqlParser.RULE_tableSource);
	    var _la = 0; // Token type
	    try {
	        this.state = 5233;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,663,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new TableSourceBaseContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5204;
	            this.tableSourceItem();
	            this.state = 5208;
	            this._errHandler.sync(this);
	            let _alt = this._interp.adaptivePredict(this._input,659,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 5205;
	                    this.joinPart(); 
	                }
	                this.state = 5210;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,659,this._ctx);
	            }

	            this.state = 5214;
	            this._errHandler.sync(this);
	            let _alt = this._interp.adaptivePredict(this._input,660,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 5211;
	                    this.lateralView(); 
	                }
	                this.state = 5216;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,660,this._ctx);
	            }

	            break;

	        case 2:
	            localctx = new TableSourceNestedContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5217;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 5218;
	            this.tableSourceItem();
	            this.state = 5222;
	            this._errHandler.sync(this);
	            let _alt = this._interp.adaptivePredict(this._input,661,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 5219;
	                    this.joinPart(); 
	                }
	                this.state = 5224;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,661,this._ctx);
	            }

	            this.state = 5228;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.LATERAL) {
	                this.state = 5225;
	                this.lateralView();
	                this.state = 5230;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 5231;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableSourceItem() {
	    let localctx = new TableSourceItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 418, MySqlParser.RULE_tableSourceItem);
	    var _la = 0; // Token type
	    try {
	        this.state = 5304;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,673,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new AtomTableItemContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5235;
	            this.tableName();
	            this.state = 5241;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,664,this._ctx);
	            if(la_===1) {
	                this.state = 5236;
	                this.match(MySqlParser.PARTITION);
	                this.state = 5237;
	                this.match(MySqlParser.LR_BRACKET);
	                this.state = 5238;
	                this.uidList();
	                this.state = 5239;
	                this.match(MySqlParser.RR_BRACKET);

	            }
	            this.state = 5244;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,665,this._ctx);
	            if(la_===1) {
	                this.state = 5243;
	                this.tableSourceItemIndex();

	            }
	            break;

	        case 2:
	            localctx = new AtomTableItemContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5246;
	            this.tableName();
	            this.state = 5252;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,666,this._ctx);
	            if(la_===1) {
	                this.state = 5247;
	                this.match(MySqlParser.PARTITION);
	                this.state = 5248;
	                this.match(MySqlParser.LR_BRACKET);
	                this.state = 5249;
	                this.uidList();
	                this.state = 5250;
	                this.match(MySqlParser.RR_BRACKET);

	            }
	            this.state = 5254;
	            this.baseElementAlias();
	            this.state = 5256;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,667,this._ctx);
	            if(la_===1) {
	                this.state = 5255;
	                this.tableSourceItemIndex();

	            }
	            break;

	        case 3:
	            localctx = new SubqueryTableItemContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5263;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,668,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 5258;
	                this.selectStatementPlus();
	                break;

	            case 2:
	                this.state = 5259;
	                this.match(MySqlParser.LR_BRACKET);
	                this.state = 5260;
	                localctx.parenthesisSubquery = this.selectStatementPlus();
	                this.state = 5261;
	                this.match(MySqlParser.RR_BRACKET);
	                break;

	            }

	                    // inceptor allow alias not to be defined
	                    if (this.isDialect('mysql')) {
	                      this.notifyErrorListeners('Please provide subquery an alias');
	                    }
	                  
	            break;

	        case 4:
	            localctx = new SubqueryTableItemContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5272;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,669,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 5267;
	                this.selectStatementPlus();
	                break;

	            case 2:
	                this.state = 5268;
	                this.match(MySqlParser.LR_BRACKET);
	                this.state = 5269;
	                localctx.parenthesisSubquery = this.selectStatementPlus();
	                this.state = 5270;
	                this.match(MySqlParser.RR_BRACKET);
	                break;

	            }
	            this.state = 5274;
	            this.baseElementAlias();
	            break;

	        case 5:
	            localctx = new TableSourcesItemContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 5276;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 5277;
	            this.tableSources();
	            this.state = 5278;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 6:
	            localctx = new ValuesSourceTableItemContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 5280;
	            if (!( this.isDialect('inceptor'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('inceptor')");
	            }

	            this.state = 5281;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 5282;
	            this.match(MySqlParser.VALUES);
	            this.state = 5283;
	            this.valuesSourceExprs();
	            this.state = 5288;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.COMMA) {
	                this.state = 5284;
	                this.match(MySqlParser.COMMA);
	                this.state = 5285;
	                this.valuesSourceExprs();
	                this.state = 5290;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 5291;
	            this.match(MySqlParser.RR_BRACKET);
	            this.state = 5294;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,671,this._ctx);
	            if(la_===1) {
	                this.state = 5293;
	                localctx._baseElementAlias = this.baseElementAlias();

	            }
	            this.state = 5300;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,672,this._ctx);
	            if(la_===1) {
	                this.state = 5296;
	                this.match(MySqlParser.LR_BRACKET);
	                this.state = 5297;
	                localctx._uidList = this.uidList();
	                this.state = 5298;
	                this.match(MySqlParser.RR_BRACKET);

	            }

	                    if (localctx._uidList) {
	                      this.checkContextExist(localctx._baseElementAlias, 'Please provide alias');
	                    }
	                  
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableSourceItemIndex() {
	    let localctx = new TableSourceItemIndexContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 420, MySqlParser.RULE_tableSourceItemIndex);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5306;
	        if (!( this.isDialect('mysql'))) {
	            throw new antlr4.error.FailedPredicateException(this, "this.isDialect('mysql')");
	        }

	        this.state = 5307;
	        this.indexHint();
	        this.state = 5312;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,674,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 5308;
	                this.match(MySqlParser.COMMA);
	                this.state = 5309;
	                this.indexHint(); 
	            }
	            this.state = 5314;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,674,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fromClauseSuggester() {
	    let localctx = new FromClauseSuggesterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 422, MySqlParser.RULE_fromClauseSuggester);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5315;
	        this.tableName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectStatementPlus() {
	    let localctx = new SelectStatementPlusContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 424, MySqlParser.RULE_selectStatementPlus);
	    try {
	        this.state = 5320;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,675,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5317;
	            this.selectStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5318;
	            if (!( this.isDialect('inceptor'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('inceptor')");
	            }
	            this.state = 5319;
	            this.withStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	valuesSourceExprs() {
	    let localctx = new ValuesSourceExprsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 426, MySqlParser.RULE_valuesSourceExprs);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5322;
	        this.match(MySqlParser.LR_BRACKET);
	        this.state = 5323;
	        this.expression(0);
	        this.state = 5328;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MySqlParser.COMMA) {
	            this.state = 5324;
	            this.match(MySqlParser.COMMA);
	            this.state = 5325;
	            this.expression(0);
	            this.state = 5330;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 5331;
	        this.match(MySqlParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	indexHint() {
	    let localctx = new IndexHintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 428, MySqlParser.RULE_indexHint);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5333;
	        localctx.indexHintAction = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(_la===MySqlParser.FORCE || _la===MySqlParser.IGNORE || _la===MySqlParser.USE)) {
	            localctx.indexHintAction = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 5334;
	        localctx.keyFormat = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(_la===MySqlParser.INDEX || _la===MySqlParser.KEY)) {
	            localctx.keyFormat = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 5337;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.FOR) {
	            this.state = 5335;
	            this.match(MySqlParser.FOR);
	            this.state = 5336;
	            this.indexHintType();
	        }

	        this.state = 5339;
	        this.match(MySqlParser.LR_BRACKET);
	        this.state = 5340;
	        this.uidList();
	        this.state = 5341;
	        this.match(MySqlParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	indexHintType() {
	    let localctx = new IndexHintTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 430, MySqlParser.RULE_indexHintType);
	    try {
	        this.state = 5348;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.JOIN:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5343;
	            this.match(MySqlParser.JOIN);
	            break;
	        case MySqlParser.ORDER:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5344;
	            this.match(MySqlParser.ORDER);
	            this.state = 5345;
	            this.match(MySqlParser.BY);
	            break;
	        case MySqlParser.GROUP:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5346;
	            this.match(MySqlParser.GROUP);
	            this.state = 5347;
	            this.match(MySqlParser.BY);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	joinPart() {
	    let localctx = new JoinPartContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 432, MySqlParser.RULE_joinPart);
	    var _la = 0; // Token type
	    try {
	        this.state = 5397;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,687,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new OuterJoinContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5350;
	            this.joinOuterType();
	            this.state = 5352;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.OUTER) {
	                this.state = 5351;
	                this.match(MySqlParser.OUTER);
	            }

	            this.state = 5354;
	            this.match(MySqlParser.JOIN);
	            this.state = 5355;
	            this.tableSourceItem();
	            this.state = 5357;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,680,this._ctx);
	            if(la_===1) {
	                this.state = 5356;
	                localctx._joinCondition = this.joinCondition();

	            }

	                    // TODO: select * from db.table LEFT JOIN xxx. LEFT will be treated as table alias.
	                    if (this.isDialect('mysql')) {
	                      this.checkContextExist(localctx._joinCondition, 'Please provide join condition');
	                    }
	                  
	            break;

	        case 2:
	            localctx = new NaturalJoinContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5361;
	            this.match(MySqlParser.NATURAL);
	            this.state = 5363;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,681,this._ctx);
	            if(la_===1) {
	                this.state = 5362;
	                this.joinNaturalSubType();

	            }
	            this.state = 5365;
	            this.match(MySqlParser.JOIN);
	            this.state = 5366;
	            this.tableSourceItem();
	            break;

	        case 3:
	            localctx = new StraightJoinContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5367;
	            if (!( this.isDialect('mysql'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('mysql')");
	            }
	            this.state = 5368;
	            this.match(MySqlParser.STRAIGHT_JOIN);
	            this.state = 5369;
	            this.tableSourceItem();
	            this.state = 5372;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,682,this._ctx);
	            if(la_===1) {
	                this.state = 5370;
	                this.match(MySqlParser.ON);
	                this.state = 5371;
	                this.expression(0);

	            }
	            break;

	        case 4:
	            localctx = new LeftSemiJoinContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5374;
	            if (!( this.isDialect('inceptor'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('inceptor')");
	            }
	            this.state = 5375;
	            this.match(MySqlParser.LEFT);
	            this.state = 5376;
	            this.match(MySqlParser.SEMI2);
	            this.state = 5377;
	            this.match(MySqlParser.JOIN);
	            this.state = 5378;
	            this.tableSourceItem();
	            this.state = 5380;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,683,this._ctx);
	            if(la_===1) {
	                this.state = 5379;
	                this.joinCondition();

	            }
	            break;

	        case 5:
	            localctx = new InnerJoinContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 5383;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.CROSS || _la===MySqlParser.INNER) {
	                this.state = 5382;
	                _la = this._input.LA(1);
	                if(!(_la===MySqlParser.CROSS || _la===MySqlParser.INNER)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 5385;
	            this.match(MySqlParser.JOIN);
	            this.state = 5386;
	            this.tableSourceItem();
	            this.state = 5388;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,685,this._ctx);
	            if(la_===1) {
	                this.state = 5387;
	                this.joinCondition();

	            }
	            break;

	        case 6:
	            localctx = new PlaceholderJoinContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 5390;
	            localctx._joinTypeAnchor = this.joinTypeAnchor();
	            this.state = 5391;
	            this.tableSourceItem();
	            this.state = 5393;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,686,this._ctx);
	            if(la_===1) {
	                this.state = 5392;
	                this.joinCondition();

	            }

	                    this.notifyPlaceholderError(localctx._joinTypeAnchor, 'Please provide join type')
	                  
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	joinTypeAnchor() {
	    let localctx = new JoinTypeAnchorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 434, MySqlParser.RULE_joinTypeAnchor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5399;
	        this.placeholder();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	joinOuterType() {
	    let localctx = new JoinOuterTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 436, MySqlParser.RULE_joinOuterType);
	    try {
	        this.state = 5408;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,688,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5401;
	            if (!( this.isDialect('mysql'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('mysql')");
	            }
	            this.state = 5402;
	            this.match(MySqlParser.LEFT);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5403;
	            this.match(MySqlParser.RIGHT);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5404;
	            if (!( this.isDialect('inceptor'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('inceptor')");
	            }
	            this.state = 5405;
	            this.match(MySqlParser.LEFT);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5406;
	            this.match(MySqlParser.RIGHT);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 5407;
	            this.match(MySqlParser.FULL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	joinNaturalSubType() {
	    let localctx = new JoinNaturalSubTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 438, MySqlParser.RULE_joinNaturalSubType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5410;
	        if (!( this.isDialect('mysql'))) {
	            throw new antlr4.error.FailedPredicateException(this, "this.isDialect('mysql')");
	        }
	        this.state = 5411;
	        _la = this._input.LA(1);
	        if(!(_la===MySqlParser.LEFT || _la===MySqlParser.RIGHT)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 5413;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.OUTER) {
	            this.state = 5412;
	            this.match(MySqlParser.OUTER);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	joinCondition() {
	    let localctx = new JoinConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 440, MySqlParser.RULE_joinCondition);
	    try {
	        this.state = 5423;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,690,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5415;
	            this.match(MySqlParser.ON);
	            this.state = 5416;
	            this.expressionOptional();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5417;
	            if (!( this.isDialect('mysql'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('mysql')");
	            }
	            this.state = 5418;
	            this.match(MySqlParser.USING);
	            this.state = 5419;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 5420;
	            this.uidList();
	            this.state = 5421;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lateralView() {
	    let localctx = new LateralViewContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 442, MySqlParser.RULE_lateralView);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5425;
	        this.match(MySqlParser.LATERAL);
	        this.state = 5426;
	        this.match(MySqlParser.VIEW);
	        this.state = 5428;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,691,this._ctx);
	        if(la_===1) {
	            this.state = 5427;
	            this.match(MySqlParser.OUTER);

	        }
	        this.state = 5430;
	        this.functionCall();
	        this.state = 5432;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,692,this._ctx);
	        if(la_===1) {
	            this.state = 5431;
	            localctx._uid = this.uid();

	        }
	        this.state = 5436;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,693,this._ctx);
	        if(la_===1) {
	            this.state = 5434;
	            this.match(MySqlParser.AS);
	            this.state = 5435;
	            this.uidList();

	        }

	                this.checkContextExist(localctx._uid, 'Please provide alias');
	              
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	queryExpression() {
	    let localctx = new QueryExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 444, MySqlParser.RULE_queryExpression);
	    try {
	        this.state = 5448;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,694,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5440;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 5441;
	            this.querySpecification();
	            this.state = 5442;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5444;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 5445;
	            this.queryExpression();
	            this.state = 5446;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	queryExpressionNointo() {
	    let localctx = new QueryExpressionNointoContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 446, MySqlParser.RULE_queryExpressionNointo);
	    try {
	        this.state = 5458;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,695,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5450;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 5451;
	            this.querySpecificationNointo();
	            this.state = 5452;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5454;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 5455;
	            this.queryExpressionNointo();
	            this.state = 5456;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	querySpecification() {
	    let localctx = new QuerySpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 448, MySqlParser.RULE_querySpecification);
	    try {
	        this.state = 5517;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,713,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5460;
	            this.match(MySqlParser.SELECT);
	            this.state = 5462;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,696,this._ctx);
	            if(la_===1) {
	                this.state = 5461;
	                this.selectSpec();

	            }
	            this.state = 5464;
	            this.fromClauseSuggester();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5465;
	            this.match(MySqlParser.SELECT);
	            this.state = 5467;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,697,this._ctx);
	            if(la_===1) {
	                this.state = 5466;
	                this.selectSpec();

	            }
	            this.state = 5469;
	            this.selectElements();
	            this.state = 5471;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,698,this._ctx);
	            if(la_===1) {
	                this.state = 5470;
	                this.selectIntoExpression();

	            }
	            this.state = 5474;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,699,this._ctx);
	            if(la_===1) {
	                this.state = 5473;
	                this.fromClause();

	            }
	            this.state = 5477;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,700,this._ctx);
	            if(la_===1) {
	                this.state = 5476;
	                this.orderByClause();

	            }
	            this.state = 5480;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,701,this._ctx);
	            if(la_===1) {
	                this.state = 5479;
	                this.clusterByClause();

	            }
	            this.state = 5483;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,702,this._ctx);
	            if(la_===1) {
	                this.state = 5482;
	                this.distributeByClause();

	            }
	            this.state = 5486;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,703,this._ctx);
	            if(la_===1) {
	                this.state = 5485;
	                this.sortByClause();

	            }
	            this.state = 5489;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,704,this._ctx);
	            if(la_===1) {
	                this.state = 5488;
	                this.limitClause();

	            }
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5491;
	            this.match(MySqlParser.SELECT);
	            this.state = 5493;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,705,this._ctx);
	            if(la_===1) {
	                this.state = 5492;
	                this.selectSpec();

	            }
	            this.state = 5495;
	            this.selectElements();
	            this.state = 5497;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,706,this._ctx);
	            if(la_===1) {
	                this.state = 5496;
	                this.fromClause();

	            }
	            this.state = 5500;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,707,this._ctx);
	            if(la_===1) {
	                this.state = 5499;
	                this.orderByClause();

	            }
	            this.state = 5503;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,708,this._ctx);
	            if(la_===1) {
	                this.state = 5502;
	                this.clusterByClause();

	            }
	            this.state = 5506;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,709,this._ctx);
	            if(la_===1) {
	                this.state = 5505;
	                this.distributeByClause();

	            }
	            this.state = 5509;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,710,this._ctx);
	            if(la_===1) {
	                this.state = 5508;
	                this.sortByClause();

	            }
	            this.state = 5512;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,711,this._ctx);
	            if(la_===1) {
	                this.state = 5511;
	                this.limitClause();

	            }
	            this.state = 5515;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,712,this._ctx);
	            if(la_===1) {
	                this.state = 5514;
	                this.selectIntoExpression();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	querySpecificationNointo() {
	    let localctx = new QuerySpecificationNointoContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 450, MySqlParser.RULE_querySpecificationNointo);
	    try {
	        this.state = 5547;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,722,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5519;
	            this.match(MySqlParser.SELECT);
	            this.state = 5521;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,714,this._ctx);
	            if(la_===1) {
	                this.state = 5520;
	                this.selectSpec();

	            }
	            this.state = 5523;
	            this.fromClauseSuggester();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5524;
	            this.match(MySqlParser.SELECT);
	            this.state = 5526;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,715,this._ctx);
	            if(la_===1) {
	                this.state = 5525;
	                this.selectSpec();

	            }
	            this.state = 5528;
	            this.selectElements();
	            this.state = 5530;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,716,this._ctx);
	            if(la_===1) {
	                this.state = 5529;
	                this.fromClause();

	            }
	            this.state = 5533;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,717,this._ctx);
	            if(la_===1) {
	                this.state = 5532;
	                this.orderByClause();

	            }
	            this.state = 5536;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,718,this._ctx);
	            if(la_===1) {
	                this.state = 5535;
	                this.clusterByClause();

	            }
	            this.state = 5539;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,719,this._ctx);
	            if(la_===1) {
	                this.state = 5538;
	                this.distributeByClause();

	            }
	            this.state = 5542;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,720,this._ctx);
	            if(la_===1) {
	                this.state = 5541;
	                this.sortByClause();

	            }
	            this.state = 5545;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,721,this._ctx);
	            if(la_===1) {
	                this.state = 5544;
	                this.limitClause();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unionParenthesis() {
	    let localctx = new UnionParenthesisContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 452, MySqlParser.RULE_unionParenthesis);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5549;
	        this.match(MySqlParser.UNION);
	        this.state = 5551;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.ALL || _la===MySqlParser.DISTINCT) {
	            this.state = 5550;
	            localctx.unionType = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.ALL || _la===MySqlParser.DISTINCT)) {
	                localctx.unionType = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 5553;
	        this.queryExpressionNointo();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unionStatement() {
	    let localctx = new UnionStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 454, MySqlParser.RULE_unionStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5555;
	        this.match(MySqlParser.UNION);
	        this.state = 5557;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.ALL || _la===MySqlParser.DISTINCT) {
	            this.state = 5556;
	            localctx.unionType = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.ALL || _la===MySqlParser.DISTINCT)) {
	                localctx.unionType = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 5561;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.SELECT:
	            this.state = 5559;
	            this.querySpecificationNointo();
	            break;
	        case MySqlParser.LR_BRACKET:
	            this.state = 5560;
	            this.queryExpressionNointo();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectSpec() {
	    let localctx = new SelectSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 456, MySqlParser.RULE_selectSpec);
	    try {
	        this.state = 5571;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,727,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5563;
	            if (!( this.isDialect('mysql'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('mysql')");
	            }
	            this.state = 5565; 
	            this._errHandler.sync(this);
	            let _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 5564;
	            		this.selectSpecMysql();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 5567; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,726, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5569;
	            if (!( this.isDialect('inceptor'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('inceptor')");
	            }
	            this.state = 5570;
	            this.selectSpecInceptor();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectSpecMysql() {
	    let localctx = new SelectSpecMysqlContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 458, MySqlParser.RULE_selectSpecMysql);
	    var _la = 0; // Token type
	    try {
	        this.state = 5581;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.ALL:
	        case MySqlParser.DISTINCT:
	        case MySqlParser.DISTINCTROW:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5573;
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.ALL || _la===MySqlParser.DISTINCT || _la===MySqlParser.DISTINCTROW)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case MySqlParser.HIGH_PRIORITY:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5574;
	            this.match(MySqlParser.HIGH_PRIORITY);
	            break;
	        case MySqlParser.STRAIGHT_JOIN:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5575;
	            this.match(MySqlParser.STRAIGHT_JOIN);
	            break;
	        case MySqlParser.SQL_SMALL_RESULT:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5576;
	            this.match(MySqlParser.SQL_SMALL_RESULT);
	            break;
	        case MySqlParser.SQL_BIG_RESULT:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 5577;
	            this.match(MySqlParser.SQL_BIG_RESULT);
	            break;
	        case MySqlParser.SQL_BUFFER_RESULT:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 5578;
	            this.match(MySqlParser.SQL_BUFFER_RESULT);
	            break;
	        case MySqlParser.SQL_CACHE:
	        case MySqlParser.SQL_NO_CACHE:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 5579;
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.SQL_CACHE || _la===MySqlParser.SQL_NO_CACHE)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case MySqlParser.SQL_CALC_FOUND_ROWS:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 5580;
	            this.match(MySqlParser.SQL_CALC_FOUND_ROWS);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectSpecInceptor() {
	    let localctx = new SelectSpecInceptorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 460, MySqlParser.RULE_selectSpecInceptor);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5583;
	        _la = this._input.LA(1);
	        if(!(_la===MySqlParser.ALL || _la===MySqlParser.DISTINCT)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectElements() {
	    let localctx = new SelectElementsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 462, MySqlParser.RULE_selectElements);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5587;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,729,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 5585;
	            localctx.star = this.match(MySqlParser.STAR);
	            break;

	        case 2:
	            this.state = 5586;
	            this.selectElement();
	            break;

	        }
	        this.state = 5593;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,730,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 5589;
	                this.match(MySqlParser.COMMA);
	                this.state = 5590;
	                this.selectElement(); 
	            }
	            this.state = 5595;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,730,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectElement() {
	    let localctx = new SelectElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 464, MySqlParser.RULE_selectElement);
	    try {
	        this.state = 5621;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,736,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new SelectStarElementContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5596;
	            this.fullId();
	            this.state = 5597;
	            this.match(MySqlParser.DOT);
	            this.state = 5598;
	            this.match(MySqlParser.STAR);
	            break;

	        case 2:
	            localctx = new SelectColumnElementContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5600;
	            this.funcColumnNameOptional();
	            this.state = 5602;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,731,this._ctx);
	            if(la_===1) {
	                this.state = 5601;
	                this.baseElementAlias();

	            }
	            break;

	        case 3:
	            localctx = new SelectFunctionElementContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5604;
	            this.functionCall();
	            this.state = 5606;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,732,this._ctx);
	            if(la_===1) {
	                this.state = 5605;
	                this.baseElementAlias();

	            }
	            break;

	        case 4:
	            localctx = new SelectExpressionElementContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5608;
	            this.expression(0);
	            this.state = 5610;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,733,this._ctx);
	            if(la_===1) {
	                this.state = 5609;
	                this.baseElementAlias();

	            }
	            break;

	        case 5:
	            localctx = new SelectExpressionElementContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 5612;
	            if (!( this.isDialect('mysql'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('mysql')");
	            }
	            this.state = 5615;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,734,this._ctx);
	            if(la_===1) {
	                this.state = 5613;
	                this.match(MySqlParser.LOCAL_ID);
	                this.state = 5614;
	                this.match(MySqlParser.VAR_ASSIGN);

	            }
	            this.state = 5617;
	            this.expression(0);
	            this.state = 5619;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,735,this._ctx);
	            if(la_===1) {
	                this.state = 5618;
	                this.baseElementAlias();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectIntoExpression() {
	    let localctx = new SelectIntoExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 466, MySqlParser.RULE_selectIntoExpression);
	    var _la = 0; // Token type
	    try {
	        this.state = 5668;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,744,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new SelectIntoVariablesContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5623;
	            this.match(MySqlParser.INTO);
	            this.state = 5624;
	            this.assignmentField();
	            this.state = 5629;
	            this._errHandler.sync(this);
	            let _alt = this._interp.adaptivePredict(this._input,737,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 5625;
	                    this.match(MySqlParser.COMMA);
	                    this.state = 5626;
	                    this.assignmentField(); 
	                }
	                this.state = 5631;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,737,this._ctx);
	            }

	            break;

	        case 2:
	            localctx = new SelectIntoExprsContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5632;
	            if (!( this.isDialect('inceptor'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('inceptor')");
	            }
	            this.state = 5635;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.BULK) {
	                this.state = 5633;
	                this.match(MySqlParser.BULK);
	                this.state = 5634;
	                this.match(MySqlParser.COLLECT);
	            }

	            this.state = 5637;
	            this.match(MySqlParser.INTO);
	            this.state = 5638;
	            this.expressions();
	            break;

	        case 3:
	            localctx = new SelectIntoDumpFileContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5639;
	            if (!( this.isDialect('mysql'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('mysql')");
	            }
	            this.state = 5640;
	            this.match(MySqlParser.INTO);
	            this.state = 5641;
	            this.match(MySqlParser.DUMPFILE);
	            this.state = 5642;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;

	        case 4:
	            localctx = new SelectIntoTextFileContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5643;
	            if (!( this.isDialect('mysql'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('mysql')");
	            }

	            this.state = 5644;
	            this.match(MySqlParser.INTO);
	            this.state = 5645;
	            this.match(MySqlParser.OUTFILE);
	            this.state = 5646;
	            localctx.filename = this.match(MySqlParser.STRING_LITERAL);
	            this.state = 5650;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,739,this._ctx);
	            if(la_===1) {
	                this.state = 5647;
	                this.match(MySqlParser.CHARACTER);
	                this.state = 5648;
	                this.match(MySqlParser.SET);
	                this.state = 5649;
	                localctx.charset = this.charsetName();

	            }
	            this.state = 5658;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,741,this._ctx);
	            if(la_===1) {
	                this.state = 5652;
	                localctx.fieldsFormat = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===MySqlParser.COLUMNS || _la===MySqlParser.FIELDS)) {
	                    localctx.fieldsFormat = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 5654; 
	                this._errHandler.sync(this);
	                let _alt = 1;
	                do {
	                	switch (_alt) {
	                	case 1:
	                		this.state = 5653;
	                		this.selectFieldsInto();
	                		break;
	                	default:
	                		throw new antlr4.error.NoViableAltException(this);
	                	}
	                	this.state = 5656; 
	                	this._errHandler.sync(this);
	                	_alt = this._interp.adaptivePredict(this._input,740, this._ctx);
	                } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );

	            }
	            this.state = 5666;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,743,this._ctx);
	            if(la_===1) {
	                this.state = 5660;
	                this.match(MySqlParser.LINES);
	                this.state = 5662; 
	                this._errHandler.sync(this);
	                let _alt = 1;
	                do {
	                	switch (_alt) {
	                	case 1:
	                		this.state = 5661;
	                		this.selectLinesInto();
	                		break;
	                	default:
	                		throw new antlr4.error.NoViableAltException(this);
	                	}
	                	this.state = 5664; 
	                	this._errHandler.sync(this);
	                	_alt = this._interp.adaptivePredict(this._input,742, this._ctx);
	                } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectFieldsInto() {
	    let localctx = new SelectFieldsIntoContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 468, MySqlParser.RULE_selectFieldsInto);
	    var _la = 0; // Token type
	    try {
	        this.state = 5682;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.TERMINATED:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5670;
	            this.match(MySqlParser.TERMINATED);
	            this.state = 5671;
	            this.match(MySqlParser.BY);
	            this.state = 5672;
	            localctx.terminationField = this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case MySqlParser.ENCLOSED:
	        case MySqlParser.OPTIONALLY:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5674;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.OPTIONALLY) {
	                this.state = 5673;
	                this.match(MySqlParser.OPTIONALLY);
	            }

	            this.state = 5676;
	            this.match(MySqlParser.ENCLOSED);
	            this.state = 5677;
	            this.match(MySqlParser.BY);
	            this.state = 5678;
	            localctx.enclosion = this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case MySqlParser.ESCAPED:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5679;
	            this.match(MySqlParser.ESCAPED);
	            this.state = 5680;
	            this.match(MySqlParser.BY);
	            this.state = 5681;
	            localctx.escaping = this.match(MySqlParser.STRING_LITERAL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectLinesInto() {
	    let localctx = new SelectLinesIntoContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 470, MySqlParser.RULE_selectLinesInto);
	    try {
	        this.state = 5690;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.STARTING:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5684;
	            this.match(MySqlParser.STARTING);
	            this.state = 5685;
	            this.match(MySqlParser.BY);
	            this.state = 5686;
	            localctx.starting = this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case MySqlParser.TERMINATED:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5687;
	            this.match(MySqlParser.TERMINATED);
	            this.state = 5688;
	            this.match(MySqlParser.BY);
	            this.state = 5689;
	            localctx.terminationLine = this.match(MySqlParser.STRING_LITERAL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fromClause() {
	    let localctx = new FromClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 472, MySqlParser.RULE_fromClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5692;
	        this.match(MySqlParser.FROM);
	        this.state = 5693;
	        this.tableSources();
	        this.state = 5695;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,748,this._ctx);
	        if(la_===1) {
	            this.state = 5694;
	            this.whereExpressionOptional();

	        }
	        this.state = 5698;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,749,this._ctx);
	        if(la_===1) {
	            this.state = 5697;
	            this.hierarchyClause();

	        }
	        this.state = 5701;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,750,this._ctx);
	        if(la_===1) {
	            this.state = 5700;
	            this.groupByClause();

	        }
	        this.state = 5704;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,751,this._ctx);
	        if(la_===1) {
	            this.state = 5703;
	            this.havingClause();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupByClause() {
	    let localctx = new GroupByClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 474, MySqlParser.RULE_groupByClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5706;
	        this.match(MySqlParser.GROUP);
	        this.state = 5707;
	        this.match(MySqlParser.BY);
	        this.state = 5708;
	        this.groupByItems();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	havingClause() {
	    let localctx = new HavingClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 476, MySqlParser.RULE_havingClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5710;
	        this.match(MySqlParser.HAVING);
	        this.state = 5711;
	        this.expressionOptional();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whereExpressionOptional() {
	    let localctx = new WhereExpressionOptionalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 478, MySqlParser.RULE_whereExpressionOptional);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5713;
	        this.match(MySqlParser.WHERE);
	        this.state = 5714;
	        this.expressionOptional();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	hierarchyClause() {
	    let localctx = new HierarchyClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 480, MySqlParser.RULE_hierarchyClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5716;
	        if (!( this.isDialect('inceptor'))) {
	            throw new antlr4.error.FailedPredicateException(this, "this.isDialect('inceptor')");
	        }
	        this.state = 5720;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.START) {
	            this.state = 5717;
	            this.match(MySqlParser.START);
	            this.state = 5718;
	            this.match(MySqlParser.WITH);
	            this.state = 5719;
	            localctx.startExpr = this.expressionOptional();
	        }

	        this.state = 5722;
	        this.match(MySqlParser.CONNECT);
	        this.state = 5723;
	        this.match(MySqlParser.BY);
	        this.state = 5725;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,753,this._ctx);
	        if(la_===1) {
	            this.state = 5724;
	            this.match(MySqlParser.NOCYCLE);

	        }
	        this.state = 5727;
	        localctx.connectExpr = this.expressionOptional();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupByItems() {
	    let localctx = new GroupByItemsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 482, MySqlParser.RULE_groupByItems);
	    var _la = 0; // Token type
	    try {
	        this.state = 5770;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,760,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5729;
	            if (!( this.isDialect('mysql'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('mysql')");
	            }
	            this.state = 5730;
	            this.groupByItem();
	            this.state = 5735;
	            this._errHandler.sync(this);
	            let _alt = this._interp.adaptivePredict(this._input,754,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 5731;
	                    this.match(MySqlParser.COMMA);
	                    this.state = 5732;
	                    this.groupByItem(); 
	                }
	                this.state = 5737;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,754,this._ctx);
	            }

	            this.state = 5740;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,755,this._ctx);
	            if(la_===1) {
	                this.state = 5738;
	                this.match(MySqlParser.WITH);
	                this.state = 5739;
	                this.match(MySqlParser.ROLLUP);

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5742;
	            if (!( this.isDialect('inceptor'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('inceptor')");
	            }
	            this.state = 5768;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,759,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 5747;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case MySqlParser.ROLLUP:
	                    this.state = 5743;
	                    this.match(MySqlParser.ROLLUP);
	                    break;
	                case MySqlParser.CUBE:
	                    this.state = 5744;
	                    this.match(MySqlParser.CUBE);
	                    break;
	                case MySqlParser.GROUPING:
	                    this.state = 5745;
	                    this.match(MySqlParser.GROUPING);
	                    this.state = 5746;
	                    this.match(MySqlParser.SETS);
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                this.state = 5749;
	                this.match(MySqlParser.LR_BRACKET);
	                this.state = 5750;
	                this.groupByItem();
	                this.state = 5755;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===MySqlParser.COMMA) {
	                    this.state = 5751;
	                    this.match(MySqlParser.COMMA);
	                    this.state = 5752;
	                    this.groupByItem();
	                    this.state = 5757;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 5758;
	                this.match(MySqlParser.RR_BRACKET);
	                break;

	            case 2:
	                this.state = 5760;
	                this.groupByItem();
	                this.state = 5765;
	                this._errHandler.sync(this);
	                let _alt = this._interp.adaptivePredict(this._input,758,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 5761;
	                        this.match(MySqlParser.COMMA);
	                        this.state = 5762;
	                        this.groupByItem(); 
	                    }
	                    this.state = 5767;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,758,this._ctx);
	                }

	                break;

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupByItem() {
	    let localctx = new GroupByItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 484, MySqlParser.RULE_groupByItem);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5772;
	        this.expressionOptional();
	        this.state = 5774;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,761,this._ctx);
	        if(la_===1) {
	            this.state = 5773;
	            localctx.order = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.ASC || _la===MySqlParser.DESC)) {
	                localctx.order = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	limitClause() {
	    let localctx = new LimitClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 486, MySqlParser.RULE_limitClause);
	    try {
	        this.state = 5780;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,762,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5776;
	            if (!( this.isDialect('mysql'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('mysql')");
	            }
	            this.state = 5777;
	            this.limitClauseMysql();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5778;
	            if (!( this.isDialect('inceptor'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('inceptor')");
	            }
	            this.state = 5779;
	            this.limitClauseInceptor();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	limitClauseMysql() {
	    let localctx = new LimitClauseMysqlContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 488, MySqlParser.RULE_limitClauseMysql);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5782;
	        this.match(MySqlParser.LIMIT);
	        this.state = 5793;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,764,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 5786;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,763,this._ctx);
	            if(la_===1) {
	                this.state = 5783;
	                localctx.offset = this.limitClauseAtom();
	                this.state = 5784;
	                this.match(MySqlParser.COMMA);

	            }
	            this.state = 5788;
	            localctx.limit = this.limitClauseAtom();
	            break;

	        case 2:
	            this.state = 5789;
	            localctx.limit = this.limitClauseAtom();
	            this.state = 5790;
	            this.match(MySqlParser.OFFSET);
	            this.state = 5791;
	            localctx.offset = this.limitClauseAtom();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	limitClauseAtom() {
	    let localctx = new LimitClauseAtomContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 490, MySqlParser.RULE_limitClauseAtom);
	    try {
	        this.state = 5797;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.ZERO_DECIMAL:
	        case MySqlParser.ONE_DECIMAL:
	        case MySqlParser.TWO_DECIMAL:
	        case MySqlParser.DECIMAL_LITERAL:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5795;
	            this.decimalLiteral();
	            break;
	        case MySqlParser.LOCAL_ID:
	        case MySqlParser.GLOBAL_ID:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5796;
	            this.mysqlVariable();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	limitClauseInceptor() {
	    let localctx = new LimitClauseInceptorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 492, MySqlParser.RULE_limitClauseInceptor);
	    var _la = 0; // Token type
	    try {
	        this.state = 5824;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,768,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5799;
	            this.match(MySqlParser.LIMIT);
	            this.state = 5803;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,766,this._ctx);
	            if(la_===1) {
	                this.state = 5800;
	                this.decimalLiteral();
	                this.state = 5801;
	                this.match(MySqlParser.COMMA);

	            }
	            this.state = 5805;
	            this.decimalLiteral();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5806;
	            this.match(MySqlParser.FETCH);
	            this.state = 5807;
	            this.match(MySqlParser.FIRST);
	            this.state = 5808;
	            this.decimalLiteral();
	            this.state = 5809;
	            this.match(MySqlParser.ROWS);
	            this.state = 5810;
	            this.match(MySqlParser.ONLY);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5816;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.OFFSET) {
	                this.state = 5812;
	                this.match(MySqlParser.OFFSET);
	                this.state = 5813;
	                this.decimalLiteral();
	                this.state = 5814;
	                this.match(MySqlParser.ROWS);
	            }

	            this.state = 5818;
	            this.match(MySqlParser.FETCH);
	            this.state = 5819;
	            this.match(MySqlParser.NEXT);
	            this.state = 5820;
	            this.decimalLiteral();
	            this.state = 5821;
	            this.match(MySqlParser.ROWS);
	            this.state = 5822;
	            this.match(MySqlParser.ONLY);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	startTransaction() {
	    let localctx = new StartTransactionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 494, MySqlParser.RULE_startTransaction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5826;
	        this.match(MySqlParser.START);
	        this.state = 5827;
	        this.match(MySqlParser.TRANSACTION);
	        this.state = 5836;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,770,this._ctx);
	        if(la_===1) {
	            this.state = 5828;
	            this.transactionMode();
	            this.state = 5833;
	            this._errHandler.sync(this);
	            let _alt = this._interp.adaptivePredict(this._input,769,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 5829;
	                    this.match(MySqlParser.COMMA);
	                    this.state = 5830;
	                    this.transactionMode(); 
	                }
	                this.state = 5835;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,769,this._ctx);
	            }


	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	beginWork() {
	    let localctx = new BeginWorkContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 496, MySqlParser.RULE_beginWork);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5838;
	        this.match(MySqlParser.BEGIN);
	        this.state = 5840;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,771,this._ctx);
	        if(la_===1) {
	            this.state = 5839;
	            this.match(MySqlParser.WORK);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	commitWork() {
	    let localctx = new CommitWorkContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 498, MySqlParser.RULE_commitWork);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5842;
	        this.match(MySqlParser.COMMIT);
	        this.state = 5844;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,772,this._ctx);
	        if(la_===1) {
	            this.state = 5843;
	            this.match(MySqlParser.WORK);

	        }
	        this.state = 5851;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,774,this._ctx);
	        if(la_===1) {
	            this.state = 5846;
	            this.match(MySqlParser.AND);
	            this.state = 5848;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.NO) {
	                this.state = 5847;
	                localctx.nochain = this.match(MySqlParser.NO);
	            }

	            this.state = 5850;
	            this.match(MySqlParser.CHAIN);

	        }
	        this.state = 5857;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,776,this._ctx);
	        if(la_===1) {
	            this.state = 5854;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.NO) {
	                this.state = 5853;
	                localctx.norelease = this.match(MySqlParser.NO);
	            }

	            this.state = 5856;
	            this.match(MySqlParser.RELEASE);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rollbackWork() {
	    let localctx = new RollbackWorkContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 500, MySqlParser.RULE_rollbackWork);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5859;
	        this.match(MySqlParser.ROLLBACK);
	        this.state = 5861;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,777,this._ctx);
	        if(la_===1) {
	            this.state = 5860;
	            this.match(MySqlParser.WORK);

	        }
	        this.state = 5868;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,779,this._ctx);
	        if(la_===1) {
	            this.state = 5863;
	            this.match(MySqlParser.AND);
	            this.state = 5865;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.NO) {
	                this.state = 5864;
	                localctx.nochain = this.match(MySqlParser.NO);
	            }

	            this.state = 5867;
	            this.match(MySqlParser.CHAIN);

	        }
	        this.state = 5874;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,781,this._ctx);
	        if(la_===1) {
	            this.state = 5871;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.NO) {
	                this.state = 5870;
	                localctx.norelease = this.match(MySqlParser.NO);
	            }

	            this.state = 5873;
	            this.match(MySqlParser.RELEASE);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	savepointStatement() {
	    let localctx = new SavepointStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 502, MySqlParser.RULE_savepointStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5876;
	        this.match(MySqlParser.SAVEPOINT);
	        this.state = 5877;
	        this.uid();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rollbackStatement() {
	    let localctx = new RollbackStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 504, MySqlParser.RULE_rollbackStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5879;
	        this.match(MySqlParser.ROLLBACK);
	        this.state = 5881;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.WORK) {
	            this.state = 5880;
	            this.match(MySqlParser.WORK);
	        }

	        this.state = 5883;
	        this.match(MySqlParser.TO);
	        this.state = 5885;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,783,this._ctx);
	        if(la_===1) {
	            this.state = 5884;
	            this.match(MySqlParser.SAVEPOINT);

	        }
	        this.state = 5887;
	        this.uid();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	releaseStatement() {
	    let localctx = new ReleaseStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 506, MySqlParser.RULE_releaseStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5889;
	        this.match(MySqlParser.RELEASE);
	        this.state = 5890;
	        this.match(MySqlParser.SAVEPOINT);
	        this.state = 5891;
	        this.uid();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lockTables() {
	    let localctx = new LockTablesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 508, MySqlParser.RULE_lockTables);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5893;
	        this.match(MySqlParser.LOCK);
	        this.state = 5894;
	        this.match(MySqlParser.TABLES);
	        this.state = 5895;
	        this.lockTableElement();
	        this.state = 5900;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,784,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 5896;
	                this.match(MySqlParser.COMMA);
	                this.state = 5897;
	                this.lockTableElement(); 
	            }
	            this.state = 5902;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,784,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unlockTables() {
	    let localctx = new UnlockTablesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 510, MySqlParser.RULE_unlockTables);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5903;
	        this.match(MySqlParser.UNLOCK);
	        this.state = 5904;
	        this.match(MySqlParser.TABLES);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transactionStatementInceptor() {
	    let localctx = new TransactionStatementInceptorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 512, MySqlParser.RULE_transactionStatementInceptor);
	    var _la = 0; // Token type
	    try {
	        this.state = 5916;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.BEGIN:
	        case MySqlParser.START:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5906;
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.BEGIN || _la===MySqlParser.START)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 5907;
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.TRANSACTION || _la===MySqlParser.WORK)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case MySqlParser.COMMIT:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5908;
	            this.match(MySqlParser.COMMIT);
	            this.state = 5910;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,785,this._ctx);
	            if(la_===1) {
	                this.state = 5909;
	                this.match(MySqlParser.WORK);

	            }
	            break;
	        case MySqlParser.ROLLBACK:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5912;
	            this.match(MySqlParser.ROLLBACK);
	            this.state = 5914;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,786,this._ctx);
	            if(la_===1) {
	                this.state = 5913;
	                this.match(MySqlParser.WORK);

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setAutocommitStatement() {
	    let localctx = new SetAutocommitStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 514, MySqlParser.RULE_setAutocommitStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5918;
	        this.match(MySqlParser.SET);
	        this.state = 5919;
	        this.match(MySqlParser.AUTOCOMMIT);
	        this.state = 5920;
	        this.match(MySqlParser.EQUAL_SYMBOL);
	        this.state = 5921;
	        localctx.autocommitValue = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(_la===MySqlParser.ZERO_DECIMAL || _la===MySqlParser.ONE_DECIMAL)) {
	            localctx.autocommitValue = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setTransactionStatement() {
	    let localctx = new SetTransactionStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 516, MySqlParser.RULE_setTransactionStatement);
	    try {
	        this.state = 5927;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,788,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5923;
	            if (!( this.isDialect('mysql'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('mysql')");
	            }
	            this.state = 5924;
	            this.setTransactionStatementMysql();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5925;
	            if (!( this.isDialect('inceptor'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('inceptor')");
	            }
	            this.state = 5926;
	            this.setTransactionStatementInceptor();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setTransactionStatementInceptor() {
	    let localctx = new SetTransactionStatementInceptorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 518, MySqlParser.RULE_setTransactionStatementInceptor);
	    var _la = 0; // Token type
	    try {
	        this.state = 5942;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,790,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5929;
	            this.match(MySqlParser.SET);
	            this.state = 5930;
	            this.match(MySqlParser.TRANSACTION);
	            this.state = 5931;
	            this.match(MySqlParser.READ);
	            this.state = 5932;
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.WRITE || _la===MySqlParser.ONLY)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5933;
	            this.match(MySqlParser.SET);
	            this.state = 5934;
	            this.match(MySqlParser.TRANSACTION);
	            this.state = 5935;
	            this.match(MySqlParser.ISOLATION);
	            this.state = 5936;
	            this.match(MySqlParser.LEVEL);
	            this.state = 5940;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case MySqlParser.READ:
	                this.state = 5937;
	                this.match(MySqlParser.READ);
	                this.state = 5938;
	                this.match(MySqlParser.COMMITTED);
	                break;
	            case MySqlParser.SERIALIZABLE:
	                this.state = 5939;
	                this.match(MySqlParser.SERIALIZABLE);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setTransactionStatementMysql() {
	    let localctx = new SetTransactionStatementMysqlContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 520, MySqlParser.RULE_setTransactionStatementMysql);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5944;
	        this.match(MySqlParser.SET);
	        this.state = 5946;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.GLOBAL || _la===MySqlParser.SESSION) {
	            this.state = 5945;
	            localctx.transactionContext = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.GLOBAL || _la===MySqlParser.SESSION)) {
	                localctx.transactionContext = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 5948;
	        this.match(MySqlParser.TRANSACTION);
	        this.state = 5949;
	        this.transactionOption();
	        this.state = 5954;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,792,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 5950;
	                this.match(MySqlParser.COMMA);
	                this.state = 5951;
	                this.transactionOption(); 
	            }
	            this.state = 5956;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,792,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transactionMode() {
	    let localctx = new TransactionModeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 522, MySqlParser.RULE_transactionMode);
	    try {
	        this.state = 5964;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,793,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5957;
	            this.match(MySqlParser.WITH);
	            this.state = 5958;
	            this.match(MySqlParser.CONSISTENT);
	            this.state = 5959;
	            this.match(MySqlParser.SNAPSHOT);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5960;
	            this.match(MySqlParser.READ);
	            this.state = 5961;
	            this.match(MySqlParser.WRITE);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5962;
	            this.match(MySqlParser.READ);
	            this.state = 5963;
	            this.match(MySqlParser.ONLY);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lockTableElement() {
	    let localctx = new LockTableElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 524, MySqlParser.RULE_lockTableElement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5966;
	        this.tableName();
	        this.state = 5971;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,795,this._ctx);
	        if(la_===1) {
	            this.state = 5968;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,794,this._ctx);
	            if(la_===1) {
	                this.state = 5967;
	                this.match(MySqlParser.AS);

	            }
	            this.state = 5970;
	            this.uid();

	        }
	        this.state = 5973;
	        this.lockAction();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lockAction() {
	    let localctx = new LockActionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 526, MySqlParser.RULE_lockAction);
	    var _la = 0; // Token type
	    try {
	        this.state = 5983;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.READ:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5975;
	            this.match(MySqlParser.READ);
	            this.state = 5977;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,796,this._ctx);
	            if(la_===1) {
	                this.state = 5976;
	                this.match(MySqlParser.LOCAL);

	            }
	            break;
	        case MySqlParser.LOW_PRIORITY:
	        case MySqlParser.WRITE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5980;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.LOW_PRIORITY) {
	                this.state = 5979;
	                this.match(MySqlParser.LOW_PRIORITY);
	            }

	            this.state = 5982;
	            this.match(MySqlParser.WRITE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transactionOption() {
	    let localctx = new TransactionOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 528, MySqlParser.RULE_transactionOption);
	    try {
	        this.state = 5992;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,799,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5985;
	            this.match(MySqlParser.ISOLATION);
	            this.state = 5986;
	            this.match(MySqlParser.LEVEL);
	            this.state = 5987;
	            this.transactionLevel();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5988;
	            this.match(MySqlParser.READ);
	            this.state = 5989;
	            this.match(MySqlParser.WRITE);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5990;
	            this.match(MySqlParser.READ);
	            this.state = 5991;
	            this.match(MySqlParser.ONLY);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transactionLevel() {
	    let localctx = new TransactionLevelContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 530, MySqlParser.RULE_transactionLevel);
	    try {
	        this.state = 6001;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,800,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5994;
	            this.match(MySqlParser.REPEATABLE);
	            this.state = 5995;
	            this.match(MySqlParser.READ);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5996;
	            this.match(MySqlParser.READ);
	            this.state = 5997;
	            this.match(MySqlParser.COMMITTED);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5998;
	            this.match(MySqlParser.READ);
	            this.state = 5999;
	            this.match(MySqlParser.UNCOMMITTED);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 6000;
	            this.match(MySqlParser.SERIALIZABLE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	changeMaster() {
	    let localctx = new ChangeMasterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 532, MySqlParser.RULE_changeMaster);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6003;
	        this.match(MySqlParser.CHANGE);
	        this.state = 6004;
	        this.match(MySqlParser.MASTER);
	        this.state = 6005;
	        this.match(MySqlParser.TO);
	        this.state = 6006;
	        this.masterOption();
	        this.state = 6011;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,801,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 6007;
	                this.match(MySqlParser.COMMA);
	                this.state = 6008;
	                this.masterOption(); 
	            }
	            this.state = 6013;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,801,this._ctx);
	        }

	        this.state = 6015;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,802,this._ctx);
	        if(la_===1) {
	            this.state = 6014;
	            this.channelOption();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	changeReplicationFilter() {
	    let localctx = new ChangeReplicationFilterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 534, MySqlParser.RULE_changeReplicationFilter);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6017;
	        this.match(MySqlParser.CHANGE);
	        this.state = 6018;
	        this.match(MySqlParser.REPLICATION);
	        this.state = 6019;
	        this.match(MySqlParser.FILTER);
	        this.state = 6020;
	        this.replicationFilter();
	        this.state = 6025;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,803,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 6021;
	                this.match(MySqlParser.COMMA);
	                this.state = 6022;
	                this.replicationFilter(); 
	            }
	            this.state = 6027;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,803,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	purgeBinaryLogs() {
	    let localctx = new PurgeBinaryLogsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 536, MySqlParser.RULE_purgeBinaryLogs);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6028;
	        this.match(MySqlParser.PURGE);
	        this.state = 6029;
	        localctx.purgeFormat = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(_la===MySqlParser.BINARY || _la===MySqlParser.MASTER)) {
	            localctx.purgeFormat = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 6030;
	        this.match(MySqlParser.LOGS);
	        this.state = 6035;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.TO:
	            this.state = 6031;
	            this.match(MySqlParser.TO);
	            this.state = 6032;
	            localctx.fileName = this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case MySqlParser.BEFORE:
	            this.state = 6033;
	            this.match(MySqlParser.BEFORE);
	            this.state = 6034;
	            localctx.timeValue = this.match(MySqlParser.STRING_LITERAL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resetMaster() {
	    let localctx = new ResetMasterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 538, MySqlParser.RULE_resetMaster);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6037;
	        this.match(MySqlParser.RESET);
	        this.state = 6038;
	        this.match(MySqlParser.MASTER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resetSlave() {
	    let localctx = new ResetSlaveContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 540, MySqlParser.RULE_resetSlave);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6040;
	        this.match(MySqlParser.RESET);
	        this.state = 6041;
	        this.match(MySqlParser.SLAVE);
	        this.state = 6043;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,805,this._ctx);
	        if(la_===1) {
	            this.state = 6042;
	            this.match(MySqlParser.ALL);

	        }
	        this.state = 6046;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,806,this._ctx);
	        if(la_===1) {
	            this.state = 6045;
	            this.channelOption();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	startSlave() {
	    let localctx = new StartSlaveContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 542, MySqlParser.RULE_startSlave);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6048;
	        this.match(MySqlParser.START);
	        this.state = 6049;
	        this.match(MySqlParser.SLAVE);
	        this.state = 6058;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,808,this._ctx);
	        if(la_===1) {
	            this.state = 6050;
	            this.threadType();
	            this.state = 6055;
	            this._errHandler.sync(this);
	            let _alt = this._interp.adaptivePredict(this._input,807,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 6051;
	                    this.match(MySqlParser.COMMA);
	                    this.state = 6052;
	                    this.threadType(); 
	                }
	                this.state = 6057;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,807,this._ctx);
	            }


	        }
	        this.state = 6062;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,809,this._ctx);
	        if(la_===1) {
	            this.state = 6060;
	            this.match(MySqlParser.UNTIL);
	            this.state = 6061;
	            this.untilOption();

	        }
	        this.state = 6067;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,810,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 6064;
	                this.connectionOption(); 
	            }
	            this.state = 6069;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,810,this._ctx);
	        }

	        this.state = 6071;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,811,this._ctx);
	        if(la_===1) {
	            this.state = 6070;
	            this.channelOption();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stopSlave() {
	    let localctx = new StopSlaveContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 544, MySqlParser.RULE_stopSlave);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6073;
	        this.match(MySqlParser.STOP);
	        this.state = 6074;
	        this.match(MySqlParser.SLAVE);
	        this.state = 6083;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,813,this._ctx);
	        if(la_===1) {
	            this.state = 6075;
	            this.threadType();
	            this.state = 6080;
	            this._errHandler.sync(this);
	            let _alt = this._interp.adaptivePredict(this._input,812,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 6076;
	                    this.match(MySqlParser.COMMA);
	                    this.state = 6077;
	                    this.threadType(); 
	                }
	                this.state = 6082;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,812,this._ctx);
	            }


	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	startGroupReplication() {
	    let localctx = new StartGroupReplicationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 546, MySqlParser.RULE_startGroupReplication);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6085;
	        this.match(MySqlParser.START);
	        this.state = 6086;
	        this.match(MySqlParser.GROUP_REPLICATION);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stopGroupReplication() {
	    let localctx = new StopGroupReplicationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 548, MySqlParser.RULE_stopGroupReplication);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6088;
	        this.match(MySqlParser.STOP);
	        this.state = 6089;
	        this.match(MySqlParser.GROUP_REPLICATION);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	masterOption() {
	    let localctx = new MasterOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 550, MySqlParser.RULE_masterOption);
	    var _la = 0; // Token type
	    try {
	        this.state = 6120;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.MASTER_BIND:
	        case MySqlParser.MASTER_HOST:
	        case MySqlParser.MASTER_LOG_FILE:
	        case MySqlParser.MASTER_PASSWORD:
	        case MySqlParser.MASTER_SSL_CA:
	        case MySqlParser.MASTER_SSL_CAPATH:
	        case MySqlParser.MASTER_SSL_CERT:
	        case MySqlParser.MASTER_SSL_CIPHER:
	        case MySqlParser.MASTER_SSL_CRL:
	        case MySqlParser.MASTER_SSL_CRLPATH:
	        case MySqlParser.MASTER_SSL_KEY:
	        case MySqlParser.MASTER_TLS_VERSION:
	        case MySqlParser.MASTER_USER:
	        case MySqlParser.RELAY_LOG_FILE:
	            localctx = new MasterStringOptionContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6091;
	            this.stringMasterOption();
	            this.state = 6092;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 6093;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case MySqlParser.MASTER_CONNECT_RETRY:
	        case MySqlParser.MASTER_DELAY:
	        case MySqlParser.MASTER_LOG_POS:
	        case MySqlParser.MASTER_PORT:
	        case MySqlParser.MASTER_RETRY_COUNT:
	        case MySqlParser.RELAY_LOG_POS:
	            localctx = new MasterDecimalOptionContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6095;
	            this.decimalMasterOption();
	            this.state = 6096;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 6097;
	            this.decimalLiteral();
	            break;
	        case MySqlParser.MASTER_SSL_VERIFY_SERVER_CERT:
	        case MySqlParser.MASTER_AUTO_POSITION:
	        case MySqlParser.MASTER_SSL:
	            localctx = new MasterBoolOptionContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 6099;
	            this.boolMasterOption();
	            this.state = 6100;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 6101;
	            localctx.boolVal = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.ZERO_DECIMAL || _la===MySqlParser.ONE_DECIMAL)) {
	                localctx.boolVal = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case MySqlParser.MASTER_HEARTBEAT_PERIOD:
	            localctx = new MasterRealOptionContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 6103;
	            this.match(MySqlParser.MASTER_HEARTBEAT_PERIOD);
	            this.state = 6104;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 6105;
	            this.match(MySqlParser.REAL_LITERAL);
	            break;
	        case MySqlParser.IGNORE_SERVER_IDS:
	            localctx = new MasterUidListOptionContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 6106;
	            this.match(MySqlParser.IGNORE_SERVER_IDS);
	            this.state = 6107;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 6108;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 6117;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,815,this._ctx);
	            if(la_===1) {
	                this.state = 6109;
	                this.uid();
	                this.state = 6114;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===MySqlParser.COMMA) {
	                    this.state = 6110;
	                    this.match(MySqlParser.COMMA);
	                    this.state = 6111;
	                    this.uid();
	                    this.state = 6116;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }

	            }
	            this.state = 6119;
	            this.match(MySqlParser.RR_BRACKET);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringMasterOption() {
	    let localctx = new StringMasterOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 552, MySqlParser.RULE_stringMasterOption);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6122;
	        _la = this._input.LA(1);
	        if(!(_la===MySqlParser.MASTER_BIND || ((((_la - 557)) & ~0x1f) == 0 && ((1 << (_la - 557)) & ((1 << (MySqlParser.MASTER_HOST - 557)) | (1 << (MySqlParser.MASTER_LOG_FILE - 557)) | (1 << (MySqlParser.MASTER_PASSWORD - 557)) | (1 << (MySqlParser.MASTER_SSL_CA - 557)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 557)) | (1 << (MySqlParser.MASTER_SSL_CERT - 557)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 557)) | (1 << (MySqlParser.MASTER_SSL_CRL - 557)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 557)) | (1 << (MySqlParser.MASTER_SSL_KEY - 557)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 557)) | (1 << (MySqlParser.MASTER_USER - 557)))) !== 0) || _la===MySqlParser.RELAY_LOG_FILE)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	decimalMasterOption() {
	    let localctx = new DecimalMasterOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 554, MySqlParser.RULE_decimalMasterOption);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6124;
	        _la = this._input.LA(1);
	        if(!(((((_la - 554)) & ~0x1f) == 0 && ((1 << (_la - 554)) & ((1 << (MySqlParser.MASTER_CONNECT_RETRY - 554)) | (1 << (MySqlParser.MASTER_DELAY - 554)) | (1 << (MySqlParser.MASTER_LOG_POS - 554)) | (1 << (MySqlParser.MASTER_PORT - 554)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 554)))) !== 0) || _la===MySqlParser.RELAY_LOG_POS)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	boolMasterOption() {
	    let localctx = new BoolMasterOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 556, MySqlParser.RULE_boolMasterOption);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6126;
	        _la = this._input.LA(1);
	        if(!(_la===MySqlParser.MASTER_SSL_VERIFY_SERVER_CERT || _la===MySqlParser.MASTER_AUTO_POSITION || _la===MySqlParser.MASTER_SSL)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	channelOption() {
	    let localctx = new ChannelOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 558, MySqlParser.RULE_channelOption);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6128;
	        this.match(MySqlParser.FOR);
	        this.state = 6129;
	        this.match(MySqlParser.CHANNEL);
	        this.state = 6130;
	        this.match(MySqlParser.STRING_LITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	replicationFilter() {
	    let localctx = new ReplicationFilterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 560, MySqlParser.RULE_replicationFilter);
	    var _la = 0; // Token type
	    try {
	        this.state = 6181;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.REPLICATE_DO_DB:
	            localctx = new DoDbReplicationContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6132;
	            this.match(MySqlParser.REPLICATE_DO_DB);
	            this.state = 6133;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 6134;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 6135;
	            this.uidList();
	            this.state = 6136;
	            this.match(MySqlParser.RR_BRACKET);
	            break;
	        case MySqlParser.REPLICATE_IGNORE_DB:
	            localctx = new IgnoreDbReplicationContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6138;
	            this.match(MySqlParser.REPLICATE_IGNORE_DB);
	            this.state = 6139;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 6140;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 6141;
	            this.uidList();
	            this.state = 6142;
	            this.match(MySqlParser.RR_BRACKET);
	            break;
	        case MySqlParser.REPLICATE_DO_TABLE:
	            localctx = new DoTableReplicationContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 6144;
	            this.match(MySqlParser.REPLICATE_DO_TABLE);
	            this.state = 6145;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 6146;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 6147;
	            this.tables();
	            this.state = 6148;
	            this.match(MySqlParser.RR_BRACKET);
	            break;
	        case MySqlParser.REPLICATE_IGNORE_TABLE:
	            localctx = new IgnoreTableReplicationContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 6150;
	            this.match(MySqlParser.REPLICATE_IGNORE_TABLE);
	            this.state = 6151;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 6152;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 6153;
	            this.tables();
	            this.state = 6154;
	            this.match(MySqlParser.RR_BRACKET);
	            break;
	        case MySqlParser.REPLICATE_WILD_DO_TABLE:
	            localctx = new WildDoTableReplicationContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 6156;
	            this.match(MySqlParser.REPLICATE_WILD_DO_TABLE);
	            this.state = 6157;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 6158;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 6159;
	            this.simpleStrings();
	            this.state = 6160;
	            this.match(MySqlParser.RR_BRACKET);
	            break;
	        case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
	            localctx = new WildIgnoreTableReplicationContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 6162;
	            this.match(MySqlParser.REPLICATE_WILD_IGNORE_TABLE);
	            this.state = 6163;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 6164;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 6165;
	            this.simpleStrings();
	            this.state = 6166;
	            this.match(MySqlParser.RR_BRACKET);
	            break;
	        case MySqlParser.REPLICATE_REWRITE_DB:
	            localctx = new RewriteDbReplicationContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 6168;
	            this.match(MySqlParser.REPLICATE_REWRITE_DB);
	            this.state = 6169;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 6170;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 6171;
	            this.tablePair();
	            this.state = 6176;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.COMMA) {
	                this.state = 6172;
	                this.match(MySqlParser.COMMA);
	                this.state = 6173;
	                this.tablePair();
	                this.state = 6178;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 6179;
	            this.match(MySqlParser.RR_BRACKET);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tablePair() {
	    let localctx = new TablePairContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 562, MySqlParser.RULE_tablePair);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6183;
	        this.match(MySqlParser.LR_BRACKET);
	        this.state = 6184;
	        localctx.firstTable = this.tableName();
	        this.state = 6185;
	        this.match(MySqlParser.COMMA);
	        this.state = 6186;
	        localctx.secondTable = this.tableName();
	        this.state = 6187;
	        this.match(MySqlParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	threadType() {
	    let localctx = new ThreadTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 564, MySqlParser.RULE_threadType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6189;
	        _la = this._input.LA(1);
	        if(!(_la===MySqlParser.IO_THREAD || _la===MySqlParser.SQL_THREAD)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	untilOption() {
	    let localctx = new UntilOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 566, MySqlParser.RULE_untilOption);
	    var _la = 0; // Token type
	    try {
	        this.state = 6209;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.SQL_AFTER_GTIDS:
	        case MySqlParser.SQL_BEFORE_GTIDS:
	            localctx = new GtidsUntilOptionContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6191;
	            localctx.gtids = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.SQL_AFTER_GTIDS || _la===MySqlParser.SQL_BEFORE_GTIDS)) {
	                localctx.gtids = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 6192;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 6193;
	            this.gtuidSet();
	            break;
	        case MySqlParser.MASTER_LOG_FILE:
	            localctx = new MasterLogUntilOptionContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6194;
	            this.match(MySqlParser.MASTER_LOG_FILE);
	            this.state = 6195;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 6196;
	            this.match(MySqlParser.STRING_LITERAL);
	            this.state = 6197;
	            this.match(MySqlParser.COMMA);
	            this.state = 6198;
	            this.match(MySqlParser.MASTER_LOG_POS);
	            this.state = 6199;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 6200;
	            this.decimalLiteral();
	            break;
	        case MySqlParser.RELAY_LOG_FILE:
	            localctx = new RelayLogUntilOptionContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 6201;
	            this.match(MySqlParser.RELAY_LOG_FILE);
	            this.state = 6202;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 6203;
	            this.match(MySqlParser.STRING_LITERAL);
	            this.state = 6204;
	            this.match(MySqlParser.COMMA);
	            this.state = 6205;
	            this.match(MySqlParser.RELAY_LOG_POS);
	            this.state = 6206;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 6207;
	            this.decimalLiteral();
	            break;
	        case MySqlParser.SQL_AFTER_MTS_GAPS:
	            localctx = new SqlGapsUntilOptionContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 6208;
	            this.match(MySqlParser.SQL_AFTER_MTS_GAPS);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	connectionOption() {
	    let localctx = new ConnectionOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 568, MySqlParser.RULE_connectionOption);
	    try {
	        this.state = 6223;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.USER:
	            localctx = new UserConnectionOptionContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6211;
	            this.match(MySqlParser.USER);
	            this.state = 6212;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 6213;
	            localctx.conOptUser = this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case MySqlParser.PASSWORD:
	            localctx = new PasswordConnectionOptionContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6214;
	            this.match(MySqlParser.PASSWORD);
	            this.state = 6215;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 6216;
	            localctx.conOptPassword = this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case MySqlParser.DEFAULT_AUTH:
	            localctx = new DefaultAuthConnectionOptionContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 6217;
	            this.match(MySqlParser.DEFAULT_AUTH);
	            this.state = 6218;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 6219;
	            localctx.conOptDefAuth = this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case MySqlParser.PLUGIN_DIR:
	            localctx = new PluginDirConnectionOptionContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 6220;
	            this.match(MySqlParser.PLUGIN_DIR);
	            this.state = 6221;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 6222;
	            localctx.conOptPluginDir = this.match(MySqlParser.STRING_LITERAL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	gtuidSet() {
	    let localctx = new GtuidSetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 570, MySqlParser.RULE_gtuidSet);
	    try {
	        this.state = 6234;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.ZERO_DECIMAL:
	        case MySqlParser.ONE_DECIMAL:
	        case MySqlParser.TWO_DECIMAL:
	        case MySqlParser.DECIMAL_LITERAL:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6225;
	            this.uuidSet();
	            this.state = 6230;
	            this._errHandler.sync(this);
	            let _alt = this._interp.adaptivePredict(this._input,821,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 6226;
	                    this.match(MySqlParser.COMMA);
	                    this.state = 6227;
	                    this.uuidSet(); 
	                }
	                this.state = 6232;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,821,this._ctx);
	            }

	            break;
	        case MySqlParser.STRING_LITERAL:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6233;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	xaStartTransaction() {
	    let localctx = new XaStartTransactionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 572, MySqlParser.RULE_xaStartTransaction);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6236;
	        this.match(MySqlParser.XA);
	        this.state = 6237;
	        localctx.xaStart = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(_la===MySqlParser.BEGIN || _la===MySqlParser.START)) {
	            localctx.xaStart = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 6238;
	        this.xid();
	        this.state = 6240;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,823,this._ctx);
	        if(la_===1) {
	            this.state = 6239;
	            localctx.xaAction = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.JOIN || _la===MySqlParser.RESUME)) {
	                localctx.xaAction = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	xaEndTransaction() {
	    let localctx = new XaEndTransactionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 574, MySqlParser.RULE_xaEndTransaction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6242;
	        this.match(MySqlParser.XA);
	        this.state = 6243;
	        this.match(MySqlParser.END);
	        this.state = 6244;
	        this.xid();
	        this.state = 6250;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,825,this._ctx);
	        if(la_===1) {
	            this.state = 6245;
	            this.match(MySqlParser.SUSPEND);
	            this.state = 6248;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,824,this._ctx);
	            if(la_===1) {
	                this.state = 6246;
	                this.match(MySqlParser.FOR);
	                this.state = 6247;
	                this.match(MySqlParser.MIGRATE);

	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	xaPrepareStatement() {
	    let localctx = new XaPrepareStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 576, MySqlParser.RULE_xaPrepareStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6252;
	        this.match(MySqlParser.XA);
	        this.state = 6253;
	        this.match(MySqlParser.PREPARE);
	        this.state = 6254;
	        this.xid();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	xaCommitWork() {
	    let localctx = new XaCommitWorkContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 578, MySqlParser.RULE_xaCommitWork);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6256;
	        this.match(MySqlParser.XA);
	        this.state = 6257;
	        this.match(MySqlParser.COMMIT);
	        this.state = 6258;
	        this.xid();
	        this.state = 6261;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,826,this._ctx);
	        if(la_===1) {
	            this.state = 6259;
	            this.match(MySqlParser.ONE);
	            this.state = 6260;
	            this.match(MySqlParser.PHASE);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	xaRollbackWork() {
	    let localctx = new XaRollbackWorkContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 580, MySqlParser.RULE_xaRollbackWork);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6263;
	        this.match(MySqlParser.XA);
	        this.state = 6264;
	        this.match(MySqlParser.ROLLBACK);
	        this.state = 6265;
	        this.xid();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	xaRecoverWork() {
	    let localctx = new XaRecoverWorkContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 582, MySqlParser.RULE_xaRecoverWork);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6267;
	        this.match(MySqlParser.XA);
	        this.state = 6268;
	        this.match(MySqlParser.RECOVER);
	        this.state = 6271;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,827,this._ctx);
	        if(la_===1) {
	            this.state = 6269;
	            this.match(MySqlParser.CONVERT);
	            this.state = 6270;
	            this.xid();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	prepareStatement() {
	    let localctx = new PrepareStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 584, MySqlParser.RULE_prepareStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6273;
	        this.match(MySqlParser.PREPARE);
	        this.state = 6274;
	        this.uid();
	        this.state = 6275;
	        this.match(MySqlParser.FROM);
	        this.state = 6278;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.STRING_LITERAL:
	            this.state = 6276;
	            localctx.query = this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case MySqlParser.LOCAL_ID:
	            this.state = 6277;
	            localctx.variable = this.match(MySqlParser.LOCAL_ID);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	executeStatement() {
	    let localctx = new ExecuteStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 586, MySqlParser.RULE_executeStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6280;
	        this.match(MySqlParser.EXECUTE);
	        this.state = 6281;
	        this.uid();
	        this.state = 6284;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,829,this._ctx);
	        if(la_===1) {
	            this.state = 6282;
	            this.match(MySqlParser.USING);
	            this.state = 6283;
	            this.userVariables();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	deallocatePrepare() {
	    let localctx = new DeallocatePrepareContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 588, MySqlParser.RULE_deallocatePrepare);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6286;
	        localctx.dropFormat = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(_la===MySqlParser.DROP || _la===MySqlParser.DEALLOCATE)) {
	            localctx.dropFormat = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 6287;
	        this.match(MySqlParser.PREPARE);
	        this.state = 6288;
	        this.uid();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	routineBody() {
	    let localctx = new RoutineBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 590, MySqlParser.RULE_routineBody);
	    try {
	        this.state = 6292;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,830,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6290;
	            this.blockStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6291;
	            this.sqlStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	blockStatement() {
	    let localctx = new BlockStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 592, MySqlParser.RULE_blockStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6297;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,831,this._ctx);
	        if(la_===1) {
	            this.state = 6294;
	            this.uid();
	            this.state = 6295;
	            this.match(MySqlParser.COLON_SYMB);

	        }
	        this.state = 6299;
	        this.match(MySqlParser.BEGIN);

	        this.state = 6305;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,832,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 6300;
	                this.declareVariable();
	                this.state = 6301;
	                this.match(MySqlParser.SEMI); 
	            }
	            this.state = 6307;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,832,this._ctx);
	        }

	        this.state = 6313;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,833,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 6308;
	                this.declareCondition();
	                this.state = 6309;
	                this.match(MySqlParser.SEMI); 
	            }
	            this.state = 6315;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,833,this._ctx);
	        }

	        this.state = 6321;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,834,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 6316;
	                this.declareCursor();
	                this.state = 6317;
	                this.match(MySqlParser.SEMI); 
	            }
	            this.state = 6323;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,834,this._ctx);
	        }

	        this.state = 6329;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,835,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 6324;
	                this.declareHandler();
	                this.state = 6325;
	                this.match(MySqlParser.SEMI); 
	            }
	            this.state = 6331;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,835,this._ctx);
	        }

	        this.state = 6337;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,836,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 6332;
	                this.declareRowDataType();
	                this.state = 6333;
	                this.match(MySqlParser.SEMI); 
	            }
	            this.state = 6339;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,836,this._ctx);
	        }

	        this.state = 6343;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,837,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 6340;
	                this.procedureSqlStatement(); 
	            }
	            this.state = 6345;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,837,this._ctx);
	        }

	        this.state = 6346;
	        this.match(MySqlParser.END);
	        this.state = 6348;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,838,this._ctx);
	        if(la_===1) {
	            this.state = 6347;
	            this.uid();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	caseStatement() {
	    let localctx = new CaseStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 594, MySqlParser.RULE_caseStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6350;
	        this.match(MySqlParser.CASE);
	        this.state = 6353;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,839,this._ctx);
	        if(la_===1) {
	            this.state = 6351;
	            this.uid();

	        } else if(la_===2) {
	            this.state = 6352;
	            this.expression(0);

	        }
	        this.state = 6356; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 6355;
	            this.caseAlternative();
	            this.state = 6358; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===MySqlParser.WHEN);
	        this.state = 6366;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.ELSE) {
	            this.state = 6360;
	            this.match(MySqlParser.ELSE);
	            this.state = 6362; 
	            this._errHandler.sync(this);
	            let _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 6361;
	            		this.procedureSqlStatement();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 6364; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,841, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        }

	        this.state = 6368;
	        this.match(MySqlParser.END);
	        this.state = 6369;
	        this.match(MySqlParser.CASE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifStatement() {
	    let localctx = new IfStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 596, MySqlParser.RULE_ifStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6371;
	        this.match(MySqlParser.IF);
	        this.state = 6372;
	        this.expression(0);
	        this.state = 6373;
	        this.match(MySqlParser.THEN);
	        this.state = 6375; 
	        this._errHandler.sync(this);
	        let _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 6374;
	        		localctx._procedureSqlStatement = this.procedureSqlStatement();
	        		localctx.thenStatements.push(localctx._procedureSqlStatement);
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 6377; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,843, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 6382;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MySqlParser.ELSEIF) {
	            this.state = 6379;
	            this.elifAlternative();
	            this.state = 6384;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 6391;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.ELSE) {
	            this.state = 6385;
	            this.match(MySqlParser.ELSE);
	            this.state = 6387; 
	            this._errHandler.sync(this);
	            let _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 6386;
	            		localctx._procedureSqlStatement = this.procedureSqlStatement();
	            		localctx.elseStatements.push(localctx._procedureSqlStatement);
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 6389; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,845, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        }

	        this.state = 6393;
	        this.match(MySqlParser.END);
	        this.state = 6394;
	        this.match(MySqlParser.IF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	iterateStatement() {
	    let localctx = new IterateStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 598, MySqlParser.RULE_iterateStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6396;
	        this.match(MySqlParser.ITERATE);
	        this.state = 6397;
	        this.uid();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	leaveStatement() {
	    let localctx = new LeaveStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 600, MySqlParser.RULE_leaveStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6399;
	        this.match(MySqlParser.LEAVE);
	        this.state = 6400;
	        this.uid();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	loopStatement() {
	    let localctx = new LoopStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 602, MySqlParser.RULE_loopStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6405;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,847,this._ctx);
	        if(la_===1) {
	            this.state = 6402;
	            this.uid();
	            this.state = 6403;
	            this.match(MySqlParser.COLON_SYMB);

	        }
	        this.state = 6407;
	        this.match(MySqlParser.LOOP);
	        this.state = 6409; 
	        this._errHandler.sync(this);
	        let _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 6408;
	        		this.procedureSqlStatement();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 6411; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,848, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 6413;
	        this.match(MySqlParser.END);
	        this.state = 6414;
	        this.match(MySqlParser.LOOP);
	        this.state = 6416;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,849,this._ctx);
	        if(la_===1) {
	            this.state = 6415;
	            this.uid();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	repeatStatement() {
	    let localctx = new RepeatStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 604, MySqlParser.RULE_repeatStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6421;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,850,this._ctx);
	        if(la_===1) {
	            this.state = 6418;
	            this.uid();
	            this.state = 6419;
	            this.match(MySqlParser.COLON_SYMB);

	        }
	        this.state = 6423;
	        this.match(MySqlParser.REPEAT);
	        this.state = 6425; 
	        this._errHandler.sync(this);
	        let _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 6424;
	        		this.procedureSqlStatement();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 6427; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,851, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 6429;
	        this.match(MySqlParser.UNTIL);
	        this.state = 6430;
	        this.expression(0);
	        this.state = 6431;
	        this.match(MySqlParser.END);
	        this.state = 6432;
	        this.match(MySqlParser.REPEAT);
	        this.state = 6434;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,852,this._ctx);
	        if(la_===1) {
	            this.state = 6433;
	            this.uid();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnStatement() {
	    let localctx = new ReturnStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 606, MySqlParser.RULE_returnStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6436;
	        this.match(MySqlParser.RETURN);
	        this.state = 6437;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whileStatement() {
	    let localctx = new WhileStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 608, MySqlParser.RULE_whileStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6442;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,853,this._ctx);
	        if(la_===1) {
	            this.state = 6439;
	            this.uid();
	            this.state = 6440;
	            this.match(MySqlParser.COLON_SYMB);

	        }
	        this.state = 6444;
	        this.match(MySqlParser.WHILE);
	        this.state = 6445;
	        this.expression(0);
	        this.state = 6446;
	        this.match(MySqlParser.DO);
	        this.state = 6448; 
	        this._errHandler.sync(this);
	        let _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 6447;
	        		this.procedureSqlStatement();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 6450; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,854, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 6452;
	        this.match(MySqlParser.END);
	        this.state = 6453;
	        this.match(MySqlParser.WHILE);
	        this.state = 6455;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,855,this._ctx);
	        if(la_===1) {
	            this.state = 6454;
	            this.uid();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cursorStatement() {
	    let localctx = new CursorStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 610, MySqlParser.RULE_cursorStatement);
	    var _la = 0; // Token type
	    try {
	        this.state = 6472;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.CLOSE:
	            localctx = new CloseCursorContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6457;
	            this.match(MySqlParser.CLOSE);
	            this.state = 6458;
	            this.uid();
	            break;
	        case MySqlParser.FETCH:
	            localctx = new FetchCursorContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6459;
	            this.match(MySqlParser.FETCH);
	            this.state = 6464;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,857,this._ctx);
	            if(la_===1) {
	                this.state = 6461;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===MySqlParser.NEXT) {
	                    this.state = 6460;
	                    this.match(MySqlParser.NEXT);
	                }

	                this.state = 6463;
	                this.match(MySqlParser.FROM);

	            }
	            this.state = 6466;
	            this.uid();
	            this.state = 6467;
	            this.match(MySqlParser.INTO);
	            this.state = 6468;
	            this.uidList();
	            break;
	        case MySqlParser.OPEN:
	            localctx = new OpenCursorContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 6470;
	            this.match(MySqlParser.OPEN);
	            this.state = 6471;
	            this.uid();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declareVariable() {
	    let localctx = new DeclareVariableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 612, MySqlParser.RULE_declareVariable);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6474;
	        this.match(MySqlParser.DECLARE);
	        this.state = 6475;
	        this.uidList();
	        this.state = 6476;
	        this.dataType();
	        this.state = 6479;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.DEFAULT) {
	            this.state = 6477;
	            this.match(MySqlParser.DEFAULT);
	            this.state = 6478;
	            this.defaultValue();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declareCondition() {
	    let localctx = new DeclareConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 614, MySqlParser.RULE_declareCondition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6481;
	        this.match(MySqlParser.DECLARE);
	        this.state = 6482;
	        this.uid();
	        this.state = 6483;
	        this.match(MySqlParser.CONDITION);
	        this.state = 6484;
	        this.match(MySqlParser.FOR);
	        this.state = 6485;
	        this.conditionDialectOption();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declareCursor() {
	    let localctx = new DeclareCursorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 616, MySqlParser.RULE_declareCursor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6487;
	        this.match(MySqlParser.DECLARE);
	        this.state = 6488;
	        this.uid();
	        this.state = 6489;
	        this.match(MySqlParser.CURSOR);
	        this.state = 6490;
	        this.cursorDialectOption();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declareHandler() {
	    let localctx = new DeclareHandlerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 618, MySqlParser.RULE_declareHandler);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6492;
	        this.match(MySqlParser.DECLARE);
	        this.state = 6493;
	        localctx.handlerAction = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(_la===MySqlParser.CONTINUE || _la===MySqlParser.EXIT || _la===MySqlParser.UNDO)) {
	            localctx.handlerAction = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 6494;
	        this.match(MySqlParser.HANDLER);
	        this.state = 6495;
	        this.match(MySqlParser.FOR);
	        this.state = 6496;
	        this.handlerConditionValue();
	        this.state = 6501;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,860,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 6497;
	                this.match(MySqlParser.COMMA);
	                this.state = 6498;
	                this.handlerConditionValue(); 
	            }
	            this.state = 6503;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,860,this._ctx);
	        }

	        this.state = 6505;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,861,this._ctx);
	        if(la_===1) {
	            this.state = 6504;
	            localctx._routineBody = this.routineBody();

	        }

	                // routineBody -> routineBody? inceptor does not have routineBody in declareHandler
	                if (this.isDialect('mysql')) {
	                  this.checkContextExist(localctx._routineBody, 'Please provide BEGIN ... END block after handler');
	                }
	              
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declareRowDataType() {
	    let localctx = new DeclareRowDataTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 620, MySqlParser.RULE_declareRowDataType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6509;
	        if (!( this.isDialect('inceptor'))) {
	            throw new antlr4.error.FailedPredicateException(this, "this.isDialect('inceptor')");
	        }
	        this.state = 6510;
	        this.match(MySqlParser.DECLARE);
	        this.state = 6511;
	        this.match(MySqlParser.TYPE);
	        this.state = 6512;
	        this.uid();
	        this.state = 6513;
	        this.match(MySqlParser.AS);
	        this.state = 6514;
	        this.match(MySqlParser.ROW);
	        this.state = 6515;
	        this.match(MySqlParser.LR_BRACKET);
	        this.state = 6516;
	        this.functionParameter();
	        this.state = 6521;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MySqlParser.COMMA) {
	            this.state = 6517;
	            this.match(MySqlParser.COMMA);
	            this.state = 6518;
	            this.functionParameter();
	            this.state = 6523;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 6524;
	        this.match(MySqlParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cursorDialectOption() {
	    let localctx = new CursorDialectOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 622, MySqlParser.RULE_cursorDialectOption);
	    var _la = 0; // Token type
	    try {
	        this.state = 6541;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,864,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6526;
	            if (!( this.isDialect('mysql'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('mysql')");
	            }
	            this.state = 6527;
	            this.match(MySqlParser.FOR);
	            this.state = 6528;
	            this.selectStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6529;
	            if (!( this.isDialect('inceptor'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('inceptor')");
	            }
	            this.state = 6532;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,863,this._ctx);
	            if(la_===1) {
	                this.state = 6530;
	                this.match(MySqlParser.WITH);
	                this.state = 6531;
	                this.match(MySqlParser.HOLD);

	            }

	            this.state = 6534;
	            this.match(MySqlParser.WITH);
	            this.state = 6535;
	            this.match(MySqlParser.RETURN);
	            this.state = 6536;
	            this.match(MySqlParser.TO);
	            this.state = 6537;
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.CALLER || _la===MySqlParser.CLIENT)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 6539;
	            this.match(MySqlParser.FOR);
	            this.state = 6540;
	            this.selectStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditionDialectOption() {
	    let localctx = new ConditionDialectOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 624, MySqlParser.RULE_conditionDialectOption);
	    var _la = 0; // Token type
	    try {
	        this.state = 6555;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,867,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6543;
	            if (!( this.isDialect('mysql'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('mysql')");
	            }
	            this.state = 6550;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case MySqlParser.ZERO_DECIMAL:
	            case MySqlParser.ONE_DECIMAL:
	            case MySqlParser.TWO_DECIMAL:
	            case MySqlParser.DECIMAL_LITERAL:
	                this.state = 6544;
	                this.decimalLiteral();
	                break;
	            case MySqlParser.SQLSTATE:
	                this.state = 6545;
	                this.match(MySqlParser.SQLSTATE);
	                this.state = 6547;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===MySqlParser.VALUE) {
	                    this.state = 6546;
	                    this.match(MySqlParser.VALUE);
	                }

	                this.state = 6549;
	                this.match(MySqlParser.STRING_LITERAL);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6552;
	            if (!( this.isDialect('inceptor'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('inceptor')");
	            }
	            this.state = 6553;
	            this.match(MySqlParser.SQLSTATE);
	            this.state = 6554;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	handlerConditionValue() {
	    let localctx = new HandlerConditionValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 626, MySqlParser.RULE_handlerConditionValue);
	    var _la = 0; // Token type
	    try {
	        this.state = 6568;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,869,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new HandlerConditionCodeContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6557;
	            this.decimalLiteral();
	            break;

	        case 2:
	            localctx = new HandlerConditionStateContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6558;
	            this.match(MySqlParser.SQLSTATE);
	            this.state = 6560;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.VALUE) {
	                this.state = 6559;
	                this.match(MySqlParser.VALUE);
	            }

	            this.state = 6562;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;

	        case 3:
	            localctx = new HandlerConditionNameContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 6563;
	            this.uid();
	            break;

	        case 4:
	            localctx = new HandlerConditionWarningContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 6564;
	            this.match(MySqlParser.SQLWARNING);
	            break;

	        case 5:
	            localctx = new HandlerConditionNotfoundContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 6565;
	            this.match(MySqlParser.NOT);
	            this.state = 6566;
	            this.match(MySqlParser.FOUND);
	            break;

	        case 6:
	            localctx = new HandlerConditionExceptionContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 6567;
	            this.match(MySqlParser.SQLEXCEPTION);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureSqlStatement() {
	    let localctx = new ProcedureSqlStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 628, MySqlParser.RULE_procedureSqlStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6572;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,870,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 6570;
	            this.compoundStatement();
	            break;

	        case 2:
	            this.state = 6571;
	            this.sqlStatement();
	            break;

	        }
	        this.state = 6574;
	        this.match(MySqlParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	caseAlternative() {
	    let localctx = new CaseAlternativeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 630, MySqlParser.RULE_caseAlternative);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6576;
	        this.match(MySqlParser.WHEN);
	        this.state = 6579;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,871,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 6577;
	            this.constant();
	            break;

	        case 2:
	            this.state = 6578;
	            this.expression(0);
	            break;

	        }
	        this.state = 6581;
	        this.match(MySqlParser.THEN);
	        this.state = 6583; 
	        this._errHandler.sync(this);
	        let _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 6582;
	        		this.procedureSqlStatement();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 6585; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,872, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elifAlternative() {
	    let localctx = new ElifAlternativeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 632, MySqlParser.RULE_elifAlternative);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6587;
	        this.match(MySqlParser.ELSEIF);
	        this.state = 6588;
	        this.expression(0);
	        this.state = 6589;
	        this.match(MySqlParser.THEN);
	        this.state = 6591; 
	        this._errHandler.sync(this);
	        let _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 6590;
	        		this.procedureSqlStatement();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 6593; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,873, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterUser() {
	    let localctx = new AlterUserContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 634, MySqlParser.RULE_alterUser);
	    var _la = 0; // Token type
	    try {
	        this.state = 6649;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,885,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new AlterUserMysqlV56Context(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6595;
	            this.match(MySqlParser.ALTER);
	            this.state = 6596;
	            this.match(MySqlParser.USER);
	            this.state = 6597;
	            this.userSpecification();
	            this.state = 6602;
	            this._errHandler.sync(this);
	            let _alt = this._interp.adaptivePredict(this._input,874,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 6598;
	                    this.match(MySqlParser.COMMA);
	                    this.state = 6599;
	                    this.userSpecification(); 
	                }
	                this.state = 6604;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,874,this._ctx);
	            }

	            break;

	        case 2:
	            localctx = new AlterUserMysqlV57Context(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6605;
	            this.match(MySqlParser.ALTER);
	            this.state = 6606;
	            this.match(MySqlParser.USER);
	            this.state = 6608;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.IF) {
	                this.state = 6607;
	                this.ifExists();
	            }

	            this.state = 6610;
	            this.userAuthOption();
	            this.state = 6615;
	            this._errHandler.sync(this);
	            let _alt = this._interp.adaptivePredict(this._input,876,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 6611;
	                    this.match(MySqlParser.COMMA);
	                    this.state = 6612;
	                    this.userAuthOption(); 
	                }
	                this.state = 6617;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,876,this._ctx);
	            }

	            this.state = 6632;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,880,this._ctx);
	            if(la_===1) {
	                this.state = 6618;
	                this.match(MySqlParser.REQUIRE);
	                this.state = 6630;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case MySqlParser.NONE:
	                    this.state = 6619;
	                    localctx.tlsNone = this.match(MySqlParser.NONE);
	                    break;
	                case MySqlParser.SSL:
	                case MySqlParser.CIPHER:
	                case MySqlParser.ISSUER:
	                case MySqlParser.SUBJECT:
	                case MySqlParser.X509:
	                    this.state = 6620;
	                    this.tlsOption();
	                    this.state = 6627;
	                    this._errHandler.sync(this);
	                    let _alt = this._interp.adaptivePredict(this._input,878,this._ctx)
	                    while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                        if(_alt===1) {
	                            this.state = 6622;
	                            this._errHandler.sync(this);
	                            _la = this._input.LA(1);
	                            if(_la===MySqlParser.AND) {
	                                this.state = 6621;
	                                this.match(MySqlParser.AND);
	                            }

	                            this.state = 6624;
	                            this.tlsOption(); 
	                        }
	                        this.state = 6629;
	                        this._errHandler.sync(this);
	                        _alt = this._interp.adaptivePredict(this._input,878,this._ctx);
	                    }

	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }

	            }
	            this.state = 6640;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,882,this._ctx);
	            if(la_===1) {
	                this.state = 6634;
	                this.match(MySqlParser.WITH);
	                this.state = 6636; 
	                this._errHandler.sync(this);
	                let _alt = 1;
	                do {
	                	switch (_alt) {
	                	case 1:
	                		this.state = 6635;
	                		this.userResourceOption();
	                		break;
	                	default:
	                		throw new antlr4.error.NoViableAltException(this);
	                	}
	                	this.state = 6638; 
	                	this._errHandler.sync(this);
	                	_alt = this._interp.adaptivePredict(this._input,881, this._ctx);
	                } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );

	            }
	            this.state = 6646;
	            this._errHandler.sync(this);
	            let _alt = this._interp.adaptivePredict(this._input,884,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 6644;
	                    this._errHandler.sync(this);
	                    switch(this._input.LA(1)) {
	                    case MySqlParser.PASSWORD:
	                        this.state = 6642;
	                        this.userPasswordOption();
	                        break;
	                    case MySqlParser.ACCOUNT:
	                        this.state = 6643;
	                        this.userLockOption();
	                        break;
	                    default:
	                        throw new antlr4.error.NoViableAltException(this);
	                    } 
	                }
	                this.state = 6648;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,884,this._ctx);
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createUser() {
	    let localctx = new CreateUserContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 636, MySqlParser.RULE_createUser);
	    var _la = 0; // Token type
	    try {
	        this.state = 6705;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,897,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new CreateUserMysqlV56Context(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6651;
	            this.match(MySqlParser.CREATE);
	            this.state = 6652;
	            this.match(MySqlParser.USER);
	            this.state = 6653;
	            this.userAuthOption();
	            this.state = 6658;
	            this._errHandler.sync(this);
	            let _alt = this._interp.adaptivePredict(this._input,886,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 6654;
	                    this.match(MySqlParser.COMMA);
	                    this.state = 6655;
	                    this.userAuthOption(); 
	                }
	                this.state = 6660;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,886,this._ctx);
	            }

	            break;

	        case 2:
	            localctx = new CreateUserMysqlV57Context(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6661;
	            this.match(MySqlParser.CREATE);
	            this.state = 6662;
	            this.match(MySqlParser.USER);
	            this.state = 6664;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.IF) {
	                this.state = 6663;
	                this.ifNotExists();
	            }

	            this.state = 6666;
	            this.userAuthOption();
	            this.state = 6671;
	            this._errHandler.sync(this);
	            let _alt = this._interp.adaptivePredict(this._input,888,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 6667;
	                    this.match(MySqlParser.COMMA);
	                    this.state = 6668;
	                    this.userAuthOption(); 
	                }
	                this.state = 6673;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,888,this._ctx);
	            }

	            this.state = 6688;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,892,this._ctx);
	            if(la_===1) {
	                this.state = 6674;
	                this.match(MySqlParser.REQUIRE);
	                this.state = 6686;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case MySqlParser.NONE:
	                    this.state = 6675;
	                    localctx.tlsNone = this.match(MySqlParser.NONE);
	                    break;
	                case MySqlParser.SSL:
	                case MySqlParser.CIPHER:
	                case MySqlParser.ISSUER:
	                case MySqlParser.SUBJECT:
	                case MySqlParser.X509:
	                    this.state = 6676;
	                    this.tlsOption();
	                    this.state = 6683;
	                    this._errHandler.sync(this);
	                    let _alt = this._interp.adaptivePredict(this._input,890,this._ctx)
	                    while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                        if(_alt===1) {
	                            this.state = 6678;
	                            this._errHandler.sync(this);
	                            _la = this._input.LA(1);
	                            if(_la===MySqlParser.AND) {
	                                this.state = 6677;
	                                this.match(MySqlParser.AND);
	                            }

	                            this.state = 6680;
	                            this.tlsOption(); 
	                        }
	                        this.state = 6685;
	                        this._errHandler.sync(this);
	                        _alt = this._interp.adaptivePredict(this._input,890,this._ctx);
	                    }

	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }

	            }
	            this.state = 6696;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,894,this._ctx);
	            if(la_===1) {
	                this.state = 6690;
	                this.match(MySqlParser.WITH);
	                this.state = 6692; 
	                this._errHandler.sync(this);
	                let _alt = 1;
	                do {
	                	switch (_alt) {
	                	case 1:
	                		this.state = 6691;
	                		this.userResourceOption();
	                		break;
	                	default:
	                		throw new antlr4.error.NoViableAltException(this);
	                	}
	                	this.state = 6694; 
	                	this._errHandler.sync(this);
	                	_alt = this._interp.adaptivePredict(this._input,893, this._ctx);
	                } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );

	            }
	            this.state = 6702;
	            this._errHandler.sync(this);
	            let _alt = this._interp.adaptivePredict(this._input,896,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 6700;
	                    this._errHandler.sync(this);
	                    switch(this._input.LA(1)) {
	                    case MySqlParser.PASSWORD:
	                        this.state = 6698;
	                        this.userPasswordOption();
	                        break;
	                    case MySqlParser.ACCOUNT:
	                        this.state = 6699;
	                        this.userLockOption();
	                        break;
	                    default:
	                        throw new antlr4.error.NoViableAltException(this);
	                    } 
	                }
	                this.state = 6704;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,896,this._ctx);
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropUser() {
	    let localctx = new DropUserContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 638, MySqlParser.RULE_dropUser);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6707;
	        this.match(MySqlParser.DROP);
	        this.state = 6708;
	        this.match(MySqlParser.USER);
	        this.state = 6710;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.IF) {
	            this.state = 6709;
	            this.ifExists();
	        }

	        this.state = 6712;
	        this.userName();
	        this.state = 6717;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,899,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 6713;
	                this.match(MySqlParser.COMMA);
	                this.state = 6714;
	                this.userName(); 
	            }
	            this.state = 6719;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,899,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	grantStatement() {
	    let localctx = new GrantStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 640, MySqlParser.RULE_grantStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6720;
	        this.match(MySqlParser.GRANT);
	        this.state = 6721;
	        this.privelegeClause();
	        this.state = 6726;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MySqlParser.COMMA) {
	            this.state = 6722;
	            this.match(MySqlParser.COMMA);
	            this.state = 6723;
	            this.privelegeClause();
	            this.state = 6728;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 6729;
	        this.match(MySqlParser.ON);
	        this.state = 6731;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,901,this._ctx);
	        if(la_===1) {
	            this.state = 6730;
	            localctx.privilegeObject = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.PROCEDURE || _la===MySqlParser.TABLE || _la===MySqlParser.FUNCTION)) {
	                localctx.privilegeObject = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }

	        }
	        this.state = 6733;
	        this.privilegeLevel();
	        this.state = 6734;
	        this.match(MySqlParser.TO);
	        this.state = 6735;
	        this.userAuthOption();
	        this.state = 6740;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,902,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 6736;
	                this.match(MySqlParser.COMMA);
	                this.state = 6737;
	                this.userAuthOption(); 
	            }
	            this.state = 6742;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,902,this._ctx);
	        }

	        this.state = 6757;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,906,this._ctx);
	        if(la_===1) {
	            this.state = 6743;
	            this.match(MySqlParser.REQUIRE);
	            this.state = 6755;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case MySqlParser.NONE:
	                this.state = 6744;
	                localctx.tlsNone = this.match(MySqlParser.NONE);
	                break;
	            case MySqlParser.SSL:
	            case MySqlParser.CIPHER:
	            case MySqlParser.ISSUER:
	            case MySqlParser.SUBJECT:
	            case MySqlParser.X509:
	                this.state = 6745;
	                this.tlsOption();
	                this.state = 6752;
	                this._errHandler.sync(this);
	                let _alt = this._interp.adaptivePredict(this._input,904,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 6747;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                        if(_la===MySqlParser.AND) {
	                            this.state = 6746;
	                            this.match(MySqlParser.AND);
	                        }

	                        this.state = 6749;
	                        this.tlsOption(); 
	                    }
	                    this.state = 6754;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,904,this._ctx);
	                }

	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }

	        }
	        this.state = 6768;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,909,this._ctx);
	        if(la_===1) {
	            this.state = 6759;
	            this.match(MySqlParser.WITH);
	            this.state = 6765;
	            this._errHandler.sync(this);
	            let _alt = this._interp.adaptivePredict(this._input,908,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 6763;
	                    this._errHandler.sync(this);
	                    switch(this._input.LA(1)) {
	                    case MySqlParser.GRANT:
	                        this.state = 6760;
	                        this.match(MySqlParser.GRANT);
	                        this.state = 6761;
	                        this.match(MySqlParser.OPTION);
	                        break;
	                    case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
	                    case MySqlParser.MAX_QUERIES_PER_HOUR:
	                    case MySqlParser.MAX_UPDATES_PER_HOUR:
	                    case MySqlParser.MAX_USER_CONNECTIONS:
	                        this.state = 6762;
	                        this.userResourceOption();
	                        break;
	                    default:
	                        throw new antlr4.error.NoViableAltException(this);
	                    } 
	                }
	                this.state = 6767;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,908,this._ctx);
	            }


	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	grantProxy() {
	    let localctx = new GrantProxyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 642, MySqlParser.RULE_grantProxy);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6770;
	        this.match(MySqlParser.GRANT);
	        this.state = 6771;
	        this.match(MySqlParser.PROXY);
	        this.state = 6772;
	        this.match(MySqlParser.ON);
	        this.state = 6773;
	        localctx.fromFirst = this.userName();
	        this.state = 6774;
	        this.match(MySqlParser.TO);
	        this.state = 6775;
	        localctx.toFirst = this.userName();
	        this.state = 6780;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,910,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 6776;
	                this.match(MySqlParser.COMMA);
	                this.state = 6777;
	                localctx._userName = this.userName();
	                localctx.toOther.push(localctx._userName); 
	            }
	            this.state = 6782;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,910,this._ctx);
	        }

	        this.state = 6786;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,911,this._ctx);
	        if(la_===1) {
	            this.state = 6783;
	            this.match(MySqlParser.WITH);
	            this.state = 6784;
	            this.match(MySqlParser.GRANT);
	            this.state = 6785;
	            this.match(MySqlParser.OPTION);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	renameUser() {
	    let localctx = new RenameUserContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 644, MySqlParser.RULE_renameUser);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6788;
	        this.match(MySqlParser.RENAME);
	        this.state = 6789;
	        this.match(MySqlParser.USER);
	        this.state = 6790;
	        this.renameUserClause();
	        this.state = 6795;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,912,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 6791;
	                this.match(MySqlParser.COMMA);
	                this.state = 6792;
	                this.renameUserClause(); 
	            }
	            this.state = 6797;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,912,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	revokeStatement() {
	    let localctx = new RevokeStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 646, MySqlParser.RULE_revokeStatement);
	    var _la = 0; // Token type
	    try {
	        this.state = 6838;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,918,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new DetailRevokeContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6798;
	            this.match(MySqlParser.REVOKE);
	            this.state = 6799;
	            this.privelegeClause();
	            this.state = 6804;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.COMMA) {
	                this.state = 6800;
	                this.match(MySqlParser.COMMA);
	                this.state = 6801;
	                this.privelegeClause();
	                this.state = 6806;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 6807;
	            this.match(MySqlParser.ON);
	            this.state = 6809;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,914,this._ctx);
	            if(la_===1) {
	                this.state = 6808;
	                localctx.privilegeObject = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===MySqlParser.PROCEDURE || _la===MySqlParser.TABLE || _la===MySqlParser.FUNCTION)) {
	                    localctx.privilegeObject = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }

	            }
	            this.state = 6811;
	            this.privilegeLevel();
	            this.state = 6812;
	            this.match(MySqlParser.FROM);
	            this.state = 6813;
	            this.userName();
	            this.state = 6818;
	            this._errHandler.sync(this);
	            let _alt = this._interp.adaptivePredict(this._input,915,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 6814;
	                    this.match(MySqlParser.COMMA);
	                    this.state = 6815;
	                    this.userName(); 
	                }
	                this.state = 6820;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,915,this._ctx);
	            }

	            break;

	        case 2:
	            localctx = new ShortRevokeContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6821;
	            this.match(MySqlParser.REVOKE);
	            this.state = 6822;
	            this.match(MySqlParser.ALL);
	            this.state = 6824;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.PRIVILEGES) {
	                this.state = 6823;
	                this.match(MySqlParser.PRIVILEGES);
	            }

	            this.state = 6826;
	            this.match(MySqlParser.COMMA);
	            this.state = 6827;
	            this.match(MySqlParser.GRANT);
	            this.state = 6828;
	            this.match(MySqlParser.OPTION);
	            this.state = 6829;
	            this.match(MySqlParser.FROM);
	            this.state = 6830;
	            this.userName();
	            this.state = 6835;
	            this._errHandler.sync(this);
	            let _alt = this._interp.adaptivePredict(this._input,917,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 6831;
	                    this.match(MySqlParser.COMMA);
	                    this.state = 6832;
	                    this.userName(); 
	                }
	                this.state = 6837;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,917,this._ctx);
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	revokeProxy() {
	    let localctx = new RevokeProxyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 648, MySqlParser.RULE_revokeProxy);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6840;
	        this.match(MySqlParser.REVOKE);
	        this.state = 6841;
	        this.match(MySqlParser.PROXY);
	        this.state = 6842;
	        this.match(MySqlParser.ON);
	        this.state = 6843;
	        localctx.onUser = this.userName();
	        this.state = 6844;
	        this.match(MySqlParser.FROM);
	        this.state = 6845;
	        localctx.fromFirst = this.userName();
	        this.state = 6850;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,919,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 6846;
	                this.match(MySqlParser.COMMA);
	                this.state = 6847;
	                localctx._userName = this.userName();
	                localctx.fromOther.push(localctx._userName); 
	            }
	            this.state = 6852;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,919,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setPasswordStatement() {
	    let localctx = new SetPasswordStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 650, MySqlParser.RULE_setPasswordStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6853;
	        this.match(MySqlParser.SET);
	        this.state = 6854;
	        this.match(MySqlParser.PASSWORD);
	        this.state = 6857;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.FOR) {
	            this.state = 6855;
	            this.match(MySqlParser.FOR);
	            this.state = 6856;
	            this.userName();
	        }

	        this.state = 6859;
	        this.match(MySqlParser.EQUAL_SYMBOL);
	        this.state = 6862;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.OLD_PASSWORD:
	        case MySqlParser.PASSWORD:
	            this.state = 6860;
	            this.passwordFunctionClause();
	            break;
	        case MySqlParser.STRING_LITERAL:
	            this.state = 6861;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	grantStatementInceptor() {
	    let localctx = new GrantStatementInceptorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 652, MySqlParser.RULE_grantStatementInceptor);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6864;
	        this.match(MySqlParser.GRANT);
	        this.state = 6865;
	        this.privilegeList();
	        this.state = 6868;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.ON) {
	            this.state = 6866;
	            this.match(MySqlParser.ON);
	            this.state = 6867;
	            this.privilegeObjectSpec();
	        }

	        this.state = 6870;
	        this.match(MySqlParser.TO);
	        this.state = 6871;
	        this.principalNames();
	        this.state = 6875;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,923,this._ctx);
	        if(la_===1) {
	            this.state = 6872;
	            this.match(MySqlParser.WITH);
	            this.state = 6873;
	            this.match(MySqlParser.GRANT);
	            this.state = 6874;
	            this.match(MySqlParser.OPTION);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	revokeStatementInceptor() {
	    let localctx = new RevokeStatementInceptorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 654, MySqlParser.RULE_revokeStatementInceptor);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6877;
	        this.match(MySqlParser.REVOKE);
	        this.state = 6881;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.GRANT) {
	            this.state = 6878;
	            this.match(MySqlParser.GRANT);
	            this.state = 6879;
	            this.match(MySqlParser.OPTION);
	            this.state = 6880;
	            this.match(MySqlParser.FOR);
	        }

	        this.state = 6883;
	        this.privilegeList();
	        this.state = 6886;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.ON) {
	            this.state = 6884;
	            this.match(MySqlParser.ON);
	            this.state = 6885;
	            this.privilegeObjectSpec();
	        }

	        this.state = 6888;
	        this.match(MySqlParser.FROM);
	        this.state = 6889;
	        this.principalNames();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showGrantInceptor() {
	    let localctx = new ShowGrantInceptorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 656, MySqlParser.RULE_showGrantInceptor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6891;
	        this.match(MySqlParser.SHOW);
	        this.state = 6892;
	        this.match(MySqlParser.GRANT);
	        this.state = 6894;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,926,this._ctx);
	        if(la_===1) {
	            this.state = 6893;
	            this.principalName();

	        }
	        this.state = 6904;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,929,this._ctx);
	        if(la_===1) {
	            this.state = 6896;
	            this.match(MySqlParser.ON);
	            this.state = 6902;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,928,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 6897;
	                this.match(MySqlParser.ALL);
	                this.state = 6899;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,927,this._ctx);
	                if(la_===1) {
	                    this.state = 6898;
	                    this.match(MySqlParser.APP);

	                }
	                break;

	            case 2:
	                this.state = 6901;
	                this.privilegeObjectSpec();
	                break;

	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	grantPermission() {
	    let localctx = new GrantPermissionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 658, MySqlParser.RULE_grantPermission);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6906;
	        this.match(MySqlParser.GRANT);
	        this.state = 6907;
	        this.match(MySqlParser.PERMISSION);
	        this.state = 6908;
	        this.onTableOrView();
	        this.state = 6917;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,930,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 6909;
	            this.match(MySqlParser.FOR);
	            this.state = 6910;
	            this.match(MySqlParser.ROWS);
	            this.state = 6911;
	            this.whereExpressionOptional();
	            break;

	        case 2:
	            this.state = 6912;
	            this.match(MySqlParser.FOR);
	            this.state = 6913;
	            this.match(MySqlParser.COLUMN);
	            this.state = 6914;
	            this.uid();
	            this.state = 6915;
	            this.caseFunction();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	revokePermission() {
	    let localctx = new RevokePermissionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 660, MySqlParser.RULE_revokePermission);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6919;
	        this.match(MySqlParser.REVOKE);
	        this.state = 6920;
	        this.match(MySqlParser.PERMISSION);
	        this.state = 6921;
	        this.onTableOrView();
	        this.state = 6929;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,931,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 6922;
	            this.match(MySqlParser.FOR);
	            this.state = 6923;
	            this.match(MySqlParser.ROWS);
	            break;

	        case 2:
	            this.state = 6924;
	            this.match(MySqlParser.FOR);
	            this.state = 6925;
	            this.match(MySqlParser.COLUMNS);
	            break;

	        case 3:
	            this.state = 6926;
	            this.match(MySqlParser.FOR);
	            this.state = 6927;
	            this.match(MySqlParser.COLUMN);
	            this.state = 6928;
	            this.uid();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showPermission() {
	    let localctx = new ShowPermissionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 662, MySqlParser.RULE_showPermission);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6931;
	        this.match(MySqlParser.SHOW);
	        this.state = 6932;
	        this.match(MySqlParser.PERMISSION);
	        this.state = 6933;
	        this.onTableOrView();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	grantFacl() {
	    let localctx = new GrantFaclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 664, MySqlParser.RULE_grantFacl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6935;
	        this.match(MySqlParser.GRANT);
	        this.state = 6936;
	        this.match(MySqlParser.FACL);
	        this.state = 6937;
	        this.stringLiteral();
	        this.state = 6938;
	        this.match(MySqlParser.ON);
	        this.state = 6939;
	        this.match(MySqlParser.TABLE);
	        this.state = 6940;
	        this.tableName();
	        this.state = 6941;
	        this.match(MySqlParser.TO);
	        this.state = 6942;
	        this.userOrGroup();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	revokeFacl() {
	    let localctx = new RevokeFaclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 666, MySqlParser.RULE_revokeFacl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6944;
	        this.match(MySqlParser.REVOKE);
	        this.state = 6945;
	        this.match(MySqlParser.FACL);
	        this.state = 6946;
	        this.match(MySqlParser.ON);
	        this.state = 6947;
	        this.match(MySqlParser.TABLE);
	        this.state = 6948;
	        this.tableName();
	        this.state = 6951;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,932,this._ctx);
	        if(la_===1) {
	            this.state = 6949;
	            this.match(MySqlParser.FROM);
	            this.state = 6950;
	            this.userOrGroup();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showFacl() {
	    let localctx = new ShowFaclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 668, MySqlParser.RULE_showFacl);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6953;
	        this.match(MySqlParser.SHOW);
	        this.state = 6954;
	        this.match(MySqlParser.FACL);
	        this.state = 6956;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.GROUP || _la===MySqlParser.USER) {
	            this.state = 6955;
	            this.userOrGroup();
	        }

	        this.state = 6958;
	        this.match(MySqlParser.ON);
	        this.state = 6959;
	        this.match(MySqlParser.TABLE);
	        this.state = 6960;
	        this.tableName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	grantQuota() {
	    let localctx = new GrantQuotaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 670, MySqlParser.RULE_grantQuota);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6962;
	        this.match(MySqlParser.GRANT);
	        this.state = 6963;
	        this.match(MySqlParser.QUOTA);
	        this.state = 6964;
	        _la = this._input.LA(1);
	        if(!(_la===MySqlParser.UNLIMITED || _la===MySqlParser.FILESIZE_LITERAL)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 6967;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,934,this._ctx);
	        if(la_===1) {
	            this.state = 6965;
	            this.match(MySqlParser.ON);
	            this.state = 6966;
	            this.quotaDb();

	        }
	        this.state = 6971;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,935,this._ctx);
	        if(la_===1) {
	            this.state = 6969;
	            this.match(MySqlParser.TO);
	            this.state = 6970;
	            this.quotaUser();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	revokeQuota() {
	    let localctx = new RevokeQuotaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 672, MySqlParser.RULE_revokeQuota);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6973;
	        this.match(MySqlParser.REVOKE);
	        this.state = 6974;
	        this.match(MySqlParser.QUOTA);
	        this.state = 6977;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,936,this._ctx);
	        if(la_===1) {
	            this.state = 6975;
	            this.match(MySqlParser.ON);
	            this.state = 6976;
	            this.quotaDb();

	        }
	        this.state = 6981;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,937,this._ctx);
	        if(la_===1) {
	            this.state = 6979;
	            this.match(MySqlParser.FROM);
	            this.state = 6980;
	            this.quotaUser();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showQuota() {
	    let localctx = new ShowQuotaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 674, MySqlParser.RULE_showQuota);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6983;
	        this.match(MySqlParser.SHOW);
	        this.state = 6984;
	        this.match(MySqlParser.QUOTA);
	        this.state = 6986;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,938,this._ctx);
	        if(la_===1) {
	            this.state = 6985;
	            this.quotaUser();

	        }
	        this.state = 6990;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,939,this._ctx);
	        if(la_===1) {
	            this.state = 6988;
	            this.match(MySqlParser.ON);
	            this.state = 6989;
	            this.quotaDb();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	roleStatementInceptor() {
	    let localctx = new RoleStatementInceptorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 676, MySqlParser.RULE_roleStatementInceptor);
	    var _la = 0; // Token type
	    try {
	        this.state = 7038;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,946,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6992;
	            this.match(MySqlParser.CREATE);
	            this.state = 6993;
	            this.match(MySqlParser.ROLE);
	            this.state = 6994;
	            this.uid();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6995;
	            this.match(MySqlParser.DROP);
	            this.state = 6996;
	            this.match(MySqlParser.ROLE);
	            this.state = 6997;
	            this.uid();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 6998;
	            this.match(MySqlParser.SET);
	            this.state = 6999;
	            this.match(MySqlParser.ROLE);
	            this.state = 7002;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,940,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 7000;
	                this.uid();
	                break;

	            case 2:
	                this.state = 7001;
	                this.match(MySqlParser.ALL);
	                break;

	            }
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 7004;
	            this.match(MySqlParser.SHOW);
	            this.state = 7006;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.CURRENT) {
	                this.state = 7005;
	                this.match(MySqlParser.CURRENT);
	            }

	            this.state = 7008;
	            this.match(MySqlParser.ROLES);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 7009;
	            this.match(MySqlParser.SHOW);
	            this.state = 7010;
	            this.match(MySqlParser.ROLE);
	            this.state = 7011;
	            this.match(MySqlParser.GRANT);
	            this.state = 7012;
	            this.principalName();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 7013;
	            this.match(MySqlParser.GRANT);
	            this.state = 7015;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,942,this._ctx);
	            if(la_===1) {
	                this.state = 7014;
	                this.match(MySqlParser.ROLE);

	            }
	            this.state = 7017;
	            this.uidList();
	            this.state = 7018;
	            this.match(MySqlParser.TO);
	            this.state = 7019;
	            this.principalNames();
	            this.state = 7023;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,943,this._ctx);
	            if(la_===1) {
	                this.state = 7020;
	                this.match(MySqlParser.WITH);
	                this.state = 7021;
	                this.match(MySqlParser.ADMIN);
	                this.state = 7022;
	                this.match(MySqlParser.OPTION);

	            }
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 7025;
	            this.match(MySqlParser.REVOKE);
	            this.state = 7029;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,944,this._ctx);
	            if(la_===1) {
	                this.state = 7026;
	                this.match(MySqlParser.ADMIN);
	                this.state = 7027;
	                this.match(MySqlParser.OPTION);
	                this.state = 7028;
	                this.match(MySqlParser.FOR);

	            }
	            this.state = 7032;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,945,this._ctx);
	            if(la_===1) {
	                this.state = 7031;
	                this.match(MySqlParser.ROLE);

	            }
	            this.state = 7034;
	            this.uidList();
	            this.state = 7035;
	            this.match(MySqlParser.FROM);
	            this.state = 7036;
	            this.principalNames();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showPrincipal() {
	    let localctx = new ShowPrincipalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 678, MySqlParser.RULE_showPrincipal);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7040;
	        this.match(MySqlParser.SHOW);
	        this.state = 7041;
	        this.match(MySqlParser.PRINCIPALS);
	        this.state = 7042;
	        this.uid();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	privilegeList() {
	    let localctx = new PrivilegeListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 680, MySqlParser.RULE_privilegeList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7044;
	        this.privlegeDef();
	        this.state = 7049;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MySqlParser.COMMA) {
	            this.state = 7045;
	            this.match(MySqlParser.COMMA);
	            this.state = 7046;
	            this.privlegeDef();
	            this.state = 7051;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	privlegeDef() {
	    let localctx = new PrivlegeDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 682, MySqlParser.RULE_privlegeDef);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7052;
	        this.privilegeType();
	        this.state = 7057;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.LR_BRACKET) {
	            this.state = 7053;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 7054;
	            this.uidList();
	            this.state = 7055;
	            this.match(MySqlParser.RR_BRACKET);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	privilegeType() {
	    let localctx = new PrivilegeTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 684, MySqlParser.RULE_privilegeType);
	    var _la = 0; // Token type
	    try {
	        this.state = 7075;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,949,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7059;
	            this.match(MySqlParser.ALL);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7060;
	            this.match(MySqlParser.ALTER);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7061;
	            this.match(MySqlParser.UPDATE);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 7062;
	            this.match(MySqlParser.CREATE);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 7063;
	            this.match(MySqlParser.CREATE);
	            this.state = 7064;
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.APP || _la===MySqlParser.APPLICATION)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 7065;
	            this.match(MySqlParser.DROP);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 7066;
	            this.match(MySqlParser.INDEX);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 7067;
	            this.match(MySqlParser.LOCK);
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 7068;
	            this.match(MySqlParser.SELECT);
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 7069;
	            this.match(MySqlParser.SHOW_DATABASE);
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 7070;
	            this.match(MySqlParser.INSERT);
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 7071;
	            this.match(MySqlParser.DELETE);
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 7072;
	            this.match(MySqlParser.START);
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 7073;
	            this.match(MySqlParser.STOP);
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 7074;
	            this.match(MySqlParser.LIST);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	privilegeObjectSpec() {
	    let localctx = new PrivilegeObjectSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 686, MySqlParser.RULE_privilegeObjectSpec);
	    var _la = 0; // Token type
	    try {
	        this.state = 7103;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,954,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7077;
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.DATABASE || _la===MySqlParser.SCHEMA)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 7078;
	            this.databaseName();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7080;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,950,this._ctx);
	            if(la_===1) {
	                this.state = 7079;
	                this.match(MySqlParser.TABLE);

	            }
	            this.state = 7095;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,953,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 7082;
	                this.match(MySqlParser.STAR);
	                this.state = 7085;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,951,this._ctx);
	                if(la_===1) {
	                    this.state = 7083;
	                    this.match(MySqlParser.DOT);
	                    this.state = 7084;
	                    this.match(MySqlParser.STAR);

	                }
	                break;

	            case 2:
	                this.state = 7087;
	                this.databaseName();

	                this.state = 7088;
	                this.match(MySqlParser.DOT);
	                this.state = 7089;
	                this.match(MySqlParser.STAR);
	                break;

	            case 3:
	                this.state = 7091;
	                this.tableName();
	                this.state = 7093;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,952,this._ctx);
	                if(la_===1) {
	                    this.state = 7092;
	                    this.partitionSpec();

	                }
	                break;

	            }
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7097;
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.APP || _la===MySqlParser.APPLICATION)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 7098;
	            this.uid();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 7099;
	            this.match(MySqlParser.URI);

	            this.state = 7100;
	            localctx.path = this.stringLiteral();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 7101;
	            this.match(MySqlParser.SERVER);
	            this.state = 7102;
	            this.uid();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	principalNames() {
	    let localctx = new PrincipalNamesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 688, MySqlParser.RULE_principalNames);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7105;
	        this.principalName();
	        this.state = 7110;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,955,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 7106;
	                this.match(MySqlParser.COMMA);
	                this.state = 7107;
	                this.principalName(); 
	            }
	            this.state = 7112;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,955,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	quotaUser() {
	    let localctx = new QuotaUserContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 690, MySqlParser.RULE_quotaUser);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7113;
	        this.match(MySqlParser.USER);
	        this.state = 7114;
	        this.uid();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	onTableOrView() {
	    let localctx = new OnTableOrViewContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 692, MySqlParser.RULE_onTableOrView);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7116;
	        this.match(MySqlParser.ON);
	        this.state = 7123;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,957,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 7118;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,956,this._ctx);
	            if(la_===1) {
	                this.state = 7117;
	                this.match(MySqlParser.TABLE);

	            }
	            this.state = 7120;
	            this.tableName();
	            break;

	        case 2:
	            this.state = 7121;
	            this.match(MySqlParser.VIEW);
	            this.state = 7122;
	            this.viewName();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	quotaDb() {
	    let localctx = new QuotaDbContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 694, MySqlParser.RULE_quotaDb);
	    try {
	        this.state = 7129;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.DATABASE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7125;
	            this.match(MySqlParser.DATABASE);
	            this.state = 7126;
	            this.databaseName();
	            break;
	        case MySqlParser.TEMPORARY:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7127;
	            this.match(MySqlParser.TEMPORARY);
	            this.state = 7128;
	            this.match(MySqlParser.SPACE2);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	userOrGroup() {
	    let localctx = new UserOrGroupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 696, MySqlParser.RULE_userOrGroup);
	    try {
	        this.state = 7135;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.USER:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7131;
	            this.match(MySqlParser.USER);
	            this.state = 7132;
	            this.uid();
	            break;
	        case MySqlParser.GROUP:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7133;
	            this.match(MySqlParser.GROUP);
	            this.state = 7134;
	            this.uid();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	principalName() {
	    let localctx = new PrincipalNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 698, MySqlParser.RULE_principalName);
	    try {
	        this.state = 7143;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.USER:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7137;
	            this.match(MySqlParser.USER);
	            this.state = 7138;
	            this.uid();
	            break;
	        case MySqlParser.GROUP:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7139;
	            this.match(MySqlParser.GROUP);
	            this.state = 7140;
	            this.uid();
	            break;
	        case MySqlParser.ROLE:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7141;
	            this.match(MySqlParser.ROLE);
	            this.state = 7142;
	            this.uid();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	userSpecification() {
	    let localctx = new UserSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 700, MySqlParser.RULE_userSpecification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7145;
	        this.userName();
	        this.state = 7146;
	        this.userPasswordOption();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	userAuthOption() {
	    let localctx = new UserAuthOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 702, MySqlParser.RULE_userAuthOption);
	    var _la = 0; // Token type
	    try {
	        this.state = 7172;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,963,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new PasswordAuthOptionContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7148;
	            this.userName();
	            this.state = 7149;
	            this.match(MySqlParser.IDENTIFIED);
	            this.state = 7150;
	            this.match(MySqlParser.BY);
	            this.state = 7151;
	            this.match(MySqlParser.PASSWORD);
	            this.state = 7152;
	            localctx.hashed = this.match(MySqlParser.STRING_LITERAL);
	            break;

	        case 2:
	            localctx = new StringAuthOptionContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7154;
	            this.userName();
	            this.state = 7155;
	            this.match(MySqlParser.IDENTIFIED);
	            this.state = 7158;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.WITH) {
	                this.state = 7156;
	                this.match(MySqlParser.WITH);
	                this.state = 7157;
	                this.authPlugin();
	            }

	            this.state = 7160;
	            this.match(MySqlParser.BY);
	            this.state = 7161;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;

	        case 3:
	            localctx = new HashAuthOptionContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7163;
	            this.userName();
	            this.state = 7164;
	            this.match(MySqlParser.IDENTIFIED);
	            this.state = 7165;
	            this.match(MySqlParser.WITH);
	            this.state = 7166;
	            this.authPlugin();
	            this.state = 7169;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,962,this._ctx);
	            if(la_===1) {
	                this.state = 7167;
	                this.match(MySqlParser.AS);
	                this.state = 7168;
	                this.match(MySqlParser.STRING_LITERAL);

	            }
	            break;

	        case 4:
	            localctx = new SimpleAuthOptionContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 7171;
	            this.userName();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tlsOption() {
	    let localctx = new TlsOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 704, MySqlParser.RULE_tlsOption);
	    try {
	        this.state = 7182;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.SSL:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7174;
	            this.match(MySqlParser.SSL);
	            break;
	        case MySqlParser.X509:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7175;
	            this.match(MySqlParser.X509);
	            break;
	        case MySqlParser.CIPHER:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7176;
	            this.match(MySqlParser.CIPHER);
	            this.state = 7177;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case MySqlParser.ISSUER:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 7178;
	            this.match(MySqlParser.ISSUER);
	            this.state = 7179;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case MySqlParser.SUBJECT:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 7180;
	            this.match(MySqlParser.SUBJECT);
	            this.state = 7181;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	userResourceOption() {
	    let localctx = new UserResourceOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 706, MySqlParser.RULE_userResourceOption);
	    try {
	        this.state = 7192;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.MAX_QUERIES_PER_HOUR:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7184;
	            this.match(MySqlParser.MAX_QUERIES_PER_HOUR);
	            this.state = 7185;
	            this.decimalLiteral();
	            break;
	        case MySqlParser.MAX_UPDATES_PER_HOUR:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7186;
	            this.match(MySqlParser.MAX_UPDATES_PER_HOUR);
	            this.state = 7187;
	            this.decimalLiteral();
	            break;
	        case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7188;
	            this.match(MySqlParser.MAX_CONNECTIONS_PER_HOUR);
	            this.state = 7189;
	            this.decimalLiteral();
	            break;
	        case MySqlParser.MAX_USER_CONNECTIONS:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 7190;
	            this.match(MySqlParser.MAX_USER_CONNECTIONS);
	            this.state = 7191;
	            this.decimalLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	userPasswordOption() {
	    let localctx = new UserPasswordOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 708, MySqlParser.RULE_userPasswordOption);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7194;
	        this.match(MySqlParser.PASSWORD);
	        this.state = 7195;
	        this.match(MySqlParser.EXPIRE);
	        this.state = 7202;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,966,this._ctx);
	        if(la_===1) {
	            this.state = 7196;
	            localctx.expireType = this.match(MySqlParser.DEFAULT);

	        } else if(la_===2) {
	            this.state = 7197;
	            localctx.expireType = this.match(MySqlParser.NEVER);

	        } else if(la_===3) {
	            this.state = 7198;
	            localctx.expireType = this.match(MySqlParser.INTERVAL);
	            this.state = 7199;
	            this.decimalLiteral();
	            this.state = 7200;
	            this.match(MySqlParser.DAY);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	userLockOption() {
	    let localctx = new UserLockOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 710, MySqlParser.RULE_userLockOption);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7204;
	        this.match(MySqlParser.ACCOUNT);
	        this.state = 7205;
	        localctx.lockType = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(_la===MySqlParser.LOCK || _la===MySqlParser.UNLOCK)) {
	            localctx.lockType = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	privelegeClause() {
	    let localctx = new PrivelegeClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 712, MySqlParser.RULE_privelegeClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7207;
	        this.privilege();
	        this.state = 7212;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.LR_BRACKET) {
	            this.state = 7208;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 7209;
	            this.uidList();
	            this.state = 7210;
	            this.match(MySqlParser.RR_BRACKET);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	privilege() {
	    let localctx = new PrivilegeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 714, MySqlParser.RULE_privilege);
	    var _la = 0; // Token type
	    try {
	        this.state = 7256;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.ALL:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7214;
	            this.match(MySqlParser.ALL);
	            this.state = 7216;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.PRIVILEGES) {
	                this.state = 7215;
	                this.match(MySqlParser.PRIVILEGES);
	            }

	            break;
	        case MySqlParser.ALTER:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7218;
	            this.match(MySqlParser.ALTER);
	            this.state = 7220;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.ROUTINE) {
	                this.state = 7219;
	                this.match(MySqlParser.ROUTINE);
	            }

	            break;
	        case MySqlParser.CREATE:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7222;
	            this.match(MySqlParser.CREATE);
	            this.state = 7229;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case MySqlParser.TEMPORARY:
	            	this.state = 7223;
	            	this.match(MySqlParser.TEMPORARY);
	            	this.state = 7224;
	            	this.match(MySqlParser.TABLES);
	            	break;
	            case MySqlParser.ROUTINE:
	            	this.state = 7225;
	            	this.match(MySqlParser.ROUTINE);
	            	break;
	            case MySqlParser.VIEW:
	            	this.state = 7226;
	            	this.match(MySqlParser.VIEW);
	            	break;
	            case MySqlParser.USER:
	            	this.state = 7227;
	            	this.match(MySqlParser.USER);
	            	break;
	            case MySqlParser.TABLESPACE:
	            	this.state = 7228;
	            	this.match(MySqlParser.TABLESPACE);
	            	break;
	            case MySqlParser.ON:
	            case MySqlParser.LR_BRACKET:
	            case MySqlParser.COMMA:
	            	break;
	            default:
	            	break;
	            }
	            break;
	        case MySqlParser.DELETE:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 7231;
	            this.match(MySqlParser.DELETE);
	            break;
	        case MySqlParser.DROP:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 7232;
	            this.match(MySqlParser.DROP);
	            break;
	        case MySqlParser.EVENT:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 7233;
	            this.match(MySqlParser.EVENT);
	            break;
	        case MySqlParser.EXECUTE:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 7234;
	            this.match(MySqlParser.EXECUTE);
	            break;
	        case MySqlParser.FILE:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 7235;
	            this.match(MySqlParser.FILE);
	            break;
	        case MySqlParser.GRANT:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 7236;
	            this.match(MySqlParser.GRANT);
	            this.state = 7237;
	            this.match(MySqlParser.OPTION);
	            break;
	        case MySqlParser.INDEX:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 7238;
	            this.match(MySqlParser.INDEX);
	            break;
	        case MySqlParser.INSERT:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 7239;
	            this.match(MySqlParser.INSERT);
	            break;
	        case MySqlParser.LOCK:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 7240;
	            this.match(MySqlParser.LOCK);
	            this.state = 7241;
	            this.match(MySqlParser.TABLES);
	            break;
	        case MySqlParser.PROCESS:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 7242;
	            this.match(MySqlParser.PROCESS);
	            break;
	        case MySqlParser.PROXY:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 7243;
	            this.match(MySqlParser.PROXY);
	            break;
	        case MySqlParser.REFERENCES:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 7244;
	            this.match(MySqlParser.REFERENCES);
	            break;
	        case MySqlParser.RELOAD:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 7245;
	            this.match(MySqlParser.RELOAD);
	            break;
	        case MySqlParser.REPLICATION:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 7246;
	            this.match(MySqlParser.REPLICATION);
	            this.state = 7247;
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.CLIENT || _la===MySqlParser.SLAVE)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case MySqlParser.SELECT:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 7248;
	            this.match(MySqlParser.SELECT);
	            break;
	        case MySqlParser.SHOW:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 7249;
	            this.match(MySqlParser.SHOW);
	            this.state = 7250;
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.DATABASES || _la===MySqlParser.VIEW)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case MySqlParser.SHUTDOWN:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 7251;
	            this.match(MySqlParser.SHUTDOWN);
	            break;
	        case MySqlParser.SUPER:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 7252;
	            this.match(MySqlParser.SUPER);
	            break;
	        case MySqlParser.TRIGGER:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 7253;
	            this.match(MySqlParser.TRIGGER);
	            break;
	        case MySqlParser.UPDATE:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 7254;
	            this.match(MySqlParser.UPDATE);
	            break;
	        case MySqlParser.USAGE:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 7255;
	            this.match(MySqlParser.USAGE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	privilegeLevel() {
	    let localctx = new PrivilegeLevelContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 716, MySqlParser.RULE_privilegeLevel);
	    try {
	        this.state = 7271;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,972,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new CurrentSchemaPriviLevelContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7258;
	            this.match(MySqlParser.STAR);
	            break;

	        case 2:
	            localctx = new GlobalPrivLevelContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7259;
	            this.match(MySqlParser.STAR);
	            this.state = 7260;
	            this.match(MySqlParser.DOT);
	            this.state = 7261;
	            this.match(MySqlParser.STAR);
	            break;

	        case 3:
	            localctx = new DefiniteSchemaPrivLevelContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7262;
	            this.uid();
	            this.state = 7263;
	            this.match(MySqlParser.DOT);
	            this.state = 7264;
	            this.match(MySqlParser.STAR);
	            break;

	        case 4:
	            localctx = new DefiniteFullTablePrivLevelContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 7266;
	            this.uid();
	            this.state = 7267;
	            this.match(MySqlParser.DOT);
	            this.state = 7268;
	            this.uid();
	            break;

	        case 5:
	            localctx = new DefiniteTablePrivLevelContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 7270;
	            this.uid();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	renameUserClause() {
	    let localctx = new RenameUserClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 718, MySqlParser.RULE_renameUserClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7273;
	        localctx.fromFirst = this.userName();
	        this.state = 7274;
	        this.match(MySqlParser.TO);
	        this.state = 7275;
	        localctx.toFirst = this.userName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	analyzeTable() {
	    let localctx = new AnalyzeTableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 720, MySqlParser.RULE_analyzeTable);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7277;
	        this.match(MySqlParser.ANALYZE);
	        this.state = 7279;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.NO_WRITE_TO_BINLOG || _la===MySqlParser.LOCAL) {
	            this.state = 7278;
	            localctx.actionOption = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.NO_WRITE_TO_BINLOG || _la===MySqlParser.LOCAL)) {
	                localctx.actionOption = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 7281;
	        this.match(MySqlParser.TABLE);
	        this.state = 7282;
	        this.tables();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	checkTable() {
	    let localctx = new CheckTableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 722, MySqlParser.RULE_checkTable);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7284;
	        this.match(MySqlParser.CHECK);
	        this.state = 7285;
	        this.match(MySqlParser.TABLE);
	        this.state = 7286;
	        this.tables();
	        this.state = 7290;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,974,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 7287;
	                this.checkTableOption(); 
	            }
	            this.state = 7292;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,974,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	checksumTable() {
	    let localctx = new ChecksumTableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 724, MySqlParser.RULE_checksumTable);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7293;
	        this.match(MySqlParser.CHECKSUM);
	        this.state = 7294;
	        this.match(MySqlParser.TABLE);
	        this.state = 7295;
	        this.tables();
	        this.state = 7297;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,975,this._ctx);
	        if(la_===1) {
	            this.state = 7296;
	            localctx.actionOption = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.EXTENDED || _la===MySqlParser.QUICK)) {
	                localctx.actionOption = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optimizeTable() {
	    let localctx = new OptimizeTableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 726, MySqlParser.RULE_optimizeTable);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7299;
	        this.match(MySqlParser.OPTIMIZE);
	        this.state = 7301;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.NO_WRITE_TO_BINLOG || _la===MySqlParser.LOCAL) {
	            this.state = 7300;
	            localctx.actionOption = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.NO_WRITE_TO_BINLOG || _la===MySqlParser.LOCAL)) {
	                localctx.actionOption = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 7303;
	        this.match(MySqlParser.TABLE);
	        this.state = 7304;
	        this.tables();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	repairTable() {
	    let localctx = new RepairTableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 728, MySqlParser.RULE_repairTable);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7306;
	        this.match(MySqlParser.REPAIR);
	        this.state = 7308;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.NO_WRITE_TO_BINLOG || _la===MySqlParser.LOCAL) {
	            this.state = 7307;
	            localctx.actionOption = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.NO_WRITE_TO_BINLOG || _la===MySqlParser.LOCAL)) {
	                localctx.actionOption = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 7310;
	        this.match(MySqlParser.TABLE);
	        this.state = 7311;
	        this.tables();
	        this.state = 7313;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,978,this._ctx);
	        if(la_===1) {
	            this.state = 7312;
	            this.match(MySqlParser.QUICK);

	        }
	        this.state = 7316;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,979,this._ctx);
	        if(la_===1) {
	            this.state = 7315;
	            this.match(MySqlParser.EXTENDED);

	        }
	        this.state = 7319;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,980,this._ctx);
	        if(la_===1) {
	            this.state = 7318;
	            this.match(MySqlParser.USE_FRM);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	checkTableOption() {
	    let localctx = new CheckTableOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 730, MySqlParser.RULE_checkTableOption);
	    try {
	        this.state = 7328;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.FOR:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7321;
	            this.match(MySqlParser.FOR);
	            this.state = 7322;
	            this.match(MySqlParser.UPGRADE);
	            break;
	        case MySqlParser.QUICK:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7323;
	            this.match(MySqlParser.QUICK);
	            break;
	        case MySqlParser.FAST:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7324;
	            this.match(MySqlParser.FAST);
	            break;
	        case MySqlParser.MEDIUM:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 7325;
	            this.match(MySqlParser.MEDIUM);
	            break;
	        case MySqlParser.EXTENDED:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 7326;
	            this.match(MySqlParser.EXTENDED);
	            break;
	        case MySqlParser.CHANGED:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 7327;
	            this.match(MySqlParser.CHANGED);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createUdfunction() {
	    let localctx = new CreateUdfunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 732, MySqlParser.RULE_createUdfunction);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7330;
	        this.match(MySqlParser.CREATE);
	        this.state = 7332;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.AGGREGATE) {
	            this.state = 7331;
	            this.match(MySqlParser.AGGREGATE);
	        }

	        this.state = 7334;
	        this.match(MySqlParser.FUNCTION);
	        this.state = 7335;
	        this.uid();
	        this.state = 7336;
	        this.match(MySqlParser.RETURNS);
	        this.state = 7337;
	        localctx.returnType = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(((((_la - 341)) & ~0x1f) == 0 && ((1 << (_la - 341)) & ((1 << (MySqlParser.INTEGER - 341)) | (1 << (MySqlParser.REAL - 341)) | (1 << (MySqlParser.DECIMAL - 341)))) !== 0) || _la===MySqlParser.STRING)) {
	            localctx.returnType = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 7338;
	        this.match(MySqlParser.SONAME);
	        this.state = 7339;
	        this.match(MySqlParser.STRING_LITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	installPlugin() {
	    let localctx = new InstallPluginContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 734, MySqlParser.RULE_installPlugin);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7341;
	        this.match(MySqlParser.INSTALL);
	        this.state = 7342;
	        this.match(MySqlParser.PLUGIN);
	        this.state = 7343;
	        this.uid();
	        this.state = 7344;
	        this.match(MySqlParser.SONAME);
	        this.state = 7345;
	        this.match(MySqlParser.STRING_LITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	uninstallPlugin() {
	    let localctx = new UninstallPluginContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 736, MySqlParser.RULE_uninstallPlugin);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7347;
	        this.match(MySqlParser.UNINSTALL);
	        this.state = 7348;
	        this.match(MySqlParser.PLUGIN);
	        this.state = 7349;
	        this.uid();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setStatement() {
	    let localctx = new SetStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 738, MySqlParser.RULE_setStatement);
	    try {
	        this.state = 7387;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,988,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new SetVariableContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7351;
	            this.match(MySqlParser.SET);
	            this.state = 7352;
	            this.variableAssignment();
	            this.state = 7357;
	            this._errHandler.sync(this);
	            let _alt = this._interp.adaptivePredict(this._input,983,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 7353;
	                    this.match(MySqlParser.COMMA);
	                    this.state = 7354;
	                    this.variableAssignment(); 
	                }
	                this.state = 7359;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,983,this._ctx);
	            }

	            break;

	        case 2:
	            localctx = new SetCharsetContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7360;
	            if (!( this.isDialect('mysql'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('mysql')");
	            }
	            this.state = 7361;
	            this.match(MySqlParser.SET);
	            this.state = 7365;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case MySqlParser.CHARACTER:
	                this.state = 7362;
	                this.match(MySqlParser.CHARACTER);
	                this.state = 7363;
	                this.match(MySqlParser.SET);
	                break;
	            case MySqlParser.CHARSET:
	                this.state = 7364;
	                this.match(MySqlParser.CHARSET);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 7369;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case MySqlParser.BINARY:
	            case MySqlParser.ARMSCII8:
	            case MySqlParser.ASCII:
	            case MySqlParser.BIG5:
	            case MySqlParser.CP1250:
	            case MySqlParser.CP1251:
	            case MySqlParser.CP1256:
	            case MySqlParser.CP1257:
	            case MySqlParser.CP850:
	            case MySqlParser.CP852:
	            case MySqlParser.CP866:
	            case MySqlParser.CP932:
	            case MySqlParser.DEC8:
	            case MySqlParser.EUCJPMS:
	            case MySqlParser.EUCKR:
	            case MySqlParser.GB2312:
	            case MySqlParser.GBK:
	            case MySqlParser.GEOSTD8:
	            case MySqlParser.GREEK:
	            case MySqlParser.HEBREW:
	            case MySqlParser.HP8:
	            case MySqlParser.KEYBCS2:
	            case MySqlParser.KOI8R:
	            case MySqlParser.KOI8U:
	            case MySqlParser.LATIN1:
	            case MySqlParser.LATIN2:
	            case MySqlParser.LATIN5:
	            case MySqlParser.LATIN7:
	            case MySqlParser.MACCE:
	            case MySqlParser.MACROMAN:
	            case MySqlParser.SJIS:
	            case MySqlParser.SWE7:
	            case MySqlParser.TIS620:
	            case MySqlParser.UCS2:
	            case MySqlParser.UJIS:
	            case MySqlParser.UTF16:
	            case MySqlParser.UTF16LE:
	            case MySqlParser.UTF32:
	            case MySqlParser.UTF8:
	            case MySqlParser.UTF8MB3:
	            case MySqlParser.UTF8MB4:
	            case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
	            case MySqlParser.STRING_LITERAL:
	                this.state = 7367;
	                this.charsetName();
	                break;
	            case MySqlParser.DEFAULT:
	                this.state = 7368;
	                this.match(MySqlParser.DEFAULT);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 3:
	            localctx = new SetNamesContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7371;
	            if (!( this.isDialect('mysql'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('mysql')");
	            }
	            this.state = 7372;
	            this.match(MySqlParser.SET);
	            this.state = 7373;
	            this.match(MySqlParser.NAMES);
	            this.state = 7380;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case MySqlParser.BINARY:
	            case MySqlParser.ARMSCII8:
	            case MySqlParser.ASCII:
	            case MySqlParser.BIG5:
	            case MySqlParser.CP1250:
	            case MySqlParser.CP1251:
	            case MySqlParser.CP1256:
	            case MySqlParser.CP1257:
	            case MySqlParser.CP850:
	            case MySqlParser.CP852:
	            case MySqlParser.CP866:
	            case MySqlParser.CP932:
	            case MySqlParser.DEC8:
	            case MySqlParser.EUCJPMS:
	            case MySqlParser.EUCKR:
	            case MySqlParser.GB2312:
	            case MySqlParser.GBK:
	            case MySqlParser.GEOSTD8:
	            case MySqlParser.GREEK:
	            case MySqlParser.HEBREW:
	            case MySqlParser.HP8:
	            case MySqlParser.KEYBCS2:
	            case MySqlParser.KOI8R:
	            case MySqlParser.KOI8U:
	            case MySqlParser.LATIN1:
	            case MySqlParser.LATIN2:
	            case MySqlParser.LATIN5:
	            case MySqlParser.LATIN7:
	            case MySqlParser.MACCE:
	            case MySqlParser.MACROMAN:
	            case MySqlParser.SJIS:
	            case MySqlParser.SWE7:
	            case MySqlParser.TIS620:
	            case MySqlParser.UCS2:
	            case MySqlParser.UJIS:
	            case MySqlParser.UTF16:
	            case MySqlParser.UTF16LE:
	            case MySqlParser.UTF32:
	            case MySqlParser.UTF8:
	            case MySqlParser.UTF8MB3:
	            case MySqlParser.UTF8MB4:
	            case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
	            case MySqlParser.STRING_LITERAL:
	                this.state = 7374;
	                this.charsetName();
	                this.state = 7377;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,986,this._ctx);
	                if(la_===1) {
	                    this.state = 7375;
	                    this.match(MySqlParser.COLLATE);
	                    this.state = 7376;
	                    this.collationName();

	                }
	                break;
	            case MySqlParser.DEFAULT:
	                this.state = 7379;
	                this.match(MySqlParser.DEFAULT);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 4:
	            localctx = new SetPasswordContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 7382;
	            if (!( this.isDialect('mysql'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('mysql')");
	            }
	            this.state = 7383;
	            this.setPasswordStatement();
	            break;

	        case 5:
	            localctx = new SetTransactionContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 7384;
	            this.setTransactionStatement();
	            break;

	        case 6:
	            localctx = new SetAutocommitContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 7385;
	            if (!( this.isDialect('mysql'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('mysql')");
	            }
	            this.state = 7386;
	            this.setAutocommitStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showStatement() {
	    let localctx = new ShowStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 740, MySqlParser.RULE_showStatement);
	    try {
	        this.state = 7394;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,989,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7389;
	            if (!( this.isDialect('mysql'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('mysql')");
	            }
	            this.state = 7390;
	            this.showStatementMysql();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7391;
	            if (!( this.isDialect('inceptor'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('inceptor')");
	            }
	            this.state = 7392;
	            this.match(MySqlParser.SHOW);
	            this.state = 7393;
	            this.showStatementInceptor();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showStatementMysql() {
	    let localctx = new ShowStatementMysqlContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 742, MySqlParser.RULE_showStatementMysql);
	    var _la = 0; // Token type
	    try {
	        this.state = 7546;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1011,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new ShowMasterLogsContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7396;
	            this.match(MySqlParser.SHOW);
	            this.state = 7397;
	            localctx.logFormat = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.BINARY || _la===MySqlParser.MASTER)) {
	                localctx.logFormat = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 7398;
	            this.match(MySqlParser.LOGS);
	            break;

	        case 2:
	            localctx = new ShowLogEventsContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7399;
	            this.match(MySqlParser.SHOW);
	            this.state = 7400;
	            localctx.logFormat = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.BINLOG || _la===MySqlParser.RELAYLOG)) {
	                localctx.logFormat = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 7401;
	            this.match(MySqlParser.EVENTS);
	            this.state = 7404;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,990,this._ctx);
	            if(la_===1) {
	                this.state = 7402;
	                this.match(MySqlParser.IN);
	                this.state = 7403;
	                localctx.filename = this.match(MySqlParser.STRING_LITERAL);

	            }
	            this.state = 7408;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,991,this._ctx);
	            if(la_===1) {
	                this.state = 7406;
	                this.match(MySqlParser.FROM);
	                this.state = 7407;
	                localctx.fromPosition = this.decimalLiteral();

	            }
	            this.state = 7417;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,993,this._ctx);
	            if(la_===1) {
	                this.state = 7410;
	                this.match(MySqlParser.LIMIT);
	                this.state = 7414;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,992,this._ctx);
	                if(la_===1) {
	                    this.state = 7411;
	                    localctx.offset = this.decimalLiteral();
	                    this.state = 7412;
	                    this.match(MySqlParser.COMMA);

	                }
	                this.state = 7416;
	                localctx.rowCount = this.decimalLiteral();

	            }
	            break;

	        case 3:
	            localctx = new ShowObjectFilterContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7419;
	            this.match(MySqlParser.SHOW);
	            this.state = 7420;
	            this.showCommonEntity();
	            this.state = 7422;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,994,this._ctx);
	            if(la_===1) {
	                this.state = 7421;
	                this.showFilter();

	            }
	            break;

	        case 4:
	            localctx = new ShowColumnsContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 7424;
	            this.match(MySqlParser.SHOW);
	            this.state = 7426;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.FULL) {
	                this.state = 7425;
	                this.match(MySqlParser.FULL);
	            }

	            this.state = 7428;
	            localctx.columnsFormat = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.COLUMNS || _la===MySqlParser.FIELDS)) {
	                localctx.columnsFormat = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 7429;
	            localctx.tableFormat = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.FROM || _la===MySqlParser.IN)) {
	                localctx.tableFormat = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 7430;
	            this.tableName();
	            this.state = 7432;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,996,this._ctx);
	            if(la_===1) {
	                this.state = 7431;
	                localctx.schemaFormat = this.fromDatabase();

	            }
	            this.state = 7435;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,997,this._ctx);
	            if(la_===1) {
	                this.state = 7434;
	                this.showFilter();

	            }
	            break;

	        case 5:
	            localctx = new ShowCreateDbContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 7437;
	            this.match(MySqlParser.SHOW);
	            this.state = 7438;
	            this.match(MySqlParser.CREATE);
	            this.state = 7439;
	            localctx.schemaFormat = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.DATABASE || _la===MySqlParser.SCHEMA)) {
	                localctx.schemaFormat = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 7441;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,998,this._ctx);
	            if(la_===1) {
	                this.state = 7440;
	                this.ifNotExists();

	            }
	            this.state = 7443;
	            this.uid();
	            break;

	        case 6:
	            localctx = new ShowCreateFullIdObjectContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 7444;
	            this.match(MySqlParser.SHOW);
	            this.state = 7445;
	            this.match(MySqlParser.CREATE);
	            this.state = 7446;
	            localctx.namedEntity = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.PROCEDURE || _la===MySqlParser.TABLE || _la===MySqlParser.TRIGGER || _la===MySqlParser.EVENT || _la===MySqlParser.FUNCTION || _la===MySqlParser.VIEW)) {
	                localctx.namedEntity = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 7447;
	            this.fullId();
	            break;

	        case 7:
	            localctx = new ShowCreateUserContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 7448;
	            this.match(MySqlParser.SHOW);
	            this.state = 7449;
	            this.match(MySqlParser.CREATE);
	            this.state = 7450;
	            this.match(MySqlParser.USER);
	            this.state = 7451;
	            this.userName();
	            break;

	        case 8:
	            localctx = new ShowEngineContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 7452;
	            this.match(MySqlParser.SHOW);
	            this.state = 7453;
	            this.match(MySqlParser.ENGINE);
	            this.state = 7454;
	            this.engineName();
	            this.state = 7455;
	            localctx.engineOption = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.MUTEX || _la===MySqlParser.STATUS)) {
	                localctx.engineOption = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 9:
	            localctx = new ShowGlobalInfoContext(this, localctx);
	            this.enterOuterAlt(localctx, 9);
	            this.state = 7457;
	            this.match(MySqlParser.SHOW);
	            this.state = 7458;
	            this.showGlobalInfoClause();
	            break;

	        case 10:
	            localctx = new ShowErrorsContext(this, localctx);
	            this.enterOuterAlt(localctx, 10);
	            this.state = 7459;
	            this.match(MySqlParser.SHOW);
	            this.state = 7460;
	            localctx.errorFormat = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.ERRORS || _la===MySqlParser.WARNINGS)) {
	                localctx.errorFormat = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }

	            this.state = 7461;
	            this.match(MySqlParser.LIMIT);
	            this.state = 7465;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,999,this._ctx);
	            if(la_===1) {
	                this.state = 7462;
	                localctx.offset = this.decimalLiteral();
	                this.state = 7463;
	                this.match(MySqlParser.COMMA);

	            }
	            this.state = 7467;
	            localctx.rowCount = this.decimalLiteral();
	            break;

	        case 11:
	            localctx = new ShowCountErrorsContext(this, localctx);
	            this.enterOuterAlt(localctx, 11);
	            this.state = 7468;
	            this.match(MySqlParser.SHOW);
	            this.state = 7469;
	            this.match(MySqlParser.COUNT);
	            this.state = 7470;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 7471;
	            this.match(MySqlParser.STAR);
	            this.state = 7472;
	            this.match(MySqlParser.RR_BRACKET);
	            this.state = 7473;
	            localctx.errorFormat = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.ERRORS || _la===MySqlParser.WARNINGS)) {
	                localctx.errorFormat = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 12:
	            localctx = new ShowSchemaFilterContext(this, localctx);
	            this.enterOuterAlt(localctx, 12);
	            this.state = 7474;
	            this.match(MySqlParser.SHOW);
	            this.state = 7475;
	            this.showSchemaEntity();
	            this.state = 7478;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1000,this._ctx);
	            if(la_===1) {
	                this.state = 7476;
	                localctx.schemaFormat = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===MySqlParser.FROM || _la===MySqlParser.IN)) {
	                    localctx.schemaFormat = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 7477;
	                this.uid();

	            }
	            this.state = 7481;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1001,this._ctx);
	            if(la_===1) {
	                this.state = 7480;
	                this.showFilter();

	            }
	            break;

	        case 13:
	            localctx = new ShowRoutineContext(this, localctx);
	            this.enterOuterAlt(localctx, 13);
	            this.state = 7483;
	            this.match(MySqlParser.SHOW);
	            this.state = 7484;
	            localctx.routine = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.PROCEDURE || _la===MySqlParser.FUNCTION)) {
	                localctx.routine = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 7485;
	            this.match(MySqlParser.CODE);
	            this.state = 7486;
	            this.fullId();
	            break;

	        case 14:
	            localctx = new ShowGrantsContext(this, localctx);
	            this.enterOuterAlt(localctx, 14);
	            this.state = 7487;
	            this.match(MySqlParser.SHOW);
	            this.state = 7488;
	            this.match(MySqlParser.GRANTS);
	            this.state = 7491;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1002,this._ctx);
	            if(la_===1) {
	                this.state = 7489;
	                this.match(MySqlParser.FOR);
	                this.state = 7490;
	                this.userName();

	            }
	            break;

	        case 15:
	            localctx = new ShowIndexesContext(this, localctx);
	            this.enterOuterAlt(localctx, 15);
	            this.state = 7493;
	            this.match(MySqlParser.SHOW);
	            this.state = 7494;
	            localctx.indexFormat = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.INDEX || _la===MySqlParser.KEYS || _la===MySqlParser.INDEXES)) {
	                localctx.indexFormat = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 7495;
	            localctx.tableFormat = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.FROM || _la===MySqlParser.IN)) {
	                localctx.tableFormat = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 7496;
	            this.tableName();
	            this.state = 7499;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1003,this._ctx);
	            if(la_===1) {
	                this.state = 7497;
	                localctx.schemaFormat = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===MySqlParser.FROM || _la===MySqlParser.IN)) {
	                    localctx.schemaFormat = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 7498;
	                this.uid();

	            }
	            this.state = 7503;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1004,this._ctx);
	            if(la_===1) {
	                this.state = 7501;
	                this.match(MySqlParser.WHERE);
	                this.state = 7502;
	                this.expression(0);

	            }
	            break;

	        case 16:
	            localctx = new ShowOpenTablesContext(this, localctx);
	            this.enterOuterAlt(localctx, 16);
	            this.state = 7505;
	            this.match(MySqlParser.SHOW);
	            this.state = 7506;
	            this.match(MySqlParser.OPEN);
	            this.state = 7507;
	            this.match(MySqlParser.TABLES);
	            this.state = 7510;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1005,this._ctx);
	            if(la_===1) {
	                this.state = 7508;
	                localctx.schemaFormat = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===MySqlParser.FROM || _la===MySqlParser.IN)) {
	                    localctx.schemaFormat = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 7509;
	                this.uid();

	            }
	            this.state = 7513;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1006,this._ctx);
	            if(la_===1) {
	                this.state = 7512;
	                this.showFilter();

	            }
	            break;

	        case 17:
	            localctx = new ShowProfileContext(this, localctx);
	            this.enterOuterAlt(localctx, 17);
	            this.state = 7515;
	            this.match(MySqlParser.SHOW);
	            this.state = 7516;
	            this.match(MySqlParser.PROFILE);
	            this.state = 7517;
	            this.showProfileType();
	            this.state = 7522;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.COMMA) {
	                this.state = 7518;
	                this.match(MySqlParser.COMMA);
	                this.state = 7519;
	                this.showProfileType();
	                this.state = 7524;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 7528;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.FOR) {
	                this.state = 7525;
	                this.match(MySqlParser.FOR);
	                this.state = 7526;
	                this.match(MySqlParser.QUERY);
	                this.state = 7527;
	                localctx.queryCount = this.decimalLiteral();
	            }

	            this.state = 7530;
	            this.match(MySqlParser.LIMIT);
	            this.state = 7534;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1009,this._ctx);
	            if(la_===1) {
	                this.state = 7531;
	                localctx.offset = this.decimalLiteral();
	                this.state = 7532;
	                this.match(MySqlParser.COMMA);

	            }
	            this.state = 7536;
	            localctx.rowCount = this.decimalLiteral();
	            break;

	        case 18:
	            localctx = new ShowSlaveStatusContext(this, localctx);
	            this.enterOuterAlt(localctx, 18);
	            this.state = 7538;
	            this.match(MySqlParser.SHOW);
	            this.state = 7539;
	            this.match(MySqlParser.SLAVE);
	            this.state = 7540;
	            this.match(MySqlParser.STATUS);
	            this.state = 7544;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1010,this._ctx);
	            if(la_===1) {
	                this.state = 7541;
	                this.match(MySqlParser.FOR);
	                this.state = 7542;
	                this.match(MySqlParser.CHANNEL);
	                this.state = 7543;
	                this.match(MySqlParser.STRING_LITERAL);

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showStatementInceptor() {
	    let localctx = new ShowStatementInceptorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 744, MySqlParser.RULE_showStatementInceptor);
	    var _la = 0; // Token type
	    try {
	        this.state = 7634;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.DATABASES:
	        case MySqlParser.SCHEMAS:
	            localctx = new ShowInceptorDatabaseContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7548;
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.DATABASES || _la===MySqlParser.SCHEMAS)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 7551;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1012,this._ctx);
	            if(la_===1) {
	                this.state = 7549;
	                this.match(MySqlParser.LIKE);
	                this.state = 7550;
	                this.stringLiteral();

	            }
	            break;
	        case MySqlParser.MATERIALIZED:
	        case MySqlParser.METRICS:
	        case MySqlParser.SEQUENCES:
	        case MySqlParser.STREAMS:
	        case MySqlParser.TABLES:
	            localctx = new ShowInceptorTablesContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7559;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case MySqlParser.TABLES:
	                this.state = 7553;
	                this.match(MySqlParser.TABLES);
	                break;
	            case MySqlParser.MATERIALIZED:
	                this.state = 7554;
	                this.match(MySqlParser.MATERIALIZED);
	                this.state = 7555;
	                this.match(MySqlParser.VIEWS);
	                break;
	            case MySqlParser.SEQUENCES:
	                this.state = 7556;
	                this.match(MySqlParser.SEQUENCES);
	                break;
	            case MySqlParser.STREAMS:
	                this.state = 7557;
	                this.match(MySqlParser.STREAMS);
	                break;
	            case MySqlParser.METRICS:
	                this.state = 7558;
	                this.match(MySqlParser.METRICS);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 7562;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1014,this._ctx);
	            if(la_===1) {
	                this.state = 7561;
	                this.fromDatabase();

	            }
	            this.state = 7566;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1015,this._ctx);
	            if(la_===1) {
	                this.state = 7564;
	                this.match(MySqlParser.LIKE);
	                this.state = 7565;
	                this.wildUid();

	            }
	            break;
	        case MySqlParser.CURRENT:
	            localctx = new ShowInceptorCurrentContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7568;
	            this.match(MySqlParser.CURRENT);
	            this.state = 7569;
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.APP || _la===MySqlParser.APPLICATION)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case MySqlParser.APPS:
	        case MySqlParser.APPLICATIONS:
	        case MySqlParser.CACHEDMETRICS:
	        case MySqlParser.POLICYBASES:
	        case MySqlParser.POLICIES:
	        case MySqlParser.RULEBASES:
	        case MySqlParser.RULEFUNCTIONS:
	        case MySqlParser.RULES:
	        case MySqlParser.STREAMJOBS:
	            localctx = new ShowInceptorMiscContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 7570;
	            _la = this._input.LA(1);
	            if(!(((((_la - 176)) & ~0x1f) == 0 && ((1 << (_la - 176)) & ((1 << (MySqlParser.APPS - 176)) | (1 << (MySqlParser.APPLICATIONS - 176)) | (1 << (MySqlParser.CACHEDMETRICS - 176)))) !== 0) || ((((_la - 251)) & ~0x1f) == 0 && ((1 << (_la - 251)) & ((1 << (MySqlParser.POLICYBASES - 251)) | (1 << (MySqlParser.POLICIES - 251)) | (1 << (MySqlParser.RULEBASES - 251)) | (1 << (MySqlParser.RULEFUNCTIONS - 251)) | (1 << (MySqlParser.RULES - 251)))) !== 0) || _la===MySqlParser.STREAMJOBS)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 7573;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1016,this._ctx);
	            if(la_===1) {
	                this.state = 7571;
	                this.match(MySqlParser.LIKE);
	                this.state = 7572;
	                this.wildUid();

	            }
	            break;
	        case MySqlParser.COLUMNS:
	            localctx = new ShowInceptorColumnContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 7575;
	            this.match(MySqlParser.COLUMNS);
	            this.state = 7576;
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.FROM || _la===MySqlParser.IN)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 7577;
	            this.tableName();
	            this.state = 7579;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1017,this._ctx);
	            if(la_===1) {
	                this.state = 7578;
	                this.fromDatabase();

	            }
	            break;
	        case MySqlParser.FUNCTIONS:
	            localctx = new ShowInceptorFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 7581;
	            this.match(MySqlParser.FUNCTIONS);
	            this.state = 7582;
	            this.wildFuncOptional();
	            break;
	        case MySqlParser.PLSQL:
	            localctx = new ShowInceptorPlsqlContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 7583;
	            this.match(MySqlParser.PLSQL);
	            this.state = 7584;
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.FUNCTIONS || _la===MySqlParser.PACKAGES)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 7586;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1018,this._ctx);
	            if(la_===1) {
	                this.state = 7585;
	                this.wildUid();

	            }
	            break;
	        case MySqlParser.PARTITIONS:
	            localctx = new ShowInceptorPartitionContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 7588;
	            this.match(MySqlParser.PARTITIONS);
	            this.state = 7589;
	            this.tableName();
	            this.state = 7591;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1019,this._ctx);
	            if(la_===1) {
	                this.state = 7590;
	                this.partitionSpec();

	            }
	            break;
	        case MySqlParser.CREATE:
	            localctx = new ShowInceptorCreateTableContext(this, localctx);
	            this.enterOuterAlt(localctx, 9);
	            this.state = 7593;
	            this.match(MySqlParser.CREATE);
	            this.state = 7594;
	            this.match(MySqlParser.TABLE);
	            this.state = 7595;
	            this.tableName();
	            break;
	        case MySqlParser.TABLE:
	            localctx = new ShowInceptorExtendedTableContext(this, localctx);
	            this.enterOuterAlt(localctx, 10);
	            this.state = 7596;
	            this.match(MySqlParser.TABLE);
	            this.state = 7597;
	            this.match(MySqlParser.EXTENDED);
	            this.state = 7599;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.FROM || _la===MySqlParser.IN) {
	                this.state = 7598;
	                this.fromDatabase();
	            }

	            this.state = 7601;
	            this.match(MySqlParser.LIKE);
	            this.state = 7602;
	            this.wildUid();
	            this.state = 7604;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1021,this._ctx);
	            if(la_===1) {
	                this.state = 7603;
	                this.partitionSpec();

	            }
	            break;
	        case MySqlParser.TBLPROPERTIES:
	            localctx = new ShowInceptorTblPropertiesContext(this, localctx);
	            this.enterOuterAlt(localctx, 11);
	            this.state = 7606;
	            this.match(MySqlParser.TBLPROPERTIES);
	            this.state = 7607;
	            this.tableName();
	            this.state = 7612;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1022,this._ctx);
	            if(la_===1) {
	                this.state = 7608;
	                this.match(MySqlParser.LR_BRACKET);
	                this.state = 7609;
	                this.stringLiteral();
	                this.state = 7610;
	                this.match(MySqlParser.RR_BRACKET);

	            }
	            break;
	        case MySqlParser.INDEX:
	        case MySqlParser.FORMATTED:
	        case MySqlParser.INDEXES:
	            localctx = new ShowInceptorIndexContext(this, localctx);
	            this.enterOuterAlt(localctx, 12);
	            this.state = 7615;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.FORMATTED) {
	                this.state = 7614;
	                this.match(MySqlParser.FORMATTED);
	            }

	            this.state = 7617;
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.INDEX || _la===MySqlParser.INDEXES)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 7618;
	            this.match(MySqlParser.ON);
	            this.state = 7619;
	            this.wildUid();
	            this.state = 7621;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1024,this._ctx);
	            if(la_===1) {
	                this.state = 7620;
	                this.fromDatabase();

	            }
	            break;
	        case MySqlParser.COMPACT:
	            localctx = new ShowInceptorBlackListContext(this, localctx);
	            this.enterOuterAlt(localctx, 13);
	            this.state = 7623;
	            this.match(MySqlParser.COMPACT);
	            this.state = 7624;
	            this.match(MySqlParser.BLACKLIST);
	            this.state = 7625;
	            this.databaseNameAllowEmpty();
	            break;
	        case MySqlParser.CONF:
	            localctx = new ShowInceptorConfContext(this, localctx);
	            this.enterOuterAlt(localctx, 14);
	            this.state = 7626;
	            this.match(MySqlParser.CONF);
	            this.state = 7627;
	            this.stringLiteral();
	            break;
	        case MySqlParser.DATABASE:
	        case MySqlParser.COMPACTIONS:
	        case MySqlParser.TRANSACTIONS:
	            localctx = new ShowInceptorOtherContext(this, localctx);
	            this.enterOuterAlt(localctx, 15);
	            this.state = 7632;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case MySqlParser.DATABASE:
	                this.state = 7628;
	                this.match(MySqlParser.DATABASE);
	                this.state = 7629;
	                this.match(MySqlParser.LINKS);
	                break;
	            case MySqlParser.COMPACTIONS:
	                this.state = 7630;
	                this.match(MySqlParser.COMPACTIONS);
	                break;
	            case MySqlParser.TRANSACTIONS:
	                this.state = 7631;
	                this.match(MySqlParser.TRANSACTIONS);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableAssignment() {
	    let localctx = new VariableAssignmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 746, MySqlParser.RULE_variableAssignment);
	    var _la = 0; // Token type
	    try {
	        this.state = 7645;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1028,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7636;
	            this.variableClause();
	            this.state = 7637;
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.VAR_ASSIGN || _la===MySqlParser.EQUAL_SYMBOL)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 7640;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1027,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 7638;
	                this.variableExprReserved();
	                break;

	            case 2:
	                this.state = 7639;
	                this.expression(0);
	                break;

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7642;
	            this.variableClause();

	                    this.notifyErrorListeners('Please provide expression');
	                  
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableClause() {
	    let localctx = new VariableClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 748, MySqlParser.RULE_variableClause);
	    var _la = 0; // Token type
	    try {
	        this.state = 7665;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1032,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7647;
	            if (!( this.isDialect('mysql'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('mysql')");
	            }
	            this.state = 7658;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1031,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 7648;
	                this.match(MySqlParser.LOCAL_ID);
	                break;

	            case 2:
	                this.state = 7649;
	                this.match(MySqlParser.GLOBAL_ID);
	                break;

	            case 3:
	                this.state = 7655;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,1030,this._ctx);
	                if(la_===1) {
	                    this.state = 7652;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===MySqlParser.AT_SIGN) {
	                        this.state = 7650;
	                        this.match(MySqlParser.AT_SIGN);
	                        this.state = 7651;
	                        this.match(MySqlParser.AT_SIGN);
	                    }

	                    this.state = 7654;
	                    _la = this._input.LA(1);
	                    if(!(_la===MySqlParser.GLOBAL || _la===MySqlParser.LOCAL || _la===MySqlParser.SESSION)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }

	                }
	                this.state = 7657;
	                this.uid();
	                break;

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7660;
	            if (!( this.isDialect('inceptor'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('inceptor')");
	            }
	            this.state = 7661;
	            this.variableFullId();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7662;
	            this.emptyElement();

	                    this.notifyErrorListeners('Please provide variable');
	                  
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableFullId() {
	    let localctx = new VariableFullIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 750, MySqlParser.RULE_variableFullId);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7667;
	        this.uid();
	        this.state = 7671;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,1033,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 7668;
	                this.dottedId(); 
	            }
	            this.state = 7673;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,1033,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableExprReserved() {
	    let localctx = new VariableExprReservedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 752, MySqlParser.RULE_variableExprReserved);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7674;
	        if (!( this.isDialect('inceptor'))) {
	            throw new antlr4.error.FailedPredicateException(this, "this.isDialect('inceptor')");
	        }
	        this.state = 7675;
	        _la = this._input.LA(1);
	        if(!(_la===MySqlParser.DB2 || _la===MySqlParser.INCEPTOR || _la===MySqlParser.NONSTRICT || _la===MySqlParser.ORACLE)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showCommonEntity() {
	    let localctx = new ShowCommonEntityContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 754, MySqlParser.RULE_showCommonEntity);
	    var _la = 0; // Token type
	    try {
	        this.state = 7690;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.CHARACTER:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7677;
	            this.match(MySqlParser.CHARACTER);
	            this.state = 7678;
	            this.match(MySqlParser.SET);
	            break;
	        case MySqlParser.COLLATION:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7679;
	            this.match(MySqlParser.COLLATION);
	            break;
	        case MySqlParser.DATABASES:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7680;
	            this.match(MySqlParser.DATABASES);
	            break;
	        case MySqlParser.SCHEMAS:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 7681;
	            this.match(MySqlParser.SCHEMAS);
	            break;
	        case MySqlParser.FUNCTION:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 7682;
	            this.match(MySqlParser.FUNCTION);
	            this.state = 7683;
	            this.match(MySqlParser.STATUS);
	            break;
	        case MySqlParser.PROCEDURE:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 7684;
	            this.match(MySqlParser.PROCEDURE);
	            this.state = 7685;
	            this.match(MySqlParser.STATUS);
	            break;
	        case MySqlParser.GLOBAL:
	        case MySqlParser.SESSION:
	        case MySqlParser.STATUS:
	        case MySqlParser.VARIABLES:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 7687;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.GLOBAL || _la===MySqlParser.SESSION) {
	                this.state = 7686;
	                _la = this._input.LA(1);
	                if(!(_la===MySqlParser.GLOBAL || _la===MySqlParser.SESSION)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 7689;
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.STATUS || _la===MySqlParser.VARIABLES)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showFilter() {
	    let localctx = new ShowFilterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 756, MySqlParser.RULE_showFilter);
	    try {
	        this.state = 7696;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.LIKE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7692;
	            this.match(MySqlParser.LIKE);
	            this.state = 7693;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case MySqlParser.WHERE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7694;
	            this.match(MySqlParser.WHERE);
	            this.state = 7695;
	            this.expression(0);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showGlobalInfoClause() {
	    let localctx = new ShowGlobalInfoClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 758, MySqlParser.RULE_showGlobalInfoClause);
	    var _la = 0; // Token type
	    try {
	        this.state = 7715;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.ENGINES:
	        case MySqlParser.STORAGE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7699;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.STORAGE) {
	                this.state = 7698;
	                this.match(MySqlParser.STORAGE);
	            }

	            this.state = 7701;
	            this.match(MySqlParser.ENGINES);
	            break;
	        case MySqlParser.MASTER:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7702;
	            this.match(MySqlParser.MASTER);
	            this.state = 7703;
	            this.match(MySqlParser.STATUS);
	            break;
	        case MySqlParser.PLUGINS:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7704;
	            this.match(MySqlParser.PLUGINS);
	            break;
	        case MySqlParser.PRIVILEGES:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 7705;
	            this.match(MySqlParser.PRIVILEGES);
	            break;
	        case MySqlParser.FULL:
	        case MySqlParser.PROCESSLIST:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 7707;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.FULL) {
	                this.state = 7706;
	                this.match(MySqlParser.FULL);
	            }

	            this.state = 7709;
	            this.match(MySqlParser.PROCESSLIST);
	            break;
	        case MySqlParser.PROFILES:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 7710;
	            this.match(MySqlParser.PROFILES);
	            break;
	        case MySqlParser.SLAVE:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 7711;
	            this.match(MySqlParser.SLAVE);
	            this.state = 7712;
	            this.match(MySqlParser.HOSTS);
	            break;
	        case MySqlParser.AUTHORS:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 7713;
	            this.match(MySqlParser.AUTHORS);
	            break;
	        case MySqlParser.CONTRIBUTORS:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 7714;
	            this.match(MySqlParser.CONTRIBUTORS);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showSchemaEntity() {
	    let localctx = new ShowSchemaEntityContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 760, MySqlParser.RULE_showSchemaEntity);
	    var _la = 0; // Token type
	    try {
	        this.state = 7725;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.EVENTS:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7717;
	            this.match(MySqlParser.EVENTS);
	            break;
	        case MySqlParser.TABLE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7718;
	            this.match(MySqlParser.TABLE);
	            this.state = 7719;
	            this.match(MySqlParser.STATUS);
	            break;
	        case MySqlParser.FULL:
	        case MySqlParser.TABLES:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7721;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.FULL) {
	                this.state = 7720;
	                this.match(MySqlParser.FULL);
	            }

	            this.state = 7723;
	            this.match(MySqlParser.TABLES);
	            break;
	        case MySqlParser.TRIGGERS:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 7724;
	            this.match(MySqlParser.TRIGGERS);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showProfileType() {
	    let localctx = new ShowProfileTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 762, MySqlParser.RULE_showProfileType);
	    try {
	        this.state = 7739;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.ALL:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7727;
	            this.match(MySqlParser.ALL);
	            break;
	        case MySqlParser.BLOCK:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7728;
	            this.match(MySqlParser.BLOCK);
	            this.state = 7729;
	            this.match(MySqlParser.IO);
	            break;
	        case MySqlParser.CONTEXT:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7730;
	            this.match(MySqlParser.CONTEXT);
	            this.state = 7731;
	            this.match(MySqlParser.SWITCHES);
	            break;
	        case MySqlParser.CPU:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 7732;
	            this.match(MySqlParser.CPU);
	            break;
	        case MySqlParser.IPC:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 7733;
	            this.match(MySqlParser.IPC);
	            break;
	        case MySqlParser.MEMORY:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 7734;
	            this.match(MySqlParser.MEMORY);
	            break;
	        case MySqlParser.PAGE:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 7735;
	            this.match(MySqlParser.PAGE);
	            this.state = 7736;
	            this.match(MySqlParser.FAULTS);
	            break;
	        case MySqlParser.SOURCE:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 7737;
	            this.match(MySqlParser.SOURCE);
	            break;
	        case MySqlParser.SWAPS:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 7738;
	            this.match(MySqlParser.SWAPS);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fromDatabase() {
	    let localctx = new FromDatabaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 764, MySqlParser.RULE_fromDatabase);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7741;
	        _la = this._input.LA(1);
	        if(!(_la===MySqlParser.FROM || _la===MySqlParser.IN)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 7742;
	        this.databaseName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	addJarStatement() {
	    let localctx = new AddJarStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 766, MySqlParser.RULE_addJarStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7744;
	        this.match(MySqlParser.ADD);
	        this.state = 7745;
	        _la = this._input.LA(1);
	        if(!(_la===MySqlParser.JAR || _la===MySqlParser.JARS)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 7748;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.DIVIDE:
	            this.state = 7746;
	            this.filePath();
	            break;
	        case MySqlParser.START_NATIONAL_STRING_LITERAL:
	        case MySqlParser.STRING_LITERAL:
	        case MySqlParser.STRING_CHARSET_NAME:
	            this.state = 7747;
	            this.stringLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listJarStatement() {
	    let localctx = new ListJarStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 768, MySqlParser.RULE_listJarStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7750;
	        this.match(MySqlParser.LIST);
	        this.state = 7751;
	        _la = this._input.LA(1);
	        if(!(_la===MySqlParser.JAR || _la===MySqlParser.JARS)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	binlogStatement() {
	    let localctx = new BinlogStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 770, MySqlParser.RULE_binlogStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7753;
	        this.match(MySqlParser.BINLOG);
	        this.state = 7754;
	        this.match(MySqlParser.STRING_LITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cacheIndexStatement() {
	    let localctx = new CacheIndexStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 772, MySqlParser.RULE_cacheIndexStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7756;
	        this.match(MySqlParser.CACHE);
	        this.state = 7757;
	        this.match(MySqlParser.INDEX);
	        this.state = 7758;
	        this.tableIndexes();
	        this.state = 7763;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MySqlParser.COMMA) {
	            this.state = 7759;
	            this.match(MySqlParser.COMMA);
	            this.state = 7760;
	            this.tableIndexes();
	            this.state = 7765;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 7773;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.PARTITION) {
	            this.state = 7766;
	            this.match(MySqlParser.PARTITION);
	            this.state = 7767;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 7770;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1045,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 7768;
	                this.uidList();
	                break;

	            case 2:
	                this.state = 7769;
	                this.match(MySqlParser.ALL);
	                break;

	            }
	            this.state = 7772;
	            this.match(MySqlParser.RR_BRACKET);
	        }

	        this.state = 7775;
	        this.match(MySqlParser.IN);
	        this.state = 7776;
	        localctx.schema = this.uid();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	flushStatement() {
	    let localctx = new FlushStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 774, MySqlParser.RULE_flushStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7778;
	        this.match(MySqlParser.FLUSH);
	        this.state = 7780;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.NO_WRITE_TO_BINLOG || _la===MySqlParser.LOCAL) {
	            this.state = 7779;
	            localctx.flushFormat = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.NO_WRITE_TO_BINLOG || _la===MySqlParser.LOCAL)) {
	                localctx.flushFormat = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 7782;
	        this.flushOption();
	        this.state = 7787;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,1048,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 7783;
	                this.match(MySqlParser.COMMA);
	                this.state = 7784;
	                this.flushOption(); 
	            }
	            this.state = 7789;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,1048,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	killStatement() {
	    let localctx = new KillStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 776, MySqlParser.RULE_killStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7790;
	        this.match(MySqlParser.KILL);
	        this.state = 7792;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.CONNECTION || _la===MySqlParser.QUERY) {
	            this.state = 7791;
	            localctx.connectionFormat = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.CONNECTION || _la===MySqlParser.QUERY)) {
	                localctx.connectionFormat = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 7795; 
	        this._errHandler.sync(this);
	        let _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 7794;
	        		this.decimalLiteral();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 7797; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,1050, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	loadIndexIntoCache() {
	    let localctx = new LoadIndexIntoCacheContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 778, MySqlParser.RULE_loadIndexIntoCache);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7799;
	        this.match(MySqlParser.LOAD);
	        this.state = 7800;
	        this.match(MySqlParser.INDEX);
	        this.state = 7801;
	        this.match(MySqlParser.INTO);
	        this.state = 7802;
	        this.match(MySqlParser.CACHE);
	        this.state = 7803;
	        this.loadedTableIndexes();
	        this.state = 7808;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,1051,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 7804;
	                this.match(MySqlParser.COMMA);
	                this.state = 7805;
	                this.loadedTableIndexes(); 
	            }
	            this.state = 7810;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,1051,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resetStatement() {
	    let localctx = new ResetStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 780, MySqlParser.RULE_resetStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7811;
	        this.match(MySqlParser.RESET);
	        this.state = 7812;
	        this.match(MySqlParser.QUERY);
	        this.state = 7813;
	        this.match(MySqlParser.CACHE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	shutdownStatement() {
	    let localctx = new ShutdownStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 782, MySqlParser.RULE_shutdownStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7815;
	        this.match(MySqlParser.SHUTDOWN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setDelimiter() {
	    let localctx = new SetDelimiterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 784, MySqlParser.RULE_setDelimiter);
	    try {
	        this.state = 7826;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1052,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new SetDelimiterInceptorContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7817;
	            if (!( this.isDialect('inceptor'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('inceptor')");
	            }
	            this.state = 7818;
	            this.match(MySqlParser.EXCLAMATION_SET);
	            this.state = 7819;
	            this.match(MySqlParser.PLSQLUSESLASH);
	            this.state = 7820;
	            this.booleanLiteral();
	            break;

	        case 2:
	            localctx = new SetDelimiterMysqlContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7821;
	            if (!( this.isDialect('mysql'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('mysql')");
	            }
	            this.state = 7822;
	            this.match(MySqlParser.DELIMITER);
	            this.state = 7823;
	            localctx.token = this.setDelimiterToken();

	                    localctx.delimiter = (localctx.token===null ? null : this._input.getText(new antlr4.Interval(localctx.token.start,localctx.token.stop)));
	                  
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setDelimiterToken() {
	    let localctx = new SetDelimiterTokenContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 786, MySqlParser.RULE_setDelimiterToken);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7828;
	        this.matchWildcard();
	        this.state = 7830;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1053,this._ctx);
	        if(la_===1) {
	            this.state = 7829;
	            this.matchWildcard();

	        }
	        this.state = 7833;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1054,this._ctx);
	        if(la_===1) {
	            this.state = 7832;
	            this.matchWildcard();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setPlsqlDialect() {
	    let localctx = new SetPlsqlDialectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 788, MySqlParser.RULE_setPlsqlDialect);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7835;
	        this.match(MySqlParser.EXCLAMATION_SET);
	        this.state = 7836;
	        this.match(MySqlParser.PLSQLCLIENTDIALECT);
	        this.state = 7837;
	        this.setPlsqlDialectId();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setPlsqlDialectId() {
	    let localctx = new SetPlsqlDialectIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 790, MySqlParser.RULE_setPlsqlDialectId);
	    try {
	        this.state = 7843;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1055,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7839;
	            this.uid();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7840;
	            this.emptyElement();
	            this.notifyErrorListeners('Please provide dialect name');
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableIndexes() {
	    let localctx = new TableIndexesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 792, MySqlParser.RULE_tableIndexes);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7845;
	        this.tableName();
	        this.state = 7853;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.INDEX || _la===MySqlParser.KEY || _la===MySqlParser.LR_BRACKET) {
	            this.state = 7847;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.INDEX || _la===MySqlParser.KEY) {
	                this.state = 7846;
	                localctx.indexFormat = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===MySqlParser.INDEX || _la===MySqlParser.KEY)) {
	                    localctx.indexFormat = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 7849;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 7850;
	            this.uidList();
	            this.state = 7851;
	            this.match(MySqlParser.RR_BRACKET);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	flushOption() {
	    let localctx = new FlushOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 794, MySqlParser.RULE_flushOption);
	    var _la = 0; // Token type
	    try {
	        this.state = 7885;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1063,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new SimpleFlushOptionContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7873;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case MySqlParser.DES_KEY_FILE:
	                this.state = 7855;
	                this.match(MySqlParser.DES_KEY_FILE);
	                break;
	            case MySqlParser.HOSTS:
	                this.state = 7856;
	                this.match(MySqlParser.HOSTS);
	                break;
	            case MySqlParser.BINARY:
	            case MySqlParser.ENGINE:
	            case MySqlParser.ERROR:
	            case MySqlParser.GENERAL:
	            case MySqlParser.LOGS:
	            case MySqlParser.RELAY:
	            case MySqlParser.SLOW:
	                this.state = 7858;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===MySqlParser.BINARY || ((((_la - 490)) & ~0x1f) == 0 && ((1 << (_la - 490)) & ((1 << (MySqlParser.ENGINE - 490)) | (1 << (MySqlParser.ERROR - 490)) | (1 << (MySqlParser.GENERAL - 490)))) !== 0) || _la===MySqlParser.RELAY || _la===MySqlParser.SLOW) {
	                    this.state = 7857;
	                    _la = this._input.LA(1);
	                    if(!(_la===MySqlParser.BINARY || ((((_la - 490)) & ~0x1f) == 0 && ((1 << (_la - 490)) & ((1 << (MySqlParser.ENGINE - 490)) | (1 << (MySqlParser.ERROR - 490)) | (1 << (MySqlParser.GENERAL - 490)))) !== 0) || _la===MySqlParser.RELAY || _la===MySqlParser.SLOW)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                }

	                this.state = 7860;
	                this.match(MySqlParser.LOGS);
	                break;
	            case MySqlParser.OPTIMIZER_COSTS:
	                this.state = 7861;
	                this.match(MySqlParser.OPTIMIZER_COSTS);
	                break;
	            case MySqlParser.PRIVILEGES:
	                this.state = 7862;
	                this.match(MySqlParser.PRIVILEGES);
	                break;
	            case MySqlParser.QUERY:
	                this.state = 7863;
	                this.match(MySqlParser.QUERY);
	                this.state = 7864;
	                this.match(MySqlParser.CACHE);
	                break;
	            case MySqlParser.STATUS:
	                this.state = 7865;
	                this.match(MySqlParser.STATUS);
	                break;
	            case MySqlParser.USER_RESOURCES:
	                this.state = 7866;
	                this.match(MySqlParser.USER_RESOURCES);
	                break;
	            case MySqlParser.TABLES:
	                this.state = 7867;
	                this.match(MySqlParser.TABLES);
	                this.state = 7871;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,1059,this._ctx);
	                if(la_===1) {
	                    this.state = 7868;
	                    this.match(MySqlParser.WITH);
	                    this.state = 7869;
	                    this.match(MySqlParser.READ);
	                    this.state = 7870;
	                    this.match(MySqlParser.LOCK);

	                }
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 2:
	            localctx = new ChannelFlushOptionContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7875;
	            this.match(MySqlParser.RELAY);
	            this.state = 7876;
	            this.match(MySqlParser.LOGS);
	            this.state = 7878;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1061,this._ctx);
	            if(la_===1) {
	                this.state = 7877;
	                this.channelOption();

	            }
	            break;

	        case 3:
	            localctx = new TableFlushOptionContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7880;
	            this.match(MySqlParser.TABLES);
	            this.state = 7881;
	            this.tables();
	            this.state = 7883;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1062,this._ctx);
	            if(la_===1) {
	                this.state = 7882;
	                this.flushTableOption();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	flushTableOption() {
	    let localctx = new FlushTableOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 796, MySqlParser.RULE_flushTableOption);
	    try {
	        this.state = 7892;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.WITH:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7887;
	            this.match(MySqlParser.WITH);
	            this.state = 7888;
	            this.match(MySqlParser.READ);
	            this.state = 7889;
	            this.match(MySqlParser.LOCK);
	            break;
	        case MySqlParser.FOR:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7890;
	            this.match(MySqlParser.FOR);
	            this.state = 7891;
	            this.match(MySqlParser.EXPORT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	loadedTableIndexes() {
	    let localctx = new LoadedTableIndexesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 798, MySqlParser.RULE_loadedTableIndexes);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7894;
	        this.tableName();
	        this.state = 7902;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1066,this._ctx);
	        if(la_===1) {
	            this.state = 7895;
	            this.match(MySqlParser.PARTITION);
	            this.state = 7896;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 7899;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1065,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 7897;
	                localctx.partitionList = this.uidList();
	                break;

	            case 2:
	                this.state = 7898;
	                this.match(MySqlParser.ALL);
	                break;

	            }
	            this.state = 7901;
	            this.match(MySqlParser.RR_BRACKET);

	        }
	        this.state = 7911;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1068,this._ctx);
	        if(la_===1) {
	            this.state = 7905;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.INDEX || _la===MySqlParser.KEY) {
	                this.state = 7904;
	                localctx.indexFormat = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===MySqlParser.INDEX || _la===MySqlParser.KEY)) {
	                    localctx.indexFormat = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 7907;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 7908;
	            localctx.indexList = this.uidList();
	            this.state = 7909;
	            this.match(MySqlParser.RR_BRACKET);

	        }
	        this.state = 7915;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1069,this._ctx);
	        if(la_===1) {
	            this.state = 7913;
	            this.match(MySqlParser.IGNORE);
	            this.state = 7914;
	            this.match(MySqlParser.LEAVES);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	describeStatement() {
	    let localctx = new DescribeStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 800, MySqlParser.RULE_describeStatement);
	    var _la = 0; // Token type
	    try {
	        this.state = 7922;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1070,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7917;
	            if (!( this.isDialect('mysql'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('mysql')");
	            }
	            this.state = 7918;
	            this.describeStatementMysql();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7919;
	            if (!( this.isDialect('inceptor'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('inceptor')");
	            }
	            this.state = 7920;
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.DESC || _la===MySqlParser.DESCRIBE)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 7921;
	            this.describeStatementInceptor();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	describeStatementMysql() {
	    let localctx = new DescribeStatementMysqlContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 802, MySqlParser.RULE_describeStatementMysql);
	    try {
	        this.state = 7926;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1071,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7924;
	            this.simpleDescribeStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7925;
	            this.fullDescribeStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleDescribeStatement() {
	    let localctx = new SimpleDescribeStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 804, MySqlParser.RULE_simpleDescribeStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7928;
	        localctx.command = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(((((_la - 41)) & ~0x1f) == 0 && ((1 << (_la - 41)) & ((1 << (MySqlParser.DESC - 41)) | (1 << (MySqlParser.DESCRIBE - 41)) | (1 << (MySqlParser.EXPLAIN - 41)))) !== 0))) {
	            localctx.command = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 7929;
	        this.tableName();
	        this.state = 7932;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1072,this._ctx);
	        if(la_===1) {
	            this.state = 7930;
	            localctx.column = this.uid();

	        } else if(la_===2) {
	            this.state = 7931;
	            localctx.pattern = this.match(MySqlParser.STRING_LITERAL);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fullDescribeStatement() {
	    let localctx = new FullDescribeStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 806, MySqlParser.RULE_fullDescribeStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7934;
	        localctx.command = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(((((_la - 41)) & ~0x1f) == 0 && ((1 << (_la - 41)) & ((1 << (MySqlParser.DESC - 41)) | (1 << (MySqlParser.DESCRIBE - 41)) | (1 << (MySqlParser.EXPLAIN - 41)))) !== 0))) {
	            localctx.command = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 7938;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1073,this._ctx);
	        if(la_===1) {
	            this.state = 7935;
	            localctx.formatType = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.EXTENDED || _la===MySqlParser.PARTITIONS || _la===MySqlParser.FORMAT)) {
	                localctx.formatType = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 7936;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 7937;
	            localctx.formatValue = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.JSON || _la===MySqlParser.TRADITIONAL)) {
	                localctx.formatValue = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }

	        }
	        this.state = 7940;
	        this.describeObjectClause();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	describeStatementInceptor() {
	    let localctx = new DescribeStatementInceptorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 808, MySqlParser.RULE_describeStatementInceptor);
	    var _la = 0; // Token type
	    try {
	        this.state = 7988;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1084,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new DescribeInceptorDatabaseContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7942;
	            this.match(MySqlParser.DATABASE);
	            this.state = 7947;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1075,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 7943;
	                this.match(MySqlParser.LINK);
	                break;

	            case 2:
	                this.state = 7945;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,1074,this._ctx);
	                if(la_===1) {
	                    this.state = 7944;
	                    this.match(MySqlParser.EXTENDED);

	                }
	                break;

	            }
	            this.state = 7949;
	            this.databaseName();
	            break;

	        case 2:
	            localctx = new DescribeInceptorIndexContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7950;
	            this.match(MySqlParser.INDEX);
	            this.state = 7952;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1076,this._ctx);
	            if(la_===1) {
	                this.state = 7951;
	                this.match(MySqlParser.FORMATTED);

	            }
	            this.state = 7954;
	            this.uid();
	            this.state = 7955;
	            this.match(MySqlParser.ON);
	            this.state = 7956;
	            this.tableName();
	            break;

	        case 3:
	            localctx = new DescribeInceptorFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7958;
	            this.match(MySqlParser.FUNCTION);
	            this.state = 7960;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1077,this._ctx);
	            if(la_===1) {
	                this.state = 7959;
	                this.match(MySqlParser.EXTENDED);

	            }
	            this.state = 7964;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1078,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 7962;
	                this.udfName();
	                break;

	            case 2:
	                this.state = 7963;
	                this.functionNameBaseExtra();
	                break;

	            }
	            break;

	        case 4:
	            localctx = new DescribeInceptorProcedureContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 7966;
	            this.match(MySqlParser.PLSQL);
	            this.state = 7967;
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.PACKAGE || _la===MySqlParser.FUNCTION)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 7969;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1079,this._ctx);
	            if(la_===1) {
	                this.state = 7968;
	                this.match(MySqlParser.EXTENDED);

	            }
	            this.state = 7971;
	            this.fullId();
	            break;

	        case 5:
	            localctx = new DescribeInceptorMiscContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 7972;
	            _la = this._input.LA(1);
	            if(!(((((_la - 174)) & ~0x1f) == 0 && ((1 << (_la - 174)) & ((1 << (MySqlParser.APP - 174)) | (1 << (MySqlParser.APPLICATION - 174)) | (1 << (MySqlParser.CACHEDMETRIC - 174)))) !== 0) || ((((_la - 250)) & ~0x1f) == 0 && ((1 << (_la - 250)) & ((1 << (MySqlParser.POLICY - 250)) | (1 << (MySqlParser.RULE - 250)) | (1 << (MySqlParser.RULEFUNCTION - 250)))) !== 0) || _la===MySqlParser.STREAMJOB)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 7973;
	            this.uid();
	            break;

	        case 6:
	            localctx = new DescribeInceptorTableContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 7975;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1080,this._ctx);
	            if(la_===1) {
	                this.state = 7974;
	                _la = this._input.LA(1);
	                if(!(_la===MySqlParser.FORMATTED || _la===MySqlParser.PRETTY || _la===MySqlParser.EXTENDED)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }

	            }
	            this.state = 7979;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1081,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 7977;
	                this.prefixedColumnNameOptional();
	                break;

	            case 2:
	                this.state = 7978;
	                this.stringLiteral();
	                break;

	            }
	            this.state = 7982;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1082,this._ctx);
	            if(la_===1) {
	                this.state = 7981;
	                this.partitionSpec();

	            }
	            break;

	        case 7:
	            localctx = new DescribeInceptorTableSuggesterContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 7985;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1083,this._ctx);
	            if(la_===1) {
	                this.state = 7984;
	                _la = this._input.LA(1);
	                if(!(_la===MySqlParser.FORMATTED || _la===MySqlParser.PRETTY || _la===MySqlParser.EXTENDED)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }

	            }
	            this.state = 7987;
	            this.uid();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	helpStatement() {
	    let localctx = new HelpStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 810, MySqlParser.RULE_helpStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7990;
	        this.match(MySqlParser.HELP);
	        this.state = 7991;
	        this.match(MySqlParser.STRING_LITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	useStatement() {
	    let localctx = new UseStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 812, MySqlParser.RULE_useStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7993;
	        this.match(MySqlParser.USE);
	        this.state = 7994;
	        this.databaseName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	describeObjectClause() {
	    let localctx = new DescribeObjectClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 814, MySqlParser.RULE_describeObjectClause);
	    try {
	        this.state = 8006;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1086,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new DescribeStatementsContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8001;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1085,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 7996;
	                this.selectStatement();
	                break;

	            case 2:
	                this.state = 7997;
	                this.deleteStatement();
	                break;

	            case 3:
	                this.state = 7998;
	                this.insertStatement();
	                break;

	            case 4:
	                this.state = 7999;
	                this.replaceStatement();
	                break;

	            case 5:
	                this.state = 8000;
	                this.updateStatement();
	                break;

	            }
	            break;

	        case 2:
	            localctx = new DescribeConnectionContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8003;
	            this.match(MySqlParser.FOR);
	            this.state = 8004;
	            this.match(MySqlParser.CONNECTION);
	            this.state = 8005;
	            this.uid();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tablePartitionedBy() {
	    let localctx = new TablePartitionedByContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 816, MySqlParser.RULE_tablePartitionedBy);
	    var _la = 0; // Token type
	    try {
	        this.state = 8042;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1091,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8008;
	            this.match(MySqlParser.PARTITIONED);
	            this.state = 8009;
	            this.match(MySqlParser.BY);
	            this.state = 8010;
	            this.createDefinitions();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8011;
	            this.match(MySqlParser.PARTITIONED);
	            this.state = 8012;
	            this.match(MySqlParser.BY);
	            this.state = 8013;
	            this.match(MySqlParser.RANGE);
	            this.state = 8019;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1087,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 8014;
	                this.createDefinitions();
	                break;

	            case 2:
	                this.state = 8015;
	                this.match(MySqlParser.LR_BRACKET);
	                this.state = 8016;
	                this.uidList();
	                this.state = 8017;
	                this.match(MySqlParser.RR_BRACKET);
	                break;

	            }
	            this.state = 8027;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1088,this._ctx);
	            if(la_===1) {
	                this.state = 8021;
	                this.match(MySqlParser.INTERVAL);
	                this.state = 8022;
	                this.match(MySqlParser.LR_BRACKET);
	                this.state = 8023;
	                this.constant();

	            } else if(la_===2) {
	                this.state = 8024;
	                this.functionCall();
	                this.state = 8025;
	                this.match(MySqlParser.RR_BRACKET);

	            }
	            this.state = 8040;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1090,this._ctx);
	            if(la_===1) {
	                this.state = 8029;
	                this.match(MySqlParser.LR_BRACKET);
	                this.state = 8030;
	                this.rangePartition();
	                this.state = 8035;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===MySqlParser.COMMA) {
	                    this.state = 8031;
	                    this.match(MySqlParser.COMMA);
	                    this.state = 8032;
	                    this.rangePartition();
	                    this.state = 8037;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 8038;
	                this.match(MySqlParser.RR_BRACKET);

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropPartitionAtom() {
	    let localctx = new DropPartitionAtomContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 818, MySqlParser.RULE_dropPartitionAtom);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8044;
	        this.uid();
	        this.state = 8045;
	        this.comparisonOperator();
	        this.state = 8046;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rangePartition() {
	    let localctx = new RangePartitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 820, MySqlParser.RULE_rangePartition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8048;
	        this.match(MySqlParser.PARTITION);
	        this.state = 8049;
	        this.uid();
	        this.state = 8050;
	        this.match(MySqlParser.VALUES);
	        this.state = 8051;
	        this.match(MySqlParser.LESS);
	        this.state = 8052;
	        this.match(MySqlParser.THAN);
	        this.state = 8053;
	        this.match(MySqlParser.LR_BRACKET);
	        this.state = 8054;
	        this.partitionDefinerAtom();
	        this.state = 8059;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MySqlParser.COMMA) {
	            this.state = 8055;
	            this.match(MySqlParser.COMMA);
	            this.state = 8056;
	            this.partitionDefinerAtom();
	            this.state = 8061;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 8062;
	        this.match(MySqlParser.RR_BRACKET);
	        this.state = 8064;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1093,this._ctx);
	        if(la_===1) {
	            this.state = 8063;
	            this.locationDefinition();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partitionPlus() {
	    let localctx = new PartitionPlusContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 822, MySqlParser.RULE_partitionPlus);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8066;
	        this.partitionSpec();
	        this.state = 8068;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1094,this._ctx);
	        if(la_===1) {
	            this.state = 8067;
	            this.locationDefinition();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partitionSpec() {
	    let localctx = new PartitionSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 824, MySqlParser.RULE_partitionSpec);
	    try {
	        this.state = 8072;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1095,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8070;
	            this.partitionSpecList();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8071;
	            this.partitionSpecMap();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partitionSpecList() {
	    let localctx = new PartitionSpecListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 826, MySqlParser.RULE_partitionSpecList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8074;
	        this.match(MySqlParser.PARTITION);
	        this.state = 8075;
	        this.uidList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partitionSpecMap() {
	    let localctx = new PartitionSpecMapContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 828, MySqlParser.RULE_partitionSpecMap);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8077;
	        this.match(MySqlParser.PARTITION);
	        this.state = 8078;
	        this.match(MySqlParser.LR_BRACKET);
	        this.state = 8079;
	        this.idValueProperties();
	        this.state = 8080;
	        this.match(MySqlParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fullId() {
	    let localctx = new FullIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 830, MySqlParser.RULE_fullId);
	    try {
	        this.state = 8092;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1097,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8082;
	            this.uid();
	            this.state = 8086;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1096,this._ctx);
	            if(la_===1) {
	                this.state = 8083;
	                this.match(MySqlParser.DOT_ID);

	            } else if(la_===2) {
	                this.state = 8084;
	                this.match(MySqlParser.DOT);
	                this.state = 8085;
	                this.uid();

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8088;
	            this.uid();
	            this.state = 8089;
	            this.match(MySqlParser.DOT);
	            this.notifyErrorListeners('Please provide complete name');
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableName() {
	    let localctx = new TableNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 832, MySqlParser.RULE_tableName);
	    try {
	        this.state = 8098;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1098,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8094;
	            this.fullId();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8095;
	            this.emptyElement();
	            this.notifyErrorListeners('Please provide full name');
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	viewName() {
	    let localctx = new ViewNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 834, MySqlParser.RULE_viewName);
	    try {
	        this.state = 8104;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1099,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8100;
	            this.fullId();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8101;
	            this.emptyElement();
	            this.notifyErrorListeners('Please provide view name');
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tripleId() {
	    let localctx = new TripleIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 836, MySqlParser.RULE_tripleId);
	    try {
	        this.state = 8123;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1103,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8106;
	            this.uid();
	            this.state = 8111;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1101,this._ctx);
	            if(la_===1) {
	                this.state = 8107;
	                this.dottedId();
	                this.state = 8109;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,1100,this._ctx);
	                if(la_===1) {
	                    this.state = 8108;
	                    this.dottedId();

	                }

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8113;
	            this.uid();
	            this.state = 8117;
	            this._errHandler.sync(this);
	            let _alt = this._interp.adaptivePredict(this._input,1102,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 8114;
	                    this.dottedId(); 
	                }
	                this.state = 8119;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,1102,this._ctx);
	            }

	            this.state = 8120;
	            this.match(MySqlParser.DOT);
	            this.notifyErrorListeners('Please provide complete column name');
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnUid() {
	    let localctx = new ColumnUidContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 838, MySqlParser.RULE_columnUid);
	    try {
	        this.state = 8129;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1104,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8125;
	            this.uid();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8126;
	            this.emptyElement();
	            this.notifyErrorListeners('Please provide column name');
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fullColumnNameOptional() {
	    let localctx = new FullColumnNameOptionalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 840, MySqlParser.RULE_fullColumnNameOptional);
	    try {
	        this.state = 8135;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1105,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8131;
	            this.fullColumnName();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8132;
	            this.emptyElement();

	                    this.notifyErrorListeners('Please provide column');
	                  
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fullColumnName() {
	    let localctx = new FullColumnNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 842, MySqlParser.RULE_fullColumnName);
	    try {
	        this.state = 8154;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1109,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8137;
	            this.uid();
	            this.state = 8142;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1107,this._ctx);
	            if(la_===1) {
	                this.state = 8138;
	                this.dottedId();
	                this.state = 8140;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,1106,this._ctx);
	                if(la_===1) {
	                    this.state = 8139;
	                    this.dottedId();

	                }

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8144;
	            this.uid();
	            this.state = 8148;
	            this._errHandler.sync(this);
	            let _alt = this._interp.adaptivePredict(this._input,1108,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 8145;
	                    this.dottedId(); 
	                }
	                this.state = 8150;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,1108,this._ctx);
	            }

	            this.state = 8151;
	            this.match(MySqlParser.DOT);
	            this.notifyErrorListeners('Please provide complete column name');
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	prefixedColumnNameOptional() {
	    let localctx = new PrefixedColumnNameOptionalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 844, MySqlParser.RULE_prefixedColumnNameOptional);
	    try {
	        this.state = 8160;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1110,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8156;
	            this.prefixedColumnName();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8157;
	            this.emptyElement();

	                    this.notifyErrorListeners('Please provide column');
	                  
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	prefixedColumnName() {
	    let localctx = new PrefixedColumnNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 846, MySqlParser.RULE_prefixedColumnName);
	    try {
	        this.state = 8177;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1113,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8162;
	            this.uid();
	            this.state = 8163;
	            this.dottedId();
	            this.state = 8165;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1111,this._ctx);
	            if(la_===1) {
	                this.state = 8164;
	                this.dottedId();

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8167;
	            this.uid();
	            this.state = 8171;
	            this._errHandler.sync(this);
	            let _alt = this._interp.adaptivePredict(this._input,1112,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 8168;
	                    this.dottedId(); 
	                }
	                this.state = 8173;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,1112,this._ctx);
	            }

	            this.state = 8174;
	            this.match(MySqlParser.DOT);
	            this.notifyErrorListeners('Please provide complete column name');
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	funcName() {
	    let localctx = new FuncNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 848, MySqlParser.RULE_funcName);
	    try {
	        this.state = 8183;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1114,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8179;
	            this.fullId();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8180;
	            this.emptyElement();
	            this.notifyErrorListeners('Please provide function name');
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	udfName() {
	    let localctx = new UdfNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 850, MySqlParser.RULE_udfName);
	    try {
	        this.state = 8189;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1115,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8185;
	            this.uid();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8186;
	            this.emptyElement();
	            this.notifyErrorListeners('Please provide function name');
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procName() {
	    let localctx = new ProcNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 852, MySqlParser.RULE_procName);
	    try {
	        this.state = 8195;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1116,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8191;
	            this.fullId();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8192;
	            this.emptyElement();
	            this.notifyErrorListeners('Please provide procedure name');
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	packName() {
	    let localctx = new PackNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 854, MySqlParser.RULE_packName);
	    try {
	        this.state = 8201;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1117,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8197;
	            this.fullId();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8198;
	            this.emptyElement();
	            this.notifyErrorListeners('Please provide package name');
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	funcColumnName() {
	    let localctx = new FuncColumnNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 856, MySqlParser.RULE_funcColumnName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8203;
	        this.fullColumnName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	funcColumnNameOptional() {
	    let localctx = new FuncColumnNameOptionalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 858, MySqlParser.RULE_funcColumnNameOptional);
	    try {
	        this.state = 8209;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1118,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8205;
	            this.funcColumnName();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8206;
	            this.emptyElement();

	                    this.notifyErrorListeners('Please provide column expression');
	                  
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	wildFuncOptional() {
	    let localctx = new WildFuncOptionalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 860, MySqlParser.RULE_wildFuncOptional);
	    try {
	        this.state = 8215;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1119,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8211;
	            this.wildUid();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8212;
	            this.emptyElement();

	                    this.notifyErrorListeners('Please provide function name');
	                  
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	wildUid() {
	    let localctx = new WildUidContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 862, MySqlParser.RULE_wildUid);
	    try {
	        this.state = 8219;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1120,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8217;
	            this.uid();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8218;
	            this.stringLiteral();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	indexColumnName() {
	    let localctx = new IndexColumnNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 864, MySqlParser.RULE_indexColumnName);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8223;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1121,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 8221;
	            this.uid();
	            break;

	        case 2:
	            this.state = 8222;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;

	        }
	        this.state = 8229;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.LR_BRACKET) {
	            this.state = 8225;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 8226;
	            this.decimalLiteral();
	            this.state = 8227;
	            this.match(MySqlParser.RR_BRACKET);
	        }

	        this.state = 8232;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.ASC || _la===MySqlParser.DESC) {
	            this.state = 8231;
	            localctx.sortType = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.ASC || _la===MySqlParser.DESC)) {
	                localctx.sortType = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	userName() {
	    let localctx = new UserNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 866, MySqlParser.RULE_userName);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8234;
	        _la = this._input.LA(1);
	        if(!(((((_la - 880)) & ~0x1f) == 0 && ((1 << (_la - 880)) & ((1 << (MySqlParser.STRING_LITERAL - 880)) | (1 << (MySqlParser.ID - 880)) | (1 << (MySqlParser.STRING_USER_NAME - 880)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mysqlVariable() {
	    let localctx = new MysqlVariableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 868, MySqlParser.RULE_mysqlVariable);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8236;
	        _la = this._input.LA(1);
	        if(!(_la===MySqlParser.LOCAL_ID || _la===MySqlParser.GLOBAL_ID)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	charsetName() {
	    let localctx = new CharsetNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 870, MySqlParser.RULE_charsetName);
	    try {
	        this.state = 8242;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.BINARY:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8238;
	            this.match(MySqlParser.BINARY);
	            break;
	        case MySqlParser.ARMSCII8:
	        case MySqlParser.ASCII:
	        case MySqlParser.BIG5:
	        case MySqlParser.CP1250:
	        case MySqlParser.CP1251:
	        case MySqlParser.CP1256:
	        case MySqlParser.CP1257:
	        case MySqlParser.CP850:
	        case MySqlParser.CP852:
	        case MySqlParser.CP866:
	        case MySqlParser.CP932:
	        case MySqlParser.DEC8:
	        case MySqlParser.EUCJPMS:
	        case MySqlParser.EUCKR:
	        case MySqlParser.GB2312:
	        case MySqlParser.GBK:
	        case MySqlParser.GEOSTD8:
	        case MySqlParser.GREEK:
	        case MySqlParser.HEBREW:
	        case MySqlParser.HP8:
	        case MySqlParser.KEYBCS2:
	        case MySqlParser.KOI8R:
	        case MySqlParser.KOI8U:
	        case MySqlParser.LATIN1:
	        case MySqlParser.LATIN2:
	        case MySqlParser.LATIN5:
	        case MySqlParser.LATIN7:
	        case MySqlParser.MACCE:
	        case MySqlParser.MACROMAN:
	        case MySqlParser.SJIS:
	        case MySqlParser.SWE7:
	        case MySqlParser.TIS620:
	        case MySqlParser.UCS2:
	        case MySqlParser.UJIS:
	        case MySqlParser.UTF16:
	        case MySqlParser.UTF16LE:
	        case MySqlParser.UTF32:
	        case MySqlParser.UTF8:
	        case MySqlParser.UTF8MB3:
	        case MySqlParser.UTF8MB4:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8239;
	            this.charsetNameBase();
	            break;
	        case MySqlParser.STRING_LITERAL:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 8240;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 8241;
	            this.match(MySqlParser.CHARSET_REVERSE_QOUTE_STRING);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	collationName() {
	    let localctx = new CollationNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 872, MySqlParser.RULE_collationName);
	    try {
	        this.state = 8246;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1125,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8244;
	            this.uid();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8245;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	engineName() {
	    let localctx = new EngineNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 874, MySqlParser.RULE_engineName);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8248;
	        _la = this._input.LA(1);
	        if(!(((((_la - 802)) & ~0x1f) == 0 && ((1 << (_la - 802)) & ((1 << (MySqlParser.ARCHIVE - 802)) | (1 << (MySqlParser.BLACKHOLE - 802)) | (1 << (MySqlParser.CSV - 802)) | (1 << (MySqlParser.FEDERATED - 802)) | (1 << (MySqlParser.INNODB - 802)) | (1 << (MySqlParser.MEMORY - 802)) | (1 << (MySqlParser.MRG_MYISAM - 802)) | (1 << (MySqlParser.MYISAM - 802)) | (1 << (MySqlParser.NDB - 802)) | (1 << (MySqlParser.NDBCLUSTER - 802)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 802)) | (1 << (MySqlParser.TOKUDB - 802)))) !== 0) || _la===MySqlParser.STRING_LITERAL || _la===MySqlParser.REVERSE_QUOTE_ID)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	uuidSet() {
	    let localctx = new UuidSetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 876, MySqlParser.RULE_uuidSet);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8250;
	        this.decimalLiteral();
	        this.state = 8251;
	        this.match(MySqlParser.MINUS);
	        this.state = 8252;
	        this.decimalLiteral();
	        this.state = 8253;
	        this.match(MySqlParser.MINUS);
	        this.state = 8254;
	        this.decimalLiteral();
	        this.state = 8255;
	        this.match(MySqlParser.MINUS);
	        this.state = 8256;
	        this.decimalLiteral();
	        this.state = 8257;
	        this.match(MySqlParser.MINUS);
	        this.state = 8258;
	        this.decimalLiteral();
	        this.state = 8264; 
	        this._errHandler.sync(this);
	        let _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 8259;
	        		this.match(MySqlParser.COLON_SYMB);
	        		this.state = 8260;
	        		this.decimalLiteral();
	        		this.state = 8261;
	        		this.match(MySqlParser.MINUS);
	        		this.state = 8262;
	        		this.decimalLiteral();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 8266; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,1126, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	xid() {
	    let localctx = new XidContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 878, MySqlParser.RULE_xid);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8268;
	        localctx.globalTableUid = this.xuidStringId();
	        this.state = 8275;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1128,this._ctx);
	        if(la_===1) {
	            this.state = 8269;
	            this.match(MySqlParser.COMMA);
	            this.state = 8270;
	            localctx.qualifier = this.xuidStringId();
	            this.state = 8273;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1127,this._ctx);
	            if(la_===1) {
	                this.state = 8271;
	                this.match(MySqlParser.COMMA);
	                this.state = 8272;
	                localctx.idFormat = this.decimalLiteral();

	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	xuidStringId() {
	    let localctx = new XuidStringIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 880, MySqlParser.RULE_xuidStringId);
	    try {
	        this.state = 8284;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.STRING_LITERAL:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8277;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case MySqlParser.BIT_STRING:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8278;
	            this.match(MySqlParser.BIT_STRING);
	            break;
	        case MySqlParser.HEXADECIMAL_LITERAL:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 8280; 
	            this._errHandler.sync(this);
	            let _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 8279;
	            		this.match(MySqlParser.HEXADECIMAL_LITERAL);
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 8282; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,1129, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	authPlugin() {
	    let localctx = new AuthPluginContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 882, MySqlParser.RULE_authPlugin);
	    try {
	        this.state = 8288;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1131,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8286;
	            this.uid();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8287;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	uid() {
	    let localctx = new UidContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 884, MySqlParser.RULE_uid);
	    try {
	        this.state = 8293;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1132,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8290;
	            this.simpleId();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8291;
	            this.match(MySqlParser.REVERSE_QUOTE_ID);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 8292;
	            this.match(MySqlParser.CHARSET_REVERSE_QOUTE_STRING);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleId() {
	    let localctx = new SimpleIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 886, MySqlParser.RULE_simpleId);
	    try {
	        this.state = 8307;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1133,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8295;
	            this.match(MySqlParser.ID);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8296;
	            this.charsetNameBase();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 8297;
	            this.transactionLevelBase();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 8298;
	            this.engineName();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 8299;
	            this.privilegesBase();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 8300;
	            this.intervalTypeBase();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 8301;
	            this.dataTypeBase();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 8302;
	            this.keywordsCanBeId();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 8303;
	            this.functionNameBase();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 8304;
	            this.fileFormatCanBeId();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 8305;
	            this.inceptorKeywordCanBeId();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 8306;
	            this.templateId();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	templateId() {
	    let localctx = new TemplateIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 888, MySqlParser.RULE_templateId);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8309;
	        this.match(MySqlParser.TEMPLATE_ID);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dottedId() {
	    let localctx = new DottedIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 890, MySqlParser.RULE_dottedId);
	    try {
	        this.state = 8314;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.DOT_ID:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8311;
	            this.match(MySqlParser.DOT_ID);
	            break;
	        case MySqlParser.DOT:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8312;
	            this.match(MySqlParser.DOT);
	            this.state = 8313;
	            this.uid();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	filePath() {
	    let localctx = new FilePathContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 892, MySqlParser.RULE_filePath);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8328; 
	        this._errHandler.sync(this);
	        let _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 8316;
	        		this.match(MySqlParser.DIVIDE);
	        		this.state = 8317;
	        		this.fileSegment();
	        		this.state = 8325;
	        		this._errHandler.sync(this);
	        		let _alt = this._interp.adaptivePredict(this._input,1136,this._ctx)
	        		while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	        		    if(_alt===1) {
	        		        this.state = 8321;
	        		        this._errHandler.sync(this);
	        		        var la_ = this._interp.adaptivePredict(this._input,1135,this._ctx);
	        		        switch(la_) {
	        		        case 1:
	        		            this.state = 8318;
	        		            this.match(MySqlParser.DOT);
	        		            this.state = 8319;
	        		            this.fileSegment();
	        		            break;

	        		        case 2:
	        		            this.state = 8320;
	        		            this.dottedId();
	        		            break;

	        		        } 
	        		    }
	        		    this.state = 8327;
	        		    this._errHandler.sync(this);
	        		    _alt = this._interp.adaptivePredict(this._input,1136,this._ctx);
	        		}

	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 8330; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,1137, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fileSegment() {
	    let localctx = new FileSegmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 894, MySqlParser.RULE_fileSegment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8337;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,1139,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 8335;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,1138,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 8332;
	                    this.simpleId();
	                    break;

	                case 2:
	                    this.state = 8333;
	                    this.match(MySqlParser.MINUS);
	                    break;

	                case 3:
	                    this.state = 8334;
	                    this.match(MySqlParser.COLON_SYMB);
	                    break;

	                } 
	            }
	            this.state = 8339;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,1139,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	decimalLiteral() {
	    let localctx = new DecimalLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 896, MySqlParser.RULE_decimalLiteral);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8340;
	        _la = this._input.LA(1);
	        if(!(((((_la - 869)) & ~0x1f) == 0 && ((1 << (_la - 869)) & ((1 << (MySqlParser.ZERO_DECIMAL - 869)) | (1 << (MySqlParser.ONE_DECIMAL - 869)) | (1 << (MySqlParser.TWO_DECIMAL - 869)) | (1 << (MySqlParser.DECIMAL_LITERAL - 869)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fileSizeLiteral() {
	    let localctx = new FileSizeLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 898, MySqlParser.RULE_fileSizeLiteral);
	    try {
	        this.state = 8344;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.FILESIZE_LITERAL:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8342;
	            this.match(MySqlParser.FILESIZE_LITERAL);
	            break;
	        case MySqlParser.ZERO_DECIMAL:
	        case MySqlParser.ONE_DECIMAL:
	        case MySqlParser.TWO_DECIMAL:
	        case MySqlParser.DECIMAL_LITERAL:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8343;
	            this.decimalLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringLiteral() {
	    let localctx = new StringLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 900, MySqlParser.RULE_stringLiteral);
	    var _la = 0; // Token type
	    try {
	        this.state = 8368;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1147,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8351;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case MySqlParser.STRING_LITERAL:
	            case MySqlParser.STRING_CHARSET_NAME:
	                this.state = 8347;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===MySqlParser.STRING_CHARSET_NAME) {
	                    this.state = 8346;
	                    this.match(MySqlParser.STRING_CHARSET_NAME);
	                }

	                this.state = 8349;
	                this.match(MySqlParser.STRING_LITERAL);
	                break;
	            case MySqlParser.START_NATIONAL_STRING_LITERAL:
	                this.state = 8350;
	                this.match(MySqlParser.START_NATIONAL_STRING_LITERAL);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 8354; 
	            this._errHandler.sync(this);
	            let _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 8353;
	            		this.match(MySqlParser.STRING_LITERAL);
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 8356; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,1143, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8363;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case MySqlParser.STRING_LITERAL:
	            case MySqlParser.STRING_CHARSET_NAME:
	                this.state = 8359;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===MySqlParser.STRING_CHARSET_NAME) {
	                    this.state = 8358;
	                    this.match(MySqlParser.STRING_CHARSET_NAME);
	                }

	                this.state = 8361;
	                this.match(MySqlParser.STRING_LITERAL);
	                break;
	            case MySqlParser.START_NATIONAL_STRING_LITERAL:
	                this.state = 8362;
	                this.match(MySqlParser.START_NATIONAL_STRING_LITERAL);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 8366;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1146,this._ctx);
	            if(la_===1) {
	                this.state = 8365;
	                this.stringLiteralCollate();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringLiteralCollate() {
	    let localctx = new StringLiteralCollateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 902, MySqlParser.RULE_stringLiteralCollate);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8370;
	        if (!( this.isDialect('mysql'))) {
	            throw new antlr4.error.FailedPredicateException(this, "this.isDialect('mysql')");
	        }
	        this.state = 8371;
	        this.match(MySqlParser.COLLATE);
	        this.state = 8372;
	        this.collationName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	booleanLiteral() {
	    let localctx = new BooleanLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 904, MySqlParser.RULE_booleanLiteral);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8374;
	        _la = this._input.LA(1);
	        if(!(_la===MySqlParser.FALSE || _la===MySqlParser.TRUE)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	hexadecimalLiteral() {
	    let localctx = new HexadecimalLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 906, MySqlParser.RULE_hexadecimalLiteral);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8377;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.STRING_CHARSET_NAME) {
	            this.state = 8376;
	            this.match(MySqlParser.STRING_CHARSET_NAME);
	        }

	        this.state = 8379;
	        this.match(MySqlParser.HEXADECIMAL_LITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nullNotnull() {
	    let localctx = new NullNotnullContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 908, MySqlParser.RULE_nullNotnull);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8382;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.NOT) {
	            this.state = 8381;
	            this.match(MySqlParser.NOT);
	        }

	        this.state = 8384;
	        _la = this._input.LA(1);
	        if(!(_la===MySqlParser.NULL_LITERAL || _la===MySqlParser.NULL_SPEC_LITERAL)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constant() {
	    let localctx = new ConstantContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 910, MySqlParser.RULE_constant);
	    var _la = 0; // Token type
	    try {
	        this.state = 8398;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1151,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8386;
	            this.stringLiteral();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8387;
	            this.decimalLiteral();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 8388;
	            this.match(MySqlParser.MINUS);
	            this.state = 8389;
	            this.decimalLiteral();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 8390;
	            this.hexadecimalLiteral();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 8391;
	            this.booleanLiteral();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 8392;
	            this.match(MySqlParser.REAL_LITERAL);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 8393;
	            this.match(MySqlParser.BIT_STRING);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 8395;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.NOT) {
	                this.state = 8394;
	                this.match(MySqlParser.NOT);
	            }

	            this.state = 8397;
	            localctx.nullLiteral = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.NULL_LITERAL || _la===MySqlParser.NULL_SPEC_LITERAL)) {
	                localctx.nullLiteral = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataType() {
	    let localctx = new DataTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 912, MySqlParser.RULE_dataType);
	    try {
	        this.state = 8404;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1152,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8400;
	            if (!( this.isDialect('inceptor'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('inceptor')");
	            }
	            this.state = 8401;
	            this.inceptorDataType();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8402;
	            if (!( this.isDialect('mysql'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('mysql')");
	            }
	            this.state = 8403;
	            this.mySqlDataType();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mySqlDataType() {
	    let localctx = new MySqlDataTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 914, MySqlParser.RULE_mySqlDataType);
	    var _la = 0; // Token type
	    try {
	        this.state = 8508;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1180,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new StringDataTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8406;
	            localctx.typeName = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(((((_la - 355)) & ~0x1f) == 0 && ((1 << (_la - 355)) & ((1 << (MySqlParser.CHAR - 355)) | (1 << (MySqlParser.VARCHAR - 355)) | (1 << (MySqlParser.NVARCHAR - 355)) | (1 << (MySqlParser.TINYTEXT - 355)) | (1 << (MySqlParser.TEXT - 355)) | (1 << (MySqlParser.MEDIUMTEXT - 355)) | (1 << (MySqlParser.LONGTEXT - 355)))) !== 0) || _la===MySqlParser.NCHAR)) {
	                localctx.typeName = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 8408;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1153,this._ctx);
	            if(la_===1) {
	                this.state = 8407;
	                this.lengthOneDimension();

	            }
	            this.state = 8411;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1154,this._ctx);
	            if(la_===1) {
	                this.state = 8410;
	                this.match(MySqlParser.BINARY);

	            }
	            this.state = 8419;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1156,this._ctx);
	            if(la_===1) {
	                this.state = 8416;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case MySqlParser.CHARACTER:
	                    this.state = 8413;
	                    this.match(MySqlParser.CHARACTER);
	                    this.state = 8414;
	                    this.match(MySqlParser.SET);
	                    break;
	                case MySqlParser.CHARSET:
	                    this.state = 8415;
	                    this.match(MySqlParser.CHARSET);
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                this.state = 8418;
	                this.charsetName();

	            }
	            break;

	        case 2:
	            localctx = new NationalStringDataTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8421;
	            this.match(MySqlParser.NATIONAL);
	            this.state = 8422;
	            localctx.typeName = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.CHARACTER || _la===MySqlParser.VARCHAR)) {
	                localctx.typeName = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 8424;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1157,this._ctx);
	            if(la_===1) {
	                this.state = 8423;
	                this.lengthOneDimension();

	            }
	            this.state = 8427;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1158,this._ctx);
	            if(la_===1) {
	                this.state = 8426;
	                this.match(MySqlParser.BINARY);

	            }
	            break;

	        case 3:
	            localctx = new NationalStringDataTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 8429;
	            this.match(MySqlParser.NCHAR);
	            this.state = 8430;
	            localctx.typeName = this.match(MySqlParser.VARCHAR);
	            this.state = 8432;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1159,this._ctx);
	            if(la_===1) {
	                this.state = 8431;
	                this.lengthOneDimension();

	            }
	            this.state = 8435;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1160,this._ctx);
	            if(la_===1) {
	                this.state = 8434;
	                this.match(MySqlParser.BINARY);

	            }
	            break;

	        case 4:
	            localctx = new NationalVaryingStringDataTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 8437;
	            this.match(MySqlParser.NATIONAL);
	            this.state = 8438;
	            localctx.typeName = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.CHARACTER || _la===MySqlParser.CHAR)) {
	                localctx.typeName = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 8439;
	            this.match(MySqlParser.VARYING);
	            this.state = 8441;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1161,this._ctx);
	            if(la_===1) {
	                this.state = 8440;
	                this.lengthOneDimension();

	            }
	            this.state = 8444;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1162,this._ctx);
	            if(la_===1) {
	                this.state = 8443;
	                this.match(MySqlParser.BINARY);

	            }
	            break;

	        case 5:
	            localctx = new DimensionDataTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 8446;
	            localctx.typeName = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(((((_la - 337)) & ~0x1f) == 0 && ((1 << (_la - 337)) & ((1 << (MySqlParser.TINYINT - 337)) | (1 << (MySqlParser.SMALLINT - 337)) | (1 << (MySqlParser.MEDIUMINT - 337)) | (1 << (MySqlParser.INT - 337)) | (1 << (MySqlParser.INTEGER - 337)) | (1 << (MySqlParser.BIGINT - 337)))) !== 0))) {
	                localctx.typeName = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 8448;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1163,this._ctx);
	            if(la_===1) {
	                this.state = 8447;
	                this.lengthOneDimension();

	            }
	            this.state = 8451;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1164,this._ctx);
	            if(la_===1) {
	                this.state = 8450;
	                _la = this._input.LA(1);
	                if(!(_la===MySqlParser.UNSIGNED || _la===MySqlParser.SIGNED)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }

	            }
	            this.state = 8454;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1165,this._ctx);
	            if(la_===1) {
	                this.state = 8453;
	                this.match(MySqlParser.ZEROFILL);

	            }
	            break;

	        case 6:
	            localctx = new DimensionDataTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 8456;
	            localctx.typeName = this.match(MySqlParser.REAL);
	            this.state = 8458;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1166,this._ctx);
	            if(la_===1) {
	                this.state = 8457;
	                this.lengthTwoDimension();

	            }
	            this.state = 8461;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1167,this._ctx);
	            if(la_===1) {
	                this.state = 8460;
	                _la = this._input.LA(1);
	                if(!(_la===MySqlParser.UNSIGNED || _la===MySqlParser.SIGNED)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }

	            }
	            this.state = 8464;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1168,this._ctx);
	            if(la_===1) {
	                this.state = 8463;
	                this.match(MySqlParser.ZEROFILL);

	            }
	            break;

	        case 7:
	            localctx = new DimensionDataTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 8466;
	            localctx.typeName = this.match(MySqlParser.DOUBLE);
	            this.state = 8468;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1169,this._ctx);
	            if(la_===1) {
	                this.state = 8467;
	                this.match(MySqlParser.PRECISION);

	            }
	            this.state = 8471;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1170,this._ctx);
	            if(la_===1) {
	                this.state = 8470;
	                this.lengthTwoDimension();

	            }
	            this.state = 8474;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1171,this._ctx);
	            if(la_===1) {
	                this.state = 8473;
	                _la = this._input.LA(1);
	                if(!(_la===MySqlParser.UNSIGNED || _la===MySqlParser.SIGNED)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }

	            }
	            this.state = 8477;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1172,this._ctx);
	            if(la_===1) {
	                this.state = 8476;
	                this.match(MySqlParser.ZEROFILL);

	            }
	            break;

	        case 8:
	            localctx = new DimensionDataTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 8479;
	            localctx.typeName = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(((((_la - 346)) & ~0x1f) == 0 && ((1 << (_la - 346)) & ((1 << (MySqlParser.FLOAT - 346)) | (1 << (MySqlParser.DECIMAL - 346)) | (1 << (MySqlParser.DEC - 346)) | (1 << (MySqlParser.NUMERIC - 346)))) !== 0) || _la===MySqlParser.FIXED)) {
	                localctx.typeName = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 8481;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1173,this._ctx);
	            if(la_===1) {
	                this.state = 8480;
	                this.lengthTwoOptionalDimension();

	            }
	            this.state = 8484;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1174,this._ctx);
	            if(la_===1) {
	                this.state = 8483;
	                _la = this._input.LA(1);
	                if(!(_la===MySqlParser.UNSIGNED || _la===MySqlParser.SIGNED)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }

	            }
	            this.state = 8487;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1175,this._ctx);
	            if(la_===1) {
	                this.state = 8486;
	                this.match(MySqlParser.ZEROFILL);

	            }
	            break;

	        case 9:
	            localctx = new SimpleDataTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 9);
	            this.state = 8489;
	            localctx.typeName = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(((((_la - 350)) & ~0x1f) == 0 && ((1 << (_la - 350)) & ((1 << (MySqlParser.DATE - 350)) | (1 << (MySqlParser.TINYBLOB - 350)) | (1 << (MySqlParser.BLOB - 350)) | (1 << (MySqlParser.MEDIUMBLOB - 350)) | (1 << (MySqlParser.LONGBLOB - 350)) | (1 << (MySqlParser.SERIAL - 350)))) !== 0) || _la===MySqlParser.BOOL || _la===MySqlParser.BOOLEAN)) {
	                localctx.typeName = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 10:
	            localctx = new DimensionDataTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 10);
	            this.state = 8490;
	            localctx.typeName = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(((((_la - 351)) & ~0x1f) == 0 && ((1 << (_la - 351)) & ((1 << (MySqlParser.TIME - 351)) | (1 << (MySqlParser.TIMESTAMP - 351)) | (1 << (MySqlParser.DATETIME - 351)) | (1 << (MySqlParser.YEAR - 351)) | (1 << (MySqlParser.BINARY - 351)) | (1 << (MySqlParser.VARBINARY - 351)))) !== 0) || _la===MySqlParser.BIT)) {
	                localctx.typeName = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 8492;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1176,this._ctx);
	            if(la_===1) {
	                this.state = 8491;
	                this.lengthOneDimension();

	            }
	            break;

	        case 11:
	            localctx = new CollectionDataTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 11);
	            this.state = 8494;
	            localctx.typeName = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.SET || _la===MySqlParser.ENUM)) {
	                localctx.typeName = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 8495;
	            this.collectionOptions();
	            this.state = 8497;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1177,this._ctx);
	            if(la_===1) {
	                this.state = 8496;
	                this.match(MySqlParser.BINARY);

	            }
	            this.state = 8505;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1179,this._ctx);
	            if(la_===1) {
	                this.state = 8502;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case MySqlParser.CHARACTER:
	                    this.state = 8499;
	                    this.match(MySqlParser.CHARACTER);
	                    this.state = 8500;
	                    this.match(MySqlParser.SET);
	                    break;
	                case MySqlParser.CHARSET:
	                    this.state = 8501;
	                    this.match(MySqlParser.CHARSET);
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                this.state = 8504;
	                this.charsetName();

	            }
	            break;

	        case 12:
	            localctx = new SpatialDataTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 12);
	            this.state = 8507;
	            localctx.typeName = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.JSON || ((((_la - 818)) & ~0x1f) == 0 && ((1 << (_la - 818)) & ((1 << (MySqlParser.GEOMETRYCOLLECTION - 818)) | (1 << (MySqlParser.GEOMCOLLECTION - 818)) | (1 << (MySqlParser.GEOMETRY - 818)) | (1 << (MySqlParser.LINESTRING - 818)) | (1 << (MySqlParser.MULTILINESTRING - 818)) | (1 << (MySqlParser.MULTIPOINT - 818)) | (1 << (MySqlParser.MULTIPOLYGON - 818)) | (1 << (MySqlParser.POINT - 818)) | (1 << (MySqlParser.POLYGON - 818)))) !== 0))) {
	                localctx.typeName = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inceptorDataType() {
	    let localctx = new InceptorDataTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 916, MySqlParser.RULE_inceptorDataType);
	    var _la = 0; // Token type
	    try {
	        this.state = 8570;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.TINYINT:
	        case MySqlParser.SMALLINT:
	        case MySqlParser.INT:
	        case MySqlParser.INTEGER:
	        case MySqlParser.BIGINT:
	        case MySqlParser.DOUBLE:
	        case MySqlParser.FLOAT:
	        case MySqlParser.DATETIME:
	        case MySqlParser.NVARCHAR:
	        case MySqlParser.BINARY:
	        case MySqlParser.BLOB:
	        case MySqlParser.CLOB:
	        case MySqlParser.GEO:
	        case MySqlParser.BOOLEAN:
	            localctx = new InceptorSimpleDataTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8510;
	            localctx.typeName = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(((((_la - 337)) & ~0x1f) == 0 && ((1 << (_la - 337)) & ((1 << (MySqlParser.TINYINT - 337)) | (1 << (MySqlParser.SMALLINT - 337)) | (1 << (MySqlParser.INT - 337)) | (1 << (MySqlParser.INTEGER - 337)) | (1 << (MySqlParser.BIGINT - 337)) | (1 << (MySqlParser.DOUBLE - 337)) | (1 << (MySqlParser.FLOAT - 337)) | (1 << (MySqlParser.DATETIME - 337)) | (1 << (MySqlParser.NVARCHAR - 337)) | (1 << (MySqlParser.BINARY - 337)) | (1 << (MySqlParser.BLOB - 337)))) !== 0) || _la===MySqlParser.CLOB || _la===MySqlParser.GEO || _la===MySqlParser.BOOLEAN)) {
	                localctx.typeName = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case MySqlParser.DATE:
	            localctx = new InceptorDateDataTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8511;
	            this.match(MySqlParser.DATE);
	            this.state = 8514;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1181,this._ctx);
	            if(la_===1) {
	                this.state = 8512;
	                this.match(MySqlParser.FORMAT);
	                this.state = 8513;
	                this.stringLiteral();

	            }
	            break;
	        case MySqlParser.TIMESTAMP:
	        case MySqlParser.CHAR:
	        case MySqlParser.VARCHAR:
	        case MySqlParser.VARCHAR2:
	        case MySqlParser.STRING:
	            localctx = new InceptorDimensionDataTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 8516;
	            localctx.typeName = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(((((_la - 352)) & ~0x1f) == 0 && ((1 << (_la - 352)) & ((1 << (MySqlParser.TIMESTAMP - 352)) | (1 << (MySqlParser.CHAR - 352)) | (1 << (MySqlParser.VARCHAR - 352)) | (1 << (MySqlParser.VARCHAR2 - 352)))) !== 0) || _la===MySqlParser.STRING)) {
	                localctx.typeName = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 8518;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1182,this._ctx);
	            if(la_===1) {
	                this.state = 8517;
	                this.lengthOneDimension();

	            }
	            break;
	        case MySqlParser.INTERVAL:
	            localctx = new InceptorIntervalDataTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 8528;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1183,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 8520;
	                this.match(MySqlParser.INTERVAL);
	                this.state = 8521;
	                this.match(MySqlParser.YEAR);
	                this.state = 8522;
	                this.match(MySqlParser.TO);
	                this.state = 8523;
	                this.match(MySqlParser.MONTH);
	                break;

	            case 2:
	                this.state = 8524;
	                this.match(MySqlParser.INTERVAL);
	                this.state = 8525;
	                this.match(MySqlParser.DAY);
	                this.state = 8526;
	                this.match(MySqlParser.TO);
	                this.state = 8527;
	                this.match(MySqlParser.SECOND);
	                break;

	            }
	            break;
	        case MySqlParser.DECIMAL:
	        case MySqlParser.DEC:
	        case MySqlParser.NUMERIC:
	        case MySqlParser.NUMBER:
	            localctx = new InceptorNumericDataTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 8530;
	            localctx.typeName = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(((((_la - 347)) & ~0x1f) == 0 && ((1 << (_la - 347)) & ((1 << (MySqlParser.DECIMAL - 347)) | (1 << (MySqlParser.DEC - 347)) | (1 << (MySqlParser.NUMERIC - 347)) | (1 << (MySqlParser.NUMBER - 347)))) !== 0))) {
	                localctx.typeName = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 8532;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1184,this._ctx);
	            if(la_===1) {
	                this.state = 8531;
	                this.lengthTwoOptionalDimension();

	            }
	            break;
	        case MySqlParser.ARRAY:
	            localctx = new InceptorArrayDataTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 8534;
	            this.match(MySqlParser.ARRAY);
	            this.state = 8535;
	            this.match(MySqlParser.LESS_SYMBOL);
	            this.state = 8536;
	            this.inceptorDataType();
	            this.state = 8537;
	            this.match(MySqlParser.GREATER_SYMBOL);
	            break;
	        case MySqlParser.MAP:
	            localctx = new InceptorMapDataTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 8539;
	            this.match(MySqlParser.MAP);
	            this.state = 8540;
	            this.match(MySqlParser.LESS_SYMBOL);
	            this.state = 8541;
	            this.inceptorDataType();
	            this.state = 8542;
	            this.match(MySqlParser.COMMA);
	            this.state = 8543;
	            this.inceptorDataType();
	            this.state = 8544;
	            this.match(MySqlParser.GREATER_SYMBOL);
	            break;
	        case MySqlParser.UNION:
	            localctx = new InceptorUnionDataTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 8546;
	            this.match(MySqlParser.UNION);
	            this.state = 8547;
	            this.match(MySqlParser.LESS_SYMBOL);
	            this.state = 8548;
	            this.inceptorDataType();
	            this.state = 8553;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.COMMA) {
	                this.state = 8549;
	                this.match(MySqlParser.COMMA);
	                this.state = 8550;
	                this.inceptorDataType();
	                this.state = 8555;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 8556;
	            this.match(MySqlParser.GREATER_SYMBOL);
	            break;
	        case MySqlParser.STRUCT:
	            localctx = new InceptorStructDataTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 9);
	            this.state = 8558;
	            this.match(MySqlParser.STRUCT);
	            this.state = 8559;
	            this.match(MySqlParser.LESS_SYMBOL);
	            this.state = 8560;
	            this.inceptorStructDataTypeItem();
	            this.state = 8565;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.COMMA) {
	                this.state = 8561;
	                this.match(MySqlParser.COMMA);
	                this.state = 8562;
	                this.inceptorStructDataTypeItem();
	                this.state = 8567;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 8568;
	            this.match(MySqlParser.GREATER_SYMBOL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inceptorStructDataTypeItem() {
	    let localctx = new InceptorStructDataTypeItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 918, MySqlParser.RULE_inceptorStructDataTypeItem);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8572;
	        localctx.key = this.uid();
	        this.state = 8573;
	        this.match(MySqlParser.COLON_SYMB);
	        this.state = 8574;
	        this.inceptorDataType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	collectionOptions() {
	    let localctx = new CollectionOptionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 920, MySqlParser.RULE_collectionOptions);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8576;
	        this.match(MySqlParser.LR_BRACKET);
	        this.state = 8577;
	        this.match(MySqlParser.STRING_LITERAL);
	        this.state = 8582;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MySqlParser.COMMA) {
	            this.state = 8578;
	            this.match(MySqlParser.COMMA);
	            this.state = 8579;
	            this.match(MySqlParser.STRING_LITERAL);
	            this.state = 8584;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 8585;
	        this.match(MySqlParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	convertedDataType() {
	    let localctx = new ConvertedDataTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 922, MySqlParser.RULE_convertedDataType);
	    var _la = 0; // Token type
	    try {
	        this.state = 8609;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.BINARY:
	        case MySqlParser.NCHAR:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8587;
	            localctx.typeName = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.BINARY || _la===MySqlParser.NCHAR)) {
	                localctx.typeName = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 8589;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.LR_BRACKET) {
	                this.state = 8588;
	                this.lengthOneDimension();
	            }

	            break;
	        case MySqlParser.CHAR:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8591;
	            localctx.typeName = this.match(MySqlParser.CHAR);
	            this.state = 8593;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.LR_BRACKET) {
	                this.state = 8592;
	                this.lengthOneDimension();
	            }

	            this.state = 8598;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.CHARACTER) {
	                this.state = 8595;
	                this.match(MySqlParser.CHARACTER);
	                this.state = 8596;
	                this.match(MySqlParser.SET);
	                this.state = 8597;
	                this.charsetName();
	            }

	            break;
	        case MySqlParser.DATE:
	        case MySqlParser.TIME:
	        case MySqlParser.DATETIME:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 8600;
	            localctx.typeName = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(((((_la - 350)) & ~0x1f) == 0 && ((1 << (_la - 350)) & ((1 << (MySqlParser.DATE - 350)) | (1 << (MySqlParser.TIME - 350)) | (1 << (MySqlParser.DATETIME - 350)))) !== 0))) {
	                localctx.typeName = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case MySqlParser.DECIMAL:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 8601;
	            localctx.typeName = this.match(MySqlParser.DECIMAL);
	            this.state = 8603;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.LR_BRACKET) {
	                this.state = 8602;
	                this.lengthTwoDimension();
	            }

	            break;
	        case MySqlParser.UNSIGNED:
	        case MySqlParser.SIGNED:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 8605;
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.UNSIGNED || _la===MySqlParser.SIGNED)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 8607;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.INTEGER) {
	                this.state = 8606;
	                this.match(MySqlParser.INTEGER);
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lengthOneDimension() {
	    let localctx = new LengthOneDimensionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 924, MySqlParser.RULE_lengthOneDimension);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8611;
	        this.match(MySqlParser.LR_BRACKET);
	        this.state = 8612;
	        this.decimalLiteral();
	        this.state = 8613;
	        this.match(MySqlParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lengthTwoDimension() {
	    let localctx = new LengthTwoDimensionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 926, MySqlParser.RULE_lengthTwoDimension);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8615;
	        this.match(MySqlParser.LR_BRACKET);
	        this.state = 8616;
	        this.decimalLiteral();
	        this.state = 8617;
	        this.match(MySqlParser.COMMA);
	        this.state = 8618;
	        this.decimalLiteral();
	        this.state = 8619;
	        this.match(MySqlParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lengthTwoOptionalDimension() {
	    let localctx = new LengthTwoOptionalDimensionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 928, MySqlParser.RULE_lengthTwoOptionalDimension);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8621;
	        this.match(MySqlParser.LR_BRACKET);
	        this.state = 8622;
	        this.decimalLiteral();
	        this.state = 8625;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.COMMA) {
	            this.state = 8623;
	            this.match(MySqlParser.COMMA);
	            this.state = 8624;
	            this.decimalLiteral();
	        }

	        this.state = 8627;
	        this.match(MySqlParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	uidList() {
	    let localctx = new UidListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 930, MySqlParser.RULE_uidList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8629;
	        this.uid();
	        this.state = 8634;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,1196,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 8630;
	                this.match(MySqlParser.COMMA);
	                this.state = 8631;
	                this.uid(); 
	            }
	            this.state = 8636;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,1196,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	uidOrderList() {
	    let localctx = new UidOrderListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 932, MySqlParser.RULE_uidOrderList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8637;
	        this.uidOrder();
	        this.state = 8642;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MySqlParser.COMMA) {
	            this.state = 8638;
	            this.match(MySqlParser.COMMA);
	            this.state = 8639;
	            this.uidOrder();
	            this.state = 8644;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	uidOrder() {
	    let localctx = new UidOrderContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 934, MySqlParser.RULE_uidOrder);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8645;
	        this.uid();
	        this.state = 8647;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.ASC || _la===MySqlParser.DESC) {
	            this.state = 8646;
	            localctx.order = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.ASC || _la===MySqlParser.DESC)) {
	                localctx.order = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fullIdList() {
	    let localctx = new FullIdListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 936, MySqlParser.RULE_fullIdList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8649;
	        this.fullId();
	        this.state = 8654;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MySqlParser.COMMA) {
	            this.state = 8650;
	            this.match(MySqlParser.COMMA);
	            this.state = 8651;
	            this.fullId();
	            this.state = 8656;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnUids() {
	    let localctx = new ColumnUidsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 938, MySqlParser.RULE_columnUids);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8657;
	        this.columnUid();
	        this.state = 8662;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MySqlParser.COMMA) {
	            this.state = 8658;
	            this.match(MySqlParser.COMMA);
	            this.state = 8659;
	            this.columnUid();
	            this.state = 8664;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnNames() {
	    let localctx = new ColumnNamesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 940, MySqlParser.RULE_columnNames);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8665;
	        this.fullColumnName();
	        this.state = 8670;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MySqlParser.COMMA) {
	            this.state = 8666;
	            this.match(MySqlParser.COMMA);
	            this.state = 8667;
	            this.fullColumnName();
	            this.state = 8672;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tables() {
	    let localctx = new TablesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 942, MySqlParser.RULE_tables);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8673;
	        this.tableName();
	        this.state = 8678;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,1202,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 8674;
	                this.match(MySqlParser.COMMA);
	                this.state = 8675;
	                this.tableName(); 
	            }
	            this.state = 8680;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,1202,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	indexColumnNames() {
	    let localctx = new IndexColumnNamesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 944, MySqlParser.RULE_indexColumnNames);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8681;
	        this.match(MySqlParser.LR_BRACKET);
	        this.state = 8682;
	        this.indexColumnName();
	        this.state = 8687;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MySqlParser.COMMA) {
	            this.state = 8683;
	            this.match(MySqlParser.COMMA);
	            this.state = 8684;
	            this.indexColumnName();
	            this.state = 8689;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 8690;
	        this.match(MySqlParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressions() {
	    let localctx = new ExpressionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 946, MySqlParser.RULE_expressions);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8692;
	        this.expression(0);
	        this.state = 8697;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,1204,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 8693;
	                this.match(MySqlParser.COMMA);
	                this.state = 8694;
	                this.expression(0); 
	            }
	            this.state = 8699;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,1204,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionsWithDefaults() {
	    let localctx = new ExpressionsWithDefaultsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 948, MySqlParser.RULE_expressionsWithDefaults);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8700;
	        this.expressionOrDefault();
	        this.state = 8705;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MySqlParser.COMMA) {
	            this.state = 8701;
	            this.match(MySqlParser.COMMA);
	            this.state = 8702;
	            this.expressionOrDefault();
	            this.state = 8707;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constants() {
	    let localctx = new ConstantsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 950, MySqlParser.RULE_constants);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8708;
	        this.constant();
	        this.state = 8713;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MySqlParser.COMMA) {
	            this.state = 8709;
	            this.match(MySqlParser.COMMA);
	            this.state = 8710;
	            this.constant();
	            this.state = 8715;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleStrings() {
	    let localctx = new SimpleStringsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 952, MySqlParser.RULE_simpleStrings);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8716;
	        this.match(MySqlParser.STRING_LITERAL);
	        this.state = 8721;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MySqlParser.COMMA) {
	            this.state = 8717;
	            this.match(MySqlParser.COMMA);
	            this.state = 8718;
	            this.match(MySqlParser.STRING_LITERAL);
	            this.state = 8723;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	userVariables() {
	    let localctx = new UserVariablesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 954, MySqlParser.RULE_userVariables);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8724;
	        this.match(MySqlParser.LOCAL_ID);
	        this.state = 8729;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,1208,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 8725;
	                this.match(MySqlParser.COMMA);
	                this.state = 8726;
	                this.match(MySqlParser.LOCAL_ID); 
	            }
	            this.state = 8731;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,1208,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defaultValue() {
	    let localctx = new DefaultValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 956, MySqlParser.RULE_defaultValue);
	    try {
	        this.state = 8743;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1211,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8732;
	            this.match(MySqlParser.NULL_LITERAL);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8734;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1209,this._ctx);
	            if(la_===1) {
	                this.state = 8733;
	                this.unaryOperator();

	            }
	            this.state = 8736;
	            this.constant();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 8737;
	            this.currentTimestamp();
	            this.state = 8741;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1210,this._ctx);
	            if(la_===1) {
	                this.state = 8738;
	                this.match(MySqlParser.ON);
	                this.state = 8739;
	                this.match(MySqlParser.UPDATE);
	                this.state = 8740;
	                this.currentTimestamp();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	currentTimestamp() {
	    let localctx = new CurrentTimestampContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 958, MySqlParser.RULE_currentTimestamp);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8759;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.CURRENT_TIMESTAMP:
	        case MySqlParser.LOCALTIME:
	        case MySqlParser.LOCALTIMESTAMP:
	            this.state = 8745;
	            _la = this._input.LA(1);
	            if(!(((((_la - 407)) & ~0x1f) == 0 && ((1 << (_la - 407)) & ((1 << (MySqlParser.CURRENT_TIMESTAMP - 407)) | (1 << (MySqlParser.LOCALTIME - 407)) | (1 << (MySqlParser.LOCALTIMESTAMP - 407)))) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 8751;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1213,this._ctx);
	            if(la_===1) {
	                this.state = 8746;
	                this.match(MySqlParser.LR_BRACKET);
	                this.state = 8748;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(((((_la - 869)) & ~0x1f) == 0 && ((1 << (_la - 869)) & ((1 << (MySqlParser.ZERO_DECIMAL - 869)) | (1 << (MySqlParser.ONE_DECIMAL - 869)) | (1 << (MySqlParser.TWO_DECIMAL - 869)) | (1 << (MySqlParser.DECIMAL_LITERAL - 869)))) !== 0)) {
	                    this.state = 8747;
	                    this.decimalLiteral();
	                }

	                this.state = 8750;
	                this.match(MySqlParser.RR_BRACKET);

	            }
	            break;
	        case MySqlParser.NOW:
	            this.state = 8753;
	            this.match(MySqlParser.NOW);
	            this.state = 8754;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 8756;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 869)) & ~0x1f) == 0 && ((1 << (_la - 869)) & ((1 << (MySqlParser.ZERO_DECIMAL - 869)) | (1 << (MySqlParser.ONE_DECIMAL - 869)) | (1 << (MySqlParser.TWO_DECIMAL - 869)) | (1 << (MySqlParser.DECIMAL_LITERAL - 869)))) !== 0)) {
	                this.state = 8755;
	                this.decimalLiteral();
	            }

	            this.state = 8758;
	            this.match(MySqlParser.RR_BRACKET);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionOrDefault() {
	    let localctx = new ExpressionOrDefaultContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 960, MySqlParser.RULE_expressionOrDefault);
	    try {
	        this.state = 8763;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1216,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8761;
	            this.expression(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8762;
	            this.match(MySqlParser.DEFAULT);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifExists() {
	    let localctx = new IfExistsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 962, MySqlParser.RULE_ifExists);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8765;
	        this.match(MySqlParser.IF);
	        this.state = 8766;
	        this.match(MySqlParser.EXISTS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifNotExists() {
	    let localctx = new IfNotExistsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 964, MySqlParser.RULE_ifNotExists);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8768;
	        this.match(MySqlParser.IF);
	        this.state = 8769;
	        this.match(MySqlParser.NOT);
	        this.state = 8770;
	        this.match(MySqlParser.EXISTS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionCall() {
	    let localctx = new FunctionCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 966, MySqlParser.RULE_functionCall);
	    try {
	        this.state = 8785;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1218,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new SpecificFunctionCallContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8772;
	            this.specificFunction();
	            break;

	        case 2:
	            localctx = new UdfFunctionCallContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8773;
	            this.fullId();
	            this.state = 8778;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1217,this._ctx);
	            if(la_===1) {
	                this.state = 8774;
	                localctx.paren = this.match(MySqlParser.LR_BRACKET);
	                this.state = 8775;
	                this.functionArgs();
	                this.state = 8776;
	                this.match(MySqlParser.RR_BRACKET);

	            }

	                    this.checkTokenExist(localctx.paren, 'Pleaase provide `()` and arguments');
	                  
	            break;

	        case 3:
	            localctx = new AggregateFunctionCallContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 8782;
	            this.aggregateWindowedFunction();
	            break;

	        case 4:
	            localctx = new PasswordFunctionCallContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 8783;
	            if (!( this.isDialect('mysql'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('mysql')");
	            }
	            this.state = 8784;
	            this.passwordFunctionClause();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	specificFunction() {
	    let localctx = new SpecificFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 968, MySqlParser.RULE_specificFunction);
	    try {
	        this.state = 8791;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1219,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8787;
	            if (!( this.isDialect('mysql'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('mysql')");
	            }
	            this.state = 8788;
	            this.specificFunctionMysql();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8789;
	            if (!( this.isDialect('inceptor'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('inceptor')");
	            }
	            this.state = 8790;
	            this.specificFunctionInceptor();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	specificFunctionMysql() {
	    let localctx = new SpecificFunctionMysqlContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 970, MySqlParser.RULE_specificFunctionMysql);
	    var _la = 0; // Token type
	    try {
	        this.state = 8898;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1230,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new SimpleFunctionCallContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8793;
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.CURRENT_USER || ((((_la - 405)) & ~0x1f) == 0 && ((1 << (_la - 405)) & ((1 << (MySqlParser.CURRENT_DATE - 405)) | (1 << (MySqlParser.CURRENT_TIME - 405)) | (1 << (MySqlParser.CURRENT_TIMESTAMP - 405)) | (1 << (MySqlParser.LOCALTIME - 405)))) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 2:
	            localctx = new DataTypeFunctionCallContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8794;
	            this.match(MySqlParser.CONVERT);
	            this.state = 8795;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 8796;
	            this.expression(0);
	            this.state = 8797;
	            localctx.separator = this.match(MySqlParser.COMMA);
	            this.state = 8798;
	            this.convertedDataType();
	            this.state = 8799;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 3:
	            localctx = new DataTypeFunctionCallContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 8801;
	            this.match(MySqlParser.CONVERT);
	            this.state = 8802;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 8803;
	            this.expression(0);
	            this.state = 8804;
	            this.match(MySqlParser.USING);
	            this.state = 8805;
	            this.charsetName();
	            this.state = 8806;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 4:
	            localctx = new DataTypeFunctionCallContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 8808;
	            this.match(MySqlParser.CAST);
	            this.state = 8809;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 8810;
	            this.expression(0);
	            this.state = 8811;
	            this.match(MySqlParser.AS);
	            this.state = 8812;
	            this.convertedDataType();
	            this.state = 8813;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 5:
	            localctx = new ValuesFunctionCallContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 8815;
	            this.match(MySqlParser.VALUES);
	            this.state = 8816;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 8817;
	            this.fullColumnName();
	            this.state = 8818;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 6:
	            localctx = new CaseFunctionCallContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 8820;
	            this.caseFunction();
	            break;

	        case 7:
	            localctx = new CharFunctionCallContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 8821;
	            this.match(MySqlParser.CHAR);
	            this.state = 8822;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 8823;
	            this.functionArgs();
	            this.state = 8826;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.USING) {
	                this.state = 8824;
	                this.match(MySqlParser.USING);
	                this.state = 8825;
	                this.charsetName();
	            }

	            this.state = 8828;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 8:
	            localctx = new PositionFunctionCallContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 8830;
	            this.match(MySqlParser.POSITION);
	            this.state = 8831;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 8834;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1221,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 8832;
	                localctx.positionString = this.stringLiteral();
	                break;

	            case 2:
	                this.state = 8833;
	                localctx.positionExpression = this.expression(0);
	                break;

	            }
	            this.state = 8836;
	            this.match(MySqlParser.IN);
	            this.state = 8839;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1222,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 8837;
	                localctx.inString = this.stringLiteral();
	                break;

	            case 2:
	                this.state = 8838;
	                localctx.inExpression = this.expression(0);
	                break;

	            }
	            this.state = 8841;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 9:
	            localctx = new SubstrFunctionCallContext(this, localctx);
	            this.enterOuterAlt(localctx, 9);
	            this.state = 8843;
	            this.substringFunction();
	            break;

	        case 10:
	            localctx = new TrimFunctionCallContext(this, localctx);
	            this.enterOuterAlt(localctx, 10);
	            this.state = 8844;
	            this.match(MySqlParser.TRIM);
	            this.state = 8845;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 8846;
	            localctx.positioinForm = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.BOTH || _la===MySqlParser.LEADING || _la===MySqlParser.TRAILING)) {
	                localctx.positioinForm = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 8849;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1223,this._ctx);
	            if(la_===1) {
	                this.state = 8847;
	                localctx.sourceString = this.stringLiteral();

	            } else if(la_===2) {
	                this.state = 8848;
	                localctx.sourceExpression = this.expression(0);

	            }
	            this.state = 8851;
	            this.match(MySqlParser.FROM);
	            this.state = 8854;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1224,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 8852;
	                localctx.fromString = this.stringLiteral();
	                break;

	            case 2:
	                this.state = 8853;
	                localctx.fromExpression = this.expression(0);
	                break;

	            }
	            this.state = 8856;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 11:
	            localctx = new TrimFunctionCallContext(this, localctx);
	            this.enterOuterAlt(localctx, 11);
	            this.state = 8858;
	            this.match(MySqlParser.TRIM);
	            this.state = 8859;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 8862;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1225,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 8860;
	                localctx.sourceString = this.stringLiteral();
	                break;

	            case 2:
	                this.state = 8861;
	                localctx.sourceExpression = this.expression(0);
	                break;

	            }
	            this.state = 8864;
	            this.match(MySqlParser.FROM);
	            this.state = 8867;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1226,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 8865;
	                localctx.fromString = this.stringLiteral();
	                break;

	            case 2:
	                this.state = 8866;
	                localctx.fromExpression = this.expression(0);
	                break;

	            }
	            this.state = 8869;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 12:
	            localctx = new WeightFunctionCallContext(this, localctx);
	            this.enterOuterAlt(localctx, 12);
	            this.state = 8871;
	            this.match(MySqlParser.WEIGHT_STRING);
	            this.state = 8872;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 8875;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1227,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 8873;
	                this.stringLiteral();
	                break;

	            case 2:
	                this.state = 8874;
	                this.expression(0);
	                break;

	            }
	            this.state = 8883;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.AS) {
	                this.state = 8877;
	                this.match(MySqlParser.AS);
	                this.state = 8878;
	                localctx.stringFormat = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===MySqlParser.CHAR || _la===MySqlParser.BINARY)) {
	                    localctx.stringFormat = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 8879;
	                this.match(MySqlParser.LR_BRACKET);
	                this.state = 8880;
	                this.decimalLiteral();
	                this.state = 8881;
	                this.match(MySqlParser.RR_BRACKET);
	            }

	            this.state = 8886;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.LEVEL) {
	                this.state = 8885;
	                this.levelsInWeightString();
	            }

	            this.state = 8888;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 13:
	            localctx = new ExtractFunctionCallContext(this, localctx);
	            this.enterOuterAlt(localctx, 13);
	            this.state = 8890;
	            this.extractFunction();
	            break;

	        case 14:
	            localctx = new GetFormatFunctionCallContext(this, localctx);
	            this.enterOuterAlt(localctx, 14);
	            this.state = 8891;
	            this.match(MySqlParser.GET_FORMAT);
	            this.state = 8892;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 8893;
	            localctx.datetimeFormat = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(((((_la - 350)) & ~0x1f) == 0 && ((1 << (_la - 350)) & ((1 << (MySqlParser.DATE - 350)) | (1 << (MySqlParser.TIME - 350)) | (1 << (MySqlParser.DATETIME - 350)))) !== 0))) {
	                localctx.datetimeFormat = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 8894;
	            this.match(MySqlParser.COMMA);
	            this.state = 8895;
	            this.stringLiteral();
	            this.state = 8896;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	specificFunctionInceptor() {
	    let localctx = new SpecificFunctionInceptorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 972, MySqlParser.RULE_specificFunctionInceptor);
	    try {
	        this.state = 8904;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.CAST:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8900;
	            this.castFunctionInceptor();
	            break;
	        case MySqlParser.CASE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8901;
	            this.caseFunction();
	            break;
	        case MySqlParser.SUBSTR:
	        case MySqlParser.SUBSTRING:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 8902;
	            this.substringFunction();
	            break;
	        case MySqlParser.EXTRACT:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 8903;
	            this.extractFunction();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	castFunctionInceptor() {
	    let localctx = new CastFunctionInceptorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 974, MySqlParser.RULE_castFunctionInceptor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8906;
	        this.match(MySqlParser.CAST);
	        this.state = 8907;
	        this.match(MySqlParser.LR_BRACKET);
	        this.state = 8908;
	        this.expression(0);
	        this.state = 8909;
	        this.match(MySqlParser.AS);
	        this.state = 8910;
	        this.dataType();
	        this.state = 8911;
	        this.match(MySqlParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	substringFunction() {
	    let localctx = new SubstringFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 976, MySqlParser.RULE_substringFunction);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8913;
	        _la = this._input.LA(1);
	        if(!(_la===MySqlParser.SUBSTR || _la===MySqlParser.SUBSTRING)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 8914;
	        this.match(MySqlParser.LR_BRACKET);
	        this.state = 8917;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1232,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 8915;
	            localctx.sourceString = this.stringLiteral();
	            break;

	        case 2:
	            this.state = 8916;
	            localctx.sourceExpression = this.expression(0);
	            break;

	        }
	        this.state = 8919;
	        this.match(MySqlParser.FROM);
	        this.state = 8922;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1233,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 8920;
	            localctx.fromDecimal = this.decimalLiteral();
	            break;

	        case 2:
	            this.state = 8921;
	            localctx.fromExpression = this.expression(0);
	            break;

	        }
	        this.state = 8929;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.FOR) {
	            this.state = 8924;
	            this.match(MySqlParser.FOR);
	            this.state = 8927;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1234,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 8925;
	                localctx.forDecimal = this.decimalLiteral();
	                break;

	            case 2:
	                this.state = 8926;
	                localctx.forExpression = this.expression(0);
	                break;

	            }
	        }

	        this.state = 8931;
	        this.match(MySqlParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	extractFunction() {
	    let localctx = new ExtractFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 978, MySqlParser.RULE_extractFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8933;
	        this.match(MySqlParser.EXTRACT);
	        this.state = 8934;
	        this.match(MySqlParser.LR_BRACKET);
	        this.state = 8935;
	        this.intervalType();
	        this.state = 8936;
	        this.match(MySqlParser.FROM);
	        this.state = 8939;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1236,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 8937;
	            localctx.sourceString = this.stringLiteral();
	            break;

	        case 2:
	            this.state = 8938;
	            localctx.sourceExpression = this.expression(0);
	            break;

	        }
	        this.state = 8941;
	        this.match(MySqlParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	caseFunction() {
	    let localctx = new CaseFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 980, MySqlParser.RULE_caseFunction);

	          localctx.block = this.generateBlockContext('CASE', 'END', {expand: true})
	        
	    var _la = 0; // Token type
	    try {
	        this.state = 8968;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1241,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8943;
	            this.match(MySqlParser.CASE);
	            this.state = 8944;
	            this.expression(0);
	            this.state = 8946; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 8945;
	                this.caseFuncAlternative();
	                this.state = 8948; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===MySqlParser.WHEN);
	            this.state = 8952;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.ELSE) {
	                this.state = 8950;
	                this.match(MySqlParser.ELSE);
	                this.state = 8951;
	                localctx.elseArg = this.functionArg();
	            }

	            this.state = 8954;
	            this.match(MySqlParser.END);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8956;
	            this.match(MySqlParser.CASE);
	            this.state = 8958; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 8957;
	                this.caseFuncAlternative();
	                this.state = 8960; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===MySqlParser.WHEN);
	            this.state = 8964;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.ELSE) {
	                this.state = 8962;
	                this.match(MySqlParser.ELSE);
	                this.state = 8963;
	                localctx.elseArg = this.functionArg();
	            }

	            this.state = 8966;
	            this.match(MySqlParser.END);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	caseFuncAlternative() {
	    let localctx = new CaseFuncAlternativeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 982, MySqlParser.RULE_caseFuncAlternative);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8970;
	        this.match(MySqlParser.WHEN);
	        this.state = 8971;
	        localctx.condi = this.functionArg();
	        this.state = 8972;
	        this.match(MySqlParser.THEN);
	        this.state = 8973;
	        localctx.consequent = this.functionArg();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	levelsInWeightString() {
	    let localctx = new LevelsInWeightStringContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 984, MySqlParser.RULE_levelsInWeightString);
	    var _la = 0; // Token type
	    try {
	        this.state = 8989;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1243,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new LevelWeightListContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8975;
	            this.match(MySqlParser.LEVEL);
	            this.state = 8976;
	            this.levelInWeightListElement();
	            this.state = 8981;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.COMMA) {
	                this.state = 8977;
	                this.match(MySqlParser.COMMA);
	                this.state = 8978;
	                this.levelInWeightListElement();
	                this.state = 8983;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 2:
	            localctx = new LevelWeightRangeContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8984;
	            this.match(MySqlParser.LEVEL);
	            this.state = 8985;
	            localctx.firstLevel = this.decimalLiteral();
	            this.state = 8986;
	            this.match(MySqlParser.MINUS);
	            this.state = 8987;
	            localctx.lastLevel = this.decimalLiteral();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	levelInWeightListElement() {
	    let localctx = new LevelInWeightListElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 986, MySqlParser.RULE_levelInWeightListElement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8991;
	        this.decimalLiteral();
	        this.state = 8993;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.ASC || _la===MySqlParser.DESC || _la===MySqlParser.REVERSE) {
	            this.state = 8992;
	            localctx.orderType = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.ASC || _la===MySqlParser.DESC || _la===MySqlParser.REVERSE)) {
	                localctx.orderType = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aggregateWindowedFunction() {
	    let localctx = new AggregateWindowedFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 988, MySqlParser.RULE_aggregateWindowedFunction);
	    try {
	        this.state = 8999;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1245,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8995;
	            if (!( this.isDialect('mysql'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('mysql')");
	            }
	            this.state = 8996;
	            this.aggregateWindowedFunctionMysql();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8997;
	            if (!( this.isDialect('inceptor'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('inceptor')");
	            }
	            this.state = 8998;
	            this.aggregateWindowedFunctionInceptor();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aggregateWindowedFunctionMysql() {
	    let localctx = new AggregateWindowedFunctionMysqlContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 990, MySqlParser.RULE_aggregateWindowedFunctionMysql);
	    var _la = 0; // Token type
	    try {
	        this.state = 9057;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1254,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9001;
	            localctx.functionName = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(((((_la - 389)) & ~0x1f) == 0 && ((1 << (_la - 389)) & ((1 << (MySqlParser.AVG - 389)) | (1 << (MySqlParser.MAX - 389)) | (1 << (MySqlParser.MIN - 389)) | (1 << (MySqlParser.SUM - 389)))) !== 0))) {
	                localctx.functionName = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 9002;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 9004;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1246,this._ctx);
	            if(la_===1) {
	                this.state = 9003;
	                localctx.aggregator = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===MySqlParser.ALL || _la===MySqlParser.DISTINCT)) {
	                    localctx.aggregator = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }

	            }
	            this.state = 9006;
	            this.functionArg();
	            this.state = 9007;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 9009;
	            localctx.functionName = this.match(MySqlParser.COUNT);
	            this.state = 9010;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 9016;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1248,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 9011;
	                localctx.starArg = this.match(MySqlParser.STAR);
	                break;

	            case 2:
	                this.state = 9013;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,1247,this._ctx);
	                if(la_===1) {
	                    this.state = 9012;
	                    localctx.aggregator = this.match(MySqlParser.ALL);

	                }
	                this.state = 9015;
	                this.functionArg();
	                break;

	            }
	            this.state = 9018;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 9019;
	            localctx.functionName = this.match(MySqlParser.COUNT);
	            this.state = 9020;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 9021;
	            localctx.aggregator = this.match(MySqlParser.DISTINCT);
	            this.state = 9022;
	            this.functionArgs();
	            this.state = 9023;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 9025;
	            localctx.functionName = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(((((_la - 390)) & ~0x1f) == 0 && ((1 << (_la - 390)) & ((1 << (MySqlParser.BIT_AND - 390)) | (1 << (MySqlParser.BIT_OR - 390)) | (1 << (MySqlParser.BIT_XOR - 390)) | (1 << (MySqlParser.STD - 390)) | (1 << (MySqlParser.STDDEV - 390)) | (1 << (MySqlParser.STDDEV_POP - 390)) | (1 << (MySqlParser.STDDEV_SAMP - 390)) | (1 << (MySqlParser.VAR_POP - 390)) | (1 << (MySqlParser.VAR_SAMP - 390)) | (1 << (MySqlParser.VARIANCE - 390)))) !== 0))) {
	                localctx.functionName = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 9026;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 9028;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1249,this._ctx);
	            if(la_===1) {
	                this.state = 9027;
	                localctx.aggregator = this.match(MySqlParser.ALL);

	            }
	            this.state = 9030;
	            this.functionArg();
	            this.state = 9031;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 9033;
	            localctx.functionName = this.match(MySqlParser.GROUP_CONCAT);
	            this.state = 9034;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 9036;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1250,this._ctx);
	            if(la_===1) {
	                this.state = 9035;
	                localctx.aggregator = this.match(MySqlParser.DISTINCT);

	            }
	            this.state = 9038;
	            this.functionArgs();
	            this.state = 9049;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.ORDER) {
	                this.state = 9039;
	                this.match(MySqlParser.ORDER);
	                this.state = 9040;
	                this.match(MySqlParser.BY);
	                this.state = 9041;
	                this.orderByExpression();
	                this.state = 9046;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===MySqlParser.COMMA) {
	                    this.state = 9042;
	                    this.match(MySqlParser.COMMA);
	                    this.state = 9043;
	                    this.orderByExpression();
	                    this.state = 9048;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 9053;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.SEPARATOR) {
	                this.state = 9051;
	                this.match(MySqlParser.SEPARATOR);
	                this.state = 9052;
	                localctx.separator = this.match(MySqlParser.STRING_LITERAL);
	            }

	            this.state = 9055;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aggregateWindowedFunctionInceptor() {
	    let localctx = new AggregateWindowedFunctionInceptorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 992, MySqlParser.RULE_aggregateWindowedFunctionInceptor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9059;
	        this.uid();
	        this.state = 9060;
	        this.match(MySqlParser.LR_BRACKET);
	        this.state = 9063;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1255,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 9061;
	            this.match(MySqlParser.STAR);
	            break;

	        case 2:
	            this.state = 9062;
	            this.functionArg();
	            break;

	        }
	        this.state = 9065;
	        this.match(MySqlParser.RR_BRACKET);
	        this.state = 9068;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1256,this._ctx);
	        if(la_===1) {
	            this.state = 9066;
	            this.match(MySqlParser.OVER);
	            this.state = 9067;
	            this.windowOverSpec();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	windowOverSpec() {
	    let localctx = new WindowOverSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 994, MySqlParser.RULE_windowOverSpec);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9070;
	        this.match(MySqlParser.LR_BRACKET);
	        this.state = 9088;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.PARTITION) {
	            this.state = 9071;
	            this.match(MySqlParser.PARTITION);
	            this.state = 9072;
	            this.match(MySqlParser.BY);
	            this.state = 9086;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1259,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 9074; 
	                this._errHandler.sync(this);
	                let _alt = 1;
	                do {
	                	switch (_alt) {
	                	case 1:
	                		this.state = 9073;
	                		this.expression(0);
	                		break;
	                	default:
	                		throw new antlr4.error.NoViableAltException(this);
	                	}
	                	this.state = 9076; 
	                	this._errHandler.sync(this);
	                	_alt = this._interp.adaptivePredict(this._input,1257, this._ctx);
	                } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	                break;

	            case 2:
	                this.state = 9078;
	                this.match(MySqlParser.LR_BRACKET);
	                this.state = 9080; 
	                this._errHandler.sync(this);
	                let _alt = 1;
	                do {
	                	switch (_alt) {
	                	case 1:
	                		this.state = 9079;
	                		this.expression(0);
	                		break;
	                	default:
	                		throw new antlr4.error.NoViableAltException(this);
	                	}
	                	this.state = 9082; 
	                	this._errHandler.sync(this);
	                	_alt = this._interp.adaptivePredict(this._input,1258, this._ctx);
	                } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	                this.state = 9084;
	                this.match(MySqlParser.RR_BRACKET);
	                break;

	            }
	        }

	        this.state = 9094;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.ORDER) {
	            this.state = 9090;
	            this.orderByClause();
	            this.state = 9092;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.RANGE || _la===MySqlParser.ROWS) {
	                this.state = 9091;
	                this.windowClause();
	            }

	        }

	        this.state = 9096;
	        this.match(MySqlParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	windowClause() {
	    let localctx = new WindowClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 996, MySqlParser.RULE_windowClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9098;
	        _la = this._input.LA(1);
	        if(!(_la===MySqlParser.RANGE || _la===MySqlParser.ROWS)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 9105;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1263,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 9099;
	            this.windowStartBoundaryDefault();
	            break;

	        case 2:
	            this.state = 9100;
	            this.match(MySqlParser.BETWEEN);
	            this.state = 9101;
	            this.windowStartBoundary();
	            this.state = 9102;
	            this.match(MySqlParser.AND);
	            this.state = 9103;
	            this.windowEndBoundary();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	windowStartBoundary() {
	    let localctx = new WindowStartBoundaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 998, MySqlParser.RULE_windowStartBoundary);
	    var _la = 0; // Token type
	    try {
	        this.state = 9114;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1264,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9107;
	            this.match(MySqlParser.UNBOUNDED);
	            this.state = 9108;
	            this.match(MySqlParser.PRECEDING);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 9109;
	            this.match(MySqlParser.CURRENT);
	            this.state = 9110;
	            this.match(MySqlParser.ROW);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 9111;
	            this.expression(0);
	            this.state = 9112;
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.FOLLOWING || _la===MySqlParser.PRECEDING)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	windowStartBoundaryDefault() {
	    let localctx = new WindowStartBoundaryDefaultContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1000, MySqlParser.RULE_windowStartBoundaryDefault);
	    try {
	        this.state = 9123;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1265,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9116;
	            this.match(MySqlParser.UNBOUNDED);
	            this.state = 9117;
	            this.match(MySqlParser.PRECEDING);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 9118;
	            this.match(MySqlParser.CURRENT);
	            this.state = 9119;
	            this.match(MySqlParser.ROW);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 9120;
	            this.expression(0);
	            this.state = 9121;
	            this.match(MySqlParser.PRECEDING);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	windowEndBoundary() {
	    let localctx = new WindowEndBoundaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1002, MySqlParser.RULE_windowEndBoundary);
	    var _la = 0; // Token type
	    try {
	        this.state = 9132;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1266,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9125;
	            this.match(MySqlParser.UNBOUNDED);
	            this.state = 9126;
	            this.match(MySqlParser.FOLLOWING);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 9127;
	            this.match(MySqlParser.CURRENT);
	            this.state = 9128;
	            this.match(MySqlParser.ROW);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 9129;
	            this.expression(0);
	            this.state = 9130;
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.FOLLOWING || _la===MySqlParser.PRECEDING)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	passwordFunctionClause() {
	    let localctx = new PasswordFunctionClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1004, MySqlParser.RULE_passwordFunctionClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9134;
	        localctx.functionName = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(_la===MySqlParser.OLD_PASSWORD || _la===MySqlParser.PASSWORD)) {
	            localctx.functionName = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 9135;
	        this.match(MySqlParser.LR_BRACKET);
	        this.state = 9136;
	        this.functionArg();
	        this.state = 9137;
	        this.match(MySqlParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionArgs() {
	    let localctx = new FunctionArgsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1006, MySqlParser.RULE_functionArgs);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9139;
	        this.functionArg();
	        this.state = 9144;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MySqlParser.COMMA) {
	            this.state = 9140;
	            this.match(MySqlParser.COMMA);
	            this.state = 9141;
	            this.functionArg();
	            this.state = 9146;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionArg() {
	    let localctx = new FunctionArgContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1008, MySqlParser.RULE_functionArg);
	    try {
	        this.state = 9152;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1268,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9147;
	            this.constant();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 9148;
	            this.funcColumnName();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 9149;
	            this.functionCall();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 9150;
	            this.expression(0);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 9151;
	            this.functionArgOptional();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionArgOptional() {
	    let localctx = new FunctionArgOptionalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1010, MySqlParser.RULE_functionArgOptional);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9154;
	        this.emptyElement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionOptional() {
	    let localctx = new ExpressionOptionalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1012, MySqlParser.RULE_expressionOptional);
	    try {
	        this.state = 9160;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1269,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9156;
	            this.expression(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 9157;
	            this.emptyElement();

	                    this.notifyErrorListeners('Please provide expression');
	                  
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	expression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 1014;
	    this.enterRecursionRule(localctx, 1014, MySqlParser.RULE_expression, _p);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9183;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1273,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new NotExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;

	            this.state = 9163;
	            localctx.notOperator = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.NOT || _la===MySqlParser.EXCLAMATION_SYMBOL)) {
	                localctx.notOperator = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 9164;
	            this.expression(5);
	            break;

	        case 2:
	            localctx = new IsExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 9165;
	            this.predicate(0);
	            this.state = 9166;
	            this.match(MySqlParser.IS);
	            this.state = 9168;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.NOT) {
	                this.state = 9167;
	                this.match(MySqlParser.NOT);
	            }

	            this.state = 9170;
	            localctx.testValue = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.FALSE || _la===MySqlParser.TRUE || _la===MySqlParser.UNKNOWN)) {
	                localctx.testValue = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 3:
	            localctx = new ErrorIsExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 9172;
	            this.predicate(0);
	            this.state = 9173;
	            this.match(MySqlParser.IS);
	            this.state = 9175;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1271,this._ctx);
	            if(la_===1) {
	                this.state = 9174;
	                this.match(MySqlParser.NOT);

	            }
	            this.state = 9178;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1272,this._ctx);
	            if(la_===1) {
	                this.state = 9177;
	                localctx.testValue = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===MySqlParser.FALSE || _la===MySqlParser.TRUE || _la===MySqlParser.UNKNOWN)) {
	                    localctx.testValue = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }

	            }
	            this.notifyErrorListeners('Please provide value `TRUE/FALSE/UNKNOWN`');
	            break;

	        case 4:
	            localctx = new PredicateExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 9182;
	            this.predicate(0);
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 9191;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,1274,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new LogicalExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                this.pushNewRecursionContext(localctx, _startState, MySqlParser.RULE_expression);
	                this.state = 9185;
	                if (!( this.precpred(this._ctx, 4))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                }
	                this.state = 9186;
	                this.logicalOperator();
	                this.state = 9187;
	                this.expression(5); 
	            }
	            this.state = 9193;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,1274,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	predicate(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new PredicateContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 1016;
	    this.enterRecursionRule(localctx, 1016, MySqlParser.RULE_predicate, _p);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        localctx = new ExpressionAtomPredicateContext(this, localctx);
	        this._ctx = localctx;
	        _prevctx = localctx;

	        this.state = 9195;
	        this.expressionAtom(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 9254;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,1282,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 9252;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,1281,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new BinaryComparasionPredicateContext(this, new PredicateContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, MySqlParser.RULE_predicate);
	                    this.state = 9197;
	                    if (!( this.precpred(this._ctx, 7))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
	                    }
	                    this.state = 9198;
	                    this.comparisonOperator();
	                    this.state = 9199;
	                    localctx.right = this.predicate(8);
	                    break;

	                case 2:
	                    localctx = new BetweenPredicateContext(this, new PredicateContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, MySqlParser.RULE_predicate);
	                    this.state = 9201;
	                    if (!( this.precpred(this._ctx, 5))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
	                    }
	                    this.state = 9203;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===MySqlParser.NOT) {
	                        this.state = 9202;
	                        this.match(MySqlParser.NOT);
	                    }

	                    this.state = 9205;
	                    this.match(MySqlParser.BETWEEN);
	                    this.state = 9206;
	                    this.predicate(0);
	                    this.state = 9207;
	                    this.match(MySqlParser.AND);
	                    this.state = 9208;
	                    this.predicate(6);
	                    break;

	                case 3:
	                    localctx = new SoundsLikePredicateContext(this, new PredicateContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, MySqlParser.RULE_predicate);
	                    this.state = 9210;
	                    if (!( this.precpred(this._ctx, 4))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                    }
	                    this.state = 9211;
	                    this.match(MySqlParser.SOUNDS);
	                    this.state = 9212;
	                    this.match(MySqlParser.LIKE);
	                    this.state = 9213;
	                    this.predicate(5);
	                    break;

	                case 4:
	                    localctx = new RegexpPredicateContext(this, new PredicateContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, MySqlParser.RULE_predicate);
	                    this.state = 9214;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 9216;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===MySqlParser.NOT) {
	                        this.state = 9215;
	                        this.match(MySqlParser.NOT);
	                    }

	                    this.state = 9218;
	                    localctx.regex = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===MySqlParser.REGEXP || _la===MySqlParser.RLIKE)) {
	                        localctx.regex = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 9219;
	                    this.predicate(3);
	                    break;

	                case 5:
	                    localctx = new InPredicateContext(this, new PredicateContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, MySqlParser.RULE_predicate);
	                    this.state = 9220;
	                    if (!( this.precpred(this._ctx, 9))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
	                    }
	                    this.state = 9222;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===MySqlParser.NOT) {
	                        this.state = 9221;
	                        this.match(MySqlParser.NOT);
	                    }

	                    this.state = 9224;
	                    this.match(MySqlParser.IN);
	                    this.state = 9225;
	                    this.match(MySqlParser.LR_BRACKET);
	                    this.state = 9228;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,1278,this._ctx);
	                    switch(la_) {
	                    case 1:
	                        this.state = 9226;
	                        this.selectStatementPlus();
	                        break;

	                    case 2:
	                        this.state = 9227;
	                        this.expressions();
	                        break;

	                    }
	                    this.state = 9230;
	                    this.match(MySqlParser.RR_BRACKET);
	                    break;

	                case 6:
	                    localctx = new IsNullPredicateContext(this, new PredicateContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, MySqlParser.RULE_predicate);
	                    this.state = 9232;
	                    if (!( this.precpred(this._ctx, 8))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
	                    }
	                    this.state = 9233;
	                    this.match(MySqlParser.IS);
	                    this.state = 9234;
	                    this.nullNotnull();
	                    break;

	                case 7:
	                    localctx = new SubqueryComparasionPredicateContext(this, new PredicateContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, MySqlParser.RULE_predicate);
	                    this.state = 9235;
	                    if (!( this.precpred(this._ctx, 6))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
	                    }
	                    this.state = 9236;
	                    this.comparisonOperator();
	                    this.state = 9237;
	                    localctx.quantifier = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===MySqlParser.ALL || _la===MySqlParser.ANY || _la===MySqlParser.SOME)) {
	                        localctx.quantifier = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 9238;
	                    this.match(MySqlParser.LR_BRACKET);
	                    this.state = 9239;
	                    this.selectStatementPlus();
	                    this.state = 9240;
	                    this.match(MySqlParser.RR_BRACKET);
	                    break;

	                case 8:
	                    localctx = new LikePredicateContext(this, new PredicateContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, MySqlParser.RULE_predicate);
	                    this.state = 9242;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 9244;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===MySqlParser.NOT) {
	                        this.state = 9243;
	                        this.match(MySqlParser.NOT);
	                    }

	                    this.state = 9246;
	                    this.match(MySqlParser.LIKE);
	                    this.state = 9247;
	                    this.predicate(0);
	                    this.state = 9250;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,1280,this._ctx);
	                    if(la_===1) {
	                        this.state = 9248;
	                        this.match(MySqlParser.ESCAPE);
	                        this.state = 9249;
	                        this.match(MySqlParser.STRING_LITERAL);

	                    }
	                    break;

	                } 
	            }
	            this.state = 9256;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,1282,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	expressionAtom(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ExpressionAtomContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 1018;
	    this.enterRecursionRule(localctx, 1018, MySqlParser.RULE_expressionAtom, _p);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9314;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1287,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new ConstantExpressionAtomContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;

	            this.state = 9258;
	            this.constant();
	            break;

	        case 2:
	            localctx = new FullColumnNameExpressionAtomContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 9259;
	            this.funcColumnName();
	            break;

	        case 3:
	            localctx = new FunctionCallExpressionAtomContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 9260;
	            this.functionCall();
	            break;

	        case 4:
	            localctx = new GeneralElementExpressionAtomContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 9261;
	            if (!( this.isDialect('inceptor'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('inceptor')");
	            }
	            this.state = 9262;
	            this.generalElement();
	            break;

	        case 5:
	            localctx = new CursorAttributeExpressionAtomContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 9263;
	            if (!( this.isDialect('inceptor'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('inceptor')");
	            }
	            this.state = 9266;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1283,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 9264;
	                this.cursorName();
	                break;

	            case 2:
	                this.state = 9265;
	                this.match(MySqlParser.SQL);
	                break;

	            }
	            this.state = 9268;
	            this.cursorAttribute();
	            break;

	        case 6:
	            localctx = new MysqlVariableExpressionAtomContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 9269;
	            if (!( this.isDialect('mysql'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('mysql')");
	            }
	            this.state = 9270;
	            this.mysqlVariable();
	            break;

	        case 7:
	            localctx = new UnaryExpressionAtomContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 9274;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1284,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 9271;
	                this.unaryOperator();
	                break;

	            case 2:
	                this.state = 9272;
	                this.unaryPriorOperator();
	                break;

	            case 3:
	                this.state = 9273;
	                this.match(MySqlParser.NOT);
	                break;

	            }
	            this.state = 9276;
	            this.expressionAtom(9);
	            break;

	        case 8:
	            localctx = new BinaryExpressionAtomContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 9277;
	            this.match(MySqlParser.BINARY);
	            this.state = 9278;
	            this.expressionAtom(8);
	            break;

	        case 9:
	            localctx = new NestedExpressionAtomContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 9279;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 9280;
	            this.expression(0);
	            this.state = 9285;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.COMMA) {
	                this.state = 9281;
	                this.match(MySqlParser.COMMA);
	                this.state = 9282;
	                this.expression(0);
	                this.state = 9287;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 9288;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 10:
	            localctx = new NestedRowExpressionAtomContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 9290;
	            this.match(MySqlParser.ROW);
	            this.state = 9291;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 9292;
	            this.expression(0);
	            this.state = 9295; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 9293;
	                this.match(MySqlParser.COMMA);
	                this.state = 9294;
	                this.expression(0);
	                this.state = 9297; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===MySqlParser.COMMA);
	            this.state = 9299;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 11:
	            localctx = new ExistsExpessionAtomContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 9301;
	            this.match(MySqlParser.EXISTS);
	            this.state = 9302;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 9303;
	            this.selectStatementPlus();
	            this.state = 9304;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 12:
	            localctx = new SubqueryExpessionAtomContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 9306;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 9307;
	            this.selectStatementPlus();
	            this.state = 9308;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 13:
	            localctx = new IntervalExpressionAtomContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 9310;
	            this.match(MySqlParser.INTERVAL);
	            this.state = 9311;
	            this.expression(0);
	            this.state = 9312;
	            this.intervalType();
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 9329;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,1289,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 9327;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,1288,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new BitExpressionAtomContext(this, new ExpressionAtomContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, MySqlParser.RULE_expressionAtom);
	                    this.state = 9316;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 9317;
	                    this.bitOperator();
	                    this.state = 9318;
	                    localctx.right = this.expressionAtom(3);
	                    break;

	                case 2:
	                    localctx = new MathExpressionAtomContext(this, new ExpressionAtomContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, MySqlParser.RULE_expressionAtom);
	                    this.state = 9320;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 9321;
	                    this.mathOperator();
	                    this.state = 9322;
	                    localctx.right = this.expressionAtom(2);
	                    break;

	                case 3:
	                    localctx = new CollateExpressionAtomContext(this, new ExpressionAtomContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, MySqlParser.RULE_expressionAtom);
	                    this.state = 9324;
	                    if (!( this.precpred(this._ctx, 11))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
	                    }
	                    this.state = 9325;
	                    this.match(MySqlParser.COLLATE);
	                    this.state = 9326;
	                    this.collationName();
	                    break;

	                } 
	            }
	            this.state = 9331;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,1289,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	unaryPriorOperator() {
	    let localctx = new UnaryPriorOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1020, MySqlParser.RULE_unaryPriorOperator);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9332;
	        if (!( this.isDialect('inceptor'))) {
	            throw new antlr4.error.FailedPredicateException(this, "this.isDialect('inceptor')");
	        }
	        this.state = 9333;
	        this.match(MySqlParser.PRIOR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unaryOperator() {
	    let localctx = new UnaryOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1022, MySqlParser.RULE_unaryOperator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9335;
	        _la = this._input.LA(1);
	        if(!(((((_la - 846)) & ~0x1f) == 0 && ((1 << (_la - 846)) & ((1 << (MySqlParser.PLUS - 846)) | (1 << (MySqlParser.MINUS - 846)) | (1 << (MySqlParser.EXCLAMATION_SYMBOL - 846)) | (1 << (MySqlParser.BIT_NOT_OP - 846)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	comparisonOperator() {
	    let localctx = new ComparisonOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1024, MySqlParser.RULE_comparisonOperator);
	    try {
	        this.state = 9351;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1290,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9337;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 9338;
	            this.match(MySqlParser.GREATER_SYMBOL);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 9339;
	            this.match(MySqlParser.LESS_SYMBOL);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 9340;
	            this.match(MySqlParser.LESS_SYMBOL);
	            this.state = 9341;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 9342;
	            this.match(MySqlParser.GREATER_SYMBOL);
	            this.state = 9343;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 9344;
	            this.match(MySqlParser.LESS_SYMBOL);
	            this.state = 9345;
	            this.match(MySqlParser.GREATER_SYMBOL);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 9346;
	            this.match(MySqlParser.EXCLAMATION_SYMBOL);
	            this.state = 9347;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 9348;
	            this.match(MySqlParser.LESS_SYMBOL);
	            this.state = 9349;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 9350;
	            this.match(MySqlParser.GREATER_SYMBOL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	logicalOperator() {
	    let localctx = new LogicalOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1026, MySqlParser.RULE_logicalOperator);
	    try {
	        this.state = 9360;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.AND:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9353;
	            this.match(MySqlParser.AND);
	            break;
	        case MySqlParser.BIT_AND_OP:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 9354;
	            this.match(MySqlParser.BIT_AND_OP);
	            this.state = 9355;
	            this.match(MySqlParser.BIT_AND_OP);
	            break;
	        case MySqlParser.XOR:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 9356;
	            this.match(MySqlParser.XOR);
	            break;
	        case MySqlParser.OR:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 9357;
	            this.match(MySqlParser.OR);
	            break;
	        case MySqlParser.BIT_OR_OP:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 9358;
	            this.match(MySqlParser.BIT_OR_OP);
	            this.state = 9359;
	            this.match(MySqlParser.BIT_OR_OP);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bitOperator() {
	    let localctx = new BitOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1028, MySqlParser.RULE_bitOperator);
	    try {
	        this.state = 9369;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.LESS_SYMBOL:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9362;
	            this.match(MySqlParser.LESS_SYMBOL);
	            this.state = 9363;
	            this.match(MySqlParser.LESS_SYMBOL);
	            break;
	        case MySqlParser.GREATER_SYMBOL:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 9364;
	            this.match(MySqlParser.GREATER_SYMBOL);
	            this.state = 9365;
	            this.match(MySqlParser.GREATER_SYMBOL);
	            break;
	        case MySqlParser.BIT_AND_OP:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 9366;
	            this.match(MySqlParser.BIT_AND_OP);
	            break;
	        case MySqlParser.BIT_XOR_OP:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 9367;
	            this.match(MySqlParser.BIT_XOR_OP);
	            break;
	        case MySqlParser.BIT_OR_OP:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 9368;
	            this.match(MySqlParser.BIT_OR_OP);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mathOperator() {
	    let localctx = new MathOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1030, MySqlParser.RULE_mathOperator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9371;
	        _la = this._input.LA(1);
	        if(!(((((_la - 843)) & ~0x1f) == 0 && ((1 << (_la - 843)) & ((1 << (MySqlParser.STAR - 843)) | (1 << (MySqlParser.DIVIDE - 843)) | (1 << (MySqlParser.MODULE - 843)) | (1 << (MySqlParser.PLUS - 843)) | (1 << (MySqlParser.MINUSMINUS - 843)) | (1 << (MySqlParser.MINUS - 843)) | (1 << (MySqlParser.DIV - 843)) | (1 << (MySqlParser.MOD - 843)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cursorAttribute() {
	    let localctx = new CursorAttributeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1032, MySqlParser.RULE_cursorAttribute);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9373;
	        this.match(MySqlParser.MODULE);
	        this.state = 9374;
	        _la = this._input.LA(1);
	        if(!(((((_la - 314)) & ~0x1f) == 0 && ((1 << (_la - 314)) & ((1 << (MySqlParser.ISOPEN - 314)) | (1 << (MySqlParser.NOTFOUND - 314)) | (1 << (MySqlParser.ROWTYPE - 314)) | (1 << (MySqlParser.ROWCOUNT - 314)))) !== 0) || _la===MySqlParser.FOUND)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	charsetNameBase() {
	    let localctx = new CharsetNameBaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1034, MySqlParser.RULE_charsetNameBase);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9376;
	        _la = this._input.LA(1);
	        if(!(((((_la - 749)) & ~0x1f) == 0 && ((1 << (_la - 749)) & ((1 << (MySqlParser.ARMSCII8 - 749)) | (1 << (MySqlParser.ASCII - 749)) | (1 << (MySqlParser.BIG5 - 749)) | (1 << (MySqlParser.CP1250 - 749)) | (1 << (MySqlParser.CP1251 - 749)) | (1 << (MySqlParser.CP1256 - 749)) | (1 << (MySqlParser.CP1257 - 749)) | (1 << (MySqlParser.CP850 - 749)) | (1 << (MySqlParser.CP852 - 749)) | (1 << (MySqlParser.CP866 - 749)) | (1 << (MySqlParser.CP932 - 749)) | (1 << (MySqlParser.DEC8 - 749)) | (1 << (MySqlParser.EUCJPMS - 749)) | (1 << (MySqlParser.EUCKR - 749)) | (1 << (MySqlParser.GB2312 - 749)) | (1 << (MySqlParser.GBK - 749)) | (1 << (MySqlParser.GEOSTD8 - 749)) | (1 << (MySqlParser.GREEK - 749)) | (1 << (MySqlParser.HEBREW - 749)) | (1 << (MySqlParser.HP8 - 749)) | (1 << (MySqlParser.KEYBCS2 - 749)) | (1 << (MySqlParser.KOI8R - 749)) | (1 << (MySqlParser.KOI8U - 749)) | (1 << (MySqlParser.LATIN1 - 749)) | (1 << (MySqlParser.LATIN2 - 749)) | (1 << (MySqlParser.LATIN5 - 749)) | (1 << (MySqlParser.LATIN7 - 749)) | (1 << (MySqlParser.MACCE - 749)) | (1 << (MySqlParser.MACROMAN - 749)) | (1 << (MySqlParser.SJIS - 749)) | (1 << (MySqlParser.SWE7 - 749)) | (1 << (MySqlParser.TIS620 - 749)))) !== 0) || ((((_la - 781)) & ~0x1f) == 0 && ((1 << (_la - 781)) & ((1 << (MySqlParser.UCS2 - 781)) | (1 << (MySqlParser.UJIS - 781)) | (1 << (MySqlParser.UTF16 - 781)) | (1 << (MySqlParser.UTF16LE - 781)) | (1 << (MySqlParser.UTF32 - 781)) | (1 << (MySqlParser.UTF8 - 781)) | (1 << (MySqlParser.UTF8MB3 - 781)) | (1 << (MySqlParser.UTF8MB4 - 781)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transactionLevelBase() {
	    let localctx = new TransactionLevelBaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1036, MySqlParser.RULE_transactionLevelBase);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9378;
	        _la = this._input.LA(1);
	        if(!(((((_la - 814)) & ~0x1f) == 0 && ((1 << (_la - 814)) & ((1 << (MySqlParser.REPEATABLE - 814)) | (1 << (MySqlParser.COMMITTED - 814)) | (1 << (MySqlParser.UNCOMMITTED - 814)) | (1 << (MySqlParser.SERIALIZABLE - 814)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	privilegesBase() {
	    let localctx = new PrivilegesBaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1038, MySqlParser.RULE_privilegesBase);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9380;
	        _la = this._input.LA(1);
	        if(!(((((_la - 740)) & ~0x1f) == 0 && ((1 << (_la - 740)) & ((1 << (MySqlParser.TABLES - 740)) | (1 << (MySqlParser.ROUTINE - 740)) | (1 << (MySqlParser.EXECUTE - 740)) | (1 << (MySqlParser.FILE - 740)) | (1 << (MySqlParser.PROCESS - 740)) | (1 << (MySqlParser.RELOAD - 740)) | (1 << (MySqlParser.SHUTDOWN - 740)) | (1 << (MySqlParser.SUPER - 740)) | (1 << (MySqlParser.PRIVILEGES - 740)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	intervalTypeBase() {
	    let localctx = new IntervalTypeBaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1040, MySqlParser.RULE_intervalTypeBase);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9382;
	        _la = this._input.LA(1);
	        if(!(((((_la - 732)) & ~0x1f) == 0 && ((1 << (_la - 732)) & ((1 << (MySqlParser.QUARTER - 732)) | (1 << (MySqlParser.MONTH - 732)) | (1 << (MySqlParser.DAY - 732)) | (1 << (MySqlParser.HOUR - 732)) | (1 << (MySqlParser.MINUTE - 732)) | (1 << (MySqlParser.WEEK - 732)) | (1 << (MySqlParser.SECOND - 732)) | (1 << (MySqlParser.MICROSECOND - 732)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataTypeBase() {
	    let localctx = new DataTypeBaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1042, MySqlParser.RULE_dataTypeBase);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9384;
	        _la = this._input.LA(1);
	        if(!(((((_la - 350)) & ~0x1f) == 0 && ((1 << (_la - 350)) & ((1 << (MySqlParser.DATE - 350)) | (1 << (MySqlParser.TIME - 350)) | (1 << (MySqlParser.TIMESTAMP - 350)) | (1 << (MySqlParser.DATETIME - 350)) | (1 << (MySqlParser.YEAR - 350)) | (1 << (MySqlParser.TEXT - 350)) | (1 << (MySqlParser.ENUM - 350)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keywordsCanBeId() {
	    let localctx = new KeywordsCanBeIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1044, MySqlParser.RULE_keywordsCanBeId);
	    try {
	        this.state = 9687;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1293,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9386;
	            this.match(MySqlParser.ACCOUNT);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 9387;
	            this.match(MySqlParser.ACTION);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 9388;
	            this.match(MySqlParser.AFTER);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 9389;
	            this.match(MySqlParser.AGGREGATE);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 9390;
	            this.match(MySqlParser.ALGORITHM);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 9391;
	            this.match(MySqlParser.ANY);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 9392;
	            this.match(MySqlParser.AT);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 9393;
	            this.match(MySqlParser.AUTHORS);
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 9394;
	            this.match(MySqlParser.AUTOCOMMIT);
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 9395;
	            this.match(MySqlParser.AUTOEXTEND_SIZE);
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 9396;
	            this.match(MySqlParser.AUTO_INCREMENT);
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 9397;
	            this.match(MySqlParser.AVG_ROW_LENGTH);
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 9398;
	            this.match(MySqlParser.BINLOG);
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 9399;
	            this.match(MySqlParser.BIT);
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 9400;
	            this.match(MySqlParser.BLOCK);
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 9401;
	            this.match(MySqlParser.BOOL);
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 9402;
	            this.match(MySqlParser.BOOLEAN);
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 9403;
	            this.match(MySqlParser.BTREE);
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 9404;
	            this.match(MySqlParser.CACHE);
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 9405;
	            this.match(MySqlParser.CASCADED);
	            break;

	        case 21:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 9406;
	            this.match(MySqlParser.CHAIN);
	            break;

	        case 22:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 9407;
	            this.match(MySqlParser.CHANGED);
	            break;

	        case 23:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 9408;
	            this.match(MySqlParser.CHANNEL);
	            break;

	        case 24:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 9409;
	            this.match(MySqlParser.CHECKSUM);
	            break;

	        case 25:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 9410;
	            this.match(MySqlParser.PAGE_CHECKSUM);
	            break;

	        case 26:
	            this.enterOuterAlt(localctx, 26);
	            this.state = 9411;
	            this.match(MySqlParser.CIPHER);
	            break;

	        case 27:
	            this.enterOuterAlt(localctx, 27);
	            this.state = 9412;
	            this.match(MySqlParser.CLIENT);
	            break;

	        case 28:
	            this.enterOuterAlt(localctx, 28);
	            this.state = 9413;
	            this.match(MySqlParser.CLOSE);
	            break;

	        case 29:
	            this.enterOuterAlt(localctx, 29);
	            this.state = 9414;
	            this.match(MySqlParser.COALESCE);
	            break;

	        case 30:
	            this.enterOuterAlt(localctx, 30);
	            this.state = 9415;
	            this.match(MySqlParser.CODE);
	            break;

	        case 31:
	            this.enterOuterAlt(localctx, 31);
	            this.state = 9416;
	            this.match(MySqlParser.COLUMNS);
	            break;

	        case 32:
	            this.enterOuterAlt(localctx, 32);
	            this.state = 9417;
	            this.match(MySqlParser.COLUMN_FORMAT);
	            break;

	        case 33:
	            this.enterOuterAlt(localctx, 33);
	            this.state = 9418;
	            this.match(MySqlParser.COMMENT);
	            break;

	        case 34:
	            this.enterOuterAlt(localctx, 34);
	            this.state = 9419;
	            this.match(MySqlParser.COMMIT);
	            break;

	        case 35:
	            this.enterOuterAlt(localctx, 35);
	            this.state = 9420;
	            this.match(MySqlParser.COMPACT);
	            break;

	        case 36:
	            this.enterOuterAlt(localctx, 36);
	            this.state = 9421;
	            this.match(MySqlParser.COMPLETION);
	            break;

	        case 37:
	            this.enterOuterAlt(localctx, 37);
	            this.state = 9422;
	            this.match(MySqlParser.COMPRESSED);
	            break;

	        case 38:
	            this.enterOuterAlt(localctx, 38);
	            this.state = 9423;
	            this.match(MySqlParser.COMPRESSION);
	            break;

	        case 39:
	            this.enterOuterAlt(localctx, 39);
	            this.state = 9424;
	            this.match(MySqlParser.CONCURRENT);
	            break;

	        case 40:
	            this.enterOuterAlt(localctx, 40);
	            this.state = 9425;
	            this.match(MySqlParser.CONNECTION);
	            break;

	        case 41:
	            this.enterOuterAlt(localctx, 41);
	            this.state = 9426;
	            this.match(MySqlParser.CONSISTENT);
	            break;

	        case 42:
	            this.enterOuterAlt(localctx, 42);
	            this.state = 9427;
	            this.match(MySqlParser.CONTAINS);
	            break;

	        case 43:
	            this.enterOuterAlt(localctx, 43);
	            this.state = 9428;
	            this.match(MySqlParser.CONTEXT);
	            break;

	        case 44:
	            this.enterOuterAlt(localctx, 44);
	            this.state = 9429;
	            this.match(MySqlParser.CONTRIBUTORS);
	            break;

	        case 45:
	            this.enterOuterAlt(localctx, 45);
	            this.state = 9430;
	            this.match(MySqlParser.COPY);
	            break;

	        case 46:
	            this.enterOuterAlt(localctx, 46);
	            this.state = 9431;
	            this.match(MySqlParser.CPU);
	            break;

	        case 47:
	            this.enterOuterAlt(localctx, 47);
	            this.state = 9432;
	            this.match(MySqlParser.DATA);
	            break;

	        case 48:
	            this.enterOuterAlt(localctx, 48);
	            this.state = 9433;
	            this.match(MySqlParser.DATAFILE);
	            break;

	        case 49:
	            this.enterOuterAlt(localctx, 49);
	            this.state = 9434;
	            this.match(MySqlParser.DEALLOCATE);
	            break;

	        case 50:
	            this.enterOuterAlt(localctx, 50);
	            this.state = 9435;
	            this.match(MySqlParser.DEFAULT_AUTH);
	            break;

	        case 51:
	            this.enterOuterAlt(localctx, 51);
	            this.state = 9436;
	            this.match(MySqlParser.DEFINER);
	            break;

	        case 52:
	            this.enterOuterAlt(localctx, 52);
	            this.state = 9437;
	            this.match(MySqlParser.DELAY_KEY_WRITE);
	            break;

	        case 53:
	            this.enterOuterAlt(localctx, 53);
	            this.state = 9438;
	            this.match(MySqlParser.DES_KEY_FILE);
	            break;

	        case 54:
	            this.enterOuterAlt(localctx, 54);
	            this.state = 9439;
	            this.match(MySqlParser.DIRECTORY);
	            break;

	        case 55:
	            this.enterOuterAlt(localctx, 55);
	            this.state = 9440;
	            this.match(MySqlParser.DISABLE);
	            break;

	        case 56:
	            this.enterOuterAlt(localctx, 56);
	            this.state = 9441;
	            this.match(MySqlParser.DISCARD);
	            break;

	        case 57:
	            this.enterOuterAlt(localctx, 57);
	            this.state = 9442;
	            this.match(MySqlParser.DISK);
	            break;

	        case 58:
	            this.enterOuterAlt(localctx, 58);
	            this.state = 9443;
	            this.match(MySqlParser.DO);
	            break;

	        case 59:
	            this.enterOuterAlt(localctx, 59);
	            this.state = 9444;
	            this.match(MySqlParser.DUMPFILE);
	            break;

	        case 60:
	            this.enterOuterAlt(localctx, 60);
	            this.state = 9445;
	            this.match(MySqlParser.DUPLICATE);
	            break;

	        case 61:
	            this.enterOuterAlt(localctx, 61);
	            this.state = 9446;
	            this.match(MySqlParser.DYNAMIC);
	            break;

	        case 62:
	            this.enterOuterAlt(localctx, 62);
	            this.state = 9447;
	            this.match(MySqlParser.ENABLE);
	            break;

	        case 63:
	            this.enterOuterAlt(localctx, 63);
	            this.state = 9448;
	            this.match(MySqlParser.ENCRYPTION);
	            break;

	        case 64:
	            this.enterOuterAlt(localctx, 64);
	            this.state = 9449;
	            this.match(MySqlParser.ENDS);
	            break;

	        case 65:
	            this.enterOuterAlt(localctx, 65);
	            this.state = 9450;
	            this.match(MySqlParser.ENGINE);
	            break;

	        case 66:
	            this.enterOuterAlt(localctx, 66);
	            this.state = 9451;
	            this.match(MySqlParser.ENGINES);
	            break;

	        case 67:
	            this.enterOuterAlt(localctx, 67);
	            this.state = 9452;
	            this.match(MySqlParser.ERROR);
	            break;

	        case 68:
	            this.enterOuterAlt(localctx, 68);
	            this.state = 9453;
	            this.match(MySqlParser.ERRORS);
	            break;

	        case 69:
	            this.enterOuterAlt(localctx, 69);
	            this.state = 9454;
	            this.match(MySqlParser.ESCAPE);
	            break;

	        case 70:
	            this.enterOuterAlt(localctx, 70);
	            this.state = 9455;
	            this.match(MySqlParser.EVEN);
	            break;

	        case 71:
	            this.enterOuterAlt(localctx, 71);
	            this.state = 9456;
	            this.match(MySqlParser.EVENT);
	            break;

	        case 72:
	            this.enterOuterAlt(localctx, 72);
	            this.state = 9457;
	            this.match(MySqlParser.EVENTS);
	            break;

	        case 73:
	            this.enterOuterAlt(localctx, 73);
	            this.state = 9458;
	            this.match(MySqlParser.EVERY);
	            break;

	        case 74:
	            this.enterOuterAlt(localctx, 74);
	            this.state = 9459;
	            this.match(MySqlParser.EXCHANGE);
	            break;

	        case 75:
	            this.enterOuterAlt(localctx, 75);
	            this.state = 9460;
	            this.match(MySqlParser.EXCLUSIVE);
	            break;

	        case 76:
	            this.enterOuterAlt(localctx, 76);
	            this.state = 9461;
	            this.match(MySqlParser.EXPIRE);
	            break;

	        case 77:
	            this.enterOuterAlt(localctx, 77);
	            this.state = 9462;
	            this.match(MySqlParser.EXPORT);
	            break;

	        case 78:
	            this.enterOuterAlt(localctx, 78);
	            this.state = 9463;
	            this.match(MySqlParser.EXTENT_SIZE);
	            break;

	        case 79:
	            this.enterOuterAlt(localctx, 79);
	            this.state = 9464;
	            this.match(MySqlParser.FAST);
	            break;

	        case 80:
	            this.enterOuterAlt(localctx, 80);
	            this.state = 9465;
	            this.match(MySqlParser.FAULTS);
	            break;

	        case 81:
	            this.enterOuterAlt(localctx, 81);
	            this.state = 9466;
	            this.match(MySqlParser.FIELDS);
	            break;

	        case 82:
	            this.enterOuterAlt(localctx, 82);
	            this.state = 9467;
	            this.match(MySqlParser.FILE_BLOCK_SIZE);
	            break;

	        case 83:
	            this.enterOuterAlt(localctx, 83);
	            this.state = 9468;
	            this.match(MySqlParser.FILTER);
	            break;

	        case 84:
	            this.enterOuterAlt(localctx, 84);
	            this.state = 9469;
	            this.match(MySqlParser.FIRST);
	            break;

	        case 85:
	            this.enterOuterAlt(localctx, 85);
	            this.state = 9470;
	            this.match(MySqlParser.FIXED);
	            break;

	        case 86:
	            this.enterOuterAlt(localctx, 86);
	            this.state = 9471;
	            this.match(MySqlParser.FLUSH);
	            break;

	        case 87:
	            this.enterOuterAlt(localctx, 87);
	            this.state = 9472;
	            this.match(MySqlParser.FOLLOWS);
	            break;

	        case 88:
	            this.enterOuterAlt(localctx, 88);
	            this.state = 9473;
	            this.match(MySqlParser.FOUND);
	            break;

	        case 89:
	            this.enterOuterAlt(localctx, 89);
	            this.state = 9474;
	            this.match(MySqlParser.FULL);
	            break;

	        case 90:
	            this.enterOuterAlt(localctx, 90);
	            this.state = 9475;
	            this.match(MySqlParser.GENERAL);
	            break;

	        case 91:
	            this.enterOuterAlt(localctx, 91);
	            this.state = 9476;
	            this.match(MySqlParser.GLOBAL);
	            break;

	        case 92:
	            this.enterOuterAlt(localctx, 92);
	            this.state = 9477;
	            this.match(MySqlParser.GRANTS);
	            break;

	        case 93:
	            this.enterOuterAlt(localctx, 93);
	            this.state = 9478;
	            this.match(MySqlParser.GROUP_REPLICATION);
	            break;

	        case 94:
	            this.enterOuterAlt(localctx, 94);
	            this.state = 9479;
	            this.match(MySqlParser.HANDLER);
	            break;

	        case 95:
	            this.enterOuterAlt(localctx, 95);
	            this.state = 9480;
	            this.match(MySqlParser.HASH);
	            break;

	        case 96:
	            this.enterOuterAlt(localctx, 96);
	            this.state = 9481;
	            this.match(MySqlParser.HELP);
	            break;

	        case 97:
	            this.enterOuterAlt(localctx, 97);
	            this.state = 9482;
	            this.match(MySqlParser.HOST);
	            break;

	        case 98:
	            this.enterOuterAlt(localctx, 98);
	            this.state = 9483;
	            this.match(MySqlParser.HOSTS);
	            break;

	        case 99:
	            this.enterOuterAlt(localctx, 99);
	            this.state = 9484;
	            this.match(MySqlParser.IDENTIFIED);
	            break;

	        case 100:
	            this.enterOuterAlt(localctx, 100);
	            this.state = 9485;
	            this.match(MySqlParser.IGNORE_SERVER_IDS);
	            break;

	        case 101:
	            this.enterOuterAlt(localctx, 101);
	            this.state = 9486;
	            this.match(MySqlParser.IMPORT);
	            break;

	        case 102:
	            this.enterOuterAlt(localctx, 102);
	            this.state = 9487;
	            this.match(MySqlParser.INDEXES);
	            break;

	        case 103:
	            this.enterOuterAlt(localctx, 103);
	            this.state = 9488;
	            this.match(MySqlParser.INITIAL_SIZE);
	            break;

	        case 104:
	            this.enterOuterAlt(localctx, 104);
	            this.state = 9489;
	            this.match(MySqlParser.INPLACE);
	            break;

	        case 105:
	            this.enterOuterAlt(localctx, 105);
	            this.state = 9490;
	            this.match(MySqlParser.INSERT_METHOD);
	            break;

	        case 106:
	            this.enterOuterAlt(localctx, 106);
	            this.state = 9491;
	            this.match(MySqlParser.INSTALL);
	            break;

	        case 107:
	            this.enterOuterAlt(localctx, 107);
	            this.state = 9492;
	            this.match(MySqlParser.INSTANCE);
	            break;

	        case 108:
	            this.enterOuterAlt(localctx, 108);
	            this.state = 9493;
	            this.match(MySqlParser.INVOKER);
	            break;

	        case 109:
	            this.enterOuterAlt(localctx, 109);
	            this.state = 9494;
	            this.match(MySqlParser.IO);
	            break;

	        case 110:
	            this.enterOuterAlt(localctx, 110);
	            this.state = 9495;
	            this.match(MySqlParser.IO_THREAD);
	            break;

	        case 111:
	            this.enterOuterAlt(localctx, 111);
	            this.state = 9496;
	            this.match(MySqlParser.IPC);
	            break;

	        case 112:
	            this.enterOuterAlt(localctx, 112);
	            this.state = 9497;
	            this.match(MySqlParser.ISOLATION);
	            break;

	        case 113:
	            this.enterOuterAlt(localctx, 113);
	            this.state = 9498;
	            this.match(MySqlParser.ISSUER);
	            break;

	        case 114:
	            this.enterOuterAlt(localctx, 114);
	            this.state = 9499;
	            this.match(MySqlParser.JSON);
	            break;

	        case 115:
	            this.enterOuterAlt(localctx, 115);
	            this.state = 9500;
	            this.match(MySqlParser.KEY_BLOCK_SIZE);
	            break;

	        case 116:
	            this.enterOuterAlt(localctx, 116);
	            this.state = 9501;
	            this.match(MySqlParser.LANGUAGE);
	            break;

	        case 117:
	            this.enterOuterAlt(localctx, 117);
	            this.state = 9502;
	            this.match(MySqlParser.LAST);
	            break;

	        case 118:
	            this.enterOuterAlt(localctx, 118);
	            this.state = 9503;
	            this.match(MySqlParser.LEAVES);
	            break;

	        case 119:
	            this.enterOuterAlt(localctx, 119);
	            this.state = 9504;
	            this.match(MySqlParser.LESS);
	            break;

	        case 120:
	            this.enterOuterAlt(localctx, 120);
	            this.state = 9505;
	            this.match(MySqlParser.LEVEL);
	            break;

	        case 121:
	            this.enterOuterAlt(localctx, 121);
	            this.state = 9506;
	            this.match(MySqlParser.LIST);
	            break;

	        case 122:
	            this.enterOuterAlt(localctx, 122);
	            this.state = 9507;
	            this.match(MySqlParser.LOCAL);
	            break;

	        case 123:
	            this.enterOuterAlt(localctx, 123);
	            this.state = 9508;
	            this.match(MySqlParser.LOGFILE);
	            break;

	        case 124:
	            this.enterOuterAlt(localctx, 124);
	            this.state = 9509;
	            this.match(MySqlParser.LOGS);
	            break;

	        case 125:
	            this.enterOuterAlt(localctx, 125);
	            this.state = 9510;
	            this.match(MySqlParser.MASTER);
	            break;

	        case 126:
	            this.enterOuterAlt(localctx, 126);
	            this.state = 9511;
	            this.match(MySqlParser.MASTER_AUTO_POSITION);
	            break;

	        case 127:
	            this.enterOuterAlt(localctx, 127);
	            this.state = 9512;
	            this.match(MySqlParser.MASTER_CONNECT_RETRY);
	            break;

	        case 128:
	            this.enterOuterAlt(localctx, 128);
	            this.state = 9513;
	            this.match(MySqlParser.MASTER_DELAY);
	            break;

	        case 129:
	            this.enterOuterAlt(localctx, 129);
	            this.state = 9514;
	            this.match(MySqlParser.MASTER_HEARTBEAT_PERIOD);
	            break;

	        case 130:
	            this.enterOuterAlt(localctx, 130);
	            this.state = 9515;
	            this.match(MySqlParser.MASTER_HOST);
	            break;

	        case 131:
	            this.enterOuterAlt(localctx, 131);
	            this.state = 9516;
	            this.match(MySqlParser.MASTER_LOG_FILE);
	            break;

	        case 132:
	            this.enterOuterAlt(localctx, 132);
	            this.state = 9517;
	            this.match(MySqlParser.MASTER_LOG_POS);
	            break;

	        case 133:
	            this.enterOuterAlt(localctx, 133);
	            this.state = 9518;
	            this.match(MySqlParser.MASTER_PASSWORD);
	            break;

	        case 134:
	            this.enterOuterAlt(localctx, 134);
	            this.state = 9519;
	            this.match(MySqlParser.MASTER_PORT);
	            break;

	        case 135:
	            this.enterOuterAlt(localctx, 135);
	            this.state = 9520;
	            this.match(MySqlParser.MASTER_RETRY_COUNT);
	            break;

	        case 136:
	            this.enterOuterAlt(localctx, 136);
	            this.state = 9521;
	            this.match(MySqlParser.MASTER_SSL);
	            break;

	        case 137:
	            this.enterOuterAlt(localctx, 137);
	            this.state = 9522;
	            this.match(MySqlParser.MASTER_SSL_CA);
	            break;

	        case 138:
	            this.enterOuterAlt(localctx, 138);
	            this.state = 9523;
	            this.match(MySqlParser.MASTER_SSL_CAPATH);
	            break;

	        case 139:
	            this.enterOuterAlt(localctx, 139);
	            this.state = 9524;
	            this.match(MySqlParser.MASTER_SSL_CERT);
	            break;

	        case 140:
	            this.enterOuterAlt(localctx, 140);
	            this.state = 9525;
	            this.match(MySqlParser.MASTER_SSL_CIPHER);
	            break;

	        case 141:
	            this.enterOuterAlt(localctx, 141);
	            this.state = 9526;
	            this.match(MySqlParser.MASTER_SSL_CRL);
	            break;

	        case 142:
	            this.enterOuterAlt(localctx, 142);
	            this.state = 9527;
	            this.match(MySqlParser.MASTER_SSL_CRLPATH);
	            break;

	        case 143:
	            this.enterOuterAlt(localctx, 143);
	            this.state = 9528;
	            this.match(MySqlParser.MASTER_SSL_KEY);
	            break;

	        case 144:
	            this.enterOuterAlt(localctx, 144);
	            this.state = 9529;
	            this.match(MySqlParser.MASTER_TLS_VERSION);
	            break;

	        case 145:
	            this.enterOuterAlt(localctx, 145);
	            this.state = 9530;
	            this.match(MySqlParser.MASTER_USER);
	            break;

	        case 146:
	            this.enterOuterAlt(localctx, 146);
	            this.state = 9531;
	            this.match(MySqlParser.MAX_CONNECTIONS_PER_HOUR);
	            break;

	        case 147:
	            this.enterOuterAlt(localctx, 147);
	            this.state = 9532;
	            this.match(MySqlParser.MAX_QUERIES_PER_HOUR);
	            break;

	        case 148:
	            this.enterOuterAlt(localctx, 148);
	            this.state = 9533;
	            this.match(MySqlParser.MAX_ROWS);
	            break;

	        case 149:
	            this.enterOuterAlt(localctx, 149);
	            this.state = 9534;
	            this.match(MySqlParser.MAX_SIZE);
	            break;

	        case 150:
	            this.enterOuterAlt(localctx, 150);
	            this.state = 9535;
	            this.match(MySqlParser.MAX_UPDATES_PER_HOUR);
	            break;

	        case 151:
	            this.enterOuterAlt(localctx, 151);
	            this.state = 9536;
	            this.match(MySqlParser.MAX_USER_CONNECTIONS);
	            break;

	        case 152:
	            this.enterOuterAlt(localctx, 152);
	            this.state = 9537;
	            this.match(MySqlParser.MEDIUM);
	            break;

	        case 153:
	            this.enterOuterAlt(localctx, 153);
	            this.state = 9538;
	            this.match(MySqlParser.MEMORY);
	            break;

	        case 154:
	            this.enterOuterAlt(localctx, 154);
	            this.state = 9539;
	            this.match(MySqlParser.MERGE);
	            break;

	        case 155:
	            this.enterOuterAlt(localctx, 155);
	            this.state = 9540;
	            this.match(MySqlParser.MID);
	            break;

	        case 156:
	            this.enterOuterAlt(localctx, 156);
	            this.state = 9541;
	            this.match(MySqlParser.MIGRATE);
	            break;

	        case 157:
	            this.enterOuterAlt(localctx, 157);
	            this.state = 9542;
	            this.match(MySqlParser.MIN_ROWS);
	            break;

	        case 158:
	            this.enterOuterAlt(localctx, 158);
	            this.state = 9543;
	            this.match(MySqlParser.MODE);
	            break;

	        case 159:
	            this.enterOuterAlt(localctx, 159);
	            this.state = 9544;
	            this.match(MySqlParser.MODIFY);
	            break;

	        case 160:
	            this.enterOuterAlt(localctx, 160);
	            this.state = 9545;
	            this.match(MySqlParser.MUTEX);
	            break;

	        case 161:
	            this.enterOuterAlt(localctx, 161);
	            this.state = 9546;
	            this.match(MySqlParser.MYSQL);
	            break;

	        case 162:
	            this.enterOuterAlt(localctx, 162);
	            this.state = 9547;
	            this.match(MySqlParser.NAME);
	            break;

	        case 163:
	            this.enterOuterAlt(localctx, 163);
	            this.state = 9548;
	            this.match(MySqlParser.NAMES);
	            break;

	        case 164:
	            this.enterOuterAlt(localctx, 164);
	            this.state = 9549;
	            this.match(MySqlParser.NCHAR);
	            break;

	        case 165:
	            this.enterOuterAlt(localctx, 165);
	            this.state = 9550;
	            this.match(MySqlParser.NEVER);
	            break;

	        case 166:
	            this.enterOuterAlt(localctx, 166);
	            this.state = 9551;
	            this.match(MySqlParser.NEXT);
	            break;

	        case 167:
	            this.enterOuterAlt(localctx, 167);
	            this.state = 9552;
	            this.match(MySqlParser.NO);
	            break;

	        case 168:
	            this.enterOuterAlt(localctx, 168);
	            this.state = 9553;
	            this.match(MySqlParser.NODEGROUP);
	            break;

	        case 169:
	            this.enterOuterAlt(localctx, 169);
	            this.state = 9554;
	            this.match(MySqlParser.NONE);
	            break;

	        case 170:
	            this.enterOuterAlt(localctx, 170);
	            this.state = 9555;
	            this.match(MySqlParser.OFFLINE);
	            break;

	        case 171:
	            this.enterOuterAlt(localctx, 171);
	            this.state = 9556;
	            this.match(MySqlParser.OFFSET);
	            break;

	        case 172:
	            this.enterOuterAlt(localctx, 172);
	            this.state = 9557;
	            this.match(MySqlParser.OJ);
	            break;

	        case 173:
	            this.enterOuterAlt(localctx, 173);
	            this.state = 9558;
	            this.match(MySqlParser.OLD_PASSWORD);
	            break;

	        case 174:
	            this.enterOuterAlt(localctx, 174);
	            this.state = 9559;
	            this.match(MySqlParser.ONE);
	            break;

	        case 175:
	            this.enterOuterAlt(localctx, 175);
	            this.state = 9560;
	            this.match(MySqlParser.ONLINE);
	            break;

	        case 176:
	            this.enterOuterAlt(localctx, 176);
	            this.state = 9561;
	            this.match(MySqlParser.ONLY);
	            break;

	        case 177:
	            this.enterOuterAlt(localctx, 177);
	            this.state = 9562;
	            this.match(MySqlParser.OPEN);
	            break;

	        case 178:
	            this.enterOuterAlt(localctx, 178);
	            this.state = 9563;
	            this.match(MySqlParser.OPTIMIZER_COSTS);
	            break;

	        case 179:
	            this.enterOuterAlt(localctx, 179);
	            this.state = 9564;
	            this.match(MySqlParser.OPTIONS);
	            break;

	        case 180:
	            this.enterOuterAlt(localctx, 180);
	            this.state = 9565;
	            this.match(MySqlParser.OWNER);
	            break;

	        case 181:
	            this.enterOuterAlt(localctx, 181);
	            this.state = 9566;
	            this.match(MySqlParser.PACK_KEYS);
	            break;

	        case 182:
	            this.enterOuterAlt(localctx, 182);
	            this.state = 9567;
	            this.match(MySqlParser.PAGE);
	            break;

	        case 183:
	            this.enterOuterAlt(localctx, 183);
	            this.state = 9568;
	            this.match(MySqlParser.PARSER);
	            break;

	        case 184:
	            this.enterOuterAlt(localctx, 184);
	            this.state = 9569;
	            this.match(MySqlParser.PARTIAL);
	            break;

	        case 185:
	            this.enterOuterAlt(localctx, 185);
	            this.state = 9570;
	            this.match(MySqlParser.PARTITIONING);
	            break;

	        case 186:
	            this.enterOuterAlt(localctx, 186);
	            this.state = 9571;
	            this.match(MySqlParser.PARTITIONS);
	            break;

	        case 187:
	            this.enterOuterAlt(localctx, 187);
	            this.state = 9572;
	            this.match(MySqlParser.PASSWORD);
	            break;

	        case 188:
	            this.enterOuterAlt(localctx, 188);
	            this.state = 9573;
	            this.match(MySqlParser.PHASE);
	            break;

	        case 189:
	            this.enterOuterAlt(localctx, 189);
	            this.state = 9574;
	            this.match(MySqlParser.PLUGINS);
	            break;

	        case 190:
	            this.enterOuterAlt(localctx, 190);
	            this.state = 9575;
	            this.match(MySqlParser.PLUGIN_DIR);
	            break;

	        case 191:
	            this.enterOuterAlt(localctx, 191);
	            this.state = 9576;
	            this.match(MySqlParser.PLUGIN);
	            break;

	        case 192:
	            this.enterOuterAlt(localctx, 192);
	            this.state = 9577;
	            this.match(MySqlParser.PORT);
	            break;

	        case 193:
	            this.enterOuterAlt(localctx, 193);
	            this.state = 9578;
	            this.match(MySqlParser.PRECEDES);
	            break;

	        case 194:
	            this.enterOuterAlt(localctx, 194);
	            this.state = 9579;
	            this.match(MySqlParser.PREPARE);
	            break;

	        case 195:
	            this.enterOuterAlt(localctx, 195);
	            this.state = 9580;
	            this.match(MySqlParser.PRESERVE);
	            break;

	        case 196:
	            this.enterOuterAlt(localctx, 196);
	            this.state = 9581;
	            this.match(MySqlParser.PREV);
	            break;

	        case 197:
	            this.enterOuterAlt(localctx, 197);
	            this.state = 9582;
	            this.match(MySqlParser.PROCESSLIST);
	            break;

	        case 198:
	            this.enterOuterAlt(localctx, 198);
	            this.state = 9583;
	            this.match(MySqlParser.PROFILE);
	            break;

	        case 199:
	            this.enterOuterAlt(localctx, 199);
	            this.state = 9584;
	            this.match(MySqlParser.PROFILES);
	            break;

	        case 200:
	            this.enterOuterAlt(localctx, 200);
	            this.state = 9585;
	            this.match(MySqlParser.PROXY);
	            break;

	        case 201:
	            this.enterOuterAlt(localctx, 201);
	            this.state = 9586;
	            this.match(MySqlParser.QUERY);
	            break;

	        case 202:
	            this.enterOuterAlt(localctx, 202);
	            this.state = 9587;
	            this.match(MySqlParser.QUICK);
	            break;

	        case 203:
	            this.enterOuterAlt(localctx, 203);
	            this.state = 9588;
	            this.match(MySqlParser.REBUILD);
	            break;

	        case 204:
	            this.enterOuterAlt(localctx, 204);
	            this.state = 9589;
	            this.match(MySqlParser.RECOVER);
	            break;

	        case 205:
	            this.enterOuterAlt(localctx, 205);
	            this.state = 9590;
	            this.match(MySqlParser.REDO_BUFFER_SIZE);
	            break;

	        case 206:
	            this.enterOuterAlt(localctx, 206);
	            this.state = 9591;
	            this.match(MySqlParser.REDUNDANT);
	            break;

	        case 207:
	            this.enterOuterAlt(localctx, 207);
	            this.state = 9592;
	            this.match(MySqlParser.RELAY);
	            break;

	        case 208:
	            this.enterOuterAlt(localctx, 208);
	            this.state = 9593;
	            this.match(MySqlParser.RELAYLOG);
	            break;

	        case 209:
	            this.enterOuterAlt(localctx, 209);
	            this.state = 9594;
	            this.match(MySqlParser.RELAY_LOG_FILE);
	            break;

	        case 210:
	            this.enterOuterAlt(localctx, 210);
	            this.state = 9595;
	            this.match(MySqlParser.RELAY_LOG_POS);
	            break;

	        case 211:
	            this.enterOuterAlt(localctx, 211);
	            this.state = 9596;
	            this.match(MySqlParser.REMOVE);
	            break;

	        case 212:
	            this.enterOuterAlt(localctx, 212);
	            this.state = 9597;
	            this.match(MySqlParser.REORGANIZE);
	            break;

	        case 213:
	            this.enterOuterAlt(localctx, 213);
	            this.state = 9598;
	            this.match(MySqlParser.REPAIR);
	            break;

	        case 214:
	            this.enterOuterAlt(localctx, 214);
	            this.state = 9599;
	            this.match(MySqlParser.REPLICATE_DO_DB);
	            break;

	        case 215:
	            this.enterOuterAlt(localctx, 215);
	            this.state = 9600;
	            this.match(MySqlParser.REPLICATE_DO_TABLE);
	            break;

	        case 216:
	            this.enterOuterAlt(localctx, 216);
	            this.state = 9601;
	            this.match(MySqlParser.REPLICATE_IGNORE_DB);
	            break;

	        case 217:
	            this.enterOuterAlt(localctx, 217);
	            this.state = 9602;
	            this.match(MySqlParser.REPLICATE_IGNORE_TABLE);
	            break;

	        case 218:
	            this.enterOuterAlt(localctx, 218);
	            this.state = 9603;
	            this.match(MySqlParser.REPLICATE_REWRITE_DB);
	            break;

	        case 219:
	            this.enterOuterAlt(localctx, 219);
	            this.state = 9604;
	            this.match(MySqlParser.REPLICATE_WILD_DO_TABLE);
	            break;

	        case 220:
	            this.enterOuterAlt(localctx, 220);
	            this.state = 9605;
	            this.match(MySqlParser.REPLICATE_WILD_IGNORE_TABLE);
	            break;

	        case 221:
	            this.enterOuterAlt(localctx, 221);
	            this.state = 9606;
	            this.match(MySqlParser.REPLICATION);
	            break;

	        case 222:
	            this.enterOuterAlt(localctx, 222);
	            this.state = 9607;
	            this.match(MySqlParser.RESET);
	            break;

	        case 223:
	            this.enterOuterAlt(localctx, 223);
	            this.state = 9608;
	            this.match(MySqlParser.RESUME);
	            break;

	        case 224:
	            this.enterOuterAlt(localctx, 224);
	            this.state = 9609;
	            this.match(MySqlParser.RETURNS);
	            break;

	        case 225:
	            this.enterOuterAlt(localctx, 225);
	            this.state = 9610;
	            this.match(MySqlParser.ROLLBACK);
	            break;

	        case 226:
	            this.enterOuterAlt(localctx, 226);
	            this.state = 9611;
	            this.match(MySqlParser.ROLLUP);
	            break;

	        case 227:
	            this.enterOuterAlt(localctx, 227);
	            this.state = 9612;
	            this.match(MySqlParser.ROTATE);
	            break;

	        case 228:
	            this.enterOuterAlt(localctx, 228);
	            this.state = 9613;
	            this.match(MySqlParser.ROW);
	            break;

	        case 229:
	            this.enterOuterAlt(localctx, 229);
	            this.state = 9614;
	            this.match(MySqlParser.ROWS);
	            break;

	        case 230:
	            this.enterOuterAlt(localctx, 230);
	            this.state = 9615;
	            this.match(MySqlParser.ROW_FORMAT);
	            break;

	        case 231:
	            this.enterOuterAlt(localctx, 231);
	            this.state = 9616;
	            this.match(MySqlParser.SAVEPOINT);
	            break;

	        case 232:
	            this.enterOuterAlt(localctx, 232);
	            this.state = 9617;
	            this.match(MySqlParser.SCHEDULE);
	            break;

	        case 233:
	            this.enterOuterAlt(localctx, 233);
	            this.state = 9618;
	            this.match(MySqlParser.SECURITY);
	            break;

	        case 234:
	            this.enterOuterAlt(localctx, 234);
	            this.state = 9619;
	            this.match(MySqlParser.SERIAL);
	            break;

	        case 235:
	            this.enterOuterAlt(localctx, 235);
	            this.state = 9620;
	            this.match(MySqlParser.SERVER);
	            break;

	        case 236:
	            this.enterOuterAlt(localctx, 236);
	            this.state = 9621;
	            this.match(MySqlParser.SESSION);
	            break;

	        case 237:
	            this.enterOuterAlt(localctx, 237);
	            this.state = 9622;
	            this.match(MySqlParser.SHARE);
	            break;

	        case 238:
	            this.enterOuterAlt(localctx, 238);
	            this.state = 9623;
	            this.match(MySqlParser.SHARED);
	            break;

	        case 239:
	            this.enterOuterAlt(localctx, 239);
	            this.state = 9624;
	            this.match(MySqlParser.SIGNED);
	            break;

	        case 240:
	            this.enterOuterAlt(localctx, 240);
	            this.state = 9625;
	            this.match(MySqlParser.SIMPLE);
	            break;

	        case 241:
	            this.enterOuterAlt(localctx, 241);
	            this.state = 9626;
	            this.match(MySqlParser.SLAVE);
	            break;

	        case 242:
	            this.enterOuterAlt(localctx, 242);
	            this.state = 9627;
	            this.match(MySqlParser.SLOW);
	            break;

	        case 243:
	            this.enterOuterAlt(localctx, 243);
	            this.state = 9628;
	            this.match(MySqlParser.SNAPSHOT);
	            break;

	        case 244:
	            this.enterOuterAlt(localctx, 244);
	            this.state = 9629;
	            this.match(MySqlParser.SOCKET);
	            break;

	        case 245:
	            this.enterOuterAlt(localctx, 245);
	            this.state = 9630;
	            this.match(MySqlParser.SOME);
	            break;

	        case 246:
	            this.enterOuterAlt(localctx, 246);
	            this.state = 9631;
	            this.match(MySqlParser.SONAME);
	            break;

	        case 247:
	            this.enterOuterAlt(localctx, 247);
	            this.state = 9632;
	            this.match(MySqlParser.SOUNDS);
	            break;

	        case 248:
	            this.enterOuterAlt(localctx, 248);
	            this.state = 9633;
	            this.match(MySqlParser.SOURCE);
	            break;

	        case 249:
	            this.enterOuterAlt(localctx, 249);
	            this.state = 9634;
	            this.match(MySqlParser.SQL_AFTER_GTIDS);
	            break;

	        case 250:
	            this.enterOuterAlt(localctx, 250);
	            this.state = 9635;
	            this.match(MySqlParser.SQL_AFTER_MTS_GAPS);
	            break;

	        case 251:
	            this.enterOuterAlt(localctx, 251);
	            this.state = 9636;
	            this.match(MySqlParser.SQL_BEFORE_GTIDS);
	            break;

	        case 252:
	            this.enterOuterAlt(localctx, 252);
	            this.state = 9637;
	            this.match(MySqlParser.SQL_BUFFER_RESULT);
	            break;

	        case 253:
	            this.enterOuterAlt(localctx, 253);
	            this.state = 9638;
	            this.match(MySqlParser.SQL_CACHE);
	            break;

	        case 254:
	            this.enterOuterAlt(localctx, 254);
	            this.state = 9639;
	            this.match(MySqlParser.SQL_NO_CACHE);
	            break;

	        case 255:
	            this.enterOuterAlt(localctx, 255);
	            this.state = 9640;
	            this.match(MySqlParser.SQL_THREAD);
	            break;

	        case 256:
	            this.enterOuterAlt(localctx, 256);
	            this.state = 9641;
	            this.match(MySqlParser.START);
	            break;

	        case 257:
	            this.enterOuterAlt(localctx, 257);
	            this.state = 9642;
	            this.match(MySqlParser.STARTS);
	            break;

	        case 258:
	            this.enterOuterAlt(localctx, 258);
	            this.state = 9643;
	            this.match(MySqlParser.STATS_AUTO_RECALC);
	            break;

	        case 259:
	            this.enterOuterAlt(localctx, 259);
	            this.state = 9644;
	            this.match(MySqlParser.STATS_PERSISTENT);
	            break;

	        case 260:
	            this.enterOuterAlt(localctx, 260);
	            this.state = 9645;
	            this.match(MySqlParser.STATS_SAMPLE_PAGES);
	            break;

	        case 261:
	            this.enterOuterAlt(localctx, 261);
	            this.state = 9646;
	            this.match(MySqlParser.STATUS);
	            break;

	        case 262:
	            this.enterOuterAlt(localctx, 262);
	            this.state = 9647;
	            this.match(MySqlParser.STOP);
	            break;

	        case 263:
	            this.enterOuterAlt(localctx, 263);
	            this.state = 9648;
	            this.match(MySqlParser.STORAGE);
	            break;

	        case 264:
	            this.enterOuterAlt(localctx, 264);
	            this.state = 9649;
	            this.match(MySqlParser.STRING);
	            break;

	        case 265:
	            this.enterOuterAlt(localctx, 265);
	            this.state = 9650;
	            this.match(MySqlParser.SUBJECT);
	            break;

	        case 266:
	            this.enterOuterAlt(localctx, 266);
	            this.state = 9651;
	            this.match(MySqlParser.SUBPARTITION);
	            break;

	        case 267:
	            this.enterOuterAlt(localctx, 267);
	            this.state = 9652;
	            this.match(MySqlParser.SUBPARTITIONS);
	            break;

	        case 268:
	            this.enterOuterAlt(localctx, 268);
	            this.state = 9653;
	            this.match(MySqlParser.SUSPEND);
	            break;

	        case 269:
	            this.enterOuterAlt(localctx, 269);
	            this.state = 9654;
	            this.match(MySqlParser.SWAPS);
	            break;

	        case 270:
	            this.enterOuterAlt(localctx, 270);
	            this.state = 9655;
	            this.match(MySqlParser.SWITCHES);
	            break;

	        case 271:
	            this.enterOuterAlt(localctx, 271);
	            this.state = 9656;
	            this.match(MySqlParser.TABLESPACE);
	            break;

	        case 272:
	            this.enterOuterAlt(localctx, 272);
	            this.state = 9657;
	            this.match(MySqlParser.TEMPORARY);
	            break;

	        case 273:
	            this.enterOuterAlt(localctx, 273);
	            this.state = 9658;
	            this.match(MySqlParser.TEMPTABLE);
	            break;

	        case 274:
	            this.enterOuterAlt(localctx, 274);
	            this.state = 9659;
	            this.match(MySqlParser.THAN);
	            break;

	        case 275:
	            this.enterOuterAlt(localctx, 275);
	            this.state = 9660;
	            this.match(MySqlParser.TRADITIONAL);
	            break;

	        case 276:
	            this.enterOuterAlt(localctx, 276);
	            this.state = 9661;
	            this.match(MySqlParser.TRANSACTION);
	            break;

	        case 277:
	            this.enterOuterAlt(localctx, 277);
	            this.state = 9662;
	            this.match(MySqlParser.TRIGGERS);
	            break;

	        case 278:
	            this.enterOuterAlt(localctx, 278);
	            this.state = 9663;
	            this.match(MySqlParser.TRUNCATE);
	            break;

	        case 279:
	            this.enterOuterAlt(localctx, 279);
	            this.state = 9664;
	            this.match(MySqlParser.UNDEFINED);
	            break;

	        case 280:
	            this.enterOuterAlt(localctx, 280);
	            this.state = 9665;
	            this.match(MySqlParser.UNDOFILE);
	            break;

	        case 281:
	            this.enterOuterAlt(localctx, 281);
	            this.state = 9666;
	            this.match(MySqlParser.UNDO_BUFFER_SIZE);
	            break;

	        case 282:
	            this.enterOuterAlt(localctx, 282);
	            this.state = 9667;
	            this.match(MySqlParser.UNINSTALL);
	            break;

	        case 283:
	            this.enterOuterAlt(localctx, 283);
	            this.state = 9668;
	            this.match(MySqlParser.UNKNOWN);
	            break;

	        case 284:
	            this.enterOuterAlt(localctx, 284);
	            this.state = 9669;
	            this.match(MySqlParser.UNTIL);
	            break;

	        case 285:
	            this.enterOuterAlt(localctx, 285);
	            this.state = 9670;
	            this.match(MySqlParser.UPGRADE);
	            break;

	        case 286:
	            this.enterOuterAlt(localctx, 286);
	            this.state = 9671;
	            this.match(MySqlParser.USER);
	            break;

	        case 287:
	            this.enterOuterAlt(localctx, 287);
	            this.state = 9672;
	            this.match(MySqlParser.USE_FRM);
	            break;

	        case 288:
	            this.enterOuterAlt(localctx, 288);
	            this.state = 9673;
	            this.match(MySqlParser.USER_RESOURCES);
	            break;

	        case 289:
	            this.enterOuterAlt(localctx, 289);
	            this.state = 9674;
	            this.match(MySqlParser.VALIDATION);
	            break;

	        case 290:
	            this.enterOuterAlt(localctx, 290);
	            this.state = 9675;
	            this.match(MySqlParser.VALUE);
	            break;

	        case 291:
	            this.enterOuterAlt(localctx, 291);
	            this.state = 9676;
	            this.match(MySqlParser.VARIABLES);
	            break;

	        case 292:
	            this.enterOuterAlt(localctx, 292);
	            this.state = 9677;
	            this.match(MySqlParser.VIEW);
	            break;

	        case 293:
	            this.enterOuterAlt(localctx, 293);
	            this.state = 9678;
	            this.match(MySqlParser.WAIT);
	            break;

	        case 294:
	            this.enterOuterAlt(localctx, 294);
	            this.state = 9679;
	            this.match(MySqlParser.WARNINGS);
	            break;

	        case 295:
	            this.enterOuterAlt(localctx, 295);
	            this.state = 9680;
	            this.match(MySqlParser.WITHOUT);
	            break;

	        case 296:
	            this.enterOuterAlt(localctx, 296);
	            this.state = 9681;
	            this.match(MySqlParser.WORK);
	            break;

	        case 297:
	            this.enterOuterAlt(localctx, 297);
	            this.state = 9682;
	            this.match(MySqlParser.WRAPPER);
	            break;

	        case 298:
	            this.enterOuterAlt(localctx, 298);
	            this.state = 9683;
	            this.match(MySqlParser.X509);
	            break;

	        case 299:
	            this.enterOuterAlt(localctx, 299);
	            this.state = 9684;
	            this.match(MySqlParser.XA);
	            break;

	        case 300:
	            this.enterOuterAlt(localctx, 300);
	            this.state = 9685;
	            this.match(MySqlParser.XML);
	            break;

	        case 301:
	            this.enterOuterAlt(localctx, 301);
	            this.state = 9686;
	            this.keywordsCanBeIdMysql();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keywordsCanBeIdMysql() {
	    let localctx = new KeywordsCanBeIdMysqlContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1046, MySqlParser.RULE_keywordsCanBeIdMysql);
	    try {
	        this.state = 9692;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1294,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9689;
	            if (!( this.isDialect('mysql'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('mysql')");
	            }
	            this.state = 9690;
	            this.match(MySqlParser.EXTENDED);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 9691;
	            this.match(MySqlParser.FUNCTION);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inceptorKeywordCanBeId() {
	    let localctx = new InceptorKeywordCanBeIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1048, MySqlParser.RULE_inceptorKeywordCanBeId);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9694;
	        _la = this._input.LA(1);
	        if(!(_la===MySqlParser.DEFAULT || _la===MySqlParser.INNER || _la===MySqlParser.KEY || _la===MySqlParser.OUTER || ((((_la - 172)) & ~0x1f) == 0 && ((1 << (_la - 172)) & ((1 << (MySqlParser.ADMIN - 172)) | (1 << (MySqlParser.ANALYZER - 172)) | (1 << (MySqlParser.APP - 172)) | (1 << (MySqlParser.APPS - 172)) | (1 << (MySqlParser.APPLICATION - 172)) | (1 << (MySqlParser.APPLICATIONS - 172)) | (1 << (MySqlParser.BUCKETS - 172)) | (1 << (MySqlParser.CAPACITY - 172)) | (1 << (MySqlParser.CLUSTER - 172)) | (1 << (MySqlParser.CLUSTERED - 172)) | (1 << (MySqlParser.COLLECTION - 172)) | (1 << (MySqlParser.CONCATENATE - 172)) | (1 << (MySqlParser.CONNECT - 172)) | (1 << (MySqlParser.CONF - 172)) | (1 << (MySqlParser.DBPROPERTIES - 172)) | (1 << (MySqlParser.DB2 - 172)) | (1 << (MySqlParser.DELIMITED - 172)) | (1 << (MySqlParser.DIRECTORIES - 172)) | (1 << (MySqlParser.DISTRIBUTE - 172)) | (1 << (MySqlParser.EXTERNAL - 172)))) !== 0) || ((((_la - 206)) & ~0x1f) == 0 && ((1 << (_la - 206)) & ((1 << (MySqlParser.FILEFORMAT - 206)) | (1 << (MySqlParser.FORMATTED - 206)) | (1 << (MySqlParser.FUNCTIONS - 206)) | (1 << (MySqlParser.GROUPING - 206)) | (1 << (MySqlParser.INCEPTOR - 206)) | (1 << (MySqlParser.INPUTDRIVER - 206)) | (1 << (MySqlParser.INPUTFORMAT - 206)) | (1 << (MySqlParser.ITEMS - 206)) | (1 << (MySqlParser.JAR - 206)) | (1 << (MySqlParser.JARS - 206)) | (1 << (MySqlParser.LINK - 206)) | (1 << (MySqlParser.LINKS - 206)) | (1 << (MySqlParser.LOCATION - 206)) | (1 << (MySqlParser.LOCKS - 206)) | (1 << (MySqlParser.MATERIALIZED - 206)) | (1 << (MySqlParser.NOCYCLE - 206)) | (1 << (MySqlParser.NORELY - 206)) | (1 << (MySqlParser.NOVALIDATE - 206)) | (1 << (MySqlParser.NONSTRICT - 206)) | (1 << (MySqlParser.NO_DROP - 206)) | (1 << (MySqlParser.NO_INDEX - 206)) | (1 << (MySqlParser.ORACLE - 206)) | (1 << (MySqlParser.OUTPUTDRIVER - 206)))) !== 0) || ((((_la - 238)) & ~0x1f) == 0 && ((1 << (_la - 238)) & ((1 << (MySqlParser.OUTPUTFORMAT - 238)) | (1 << (MySqlParser.OVERWRITE - 238)) | (1 << (MySqlParser.PACKAGE - 238)) | (1 << (MySqlParser.PACKAGES - 238)) | (1 << (MySqlParser.PARTITIONED - 238)) | (1 << (MySqlParser.PERCENT - 238)) | (1 << (MySqlParser.PERMANENT - 238)) | (1 << (MySqlParser.PRETTY - 238)) | (1 << (MySqlParser.PLSQL - 238)) | (1 << (MySqlParser.POLICY - 238)) | (1 << (MySqlParser.POLICIES - 238)) | (1 << (MySqlParser.PRIOR - 238)) | (1 << (MySqlParser.PROTECTION - 238)) | (1 << (MySqlParser.READONLY - 238)) | (1 << (MySqlParser.RELY - 238)) | (1 << (MySqlParser.ROLE - 238)) | (1 << (MySqlParser.RULE - 238)) | (1 << (MySqlParser.RULEBASE - 238)) | (1 << (MySqlParser.RULEBASES - 238)) | (1 << (MySqlParser.RULES - 238)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (MySqlParser.SEMI2 - 270)) | (1 << (MySqlParser.SEQUENCES - 270)) | (1 << (MySqlParser.SERDE - 270)) | (1 << (MySqlParser.SERDEPROPERTIES - 270)) | (1 << (MySqlParser.SETS - 270)) | (1 << (MySqlParser.SHARD - 270)) | (1 << (MySqlParser.SKEWED - 270)) | (1 << (MySqlParser.SORT - 270)) | (1 << (MySqlParser.SORTED - 270)) | (1 << (MySqlParser.STATISTICS - 270)) | (1 << (MySqlParser.STREAMJOB - 270)) | (1 << (MySqlParser.STREAMJOBS - 270)) | (1 << (MySqlParser.TABLESIZE - 270)) | (1 << (MySqlParser.TABLET - 270)) | (1 << (MySqlParser.TBLPROPERTIES - 270)) | (1 << (MySqlParser.TD - 270)) | (1 << (MySqlParser.TOUCH - 270)) | (1 << (MySqlParser.TRANSACTIONS - 270)) | (1 << (MySqlParser.TYPE - 270)) | (1 << (MySqlParser.UNARCHIVE - 270)) | (1 << (MySqlParser.UNSET - 270)) | (1 << (MySqlParser.VALIDATE - 270)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fileFormatCanBeId() {
	    let localctx = new FileFormatCanBeIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1050, MySqlParser.RULE_fileFormatCanBeId);
	    try {
	        this.state = 9698;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.CSVFILE:
	        case MySqlParser.ES:
	        case MySqlParser.FWCFILE:
	        case MySqlParser.HYPERDRIVE:
	        case MySqlParser.ORC:
	        case MySqlParser.ORC_TRANSACTION:
	        case MySqlParser.PARQUET:
	        case MySqlParser.RCFILE:
	        case MySqlParser.SEQUENCEFILE:
	        case MySqlParser.STELLARDB:
	        case MySqlParser.TEXTFILE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9696;
	            this.fileFormatEnum();
	            break;
	        case MySqlParser.STARGATE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 9697;
	            this.match(MySqlParser.STARGATE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionNameBase() {
	    let localctx = new FunctionNameBaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1052, MySqlParser.RULE_functionNameBase);
	    try {
	        this.state = 9783;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1296,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9700;
	            this.match(MySqlParser.ARRAY);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 9701;
	            this.match(MySqlParser.AVG);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 9702;
	            this.match(MySqlParser.BETWEEN);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 9703;
	            this.match(MySqlParser.BINARY);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 9704;
	            this.match(MySqlParser.CASE);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 9705;
	            this.match(MySqlParser.CHAR);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 9706;
	            this.match(MySqlParser.CHARSET);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 9707;
	            this.match(MySqlParser.COLLATION);
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 9708;
	            this.match(MySqlParser.COUNT);
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 9709;
	            this.match(MySqlParser.CURRENT_DATE);
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 9710;
	            this.match(MySqlParser.CURRENT_TIME);
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 9711;
	            this.match(MySqlParser.CURRENT_TIMESTAMP);
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 9712;
	            this.match(MySqlParser.CURRENT_USER);
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 9713;
	            this.match(MySqlParser.DATE);
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 9714;
	            this.match(MySqlParser.DATE_ADD);
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 9715;
	            this.match(MySqlParser.DATE_SUB);
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 9716;
	            this.match(MySqlParser.DAY);
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 9717;
	            this.match(MySqlParser.DECIMAL);
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 9718;
	            this.match(MySqlParser.DENSE_RANK);
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 9719;
	            this.match(MySqlParser.DIV);
	            break;

	        case 21:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 9720;
	            this.match(MySqlParser.EXISTS);
	            break;

	        case 22:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 9721;
	            this.match(MySqlParser.EXTRACT);
	            break;

	        case 23:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 9722;
	            this.match(MySqlParser.FORMAT);
	            break;

	        case 24:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 9723;
	            this.match(MySqlParser.GEOMETRYCOLLECTION);
	            break;

	        case 25:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 9724;
	            this.match(MySqlParser.GET_FORMAT);
	            break;

	        case 26:
	            this.enterOuterAlt(localctx, 26);
	            this.state = 9725;
	            this.match(MySqlParser.GROUP_CONCAT);
	            break;

	        case 27:
	            this.enterOuterAlt(localctx, 27);
	            this.state = 9726;
	            this.match(MySqlParser.HOUR);
	            break;

	        case 28:
	            this.enterOuterAlt(localctx, 28);
	            this.state = 9727;
	            this.match(MySqlParser.IF);
	            break;

	        case 29:
	            this.enterOuterAlt(localctx, 29);
	            this.state = 9728;
	            this.match(MySqlParser.IN);
	            break;

	        case 30:
	            this.enterOuterAlt(localctx, 30);
	            this.state = 9729;
	            this.match(MySqlParser.INDEX);
	            break;

	        case 31:
	            this.enterOuterAlt(localctx, 31);
	            this.state = 9730;
	            this.match(MySqlParser.INLINE);
	            break;

	        case 32:
	            this.enterOuterAlt(localctx, 32);
	            this.state = 9731;
	            this.match(MySqlParser.LEFT);
	            break;

	        case 33:
	            this.enterOuterAlt(localctx, 33);
	            this.state = 9732;
	            this.match(MySqlParser.LIKE);
	            break;

	        case 34:
	            this.enterOuterAlt(localctx, 34);
	            this.state = 9733;
	            this.match(MySqlParser.LINESTRING);
	            break;

	        case 35:
	            this.enterOuterAlt(localctx, 35);
	            this.state = 9734;
	            this.match(MySqlParser.LOCALTIME);
	            break;

	        case 36:
	            this.enterOuterAlt(localctx, 36);
	            this.state = 9735;
	            this.match(MySqlParser.LOG);
	            break;

	        case 37:
	            this.enterOuterAlt(localctx, 37);
	            this.state = 9736;
	            this.match(MySqlParser.MAP);
	            break;

	        case 38:
	            this.enterOuterAlt(localctx, 38);
	            this.state = 9737;
	            this.match(MySqlParser.MAX);
	            break;

	        case 39:
	            this.enterOuterAlt(localctx, 39);
	            this.state = 9738;
	            this.match(MySqlParser.MICROSECOND);
	            break;

	        case 40:
	            this.enterOuterAlt(localctx, 40);
	            this.state = 9739;
	            this.match(MySqlParser.MIN);
	            break;

	        case 41:
	            this.enterOuterAlt(localctx, 41);
	            this.state = 9740;
	            this.match(MySqlParser.MINUTE);
	            break;

	        case 42:
	            this.enterOuterAlt(localctx, 42);
	            this.state = 9741;
	            this.match(MySqlParser.MOD);
	            break;

	        case 43:
	            this.enterOuterAlt(localctx, 43);
	            this.state = 9742;
	            this.match(MySqlParser.MONTH);
	            break;

	        case 44:
	            this.enterOuterAlt(localctx, 44);
	            this.state = 9743;
	            this.match(MySqlParser.MULTILINESTRING);
	            break;

	        case 45:
	            this.enterOuterAlt(localctx, 45);
	            this.state = 9744;
	            this.match(MySqlParser.MULTIPOINT);
	            break;

	        case 46:
	            this.enterOuterAlt(localctx, 46);
	            this.state = 9745;
	            this.match(MySqlParser.MULTIPOLYGON);
	            break;

	        case 47:
	            this.enterOuterAlt(localctx, 47);
	            this.state = 9746;
	            this.match(MySqlParser.POINT);
	            break;

	        case 48:
	            this.enterOuterAlt(localctx, 48);
	            this.state = 9747;
	            this.match(MySqlParser.POLYGON);
	            break;

	        case 49:
	            this.enterOuterAlt(localctx, 49);
	            this.state = 9748;
	            this.match(MySqlParser.POSITION);
	            break;

	        case 50:
	            this.enterOuterAlt(localctx, 50);
	            this.state = 9749;
	            this.match(MySqlParser.QUARTER);
	            break;

	        case 51:
	            this.enterOuterAlt(localctx, 51);
	            this.state = 9750;
	            this.match(MySqlParser.REGEXP);
	            break;

	        case 52:
	            this.enterOuterAlt(localctx, 52);
	            this.state = 9751;
	            this.match(MySqlParser.REPEAT);
	            break;

	        case 53:
	            this.enterOuterAlt(localctx, 53);
	            this.state = 9752;
	            this.match(MySqlParser.REPLACE);
	            break;

	        case 54:
	            this.enterOuterAlt(localctx, 54);
	            this.state = 9753;
	            this.match(MySqlParser.REVERSE);
	            break;

	        case 55:
	            this.enterOuterAlt(localctx, 55);
	            this.state = 9754;
	            this.match(MySqlParser.RIGHT);
	            break;

	        case 56:
	            this.enterOuterAlt(localctx, 56);
	            this.state = 9755;
	            this.match(MySqlParser.RLIKE);
	            break;

	        case 57:
	            this.enterOuterAlt(localctx, 57);
	            this.state = 9756;
	            this.match(MySqlParser.SECOND);
	            break;

	        case 58:
	            this.enterOuterAlt(localctx, 58);
	            this.state = 9757;
	            this.match(MySqlParser.SPACE2);
	            break;

	        case 59:
	            this.enterOuterAlt(localctx, 59);
	            this.state = 9758;
	            this.match(MySqlParser.STD);
	            break;

	        case 60:
	            this.enterOuterAlt(localctx, 60);
	            this.state = 9759;
	            this.match(MySqlParser.STDDEV);
	            break;

	        case 61:
	            this.enterOuterAlt(localctx, 61);
	            this.state = 9760;
	            this.match(MySqlParser.STDDEV_SAMP);
	            break;

	        case 62:
	            this.enterOuterAlt(localctx, 62);
	            this.state = 9761;
	            this.match(MySqlParser.STDDEV_POP);
	            break;

	        case 63:
	            this.enterOuterAlt(localctx, 63);
	            this.state = 9762;
	            this.match(MySqlParser.STRUCT);
	            break;

	        case 64:
	            this.enterOuterAlt(localctx, 64);
	            this.state = 9763;
	            this.match(MySqlParser.SUBSTR);
	            break;

	        case 65:
	            this.enterOuterAlt(localctx, 65);
	            this.state = 9764;
	            this.match(MySqlParser.SUBSTRING);
	            break;

	        case 66:
	            this.enterOuterAlt(localctx, 66);
	            this.state = 9765;
	            this.match(MySqlParser.SUM);
	            break;

	        case 67:
	            this.enterOuterAlt(localctx, 67);
	            this.state = 9766;
	            this.match(MySqlParser.SYSDATE);
	            break;

	        case 68:
	            this.enterOuterAlt(localctx, 68);
	            this.state = 9767;
	            this.match(MySqlParser.SYSTIMESTAMP);
	            break;

	        case 69:
	            this.enterOuterAlt(localctx, 69);
	            this.state = 9768;
	            this.match(MySqlParser.TIME);
	            break;

	        case 70:
	            this.enterOuterAlt(localctx, 70);
	            this.state = 9769;
	            this.match(MySqlParser.TIMESTAMP);
	            break;

	        case 71:
	            this.enterOuterAlt(localctx, 71);
	            this.state = 9770;
	            this.match(MySqlParser.TRIM);
	            break;

	        case 72:
	            this.enterOuterAlt(localctx, 72);
	            this.state = 9771;
	            this.match(MySqlParser.UNIONTYPE);
	            break;

	        case 73:
	            this.enterOuterAlt(localctx, 73);
	            this.state = 9772;
	            this.match(MySqlParser.VARCHAR);
	            break;

	        case 74:
	            this.enterOuterAlt(localctx, 74);
	            this.state = 9773;
	            this.match(MySqlParser.VARCHAR2);
	            break;

	        case 75:
	            this.enterOuterAlt(localctx, 75);
	            this.state = 9774;
	            this.match(MySqlParser.VARIANCE);
	            break;

	        case 76:
	            this.enterOuterAlt(localctx, 76);
	            this.state = 9775;
	            this.match(MySqlParser.VAR_POP);
	            break;

	        case 77:
	            this.enterOuterAlt(localctx, 77);
	            this.state = 9776;
	            this.match(MySqlParser.VAR_SAMP);
	            break;

	        case 78:
	            this.enterOuterAlt(localctx, 78);
	            this.state = 9777;
	            this.match(MySqlParser.WEEK);
	            break;

	        case 79:
	            this.enterOuterAlt(localctx, 79);
	            this.state = 9778;
	            this.match(MySqlParser.WEIGHT_STRING);
	            break;

	        case 80:
	            this.enterOuterAlt(localctx, 80);
	            this.state = 9779;
	            this.match(MySqlParser.WHEN);
	            break;

	        case 81:
	            this.enterOuterAlt(localctx, 81);
	            this.state = 9780;
	            this.match(MySqlParser.YEAR);
	            break;

	        case 82:
	            this.enterOuterAlt(localctx, 82);
	            this.state = 9781;
	            if (!( this.isDialect('mysql'))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.isDialect('mysql')");
	            }
	            this.state = 9782;
	            this.functionNameBaseMysql();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionNameBaseMysql() {
	    let localctx = new FunctionNameBaseMysqlContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1054, MySqlParser.RULE_functionNameBaseMysql);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9785;
	        this.match(MySqlParser.DATABASE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionNameBaseExtra() {
	    let localctx = new FunctionNameBaseExtraContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1056, MySqlParser.RULE_functionNameBaseExtra);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9787;
	        _la = this._input.LA(1);
	        if(!(_la===MySqlParser.AND || _la===MySqlParser.NOT || _la===MySqlParser.OR)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	databaseName() {
	    let localctx = new DatabaseNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1058, MySqlParser.RULE_databaseName);
	    try {
	        this.state = 9793;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1297,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9789;
	            this.uid();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 9790;
	            this.emptyElement();

	                    this.notifyErrorListeners('Please provide database name');
	                  
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	databaseNameAllowEmpty() {
	    let localctx = new DatabaseNameAllowEmptyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1060, MySqlParser.RULE_databaseNameAllowEmpty);
	    try {
	        this.state = 9797;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1298,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9795;
	            this.uid();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 9796;
	            this.emptyElement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	baseElementAlias() {
	    let localctx = new BaseElementAliasContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1062, MySqlParser.RULE_baseElementAlias);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9800;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1299,this._ctx);
	        if(la_===1) {
	            this.state = 9799;
	            this.match(MySqlParser.AS);

	        }
	        this.state = 9802;
	        this.uid();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	emptyElement() {
	    let localctx = new EmptyElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1064, MySqlParser.RULE_emptyElement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9805;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1300,this._ctx);
	        if(la_===1) {
	            this.state = 9804;
	            this.match(MySqlParser.QUESTION_MARK);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	placeholder() {
	    let localctx = new PlaceholderContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1066, MySqlParser.RULE_placeholder);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9807;
	        this.match(MySqlParser.QUESTION_MARK);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	plsqlStatement() {
	    let localctx = new PlsqlStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1068, MySqlParser.RULE_plsqlStatement);
	    try {
	        this.state = 9829;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1306,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9809;
	            this.anonymousBlock();
	            this.state = 9811;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1301,this._ctx);
	            if(la_===1) {
	                this.state = 9810;
	                this.match(MySqlParser.SEMI);

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 9813;
	            this.createFunctionBody();
	            this.state = 9815;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1302,this._ctx);
	            if(la_===1) {
	                this.state = 9814;
	                this.match(MySqlParser.SEMI);

	            }
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 9817;
	            this.createProcedureBody();
	            this.state = 9819;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1303,this._ctx);
	            if(la_===1) {
	                this.state = 9818;
	                this.match(MySqlParser.SEMI);

	            }
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 9821;
	            this.createPackage();
	            this.state = 9823;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1304,this._ctx);
	            if(la_===1) {
	                this.state = 9822;
	                this.match(MySqlParser.SEMI);

	            }
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 9825;
	            this.createPackageBody();
	            this.state = 9827;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1305,this._ctx);
	            if(la_===1) {
	                this.state = 9826;
	                this.match(MySqlParser.SEMI);

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	anonymousBlock() {
	    let localctx = new AnonymousBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1070, MySqlParser.RULE_anonymousBlock);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9833;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.DECLARE) {
	            this.state = 9831;
	            this.match(MySqlParser.DECLARE);
	            this.state = 9832;
	            this.declareBlock();
	        }

	        this.state = 9835;
	        this.seqStatementBlock(false);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createFunctionBody() {
	    let localctx = new CreateFunctionBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1072, MySqlParser.RULE_createFunctionBody);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9837;
	        this.match(MySqlParser.CREATE);
	        this.state = 9840;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.OR) {
	            this.state = 9838;
	            this.match(MySqlParser.OR);
	            this.state = 9839;
	            this.match(MySqlParser.REPLACE);
	        }

	        this.state = 9842;
	        this.functionBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionBody() {
	    let localctx = new FunctionBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1074, MySqlParser.RULE_functionBody);

	          localctx.block = this.generateBlockContext('(', ')', {newlineAfterStart: true})
	        
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9844;
	        this.match(MySqlParser.FUNCTION);
	        this.state = 9845;
	        this.fullId();
	        this.state = 9846;
	        this.match(MySqlParser.LR_BRACKET);
	        this.state = 9855;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1310,this._ctx);
	        if(la_===1) {
	            this.state = 9847;
	            this.parameter();
	            this.state = 9852;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.COMMA) {
	                this.state = 9848;
	                this.match(MySqlParser.COMMA);
	                this.state = 9849;
	                this.parameter();
	                this.state = 9854;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }

	        }
	        this.state = 9857;
	        this.match(MySqlParser.RR_BRACKET);
	        this.state = 9858;
	        this.match(MySqlParser.RETURN);
	        this.state = 9859;
	        this.typeSpec();
	        this.state = 9860;
	        this.isOrAs();
	        this.state = 9861;
	        this.blockStatement2();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createProcedureBody() {
	    let localctx = new CreateProcedureBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1076, MySqlParser.RULE_createProcedureBody);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9863;
	        this.match(MySqlParser.CREATE);
	        this.state = 9866;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.OR) {
	            this.state = 9864;
	            this.match(MySqlParser.OR);
	            this.state = 9865;
	            this.match(MySqlParser.REPLACE);
	        }

	        this.state = 9868;
	        this.procedureBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureBody() {
	    let localctx = new ProcedureBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1078, MySqlParser.RULE_procedureBody);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9870;
	        this.match(MySqlParser.PROCEDURE);
	        this.state = 9871;
	        this.fullId();
	        this.state = 9872;
	        this.match(MySqlParser.LR_BRACKET);
	        this.state = 9881;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1313,this._ctx);
	        if(la_===1) {
	            this.state = 9873;
	            this.parameter();
	            this.state = 9878;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.COMMA) {
	                this.state = 9874;
	                this.match(MySqlParser.COMMA);
	                this.state = 9875;
	                this.parameter();
	                this.state = 9880;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }

	        }
	        this.state = 9883;
	        this.match(MySqlParser.RR_BRACKET);
	        this.state = 9884;
	        this.isOrAs();
	        this.state = 9885;
	        this.blockStatement2();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropPackage() {
	    let localctx = new DropPackageContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1080, MySqlParser.RULE_dropPackage);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9887;
	        this.match(MySqlParser.DROP);
	        this.state = 9889;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.PLSQL) {
	            this.state = 9888;
	            this.match(MySqlParser.PLSQL);
	        }

	        this.state = 9891;
	        this.match(MySqlParser.PACKAGE);
	        this.state = 9893;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1315,this._ctx);
	        if(la_===1) {
	            this.state = 9892;
	            this.ifExists();

	        }
	        this.state = 9895;
	        this.packName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createPackage() {
	    let localctx = new CreatePackageContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1082, MySqlParser.RULE_createPackage);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9897;
	        this.match(MySqlParser.CREATE);
	        this.state = 9900;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.OR) {
	            this.state = 9898;
	            this.match(MySqlParser.OR);
	            this.state = 9899;
	            this.match(MySqlParser.REPLACE);
	        }

	        this.state = 9902;
	        this.match(MySqlParser.PACKAGE);
	        this.state = 9903;
	        this.fullId();
	        this.state = 9904;
	        this.isOrAs();
	        this.state = 9906;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1317,this._ctx);
	        if(la_===1) {
	            this.state = 9905;
	            this.match(MySqlParser.DECLARE);

	        }
	        this.state = 9909;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1318,this._ctx);
	        if(la_===1) {
	            this.state = 9908;
	            this.packageObjSpecs();

	        }
	        this.state = 9911;
	        this.match(MySqlParser.END);
	        this.state = 9913;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1319,this._ctx);
	        if(la_===1) {
	            this.state = 9912;
	            this.uid();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createPackageBody() {
	    let localctx = new CreatePackageBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1084, MySqlParser.RULE_createPackageBody);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9915;
	        this.match(MySqlParser.CREATE);
	        this.state = 9918;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.OR) {
	            this.state = 9916;
	            this.match(MySqlParser.OR);
	            this.state = 9917;
	            this.match(MySqlParser.REPLACE);
	        }

	        this.state = 9920;
	        this.match(MySqlParser.PACKAGE);
	        this.state = 9921;
	        this.match(MySqlParser.BODY);
	        this.state = 9922;
	        this.fullId();
	        this.state = 9923;
	        this.isOrAs();
	        this.state = 9925;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1321,this._ctx);
	        if(la_===1) {
	            this.state = 9924;
	            this.match(MySqlParser.DECLARE);

	        }
	        this.state = 9928;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1322,this._ctx);
	        if(la_===1) {
	            this.state = 9927;
	            this.packageObjBodys();

	        }
	        this.state = 9931;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.BEGIN) {
	            this.state = 9930;
	            this.packageBodyBlock();
	        }

	        this.state = 9933;
	        this.match(MySqlParser.END);
	        this.state = 9935;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1324,this._ctx);
	        if(la_===1) {
	            this.state = 9934;
	            this.labelName();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	isOrAs() {
	    let localctx = new IsOrAsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1086, MySqlParser.RULE_isOrAs);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9937;
	        _la = this._input.LA(1);
	        if(!(_la===MySqlParser.AS || _la===MySqlParser.IS)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	packageObjSpecs() {
	    let localctx = new PackageObjSpecsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1088, MySqlParser.RULE_packageObjSpecs);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9943; 
	        this._errHandler.sync(this);
	        let _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 9939;
	        		this.packageObjSpec();
	        		this.state = 9941;
	        		this._errHandler.sync(this);
	        		var la_ = this._interp.adaptivePredict(this._input,1325,this._ctx);
	        		if(la_===1) {
	        		    this.state = 9940;
	        		    this.match(MySqlParser.SEMI);

	        		}
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 9945; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,1326, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	packageObjBodys() {
	    let localctx = new PackageObjBodysContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1090, MySqlParser.RULE_packageObjBodys);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9951; 
	        this._errHandler.sync(this);
	        let _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 9947;
	        		this.packageObjBody();
	        		this.state = 9949;
	        		this._errHandler.sync(this);
	        		var la_ = this._interp.adaptivePredict(this._input,1327,this._ctx);
	        		if(la_===1) {
	        		    this.state = 9948;
	        		    this.match(MySqlParser.SEMI);

	        		}
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 9953; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,1328, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	packageObjSpec() {
	    let localctx = new PackageObjSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1092, MySqlParser.RULE_packageObjSpec);
	    try {
	        this.state = 9962;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1329,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9955;
	            this.pragmaDeclaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 9956;
	            this.variableDeclaration();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 9957;
	            this.cursorDeclaration();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 9958;
	            this.exceptionDeclaration();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 9959;
	            this.typeDeclaration();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 9960;
	            this.procedureSpec();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 9961;
	            this.functionSpec();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	packageObjBody() {
	    let localctx = new PackageObjBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1094, MySqlParser.RULE_packageObjBody);
	    try {
	        this.state = 9971;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1330,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9964;
	            this.pragmaDeclaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 9965;
	            this.variableDeclaration();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 9966;
	            this.cursorDeclaration();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 9967;
	            this.exceptionDeclaration();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 9968;
	            this.typeDeclaration();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 9969;
	            this.procedureBody();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 9970;
	            this.functionBody();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureSpec() {
	    let localctx = new ProcedureSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1096, MySqlParser.RULE_procedureSpec);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9973;
	        this.match(MySqlParser.PROCEDURE);
	        this.state = 9974;
	        this.uid();
	        this.state = 9975;
	        this.match(MySqlParser.LR_BRACKET);
	        this.state = 9984;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1332,this._ctx);
	        if(la_===1) {
	            this.state = 9976;
	            this.parameter();
	            this.state = 9981;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.COMMA) {
	                this.state = 9977;
	                this.match(MySqlParser.COMMA);
	                this.state = 9978;
	                this.parameter();
	                this.state = 9983;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }

	        }
	        this.state = 9986;
	        this.match(MySqlParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionSpec() {
	    let localctx = new FunctionSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1098, MySqlParser.RULE_functionSpec);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9988;
	        this.match(MySqlParser.FUNCTION);
	        this.state = 9989;
	        this.uid();
	        this.state = 9990;
	        this.match(MySqlParser.LR_BRACKET);
	        this.state = 9999;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1334,this._ctx);
	        if(la_===1) {
	            this.state = 9991;
	            this.parameter();
	            this.state = 9996;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.COMMA) {
	                this.state = 9992;
	                this.match(MySqlParser.COMMA);
	                this.state = 9993;
	                this.parameter();
	                this.state = 9998;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }

	        }
	        this.state = 10001;
	        this.match(MySqlParser.RR_BRACKET);
	        this.state = 10002;
	        this.match(MySqlParser.RETURN);
	        this.state = 10003;
	        this.typeSpec();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declareSpec() {
	    let localctx = new DeclareSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1100, MySqlParser.RULE_declareSpec);
	    try {
	        this.state = 10010;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1335,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 10005;
	            this.pragmaDeclaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 10006;
	            this.variableDeclaration();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 10007;
	            this.cursorDeclaration();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 10008;
	            this.exceptionDeclaration();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 10009;
	            this.typeDeclaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableDeclaration() {
	    let localctx = new VariableDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1102, MySqlParser.RULE_variableDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10012;
	        this.uid();
	        this.state = 10014;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1336,this._ctx);
	        if(la_===1) {
	            this.state = 10013;
	            this.match(MySqlParser.CONSTANT);

	        }
	        this.state = 10016;
	        this.typeSpec();
	        this.state = 10019;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1337,this._ctx);
	        if(la_===1) {
	            this.state = 10017;
	            this.match(MySqlParser.NOT);
	            this.state = 10018;
	            this.match(MySqlParser.NULL_LITERAL);

	        }
	        this.state = 10022;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1338,this._ctx);
	        if(la_===1) {
	            this.state = 10021;
	            this.defaultValuePart();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cursorDeclaration() {
	    let localctx = new CursorDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1104, MySqlParser.RULE_cursorDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10024;
	        this.match(MySqlParser.CURSOR);
	        this.state = 10025;
	        this.uid();
	        this.state = 10037;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1340,this._ctx);
	        if(la_===1) {
	            this.state = 10026;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 10027;
	            this.cursorParameter();
	            this.state = 10032;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.COMMA) {
	                this.state = 10028;
	                this.match(MySqlParser.COMMA);
	                this.state = 10029;
	                this.cursorParameter();
	                this.state = 10034;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 10035;
	            this.match(MySqlParser.RR_BRACKET);

	        }
	        this.state = 10041;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1341,this._ctx);
	        if(la_===1) {
	            this.state = 10039;
	            this.match(MySqlParser.RETURN);
	            this.state = 10040;
	            this.typeSpec();

	        }
	        this.state = 10045;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1342,this._ctx);
	        if(la_===1) {
	            this.state = 10043;
	            this.match(MySqlParser.IS);
	            this.state = 10044;
	            this.selectStatement();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cursorParameter() {
	    let localctx = new CursorParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1106, MySqlParser.RULE_cursorParameter);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10047;
	        this.uid();
	        this.state = 10052;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1344,this._ctx);
	        if(la_===1) {
	            this.state = 10049;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1343,this._ctx);
	            if(la_===1) {
	                this.state = 10048;
	                this.match(MySqlParser.IN);

	            }
	            this.state = 10051;
	            this.typeSpec();

	        }
	        this.state = 10055;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.DEFAULT || _la===MySqlParser.VAR_ASSIGN) {
	            this.state = 10054;
	            this.defaultValuePart();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exceptionDeclaration() {
	    let localctx = new ExceptionDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1108, MySqlParser.RULE_exceptionDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10057;
	        this.uid();
	        this.state = 10058;
	        this.match(MySqlParser.EXCEPTION);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pragmaDeclaration() {
	    let localctx = new PragmaDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1110, MySqlParser.RULE_pragmaDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10060;
	        this.match(MySqlParser.PRAGMA);
	        this.state = 10070;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.SERIALLY_REUSABLE:
	            this.state = 10061;
	            this.match(MySqlParser.SERIALLY_REUSABLE);
	            break;
	        case MySqlParser.AUTONOMOUS_TRANSACTION:
	            this.state = 10062;
	            this.match(MySqlParser.AUTONOMOUS_TRANSACTION);
	            break;
	        case MySqlParser.EXCEPTION_INIT:
	            this.state = 10063;
	            this.match(MySqlParser.EXCEPTION_INIT);
	            this.state = 10064;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 10065;
	            this.exceptionName();
	            this.state = 10066;
	            this.match(MySqlParser.COMMA);
	            this.state = 10067;
	            this.numericNegative();
	            this.state = 10068;
	            this.match(MySqlParser.RR_BRACKET);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordTypeDef() {
	    let localctx = new RecordTypeDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1112, MySqlParser.RULE_recordTypeDef);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10072;
	        this.match(MySqlParser.RECORD);
	        this.state = 10073;
	        this.match(MySqlParser.LR_BRACKET);
	        this.state = 10074;
	        this.fieldSpec();
	        this.state = 10079;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MySqlParser.COMMA) {
	            this.state = 10075;
	            this.match(MySqlParser.COMMA);
	            this.state = 10076;
	            this.fieldSpec();
	            this.state = 10081;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 10082;
	        this.match(MySqlParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldSpec() {
	    let localctx = new FieldSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1114, MySqlParser.RULE_fieldSpec);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10084;
	        this.uid();
	        this.state = 10086;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1348,this._ctx);
	        if(la_===1) {
	            this.state = 10085;
	            this.typeSpec();

	        }
	        this.state = 10090;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.NOT) {
	            this.state = 10088;
	            this.match(MySqlParser.NOT);
	            this.state = 10089;
	            this.match(MySqlParser.NULL_LITERAL);
	        }

	        this.state = 10093;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.DEFAULT || _la===MySqlParser.VAR_ASSIGN) {
	            this.state = 10092;
	            this.defaultValuePart();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	refCursorTypeDef() {
	    let localctx = new RefCursorTypeDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1116, MySqlParser.RULE_refCursorTypeDef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10095;
	        this.match(MySqlParser.REF);
	        this.state = 10096;
	        this.match(MySqlParser.CURSOR);
	        this.state = 10099;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1351,this._ctx);
	        if(la_===1) {
	            this.state = 10097;
	            this.match(MySqlParser.RETURN);
	            this.state = 10098;
	            this.typeSpec();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeDeclaration() {
	    let localctx = new TypeDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1118, MySqlParser.RULE_typeDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10101;
	        this.match(MySqlParser.TYPE);
	        this.state = 10102;
	        this.uid();
	        this.state = 10103;
	        this.match(MySqlParser.IS);
	        this.state = 10108;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.TABLE:
	            this.state = 10104;
	            this.tableTypeDef();
	            break;
	        case MySqlParser.VARRAY:
	        case MySqlParser.VARYING:
	            this.state = 10105;
	            this.varrayTypeDef();
	            break;
	        case MySqlParser.RECORD:
	            this.state = 10106;
	            this.recordTypeDef();
	            break;
	        case MySqlParser.REF:
	            this.state = 10107;
	            this.refCursorTypeDef();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableTypeDef() {
	    let localctx = new TableTypeDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1120, MySqlParser.RULE_tableTypeDef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10110;
	        this.match(MySqlParser.TABLE);
	        this.state = 10111;
	        this.match(MySqlParser.OF);
	        this.state = 10112;
	        this.typeSpec();
	        this.state = 10114;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1353,this._ctx);
	        if(la_===1) {
	            this.state = 10113;
	            this.tableIndexedByPart();

	        }
	        this.state = 10118;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1354,this._ctx);
	        if(la_===1) {
	            this.state = 10116;
	            this.match(MySqlParser.NOT);
	            this.state = 10117;
	            this.match(MySqlParser.NULL_LITERAL);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableIndexedByPart() {
	    let localctx = new TableIndexedByPartContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1122, MySqlParser.RULE_tableIndexedByPart);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10122;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.INDEXED:
	            this.state = 10120;
	            localctx.idx1 = this.match(MySqlParser.INDEXED);
	            break;
	        case MySqlParser.INDEX:
	            this.state = 10121;
	            localctx.idx2 = this.match(MySqlParser.INDEX);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 10124;
	        this.match(MySqlParser.BY);
	        this.state = 10125;
	        this.typeSpec();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	varrayTypeDef() {
	    let localctx = new VarrayTypeDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1124, MySqlParser.RULE_varrayTypeDef);
	    try {
	        this.state = 10148;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.VARRAY:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 10127;
	            this.match(MySqlParser.VARRAY);
	            this.state = 10128;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 10129;
	            this.expression(0);
	            this.state = 10130;
	            this.match(MySqlParser.RR_BRACKET);
	            this.state = 10131;
	            this.match(MySqlParser.OF);
	            this.state = 10132;
	            this.typeSpec();
	            this.state = 10135;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1356,this._ctx);
	            if(la_===1) {
	                this.state = 10133;
	                this.match(MySqlParser.NOT);
	                this.state = 10134;
	                this.match(MySqlParser.NULL_LITERAL);

	            }
	            break;
	        case MySqlParser.VARYING:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 10137;
	            this.match(MySqlParser.VARYING);
	            this.state = 10138;
	            this.match(MySqlParser.ARRAY);
	            this.state = 10139;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 10140;
	            this.expression(0);
	            this.state = 10141;
	            this.match(MySqlParser.RR_BRACKET);
	            this.state = 10142;
	            this.match(MySqlParser.OF);
	            this.state = 10143;
	            this.typeSpec();
	            this.state = 10146;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1357,this._ctx);
	            if(la_===1) {
	                this.state = 10144;
	                this.match(MySqlParser.NOT);
	                this.state = 10145;
	                this.match(MySqlParser.NULL_LITERAL);

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	seqOfStatements() {
	    let localctx = new SeqOfStatementsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1126, MySqlParser.RULE_seqOfStatements);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10151; 
	        this._errHandler.sync(this);
	        let _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 10150;
	        		this.labelOrSqlStatement();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 10153; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,1359, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labelOrSqlStatement() {
	    let localctx = new LabelOrSqlStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1128, MySqlParser.RULE_labelOrSqlStatement);
	    try {
	        this.state = 10163;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1362,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 10155;
	            this.procedureSqlStatement2();
	            this.state = 10160;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1361,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 10157;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,1360,this._ctx);
	                if(la_===1) {
	                    this.state = 10156;
	                    this.match(MySqlParser.SEMI);

	                }
	                break;

	            case 2:
	                this.state = 10159;
	                this.match(MySqlParser.EOF);
	                break;

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 10162;
	            this.labelDeclaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labelDeclaration() {
	    let localctx = new LabelDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1130, MySqlParser.RULE_labelDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10165;
	        localctx.ltp1 = this.match(MySqlParser.LESS_SYMBOL);
	        this.state = 10166;
	        this.match(MySqlParser.LESS_SYMBOL);
	        this.state = 10167;
	        this.labelName();
	        this.state = 10168;
	        this.match(MySqlParser.GREATER_SYMBOL);
	        this.state = 10169;
	        this.match(MySqlParser.GREATER_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureSqlStatement2() {
	    let localctx = new ProcedureSqlStatement2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 1132, MySqlParser.RULE_procedureSqlStatement2);
	    try {
	        this.state = 10184;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1363,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 10171;
	            this.blockStatement2();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 10172;
	            this.continueStatement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 10173;
	            this.exitStatement();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 10174;
	            this.gotoStatement();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 10175;
	            this.ifStatement2();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 10176;
	            this.loopStatement2();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 10177;
	            this.forallStatement();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 10178;
	            this.nullStatement();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 10179;
	            this.raiseStatement();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 10180;
	            this.returnStatement2();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 10181;
	            this.normalSqlStatement();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 10182;
	            this.assignmentStatement();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 10183;
	            this.procedureWildcard();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignmentStatement() {
	    let localctx = new AssignmentStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1134, MySqlParser.RULE_assignmentStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10186;
	        this.generalElement();
	        this.state = 10187;
	        this.match(MySqlParser.VAR_ASSIGN);
	        this.state = 10188;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureWildcard() {
	    let localctx = new ProcedureWildcardContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1136, MySqlParser.RULE_procedureWildcard);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10191;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1364,this._ctx);
	        if(la_===1) {
	            this.state = 10190;
	            this.match(MySqlParser.CALL);

	        }
	        this.state = 10193;
	        this.generalElement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	continueStatement() {
	    let localctx = new ContinueStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1138, MySqlParser.RULE_continueStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10195;
	        this.match(MySqlParser.CONTINUE);
	        this.state = 10197;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1365,this._ctx);
	        if(la_===1) {
	            this.state = 10196;
	            this.labelName();

	        }
	        this.state = 10201;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1366,this._ctx);
	        if(la_===1) {
	            this.state = 10199;
	            this.match(MySqlParser.WHEN);
	            this.state = 10200;
	            this.condition();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exitStatement() {
	    let localctx = new ExitStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1140, MySqlParser.RULE_exitStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10203;
	        this.match(MySqlParser.EXIT);
	        this.state = 10205;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1367,this._ctx);
	        if(la_===1) {
	            this.state = 10204;
	            this.labelName();

	        }
	        this.state = 10209;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1368,this._ctx);
	        if(la_===1) {
	            this.state = 10207;
	            this.match(MySqlParser.WHEN);
	            this.state = 10208;
	            this.condition();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	gotoStatement() {
	    let localctx = new GotoStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1142, MySqlParser.RULE_gotoStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10211;
	        this.match(MySqlParser.GOTO);
	        this.state = 10212;
	        this.labelName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifStatement2() {
	    let localctx = new IfStatement2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 1144, MySqlParser.RULE_ifStatement2);

	          localctx.block = this.generateBlockContext('IF', ['END', 'IF'],
	            {expand: true, backTopRules: this.getRuleIds('elsifPart', 'elsePart')})
	        
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10214;
	        this.match(MySqlParser.IF);
	        this.state = 10215;
	        this.condition();
	        this.state = 10216;
	        this.match(MySqlParser.THEN);
	        this.state = 10217;
	        this.seqOfStatements();
	        this.state = 10221;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MySqlParser.ELSIF) {
	            this.state = 10218;
	            this.elsifPart();
	            this.state = 10223;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 10225;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.ELSE) {
	            this.state = 10224;
	            this.elsePart();
	        }

	        this.state = 10227;
	        this.match(MySqlParser.END);
	        this.state = 10228;
	        this.match(MySqlParser.IF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elsifPart() {
	    let localctx = new ElsifPartContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1146, MySqlParser.RULE_elsifPart);

	          localctx.block = this.generateBlockContext('ELSIF', null, {expand: true})
	        
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10230;
	        this.match(MySqlParser.ELSIF);
	        this.state = 10231;
	        this.condition();
	        this.state = 10232;
	        this.match(MySqlParser.THEN);
	        this.state = 10233;
	        this.seqOfStatements();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elsePart() {
	    let localctx = new ElsePartContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1148, MySqlParser.RULE_elsePart);

	          localctx.block = this.generateBlockContext('ELSE', null, {expand: true, newlineAfterStart: true})
	        
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10235;
	        this.match(MySqlParser.ELSE);
	        this.state = 10236;
	        this.seqOfStatements();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	loopStatement2() {
	    let localctx = new LoopStatement2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 1150, MySqlParser.RULE_loopStatement2);

	          localctx.block = this.generateBlockContext('LOOP', ['END', 'LOOP'], {expand: true})
	        
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10239;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.LESS_SYMBOL) {
	            this.state = 10238;
	            this.labelDeclaration();
	        }

	        this.state = 10245;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case MySqlParser.WHILE:
	        	this.state = 10241;
	        	this.match(MySqlParser.WHILE);
	        	this.state = 10242;
	        	this.condition();
	        	break;
	        case MySqlParser.FOR:
	        	this.state = 10243;
	        	this.match(MySqlParser.FOR);
	        	this.state = 10244;
	        	this.cursorLoopParam();
	        	break;
	        case MySqlParser.LOOP:
	        	break;
	        default:
	        	break;
	        }
	        this.state = 10247;
	        this.match(MySqlParser.LOOP);
	        this.state = 10248;
	        this.seqOfStatements();
	        this.state = 10249;
	        this.match(MySqlParser.END);
	        this.state = 10250;
	        this.match(MySqlParser.LOOP);
	        this.state = 10252;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1373,this._ctx);
	        if(la_===1) {
	            this.state = 10251;
	            this.labelName();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cursorLoopParam() {
	    let localctx = new CursorLoopParamContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1152, MySqlParser.RULE_cursorLoopParam);
	    var _la = 0; // Token type
	    try {
	        this.state = 10279;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1378,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 10254;
	            this.uid();
	            this.state = 10255;
	            this.match(MySqlParser.IN);
	            this.state = 10257;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1374,this._ctx);
	            if(la_===1) {
	                this.state = 10256;
	                this.match(MySqlParser.REVERSE);

	            }
	            this.state = 10259;
	            this.lowerBound();
	            this.state = 10260;
	            localctx.rangeSeparator = this.match(MySqlParser.TWO_DOTS);
	            this.state = 10261;
	            this.upperBound();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 10263;
	            this.uid();
	            this.state = 10264;
	            this.match(MySqlParser.IN);
	            this.state = 10277;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1377,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 10265;
	                this.cursorName();
	                this.state = 10271;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===MySqlParser.LR_BRACKET) {
	                    this.state = 10266;
	                    this.match(MySqlParser.LR_BRACKET);
	                    this.state = 10268;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,1375,this._ctx);
	                    if(la_===1) {
	                        this.state = 10267;
	                        this.expressions();

	                    }
	                    this.state = 10270;
	                    this.match(MySqlParser.RR_BRACKET);
	                }

	                break;

	            case 2:
	                this.state = 10273;
	                this.match(MySqlParser.LR_BRACKET);
	                this.state = 10274;
	                this.selectStatement();
	                this.state = 10275;
	                this.match(MySqlParser.RR_BRACKET);
	                break;

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forallStatement() {
	    let localctx = new ForallStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1154, MySqlParser.RULE_forallStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10281;
	        this.match(MySqlParser.FORALL);
	        this.state = 10282;
	        this.uid();
	        this.state = 10283;
	        this.match(MySqlParser.IN);
	        this.state = 10284;
	        this.boundsClause();
	        this.state = 10287;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1379,this._ctx);
	        if(la_===1) {
	            this.state = 10285;
	            this.match(MySqlParser.SAVE);
	            this.state = 10286;
	            this.match(MySqlParser.EXCEPTIONS);

	        }
	        this.state = 10289;
	        this.normalSqlStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	boundsClause() {
	    let localctx = new BoundsClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1156, MySqlParser.RULE_boundsClause);
	    try {
	        this.state = 10301;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1381,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 10291;
	            this.lowerBound();
	            this.state = 10292;
	            this.match(MySqlParser.TWO_DOTS);
	            this.state = 10293;
	            this.upperBound();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 10295;
	            this.match(MySqlParser.INDICES);
	            this.state = 10296;
	            this.match(MySqlParser.OF);
	            this.state = 10297;
	            this.fullId();
	            this.state = 10299;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1380,this._ctx);
	            if(la_===1) {
	                this.state = 10298;
	                this.betweenBound();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	betweenBound() {
	    let localctx = new BetweenBoundContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1158, MySqlParser.RULE_betweenBound);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10303;
	        this.match(MySqlParser.BETWEEN);
	        this.state = 10304;
	        this.lowerBound();
	        this.state = 10305;
	        this.match(MySqlParser.AND);
	        this.state = 10306;
	        this.upperBound();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lowerBound() {
	    let localctx = new LowerBoundContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1160, MySqlParser.RULE_lowerBound);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10308;
	        this.concatenation();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	upperBound() {
	    let localctx = new UpperBoundContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1162, MySqlParser.RULE_upperBound);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10310;
	        this.concatenation();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nullStatement() {
	    let localctx = new NullStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1164, MySqlParser.RULE_nullStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10312;
	        this.match(MySqlParser.NULL_LITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	raiseStatement() {
	    let localctx = new RaiseStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1166, MySqlParser.RULE_raiseStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10314;
	        this.match(MySqlParser.RAISE);
	        this.state = 10315;
	        this.exceptionName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnStatement2() {
	    let localctx = new ReturnStatement2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 1168, MySqlParser.RULE_returnStatement2);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10317;
	        this.match(MySqlParser.RETURN);
	        this.state = 10319;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1382,this._ctx);
	        if(la_===1) {
	            this.state = 10318;
	            this.expression(0);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exceptionBlock() {
	    let localctx = new ExceptionBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1170, MySqlParser.RULE_exceptionBlock);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10321;
	        this.match(MySqlParser.EXCEPTION);
	        this.state = 10323; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 10322;
	            this.exceptionHandler();
	            this.state = 10325; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===MySqlParser.WHEN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exceptionHandler() {
	    let localctx = new ExceptionHandlerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1172, MySqlParser.RULE_exceptionHandler);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10327;
	        this.match(MySqlParser.WHEN);
	        this.state = 10328;
	        this.exceptionName();
	        this.state = 10333;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MySqlParser.OR) {
	            this.state = 10329;
	            this.match(MySqlParser.OR);
	            this.state = 10330;
	            this.exceptionName();
	            this.state = 10335;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 10338;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.THEN) {
	            this.state = 10336;
	            this.match(MySqlParser.THEN);
	            this.state = 10337;
	            localctx._seqOfStatements = this.seqOfStatements();
	        }


	                this.checkContextExist(localctx._seqOfStatements, 'Please provide then handler statement')
	              
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	blockStatement2() {
	    let localctx = new BlockStatement2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 1174, MySqlParser.RULE_blockStatement2);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10343;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1386,this._ctx);
	        if(la_===1) {
	            this.state = 10342;
	            this.match(MySqlParser.DECLARE);

	        }
	        this.state = 10346;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1387,this._ctx);
	        if(la_===1) {
	            this.state = 10345;
	            this.declareBlock();

	        }
	        this.state = 10348;
	        this.seqStatementBlock(true);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declareBlock() {
	    let localctx = new DeclareBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1176, MySqlParser.RULE_declareBlock);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10354; 
	        this._errHandler.sync(this);
	        let _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 10350;
	        		this.declareSpec();
	        		this.state = 10352;
	        		this._errHandler.sync(this);
	        		var la_ = this._interp.adaptivePredict(this._input,1388,this._ctx);
	        		if(la_===1) {
	        		    this.state = 10351;
	        		    this.match(MySqlParser.SEMI);

	        		}
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 10356; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,1389, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	seqStatementBlock(withLabel) {
	    let localctx = new SeqStatementBlockContext(this, this._ctx, this.state, withLabel);
	    this.enterRule(localctx, 1178, MySqlParser.RULE_seqStatementBlock);

	          localctx.block = this.generateBlockContext('BEGIN', 'END',
	            {expand: true, backTopRules: this.getRuleIds('exceptionBlock')})
	        
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10358;
	        this.match(MySqlParser.BEGIN);
	        this.state = 10359;
	        this.seqOfStatements();
	        this.state = 10361;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.EXCEPTION) {
	            this.state = 10360;
	            this.exceptionBlock();
	        }

	        this.state = 10363;
	        this.match(MySqlParser.END);
	        this.state = 10365;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1391,this._ctx);
	        if(la_===1) {
	            this.state = 10364;
	            localctx._labelName = this.labelName();

	        }

	                if (!localctx.withLabel && localctx._labelName) {
	                  this.notifyErrorListeners('No label name allowed');
	                }
	              
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	packageBodyBlock() {
	    let localctx = new PackageBodyBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1180, MySqlParser.RULE_packageBodyBlock);

	          localctx.block = this.generateBlockContext('BEGIN', null,
	            {expand: true, backTopRules: this.getRuleIds('exceptionBlock')})
	        
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10369;
	        this.match(MySqlParser.BEGIN);
	        this.state = 10370;
	        this.seqOfStatements();
	        this.state = 10372;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.EXCEPTION) {
	            this.state = 10371;
	            this.exceptionBlock();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameter() {
	    let localctx = new ParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1182, MySqlParser.RULE_parameter);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10374;
	        this.uid();
	        this.state = 10378;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,1393,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 10375;
	                _la = this._input.LA(1);
	                if(!(_la===MySqlParser.IN || _la===MySqlParser.INOUT || _la===MySqlParser.OUT || _la===MySqlParser.NOCOPY)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                } 
	            }
	            this.state = 10380;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,1393,this._ctx);
	        }

	        this.state = 10382;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1394,this._ctx);
	        if(la_===1) {
	            this.state = 10381;
	            this.typeSpec();

	        }
	        this.state = 10385;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.DEFAULT || _la===MySqlParser.VAR_ASSIGN) {
	            this.state = 10384;
	            this.defaultValuePart();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	generalElement() {
	    let localctx = new GeneralElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1184, MySqlParser.RULE_generalElement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10387;
	        this.generalElementPart();
	        this.state = 10391;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,1396,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 10388;
	                this.generalElementPartChain(); 
	            }
	            this.state = 10393;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,1396,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	generalElementPart() {
	    let localctx = new GeneralElementPartContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1186, MySqlParser.RULE_generalElementPart);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10394;
	        this.idExpression();
	        this.state = 10396;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1397,this._ctx);
	        if(la_===1) {
	            this.state = 10395;
	            this.generalArgument();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	generalElementPartChain() {
	    let localctx = new GeneralElementPartChainContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1188, MySqlParser.RULE_generalElementPartChain);
	    var _la = 0; // Token type
	    try {
	        this.state = 10406;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1400,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 10399;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.DOT || _la===MySqlParser.DOT_ID) {
	                this.state = 10398;
	                this.chainedIdExpression();
	            }

	            this.state = 10401;
	            this.generalArgument();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 10402;
	            this.chainedIdExpression();
	            this.state = 10404;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1399,this._ctx);
	            if(la_===1) {
	                this.state = 10403;
	                this.generalArgument();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	generalArgument() {
	    let localctx = new GeneralArgumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1190, MySqlParser.RULE_generalArgument);
	    try {
	        this.state = 10410;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.LR_BRACKET:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 10408;
	            this.functionArgument();
	            break;
	        case MySqlParser.LS_BRACKET:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 10409;
	            this.arrayArgument();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionArgument() {
	    let localctx = new FunctionArgumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1192, MySqlParser.RULE_functionArgument);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10412;
	        this.match(MySqlParser.LR_BRACKET);
	        this.state = 10421;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1403,this._ctx);
	        if(la_===1) {
	            this.state = 10413;
	            this.argument();
	            this.state = 10418;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.COMMA) {
	                this.state = 10414;
	                this.match(MySqlParser.COMMA);
	                this.state = 10415;
	                this.argument();
	                this.state = 10420;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }

	        }
	        this.state = 10423;
	        this.match(MySqlParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argument() {
	    let localctx = new ArgumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1194, MySqlParser.RULE_argument);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10429;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1404,this._ctx);
	        if(la_===1) {
	            this.state = 10425;
	            this.uid();
	            this.state = 10426;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 10427;
	            this.match(MySqlParser.GREATER_SYMBOL);

	        }
	        this.state = 10431;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrayArgument() {
	    let localctx = new ArrayArgumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1196, MySqlParser.RULE_arrayArgument);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10433;
	        this.match(MySqlParser.LS_BRACKET);
	        this.state = 10434;
	        this.expression(0);
	        this.state = 10435;
	        this.match(MySqlParser.RS_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeSpec() {
	    let localctx = new TypeSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1198, MySqlParser.RULE_typeSpec);
	    var _la = 0; // Token type
	    try {
	        this.state = 10452;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1408,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 10437;
	            this.dataType();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 10439;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1405,this._ctx);
	            if(la_===1) {
	                this.state = 10438;
	                this.match(MySqlParser.REF);

	            }
	            this.state = 10441;
	            this.uid();
	            this.state = 10445;
	            this._errHandler.sync(this);
	            let _alt = this._interp.adaptivePredict(this._input,1406,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 10442;
	                    this.dottedId(); 
	                }
	                this.state = 10447;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,1406,this._ctx);
	            }

	            this.state = 10450;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1407,this._ctx);
	            if(la_===1) {
	                this.state = 10448;
	                this.match(MySqlParser.MODULE);
	                this.state = 10449;
	                _la = this._input.LA(1);
	                if(!(_la===MySqlParser.TYPE || _la===MySqlParser.ROWTYPE)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defaultValuePart() {
	    let localctx = new DefaultValuePartContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1200, MySqlParser.RULE_defaultValuePart);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10454;
	        _la = this._input.LA(1);
	        if(!(_la===MySqlParser.DEFAULT || _la===MySqlParser.VAR_ASSIGN)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 10455;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labelName() {
	    let localctx = new LabelNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1202, MySqlParser.RULE_labelName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10457;
	        this.uid();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numeric() {
	    let localctx = new NumericContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1204, MySqlParser.RULE_numeric);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10459;
	        _la = this._input.LA(1);
	        if(!(_la===MySqlParser.DECIMAL_LITERAL || _la===MySqlParser.REAL_LITERAL)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numericNegative() {
	    let localctx = new NumericNegativeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1206, MySqlParser.RULE_numericNegative);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10461;
	        this.match(MySqlParser.MINUS);
	        this.state = 10462;
	        this.numeric();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exceptionName() {
	    let localctx = new ExceptionNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1208, MySqlParser.RULE_exceptionName);
	    try {
	        this.state = 10468;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1409,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 10464;
	            this.tripleId();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 10465;
	            this.emptyElement();

	                    this.notifyErrorListeners('Please exception name');
	                  
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	routineName() {
	    let localctx = new RoutineNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1210, MySqlParser.RULE_routineName);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10470;
	        this.uid();
	        this.state = 10474;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MySqlParser.DOT || _la===MySqlParser.DOT_ID) {
	            this.state = 10471;
	            this.dottedId();
	            this.state = 10476;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	idExpression() {
	    let localctx = new IdExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1212, MySqlParser.RULE_idExpression);
	    try {
	        this.state = 10494;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1413,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 10477;
	            this.uid();
	            this.state = 10481;
	            this._errHandler.sync(this);
	            let _alt = this._interp.adaptivePredict(this._input,1411,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 10478;
	                    this.dottedId(); 
	                }
	                this.state = 10483;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,1411,this._ctx);
	            }

	            this.state = 10484;
	            this.match(MySqlParser.DOT);

	                  this.notifyErrorListeners('Please provide expression after `.`');
	                
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 10487;
	            this.uid();
	            this.state = 10491;
	            this._errHandler.sync(this);
	            let _alt = this._interp.adaptivePredict(this._input,1412,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 10488;
	                    this.dottedId(); 
	                }
	                this.state = 10493;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,1412,this._ctx);
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	chainedIdExpression() {
	    let localctx = new ChainedIdExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1214, MySqlParser.RULE_chainedIdExpression);
	    try {
	        this.state = 10511;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1416,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 10496;
	            this.dottedId();
	            this.state = 10500;
	            this._errHandler.sync(this);
	            let _alt = this._interp.adaptivePredict(this._input,1414,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 10497;
	                    this.dottedId(); 
	                }
	                this.state = 10502;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,1414,this._ctx);
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 10506;
	            this._errHandler.sync(this);
	            let _alt = this._interp.adaptivePredict(this._input,1415,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 10503;
	                    this.dottedId(); 
	                }
	                this.state = 10508;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,1415,this._ctx);
	            }

	            this.state = 10509;
	            this.match(MySqlParser.DOT);

	                  this.notifyErrorListeners('Please provide expression after `.`');
	                
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cursorName() {
	    let localctx = new CursorNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1216, MySqlParser.RULE_cursorName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10513;
	        this.fullId();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partitionExtensionClause() {
	    let localctx = new PartitionExtensionClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1218, MySqlParser.RULE_partitionExtensionClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10515;
	        _la = this._input.LA(1);
	        if(!(_la===MySqlParser.PARTITION || _la===MySqlParser.SUBPARTITION)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 10517;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.FOR) {
	            this.state = 10516;
	            this.match(MySqlParser.FOR);
	        }

	        this.state = 10519;
	        this.match(MySqlParser.LR_BRACKET);
	        this.state = 10521;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1418,this._ctx);
	        if(la_===1) {
	            this.state = 10520;
	            this.expressions();

	        }
	        this.state = 10523;
	        this.match(MySqlParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	condition() {
	    let localctx = new ConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1220, MySqlParser.RULE_condition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10525;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	normalSqlStatement() {
	    let localctx = new NormalSqlStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1222, MySqlParser.RULE_normalSqlStatement);
	    try {
	        this.state = 10531;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1419,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 10527;
	            this.executeImmediate();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 10528;
	            this.dmlStatement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 10529;
	            this.cursorManipulationStatements();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 10530;
	            this.transactionStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	executeImmediate() {
	    let localctx = new ExecuteImmediateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1224, MySqlParser.RULE_executeImmediate);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10533;
	        this.match(MySqlParser.EXECUTE);
	        this.state = 10534;
	        this.match(MySqlParser.IMMEDIATE);
	        this.state = 10535;
	        this.expression(0);
	        this.state = 10537;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1420,this._ctx);
	        if(la_===1) {
	            this.state = 10536;
	            this.bulkCollectClause();

	        }
	        this.state = 10540;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1421,this._ctx);
	        if(la_===1) {
	            this.state = 10539;
	            this.usingClause();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bulkCollectClause() {
	    let localctx = new BulkCollectClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1226, MySqlParser.RULE_bulkCollectClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10544;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.BULK) {
	            this.state = 10542;
	            this.match(MySqlParser.BULK);
	            this.state = 10543;
	            this.match(MySqlParser.COLLECT);
	        }

	        this.state = 10546;
	        this.match(MySqlParser.INTO);
	        this.state = 10547;
	        this.expressions();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	usingClause() {
	    let localctx = new UsingClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1228, MySqlParser.RULE_usingClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10549;
	        this.match(MySqlParser.USING);
	        this.state = 10550;
	        this.usingClauseElement();
	        this.state = 10555;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,1423,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 10551;
	                this.match(MySqlParser.COMMA);
	                this.state = 10552;
	                this.usingClauseElement(); 
	            }
	            this.state = 10557;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,1423,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	usingClauseElement() {
	    let localctx = new UsingClauseElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1230, MySqlParser.RULE_usingClauseElement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10558;
	        _la = this._input.LA(1);
	        if(!(_la===MySqlParser.IN || _la===MySqlParser.INOUT || _la===MySqlParser.OUT || _la===MySqlParser.NOCOPY)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 10559;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cursorManipulationStatements() {
	    let localctx = new CursorManipulationStatementsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1232, MySqlParser.RULE_cursorManipulationStatements);
	    try {
	        this.state = 10565;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1424,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 10561;
	            this.closeStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 10562;
	            this.openStatement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 10563;
	            this.fetchStatement();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 10564;
	            this.openForStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	closeStatement() {
	    let localctx = new CloseStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1234, MySqlParser.RULE_closeStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10567;
	        this.match(MySqlParser.CLOSE);
	        this.state = 10568;
	        this.cursorName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	openStatement() {
	    let localctx = new OpenStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1236, MySqlParser.RULE_openStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10570;
	        this.match(MySqlParser.OPEN);
	        this.state = 10571;
	        this.cursorName();
	        this.state = 10577;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1426,this._ctx);
	        if(la_===1) {
	            this.state = 10572;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 10574;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1425,this._ctx);
	            if(la_===1) {
	                this.state = 10573;
	                this.expressions();

	            }
	            this.state = 10576;
	            this.match(MySqlParser.RR_BRACKET);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fetchStatement() {
	    let localctx = new FetchStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1238, MySqlParser.RULE_fetchStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10579;
	        this.match(MySqlParser.FETCH);
	        this.state = 10580;
	        this.cursorName();
	        this.state = 10583;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.BULK) {
	            this.state = 10581;
	            this.match(MySqlParser.BULK);
	            this.state = 10582;
	            this.match(MySqlParser.COLLECT);
	        }

	        this.state = 10585;
	        this.match(MySqlParser.INTO);
	        this.state = 10586;
	        this.tripleId();
	        this.state = 10591;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,1428,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 10587;
	                this.match(MySqlParser.COMMA);
	                this.state = 10588;
	                this.tripleId(); 
	            }
	            this.state = 10593;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,1428,this._ctx);
	        }

	        this.state = 10595;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1429,this._ctx);
	        if(la_===1) {
	            this.state = 10594;
	            this.limitClause();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	openForStatement() {
	    let localctx = new OpenForStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1240, MySqlParser.RULE_openForStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10597;
	        this.match(MySqlParser.OPEN);
	        this.state = 10598;
	        this.cursorName();
	        this.state = 10599;
	        this.match(MySqlParser.FOR);
	        this.state = 10602;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1430,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 10600;
	            this.selectStatement();
	            break;

	        case 2:
	            this.state = 10601;
	            this.expression(0);
	            break;

	        }
	        this.state = 10605;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1431,this._ctx);
	        if(la_===1) {
	            this.state = 10604;
	            this.usingClause();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	concatenation() {
	    let localctx = new ConcatenationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1242, MySqlParser.RULE_concatenation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10607;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

MySqlParser.EOF = antlr4.Token.EOF;
MySqlParser.SPACE = 1;
MySqlParser.SPEC_MYSQL_COMMENT = 2;
MySqlParser.COMMENT_INPUT = 3;
MySqlParser.MINUS_COMMENT = 4;
MySqlParser.LINE_COMMENT = 5;
MySqlParser.ADD = 6;
MySqlParser.ALL = 7;
MySqlParser.ALTER = 8;
MySqlParser.ALWAYS = 9;
MySqlParser.ANALYZE = 10;
MySqlParser.AND = 11;
MySqlParser.AS = 12;
MySqlParser.ASC = 13;
MySqlParser.BEFORE = 14;
MySqlParser.BETWEEN = 15;
MySqlParser.BOTH = 16;
MySqlParser.BY = 17;
MySqlParser.CALL = 18;
MySqlParser.CASCADE = 19;
MySqlParser.CASE = 20;
MySqlParser.CAST = 21;
MySqlParser.CHANGE = 22;
MySqlParser.CHARACTER = 23;
MySqlParser.CHECK = 24;
MySqlParser.COLLATE = 25;
MySqlParser.COLUMN = 26;
MySqlParser.CONDITION = 27;
MySqlParser.CONSTRAINT = 28;
MySqlParser.CONTINUE = 29;
MySqlParser.CONVERT = 30;
MySqlParser.CREATE = 31;
MySqlParser.CROSS = 32;
MySqlParser.CURRENT_USER = 33;
MySqlParser.CURSOR = 34;
MySqlParser.DATABASE = 35;
MySqlParser.DATABASES = 36;
MySqlParser.DECLARE = 37;
MySqlParser.DEFAULT = 38;
MySqlParser.DELAYED = 39;
MySqlParser.DELETE = 40;
MySqlParser.DESC = 41;
MySqlParser.DESCRIBE = 42;
MySqlParser.DETERMINISTIC = 43;
MySqlParser.DISTINCT = 44;
MySqlParser.DISTINCTROW = 45;
MySqlParser.DROP = 46;
MySqlParser.EACH = 47;
MySqlParser.ELSE = 48;
MySqlParser.ELSEIF = 49;
MySqlParser.ENCLOSED = 50;
MySqlParser.ESCAPED = 51;
MySqlParser.EXISTS = 52;
MySqlParser.EXIT = 53;
MySqlParser.EXPLAIN = 54;
MySqlParser.FALSE = 55;
MySqlParser.FETCH = 56;
MySqlParser.FOR = 57;
MySqlParser.FORCE = 58;
MySqlParser.FOREIGN = 59;
MySqlParser.FROM = 60;
MySqlParser.FULLTEXT = 61;
MySqlParser.GENERATED = 62;
MySqlParser.GRANT = 63;
MySqlParser.GROUP = 64;
MySqlParser.HAVING = 65;
MySqlParser.HIGH_PRIORITY = 66;
MySqlParser.IF = 67;
MySqlParser.IGNORE = 68;
MySqlParser.IN = 69;
MySqlParser.INDEX = 70;
MySqlParser.INFILE = 71;
MySqlParser.INNER = 72;
MySqlParser.INOUT = 73;
MySqlParser.INSERT = 74;
MySqlParser.INTERVAL = 75;
MySqlParser.INTO = 76;
MySqlParser.IS = 77;
MySqlParser.ITERATE = 78;
MySqlParser.JOIN = 79;
MySqlParser.KEY = 80;
MySqlParser.KEYS = 81;
MySqlParser.KILL = 82;
MySqlParser.LEADING = 83;
MySqlParser.LEAVE = 84;
MySqlParser.LEFT = 85;
MySqlParser.LIKE = 86;
MySqlParser.LIMIT = 87;
MySqlParser.LINEAR = 88;
MySqlParser.LINES = 89;
MySqlParser.LOAD = 90;
MySqlParser.LOCK = 91;
MySqlParser.LOOP = 92;
MySqlParser.LOW_PRIORITY = 93;
MySqlParser.MASTER_BIND = 94;
MySqlParser.MASTER_SSL_VERIFY_SERVER_CERT = 95;
MySqlParser.MATCH = 96;
MySqlParser.MAXVALUE = 97;
MySqlParser.MODIFIES = 98;
MySqlParser.NATURAL = 99;
MySqlParser.NOT = 100;
MySqlParser.NO_WRITE_TO_BINLOG = 101;
MySqlParser.NULL_LITERAL = 102;
MySqlParser.ON = 103;
MySqlParser.OPTIMIZE = 104;
MySqlParser.OPTION = 105;
MySqlParser.OPTIONALLY = 106;
MySqlParser.OR = 107;
MySqlParser.ORDER = 108;
MySqlParser.OUT = 109;
MySqlParser.OUTER = 110;
MySqlParser.OUTFILE = 111;
MySqlParser.PARTITION = 112;
MySqlParser.PRIMARY = 113;
MySqlParser.PROCEDURE = 114;
MySqlParser.PURGE = 115;
MySqlParser.RANGE = 116;
MySqlParser.READ = 117;
MySqlParser.READS = 118;
MySqlParser.REFERENCES = 119;
MySqlParser.REGEXP = 120;
MySqlParser.RELEASE = 121;
MySqlParser.RENAME = 122;
MySqlParser.REPEAT = 123;
MySqlParser.REPLACE = 124;
MySqlParser.REQUIRE = 125;
MySqlParser.RESTRICT = 126;
MySqlParser.RETURN = 127;
MySqlParser.REVOKE = 128;
MySqlParser.RIGHT = 129;
MySqlParser.RLIKE = 130;
MySqlParser.SCHEMA = 131;
MySqlParser.SCHEMAS = 132;
MySqlParser.SELECT = 133;
MySqlParser.SET = 134;
MySqlParser.SEPARATOR = 135;
MySqlParser.SHOW = 136;
MySqlParser.SPATIAL = 137;
MySqlParser.SQL = 138;
MySqlParser.SQLEXCEPTION = 139;
MySqlParser.SQLSTATE = 140;
MySqlParser.SQLWARNING = 141;
MySqlParser.SQL_BIG_RESULT = 142;
MySqlParser.SQL_CALC_FOUND_ROWS = 143;
MySqlParser.SQL_SMALL_RESULT = 144;
MySqlParser.SSL = 145;
MySqlParser.STARTING = 146;
MySqlParser.STRAIGHT_JOIN = 147;
MySqlParser.TABLE = 148;
MySqlParser.TERMINATED = 149;
MySqlParser.THEN = 150;
MySqlParser.TO = 151;
MySqlParser.TRAILING = 152;
MySqlParser.TRIGGER = 153;
MySqlParser.TRUE = 154;
MySqlParser.UNDO = 155;
MySqlParser.UNION = 156;
MySqlParser.UNIQUE = 157;
MySqlParser.UNLOCK = 158;
MySqlParser.UNSIGNED = 159;
MySqlParser.UPDATE = 160;
MySqlParser.USAGE = 161;
MySqlParser.USE = 162;
MySqlParser.USING = 163;
MySqlParser.VALUES = 164;
MySqlParser.WHEN = 165;
MySqlParser.WHERE = 166;
MySqlParser.WHILE = 167;
MySqlParser.WITH = 168;
MySqlParser.WRITE = 169;
MySqlParser.XOR = 170;
MySqlParser.ZEROFILL = 171;
MySqlParser.ADMIN = 172;
MySqlParser.ANALYZER = 173;
MySqlParser.APP = 174;
MySqlParser.APPEND = 175;
MySqlParser.APPS = 176;
MySqlParser.APPLICATION = 177;
MySqlParser.APPLICATIONS = 178;
MySqlParser.BLACKLIST = 179;
MySqlParser.BODY = 180;
MySqlParser.BUCKETS = 181;
MySqlParser.BULK = 182;
MySqlParser.CACHEDMETRIC = 183;
MySqlParser.CACHEDMETRICS = 184;
MySqlParser.CALLER = 185;
MySqlParser.CAPACITY = 186;
MySqlParser.CLUSTER = 187;
MySqlParser.CLUSTERED = 188;
MySqlParser.COLLECT = 189;
MySqlParser.COLLECTION = 190;
MySqlParser.COMPACTIONS = 191;
MySqlParser.CONCATENATE = 192;
MySqlParser.CONNECT = 193;
MySqlParser.CONF = 194;
MySqlParser.CUBE = 195;
MySqlParser.CURRENT = 196;
MySqlParser.DBPROPERTIES = 197;
MySqlParser.DB2 = 198;
MySqlParser.DELIMITED = 199;
MySqlParser.DELIMITER = 200;
MySqlParser.DIRECTORIES = 201;
MySqlParser.DISTRIBUTE = 202;
MySqlParser.EXTERNAL = 203;
MySqlParser.EXCLAMATION_SET = 204;
MySqlParser.FACL = 205;
MySqlParser.FILEFORMAT = 206;
MySqlParser.FOLLOWING = 207;
MySqlParser.FORMATTED = 208;
MySqlParser.FUNCTIONS = 209;
MySqlParser.GROUPING = 210;
MySqlParser.HOLD = 211;
MySqlParser.INCEPTOR = 212;
MySqlParser.IMMEDIATE = 213;
MySqlParser.INPATH = 214;
MySqlParser.INPUTDRIVER = 215;
MySqlParser.INPUTFORMAT = 216;
MySqlParser.ITEMS = 217;
MySqlParser.JAR = 218;
MySqlParser.JARS = 219;
MySqlParser.LATERAL = 220;
MySqlParser.LINK = 221;
MySqlParser.LINKS = 222;
MySqlParser.LOCATION = 223;
MySqlParser.LOCKS = 224;
MySqlParser.MAP = 225;
MySqlParser.MATCHED = 226;
MySqlParser.MATERIALIZED = 227;
MySqlParser.METRICS = 228;
MySqlParser.NOCYCLE = 229;
MySqlParser.NORELY = 230;
MySqlParser.NOVALIDATE = 231;
MySqlParser.NONSTRICT = 232;
MySqlParser.NO_DROP = 233;
MySqlParser.NO_INDEX = 234;
MySqlParser.OFF = 235;
MySqlParser.ORACLE = 236;
MySqlParser.OUTPUTDRIVER = 237;
MySqlParser.OUTPUTFORMAT = 238;
MySqlParser.OVERWRITE = 239;
MySqlParser.PACKAGE = 240;
MySqlParser.PACKAGES = 241;
MySqlParser.PARTITIONED = 242;
MySqlParser.PERCENT = 243;
MySqlParser.PERMANENT = 244;
MySqlParser.PERMISSION = 245;
MySqlParser.PRETTY = 246;
MySqlParser.PLSQL = 247;
MySqlParser.PLSQLUSESLASH = 248;
MySqlParser.PLSQLCLIENTDIALECT = 249;
MySqlParser.POLICY = 250;
MySqlParser.POLICYBASES = 251;
MySqlParser.POLICIES = 252;
MySqlParser.PRECEDING = 253;
MySqlParser.PRINCIPALS = 254;
MySqlParser.PRIOR = 255;
MySqlParser.PROTECTION = 256;
MySqlParser.QUOTA = 257;
MySqlParser.READONLY = 258;
MySqlParser.REJECT = 259;
MySqlParser.RELY = 260;
MySqlParser.ROLE = 261;
MySqlParser.ROLES = 262;
MySqlParser.RULE = 263;
MySqlParser.RULEBASE = 264;
MySqlParser.RULEBASES = 265;
MySqlParser.RULEFUNCTION = 266;
MySqlParser.RULEFUNCTIONS = 267;
MySqlParser.RULES = 268;
MySqlParser.SEGMENT = 269;
MySqlParser.SEMI2 = 270;
MySqlParser.SEQUENCES = 271;
MySqlParser.SERDE = 272;
MySqlParser.SERDEPROPERTIES = 273;
MySqlParser.SETS = 274;
MySqlParser.SHARD = 275;
MySqlParser.SHOW_DATABASE = 276;
MySqlParser.SKEWED = 277;
MySqlParser.SORT = 278;
MySqlParser.SORTED = 279;
MySqlParser.SPACE2 = 280;
MySqlParser.STATISTICS = 281;
MySqlParser.STREAMJOB = 282;
MySqlParser.STREAMJOBS = 283;
MySqlParser.STREAMS = 284;
MySqlParser.SYSTIMESTAMP = 285;
MySqlParser.TABLESIZE = 286;
MySqlParser.TABLET = 287;
MySqlParser.TBLPROPERTIES = 288;
MySqlParser.TD = 289;
MySqlParser.TOUCH = 290;
MySqlParser.TRANSACTIONS = 291;
MySqlParser.TYPE = 292;
MySqlParser.UNARCHIVE = 293;
MySqlParser.UNBOUNDED = 294;
MySqlParser.UNIONTYPE = 295;
MySqlParser.UNLIMITED = 296;
MySqlParser.UNSET = 297;
MySqlParser.URI = 298;
MySqlParser.VALIDATE = 299;
MySqlParser.VIEWS = 300;
MySqlParser.AUTONOMOUS_TRANSACTION = 301;
MySqlParser.CONSTANT = 302;
MySqlParser.DENSE_RANK = 303;
MySqlParser.ELSIF = 304;
MySqlParser.EXCEPTION = 305;
MySqlParser.EXCEPTIONS = 306;
MySqlParser.EXCEPTION_INIT = 307;
MySqlParser.FORALL = 308;
MySqlParser.GOTO = 309;
MySqlParser.INDEXED = 310;
MySqlParser.INDICATOR = 311;
MySqlParser.INDICES = 312;
MySqlParser.INLINE = 313;
MySqlParser.ISOPEN = 314;
MySqlParser.KEEP = 315;
MySqlParser.NOCOPY = 316;
MySqlParser.NOTFOUND = 317;
MySqlParser.NULLS = 318;
MySqlParser.OF = 319;
MySqlParser.OVER = 320;
MySqlParser.PIPE = 321;
MySqlParser.PIPELINED = 322;
MySqlParser.PRAGMA = 323;
MySqlParser.RAISE = 324;
MySqlParser.RECORD = 325;
MySqlParser.REF = 326;
MySqlParser.RESPECT = 327;
MySqlParser.RESTRICT_REFERENCES = 328;
MySqlParser.RESULT_CACHE = 329;
MySqlParser.ROWTYPE = 330;
MySqlParser.ROWCOUNT = 331;
MySqlParser.SAVE = 332;
MySqlParser.SIBLINGS = 333;
MySqlParser.SUBTYPE = 334;
MySqlParser.SERIALLY_REUSABLE = 335;
MySqlParser.VARRAY = 336;
MySqlParser.TINYINT = 337;
MySqlParser.SMALLINT = 338;
MySqlParser.MEDIUMINT = 339;
MySqlParser.INT = 340;
MySqlParser.INTEGER = 341;
MySqlParser.BIGINT = 342;
MySqlParser.REAL = 343;
MySqlParser.DOUBLE = 344;
MySqlParser.PRECISION = 345;
MySqlParser.FLOAT = 346;
MySqlParser.DECIMAL = 347;
MySqlParser.DEC = 348;
MySqlParser.NUMERIC = 349;
MySqlParser.DATE = 350;
MySqlParser.TIME = 351;
MySqlParser.TIMESTAMP = 352;
MySqlParser.DATETIME = 353;
MySqlParser.YEAR = 354;
MySqlParser.CHAR = 355;
MySqlParser.VARCHAR = 356;
MySqlParser.NVARCHAR = 357;
MySqlParser.NATIONAL = 358;
MySqlParser.BINARY = 359;
MySqlParser.VARBINARY = 360;
MySqlParser.TINYBLOB = 361;
MySqlParser.BLOB = 362;
MySqlParser.MEDIUMBLOB = 363;
MySqlParser.LONGBLOB = 364;
MySqlParser.TINYTEXT = 365;
MySqlParser.TEXT = 366;
MySqlParser.MEDIUMTEXT = 367;
MySqlParser.LONGTEXT = 368;
MySqlParser.ENUM = 369;
MySqlParser.VARYING = 370;
MySqlParser.SERIAL = 371;
MySqlParser.ARRAY = 372;
MySqlParser.CLOB = 373;
MySqlParser.GEO = 374;
MySqlParser.NUMBER = 375;
MySqlParser.STRUCT = 376;
MySqlParser.VARCHAR2 = 377;
MySqlParser.YEAR_MONTH = 378;
MySqlParser.DAY_HOUR = 379;
MySqlParser.DAY_MINUTE = 380;
MySqlParser.DAY_SECOND = 381;
MySqlParser.HOUR_MINUTE = 382;
MySqlParser.HOUR_SECOND = 383;
MySqlParser.MINUTE_SECOND = 384;
MySqlParser.SECOND_MICROSECOND = 385;
MySqlParser.MINUTE_MICROSECOND = 386;
MySqlParser.HOUR_MICROSECOND = 387;
MySqlParser.DAY_MICROSECOND = 388;
MySqlParser.AVG = 389;
MySqlParser.BIT_AND = 390;
MySqlParser.BIT_OR = 391;
MySqlParser.BIT_XOR = 392;
MySqlParser.COUNT = 393;
MySqlParser.GROUP_CONCAT = 394;
MySqlParser.MAX = 395;
MySqlParser.MIN = 396;
MySqlParser.STD = 397;
MySqlParser.STDDEV = 398;
MySqlParser.STDDEV_POP = 399;
MySqlParser.STDDEV_SAMP = 400;
MySqlParser.SUM = 401;
MySqlParser.VAR_POP = 402;
MySqlParser.VAR_SAMP = 403;
MySqlParser.VARIANCE = 404;
MySqlParser.CURRENT_DATE = 405;
MySqlParser.CURRENT_TIME = 406;
MySqlParser.CURRENT_TIMESTAMP = 407;
MySqlParser.LOCALTIME = 408;
MySqlParser.CURDATE = 409;
MySqlParser.CURTIME = 410;
MySqlParser.DATE_ADD = 411;
MySqlParser.DATE_SUB = 412;
MySqlParser.EXTRACT = 413;
MySqlParser.LOCALTIMESTAMP = 414;
MySqlParser.NOW = 415;
MySqlParser.POSITION = 416;
MySqlParser.SUBSTR = 417;
MySqlParser.SUBSTRING = 418;
MySqlParser.SYSDATE = 419;
MySqlParser.TRIM = 420;
MySqlParser.UTC_DATE = 421;
MySqlParser.UTC_TIME = 422;
MySqlParser.UTC_TIMESTAMP = 423;
MySqlParser.ACCOUNT = 424;
MySqlParser.ACTION = 425;
MySqlParser.AFTER = 426;
MySqlParser.AGGREGATE = 427;
MySqlParser.ALGORITHM = 428;
MySqlParser.ANY = 429;
MySqlParser.AT = 430;
MySqlParser.AUTHORS = 431;
MySqlParser.AUTOCOMMIT = 432;
MySqlParser.AUTOEXTEND_SIZE = 433;
MySqlParser.AUTO_INCREMENT = 434;
MySqlParser.AVG_ROW_LENGTH = 435;
MySqlParser.BEGIN = 436;
MySqlParser.BINLOG = 437;
MySqlParser.BIT = 438;
MySqlParser.BLOCK = 439;
MySqlParser.BOOL = 440;
MySqlParser.BOOLEAN = 441;
MySqlParser.BTREE = 442;
MySqlParser.CACHE = 443;
MySqlParser.CASCADED = 444;
MySqlParser.CHAIN = 445;
MySqlParser.CHANGED = 446;
MySqlParser.CHANNEL = 447;
MySqlParser.CHECKSUM = 448;
MySqlParser.PAGE_CHECKSUM = 449;
MySqlParser.CIPHER = 450;
MySqlParser.CLIENT = 451;
MySqlParser.CLOSE = 452;
MySqlParser.COALESCE = 453;
MySqlParser.CODE = 454;
MySqlParser.COLUMNS = 455;
MySqlParser.COLUMN_FORMAT = 456;
MySqlParser.COMMENT = 457;
MySqlParser.COMMIT = 458;
MySqlParser.COMPACT = 459;
MySqlParser.COMPLETION = 460;
MySqlParser.COMPRESSED = 461;
MySqlParser.COMPRESSION = 462;
MySqlParser.CONCURRENT = 463;
MySqlParser.CONNECTION = 464;
MySqlParser.CONSISTENT = 465;
MySqlParser.CONTAINS = 466;
MySqlParser.CONTEXT = 467;
MySqlParser.CONTRIBUTORS = 468;
MySqlParser.COPY = 469;
MySqlParser.CPU = 470;
MySqlParser.DATA = 471;
MySqlParser.DATAFILE = 472;
MySqlParser.DEALLOCATE = 473;
MySqlParser.DEFAULT_AUTH = 474;
MySqlParser.DEFINER = 475;
MySqlParser.DELAY_KEY_WRITE = 476;
MySqlParser.DES_KEY_FILE = 477;
MySqlParser.DIRECTORY = 478;
MySqlParser.DISABLE = 479;
MySqlParser.DISCARD = 480;
MySqlParser.DISK = 481;
MySqlParser.DO = 482;
MySqlParser.DUMPFILE = 483;
MySqlParser.DUPLICATE = 484;
MySqlParser.DYNAMIC = 485;
MySqlParser.ENABLE = 486;
MySqlParser.ENCRYPTION = 487;
MySqlParser.END = 488;
MySqlParser.ENDS = 489;
MySqlParser.ENGINE = 490;
MySqlParser.ENGINES = 491;
MySqlParser.ERROR = 492;
MySqlParser.ERRORS = 493;
MySqlParser.ESCAPE = 494;
MySqlParser.EVEN = 495;
MySqlParser.EVENT = 496;
MySqlParser.EVENTS = 497;
MySqlParser.EVERY = 498;
MySqlParser.EXCHANGE = 499;
MySqlParser.EXCLUSIVE = 500;
MySqlParser.EXPIRE = 501;
MySqlParser.EXPORT = 502;
MySqlParser.EXTENDED = 503;
MySqlParser.EXTENT_SIZE = 504;
MySqlParser.FAST = 505;
MySqlParser.FAULTS = 506;
MySqlParser.FIELDS = 507;
MySqlParser.FILE_BLOCK_SIZE = 508;
MySqlParser.FILTER = 509;
MySqlParser.FIRST = 510;
MySqlParser.FIXED = 511;
MySqlParser.FLUSH = 512;
MySqlParser.FOLLOWS = 513;
MySqlParser.FOUND = 514;
MySqlParser.FULL = 515;
MySqlParser.FUNCTION = 516;
MySqlParser.GENERAL = 517;
MySqlParser.GLOBAL = 518;
MySqlParser.GRANTS = 519;
MySqlParser.GROUP_REPLICATION = 520;
MySqlParser.HANDLER = 521;
MySqlParser.HASH = 522;
MySqlParser.HELP = 523;
MySqlParser.HOST = 524;
MySqlParser.HOSTS = 525;
MySqlParser.IDENTIFIED = 526;
MySqlParser.IGNORE_SERVER_IDS = 527;
MySqlParser.IMPORT = 528;
MySqlParser.INDEXES = 529;
MySqlParser.INITIAL_SIZE = 530;
MySqlParser.INPLACE = 531;
MySqlParser.INSERT_METHOD = 532;
MySqlParser.INSTALL = 533;
MySqlParser.INSTANCE = 534;
MySqlParser.INVOKER = 535;
MySqlParser.IO = 536;
MySqlParser.IO_THREAD = 537;
MySqlParser.IPC = 538;
MySqlParser.ISOLATION = 539;
MySqlParser.ISSUER = 540;
MySqlParser.JSON = 541;
MySqlParser.KEY_BLOCK_SIZE = 542;
MySqlParser.LANGUAGE = 543;
MySqlParser.LAST = 544;
MySqlParser.LEAVES = 545;
MySqlParser.LESS = 546;
MySqlParser.LEVEL = 547;
MySqlParser.LIST = 548;
MySqlParser.LOCAL = 549;
MySqlParser.LOGFILE = 550;
MySqlParser.LOGS = 551;
MySqlParser.MASTER = 552;
MySqlParser.MASTER_AUTO_POSITION = 553;
MySqlParser.MASTER_CONNECT_RETRY = 554;
MySqlParser.MASTER_DELAY = 555;
MySqlParser.MASTER_HEARTBEAT_PERIOD = 556;
MySqlParser.MASTER_HOST = 557;
MySqlParser.MASTER_LOG_FILE = 558;
MySqlParser.MASTER_LOG_POS = 559;
MySqlParser.MASTER_PASSWORD = 560;
MySqlParser.MASTER_PORT = 561;
MySqlParser.MASTER_RETRY_COUNT = 562;
MySqlParser.MASTER_SSL = 563;
MySqlParser.MASTER_SSL_CA = 564;
MySqlParser.MASTER_SSL_CAPATH = 565;
MySqlParser.MASTER_SSL_CERT = 566;
MySqlParser.MASTER_SSL_CIPHER = 567;
MySqlParser.MASTER_SSL_CRL = 568;
MySqlParser.MASTER_SSL_CRLPATH = 569;
MySqlParser.MASTER_SSL_KEY = 570;
MySqlParser.MASTER_TLS_VERSION = 571;
MySqlParser.MASTER_USER = 572;
MySqlParser.MAX_CONNECTIONS_PER_HOUR = 573;
MySqlParser.MAX_QUERIES_PER_HOUR = 574;
MySqlParser.MAX_ROWS = 575;
MySqlParser.MAX_SIZE = 576;
MySqlParser.MAX_UPDATES_PER_HOUR = 577;
MySqlParser.MAX_USER_CONNECTIONS = 578;
MySqlParser.MEDIUM = 579;
MySqlParser.MERGE = 580;
MySqlParser.MID = 581;
MySqlParser.MIGRATE = 582;
MySqlParser.MIN_ROWS = 583;
MySqlParser.MODE = 584;
MySqlParser.MODIFY = 585;
MySqlParser.MUTEX = 586;
MySqlParser.MYSQL = 587;
MySqlParser.NAME = 588;
MySqlParser.NAMES = 589;
MySqlParser.NCHAR = 590;
MySqlParser.NEVER = 591;
MySqlParser.NEXT = 592;
MySqlParser.NO = 593;
MySqlParser.NODEGROUP = 594;
MySqlParser.NONE = 595;
MySqlParser.OFFLINE = 596;
MySqlParser.OFFSET = 597;
MySqlParser.OJ = 598;
MySqlParser.OLD_PASSWORD = 599;
MySqlParser.ONE = 600;
MySqlParser.ONLINE = 601;
MySqlParser.ONLY = 602;
MySqlParser.OPEN = 603;
MySqlParser.OPTIMIZER_COSTS = 604;
MySqlParser.OPTIONS = 605;
MySqlParser.OWNER = 606;
MySqlParser.PACK_KEYS = 607;
MySqlParser.PAGE = 608;
MySqlParser.PARSER = 609;
MySqlParser.PARTIAL = 610;
MySqlParser.PARTITIONING = 611;
MySqlParser.PARTITIONS = 612;
MySqlParser.PASSWORD = 613;
MySqlParser.PHASE = 614;
MySqlParser.PLUGIN = 615;
MySqlParser.PLUGIN_DIR = 616;
MySqlParser.PLUGINS = 617;
MySqlParser.PORT = 618;
MySqlParser.PRECEDES = 619;
MySqlParser.PREPARE = 620;
MySqlParser.PRESERVE = 621;
MySqlParser.PREV = 622;
MySqlParser.PROCESSLIST = 623;
MySqlParser.PROFILE = 624;
MySqlParser.PROFILES = 625;
MySqlParser.PROXY = 626;
MySqlParser.QUERY = 627;
MySqlParser.QUICK = 628;
MySqlParser.REBUILD = 629;
MySqlParser.RECOVER = 630;
MySqlParser.REDO_BUFFER_SIZE = 631;
MySqlParser.REDUNDANT = 632;
MySqlParser.RELAY = 633;
MySqlParser.RELAY_LOG_FILE = 634;
MySqlParser.RELAY_LOG_POS = 635;
MySqlParser.RELAYLOG = 636;
MySqlParser.REMOVE = 637;
MySqlParser.REORGANIZE = 638;
MySqlParser.REPAIR = 639;
MySqlParser.REPLICATE_DO_DB = 640;
MySqlParser.REPLICATE_DO_TABLE = 641;
MySqlParser.REPLICATE_IGNORE_DB = 642;
MySqlParser.REPLICATE_IGNORE_TABLE = 643;
MySqlParser.REPLICATE_REWRITE_DB = 644;
MySqlParser.REPLICATE_WILD_DO_TABLE = 645;
MySqlParser.REPLICATE_WILD_IGNORE_TABLE = 646;
MySqlParser.REPLICATION = 647;
MySqlParser.RESET = 648;
MySqlParser.RESUME = 649;
MySqlParser.RETURNS = 650;
MySqlParser.ROLLBACK = 651;
MySqlParser.ROLLUP = 652;
MySqlParser.ROTATE = 653;
MySqlParser.ROW = 654;
MySqlParser.ROWS = 655;
MySqlParser.ROW_FORMAT = 656;
MySqlParser.SAVEPOINT = 657;
MySqlParser.SCHEDULE = 658;
MySqlParser.SECURITY = 659;
MySqlParser.SERVER = 660;
MySqlParser.SESSION = 661;
MySqlParser.SHARE = 662;
MySqlParser.SHARED = 663;
MySqlParser.SIGNED = 664;
MySqlParser.SIMPLE = 665;
MySqlParser.SLAVE = 666;
MySqlParser.SLOW = 667;
MySqlParser.SNAPSHOT = 668;
MySqlParser.SOCKET = 669;
MySqlParser.SOME = 670;
MySqlParser.SONAME = 671;
MySqlParser.SOUNDS = 672;
MySqlParser.SOURCE = 673;
MySqlParser.SQL_AFTER_GTIDS = 674;
MySqlParser.SQL_AFTER_MTS_GAPS = 675;
MySqlParser.SQL_BEFORE_GTIDS = 676;
MySqlParser.SQL_BUFFER_RESULT = 677;
MySqlParser.SQL_CACHE = 678;
MySqlParser.SQL_NO_CACHE = 679;
MySqlParser.SQL_THREAD = 680;
MySqlParser.START = 681;
MySqlParser.STARTS = 682;
MySqlParser.STATS_AUTO_RECALC = 683;
MySqlParser.STATS_PERSISTENT = 684;
MySqlParser.STATS_SAMPLE_PAGES = 685;
MySqlParser.STATUS = 686;
MySqlParser.STOP = 687;
MySqlParser.STORAGE = 688;
MySqlParser.STORED = 689;
MySqlParser.STRING = 690;
MySqlParser.SUBJECT = 691;
MySqlParser.SUBPARTITION = 692;
MySqlParser.SUBPARTITIONS = 693;
MySqlParser.SUSPEND = 694;
MySqlParser.SWAPS = 695;
MySqlParser.SWITCHES = 696;
MySqlParser.TABLESPACE = 697;
MySqlParser.TEMPORARY = 698;
MySqlParser.TEMPTABLE = 699;
MySqlParser.THAN = 700;
MySqlParser.TRADITIONAL = 701;
MySqlParser.TRANSACTION = 702;
MySqlParser.TRIGGERS = 703;
MySqlParser.TRUNCATE = 704;
MySqlParser.UNDEFINED = 705;
MySqlParser.UNDOFILE = 706;
MySqlParser.UNDO_BUFFER_SIZE = 707;
MySqlParser.UNINSTALL = 708;
MySqlParser.UNKNOWN = 709;
MySqlParser.UNTIL = 710;
MySqlParser.UPGRADE = 711;
MySqlParser.USER = 712;
MySqlParser.USE_FRM = 713;
MySqlParser.USER_RESOURCES = 714;
MySqlParser.VALIDATION = 715;
MySqlParser.VALUE = 716;
MySqlParser.VARIABLES = 717;
MySqlParser.VIEW = 718;
MySqlParser.VIRTUAL = 719;
MySqlParser.WAIT = 720;
MySqlParser.WARNINGS = 721;
MySqlParser.WITHOUT = 722;
MySqlParser.WORK = 723;
MySqlParser.WRAPPER = 724;
MySqlParser.X509 = 725;
MySqlParser.XA = 726;
MySqlParser.XML = 727;
MySqlParser.EUR = 728;
MySqlParser.USA = 729;
MySqlParser.JIS = 730;
MySqlParser.ISO = 731;
MySqlParser.QUARTER = 732;
MySqlParser.MONTH = 733;
MySqlParser.DAY = 734;
MySqlParser.HOUR = 735;
MySqlParser.MINUTE = 736;
MySqlParser.WEEK = 737;
MySqlParser.SECOND = 738;
MySqlParser.MICROSECOND = 739;
MySqlParser.TABLES = 740;
MySqlParser.ROUTINE = 741;
MySqlParser.EXECUTE = 742;
MySqlParser.FILE = 743;
MySqlParser.PROCESS = 744;
MySqlParser.RELOAD = 745;
MySqlParser.SHUTDOWN = 746;
MySqlParser.SUPER = 747;
MySqlParser.PRIVILEGES = 748;
MySqlParser.ARMSCII8 = 749;
MySqlParser.ASCII = 750;
MySqlParser.BIG5 = 751;
MySqlParser.CP1250 = 752;
MySqlParser.CP1251 = 753;
MySqlParser.CP1256 = 754;
MySqlParser.CP1257 = 755;
MySqlParser.CP850 = 756;
MySqlParser.CP852 = 757;
MySqlParser.CP866 = 758;
MySqlParser.CP932 = 759;
MySqlParser.DEC8 = 760;
MySqlParser.EUCJPMS = 761;
MySqlParser.EUCKR = 762;
MySqlParser.GB2312 = 763;
MySqlParser.GBK = 764;
MySqlParser.GEOSTD8 = 765;
MySqlParser.GREEK = 766;
MySqlParser.HEBREW = 767;
MySqlParser.HP8 = 768;
MySqlParser.KEYBCS2 = 769;
MySqlParser.KOI8R = 770;
MySqlParser.KOI8U = 771;
MySqlParser.LATIN1 = 772;
MySqlParser.LATIN2 = 773;
MySqlParser.LATIN5 = 774;
MySqlParser.LATIN7 = 775;
MySqlParser.MACCE = 776;
MySqlParser.MACROMAN = 777;
MySqlParser.SJIS = 778;
MySqlParser.SWE7 = 779;
MySqlParser.TIS620 = 780;
MySqlParser.UCS2 = 781;
MySqlParser.UJIS = 782;
MySqlParser.UTF16 = 783;
MySqlParser.UTF16LE = 784;
MySqlParser.UTF32 = 785;
MySqlParser.UTF8 = 786;
MySqlParser.UTF8MB3 = 787;
MySqlParser.UTF8MB4 = 788;
MySqlParser.CSVFILE = 789;
MySqlParser.ES = 790;
MySqlParser.FWCFILE = 791;
MySqlParser.HOLODESK = 792;
MySqlParser.HYPERDRIVE = 793;
MySqlParser.ORC = 794;
MySqlParser.ORC_TRANSACTION = 795;
MySqlParser.PARQUET = 796;
MySqlParser.RCFILE = 797;
MySqlParser.SEQUENCEFILE = 798;
MySqlParser.STARGATE = 799;
MySqlParser.STELLARDB = 800;
MySqlParser.TEXTFILE = 801;
MySqlParser.ARCHIVE = 802;
MySqlParser.BLACKHOLE = 803;
MySqlParser.CSV = 804;
MySqlParser.FEDERATED = 805;
MySqlParser.INNODB = 806;
MySqlParser.MEMORY = 807;
MySqlParser.MRG_MYISAM = 808;
MySqlParser.MYISAM = 809;
MySqlParser.NDB = 810;
MySqlParser.NDBCLUSTER = 811;
MySqlParser.PERFORMANCE_SCHEMA = 812;
MySqlParser.TOKUDB = 813;
MySqlParser.REPEATABLE = 814;
MySqlParser.COMMITTED = 815;
MySqlParser.UNCOMMITTED = 816;
MySqlParser.SERIALIZABLE = 817;
MySqlParser.GEOMETRYCOLLECTION = 818;
MySqlParser.GEOMCOLLECTION = 819;
MySqlParser.GEOMETRY = 820;
MySqlParser.LINESTRING = 821;
MySqlParser.MULTILINESTRING = 822;
MySqlParser.MULTIPOINT = 823;
MySqlParser.MULTIPOLYGON = 824;
MySqlParser.POINT = 825;
MySqlParser.POLYGON = 826;
MySqlParser.CHARSET = 827;
MySqlParser.COLLATION = 828;
MySqlParser.FORMAT = 829;
MySqlParser.GET_FORMAT = 830;
MySqlParser.LOG = 831;
MySqlParser.REVERSE = 832;
MySqlParser.WEIGHT_STRING = 833;
MySqlParser.VAR_ASSIGN = 834;
MySqlParser.PLUS_ASSIGN = 835;
MySqlParser.MINUS_ASSIGN = 836;
MySqlParser.MULT_ASSIGN = 837;
MySqlParser.DIV_ASSIGN = 838;
MySqlParser.MOD_ASSIGN = 839;
MySqlParser.AND_ASSIGN = 840;
MySqlParser.XOR_ASSIGN = 841;
MySqlParser.OR_ASSIGN = 842;
MySqlParser.STAR = 843;
MySqlParser.DIVIDE = 844;
MySqlParser.MODULE = 845;
MySqlParser.PLUS = 846;
MySqlParser.MINUSMINUS = 847;
MySqlParser.MINUS = 848;
MySqlParser.DIV = 849;
MySqlParser.MOD = 850;
MySqlParser.EQUAL_SYMBOL = 851;
MySqlParser.GREATER_SYMBOL = 852;
MySqlParser.LESS_SYMBOL = 853;
MySqlParser.EXCLAMATION_SYMBOL = 854;
MySqlParser.BIT_NOT_OP = 855;
MySqlParser.BIT_OR_OP = 856;
MySqlParser.BIT_AND_OP = 857;
MySqlParser.BIT_XOR_OP = 858;
MySqlParser.DOT = 859;
MySqlParser.LC_BRACKET = 860;
MySqlParser.RC_BRACKET = 861;
MySqlParser.LR_BRACKET = 862;
MySqlParser.RR_BRACKET = 863;
MySqlParser.LS_BRACKET = 864;
MySqlParser.RS_BRACKET = 865;
MySqlParser.COMMA = 866;
MySqlParser.SEMI = 867;
MySqlParser.AT_SIGN = 868;
MySqlParser.ZERO_DECIMAL = 869;
MySqlParser.ONE_DECIMAL = 870;
MySqlParser.TWO_DECIMAL = 871;
MySqlParser.SINGLE_QUOTE_SYMB = 872;
MySqlParser.DOUBLE_QUOTE_SYMB = 873;
MySqlParser.REVERSE_QUOTE_SYMB = 874;
MySqlParser.COLON_SYMB = 875;
MySqlParser.DOLLAR_SIGN = 876;
MySqlParser.CHARSET_REVERSE_QOUTE_STRING = 877;
MySqlParser.FILESIZE_LITERAL = 878;
MySqlParser.START_NATIONAL_STRING_LITERAL = 879;
MySqlParser.STRING_LITERAL = 880;
MySqlParser.DECIMAL_LITERAL = 881;
MySqlParser.HEXADECIMAL_LITERAL = 882;
MySqlParser.REAL_LITERAL = 883;
MySqlParser.NULL_SPEC_LITERAL = 884;
MySqlParser.BIT_STRING = 885;
MySqlParser.STRING_CHARSET_NAME = 886;
MySqlParser.DOT_ID = 887;
MySqlParser.ID = 888;
MySqlParser.REVERSE_QUOTE_ID = 889;
MySqlParser.STRING_USER_NAME = 890;
MySqlParser.LOCAL_ID = 891;
MySqlParser.GLOBAL_ID = 892;
MySqlParser.TEMPLATE_ID = 893;
MySqlParser.QUESTION_MARK = 894;
MySqlParser.INTRODUCER = 895;
MySqlParser.TWO_DOTS = 896;
MySqlParser.ERROR_RECONGNIGION = 897;

MySqlParser.RULE_root = 0;
MySqlParser.RULE_sqlStatements = 1;
MySqlParser.RULE_sqlStatement = 2;
MySqlParser.RULE_emptyStatement = 3;
MySqlParser.RULE_ddlStatement = 4;
MySqlParser.RULE_dmlStatement = 5;
MySqlParser.RULE_transactionStatement = 6;
MySqlParser.RULE_replicationStatement = 7;
MySqlParser.RULE_preparedStatement = 8;
MySqlParser.RULE_compoundStatement = 9;
MySqlParser.RULE_administrationStatement = 10;
MySqlParser.RULE_utilityStatement = 11;
MySqlParser.RULE_dclStatement = 12;
MySqlParser.RULE_anchorStatement = 13;
MySqlParser.RULE_startAnchor = 14;
MySqlParser.RULE_createAnchor = 15;
MySqlParser.RULE_dropAnchor = 16;
MySqlParser.RULE_createDatabase = 17;
MySqlParser.RULE_createEvent = 18;
MySqlParser.RULE_createIndex = 19;
MySqlParser.RULE_createLogfileGroup = 20;
MySqlParser.RULE_createProcedure = 21;
MySqlParser.RULE_createFunction = 22;
MySqlParser.RULE_createTemporaryFunction = 23;
MySqlParser.RULE_createServer = 24;
MySqlParser.RULE_createTable = 25;
MySqlParser.RULE_createTablespaceInnodb = 26;
MySqlParser.RULE_createTablespaceNdb = 27;
MySqlParser.RULE_createTrigger = 28;
MySqlParser.RULE_createView = 29;
MySqlParser.RULE_createViewMysql = 30;
MySqlParser.RULE_createViewInceptor = 31;
MySqlParser.RULE_createDatabaseOption = 32;
MySqlParser.RULE_mysqlCreateDatabaseOption = 33;
MySqlParser.RULE_inceptorCreateDatabaseOption = 34;
MySqlParser.RULE_keyOrValueProperties = 35;
MySqlParser.RULE_keyProperties = 36;
MySqlParser.RULE_keyValueProperties = 37;
MySqlParser.RULE_keyValueProperty = 38;
MySqlParser.RULE_idValueProperties = 39;
MySqlParser.RULE_idValueProperty = 40;
MySqlParser.RULE_orReplaceDialectAction = 41;
MySqlParser.RULE_ownerStatement = 42;
MySqlParser.RULE_scheduleExpression = 43;
MySqlParser.RULE_timestampValue = 44;
MySqlParser.RULE_intervalExpr = 45;
MySqlParser.RULE_intervalType = 46;
MySqlParser.RULE_enableType = 47;
MySqlParser.RULE_indexType = 48;
MySqlParser.RULE_indexOption = 49;
MySqlParser.RULE_procedureParameter = 50;
MySqlParser.RULE_functionParameter = 51;
MySqlParser.RULE_permanentFunctionResource = 52;
MySqlParser.RULE_routineOption = 53;
MySqlParser.RULE_serverOption = 54;
MySqlParser.RULE_createTableHead = 55;
MySqlParser.RULE_createTableAsKeyViolate = 56;
MySqlParser.RULE_createTableQuery = 57;
MySqlParser.RULE_createTableLikeOption = 58;
MySqlParser.RULE_createTableCreateOption = 59;
MySqlParser.RULE_createDefinitions = 60;
MySqlParser.RULE_createDefinition = 61;
MySqlParser.RULE_createColumnDeclaration = 62;
MySqlParser.RULE_columnDefinition = 63;
MySqlParser.RULE_columnConstraintMysql = 64;
MySqlParser.RULE_columnConstraintInceptor = 65;
MySqlParser.RULE_columnAnalyzer = 66;
MySqlParser.RULE_constraintOpts = 67;
MySqlParser.RULE_asSelectStatement = 68;
MySqlParser.RULE_uidCommentList = 69;
MySqlParser.RULE_uidComment = 70;
MySqlParser.RULE_tableBuckets = 71;
MySqlParser.RULE_intoBuckets = 72;
MySqlParser.RULE_tableSkewed = 73;
MySqlParser.RULE_setSerde = 74;
MySqlParser.RULE_esProps = 75;
MySqlParser.RULE_holoProps = 76;
MySqlParser.RULE_holoTableSize = 77;
MySqlParser.RULE_dialectWithNoData = 78;
MySqlParser.RULE_commentClause = 79;
MySqlParser.RULE_setLocationDefinition = 80;
MySqlParser.RULE_locationDefinition = 81;
MySqlParser.RULE_tblPropertiesDefinition = 82;
MySqlParser.RULE_errorLogTableDefinition = 83;
MySqlParser.RULE_errorRejectSpec = 84;
MySqlParser.RULE_tableConstraint = 85;
MySqlParser.RULE_tableConstraintMysql = 86;
MySqlParser.RULE_tableConstraintInceptor = 87;
MySqlParser.RULE_referenceDefinition = 88;
MySqlParser.RULE_referenceAction = 89;
MySqlParser.RULE_referenceControlType = 90;
MySqlParser.RULE_indexColumnDefinition = 91;
MySqlParser.RULE_tableOption = 92;
MySqlParser.RULE_tablespaceStorage = 93;
MySqlParser.RULE_partitionDefinitions = 94;
MySqlParser.RULE_partitionFunctionDefinition = 95;
MySqlParser.RULE_subpartitionFunctionDefinition = 96;
MySqlParser.RULE_partitionDefinition = 97;
MySqlParser.RULE_partitionDefinerAtom = 98;
MySqlParser.RULE_partitionDefinerVector = 99;
MySqlParser.RULE_subpartitionDefinition = 100;
MySqlParser.RULE_partitionOption = 101;
MySqlParser.RULE_alterDatabase = 102;
MySqlParser.RULE_alterEvent = 103;
MySqlParser.RULE_alterFunction = 104;
MySqlParser.RULE_alterInstance = 105;
MySqlParser.RULE_alterLogfileGroup = 106;
MySqlParser.RULE_alterProcedure = 107;
MySqlParser.RULE_alterServer = 108;
MySqlParser.RULE_alterTable = 109;
MySqlParser.RULE_alterTablespace = 110;
MySqlParser.RULE_alterView = 111;
MySqlParser.RULE_alterDatabaseOption = 112;
MySqlParser.RULE_alterDatabaseSetDbproperties = 113;
MySqlParser.RULE_alterDatabaseSetOwner = 114;
MySqlParser.RULE_alterDatabaseAnchor = 115;
MySqlParser.RULE_alterTableAction = 116;
MySqlParser.RULE_alterSpecification = 117;
MySqlParser.RULE_alterSpecificationMysql = 118;
MySqlParser.RULE_alterSpecificationMysqlItem = 119;
MySqlParser.RULE_alterSpecificationInceptor = 120;
MySqlParser.RULE_intoTable = 121;
MySqlParser.RULE_alterSpecificationAnchor = 122;
MySqlParser.RULE_alterSpecificationColumn = 123;
MySqlParser.RULE_alterSpecificationPartition = 124;
MySqlParser.RULE_alterTablePartitionOption = 125;
MySqlParser.RULE_alterSpecificationSkewed = 126;
MySqlParser.RULE_alterSpecificationConstraint = 127;
MySqlParser.RULE_foreignKeyReferences = 128;
MySqlParser.RULE_restrictOrCascade = 129;
MySqlParser.RULE_dropDatabase = 130;
MySqlParser.RULE_dropEvent = 131;
MySqlParser.RULE_dropIndex = 132;
MySqlParser.RULE_dropLogfileGroup = 133;
MySqlParser.RULE_dropProcedure = 134;
MySqlParser.RULE_dropFunction = 135;
MySqlParser.RULE_dropServer = 136;
MySqlParser.RULE_dropTable = 137;
MySqlParser.RULE_dropTablespace = 138;
MySqlParser.RULE_dropTrigger = 139;
MySqlParser.RULE_dropView = 140;
MySqlParser.RULE_functionType = 141;
MySqlParser.RULE_renameTable = 142;
MySqlParser.RULE_renameTableClause = 143;
MySqlParser.RULE_truncateTable = 144;
MySqlParser.RULE_callStatement = 145;
MySqlParser.RULE_deleteStatement = 146;
MySqlParser.RULE_doStatement = 147;
MySqlParser.RULE_handlerStatement = 148;
MySqlParser.RULE_insertStatement = 149;
MySqlParser.RULE_fromInsertStatement = 150;
MySqlParser.RULE_fromInsertStatementInsert = 151;
MySqlParser.RULE_fromInsertStatementSelect = 152;
MySqlParser.RULE_insertTypeAnchor = 153;
MySqlParser.RULE_insertFile = 154;
MySqlParser.RULE_loadDataStatement = 155;
MySqlParser.RULE_loadDataMysql = 156;
MySqlParser.RULE_loadDataInceptor = 157;
MySqlParser.RULE_loadDataInceptorTable = 158;
MySqlParser.RULE_loadDataInceptorAnchor = 159;
MySqlParser.RULE_loadXmlStatement = 160;
MySqlParser.RULE_mergeStatement = 161;
MySqlParser.RULE_replaceStatement = 162;
MySqlParser.RULE_selectStatement = 163;
MySqlParser.RULE_updateStatement = 164;
MySqlParser.RULE_withStatement = 165;
MySqlParser.RULE_withCommonTableExpression = 166;
MySqlParser.RULE_insertPartitionSpec = 167;
MySqlParser.RULE_insertOnDuplicate = 168;
MySqlParser.RULE_rowFormatDelimited = 169;
MySqlParser.RULE_rowFormatDelimitedTail = 170;
MySqlParser.RULE_rowFormatSerde = 171;
MySqlParser.RULE_rowFormatSerdeTail = 172;
MySqlParser.RULE_rowFormat = 173;
MySqlParser.RULE_fileStore = 174;
MySqlParser.RULE_fileFormat = 175;
MySqlParser.RULE_fileFormatEnum = 176;
MySqlParser.RULE_fileStoreBy = 177;
MySqlParser.RULE_insertAction = 178;
MySqlParser.RULE_insertStatementValue = 179;
MySqlParser.RULE_insertValueClause = 180;
MySqlParser.RULE_updatedElement = 181;
MySqlParser.RULE_assignmentField = 182;
MySqlParser.RULE_mergeUsingClause = 183;
MySqlParser.RULE_mergeUpdateClause = 184;
MySqlParser.RULE_mergeInsertClause = 185;
MySqlParser.RULE_lockClause = 186;
MySqlParser.RULE_singleDeleteStatement = 187;
MySqlParser.RULE_multipleDeleteStatement = 188;
MySqlParser.RULE_handlerOpenStatement = 189;
MySqlParser.RULE_handlerReadIndexStatement = 190;
MySqlParser.RULE_handlerReadStatement = 191;
MySqlParser.RULE_handlerCloseStatement = 192;
MySqlParser.RULE_singleUpdateStatement = 193;
MySqlParser.RULE_multipleUpdateStatement = 194;
MySqlParser.RULE_setUpdatedElements = 195;
MySqlParser.RULE_updateStatementInceptor = 196;
MySqlParser.RULE_crudTargetClause = 197;
MySqlParser.RULE_updateAssignClause = 198;
MySqlParser.RULE_updateAssignClauseElement = 199;
MySqlParser.RULE_deleteStatementInceptor = 200;
MySqlParser.RULE_orderByClause = 201;
MySqlParser.RULE_orderByExpression = 202;
MySqlParser.RULE_nullsOrder = 203;
MySqlParser.RULE_clusterByClause = 204;
MySqlParser.RULE_distributeByClause = 205;
MySqlParser.RULE_sortByClause = 206;
MySqlParser.RULE_tableSources = 207;
MySqlParser.RULE_tableSource = 208;
MySqlParser.RULE_tableSourceItem = 209;
MySqlParser.RULE_tableSourceItemIndex = 210;
MySqlParser.RULE_fromClauseSuggester = 211;
MySqlParser.RULE_selectStatementPlus = 212;
MySqlParser.RULE_valuesSourceExprs = 213;
MySqlParser.RULE_indexHint = 214;
MySqlParser.RULE_indexHintType = 215;
MySqlParser.RULE_joinPart = 216;
MySqlParser.RULE_joinTypeAnchor = 217;
MySqlParser.RULE_joinOuterType = 218;
MySqlParser.RULE_joinNaturalSubType = 219;
MySqlParser.RULE_joinCondition = 220;
MySqlParser.RULE_lateralView = 221;
MySqlParser.RULE_queryExpression = 222;
MySqlParser.RULE_queryExpressionNointo = 223;
MySqlParser.RULE_querySpecification = 224;
MySqlParser.RULE_querySpecificationNointo = 225;
MySqlParser.RULE_unionParenthesis = 226;
MySqlParser.RULE_unionStatement = 227;
MySqlParser.RULE_selectSpec = 228;
MySqlParser.RULE_selectSpecMysql = 229;
MySqlParser.RULE_selectSpecInceptor = 230;
MySqlParser.RULE_selectElements = 231;
MySqlParser.RULE_selectElement = 232;
MySqlParser.RULE_selectIntoExpression = 233;
MySqlParser.RULE_selectFieldsInto = 234;
MySqlParser.RULE_selectLinesInto = 235;
MySqlParser.RULE_fromClause = 236;
MySqlParser.RULE_groupByClause = 237;
MySqlParser.RULE_havingClause = 238;
MySqlParser.RULE_whereExpressionOptional = 239;
MySqlParser.RULE_hierarchyClause = 240;
MySqlParser.RULE_groupByItems = 241;
MySqlParser.RULE_groupByItem = 242;
MySqlParser.RULE_limitClause = 243;
MySqlParser.RULE_limitClauseMysql = 244;
MySqlParser.RULE_limitClauseAtom = 245;
MySqlParser.RULE_limitClauseInceptor = 246;
MySqlParser.RULE_startTransaction = 247;
MySqlParser.RULE_beginWork = 248;
MySqlParser.RULE_commitWork = 249;
MySqlParser.RULE_rollbackWork = 250;
MySqlParser.RULE_savepointStatement = 251;
MySqlParser.RULE_rollbackStatement = 252;
MySqlParser.RULE_releaseStatement = 253;
MySqlParser.RULE_lockTables = 254;
MySqlParser.RULE_unlockTables = 255;
MySqlParser.RULE_transactionStatementInceptor = 256;
MySqlParser.RULE_setAutocommitStatement = 257;
MySqlParser.RULE_setTransactionStatement = 258;
MySqlParser.RULE_setTransactionStatementInceptor = 259;
MySqlParser.RULE_setTransactionStatementMysql = 260;
MySqlParser.RULE_transactionMode = 261;
MySqlParser.RULE_lockTableElement = 262;
MySqlParser.RULE_lockAction = 263;
MySqlParser.RULE_transactionOption = 264;
MySqlParser.RULE_transactionLevel = 265;
MySqlParser.RULE_changeMaster = 266;
MySqlParser.RULE_changeReplicationFilter = 267;
MySqlParser.RULE_purgeBinaryLogs = 268;
MySqlParser.RULE_resetMaster = 269;
MySqlParser.RULE_resetSlave = 270;
MySqlParser.RULE_startSlave = 271;
MySqlParser.RULE_stopSlave = 272;
MySqlParser.RULE_startGroupReplication = 273;
MySqlParser.RULE_stopGroupReplication = 274;
MySqlParser.RULE_masterOption = 275;
MySqlParser.RULE_stringMasterOption = 276;
MySqlParser.RULE_decimalMasterOption = 277;
MySqlParser.RULE_boolMasterOption = 278;
MySqlParser.RULE_channelOption = 279;
MySqlParser.RULE_replicationFilter = 280;
MySqlParser.RULE_tablePair = 281;
MySqlParser.RULE_threadType = 282;
MySqlParser.RULE_untilOption = 283;
MySqlParser.RULE_connectionOption = 284;
MySqlParser.RULE_gtuidSet = 285;
MySqlParser.RULE_xaStartTransaction = 286;
MySqlParser.RULE_xaEndTransaction = 287;
MySqlParser.RULE_xaPrepareStatement = 288;
MySqlParser.RULE_xaCommitWork = 289;
MySqlParser.RULE_xaRollbackWork = 290;
MySqlParser.RULE_xaRecoverWork = 291;
MySqlParser.RULE_prepareStatement = 292;
MySqlParser.RULE_executeStatement = 293;
MySqlParser.RULE_deallocatePrepare = 294;
MySqlParser.RULE_routineBody = 295;
MySqlParser.RULE_blockStatement = 296;
MySqlParser.RULE_caseStatement = 297;
MySqlParser.RULE_ifStatement = 298;
MySqlParser.RULE_iterateStatement = 299;
MySqlParser.RULE_leaveStatement = 300;
MySqlParser.RULE_loopStatement = 301;
MySqlParser.RULE_repeatStatement = 302;
MySqlParser.RULE_returnStatement = 303;
MySqlParser.RULE_whileStatement = 304;
MySqlParser.RULE_cursorStatement = 305;
MySqlParser.RULE_declareVariable = 306;
MySqlParser.RULE_declareCondition = 307;
MySqlParser.RULE_declareCursor = 308;
MySqlParser.RULE_declareHandler = 309;
MySqlParser.RULE_declareRowDataType = 310;
MySqlParser.RULE_cursorDialectOption = 311;
MySqlParser.RULE_conditionDialectOption = 312;
MySqlParser.RULE_handlerConditionValue = 313;
MySqlParser.RULE_procedureSqlStatement = 314;
MySqlParser.RULE_caseAlternative = 315;
MySqlParser.RULE_elifAlternative = 316;
MySqlParser.RULE_alterUser = 317;
MySqlParser.RULE_createUser = 318;
MySqlParser.RULE_dropUser = 319;
MySqlParser.RULE_grantStatement = 320;
MySqlParser.RULE_grantProxy = 321;
MySqlParser.RULE_renameUser = 322;
MySqlParser.RULE_revokeStatement = 323;
MySqlParser.RULE_revokeProxy = 324;
MySqlParser.RULE_setPasswordStatement = 325;
MySqlParser.RULE_grantStatementInceptor = 326;
MySqlParser.RULE_revokeStatementInceptor = 327;
MySqlParser.RULE_showGrantInceptor = 328;
MySqlParser.RULE_grantPermission = 329;
MySqlParser.RULE_revokePermission = 330;
MySqlParser.RULE_showPermission = 331;
MySqlParser.RULE_grantFacl = 332;
MySqlParser.RULE_revokeFacl = 333;
MySqlParser.RULE_showFacl = 334;
MySqlParser.RULE_grantQuota = 335;
MySqlParser.RULE_revokeQuota = 336;
MySqlParser.RULE_showQuota = 337;
MySqlParser.RULE_roleStatementInceptor = 338;
MySqlParser.RULE_showPrincipal = 339;
MySqlParser.RULE_privilegeList = 340;
MySqlParser.RULE_privlegeDef = 341;
MySqlParser.RULE_privilegeType = 342;
MySqlParser.RULE_privilegeObjectSpec = 343;
MySqlParser.RULE_principalNames = 344;
MySqlParser.RULE_quotaUser = 345;
MySqlParser.RULE_onTableOrView = 346;
MySqlParser.RULE_quotaDb = 347;
MySqlParser.RULE_userOrGroup = 348;
MySqlParser.RULE_principalName = 349;
MySqlParser.RULE_userSpecification = 350;
MySqlParser.RULE_userAuthOption = 351;
MySqlParser.RULE_tlsOption = 352;
MySqlParser.RULE_userResourceOption = 353;
MySqlParser.RULE_userPasswordOption = 354;
MySqlParser.RULE_userLockOption = 355;
MySqlParser.RULE_privelegeClause = 356;
MySqlParser.RULE_privilege = 357;
MySqlParser.RULE_privilegeLevel = 358;
MySqlParser.RULE_renameUserClause = 359;
MySqlParser.RULE_analyzeTable = 360;
MySqlParser.RULE_checkTable = 361;
MySqlParser.RULE_checksumTable = 362;
MySqlParser.RULE_optimizeTable = 363;
MySqlParser.RULE_repairTable = 364;
MySqlParser.RULE_checkTableOption = 365;
MySqlParser.RULE_createUdfunction = 366;
MySqlParser.RULE_installPlugin = 367;
MySqlParser.RULE_uninstallPlugin = 368;
MySqlParser.RULE_setStatement = 369;
MySqlParser.RULE_showStatement = 370;
MySqlParser.RULE_showStatementMysql = 371;
MySqlParser.RULE_showStatementInceptor = 372;
MySqlParser.RULE_variableAssignment = 373;
MySqlParser.RULE_variableClause = 374;
MySqlParser.RULE_variableFullId = 375;
MySqlParser.RULE_variableExprReserved = 376;
MySqlParser.RULE_showCommonEntity = 377;
MySqlParser.RULE_showFilter = 378;
MySqlParser.RULE_showGlobalInfoClause = 379;
MySqlParser.RULE_showSchemaEntity = 380;
MySqlParser.RULE_showProfileType = 381;
MySqlParser.RULE_fromDatabase = 382;
MySqlParser.RULE_addJarStatement = 383;
MySqlParser.RULE_listJarStatement = 384;
MySqlParser.RULE_binlogStatement = 385;
MySqlParser.RULE_cacheIndexStatement = 386;
MySqlParser.RULE_flushStatement = 387;
MySqlParser.RULE_killStatement = 388;
MySqlParser.RULE_loadIndexIntoCache = 389;
MySqlParser.RULE_resetStatement = 390;
MySqlParser.RULE_shutdownStatement = 391;
MySqlParser.RULE_setDelimiter = 392;
MySqlParser.RULE_setDelimiterToken = 393;
MySqlParser.RULE_setPlsqlDialect = 394;
MySqlParser.RULE_setPlsqlDialectId = 395;
MySqlParser.RULE_tableIndexes = 396;
MySqlParser.RULE_flushOption = 397;
MySqlParser.RULE_flushTableOption = 398;
MySqlParser.RULE_loadedTableIndexes = 399;
MySqlParser.RULE_describeStatement = 400;
MySqlParser.RULE_describeStatementMysql = 401;
MySqlParser.RULE_simpleDescribeStatement = 402;
MySqlParser.RULE_fullDescribeStatement = 403;
MySqlParser.RULE_describeStatementInceptor = 404;
MySqlParser.RULE_helpStatement = 405;
MySqlParser.RULE_useStatement = 406;
MySqlParser.RULE_describeObjectClause = 407;
MySqlParser.RULE_tablePartitionedBy = 408;
MySqlParser.RULE_dropPartitionAtom = 409;
MySqlParser.RULE_rangePartition = 410;
MySqlParser.RULE_partitionPlus = 411;
MySqlParser.RULE_partitionSpec = 412;
MySqlParser.RULE_partitionSpecList = 413;
MySqlParser.RULE_partitionSpecMap = 414;
MySqlParser.RULE_fullId = 415;
MySqlParser.RULE_tableName = 416;
MySqlParser.RULE_viewName = 417;
MySqlParser.RULE_tripleId = 418;
MySqlParser.RULE_columnUid = 419;
MySqlParser.RULE_fullColumnNameOptional = 420;
MySqlParser.RULE_fullColumnName = 421;
MySqlParser.RULE_prefixedColumnNameOptional = 422;
MySqlParser.RULE_prefixedColumnName = 423;
MySqlParser.RULE_funcName = 424;
MySqlParser.RULE_udfName = 425;
MySqlParser.RULE_procName = 426;
MySqlParser.RULE_packName = 427;
MySqlParser.RULE_funcColumnName = 428;
MySqlParser.RULE_funcColumnNameOptional = 429;
MySqlParser.RULE_wildFuncOptional = 430;
MySqlParser.RULE_wildUid = 431;
MySqlParser.RULE_indexColumnName = 432;
MySqlParser.RULE_userName = 433;
MySqlParser.RULE_mysqlVariable = 434;
MySqlParser.RULE_charsetName = 435;
MySqlParser.RULE_collationName = 436;
MySqlParser.RULE_engineName = 437;
MySqlParser.RULE_uuidSet = 438;
MySqlParser.RULE_xid = 439;
MySqlParser.RULE_xuidStringId = 440;
MySqlParser.RULE_authPlugin = 441;
MySqlParser.RULE_uid = 442;
MySqlParser.RULE_simpleId = 443;
MySqlParser.RULE_templateId = 444;
MySqlParser.RULE_dottedId = 445;
MySqlParser.RULE_filePath = 446;
MySqlParser.RULE_fileSegment = 447;
MySqlParser.RULE_decimalLiteral = 448;
MySqlParser.RULE_fileSizeLiteral = 449;
MySqlParser.RULE_stringLiteral = 450;
MySqlParser.RULE_stringLiteralCollate = 451;
MySqlParser.RULE_booleanLiteral = 452;
MySqlParser.RULE_hexadecimalLiteral = 453;
MySqlParser.RULE_nullNotnull = 454;
MySqlParser.RULE_constant = 455;
MySqlParser.RULE_dataType = 456;
MySqlParser.RULE_mySqlDataType = 457;
MySqlParser.RULE_inceptorDataType = 458;
MySqlParser.RULE_inceptorStructDataTypeItem = 459;
MySqlParser.RULE_collectionOptions = 460;
MySqlParser.RULE_convertedDataType = 461;
MySqlParser.RULE_lengthOneDimension = 462;
MySqlParser.RULE_lengthTwoDimension = 463;
MySqlParser.RULE_lengthTwoOptionalDimension = 464;
MySqlParser.RULE_uidList = 465;
MySqlParser.RULE_uidOrderList = 466;
MySqlParser.RULE_uidOrder = 467;
MySqlParser.RULE_fullIdList = 468;
MySqlParser.RULE_columnUids = 469;
MySqlParser.RULE_columnNames = 470;
MySqlParser.RULE_tables = 471;
MySqlParser.RULE_indexColumnNames = 472;
MySqlParser.RULE_expressions = 473;
MySqlParser.RULE_expressionsWithDefaults = 474;
MySqlParser.RULE_constants = 475;
MySqlParser.RULE_simpleStrings = 476;
MySqlParser.RULE_userVariables = 477;
MySqlParser.RULE_defaultValue = 478;
MySqlParser.RULE_currentTimestamp = 479;
MySqlParser.RULE_expressionOrDefault = 480;
MySqlParser.RULE_ifExists = 481;
MySqlParser.RULE_ifNotExists = 482;
MySqlParser.RULE_functionCall = 483;
MySqlParser.RULE_specificFunction = 484;
MySqlParser.RULE_specificFunctionMysql = 485;
MySqlParser.RULE_specificFunctionInceptor = 486;
MySqlParser.RULE_castFunctionInceptor = 487;
MySqlParser.RULE_substringFunction = 488;
MySqlParser.RULE_extractFunction = 489;
MySqlParser.RULE_caseFunction = 490;
MySqlParser.RULE_caseFuncAlternative = 491;
MySqlParser.RULE_levelsInWeightString = 492;
MySqlParser.RULE_levelInWeightListElement = 493;
MySqlParser.RULE_aggregateWindowedFunction = 494;
MySqlParser.RULE_aggregateWindowedFunctionMysql = 495;
MySqlParser.RULE_aggregateWindowedFunctionInceptor = 496;
MySqlParser.RULE_windowOverSpec = 497;
MySqlParser.RULE_windowClause = 498;
MySqlParser.RULE_windowStartBoundary = 499;
MySqlParser.RULE_windowStartBoundaryDefault = 500;
MySqlParser.RULE_windowEndBoundary = 501;
MySqlParser.RULE_passwordFunctionClause = 502;
MySqlParser.RULE_functionArgs = 503;
MySqlParser.RULE_functionArg = 504;
MySqlParser.RULE_functionArgOptional = 505;
MySqlParser.RULE_expressionOptional = 506;
MySqlParser.RULE_expression = 507;
MySqlParser.RULE_predicate = 508;
MySqlParser.RULE_expressionAtom = 509;
MySqlParser.RULE_unaryPriorOperator = 510;
MySqlParser.RULE_unaryOperator = 511;
MySqlParser.RULE_comparisonOperator = 512;
MySqlParser.RULE_logicalOperator = 513;
MySqlParser.RULE_bitOperator = 514;
MySqlParser.RULE_mathOperator = 515;
MySqlParser.RULE_cursorAttribute = 516;
MySqlParser.RULE_charsetNameBase = 517;
MySqlParser.RULE_transactionLevelBase = 518;
MySqlParser.RULE_privilegesBase = 519;
MySqlParser.RULE_intervalTypeBase = 520;
MySqlParser.RULE_dataTypeBase = 521;
MySqlParser.RULE_keywordsCanBeId = 522;
MySqlParser.RULE_keywordsCanBeIdMysql = 523;
MySqlParser.RULE_inceptorKeywordCanBeId = 524;
MySqlParser.RULE_fileFormatCanBeId = 525;
MySqlParser.RULE_functionNameBase = 526;
MySqlParser.RULE_functionNameBaseMysql = 527;
MySqlParser.RULE_functionNameBaseExtra = 528;
MySqlParser.RULE_databaseName = 529;
MySqlParser.RULE_databaseNameAllowEmpty = 530;
MySqlParser.RULE_baseElementAlias = 531;
MySqlParser.RULE_emptyElement = 532;
MySqlParser.RULE_placeholder = 533;
MySqlParser.RULE_plsqlStatement = 534;
MySqlParser.RULE_anonymousBlock = 535;
MySqlParser.RULE_createFunctionBody = 536;
MySqlParser.RULE_functionBody = 537;
MySqlParser.RULE_createProcedureBody = 538;
MySqlParser.RULE_procedureBody = 539;
MySqlParser.RULE_dropPackage = 540;
MySqlParser.RULE_createPackage = 541;
MySqlParser.RULE_createPackageBody = 542;
MySqlParser.RULE_isOrAs = 543;
MySqlParser.RULE_packageObjSpecs = 544;
MySqlParser.RULE_packageObjBodys = 545;
MySqlParser.RULE_packageObjSpec = 546;
MySqlParser.RULE_packageObjBody = 547;
MySqlParser.RULE_procedureSpec = 548;
MySqlParser.RULE_functionSpec = 549;
MySqlParser.RULE_declareSpec = 550;
MySqlParser.RULE_variableDeclaration = 551;
MySqlParser.RULE_cursorDeclaration = 552;
MySqlParser.RULE_cursorParameter = 553;
MySqlParser.RULE_exceptionDeclaration = 554;
MySqlParser.RULE_pragmaDeclaration = 555;
MySqlParser.RULE_recordTypeDef = 556;
MySqlParser.RULE_fieldSpec = 557;
MySqlParser.RULE_refCursorTypeDef = 558;
MySqlParser.RULE_typeDeclaration = 559;
MySqlParser.RULE_tableTypeDef = 560;
MySqlParser.RULE_tableIndexedByPart = 561;
MySqlParser.RULE_varrayTypeDef = 562;
MySqlParser.RULE_seqOfStatements = 563;
MySqlParser.RULE_labelOrSqlStatement = 564;
MySqlParser.RULE_labelDeclaration = 565;
MySqlParser.RULE_procedureSqlStatement2 = 566;
MySqlParser.RULE_assignmentStatement = 567;
MySqlParser.RULE_procedureWildcard = 568;
MySqlParser.RULE_continueStatement = 569;
MySqlParser.RULE_exitStatement = 570;
MySqlParser.RULE_gotoStatement = 571;
MySqlParser.RULE_ifStatement2 = 572;
MySqlParser.RULE_elsifPart = 573;
MySqlParser.RULE_elsePart = 574;
MySqlParser.RULE_loopStatement2 = 575;
MySqlParser.RULE_cursorLoopParam = 576;
MySqlParser.RULE_forallStatement = 577;
MySqlParser.RULE_boundsClause = 578;
MySqlParser.RULE_betweenBound = 579;
MySqlParser.RULE_lowerBound = 580;
MySqlParser.RULE_upperBound = 581;
MySqlParser.RULE_nullStatement = 582;
MySqlParser.RULE_raiseStatement = 583;
MySqlParser.RULE_returnStatement2 = 584;
MySqlParser.RULE_exceptionBlock = 585;
MySqlParser.RULE_exceptionHandler = 586;
MySqlParser.RULE_blockStatement2 = 587;
MySqlParser.RULE_declareBlock = 588;
MySqlParser.RULE_seqStatementBlock = 589;
MySqlParser.RULE_packageBodyBlock = 590;
MySqlParser.RULE_parameter = 591;
MySqlParser.RULE_generalElement = 592;
MySqlParser.RULE_generalElementPart = 593;
MySqlParser.RULE_generalElementPartChain = 594;
MySqlParser.RULE_generalArgument = 595;
MySqlParser.RULE_functionArgument = 596;
MySqlParser.RULE_argument = 597;
MySqlParser.RULE_arrayArgument = 598;
MySqlParser.RULE_typeSpec = 599;
MySqlParser.RULE_defaultValuePart = 600;
MySqlParser.RULE_labelName = 601;
MySqlParser.RULE_numeric = 602;
MySqlParser.RULE_numericNegative = 603;
MySqlParser.RULE_exceptionName = 604;
MySqlParser.RULE_routineName = 605;
MySqlParser.RULE_idExpression = 606;
MySqlParser.RULE_chainedIdExpression = 607;
MySqlParser.RULE_cursorName = 608;
MySqlParser.RULE_partitionExtensionClause = 609;
MySqlParser.RULE_condition = 610;
MySqlParser.RULE_normalSqlStatement = 611;
MySqlParser.RULE_executeImmediate = 612;
MySqlParser.RULE_bulkCollectClause = 613;
MySqlParser.RULE_usingClause = 614;
MySqlParser.RULE_usingClauseElement = 615;
MySqlParser.RULE_cursorManipulationStatements = 616;
MySqlParser.RULE_closeStatement = 617;
MySqlParser.RULE_openStatement = 618;
MySqlParser.RULE_fetchStatement = 619;
MySqlParser.RULE_openForStatement = 620;
MySqlParser.RULE_concatenation = 621;

class RootContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_root;
    }

	EOF() {
	    return this.getToken(MySqlParser.EOF, 0);
	};

	sqlStatements() {
	    return this.getTypedRuleContext(SqlStatementsContext,0);
	};

	MINUSMINUS() {
	    return this.getToken(MySqlParser.MINUSMINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterRoot(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitRoot(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitRoot(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SqlStatementsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_sqlStatements;
    }

	sqlStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SqlStatementContext);
	    } else {
	        return this.getTypedRuleContext(SqlStatementContext,i);
	    }
	};

	emptyStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EmptyStatementContext);
	    } else {
	        return this.getTypedRuleContext(EmptyStatementContext,i);
	    }
	};

	SEMI = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.SEMI);
	    } else {
	        return this.getToken(MySqlParser.SEMI, i);
	    }
	};


	MINUSMINUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.MINUSMINUS);
	    } else {
	        return this.getToken(MySqlParser.MINUSMINUS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSqlStatements(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSqlStatements(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitSqlStatements(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SqlStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_sqlStatement;
    }

	dclStatement() {
	    return this.getTypedRuleContext(DclStatementContext,0);
	};

	ddlStatement() {
	    return this.getTypedRuleContext(DdlStatementContext,0);
	};

	dmlStatement() {
	    return this.getTypedRuleContext(DmlStatementContext,0);
	};

	transactionStatement() {
	    return this.getTypedRuleContext(TransactionStatementContext,0);
	};

	replicationStatement() {
	    return this.getTypedRuleContext(ReplicationStatementContext,0);
	};

	preparedStatement() {
	    return this.getTypedRuleContext(PreparedStatementContext,0);
	};

	administrationStatement() {
	    return this.getTypedRuleContext(AdministrationStatementContext,0);
	};

	utilityStatement() {
	    return this.getTypedRuleContext(UtilityStatementContext,0);
	};

	anchorStatement() {
	    return this.getTypedRuleContext(AnchorStatementContext,0);
	};

	plsqlStatement() {
	    return this.getTypedRuleContext(PlsqlStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSqlStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSqlStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitSqlStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EmptyStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_emptyStatement;
    }

	SEMI() {
	    return this.getToken(MySqlParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterEmptyStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitEmptyStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitEmptyStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DdlStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_ddlStatement;
    }

	createDatabase() {
	    return this.getTypedRuleContext(CreateDatabaseContext,0);
	};

	createIndex() {
	    return this.getTypedRuleContext(CreateIndexContext,0);
	};

	createProcedure() {
	    return this.getTypedRuleContext(CreateProcedureContext,0);
	};

	createFunction() {
	    return this.getTypedRuleContext(CreateFunctionContext,0);
	};

	createTable() {
	    return this.getTypedRuleContext(CreateTableContext,0);
	};

	createView() {
	    return this.getTypedRuleContext(CreateViewContext,0);
	};

	createTemporaryFunction() {
	    return this.getTypedRuleContext(CreateTemporaryFunctionContext,0);
	};

	alterDatabase() {
	    return this.getTypedRuleContext(AlterDatabaseContext,0);
	};

	alterProcedure() {
	    return this.getTypedRuleContext(AlterProcedureContext,0);
	};

	alterTable() {
	    return this.getTypedRuleContext(AlterTableContext,0);
	};

	dropDatabase() {
	    return this.getTypedRuleContext(DropDatabaseContext,0);
	};

	dropIndex() {
	    return this.getTypedRuleContext(DropIndexContext,0);
	};

	dropPackage() {
	    return this.getTypedRuleContext(DropPackageContext,0);
	};

	dropProcedure() {
	    return this.getTypedRuleContext(DropProcedureContext,0);
	};

	dropFunction() {
	    return this.getTypedRuleContext(DropFunctionContext,0);
	};

	dropTable() {
	    return this.getTypedRuleContext(DropTableContext,0);
	};

	dropView() {
	    return this.getTypedRuleContext(DropViewContext,0);
	};

	truncateTable() {
	    return this.getTypedRuleContext(TruncateTableContext,0);
	};

	createEvent() {
	    return this.getTypedRuleContext(CreateEventContext,0);
	};

	createLogfileGroup() {
	    return this.getTypedRuleContext(CreateLogfileGroupContext,0);
	};

	createServer() {
	    return this.getTypedRuleContext(CreateServerContext,0);
	};

	createTablespaceInnodb() {
	    return this.getTypedRuleContext(CreateTablespaceInnodbContext,0);
	};

	createTablespaceNdb() {
	    return this.getTypedRuleContext(CreateTablespaceNdbContext,0);
	};

	createTrigger() {
	    return this.getTypedRuleContext(CreateTriggerContext,0);
	};

	alterEvent() {
	    return this.getTypedRuleContext(AlterEventContext,0);
	};

	alterFunction() {
	    return this.getTypedRuleContext(AlterFunctionContext,0);
	};

	alterInstance() {
	    return this.getTypedRuleContext(AlterInstanceContext,0);
	};

	alterLogfileGroup() {
	    return this.getTypedRuleContext(AlterLogfileGroupContext,0);
	};

	alterServer() {
	    return this.getTypedRuleContext(AlterServerContext,0);
	};

	alterTablespace() {
	    return this.getTypedRuleContext(AlterTablespaceContext,0);
	};

	alterView() {
	    return this.getTypedRuleContext(AlterViewContext,0);
	};

	dropEvent() {
	    return this.getTypedRuleContext(DropEventContext,0);
	};

	dropLogfileGroup() {
	    return this.getTypedRuleContext(DropLogfileGroupContext,0);
	};

	dropServer() {
	    return this.getTypedRuleContext(DropServerContext,0);
	};

	dropTablespace() {
	    return this.getTypedRuleContext(DropTablespaceContext,0);
	};

	dropTrigger() {
	    return this.getTypedRuleContext(DropTriggerContext,0);
	};

	renameTable() {
	    return this.getTypedRuleContext(RenameTableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDdlStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDdlStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitDdlStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DmlStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_dmlStatement;
    }

	selectStatement() {
	    return this.getTypedRuleContext(SelectStatementContext,0);
	};

	insertStatement() {
	    return this.getTypedRuleContext(InsertStatementContext,0);
	};

	updateStatement() {
	    return this.getTypedRuleContext(UpdateStatementContext,0);
	};

	deleteStatement() {
	    return this.getTypedRuleContext(DeleteStatementContext,0);
	};

	callStatement() {
	    return this.getTypedRuleContext(CallStatementContext,0);
	};

	loadDataStatement() {
	    return this.getTypedRuleContext(LoadDataStatementContext,0);
	};

	doStatement() {
	    return this.getTypedRuleContext(DoStatementContext,0);
	};

	insertFile() {
	    return this.getTypedRuleContext(InsertFileContext,0);
	};

	mergeStatement() {
	    return this.getTypedRuleContext(MergeStatementContext,0);
	};

	withStatement() {
	    return this.getTypedRuleContext(WithStatementContext,0);
	};

	fromInsertStatement() {
	    return this.getTypedRuleContext(FromInsertStatementContext,0);
	};

	replaceStatement() {
	    return this.getTypedRuleContext(ReplaceStatementContext,0);
	};

	loadXmlStatement() {
	    return this.getTypedRuleContext(LoadXmlStatementContext,0);
	};

	handlerStatement() {
	    return this.getTypedRuleContext(HandlerStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDmlStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDmlStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitDmlStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TransactionStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_transactionStatement;
    }

	startTransaction() {
	    return this.getTypedRuleContext(StartTransactionContext,0);
	};

	beginWork() {
	    return this.getTypedRuleContext(BeginWorkContext,0);
	};

	commitWork() {
	    return this.getTypedRuleContext(CommitWorkContext,0);
	};

	rollbackWork() {
	    return this.getTypedRuleContext(RollbackWorkContext,0);
	};

	lockTables() {
	    return this.getTypedRuleContext(LockTablesContext,0);
	};

	unlockTables() {
	    return this.getTypedRuleContext(UnlockTablesContext,0);
	};

	savepointStatement() {
	    return this.getTypedRuleContext(SavepointStatementContext,0);
	};

	releaseStatement() {
	    return this.getTypedRuleContext(ReleaseStatementContext,0);
	};

	rollbackStatement() {
	    return this.getTypedRuleContext(RollbackStatementContext,0);
	};

	transactionStatementInceptor() {
	    return this.getTypedRuleContext(TransactionStatementInceptorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTransactionStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTransactionStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitTransactionStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReplicationStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_replicationStatement;
    }

	changeMaster() {
	    return this.getTypedRuleContext(ChangeMasterContext,0);
	};

	changeReplicationFilter() {
	    return this.getTypedRuleContext(ChangeReplicationFilterContext,0);
	};

	purgeBinaryLogs() {
	    return this.getTypedRuleContext(PurgeBinaryLogsContext,0);
	};

	resetMaster() {
	    return this.getTypedRuleContext(ResetMasterContext,0);
	};

	resetSlave() {
	    return this.getTypedRuleContext(ResetSlaveContext,0);
	};

	startSlave() {
	    return this.getTypedRuleContext(StartSlaveContext,0);
	};

	stopSlave() {
	    return this.getTypedRuleContext(StopSlaveContext,0);
	};

	startGroupReplication() {
	    return this.getTypedRuleContext(StartGroupReplicationContext,0);
	};

	stopGroupReplication() {
	    return this.getTypedRuleContext(StopGroupReplicationContext,0);
	};

	xaStartTransaction() {
	    return this.getTypedRuleContext(XaStartTransactionContext,0);
	};

	xaEndTransaction() {
	    return this.getTypedRuleContext(XaEndTransactionContext,0);
	};

	xaPrepareStatement() {
	    return this.getTypedRuleContext(XaPrepareStatementContext,0);
	};

	xaCommitWork() {
	    return this.getTypedRuleContext(XaCommitWorkContext,0);
	};

	xaRollbackWork() {
	    return this.getTypedRuleContext(XaRollbackWorkContext,0);
	};

	xaRecoverWork() {
	    return this.getTypedRuleContext(XaRecoverWorkContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterReplicationStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitReplicationStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitReplicationStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PreparedStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_preparedStatement;
    }

	prepareStatement() {
	    return this.getTypedRuleContext(PrepareStatementContext,0);
	};

	executeStatement() {
	    return this.getTypedRuleContext(ExecuteStatementContext,0);
	};

	deallocatePrepare() {
	    return this.getTypedRuleContext(DeallocatePrepareContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPreparedStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPreparedStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitPreparedStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CompoundStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_compoundStatement;
    }

	blockStatement() {
	    return this.getTypedRuleContext(BlockStatementContext,0);
	};

	caseStatement() {
	    return this.getTypedRuleContext(CaseStatementContext,0);
	};

	ifStatement() {
	    return this.getTypedRuleContext(IfStatementContext,0);
	};

	leaveStatement() {
	    return this.getTypedRuleContext(LeaveStatementContext,0);
	};

	loopStatement() {
	    return this.getTypedRuleContext(LoopStatementContext,0);
	};

	repeatStatement() {
	    return this.getTypedRuleContext(RepeatStatementContext,0);
	};

	whileStatement() {
	    return this.getTypedRuleContext(WhileStatementContext,0);
	};

	iterateStatement() {
	    return this.getTypedRuleContext(IterateStatementContext,0);
	};

	returnStatement() {
	    return this.getTypedRuleContext(ReturnStatementContext,0);
	};

	cursorStatement() {
	    return this.getTypedRuleContext(CursorStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCompoundStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCompoundStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitCompoundStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AdministrationStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_administrationStatement;
    }

	analyzeTable() {
	    return this.getTypedRuleContext(AnalyzeTableContext,0);
	};

	setStatement() {
	    return this.getTypedRuleContext(SetStatementContext,0);
	};

	showStatement() {
	    return this.getTypedRuleContext(ShowStatementContext,0);
	};

	setDelimiter() {
	    return this.getTypedRuleContext(SetDelimiterContext,0);
	};

	checksumTable() {
	    return this.getTypedRuleContext(ChecksumTableContext,0);
	};

	optimizeTable() {
	    return this.getTypedRuleContext(OptimizeTableContext,0);
	};

	repairTable() {
	    return this.getTypedRuleContext(RepairTableContext,0);
	};

	checkTable() {
	    return this.getTypedRuleContext(CheckTableContext,0);
	};

	createUdfunction() {
	    return this.getTypedRuleContext(CreateUdfunctionContext,0);
	};

	installPlugin() {
	    return this.getTypedRuleContext(InstallPluginContext,0);
	};

	uninstallPlugin() {
	    return this.getTypedRuleContext(UninstallPluginContext,0);
	};

	binlogStatement() {
	    return this.getTypedRuleContext(BinlogStatementContext,0);
	};

	cacheIndexStatement() {
	    return this.getTypedRuleContext(CacheIndexStatementContext,0);
	};

	flushStatement() {
	    return this.getTypedRuleContext(FlushStatementContext,0);
	};

	killStatement() {
	    return this.getTypedRuleContext(KillStatementContext,0);
	};

	loadIndexIntoCache() {
	    return this.getTypedRuleContext(LoadIndexIntoCacheContext,0);
	};

	resetStatement() {
	    return this.getTypedRuleContext(ResetStatementContext,0);
	};

	shutdownStatement() {
	    return this.getTypedRuleContext(ShutdownStatementContext,0);
	};

	addJarStatement() {
	    return this.getTypedRuleContext(AddJarStatementContext,0);
	};

	listJarStatement() {
	    return this.getTypedRuleContext(ListJarStatementContext,0);
	};

	setPlsqlDialect() {
	    return this.getTypedRuleContext(SetPlsqlDialectContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAdministrationStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAdministrationStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAdministrationStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UtilityStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_utilityStatement;
    }

	describeStatement() {
	    return this.getTypedRuleContext(DescribeStatementContext,0);
	};

	useStatement() {
	    return this.getTypedRuleContext(UseStatementContext,0);
	};

	helpStatement() {
	    return this.getTypedRuleContext(HelpStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUtilityStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUtilityStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitUtilityStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DclStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_dclStatement;
    }

	alterUser() {
	    return this.getTypedRuleContext(AlterUserContext,0);
	};

	createUser() {
	    return this.getTypedRuleContext(CreateUserContext,0);
	};

	dropUser() {
	    return this.getTypedRuleContext(DropUserContext,0);
	};

	grantStatement() {
	    return this.getTypedRuleContext(GrantStatementContext,0);
	};

	grantProxy() {
	    return this.getTypedRuleContext(GrantProxyContext,0);
	};

	renameUser() {
	    return this.getTypedRuleContext(RenameUserContext,0);
	};

	revokeStatement() {
	    return this.getTypedRuleContext(RevokeStatementContext,0);
	};

	revokeProxy() {
	    return this.getTypedRuleContext(RevokeProxyContext,0);
	};

	grantFacl() {
	    return this.getTypedRuleContext(GrantFaclContext,0);
	};

	grantPermission() {
	    return this.getTypedRuleContext(GrantPermissionContext,0);
	};

	grantQuota() {
	    return this.getTypedRuleContext(GrantQuotaContext,0);
	};

	grantStatementInceptor() {
	    return this.getTypedRuleContext(GrantStatementInceptorContext,0);
	};

	revokeFacl() {
	    return this.getTypedRuleContext(RevokeFaclContext,0);
	};

	revokePermission() {
	    return this.getTypedRuleContext(RevokePermissionContext,0);
	};

	revokeQuota() {
	    return this.getTypedRuleContext(RevokeQuotaContext,0);
	};

	revokeStatementInceptor() {
	    return this.getTypedRuleContext(RevokeStatementInceptorContext,0);
	};

	roleStatementInceptor() {
	    return this.getTypedRuleContext(RoleStatementInceptorContext,0);
	};

	showFacl() {
	    return this.getTypedRuleContext(ShowFaclContext,0);
	};

	showGrantInceptor() {
	    return this.getTypedRuleContext(ShowGrantInceptorContext,0);
	};

	showPermission() {
	    return this.getTypedRuleContext(ShowPermissionContext,0);
	};

	showPrincipal() {
	    return this.getTypedRuleContext(ShowPrincipalContext,0);
	};

	showQuota() {
	    return this.getTypedRuleContext(ShowQuotaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDclStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDclStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitDclStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AnchorStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_anchorStatement;
        this._startAnchor = null; // StartAnchorContext
    }

	CREATE() {
	    return this.getToken(MySqlParser.CREATE, 0);
	};

	createAnchor() {
	    return this.getTypedRuleContext(CreateAnchorContext,0);
	};

	DROP() {
	    return this.getToken(MySqlParser.DROP, 0);
	};

	dropAnchor() {
	    return this.getTypedRuleContext(DropAnchorContext,0);
	};

	startAnchor() {
	    return this.getTypedRuleContext(StartAnchorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAnchorStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAnchorStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAnchorStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StartAnchorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_startAnchor;
    }

	placeholder() {
	    return this.getTypedRuleContext(PlaceholderContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterStartAnchor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitStartAnchor(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitStartAnchor(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateAnchorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_createAnchor;
    }

	placeholder() {
	    return this.getTypedRuleContext(PlaceholderContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCreateAnchor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCreateAnchor(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitCreateAnchor(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropAnchorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_dropAnchor;
    }

	placeholder() {
	    return this.getTypedRuleContext(PlaceholderContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDropAnchor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDropAnchor(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitDropAnchor(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateDatabaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_createDatabase;
        this.dbFormat = null; // Token
    }

	CREATE() {
	    return this.getToken(MySqlParser.CREATE, 0);
	};

	databaseName() {
	    return this.getTypedRuleContext(DatabaseNameContext,0);
	};

	createDatabaseOption() {
	    return this.getTypedRuleContext(CreateDatabaseOptionContext,0);
	};

	DATABASE() {
	    return this.getToken(MySqlParser.DATABASE, 0);
	};

	SCHEMA() {
	    return this.getToken(MySqlParser.SCHEMA, 0);
	};

	ifNotExists() {
	    return this.getTypedRuleContext(IfNotExistsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCreateDatabase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCreateDatabase(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitCreateDatabase(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateEventContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_createEvent;
    }

	CREATE() {
	    return this.getToken(MySqlParser.CREATE, 0);
	};

	EVENT() {
	    return this.getToken(MySqlParser.EVENT, 0);
	};

	fullId() {
	    return this.getTypedRuleContext(FullIdContext,0);
	};

	ON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.ON);
	    } else {
	        return this.getToken(MySqlParser.ON, i);
	    }
	};


	SCHEDULE() {
	    return this.getToken(MySqlParser.SCHEDULE, 0);
	};

	scheduleExpression() {
	    return this.getTypedRuleContext(ScheduleExpressionContext,0);
	};

	DO() {
	    return this.getToken(MySqlParser.DO, 0);
	};

	routineBody() {
	    return this.getTypedRuleContext(RoutineBodyContext,0);
	};

	ownerStatement() {
	    return this.getTypedRuleContext(OwnerStatementContext,0);
	};

	ifNotExists() {
	    return this.getTypedRuleContext(IfNotExistsContext,0);
	};

	COMPLETION() {
	    return this.getToken(MySqlParser.COMPLETION, 0);
	};

	PRESERVE() {
	    return this.getToken(MySqlParser.PRESERVE, 0);
	};

	enableType() {
	    return this.getTypedRuleContext(EnableTypeContext,0);
	};

	COMMENT() {
	    return this.getToken(MySqlParser.COMMENT, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	NOT() {
	    return this.getToken(MySqlParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCreateEvent(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCreateEvent(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitCreateEvent(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateIndexContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_createIndex;
        this.intimeAction = null; // Token
        this.indexCategory = null; // Token
        this.algType = null; // Token
        this.lockType = null; // Token
    }

	CREATE() {
	    return this.getToken(MySqlParser.CREATE, 0);
	};

	INDEX() {
	    return this.getToken(MySqlParser.INDEX, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	ON() {
	    return this.getToken(MySqlParser.ON, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	indexColumnNames() {
	    return this.getTypedRuleContext(IndexColumnNamesContext,0);
	};

	indexType() {
	    return this.getTypedRuleContext(IndexTypeContext,0);
	};

	indexOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IndexOptionContext);
	    } else {
	        return this.getTypedRuleContext(IndexOptionContext,i);
	    }
	};

	ALGORITHM() {
	    return this.getToken(MySqlParser.ALGORITHM, 0);
	};

	LOCK() {
	    return this.getToken(MySqlParser.LOCK, 0);
	};

	ONLINE() {
	    return this.getToken(MySqlParser.ONLINE, 0);
	};

	OFFLINE() {
	    return this.getToken(MySqlParser.OFFLINE, 0);
	};

	UNIQUE() {
	    return this.getToken(MySqlParser.UNIQUE, 0);
	};

	FULLTEXT() {
	    return this.getToken(MySqlParser.FULLTEXT, 0);
	};

	SPATIAL() {
	    return this.getToken(MySqlParser.SPATIAL, 0);
	};

	DEFAULT() {
	    return this.getToken(MySqlParser.DEFAULT, 0);
	};

	INPLACE() {
	    return this.getToken(MySqlParser.INPLACE, 0);
	};

	COPY() {
	    return this.getToken(MySqlParser.COPY, 0);
	};

	NONE() {
	    return this.getToken(MySqlParser.NONE, 0);
	};

	SHARED() {
	    return this.getToken(MySqlParser.SHARED, 0);
	};

	EXCLUSIVE() {
	    return this.getToken(MySqlParser.EXCLUSIVE, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCreateIndex(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCreateIndex(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitCreateIndex(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateLogfileGroupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_createLogfileGroup;
        this.undoFile = null; // Token
        this.initSize = null; // FileSizeLiteralContext
        this.undoSize = null; // FileSizeLiteralContext
        this.redoSize = null; // FileSizeLiteralContext
        this.comment = null; // Token
    }

	CREATE() {
	    return this.getToken(MySqlParser.CREATE, 0);
	};

	LOGFILE() {
	    return this.getToken(MySqlParser.LOGFILE, 0);
	};

	GROUP() {
	    return this.getToken(MySqlParser.GROUP, 0);
	};

	uid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidContext);
	    } else {
	        return this.getTypedRuleContext(UidContext,i);
	    }
	};

	ADD() {
	    return this.getToken(MySqlParser.ADD, 0);
	};

	UNDOFILE() {
	    return this.getToken(MySqlParser.UNDOFILE, 0);
	};

	ENGINE() {
	    return this.getToken(MySqlParser.ENGINE, 0);
	};

	engineName() {
	    return this.getTypedRuleContext(EngineNameContext,0);
	};

	STRING_LITERAL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.STRING_LITERAL);
	    } else {
	        return this.getToken(MySqlParser.STRING_LITERAL, i);
	    }
	};


	INITIAL_SIZE() {
	    return this.getToken(MySqlParser.INITIAL_SIZE, 0);
	};

	UNDO_BUFFER_SIZE() {
	    return this.getToken(MySqlParser.UNDO_BUFFER_SIZE, 0);
	};

	REDO_BUFFER_SIZE() {
	    return this.getToken(MySqlParser.REDO_BUFFER_SIZE, 0);
	};

	NODEGROUP() {
	    return this.getToken(MySqlParser.NODEGROUP, 0);
	};

	WAIT() {
	    return this.getToken(MySqlParser.WAIT, 0);
	};

	COMMENT() {
	    return this.getToken(MySqlParser.COMMENT, 0);
	};

	EQUAL_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.EQUAL_SYMBOL);
	    } else {
	        return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
	    }
	};


	fileSizeLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FileSizeLiteralContext);
	    } else {
	        return this.getTypedRuleContext(FileSizeLiteralContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCreateLogfileGroup(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCreateLogfileGroup(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitCreateLogfileGroup(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateProcedureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_createProcedure;
    }

	CREATE() {
	    return this.getToken(MySqlParser.CREATE, 0);
	};

	PROCEDURE() {
	    return this.getToken(MySqlParser.PROCEDURE, 0);
	};

	fullId() {
	    return this.getTypedRuleContext(FullIdContext,0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	routineBody() {
	    return this.getTypedRuleContext(RoutineBodyContext,0);
	};

	orReplaceDialectAction() {
	    return this.getTypedRuleContext(OrReplaceDialectActionContext,0);
	};

	ownerStatement() {
	    return this.getTypedRuleContext(OwnerStatementContext,0);
	};

	procedureParameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ProcedureParameterContext);
	    } else {
	        return this.getTypedRuleContext(ProcedureParameterContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	routineOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RoutineOptionContext);
	    } else {
	        return this.getTypedRuleContext(RoutineOptionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCreateProcedure(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCreateProcedure(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitCreateProcedure(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_createFunction;
    }

	CREATE() {
	    return this.getToken(MySqlParser.CREATE, 0);
	};

	FUNCTION() {
	    return this.getToken(MySqlParser.FUNCTION, 0);
	};

	fullId() {
	    return this.getTypedRuleContext(FullIdContext,0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	RETURNS() {
	    return this.getToken(MySqlParser.RETURNS, 0);
	};

	dataType() {
	    return this.getTypedRuleContext(DataTypeContext,0);
	};

	routineBody() {
	    return this.getTypedRuleContext(RoutineBodyContext,0);
	};

	orReplaceDialectAction() {
	    return this.getTypedRuleContext(OrReplaceDialectActionContext,0);
	};

	ownerStatement() {
	    return this.getTypedRuleContext(OwnerStatementContext,0);
	};

	functionParameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FunctionParameterContext);
	    } else {
	        return this.getTypedRuleContext(FunctionParameterContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	routineOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RoutineOptionContext);
	    } else {
	        return this.getTypedRuleContext(RoutineOptionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCreateFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCreateFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitCreateFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateTemporaryFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_createTemporaryFunction;
    }

	CREATE() {
	    return this.getToken(MySqlParser.CREATE, 0);
	};

	functionType() {
	    return this.getTypedRuleContext(FunctionTypeContext,0);
	};

	FUNCTION() {
	    return this.getToken(MySqlParser.FUNCTION, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	AS() {
	    return this.getToken(MySqlParser.AS, 0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	ifNotExists() {
	    return this.getTypedRuleContext(IfNotExistsContext,0);
	};

	USING() {
	    return this.getToken(MySqlParser.USING, 0);
	};

	permanentFunctionResource = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PermanentFunctionResourceContext);
	    } else {
	        return this.getTypedRuleContext(PermanentFunctionResourceContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCreateTemporaryFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCreateTemporaryFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitCreateTemporaryFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateServerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_createServer;
        this.wrapperName = null; // Token
    }

	CREATE() {
	    return this.getToken(MySqlParser.CREATE, 0);
	};

	SERVER() {
	    return this.getToken(MySqlParser.SERVER, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	FOREIGN() {
	    return this.getToken(MySqlParser.FOREIGN, 0);
	};

	DATA() {
	    return this.getToken(MySqlParser.DATA, 0);
	};

	WRAPPER() {
	    return this.getToken(MySqlParser.WRAPPER, 0);
	};

	OPTIONS() {
	    return this.getToken(MySqlParser.OPTIONS, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	serverOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ServerOptionContext);
	    } else {
	        return this.getTypedRuleContext(ServerOptionContext,i);
	    }
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	MYSQL() {
	    return this.getToken(MySqlParser.MYSQL, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCreateServer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCreateServer(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitCreateServer(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateTableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_createTable;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class CopyCreateTableContext extends CreateTableContext {

    constructor(parser, ctx) {
        super(parser);
        this.parenthesisTable = null; // TableNameContext;
        super.copyFrom(ctx);
    }

	createTableHead() {
	    return this.getTypedRuleContext(CreateTableHeadContext,0);
	};

	tableName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TableNameContext);
	    } else {
	        return this.getTypedRuleContext(TableNameContext,i);
	    }
	};

	createTableLikeOption() {
	    return this.getTypedRuleContext(CreateTableLikeOptionContext,0);
	};

	LIKE() {
	    return this.getToken(MySqlParser.LIKE, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	ifNotExists() {
	    return this.getTypedRuleContext(IfNotExistsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCopyCreateTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCopyCreateTable(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitCopyCreateTable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.CopyCreateTableContext = CopyCreateTableContext;

class ColumnCreateTableContext extends CreateTableContext {

    constructor(parser, ctx) {
        super(parser);
        this._createDefinitions = null; // CreateDefinitionsContext;
        super.copyFrom(ctx);
    }

	createTableHead() {
	    return this.getTypedRuleContext(CreateTableHeadContext,0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	createTableCreateOption() {
	    return this.getTypedRuleContext(CreateTableCreateOptionContext,0);
	};

	ifNotExists() {
	    return this.getTypedRuleContext(IfNotExistsContext,0);
	};

	createDefinitions() {
	    return this.getTypedRuleContext(CreateDefinitionsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterColumnCreateTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitColumnCreateTable(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitColumnCreateTable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.ColumnCreateTableContext = ColumnCreateTableContext;

class QueryCreateTableContext extends CreateTableContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	createTableHead() {
	    return this.getTypedRuleContext(CreateTableHeadContext,0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	createTableCreateOption() {
	    return this.getTypedRuleContext(CreateTableCreateOptionContext,0);
	};

	createTableQuery() {
	    return this.getTypedRuleContext(CreateTableQueryContext,0);
	};

	ifNotExists() {
	    return this.getTypedRuleContext(IfNotExistsContext,0);
	};

	createDefinitions() {
	    return this.getTypedRuleContext(CreateDefinitionsContext,0);
	};

	createTableAsKeyViolate() {
	    return this.getTypedRuleContext(CreateTableAsKeyViolateContext,0);
	};

	dialectWithNoData() {
	    return this.getTypedRuleContext(DialectWithNoDataContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterQueryCreateTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitQueryCreateTable(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitQueryCreateTable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.QueryCreateTableContext = QueryCreateTableContext;

class CreateTablespaceInnodbContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_createTablespaceInnodb;
        this.datafile = null; // Token
        this.fileBlockSize = null; // FileSizeLiteralContext
    }

	CREATE() {
	    return this.getToken(MySqlParser.CREATE, 0);
	};

	TABLESPACE() {
	    return this.getToken(MySqlParser.TABLESPACE, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	ADD() {
	    return this.getToken(MySqlParser.ADD, 0);
	};

	DATAFILE() {
	    return this.getToken(MySqlParser.DATAFILE, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	FILE_BLOCK_SIZE() {
	    return this.getToken(MySqlParser.FILE_BLOCK_SIZE, 0);
	};

	EQUAL_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.EQUAL_SYMBOL);
	    } else {
	        return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
	    }
	};


	ENGINE() {
	    return this.getToken(MySqlParser.ENGINE, 0);
	};

	engineName() {
	    return this.getTypedRuleContext(EngineNameContext,0);
	};

	fileSizeLiteral() {
	    return this.getTypedRuleContext(FileSizeLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCreateTablespaceInnodb(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCreateTablespaceInnodb(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitCreateTablespaceInnodb(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateTablespaceNdbContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_createTablespaceNdb;
        this.datafile = null; // Token
        this.extentSize = null; // FileSizeLiteralContext
        this.initialSize = null; // FileSizeLiteralContext
        this.autoextendSize = null; // FileSizeLiteralContext
        this.maxSize = null; // FileSizeLiteralContext
        this.comment = null; // Token
    }

	CREATE() {
	    return this.getToken(MySqlParser.CREATE, 0);
	};

	TABLESPACE() {
	    return this.getToken(MySqlParser.TABLESPACE, 0);
	};

	uid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidContext);
	    } else {
	        return this.getTypedRuleContext(UidContext,i);
	    }
	};

	ADD() {
	    return this.getToken(MySqlParser.ADD, 0);
	};

	DATAFILE() {
	    return this.getToken(MySqlParser.DATAFILE, 0);
	};

	USE() {
	    return this.getToken(MySqlParser.USE, 0);
	};

	LOGFILE() {
	    return this.getToken(MySqlParser.LOGFILE, 0);
	};

	GROUP() {
	    return this.getToken(MySqlParser.GROUP, 0);
	};

	ENGINE() {
	    return this.getToken(MySqlParser.ENGINE, 0);
	};

	engineName() {
	    return this.getTypedRuleContext(EngineNameContext,0);
	};

	STRING_LITERAL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.STRING_LITERAL);
	    } else {
	        return this.getToken(MySqlParser.STRING_LITERAL, i);
	    }
	};


	EXTENT_SIZE() {
	    return this.getToken(MySqlParser.EXTENT_SIZE, 0);
	};

	INITIAL_SIZE() {
	    return this.getToken(MySqlParser.INITIAL_SIZE, 0);
	};

	AUTOEXTEND_SIZE() {
	    return this.getToken(MySqlParser.AUTOEXTEND_SIZE, 0);
	};

	MAX_SIZE() {
	    return this.getToken(MySqlParser.MAX_SIZE, 0);
	};

	NODEGROUP() {
	    return this.getToken(MySqlParser.NODEGROUP, 0);
	};

	WAIT() {
	    return this.getToken(MySqlParser.WAIT, 0);
	};

	COMMENT() {
	    return this.getToken(MySqlParser.COMMENT, 0);
	};

	EQUAL_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.EQUAL_SYMBOL);
	    } else {
	        return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
	    }
	};


	fileSizeLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FileSizeLiteralContext);
	    } else {
	        return this.getTypedRuleContext(FileSizeLiteralContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCreateTablespaceNdb(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCreateTablespaceNdb(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitCreateTablespaceNdb(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateTriggerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_createTrigger;
        this.thisTrigger = null; // FullIdContext
        this.triggerTime = null; // Token
        this.triggerEvent = null; // Token
        this.triggerPlace = null; // Token
        this.otherTrigger = null; // FullIdContext
    }

	CREATE() {
	    return this.getToken(MySqlParser.CREATE, 0);
	};

	TRIGGER() {
	    return this.getToken(MySqlParser.TRIGGER, 0);
	};

	ON() {
	    return this.getToken(MySqlParser.ON, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	FOR() {
	    return this.getToken(MySqlParser.FOR, 0);
	};

	EACH() {
	    return this.getToken(MySqlParser.EACH, 0);
	};

	ROW() {
	    return this.getToken(MySqlParser.ROW, 0);
	};

	routineBody() {
	    return this.getTypedRuleContext(RoutineBodyContext,0);
	};

	fullId = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FullIdContext);
	    } else {
	        return this.getTypedRuleContext(FullIdContext,i);
	    }
	};

	BEFORE() {
	    return this.getToken(MySqlParser.BEFORE, 0);
	};

	AFTER() {
	    return this.getToken(MySqlParser.AFTER, 0);
	};

	INSERT() {
	    return this.getToken(MySqlParser.INSERT, 0);
	};

	UPDATE() {
	    return this.getToken(MySqlParser.UPDATE, 0);
	};

	DELETE() {
	    return this.getToken(MySqlParser.DELETE, 0);
	};

	ownerStatement() {
	    return this.getTypedRuleContext(OwnerStatementContext,0);
	};

	FOLLOWS() {
	    return this.getToken(MySqlParser.FOLLOWS, 0);
	};

	PRECEDES() {
	    return this.getToken(MySqlParser.PRECEDES, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCreateTrigger(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCreateTrigger(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitCreateTrigger(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateViewContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_createView;
    }

	createViewMysql() {
	    return this.getTypedRuleContext(CreateViewMysqlContext,0);
	};

	createViewInceptor() {
	    return this.getTypedRuleContext(CreateViewInceptorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCreateView(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCreateView(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitCreateView(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateViewMysqlContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_createViewMysql;
        this.newlineTokens = ['VIEW', 'WITH']
        this.algType = null; // Token
        this.secContext = null; // Token
        this._asSelectStatement = null; // AsSelectStatementContext
        this.checkOption = null; // Token
    }

	CREATE() {
	    return this.getToken(MySqlParser.CREATE, 0);
	};

	VIEW() {
	    return this.getToken(MySqlParser.VIEW, 0);
	};

	viewName() {
	    return this.getTypedRuleContext(ViewNameContext,0);
	};

	OR() {
	    return this.getToken(MySqlParser.OR, 0);
	};

	REPLACE() {
	    return this.getToken(MySqlParser.REPLACE, 0);
	};

	ALGORITHM() {
	    return this.getToken(MySqlParser.ALGORITHM, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	ownerStatement() {
	    return this.getTypedRuleContext(OwnerStatementContext,0);
	};

	SQL() {
	    return this.getToken(MySqlParser.SQL, 0);
	};

	SECURITY() {
	    return this.getToken(MySqlParser.SECURITY, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	asSelectStatement() {
	    return this.getTypedRuleContext(AsSelectStatementContext,0);
	};

	WITH() {
	    return this.getToken(MySqlParser.WITH, 0);
	};

	CHECK() {
	    return this.getToken(MySqlParser.CHECK, 0);
	};

	OPTION() {
	    return this.getToken(MySqlParser.OPTION, 0);
	};

	UNDEFINED() {
	    return this.getToken(MySqlParser.UNDEFINED, 0);
	};

	MERGE() {
	    return this.getToken(MySqlParser.MERGE, 0);
	};

	TEMPTABLE() {
	    return this.getToken(MySqlParser.TEMPTABLE, 0);
	};

	DEFINER() {
	    return this.getToken(MySqlParser.DEFINER, 0);
	};

	INVOKER() {
	    return this.getToken(MySqlParser.INVOKER, 0);
	};

	CASCADED() {
	    return this.getToken(MySqlParser.CASCADED, 0);
	};

	LOCAL() {
	    return this.getToken(MySqlParser.LOCAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCreateViewMysql(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCreateViewMysql(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitCreateViewMysql(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateViewInceptorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_createViewInceptor;
        this.newlineTokens = ['PARTITIONED', 'TBLPROPERTIES']
        this._asSelectStatement = null; // AsSelectStatementContext
    }

	CREATE() {
	    return this.getToken(MySqlParser.CREATE, 0);
	};

	VIEW() {
	    return this.getToken(MySqlParser.VIEW, 0);
	};

	viewName() {
	    return this.getTypedRuleContext(ViewNameContext,0);
	};

	OR() {
	    return this.getToken(MySqlParser.OR, 0);
	};

	REPLACE() {
	    return this.getToken(MySqlParser.REPLACE, 0);
	};

	ifNotExists() {
	    return this.getTypedRuleContext(IfNotExistsContext,0);
	};

	LR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.LR_BRACKET);
	    } else {
	        return this.getToken(MySqlParser.LR_BRACKET, i);
	    }
	};


	uidCommentList() {
	    return this.getTypedRuleContext(UidCommentListContext,0);
	};

	RR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.RR_BRACKET);
	    } else {
	        return this.getToken(MySqlParser.RR_BRACKET, i);
	    }
	};


	commentClause() {
	    return this.getTypedRuleContext(CommentClauseContext,0);
	};

	PARTITIONED() {
	    return this.getToken(MySqlParser.PARTITIONED, 0);
	};

	ON() {
	    return this.getToken(MySqlParser.ON, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	TBLPROPERTIES() {
	    return this.getToken(MySqlParser.TBLPROPERTIES, 0);
	};

	keyValueProperties() {
	    return this.getTypedRuleContext(KeyValuePropertiesContext,0);
	};

	asSelectStatement() {
	    return this.getTypedRuleContext(AsSelectStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCreateViewInceptor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCreateViewInceptor(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitCreateViewInceptor(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateDatabaseOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_createDatabaseOption;
        this.level = 0
    }

	mysqlCreateDatabaseOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MysqlCreateDatabaseOptionContext);
	    } else {
	        return this.getTypedRuleContext(MysqlCreateDatabaseOptionContext,i);
	    }
	};

	inceptorCreateDatabaseOption() {
	    return this.getTypedRuleContext(InceptorCreateDatabaseOptionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCreateDatabaseOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCreateDatabaseOption(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitCreateDatabaseOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MysqlCreateDatabaseOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_mysqlCreateDatabaseOption;
        this.level = 1
    }

	charsetName() {
	    return this.getTypedRuleContext(CharsetNameContext,0);
	};

	CHARACTER() {
	    return this.getToken(MySqlParser.CHARACTER, 0);
	};

	SET() {
	    return this.getToken(MySqlParser.SET, 0);
	};

	CHARSET() {
	    return this.getToken(MySqlParser.CHARSET, 0);
	};

	DEFAULT() {
	    return this.getToken(MySqlParser.DEFAULT, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	COLLATE() {
	    return this.getToken(MySqlParser.COLLATE, 0);
	};

	collationName() {
	    return this.getTypedRuleContext(CollationNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterMysqlCreateDatabaseOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitMysqlCreateDatabaseOption(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitMysqlCreateDatabaseOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InceptorCreateDatabaseOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_inceptorCreateDatabaseOption;
        this.level = 1;
        newlineTokens: [] = ['LOCATION', 'WITH'];
    }

	commentClause() {
	    return this.getTypedRuleContext(CommentClauseContext,0);
	};

	LOCATION() {
	    return this.getToken(MySqlParser.LOCATION, 0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	WITH() {
	    return this.getToken(MySqlParser.WITH, 0);
	};

	DBPROPERTIES() {
	    return this.getToken(MySqlParser.DBPROPERTIES, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	keyValueProperties() {
	    return this.getTypedRuleContext(KeyValuePropertiesContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterInceptorCreateDatabaseOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitInceptorCreateDatabaseOption(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitInceptorCreateDatabaseOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class KeyOrValuePropertiesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_keyOrValueProperties;
    }

	keyValueProperties() {
	    return this.getTypedRuleContext(KeyValuePropertiesContext,0);
	};

	keyProperties() {
	    return this.getTypedRuleContext(KeyPropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterKeyOrValueProperties(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitKeyOrValueProperties(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitKeyOrValueProperties(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class KeyPropertiesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_keyProperties;
    }

	stringLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringLiteralContext);
	    } else {
	        return this.getTypedRuleContext(StringLiteralContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterKeyProperties(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitKeyProperties(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitKeyProperties(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class KeyValuePropertiesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_keyValueProperties;
    }

	keyValueProperty = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(KeyValuePropertyContext);
	    } else {
	        return this.getTypedRuleContext(KeyValuePropertyContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterKeyValueProperties(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitKeyValueProperties(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitKeyValueProperties(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class KeyValuePropertyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_keyValueProperty;
        this.key = null; // StringLiteralContext
        this.value = null; // StringLiteralContext
    }

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	stringLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringLiteralContext);
	    } else {
	        return this.getTypedRuleContext(StringLiteralContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterKeyValueProperty(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitKeyValueProperty(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitKeyValueProperty(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IdValuePropertiesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_idValueProperties;
    }

	idValueProperty = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdValuePropertyContext);
	    } else {
	        return this.getTypedRuleContext(IdValuePropertyContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterIdValueProperties(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitIdValueProperties(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitIdValueProperties(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IdValuePropertyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_idValueProperty;
        this.key = null; // UidContext
        this.value = null; // ConstantContext
    }

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	constant() {
	    return this.getTypedRuleContext(ConstantContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterIdValueProperty(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitIdValueProperty(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitIdValueProperty(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OrReplaceDialectActionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_orReplaceDialectAction;
    }

	OR() {
	    return this.getToken(MySqlParser.OR, 0);
	};

	REPLACE() {
	    return this.getToken(MySqlParser.REPLACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterOrReplaceDialectAction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitOrReplaceDialectAction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitOrReplaceDialectAction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OwnerStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_ownerStatement;
    }

	DEFINER() {
	    return this.getToken(MySqlParser.DEFINER, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	userName() {
	    return this.getTypedRuleContext(UserNameContext,0);
	};

	CURRENT_USER() {
	    return this.getToken(MySqlParser.CURRENT_USER, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterOwnerStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitOwnerStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitOwnerStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ScheduleExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_scheduleExpression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class PreciseScheduleContext extends ScheduleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	AT() {
	    return this.getToken(MySqlParser.AT, 0);
	};

	timestampValue() {
	    return this.getTypedRuleContext(TimestampValueContext,0);
	};

	intervalExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IntervalExprContext);
	    } else {
	        return this.getTypedRuleContext(IntervalExprContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPreciseSchedule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPreciseSchedule(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitPreciseSchedule(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.PreciseScheduleContext = PreciseScheduleContext;

class IntervalScheduleContext extends ScheduleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.start_ = null; // TimestampValueContext;
        this._intervalExpr = null; // IntervalExprContext;
        this.startIntervals = []; // of IntervalExprContexts;
        this.end = null; // TimestampValueContext;
        this.endIntervals = []; // of IntervalExprContexts;
        super.copyFrom(ctx);
    }

	EVERY() {
	    return this.getToken(MySqlParser.EVERY, 0);
	};

	intervalType() {
	    return this.getTypedRuleContext(IntervalTypeContext,0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	STARTS() {
	    return this.getToken(MySqlParser.STARTS, 0);
	};

	ENDS() {
	    return this.getToken(MySqlParser.ENDS, 0);
	};

	timestampValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TimestampValueContext);
	    } else {
	        return this.getTypedRuleContext(TimestampValueContext,i);
	    }
	};

	intervalExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IntervalExprContext);
	    } else {
	        return this.getTypedRuleContext(IntervalExprContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterIntervalSchedule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitIntervalSchedule(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitIntervalSchedule(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.IntervalScheduleContext = IntervalScheduleContext;

class TimestampValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_timestampValue;
    }

	CURRENT_TIMESTAMP() {
	    return this.getToken(MySqlParser.CURRENT_TIMESTAMP, 0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTimestampValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTimestampValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitTimestampValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IntervalExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_intervalExpr;
    }

	PLUS() {
	    return this.getToken(MySqlParser.PLUS, 0);
	};

	INTERVAL() {
	    return this.getToken(MySqlParser.INTERVAL, 0);
	};

	intervalType() {
	    return this.getTypedRuleContext(IntervalTypeContext,0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterIntervalExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitIntervalExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitIntervalExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IntervalTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_intervalType;
    }

	intervalTypeBase() {
	    return this.getTypedRuleContext(IntervalTypeBaseContext,0);
	};

	YEAR() {
	    return this.getToken(MySqlParser.YEAR, 0);
	};

	YEAR_MONTH() {
	    return this.getToken(MySqlParser.YEAR_MONTH, 0);
	};

	DAY_HOUR() {
	    return this.getToken(MySqlParser.DAY_HOUR, 0);
	};

	DAY_MINUTE() {
	    return this.getToken(MySqlParser.DAY_MINUTE, 0);
	};

	DAY_SECOND() {
	    return this.getToken(MySqlParser.DAY_SECOND, 0);
	};

	HOUR_MINUTE() {
	    return this.getToken(MySqlParser.HOUR_MINUTE, 0);
	};

	HOUR_SECOND() {
	    return this.getToken(MySqlParser.HOUR_SECOND, 0);
	};

	MINUTE_SECOND() {
	    return this.getToken(MySqlParser.MINUTE_SECOND, 0);
	};

	SECOND_MICROSECOND() {
	    return this.getToken(MySqlParser.SECOND_MICROSECOND, 0);
	};

	MINUTE_MICROSECOND() {
	    return this.getToken(MySqlParser.MINUTE_MICROSECOND, 0);
	};

	HOUR_MICROSECOND() {
	    return this.getToken(MySqlParser.HOUR_MICROSECOND, 0);
	};

	DAY_MICROSECOND() {
	    return this.getToken(MySqlParser.DAY_MICROSECOND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterIntervalType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitIntervalType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitIntervalType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EnableTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_enableType;
    }

	ENABLE() {
	    return this.getToken(MySqlParser.ENABLE, 0);
	};

	DISABLE() {
	    return this.getToken(MySqlParser.DISABLE, 0);
	};

	ON() {
	    return this.getToken(MySqlParser.ON, 0);
	};

	SLAVE() {
	    return this.getToken(MySqlParser.SLAVE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterEnableType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitEnableType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitEnableType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IndexTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_indexType;
    }

	USING() {
	    return this.getToken(MySqlParser.USING, 0);
	};

	BTREE() {
	    return this.getToken(MySqlParser.BTREE, 0);
	};

	HASH() {
	    return this.getToken(MySqlParser.HASH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterIndexType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitIndexType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitIndexType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IndexOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_indexOption;
    }

	KEY_BLOCK_SIZE() {
	    return this.getToken(MySqlParser.KEY_BLOCK_SIZE, 0);
	};

	fileSizeLiteral() {
	    return this.getTypedRuleContext(FileSizeLiteralContext,0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	indexType() {
	    return this.getTypedRuleContext(IndexTypeContext,0);
	};

	WITH() {
	    return this.getToken(MySqlParser.WITH, 0);
	};

	PARSER() {
	    return this.getToken(MySqlParser.PARSER, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	COMMENT() {
	    return this.getToken(MySqlParser.COMMENT, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterIndexOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitIndexOption(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitIndexOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ProcedureParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_procedureParameter;
        this.direction = null; // Token
    }

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	dataType() {
	    return this.getTypedRuleContext(DataTypeContext,0);
	};

	IN() {
	    return this.getToken(MySqlParser.IN, 0);
	};

	OUT() {
	    return this.getToken(MySqlParser.OUT, 0);
	};

	INOUT() {
	    return this.getToken(MySqlParser.INOUT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterProcedureParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitProcedureParameter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitProcedureParameter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FunctionParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_functionParameter;
    }

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	dataType() {
	    return this.getTypedRuleContext(DataTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterFunctionParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitFunctionParameter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitFunctionParameter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PermanentFunctionResourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_permanentFunctionResource;
    }

	JAR() {
	    return this.getToken(MySqlParser.JAR, 0);
	};

	FILE() {
	    return this.getToken(MySqlParser.FILE, 0);
	};

	ARCHIVE() {
	    return this.getToken(MySqlParser.ARCHIVE, 0);
	};

	filePath() {
	    return this.getTypedRuleContext(FilePathContext,0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPermanentFunctionResource(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPermanentFunctionResource(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitPermanentFunctionResource(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RoutineOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_routineOption;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class RoutineBehaviorContext extends RoutineOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DETERMINISTIC() {
	    return this.getToken(MySqlParser.DETERMINISTIC, 0);
	};

	NOT() {
	    return this.getToken(MySqlParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterRoutineBehavior(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitRoutineBehavior(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitRoutineBehavior(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.RoutineBehaviorContext = RoutineBehaviorContext;

class RoutineLanguageContext extends RoutineOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LANGUAGE() {
	    return this.getToken(MySqlParser.LANGUAGE, 0);
	};

	SQL() {
	    return this.getToken(MySqlParser.SQL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterRoutineLanguage(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitRoutineLanguage(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitRoutineLanguage(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.RoutineLanguageContext = RoutineLanguageContext;

class RoutineCommentContext extends RoutineOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	COMMENT() {
	    return this.getToken(MySqlParser.COMMENT, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterRoutineComment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitRoutineComment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitRoutineComment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.RoutineCommentContext = RoutineCommentContext;

class RoutineSecurityContext extends RoutineOptionContext {

    constructor(parser, ctx) {
        super(parser);
        this.context = null; // Token;
        super.copyFrom(ctx);
    }

	SQL() {
	    return this.getToken(MySqlParser.SQL, 0);
	};

	SECURITY() {
	    return this.getToken(MySqlParser.SECURITY, 0);
	};

	DEFINER() {
	    return this.getToken(MySqlParser.DEFINER, 0);
	};

	INVOKER() {
	    return this.getToken(MySqlParser.INVOKER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterRoutineSecurity(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitRoutineSecurity(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitRoutineSecurity(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.RoutineSecurityContext = RoutineSecurityContext;

class RoutineDataContext extends RoutineOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CONTAINS() {
	    return this.getToken(MySqlParser.CONTAINS, 0);
	};

	SQL() {
	    return this.getToken(MySqlParser.SQL, 0);
	};

	NO() {
	    return this.getToken(MySqlParser.NO, 0);
	};

	READS() {
	    return this.getToken(MySqlParser.READS, 0);
	};

	DATA() {
	    return this.getToken(MySqlParser.DATA, 0);
	};

	MODIFIES() {
	    return this.getToken(MySqlParser.MODIFIES, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterRoutineData(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitRoutineData(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitRoutineData(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.RoutineDataContext = RoutineDataContext;

class ServerOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_serverOption;
    }

	HOST() {
	    return this.getToken(MySqlParser.HOST, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	DATABASE() {
	    return this.getToken(MySqlParser.DATABASE, 0);
	};

	USER() {
	    return this.getToken(MySqlParser.USER, 0);
	};

	PASSWORD() {
	    return this.getToken(MySqlParser.PASSWORD, 0);
	};

	SOCKET() {
	    return this.getToken(MySqlParser.SOCKET, 0);
	};

	OWNER() {
	    return this.getToken(MySqlParser.OWNER, 0);
	};

	PORT() {
	    return this.getToken(MySqlParser.PORT, 0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterServerOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitServerOption(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitServerOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateTableHeadContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_createTableHead;
    }

	CREATE() {
	    return this.getToken(MySqlParser.CREATE, 0);
	};

	TABLE() {
	    return this.getToken(MySqlParser.TABLE, 0);
	};

	TEMPORARY() {
	    return this.getToken(MySqlParser.TEMPORARY, 0);
	};

	EXTERNAL() {
	    return this.getToken(MySqlParser.EXTERNAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCreateTableHead(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCreateTableHead(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitCreateTableHead(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateTableAsKeyViolateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_createTableAsKeyViolate;
        this.keyViolate = null; // Token
    }

	IGNORE() {
	    return this.getToken(MySqlParser.IGNORE, 0);
	};

	REPLACE() {
	    return this.getToken(MySqlParser.REPLACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCreateTableAsKeyViolate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCreateTableAsKeyViolate(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitCreateTableAsKeyViolate(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateTableQueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_createTableQuery;
    }

	selectStatement() {
	    return this.getTypedRuleContext(SelectStatementContext,0);
	};

	AS() {
	    return this.getToken(MySqlParser.AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCreateTableQuery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCreateTableQuery(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitCreateTableQuery(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateTableLikeOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_createTableLikeOption;
    }

	locationDefinition() {
	    return this.getTypedRuleContext(LocationDefinitionContext,0);
	};

	tblPropertiesDefinition() {
	    return this.getTypedRuleContext(TblPropertiesDefinitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCreateTableLikeOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCreateTableLikeOption(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitCreateTableLikeOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateTableCreateOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_createTableCreateOption;
        this.level = 0
    }

	tableOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TableOptionContext);
	    } else {
	        return this.getTypedRuleContext(TableOptionContext,i);
	    }
	};

	partitionDefinitions() {
	    return this.getTypedRuleContext(PartitionDefinitionsContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	commentClause() {
	    return this.getTypedRuleContext(CommentClauseContext,0);
	};

	tablePartitionedBy() {
	    return this.getTypedRuleContext(TablePartitionedByContext,0);
	};

	tableBuckets() {
	    return this.getTypedRuleContext(TableBucketsContext,0);
	};

	tableSkewed() {
	    return this.getTypedRuleContext(TableSkewedContext,0);
	};

	rowFormat() {
	    return this.getTypedRuleContext(RowFormatContext,0);
	};

	fileStore() {
	    return this.getTypedRuleContext(FileStoreContext,0);
	};

	fileStoreBy() {
	    return this.getTypedRuleContext(FileStoreByContext,0);
	};

	esProps() {
	    return this.getTypedRuleContext(EsPropsContext,0);
	};

	locationDefinition() {
	    return this.getTypedRuleContext(LocationDefinitionContext,0);
	};

	tblPropertiesDefinition() {
	    return this.getTypedRuleContext(TblPropertiesDefinitionContext,0);
	};

	errorLogTableDefinition() {
	    return this.getTypedRuleContext(ErrorLogTableDefinitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCreateTableCreateOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCreateTableCreateOption(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitCreateTableCreateOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateDefinitionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_createDefinitions;
    }

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	createDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CreateDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(CreateDefinitionContext,i);
	    }
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCreateDefinitions(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCreateDefinitions(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitCreateDefinitions(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_createDefinition;
    }

	createColumnDeclaration() {
	    return this.getTypedRuleContext(CreateColumnDeclarationContext,0);
	};

	tableConstraint() {
	    return this.getTypedRuleContext(TableConstraintContext,0);
	};

	indexColumnDefinition() {
	    return this.getTypedRuleContext(IndexColumnDefinitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCreateDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCreateDefinition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitCreateDefinition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateColumnDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_createColumnDeclaration;
    }

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	columnDefinition() {
	    return this.getTypedRuleContext(ColumnDefinitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCreateColumnDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCreateColumnDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitCreateColumnDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColumnDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_columnDefinition;
    }

	dataType() {
	    return this.getTypedRuleContext(DataTypeContext,0);
	};

	columnConstraintMysql = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnConstraintMysqlContext);
	    } else {
	        return this.getTypedRuleContext(ColumnConstraintMysqlContext,i);
	    }
	};

	columnAnalyzer() {
	    return this.getTypedRuleContext(ColumnAnalyzerContext,0);
	};

	columnConstraintInceptor = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnConstraintInceptorContext);
	    } else {
	        return this.getTypedRuleContext(ColumnConstraintInceptorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterColumnDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitColumnDefinition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitColumnDefinition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColumnConstraintMysqlContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_columnConstraintMysql;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class StorageColumnConstraintContext extends ColumnConstraintMysqlContext {

    constructor(parser, ctx) {
        super(parser);
        this.storageval = null; // Token;
        super.copyFrom(ctx);
    }

	STORAGE() {
	    return this.getToken(MySqlParser.STORAGE, 0);
	};

	DISK() {
	    return this.getToken(MySqlParser.DISK, 0);
	};

	MEMORY() {
	    return this.getToken(MySqlParser.MEMORY, 0);
	};

	DEFAULT() {
	    return this.getToken(MySqlParser.DEFAULT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterStorageColumnConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitStorageColumnConstraint(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitStorageColumnConstraint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.StorageColumnConstraintContext = StorageColumnConstraintContext;

class FormatColumnConstraintContext extends ColumnConstraintMysqlContext {

    constructor(parser, ctx) {
        super(parser);
        this.colformat = null; // Token;
        super.copyFrom(ctx);
    }

	COLUMN_FORMAT() {
	    return this.getToken(MySqlParser.COLUMN_FORMAT, 0);
	};

	FIXED() {
	    return this.getToken(MySqlParser.FIXED, 0);
	};

	DYNAMIC() {
	    return this.getToken(MySqlParser.DYNAMIC, 0);
	};

	DEFAULT() {
	    return this.getToken(MySqlParser.DEFAULT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterFormatColumnConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitFormatColumnConstraint(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitFormatColumnConstraint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.FormatColumnConstraintContext = FormatColumnConstraintContext;

class CollateColumnConstraintContext extends ColumnConstraintMysqlContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	COLLATE() {
	    return this.getToken(MySqlParser.COLLATE, 0);
	};

	collationName() {
	    return this.getTypedRuleContext(CollationNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCollateColumnConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCollateColumnConstraint(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitCollateColumnConstraint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.CollateColumnConstraintContext = CollateColumnConstraintContext;

class AutoIncrementColumnConstraintContext extends ColumnConstraintMysqlContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	AUTO_INCREMENT() {
	    return this.getToken(MySqlParser.AUTO_INCREMENT, 0);
	};

	ON() {
	    return this.getToken(MySqlParser.ON, 0);
	};

	UPDATE() {
	    return this.getToken(MySqlParser.UPDATE, 0);
	};

	currentTimestamp() {
	    return this.getTypedRuleContext(CurrentTimestampContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAutoIncrementColumnConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAutoIncrementColumnConstraint(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAutoIncrementColumnConstraint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.AutoIncrementColumnConstraintContext = AutoIncrementColumnConstraintContext;

class CommentColumnConstraintContext extends ColumnConstraintMysqlContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	COMMENT() {
	    return this.getToken(MySqlParser.COMMENT, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCommentColumnConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCommentColumnConstraint(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitCommentColumnConstraint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.CommentColumnConstraintContext = CommentColumnConstraintContext;

class PrimaryKeyColumnConstraintContext extends ColumnConstraintMysqlContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	KEY() {
	    return this.getToken(MySqlParser.KEY, 0);
	};

	PRIMARY() {
	    return this.getToken(MySqlParser.PRIMARY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPrimaryKeyColumnConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPrimaryKeyColumnConstraint(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitPrimaryKeyColumnConstraint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.PrimaryKeyColumnConstraintContext = PrimaryKeyColumnConstraintContext;

class UniqueKeyColumnConstraintContext extends ColumnConstraintMysqlContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	UNIQUE() {
	    return this.getToken(MySqlParser.UNIQUE, 0);
	};

	KEY() {
	    return this.getToken(MySqlParser.KEY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUniqueKeyColumnConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUniqueKeyColumnConstraint(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitUniqueKeyColumnConstraint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.UniqueKeyColumnConstraintContext = UniqueKeyColumnConstraintContext;

class SerialDefaultColumnConstraintContext extends ColumnConstraintMysqlContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SERIAL() {
	    return this.getToken(MySqlParser.SERIAL, 0);
	};

	DEFAULT() {
	    return this.getToken(MySqlParser.DEFAULT, 0);
	};

	VALUE() {
	    return this.getToken(MySqlParser.VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSerialDefaultColumnConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSerialDefaultColumnConstraint(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitSerialDefaultColumnConstraint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.SerialDefaultColumnConstraintContext = SerialDefaultColumnConstraintContext;

class NullColumnConstraintContext extends ColumnConstraintMysqlContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	nullNotnull() {
	    return this.getTypedRuleContext(NullNotnullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterNullColumnConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitNullColumnConstraint(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitNullColumnConstraint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.NullColumnConstraintContext = NullColumnConstraintContext;

class DefaultColumnConstraintContext extends ColumnConstraintMysqlContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DEFAULT() {
	    return this.getToken(MySqlParser.DEFAULT, 0);
	};

	defaultValue() {
	    return this.getTypedRuleContext(DefaultValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDefaultColumnConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDefaultColumnConstraint(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitDefaultColumnConstraint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.DefaultColumnConstraintContext = DefaultColumnConstraintContext;

class ReferenceColumnConstraintContext extends ColumnConstraintMysqlContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	referenceDefinition() {
	    return this.getTypedRuleContext(ReferenceDefinitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterReferenceColumnConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitReferenceColumnConstraint(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitReferenceColumnConstraint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.ReferenceColumnConstraintContext = ReferenceColumnConstraintContext;

class GeneratedColumnConstraintContext extends ColumnConstraintMysqlContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	AS() {
	    return this.getToken(MySqlParser.AS, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	GENERATED() {
	    return this.getToken(MySqlParser.GENERATED, 0);
	};

	ALWAYS() {
	    return this.getToken(MySqlParser.ALWAYS, 0);
	};

	VIRTUAL() {
	    return this.getToken(MySqlParser.VIRTUAL, 0);
	};

	STORED() {
	    return this.getToken(MySqlParser.STORED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterGeneratedColumnConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitGeneratedColumnConstraint(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitGeneratedColumnConstraint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.GeneratedColumnConstraintContext = GeneratedColumnConstraintContext;

class ColumnConstraintInceptorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_columnConstraintInceptor;
    }

	NOT() {
	    return this.getToken(MySqlParser.NOT, 0);
	};

	NULL_LITERAL() {
	    return this.getToken(MySqlParser.NULL_LITERAL, 0);
	};

	UNIQUE() {
	    return this.getToken(MySqlParser.UNIQUE, 0);
	};

	PRIMARY() {
	    return this.getToken(MySqlParser.PRIMARY, 0);
	};

	KEY() {
	    return this.getToken(MySqlParser.KEY, 0);
	};

	constraintOpts() {
	    return this.getTypedRuleContext(ConstraintOptsContext,0);
	};

	CONSTRAINT() {
	    return this.getToken(MySqlParser.CONSTRAINT, 0);
	};

	uid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidContext);
	    } else {
	        return this.getTypedRuleContext(UidContext,i);
	    }
	};

	REFERENCES() {
	    return this.getToken(MySqlParser.REFERENCES, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	COMMENT() {
	    return this.getToken(MySqlParser.COMMENT, 0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	DEFAULT() {
	    return this.getToken(MySqlParser.DEFAULT, 0);
	};

	constant() {
	    return this.getTypedRuleContext(ConstantContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterColumnConstraintInceptor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitColumnConstraintInceptor(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitColumnConstraintInceptor(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColumnAnalyzerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_columnAnalyzer;
        this.p = null; // StringLiteralContext
        this.analyzer = null; // StringLiteralContext
    }

	WITH() {
	    return this.getToken(MySqlParser.WITH, 0);
	};

	ANALYZER() {
	    return this.getToken(MySqlParser.ANALYZER, 0);
	};

	stringLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringLiteralContext);
	    } else {
	        return this.getTypedRuleContext(StringLiteralContext,i);
	    }
	};

	APPEND() {
	    return this.getToken(MySqlParser.APPEND, 0);
	};

	NO_INDEX() {
	    return this.getToken(MySqlParser.NO_INDEX, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterColumnAnalyzer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitColumnAnalyzer(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitColumnAnalyzer(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConstraintOptsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_constraintOpts;
    }

	ENABLE() {
	    return this.getToken(MySqlParser.ENABLE, 0);
	};

	DISABLE() {
	    return this.getToken(MySqlParser.DISABLE, 0);
	};

	VALIDATE() {
	    return this.getToken(MySqlParser.VALIDATE, 0);
	};

	NOVALIDATE() {
	    return this.getToken(MySqlParser.NOVALIDATE, 0);
	};

	RELY() {
	    return this.getToken(MySqlParser.RELY, 0);
	};

	NORELY() {
	    return this.getToken(MySqlParser.NORELY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterConstraintOpts(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitConstraintOpts(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitConstraintOpts(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AsSelectStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_asSelectStatement;
        this.level = 0
    }

	AS() {
	    return this.getToken(MySqlParser.AS, 0);
	};

	selectStatement() {
	    return this.getTypedRuleContext(SelectStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAsSelectStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAsSelectStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAsSelectStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UidCommentListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_uidCommentList;
    }

	uidComment = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidCommentContext);
	    } else {
	        return this.getTypedRuleContext(UidCommentContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUidCommentList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUidCommentList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitUidCommentList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UidCommentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_uidComment;
    }

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	COMMENT() {
	    return this.getToken(MySqlParser.COMMENT, 0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUidComment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUidComment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitUidComment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableBucketsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_tableBuckets;
        this.level = 0
        this._intoBuckets = null; // IntoBucketsContext
    }

	CLUSTERED() {
	    return this.getToken(MySqlParser.CLUSTERED, 0);
	};

	BY = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.BY);
	    } else {
	        return this.getToken(MySqlParser.BY, i);
	    }
	};


	LR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.LR_BRACKET);
	    } else {
	        return this.getToken(MySqlParser.LR_BRACKET, i);
	    }
	};


	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	RR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.RR_BRACKET);
	    } else {
	        return this.getToken(MySqlParser.RR_BRACKET, i);
	    }
	};


	SORTED() {
	    return this.getToken(MySqlParser.SORTED, 0);
	};

	intoBuckets() {
	    return this.getTypedRuleContext(IntoBucketsContext,0);
	};

	uidOrderList() {
	    return this.getTypedRuleContext(UidOrderListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableBuckets(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableBuckets(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitTableBuckets(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IntoBucketsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_intoBuckets;
    }

	INTO() {
	    return this.getToken(MySqlParser.INTO, 0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	BUCKETS() {
	    return this.getToken(MySqlParser.BUCKETS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterIntoBuckets(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitIntoBuckets(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitIntoBuckets(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableSkewedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_tableSkewed;
        this.level = 0
    }

	SKEWED() {
	    return this.getToken(MySqlParser.SKEWED, 0);
	};

	BY() {
	    return this.getToken(MySqlParser.BY, 0);
	};

	LR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.LR_BRACKET);
	    } else {
	        return this.getToken(MySqlParser.LR_BRACKET, i);
	    }
	};


	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	RR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.RR_BRACKET);
	    } else {
	        return this.getToken(MySqlParser.RR_BRACKET, i);
	    }
	};


	ON() {
	    return this.getToken(MySqlParser.ON, 0);
	};

	constants = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConstantsContext);
	    } else {
	        return this.getTypedRuleContext(ConstantsContext,i);
	    }
	};

	STORED() {
	    return this.getToken(MySqlParser.STORED, 0);
	};

	AS() {
	    return this.getToken(MySqlParser.AS, 0);
	};

	DIRECTORIES() {
	    return this.getToken(MySqlParser.DIRECTORIES, 0);
	};

	COMMA() {
	    return this.getToken(MySqlParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableSkewed(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableSkewed(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitTableSkewed(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SetSerdeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_setSerde;
    }

	SET() {
	    return this.getToken(MySqlParser.SET, 0);
	};

	SERDE() {
	    return this.getToken(MySqlParser.SERDE, 0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	WITH() {
	    return this.getToken(MySqlParser.WITH, 0);
	};

	SERDEPROPERTIES() {
	    return this.getToken(MySqlParser.SERDEPROPERTIES, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	keyOrValueProperties() {
	    return this.getTypedRuleContext(KeyOrValuePropertiesContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSetSerde(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSetSerde(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitSetSerde(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EsPropsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_esProps;
        this.level = 0
    }

	WITH() {
	    return this.getToken(MySqlParser.WITH, 0);
	};

	SHARD() {
	    return this.getToken(MySqlParser.SHARD, 0);
	};

	NUMBER() {
	    return this.getToken(MySqlParser.NUMBER, 0);
	};

	decimalLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DecimalLiteralContext);
	    } else {
	        return this.getTypedRuleContext(DecimalLiteralContext,i);
	    }
	};

	REPLICATION() {
	    return this.getToken(MySqlParser.REPLICATION, 0);
	};

	ALL() {
	    return this.getToken(MySqlParser.ALL, 0);
	};

	DISABLE() {
	    return this.getToken(MySqlParser.DISABLE, 0);
	};

	ENABLE() {
	    return this.getToken(MySqlParser.ENABLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterEsProps(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitEsProps(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitEsProps(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class HoloPropsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_holoProps;
        this.level = 0
    }

	WITH() {
	    return this.getToken(MySqlParser.WITH, 0);
	};

	TABLET() {
	    return this.getToken(MySqlParser.TABLET, 0);
	};

	NUMBER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.NUMBER);
	    } else {
	        return this.getToken(MySqlParser.NUMBER, i);
	    }
	};


	decimalLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DecimalLiteralContext);
	    } else {
	        return this.getTypedRuleContext(DecimalLiteralContext,i);
	    }
	};

	CAPACITY() {
	    return this.getToken(MySqlParser.CAPACITY, 0);
	};

	REPLICATION() {
	    return this.getToken(MySqlParser.REPLICATION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterHoloProps(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitHoloProps(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitHoloProps(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class HoloTableSizeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_holoTableSize;
        this.level = 0
    }

	WITH() {
	    return this.getToken(MySqlParser.WITH, 0);
	};

	TABLESIZE() {
	    return this.getToken(MySqlParser.TABLESIZE, 0);
	};

	decimalLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DecimalLiteralContext);
	    } else {
	        return this.getTypedRuleContext(DecimalLiteralContext,i);
	    }
	};

	stringLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringLiteralContext);
	    } else {
	        return this.getTypedRuleContext(StringLiteralContext,i);
	    }
	};

	REPLICATION() {
	    return this.getToken(MySqlParser.REPLICATION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterHoloTableSize(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitHoloTableSize(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitHoloTableSize(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DialectWithNoDataContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_dialectWithNoData;
    }

	WITH() {
	    return this.getToken(MySqlParser.WITH, 0);
	};

	NO() {
	    return this.getToken(MySqlParser.NO, 0);
	};

	DATA() {
	    return this.getToken(MySqlParser.DATA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDialectWithNoData(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDialectWithNoData(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitDialectWithNoData(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CommentClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_commentClause;
        this.level = 0
    }

	COMMENT() {
	    return this.getToken(MySqlParser.COMMENT, 0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCommentClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCommentClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitCommentClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SetLocationDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_setLocationDefinition;
    }

	SET() {
	    return this.getToken(MySqlParser.SET, 0);
	};

	LOCATION() {
	    return this.getToken(MySqlParser.LOCATION, 0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSetLocationDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSetLocationDefinition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitSetLocationDefinition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LocationDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_locationDefinition;
        this.level = 0
    }

	LOCATION() {
	    return this.getToken(MySqlParser.LOCATION, 0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLocationDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLocationDefinition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitLocationDefinition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TblPropertiesDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_tblPropertiesDefinition;
        this.level = 0
    }

	TBLPROPERTIES() {
	    return this.getToken(MySqlParser.TBLPROPERTIES, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	keyValueProperties() {
	    return this.getTypedRuleContext(KeyValuePropertiesContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTblPropertiesDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTblPropertiesDefinition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitTblPropertiesDefinition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ErrorLogTableDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_errorLogTableDefinition;
        this.level = 0
    }

	LOG() {
	    return this.getToken(MySqlParser.LOG, 0);
	};

	ERRORS() {
	    return this.getToken(MySqlParser.ERRORS, 0);
	};

	INTO() {
	    return this.getToken(MySqlParser.INTO, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	OVERWRITE() {
	    return this.getToken(MySqlParser.OVERWRITE, 0);
	};

	errorRejectSpec() {
	    return this.getTypedRuleContext(ErrorRejectSpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterErrorLogTableDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitErrorLogTableDefinition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitErrorLogTableDefinition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ErrorRejectSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_errorRejectSpec;
    }

	SEGMENT() {
	    return this.getToken(MySqlParser.SEGMENT, 0);
	};

	REJECT() {
	    return this.getToken(MySqlParser.REJECT, 0);
	};

	LIMIT() {
	    return this.getToken(MySqlParser.LIMIT, 0);
	};

	numeric() {
	    return this.getTypedRuleContext(NumericContext,0);
	};

	ROWS() {
	    return this.getToken(MySqlParser.ROWS, 0);
	};

	PERCENT() {
	    return this.getToken(MySqlParser.PERCENT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterErrorRejectSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitErrorRejectSpec(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitErrorRejectSpec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_tableConstraint;
    }

	tableConstraintMysql() {
	    return this.getTypedRuleContext(TableConstraintMysqlContext,0);
	};

	tableConstraintInceptor() {
	    return this.getTypedRuleContext(TableConstraintInceptorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableConstraint(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitTableConstraint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableConstraintMysqlContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_tableConstraintMysql;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class UniqueKeyTableConstraintContext extends TableConstraintMysqlContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null; // UidContext;
        this.indexFormat = null; // Token;
        this.index = null; // UidContext;
        super.copyFrom(ctx);
    }

	UNIQUE() {
	    return this.getToken(MySqlParser.UNIQUE, 0);
	};

	indexColumnNames() {
	    return this.getTypedRuleContext(IndexColumnNamesContext,0);
	};

	CONSTRAINT() {
	    return this.getToken(MySqlParser.CONSTRAINT, 0);
	};

	indexType() {
	    return this.getTypedRuleContext(IndexTypeContext,0);
	};

	indexOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IndexOptionContext);
	    } else {
	        return this.getTypedRuleContext(IndexOptionContext,i);
	    }
	};

	uid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidContext);
	    } else {
	        return this.getTypedRuleContext(UidContext,i);
	    }
	};

	INDEX() {
	    return this.getToken(MySqlParser.INDEX, 0);
	};

	KEY() {
	    return this.getToken(MySqlParser.KEY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUniqueKeyTableConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUniqueKeyTableConstraint(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitUniqueKeyTableConstraint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.UniqueKeyTableConstraintContext = UniqueKeyTableConstraintContext;

class CheckTableConstraintContext extends TableConstraintMysqlContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null; // UidContext;
        super.copyFrom(ctx);
    }

	CHECK() {
	    return this.getToken(MySqlParser.CHECK, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	CONSTRAINT() {
	    return this.getToken(MySqlParser.CONSTRAINT, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCheckTableConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCheckTableConstraint(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitCheckTableConstraint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.CheckTableConstraintContext = CheckTableConstraintContext;

class PrimaryKeyTableConstraintContext extends TableConstraintMysqlContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null; // UidContext;
        this.index = null; // UidContext;
        super.copyFrom(ctx);
    }

	PRIMARY() {
	    return this.getToken(MySqlParser.PRIMARY, 0);
	};

	KEY() {
	    return this.getToken(MySqlParser.KEY, 0);
	};

	indexColumnNames() {
	    return this.getTypedRuleContext(IndexColumnNamesContext,0);
	};

	CONSTRAINT() {
	    return this.getToken(MySqlParser.CONSTRAINT, 0);
	};

	indexType() {
	    return this.getTypedRuleContext(IndexTypeContext,0);
	};

	indexOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IndexOptionContext);
	    } else {
	        return this.getTypedRuleContext(IndexOptionContext,i);
	    }
	};

	uid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidContext);
	    } else {
	        return this.getTypedRuleContext(UidContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPrimaryKeyTableConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPrimaryKeyTableConstraint(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitPrimaryKeyTableConstraint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.PrimaryKeyTableConstraintContext = PrimaryKeyTableConstraintContext;

class ForeignKeyTableConstraintContext extends TableConstraintMysqlContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null; // UidContext;
        this.index = null; // UidContext;
        super.copyFrom(ctx);
    }

	FOREIGN() {
	    return this.getToken(MySqlParser.FOREIGN, 0);
	};

	KEY() {
	    return this.getToken(MySqlParser.KEY, 0);
	};

	indexColumnNames() {
	    return this.getTypedRuleContext(IndexColumnNamesContext,0);
	};

	referenceDefinition() {
	    return this.getTypedRuleContext(ReferenceDefinitionContext,0);
	};

	CONSTRAINT() {
	    return this.getToken(MySqlParser.CONSTRAINT, 0);
	};

	uid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidContext);
	    } else {
	        return this.getTypedRuleContext(UidContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterForeignKeyTableConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitForeignKeyTableConstraint(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitForeignKeyTableConstraint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.ForeignKeyTableConstraintContext = ForeignKeyTableConstraintContext;

class TableConstraintInceptorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_tableConstraintInceptor;
        this.tabName = null; // TableNameContext
    }

	FOREIGN() {
	    return this.getToken(MySqlParser.FOREIGN, 0);
	};

	KEY() {
	    return this.getToken(MySqlParser.KEY, 0);
	};

	LR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.LR_BRACKET);
	    } else {
	        return this.getToken(MySqlParser.LR_BRACKET, i);
	    }
	};


	uidList = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidListContext);
	    } else {
	        return this.getTypedRuleContext(UidListContext,i);
	    }
	};

	RR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.RR_BRACKET);
	    } else {
	        return this.getToken(MySqlParser.RR_BRACKET, i);
	    }
	};


	REFERENCES() {
	    return this.getToken(MySqlParser.REFERENCES, 0);
	};

	constraintOpts() {
	    return this.getTypedRuleContext(ConstraintOptsContext,0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	CONSTRAINT() {
	    return this.getToken(MySqlParser.CONSTRAINT, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	PRIMARY() {
	    return this.getToken(MySqlParser.PRIMARY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableConstraintInceptor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableConstraintInceptor(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitTableConstraintInceptor(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReferenceDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_referenceDefinition;
        this.matchType = null; // Token
    }

	REFERENCES() {
	    return this.getToken(MySqlParser.REFERENCES, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	indexColumnNames() {
	    return this.getTypedRuleContext(IndexColumnNamesContext,0);
	};

	MATCH() {
	    return this.getToken(MySqlParser.MATCH, 0);
	};

	referenceAction() {
	    return this.getTypedRuleContext(ReferenceActionContext,0);
	};

	FULL() {
	    return this.getToken(MySqlParser.FULL, 0);
	};

	PARTIAL() {
	    return this.getToken(MySqlParser.PARTIAL, 0);
	};

	SIMPLE() {
	    return this.getToken(MySqlParser.SIMPLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterReferenceDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitReferenceDefinition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitReferenceDefinition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReferenceActionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_referenceAction;
        this.onDelete = null; // ReferenceControlTypeContext
        this.onUpdate = null; // ReferenceControlTypeContext
    }

	ON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.ON);
	    } else {
	        return this.getToken(MySqlParser.ON, i);
	    }
	};


	DELETE() {
	    return this.getToken(MySqlParser.DELETE, 0);
	};

	referenceControlType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ReferenceControlTypeContext);
	    } else {
	        return this.getTypedRuleContext(ReferenceControlTypeContext,i);
	    }
	};

	UPDATE() {
	    return this.getToken(MySqlParser.UPDATE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterReferenceAction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitReferenceAction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitReferenceAction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReferenceControlTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_referenceControlType;
    }

	RESTRICT() {
	    return this.getToken(MySqlParser.RESTRICT, 0);
	};

	CASCADE() {
	    return this.getToken(MySqlParser.CASCADE, 0);
	};

	SET() {
	    return this.getToken(MySqlParser.SET, 0);
	};

	NULL_LITERAL() {
	    return this.getToken(MySqlParser.NULL_LITERAL, 0);
	};

	NO() {
	    return this.getToken(MySqlParser.NO, 0);
	};

	ACTION() {
	    return this.getToken(MySqlParser.ACTION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterReferenceControlType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitReferenceControlType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitReferenceControlType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IndexColumnDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_indexColumnDefinition;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class SpecialIndexDeclarationContext extends IndexColumnDefinitionContext {

    constructor(parser, ctx) {
        super(parser);
        this.indexFormat = null; // Token;
        super.copyFrom(ctx);
    }

	indexColumnNames() {
	    return this.getTypedRuleContext(IndexColumnNamesContext,0);
	};

	FULLTEXT() {
	    return this.getToken(MySqlParser.FULLTEXT, 0);
	};

	SPATIAL() {
	    return this.getToken(MySqlParser.SPATIAL, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	indexOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IndexOptionContext);
	    } else {
	        return this.getTypedRuleContext(IndexOptionContext,i);
	    }
	};

	INDEX() {
	    return this.getToken(MySqlParser.INDEX, 0);
	};

	KEY() {
	    return this.getToken(MySqlParser.KEY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSpecialIndexDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSpecialIndexDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitSpecialIndexDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.SpecialIndexDeclarationContext = SpecialIndexDeclarationContext;

class SimpleIndexDeclarationContext extends IndexColumnDefinitionContext {

    constructor(parser, ctx) {
        super(parser);
        this.indexFormat = null; // Token;
        super.copyFrom(ctx);
    }

	indexColumnNames() {
	    return this.getTypedRuleContext(IndexColumnNamesContext,0);
	};

	INDEX() {
	    return this.getToken(MySqlParser.INDEX, 0);
	};

	KEY() {
	    return this.getToken(MySqlParser.KEY, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	indexType() {
	    return this.getTypedRuleContext(IndexTypeContext,0);
	};

	indexOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IndexOptionContext);
	    } else {
	        return this.getTypedRuleContext(IndexOptionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSimpleIndexDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSimpleIndexDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitSimpleIndexDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.SimpleIndexDeclarationContext = SimpleIndexDeclarationContext;

class TableOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_tableOption;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class TableOptionEngineContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ENGINE() {
	    return this.getToken(MySqlParser.ENGINE, 0);
	};

	engineName() {
	    return this.getTypedRuleContext(EngineNameContext,0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionEngine(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionEngine(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitTableOptionEngine(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.TableOptionEngineContext = TableOptionEngineContext;

class TableOptionMaxRowsContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	MAX_ROWS() {
	    return this.getToken(MySqlParser.MAX_ROWS, 0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionMaxRows(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionMaxRows(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitTableOptionMaxRows(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.TableOptionMaxRowsContext = TableOptionMaxRowsContext;

class TableOptionCollateContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	COLLATE() {
	    return this.getToken(MySqlParser.COLLATE, 0);
	};

	collationName() {
	    return this.getTypedRuleContext(CollationNameContext,0);
	};

	DEFAULT() {
	    return this.getToken(MySqlParser.DEFAULT, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionCollate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionCollate(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitTableOptionCollate(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.TableOptionCollateContext = TableOptionCollateContext;

class TableOptionPersistentContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        this.extBoolValue = null; // Token;
        super.copyFrom(ctx);
    }

	STATS_PERSISTENT() {
	    return this.getToken(MySqlParser.STATS_PERSISTENT, 0);
	};

	DEFAULT() {
	    return this.getToken(MySqlParser.DEFAULT, 0);
	};

	ZERO_DECIMAL() {
	    return this.getToken(MySqlParser.ZERO_DECIMAL, 0);
	};

	ONE_DECIMAL() {
	    return this.getToken(MySqlParser.ONE_DECIMAL, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionPersistent(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionPersistent(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitTableOptionPersistent(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.TableOptionPersistentContext = TableOptionPersistentContext;

class TableOptionTablespaceContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	TABLESPACE() {
	    return this.getToken(MySqlParser.TABLESPACE, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	tablespaceStorage() {
	    return this.getTypedRuleContext(TablespaceStorageContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionTablespace(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionTablespace(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitTableOptionTablespace(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.TableOptionTablespaceContext = TableOptionTablespaceContext;

class TableOptionPackKeysContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        this.extBoolValue = null; // Token;
        super.copyFrom(ctx);
    }

	PACK_KEYS() {
	    return this.getToken(MySqlParser.PACK_KEYS, 0);
	};

	ZERO_DECIMAL() {
	    return this.getToken(MySqlParser.ZERO_DECIMAL, 0);
	};

	ONE_DECIMAL() {
	    return this.getToken(MySqlParser.ONE_DECIMAL, 0);
	};

	DEFAULT() {
	    return this.getToken(MySqlParser.DEFAULT, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionPackKeys(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionPackKeys(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitTableOptionPackKeys(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.TableOptionPackKeysContext = TableOptionPackKeysContext;

class TableOptionPasswordContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	PASSWORD() {
	    return this.getToken(MySqlParser.PASSWORD, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionPassword(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionPassword(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitTableOptionPassword(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.TableOptionPasswordContext = TableOptionPasswordContext;

class TableOptionUnionContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	UNION() {
	    return this.getToken(MySqlParser.UNION, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	tables() {
	    return this.getTypedRuleContext(TablesContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionUnion(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionUnion(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitTableOptionUnion(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.TableOptionUnionContext = TableOptionUnionContext;

class TableOptionSamplePageContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	STATS_SAMPLE_PAGES() {
	    return this.getToken(MySqlParser.STATS_SAMPLE_PAGES, 0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionSamplePage(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionSamplePage(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitTableOptionSamplePage(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.TableOptionSamplePageContext = TableOptionSamplePageContext;

class TableOptionCharsetContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	charsetName() {
	    return this.getTypedRuleContext(CharsetNameContext,0);
	};

	CHARACTER() {
	    return this.getToken(MySqlParser.CHARACTER, 0);
	};

	SET() {
	    return this.getToken(MySqlParser.SET, 0);
	};

	CHARSET() {
	    return this.getToken(MySqlParser.CHARSET, 0);
	};

	DEFAULT() {
	    return this.getToken(MySqlParser.DEFAULT, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionCharset(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionCharset(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitTableOptionCharset(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.TableOptionCharsetContext = TableOptionCharsetContext;

class TableOptionIndexDirectoryContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	INDEX() {
	    return this.getToken(MySqlParser.INDEX, 0);
	};

	DIRECTORY() {
	    return this.getToken(MySqlParser.DIRECTORY, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionIndexDirectory(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionIndexDirectory(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitTableOptionIndexDirectory(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.TableOptionIndexDirectoryContext = TableOptionIndexDirectoryContext;

class TableOptionKeyBlockSizeContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	KEY_BLOCK_SIZE() {
	    return this.getToken(MySqlParser.KEY_BLOCK_SIZE, 0);
	};

	fileSizeLiteral() {
	    return this.getTypedRuleContext(FileSizeLiteralContext,0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionKeyBlockSize(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionKeyBlockSize(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitTableOptionKeyBlockSize(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.TableOptionKeyBlockSizeContext = TableOptionKeyBlockSizeContext;

class TableOptionEncryptionContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ENCRYPTION() {
	    return this.getToken(MySqlParser.ENCRYPTION, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionEncryption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionEncryption(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitTableOptionEncryption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.TableOptionEncryptionContext = TableOptionEncryptionContext;

class TableOptionDataDirectoryContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DATA() {
	    return this.getToken(MySqlParser.DATA, 0);
	};

	DIRECTORY() {
	    return this.getToken(MySqlParser.DIRECTORY, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionDataDirectory(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionDataDirectory(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitTableOptionDataDirectory(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.TableOptionDataDirectoryContext = TableOptionDataDirectoryContext;

class TableOptionRecalculationContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        this.extBoolValue = null; // Token;
        super.copyFrom(ctx);
    }

	STATS_AUTO_RECALC() {
	    return this.getToken(MySqlParser.STATS_AUTO_RECALC, 0);
	};

	DEFAULT() {
	    return this.getToken(MySqlParser.DEFAULT, 0);
	};

	ZERO_DECIMAL() {
	    return this.getToken(MySqlParser.ZERO_DECIMAL, 0);
	};

	ONE_DECIMAL() {
	    return this.getToken(MySqlParser.ONE_DECIMAL, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionRecalculation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionRecalculation(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitTableOptionRecalculation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.TableOptionRecalculationContext = TableOptionRecalculationContext;

class TableOptionAutoIncrementContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	AUTO_INCREMENT() {
	    return this.getToken(MySqlParser.AUTO_INCREMENT, 0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionAutoIncrement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionAutoIncrement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitTableOptionAutoIncrement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.TableOptionAutoIncrementContext = TableOptionAutoIncrementContext;

class TableOptionChecksumContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        this.boolValue = null; // Token;
        super.copyFrom(ctx);
    }

	CHECKSUM() {
	    return this.getToken(MySqlParser.CHECKSUM, 0);
	};

	PAGE_CHECKSUM() {
	    return this.getToken(MySqlParser.PAGE_CHECKSUM, 0);
	};

	ZERO_DECIMAL() {
	    return this.getToken(MySqlParser.ZERO_DECIMAL, 0);
	};

	ONE_DECIMAL() {
	    return this.getToken(MySqlParser.ONE_DECIMAL, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionChecksum(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionChecksum(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitTableOptionChecksum(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.TableOptionChecksumContext = TableOptionChecksumContext;

class TableOptionDelayContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        this.boolValue = null; // Token;
        super.copyFrom(ctx);
    }

	DELAY_KEY_WRITE() {
	    return this.getToken(MySqlParser.DELAY_KEY_WRITE, 0);
	};

	ZERO_DECIMAL() {
	    return this.getToken(MySqlParser.ZERO_DECIMAL, 0);
	};

	ONE_DECIMAL() {
	    return this.getToken(MySqlParser.ONE_DECIMAL, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionDelay(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionDelay(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitTableOptionDelay(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.TableOptionDelayContext = TableOptionDelayContext;

class TableOptionConnectionContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CONNECTION() {
	    return this.getToken(MySqlParser.CONNECTION, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionConnection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionConnection(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitTableOptionConnection(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.TableOptionConnectionContext = TableOptionConnectionContext;

class TableOptionCommentContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	COMMENT() {
	    return this.getToken(MySqlParser.COMMENT, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionComment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionComment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitTableOptionComment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.TableOptionCommentContext = TableOptionCommentContext;

class TableOptionAverageContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	AVG_ROW_LENGTH() {
	    return this.getToken(MySqlParser.AVG_ROW_LENGTH, 0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionAverage(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionAverage(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitTableOptionAverage(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.TableOptionAverageContext = TableOptionAverageContext;

class TableOptionRowFormatContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        this.rowFormatValue = null; // Token;
        super.copyFrom(ctx);
    }

	ROW_FORMAT() {
	    return this.getToken(MySqlParser.ROW_FORMAT, 0);
	};

	DEFAULT() {
	    return this.getToken(MySqlParser.DEFAULT, 0);
	};

	DYNAMIC() {
	    return this.getToken(MySqlParser.DYNAMIC, 0);
	};

	FIXED() {
	    return this.getToken(MySqlParser.FIXED, 0);
	};

	COMPRESSED() {
	    return this.getToken(MySqlParser.COMPRESSED, 0);
	};

	REDUNDANT() {
	    return this.getToken(MySqlParser.REDUNDANT, 0);
	};

	COMPACT() {
	    return this.getToken(MySqlParser.COMPACT, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionRowFormat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionRowFormat(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitTableOptionRowFormat(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.TableOptionRowFormatContext = TableOptionRowFormatContext;

class TableOptionCompressionContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	COMPRESSION() {
	    return this.getToken(MySqlParser.COMPRESSION, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	ID() {
	    return this.getToken(MySqlParser.ID, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionCompression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionCompression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitTableOptionCompression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.TableOptionCompressionContext = TableOptionCompressionContext;

class TableOptionInsertMethodContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        this.insertMethod = null; // Token;
        super.copyFrom(ctx);
    }

	INSERT_METHOD() {
	    return this.getToken(MySqlParser.INSERT_METHOD, 0);
	};

	NO() {
	    return this.getToken(MySqlParser.NO, 0);
	};

	FIRST() {
	    return this.getToken(MySqlParser.FIRST, 0);
	};

	LAST() {
	    return this.getToken(MySqlParser.LAST, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionInsertMethod(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionInsertMethod(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitTableOptionInsertMethod(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.TableOptionInsertMethodContext = TableOptionInsertMethodContext;

class TableOptionMinRowsContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	MIN_ROWS() {
	    return this.getToken(MySqlParser.MIN_ROWS, 0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionMinRows(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionMinRows(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitTableOptionMinRows(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.TableOptionMinRowsContext = TableOptionMinRowsContext;

class TablespaceStorageContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_tablespaceStorage;
    }

	STORAGE() {
	    return this.getToken(MySqlParser.STORAGE, 0);
	};

	DISK() {
	    return this.getToken(MySqlParser.DISK, 0);
	};

	MEMORY() {
	    return this.getToken(MySqlParser.MEMORY, 0);
	};

	DEFAULT() {
	    return this.getToken(MySqlParser.DEFAULT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTablespaceStorage(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTablespaceStorage(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitTablespaceStorage(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PartitionDefinitionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_partitionDefinitions;
        this.level = 0
        this.count = null; // DecimalLiteralContext
        this.subCount = null; // DecimalLiteralContext
    }

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	BY = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.BY);
	    } else {
	        return this.getToken(MySqlParser.BY, i);
	    }
	};


	partitionFunctionDefinition() {
	    return this.getTypedRuleContext(PartitionFunctionDefinitionContext,0);
	};

	PARTITIONS() {
	    return this.getToken(MySqlParser.PARTITIONS, 0);
	};

	SUBPARTITION() {
	    return this.getToken(MySqlParser.SUBPARTITION, 0);
	};

	subpartitionFunctionDefinition() {
	    return this.getTypedRuleContext(SubpartitionFunctionDefinitionContext,0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	partitionDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PartitionDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(PartitionDefinitionContext,i);
	    }
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	decimalLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DecimalLiteralContext);
	    } else {
	        return this.getTypedRuleContext(DecimalLiteralContext,i);
	    }
	};

	SUBPARTITIONS() {
	    return this.getToken(MySqlParser.SUBPARTITIONS, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPartitionDefinitions(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPartitionDefinitions(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitPartitionDefinitions(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PartitionFunctionDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_partitionFunctionDefinition;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class PartitionFunctionKeyContext extends PartitionFunctionDefinitionContext {

    constructor(parser, ctx) {
        super(parser);
        this.algType = null; // Token;
        super.copyFrom(ctx);
    }

	KEY() {
	    return this.getToken(MySqlParser.KEY, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	LINEAR() {
	    return this.getToken(MySqlParser.LINEAR, 0);
	};

	ALGORITHM() {
	    return this.getToken(MySqlParser.ALGORITHM, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	ONE_DECIMAL() {
	    return this.getToken(MySqlParser.ONE_DECIMAL, 0);
	};

	TWO_DECIMAL() {
	    return this.getToken(MySqlParser.TWO_DECIMAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPartitionFunctionKey(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPartitionFunctionKey(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitPartitionFunctionKey(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.PartitionFunctionKeyContext = PartitionFunctionKeyContext;

class PartitionFunctionHashContext extends PartitionFunctionDefinitionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	HASH() {
	    return this.getToken(MySqlParser.HASH, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	LINEAR() {
	    return this.getToken(MySqlParser.LINEAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPartitionFunctionHash(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPartitionFunctionHash(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitPartitionFunctionHash(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.PartitionFunctionHashContext = PartitionFunctionHashContext;

class PartitionFunctionListContext extends PartitionFunctionDefinitionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LIST() {
	    return this.getToken(MySqlParser.LIST, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	COLUMNS() {
	    return this.getToken(MySqlParser.COLUMNS, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPartitionFunctionList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPartitionFunctionList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitPartitionFunctionList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.PartitionFunctionListContext = PartitionFunctionListContext;

class PartitionFunctionRangeContext extends PartitionFunctionDefinitionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	RANGE() {
	    return this.getToken(MySqlParser.RANGE, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	COLUMNS() {
	    return this.getToken(MySqlParser.COLUMNS, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPartitionFunctionRange(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPartitionFunctionRange(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitPartitionFunctionRange(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.PartitionFunctionRangeContext = PartitionFunctionRangeContext;

class SubpartitionFunctionDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_subpartitionFunctionDefinition;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class SubPartitionFunctionHashContext extends SubpartitionFunctionDefinitionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	HASH() {
	    return this.getToken(MySqlParser.HASH, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	LINEAR() {
	    return this.getToken(MySqlParser.LINEAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSubPartitionFunctionHash(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSubPartitionFunctionHash(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitSubPartitionFunctionHash(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.SubPartitionFunctionHashContext = SubPartitionFunctionHashContext;

class SubPartitionFunctionKeyContext extends SubpartitionFunctionDefinitionContext {

    constructor(parser, ctx) {
        super(parser);
        this.algType = null; // Token;
        super.copyFrom(ctx);
    }

	KEY() {
	    return this.getToken(MySqlParser.KEY, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	LINEAR() {
	    return this.getToken(MySqlParser.LINEAR, 0);
	};

	ALGORITHM() {
	    return this.getToken(MySqlParser.ALGORITHM, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	ONE_DECIMAL() {
	    return this.getToken(MySqlParser.ONE_DECIMAL, 0);
	};

	TWO_DECIMAL() {
	    return this.getToken(MySqlParser.TWO_DECIMAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSubPartitionFunctionKey(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSubPartitionFunctionKey(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitSubPartitionFunctionKey(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.SubPartitionFunctionKeyContext = SubPartitionFunctionKeyContext;

class PartitionDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_partitionDefinition;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class PartitionComparisionContext extends PartitionDefinitionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	VALUES() {
	    return this.getToken(MySqlParser.VALUES, 0);
	};

	LESS() {
	    return this.getToken(MySqlParser.LESS, 0);
	};

	THAN() {
	    return this.getToken(MySqlParser.THAN, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	partitionDefinerAtom = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PartitionDefinerAtomContext);
	    } else {
	        return this.getTypedRuleContext(PartitionDefinerAtomContext,i);
	    }
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	partitionOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PartitionOptionContext);
	    } else {
	        return this.getTypedRuleContext(PartitionOptionContext,i);
	    }
	};

	subpartitionDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SubpartitionDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(SubpartitionDefinitionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPartitionComparision(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPartitionComparision(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitPartitionComparision(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.PartitionComparisionContext = PartitionComparisionContext;

class PartitionListAtomContext extends PartitionDefinitionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	VALUES() {
	    return this.getToken(MySqlParser.VALUES, 0);
	};

	IN() {
	    return this.getToken(MySqlParser.IN, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	partitionDefinerAtom = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PartitionDefinerAtomContext);
	    } else {
	        return this.getTypedRuleContext(PartitionDefinerAtomContext,i);
	    }
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	partitionOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PartitionOptionContext);
	    } else {
	        return this.getTypedRuleContext(PartitionOptionContext,i);
	    }
	};

	subpartitionDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SubpartitionDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(SubpartitionDefinitionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPartitionListAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPartitionListAtom(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitPartitionListAtom(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.PartitionListAtomContext = PartitionListAtomContext;

class PartitionListVectorContext extends PartitionDefinitionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	VALUES() {
	    return this.getToken(MySqlParser.VALUES, 0);
	};

	IN() {
	    return this.getToken(MySqlParser.IN, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	partitionDefinerVector = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PartitionDefinerVectorContext);
	    } else {
	        return this.getTypedRuleContext(PartitionDefinerVectorContext,i);
	    }
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	partitionOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PartitionOptionContext);
	    } else {
	        return this.getTypedRuleContext(PartitionOptionContext,i);
	    }
	};

	subpartitionDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SubpartitionDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(SubpartitionDefinitionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPartitionListVector(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPartitionListVector(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitPartitionListVector(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.PartitionListVectorContext = PartitionListVectorContext;

class PartitionSimpleContext extends PartitionDefinitionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	partitionOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PartitionOptionContext);
	    } else {
	        return this.getTypedRuleContext(PartitionOptionContext,i);
	    }
	};

	subpartitionDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SubpartitionDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(SubpartitionDefinitionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPartitionSimple(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPartitionSimple(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitPartitionSimple(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.PartitionSimpleContext = PartitionSimpleContext;

class PartitionDefinerAtomContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_partitionDefinerAtom;
    }

	constant() {
	    return this.getTypedRuleContext(ConstantContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	MAXVALUE() {
	    return this.getToken(MySqlParser.MAXVALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPartitionDefinerAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPartitionDefinerAtom(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitPartitionDefinerAtom(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PartitionDefinerVectorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_partitionDefinerVector;
    }

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	partitionDefinerAtom = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PartitionDefinerAtomContext);
	    } else {
	        return this.getTypedRuleContext(PartitionDefinerAtomContext,i);
	    }
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPartitionDefinerVector(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPartitionDefinerVector(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitPartitionDefinerVector(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SubpartitionDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_subpartitionDefinition;
    }

	SUBPARTITION() {
	    return this.getToken(MySqlParser.SUBPARTITION, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	partitionOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PartitionOptionContext);
	    } else {
	        return this.getTypedRuleContext(PartitionOptionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSubpartitionDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSubpartitionDefinition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitSubpartitionDefinition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PartitionOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_partitionOption;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class PartitionOptionCommentContext extends PartitionOptionContext {

    constructor(parser, ctx) {
        super(parser);
        this.comment = null; // Token;
        super.copyFrom(ctx);
    }

	COMMENT() {
	    return this.getToken(MySqlParser.COMMENT, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPartitionOptionComment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPartitionOptionComment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitPartitionOptionComment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.PartitionOptionCommentContext = PartitionOptionCommentContext;

class PartitionOptionNodeGroupContext extends PartitionOptionContext {

    constructor(parser, ctx) {
        super(parser);
        this.nodegroup = null; // UidContext;
        super.copyFrom(ctx);
    }

	NODEGROUP() {
	    return this.getToken(MySqlParser.NODEGROUP, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPartitionOptionNodeGroup(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPartitionOptionNodeGroup(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitPartitionOptionNodeGroup(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.PartitionOptionNodeGroupContext = PartitionOptionNodeGroupContext;

class PartitionOptionIndexDirectoryContext extends PartitionOptionContext {

    constructor(parser, ctx) {
        super(parser);
        this.indexDirectory = null; // Token;
        super.copyFrom(ctx);
    }

	INDEX() {
	    return this.getToken(MySqlParser.INDEX, 0);
	};

	DIRECTORY() {
	    return this.getToken(MySqlParser.DIRECTORY, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPartitionOptionIndexDirectory(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPartitionOptionIndexDirectory(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitPartitionOptionIndexDirectory(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.PartitionOptionIndexDirectoryContext = PartitionOptionIndexDirectoryContext;

class PartitionOptionMaxRowsContext extends PartitionOptionContext {

    constructor(parser, ctx) {
        super(parser);
        this.maxRows = null; // DecimalLiteralContext;
        super.copyFrom(ctx);
    }

	MAX_ROWS() {
	    return this.getToken(MySqlParser.MAX_ROWS, 0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPartitionOptionMaxRows(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPartitionOptionMaxRows(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitPartitionOptionMaxRows(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.PartitionOptionMaxRowsContext = PartitionOptionMaxRowsContext;

class PartitionOptionTablespaceContext extends PartitionOptionContext {

    constructor(parser, ctx) {
        super(parser);
        this.tablespace = null; // UidContext;
        super.copyFrom(ctx);
    }

	TABLESPACE() {
	    return this.getToken(MySqlParser.TABLESPACE, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPartitionOptionTablespace(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPartitionOptionTablespace(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitPartitionOptionTablespace(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.PartitionOptionTablespaceContext = PartitionOptionTablespaceContext;

class PartitionOptionEngineContext extends PartitionOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ENGINE() {
	    return this.getToken(MySqlParser.ENGINE, 0);
	};

	engineName() {
	    return this.getTypedRuleContext(EngineNameContext,0);
	};

	STORAGE() {
	    return this.getToken(MySqlParser.STORAGE, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPartitionOptionEngine(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPartitionOptionEngine(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitPartitionOptionEngine(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.PartitionOptionEngineContext = PartitionOptionEngineContext;

class PartitionOptionMinRowsContext extends PartitionOptionContext {

    constructor(parser, ctx) {
        super(parser);
        this.minRows = null; // DecimalLiteralContext;
        super.copyFrom(ctx);
    }

	MIN_ROWS() {
	    return this.getToken(MySqlParser.MIN_ROWS, 0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPartitionOptionMinRows(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPartitionOptionMinRows(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitPartitionOptionMinRows(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.PartitionOptionMinRowsContext = PartitionOptionMinRowsContext;

class PartitionOptionDataDirectoryContext extends PartitionOptionContext {

    constructor(parser, ctx) {
        super(parser);
        this.dataDirectory = null; // Token;
        super.copyFrom(ctx);
    }

	DATA() {
	    return this.getToken(MySqlParser.DATA, 0);
	};

	DIRECTORY() {
	    return this.getToken(MySqlParser.DIRECTORY, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPartitionOptionDataDirectory(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPartitionOptionDataDirectory(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitPartitionOptionDataDirectory(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.PartitionOptionDataDirectoryContext = PartitionOptionDataDirectoryContext;

class AlterDatabaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_alterDatabase;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class AlterDbPlacholderContext extends AlterDatabaseContext {

    constructor(parser, ctx) {
        super(parser);
        this.dbFormat = null; // Token;
        this._alterDatabaseAnchor = null; // AlterDatabaseAnchorContext;
        super.copyFrom(ctx);
    }

	ALTER() {
	    return this.getToken(MySqlParser.ALTER, 0);
	};

	databaseName() {
	    return this.getTypedRuleContext(DatabaseNameContext,0);
	};

	alterDatabaseAnchor() {
	    return this.getTypedRuleContext(AlterDatabaseAnchorContext,0);
	};

	DATABASE() {
	    return this.getToken(MySqlParser.DATABASE, 0);
	};

	SCHEMA() {
	    return this.getToken(MySqlParser.SCHEMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterDbPlacholder(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterDbPlacholder(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterDbPlacholder(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.AlterDbPlacholderContext = AlterDbPlacholderContext;

class AlterUpgradeNameContext extends AlterDatabaseContext {

    constructor(parser, ctx) {
        super(parser);
        this.dbFormat = null; // Token;
        super.copyFrom(ctx);
    }

	ALTER() {
	    return this.getToken(MySqlParser.ALTER, 0);
	};

	databaseName() {
	    return this.getTypedRuleContext(DatabaseNameContext,0);
	};

	alterDatabaseOption() {
	    return this.getTypedRuleContext(AlterDatabaseOptionContext,0);
	};

	DATABASE() {
	    return this.getToken(MySqlParser.DATABASE, 0);
	};

	SCHEMA() {
	    return this.getToken(MySqlParser.SCHEMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterUpgradeName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterUpgradeName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterUpgradeName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.AlterUpgradeNameContext = AlterUpgradeNameContext;

class AlterSimpleDatabaseContext extends AlterDatabaseContext {

    constructor(parser, ctx) {
        super(parser);
        this.dbFormat = null; // Token;
        super.copyFrom(ctx);
    }

	ALTER() {
	    return this.getToken(MySqlParser.ALTER, 0);
	};

	DATABASE() {
	    return this.getToken(MySqlParser.DATABASE, 0);
	};

	SCHEMA() {
	    return this.getToken(MySqlParser.SCHEMA, 0);
	};

	mysqlCreateDatabaseOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MysqlCreateDatabaseOptionContext);
	    } else {
	        return this.getTypedRuleContext(MysqlCreateDatabaseOptionContext,i);
	    }
	};

	databaseName() {
	    return this.getTypedRuleContext(DatabaseNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterSimpleDatabase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterSimpleDatabase(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterSimpleDatabase(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.AlterSimpleDatabaseContext = AlterSimpleDatabaseContext;

class AlterMissingBodyContext extends AlterDatabaseContext {

    constructor(parser, ctx) {
        super(parser);
        this.dbFormat = null; // Token;
        super.copyFrom(ctx);
    }

	ALTER() {
	    return this.getToken(MySqlParser.ALTER, 0);
	};

	databaseName() {
	    return this.getTypedRuleContext(DatabaseNameContext,0);
	};

	DATABASE() {
	    return this.getToken(MySqlParser.DATABASE, 0);
	};

	SCHEMA() {
	    return this.getToken(MySqlParser.SCHEMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterMissingBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterMissingBody(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterMissingBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.AlterMissingBodyContext = AlterMissingBodyContext;

class AlterEventContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_alterEvent;
    }

	ALTER() {
	    return this.getToken(MySqlParser.ALTER, 0);
	};

	EVENT() {
	    return this.getToken(MySqlParser.EVENT, 0);
	};

	fullId = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FullIdContext);
	    } else {
	        return this.getTypedRuleContext(FullIdContext,i);
	    }
	};

	ownerStatement() {
	    return this.getTypedRuleContext(OwnerStatementContext,0);
	};

	ON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.ON);
	    } else {
	        return this.getToken(MySqlParser.ON, i);
	    }
	};


	SCHEDULE() {
	    return this.getToken(MySqlParser.SCHEDULE, 0);
	};

	scheduleExpression() {
	    return this.getTypedRuleContext(ScheduleExpressionContext,0);
	};

	COMPLETION() {
	    return this.getToken(MySqlParser.COMPLETION, 0);
	};

	PRESERVE() {
	    return this.getToken(MySqlParser.PRESERVE, 0);
	};

	RENAME() {
	    return this.getToken(MySqlParser.RENAME, 0);
	};

	TO() {
	    return this.getToken(MySqlParser.TO, 0);
	};

	enableType() {
	    return this.getTypedRuleContext(EnableTypeContext,0);
	};

	COMMENT() {
	    return this.getToken(MySqlParser.COMMENT, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	DO() {
	    return this.getToken(MySqlParser.DO, 0);
	};

	routineBody() {
	    return this.getTypedRuleContext(RoutineBodyContext,0);
	};

	NOT() {
	    return this.getToken(MySqlParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterEvent(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterEvent(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterEvent(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_alterFunction;
    }

	ALTER() {
	    return this.getToken(MySqlParser.ALTER, 0);
	};

	FUNCTION() {
	    return this.getToken(MySqlParser.FUNCTION, 0);
	};

	fullId() {
	    return this.getTypedRuleContext(FullIdContext,0);
	};

	routineOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RoutineOptionContext);
	    } else {
	        return this.getTypedRuleContext(RoutineOptionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterInstanceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_alterInstance;
    }

	ALTER() {
	    return this.getToken(MySqlParser.ALTER, 0);
	};

	INSTANCE() {
	    return this.getToken(MySqlParser.INSTANCE, 0);
	};

	ROTATE() {
	    return this.getToken(MySqlParser.ROTATE, 0);
	};

	INNODB() {
	    return this.getToken(MySqlParser.INNODB, 0);
	};

	MASTER() {
	    return this.getToken(MySqlParser.MASTER, 0);
	};

	KEY() {
	    return this.getToken(MySqlParser.KEY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterInstance(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterInstance(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterInstance(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterLogfileGroupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_alterLogfileGroup;
    }

	ALTER() {
	    return this.getToken(MySqlParser.ALTER, 0);
	};

	LOGFILE() {
	    return this.getToken(MySqlParser.LOGFILE, 0);
	};

	GROUP() {
	    return this.getToken(MySqlParser.GROUP, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	ADD() {
	    return this.getToken(MySqlParser.ADD, 0);
	};

	UNDOFILE() {
	    return this.getToken(MySqlParser.UNDOFILE, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	ENGINE() {
	    return this.getToken(MySqlParser.ENGINE, 0);
	};

	engineName() {
	    return this.getTypedRuleContext(EngineNameContext,0);
	};

	INITIAL_SIZE() {
	    return this.getToken(MySqlParser.INITIAL_SIZE, 0);
	};

	fileSizeLiteral() {
	    return this.getTypedRuleContext(FileSizeLiteralContext,0);
	};

	WAIT() {
	    return this.getToken(MySqlParser.WAIT, 0);
	};

	EQUAL_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.EQUAL_SYMBOL);
	    } else {
	        return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterLogfileGroup(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterLogfileGroup(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterLogfileGroup(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterProcedureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_alterProcedure;
    }

	ALTER() {
	    return this.getToken(MySqlParser.ALTER, 0);
	};

	PROCEDURE() {
	    return this.getToken(MySqlParser.PROCEDURE, 0);
	};

	fullId() {
	    return this.getTypedRuleContext(FullIdContext,0);
	};

	routineOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RoutineOptionContext);
	    } else {
	        return this.getTypedRuleContext(RoutineOptionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterProcedure(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterProcedure(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterProcedure(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterServerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_alterServer;
    }

	ALTER() {
	    return this.getToken(MySqlParser.ALTER, 0);
	};

	SERVER() {
	    return this.getToken(MySqlParser.SERVER, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	OPTIONS() {
	    return this.getToken(MySqlParser.OPTIONS, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	serverOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ServerOptionContext);
	    } else {
	        return this.getTypedRuleContext(ServerOptionContext,i);
	    }
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterServer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterServer(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterServer(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterTableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_alterTable;
    }

	ALTER() {
	    return this.getToken(MySqlParser.ALTER, 0);
	};

	alterTableAction() {
	    return this.getTypedRuleContext(AlterTableActionContext,0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	alterSpecification() {
	    return this.getTypedRuleContext(AlterSpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterTable(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterTable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterTablespaceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_alterTablespace;
        this.objectAction = null; // Token
    }

	ALTER() {
	    return this.getToken(MySqlParser.ALTER, 0);
	};

	TABLESPACE() {
	    return this.getToken(MySqlParser.TABLESPACE, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	DATAFILE() {
	    return this.getToken(MySqlParser.DATAFILE, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	ENGINE() {
	    return this.getToken(MySqlParser.ENGINE, 0);
	};

	engineName() {
	    return this.getTypedRuleContext(EngineNameContext,0);
	};

	ADD() {
	    return this.getToken(MySqlParser.ADD, 0);
	};

	DROP() {
	    return this.getToken(MySqlParser.DROP, 0);
	};

	INITIAL_SIZE() {
	    return this.getToken(MySqlParser.INITIAL_SIZE, 0);
	};

	EQUAL_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.EQUAL_SYMBOL);
	    } else {
	        return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
	    }
	};


	fileSizeLiteral() {
	    return this.getTypedRuleContext(FileSizeLiteralContext,0);
	};

	WAIT() {
	    return this.getToken(MySqlParser.WAIT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterTablespace(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterTablespace(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterTablespace(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterViewContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_alterView;
        this.algType = null; // Token
        this.secContext = null; // Token
        this.checkOpt = null; // Token
    }

	ALTER() {
	    return this.getToken(MySqlParser.ALTER, 0);
	};

	VIEW() {
	    return this.getToken(MySqlParser.VIEW, 0);
	};

	fullId() {
	    return this.getTypedRuleContext(FullIdContext,0);
	};

	AS() {
	    return this.getToken(MySqlParser.AS, 0);
	};

	selectStatement() {
	    return this.getTypedRuleContext(SelectStatementContext,0);
	};

	ALGORITHM() {
	    return this.getToken(MySqlParser.ALGORITHM, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	ownerStatement() {
	    return this.getTypedRuleContext(OwnerStatementContext,0);
	};

	SQL() {
	    return this.getToken(MySqlParser.SQL, 0);
	};

	SECURITY() {
	    return this.getToken(MySqlParser.SECURITY, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	WITH() {
	    return this.getToken(MySqlParser.WITH, 0);
	};

	CHECK() {
	    return this.getToken(MySqlParser.CHECK, 0);
	};

	OPTION() {
	    return this.getToken(MySqlParser.OPTION, 0);
	};

	UNDEFINED() {
	    return this.getToken(MySqlParser.UNDEFINED, 0);
	};

	MERGE() {
	    return this.getToken(MySqlParser.MERGE, 0);
	};

	TEMPTABLE() {
	    return this.getToken(MySqlParser.TEMPTABLE, 0);
	};

	DEFINER() {
	    return this.getToken(MySqlParser.DEFINER, 0);
	};

	INVOKER() {
	    return this.getToken(MySqlParser.INVOKER, 0);
	};

	CASCADED() {
	    return this.getToken(MySqlParser.CASCADED, 0);
	};

	LOCAL() {
	    return this.getToken(MySqlParser.LOCAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterView(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterView(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterView(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterDatabaseOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_alterDatabaseOption;
        this.level = 0
    }

	UPGRADE() {
	    return this.getToken(MySqlParser.UPGRADE, 0);
	};

	DATA() {
	    return this.getToken(MySqlParser.DATA, 0);
	};

	DIRECTORY() {
	    return this.getToken(MySqlParser.DIRECTORY, 0);
	};

	NAME() {
	    return this.getToken(MySqlParser.NAME, 0);
	};

	alterDatabaseSetDbproperties() {
	    return this.getTypedRuleContext(AlterDatabaseSetDbpropertiesContext,0);
	};

	alterDatabaseSetOwner() {
	    return this.getTypedRuleContext(AlterDatabaseSetOwnerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterDatabaseOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterDatabaseOption(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterDatabaseOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterDatabaseSetDbpropertiesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_alterDatabaseSetDbproperties;
        this.level = 0
    }

	SET() {
	    return this.getToken(MySqlParser.SET, 0);
	};

	DBPROPERTIES() {
	    return this.getToken(MySqlParser.DBPROPERTIES, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	keyValueProperties() {
	    return this.getTypedRuleContext(KeyValuePropertiesContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterDatabaseSetDbproperties(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterDatabaseSetDbproperties(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterDatabaseSetDbproperties(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterDatabaseSetOwnerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_alterDatabaseSetOwner;
        this.level = 0
    }

	SET() {
	    return this.getToken(MySqlParser.SET, 0);
	};

	OWNER() {
	    return this.getToken(MySqlParser.OWNER, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	USER() {
	    return this.getToken(MySqlParser.USER, 0);
	};

	GROUP() {
	    return this.getToken(MySqlParser.GROUP, 0);
	};

	ROLE() {
	    return this.getToken(MySqlParser.ROLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterDatabaseSetOwner(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterDatabaseSetOwner(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterDatabaseSetOwner(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterDatabaseAnchorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_alterDatabaseAnchor;
    }

	placeholder() {
	    return this.getTypedRuleContext(PlaceholderContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterDatabaseAnchor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterDatabaseAnchor(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterDatabaseAnchor(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterTableActionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_alterTableAction;
        this.intimeAction = null; // Token
    }

	TABLE() {
	    return this.getToken(MySqlParser.TABLE, 0);
	};

	IGNORE() {
	    return this.getToken(MySqlParser.IGNORE, 0);
	};

	ONLINE() {
	    return this.getToken(MySqlParser.ONLINE, 0);
	};

	OFFLINE() {
	    return this.getToken(MySqlParser.OFFLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterTableAction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterTableAction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterTableAction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_alterSpecification;
        this.level = 0
    }

	alterSpecificationMysql() {
	    return this.getTypedRuleContext(AlterSpecificationMysqlContext,0);
	};

	alterSpecificationInceptor() {
	    return this.getTypedRuleContext(AlterSpecificationInceptorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterSpecification(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterSpecification(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterSpecificationMysqlContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_alterSpecificationMysql;
    }

	alterSpecificationMysqlItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AlterSpecificationMysqlItemContext);
	    } else {
	        return this.getTypedRuleContext(AlterSpecificationMysqlItemContext,i);
	    }
	};

	partitionDefinitions() {
	    return this.getTypedRuleContext(PartitionDefinitionsContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterSpecificationMysql(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterSpecificationMysql(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterSpecificationMysql(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterSpecificationMysqlItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_alterSpecificationMysqlItem;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class AlterByDisableKeysContext extends AlterSpecificationMysqlItemContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DISABLE() {
	    return this.getToken(MySqlParser.DISABLE, 0);
	};

	KEYS() {
	    return this.getToken(MySqlParser.KEYS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByDisableKeys(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByDisableKeys(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterByDisableKeys(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.AlterByDisableKeysContext = AlterByDisableKeysContext;

class AlterByDefaultCharsetContext extends AlterSpecificationMysqlItemContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CHARACTER() {
	    return this.getToken(MySqlParser.CHARACTER, 0);
	};

	SET() {
	    return this.getToken(MySqlParser.SET, 0);
	};

	EQUAL_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.EQUAL_SYMBOL);
	    } else {
	        return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
	    }
	};


	charsetName() {
	    return this.getTypedRuleContext(CharsetNameContext,0);
	};

	DEFAULT() {
	    return this.getToken(MySqlParser.DEFAULT, 0);
	};

	COLLATE() {
	    return this.getToken(MySqlParser.COLLATE, 0);
	};

	collationName() {
	    return this.getTypedRuleContext(CollationNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByDefaultCharset(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByDefaultCharset(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterByDefaultCharset(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.AlterByDefaultCharsetContext = AlterByDefaultCharsetContext;

class AlterByRenameColumnContext extends AlterSpecificationMysqlItemContext {

    constructor(parser, ctx) {
        super(parser);
        this.oldColumn = null; // UidContext;
        this.newColumn = null; // UidContext;
        super.copyFrom(ctx);
    }

	RENAME() {
	    return this.getToken(MySqlParser.RENAME, 0);
	};

	COLUMN() {
	    return this.getToken(MySqlParser.COLUMN, 0);
	};

	TO() {
	    return this.getToken(MySqlParser.TO, 0);
	};

	uid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidContext);
	    } else {
	        return this.getTypedRuleContext(UidContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByRenameColumn(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByRenameColumn(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterByRenameColumn(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.AlterByRenameColumnContext = AlterByRenameColumnContext;

class AlterByConvertCharsetContext extends AlterSpecificationMysqlItemContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CONVERT() {
	    return this.getToken(MySqlParser.CONVERT, 0);
	};

	TO() {
	    return this.getToken(MySqlParser.TO, 0);
	};

	CHARACTER() {
	    return this.getToken(MySqlParser.CHARACTER, 0);
	};

	SET() {
	    return this.getToken(MySqlParser.SET, 0);
	};

	charsetName() {
	    return this.getTypedRuleContext(CharsetNameContext,0);
	};

	COLLATE() {
	    return this.getToken(MySqlParser.COLLATE, 0);
	};

	collationName() {
	    return this.getTypedRuleContext(CollationNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByConvertCharset(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByConvertCharset(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterByConvertCharset(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.AlterByConvertCharsetContext = AlterByConvertCharsetContext;

class AlterByAddPartitionContext extends AlterSpecificationMysqlItemContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ADD() {
	    return this.getToken(MySqlParser.ADD, 0);
	};

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	partitionDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PartitionDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(PartitionDefinitionContext,i);
	    }
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByAddPartition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByAddPartition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterByAddPartition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.AlterByAddPartitionContext = AlterByAddPartitionContext;

class AlterByAddForeignKeyContext extends AlterSpecificationMysqlItemContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null; // UidContext;
        this.indexName = null; // UidContext;
        super.copyFrom(ctx);
    }

	ADD() {
	    return this.getToken(MySqlParser.ADD, 0);
	};

	FOREIGN() {
	    return this.getToken(MySqlParser.FOREIGN, 0);
	};

	KEY() {
	    return this.getToken(MySqlParser.KEY, 0);
	};

	indexColumnNames() {
	    return this.getTypedRuleContext(IndexColumnNamesContext,0);
	};

	referenceDefinition() {
	    return this.getTypedRuleContext(ReferenceDefinitionContext,0);
	};

	CONSTRAINT() {
	    return this.getToken(MySqlParser.CONSTRAINT, 0);
	};

	uid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidContext);
	    } else {
	        return this.getTypedRuleContext(UidContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByAddForeignKey(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByAddForeignKey(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterByAddForeignKey(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.AlterByAddForeignKeyContext = AlterByAddForeignKeyContext;

class AlterByRemovePartitioningContext extends AlterSpecificationMysqlItemContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	REMOVE() {
	    return this.getToken(MySqlParser.REMOVE, 0);
	};

	PARTITIONING() {
	    return this.getToken(MySqlParser.PARTITIONING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByRemovePartitioning(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByRemovePartitioning(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterByRemovePartitioning(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.AlterByRemovePartitioningContext = AlterByRemovePartitioningContext;

class AlterByRenameContext extends AlterSpecificationMysqlItemContext {

    constructor(parser, ctx) {
        super(parser);
        this.renameFormat = null; // Token;
        super.copyFrom(ctx);
    }

	RENAME() {
	    return this.getToken(MySqlParser.RENAME, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	fullId() {
	    return this.getTypedRuleContext(FullIdContext,0);
	};

	TO() {
	    return this.getToken(MySqlParser.TO, 0);
	};

	AS() {
	    return this.getToken(MySqlParser.AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByRename(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByRename(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterByRename(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.AlterByRenameContext = AlterByRenameContext;

class AlterByOptimizePartitionContext extends AlterSpecificationMysqlItemContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	OPTIMIZE() {
	    return this.getToken(MySqlParser.OPTIMIZE, 0);
	};

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	ALL() {
	    return this.getToken(MySqlParser.ALL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByOptimizePartition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByOptimizePartition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterByOptimizePartition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.AlterByOptimizePartitionContext = AlterByOptimizePartitionContext;

class AlterByImportTablespaceContext extends AlterSpecificationMysqlItemContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	IMPORT() {
	    return this.getToken(MySqlParser.IMPORT, 0);
	};

	TABLESPACE() {
	    return this.getToken(MySqlParser.TABLESPACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByImportTablespace(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByImportTablespace(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterByImportTablespace(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.AlterByImportTablespaceContext = AlterByImportTablespaceContext;

class AlterByCoalescePartitionContext extends AlterSpecificationMysqlItemContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	COALESCE() {
	    return this.getToken(MySqlParser.COALESCE, 0);
	};

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByCoalescePartition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByCoalescePartition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterByCoalescePartition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.AlterByCoalescePartitionContext = AlterByCoalescePartitionContext;

class AlterByAddColumnsContext extends AlterSpecificationMysqlItemContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ADD() {
	    return this.getToken(MySqlParser.ADD, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	uid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidContext);
	    } else {
	        return this.getTypedRuleContext(UidContext,i);
	    }
	};

	columnDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(ColumnDefinitionContext,i);
	    }
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	COLUMN() {
	    return this.getToken(MySqlParser.COLUMN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByAddColumns(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByAddColumns(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterByAddColumns(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.AlterByAddColumnsContext = AlterByAddColumnsContext;

class AlterByDropForeignKeyContext extends AlterSpecificationMysqlItemContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DROP() {
	    return this.getToken(MySqlParser.DROP, 0);
	};

	FOREIGN() {
	    return this.getToken(MySqlParser.FOREIGN, 0);
	};

	KEY() {
	    return this.getToken(MySqlParser.KEY, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByDropForeignKey(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByDropForeignKey(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterByDropForeignKey(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.AlterByDropForeignKeyContext = AlterByDropForeignKeyContext;

class AlterByAddCheckTableConstraintContext extends AlterSpecificationMysqlItemContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null; // UidContext;
        super.copyFrom(ctx);
    }

	ADD() {
	    return this.getToken(MySqlParser.ADD, 0);
	};

	CHECK() {
	    return this.getToken(MySqlParser.CHECK, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	CONSTRAINT() {
	    return this.getToken(MySqlParser.CONSTRAINT, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByAddCheckTableConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByAddCheckTableConstraint(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterByAddCheckTableConstraint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.AlterByAddCheckTableConstraintContext = AlterByAddCheckTableConstraintContext;

class AlterByRebuildPartitionContext extends AlterSpecificationMysqlItemContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	REBUILD() {
	    return this.getToken(MySqlParser.REBUILD, 0);
	};

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	ALL() {
	    return this.getToken(MySqlParser.ALL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByRebuildPartition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByRebuildPartition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterByRebuildPartition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.AlterByRebuildPartitionContext = AlterByRebuildPartitionContext;

class AlterByUpgradePartitioningContext extends AlterSpecificationMysqlItemContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	UPGRADE() {
	    return this.getToken(MySqlParser.UPGRADE, 0);
	};

	PARTITIONING() {
	    return this.getToken(MySqlParser.PARTITIONING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByUpgradePartitioning(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByUpgradePartitioning(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterByUpgradePartitioning(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.AlterByUpgradePartitioningContext = AlterByUpgradePartitioningContext;

class AlterByRepairPartitionContext extends AlterSpecificationMysqlItemContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	REPAIR() {
	    return this.getToken(MySqlParser.REPAIR, 0);
	};

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	ALL() {
	    return this.getToken(MySqlParser.ALL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByRepairPartition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByRepairPartition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterByRepairPartition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.AlterByRepairPartitionContext = AlterByRepairPartitionContext;

class AlterByExchangePartitionContext extends AlterSpecificationMysqlItemContext {

    constructor(parser, ctx) {
        super(parser);
        this.validationFormat = null; // Token;
        super.copyFrom(ctx);
    }

	EXCHANGE() {
	    return this.getToken(MySqlParser.EXCHANGE, 0);
	};

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	WITH = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.WITH);
	    } else {
	        return this.getToken(MySqlParser.WITH, i);
	    }
	};


	TABLE() {
	    return this.getToken(MySqlParser.TABLE, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	VALIDATION() {
	    return this.getToken(MySqlParser.VALIDATION, 0);
	};

	WITHOUT() {
	    return this.getToken(MySqlParser.WITHOUT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByExchangePartition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByExchangePartition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterByExchangePartition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.AlterByExchangePartitionContext = AlterByExchangePartitionContext;

class AlterByAddIndexContext extends AlterSpecificationMysqlItemContext {

    constructor(parser, ctx) {
        super(parser);
        this.indexFormat = null; // Token;
        super.copyFrom(ctx);
    }

	ADD() {
	    return this.getToken(MySqlParser.ADD, 0);
	};

	indexColumnNames() {
	    return this.getTypedRuleContext(IndexColumnNamesContext,0);
	};

	INDEX() {
	    return this.getToken(MySqlParser.INDEX, 0);
	};

	KEY() {
	    return this.getToken(MySqlParser.KEY, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	indexType() {
	    return this.getTypedRuleContext(IndexTypeContext,0);
	};

	indexOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IndexOptionContext);
	    } else {
	        return this.getTypedRuleContext(IndexOptionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByAddIndex(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByAddIndex(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterByAddIndex(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.AlterByAddIndexContext = AlterByAddIndexContext;

class AlterByDropColumnContext extends AlterSpecificationMysqlItemContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DROP() {
	    return this.getToken(MySqlParser.DROP, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	COLUMN() {
	    return this.getToken(MySqlParser.COLUMN, 0);
	};

	RESTRICT() {
	    return this.getToken(MySqlParser.RESTRICT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByDropColumn(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByDropColumn(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterByDropColumn(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.AlterByDropColumnContext = AlterByDropColumnContext;

class AlterByImportPartitionContext extends AlterSpecificationMysqlItemContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	IMPORT() {
	    return this.getToken(MySqlParser.IMPORT, 0);
	};

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	TABLESPACE() {
	    return this.getToken(MySqlParser.TABLESPACE, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	ALL() {
	    return this.getToken(MySqlParser.ALL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByImportPartition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByImportPartition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterByImportPartition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.AlterByImportPartitionContext = AlterByImportPartitionContext;

class AlterByChangeDefaultContext extends AlterSpecificationMysqlItemContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ALTER() {
	    return this.getToken(MySqlParser.ALTER, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	SET() {
	    return this.getToken(MySqlParser.SET, 0);
	};

	DEFAULT() {
	    return this.getToken(MySqlParser.DEFAULT, 0);
	};

	defaultValue() {
	    return this.getTypedRuleContext(DefaultValueContext,0);
	};

	DROP() {
	    return this.getToken(MySqlParser.DROP, 0);
	};

	COLUMN() {
	    return this.getToken(MySqlParser.COLUMN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByChangeDefault(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByChangeDefault(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterByChangeDefault(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.AlterByChangeDefaultContext = AlterByChangeDefaultContext;

class AlterByForceContext extends AlterSpecificationMysqlItemContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	FORCE() {
	    return this.getToken(MySqlParser.FORCE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByForce(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByForce(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterByForce(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.AlterByForceContext = AlterByForceContext;

class AlterByDropPartitionContext extends AlterSpecificationMysqlItemContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DROP() {
	    return this.getToken(MySqlParser.DROP, 0);
	};

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByDropPartition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByDropPartition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterByDropPartition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.AlterByDropPartitionContext = AlterByDropPartitionContext;

class AlterByAddSpecialIndexContext extends AlterSpecificationMysqlItemContext {

    constructor(parser, ctx) {
        super(parser);
        this.keyType = null; // Token;
        this.indexFormat = null; // Token;
        super.copyFrom(ctx);
    }

	ADD() {
	    return this.getToken(MySqlParser.ADD, 0);
	};

	indexColumnNames() {
	    return this.getTypedRuleContext(IndexColumnNamesContext,0);
	};

	FULLTEXT() {
	    return this.getToken(MySqlParser.FULLTEXT, 0);
	};

	SPATIAL() {
	    return this.getToken(MySqlParser.SPATIAL, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	indexOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IndexOptionContext);
	    } else {
	        return this.getTypedRuleContext(IndexOptionContext,i);
	    }
	};

	INDEX() {
	    return this.getToken(MySqlParser.INDEX, 0);
	};

	KEY() {
	    return this.getToken(MySqlParser.KEY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByAddSpecialIndex(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByAddSpecialIndex(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterByAddSpecialIndex(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.AlterByAddSpecialIndexContext = AlterByAddSpecialIndexContext;

class AlterByModifyColumnContext extends AlterSpecificationMysqlItemContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	MODIFY() {
	    return this.getToken(MySqlParser.MODIFY, 0);
	};

	uid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidContext);
	    } else {
	        return this.getTypedRuleContext(UidContext,i);
	    }
	};

	columnDefinition() {
	    return this.getTypedRuleContext(ColumnDefinitionContext,0);
	};

	COLUMN() {
	    return this.getToken(MySqlParser.COLUMN, 0);
	};

	FIRST() {
	    return this.getToken(MySqlParser.FIRST, 0);
	};

	AFTER() {
	    return this.getToken(MySqlParser.AFTER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByModifyColumn(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByModifyColumn(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterByModifyColumn(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.AlterByModifyColumnContext = AlterByModifyColumnContext;

class AlterByTableOptionContext extends AlterSpecificationMysqlItemContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	tableOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TableOptionContext);
	    } else {
	        return this.getTypedRuleContext(TableOptionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByTableOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByTableOption(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterByTableOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.AlterByTableOptionContext = AlterByTableOptionContext;

class AlterByDropPrimaryKeyContext extends AlterSpecificationMysqlItemContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DROP() {
	    return this.getToken(MySqlParser.DROP, 0);
	};

	PRIMARY() {
	    return this.getToken(MySqlParser.PRIMARY, 0);
	};

	KEY() {
	    return this.getToken(MySqlParser.KEY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByDropPrimaryKey(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByDropPrimaryKey(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterByDropPrimaryKey(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.AlterByDropPrimaryKeyContext = AlterByDropPrimaryKeyContext;

class AlterByLockContext extends AlterSpecificationMysqlItemContext {

    constructor(parser, ctx) {
        super(parser);
        this.lockType = null; // Token;
        super.copyFrom(ctx);
    }

	LOCK() {
	    return this.getToken(MySqlParser.LOCK, 0);
	};

	DEFAULT() {
	    return this.getToken(MySqlParser.DEFAULT, 0);
	};

	NONE() {
	    return this.getToken(MySqlParser.NONE, 0);
	};

	SHARED() {
	    return this.getToken(MySqlParser.SHARED, 0);
	};

	EXCLUSIVE() {
	    return this.getToken(MySqlParser.EXCLUSIVE, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByLock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByLock(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterByLock(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.AlterByLockContext = AlterByLockContext;

class AlterByDiscardPartitionContext extends AlterSpecificationMysqlItemContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DISCARD() {
	    return this.getToken(MySqlParser.DISCARD, 0);
	};

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	TABLESPACE() {
	    return this.getToken(MySqlParser.TABLESPACE, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	ALL() {
	    return this.getToken(MySqlParser.ALL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByDiscardPartition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByDiscardPartition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterByDiscardPartition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.AlterByDiscardPartitionContext = AlterByDiscardPartitionContext;

class AlterByDiscardTablespaceContext extends AlterSpecificationMysqlItemContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DISCARD() {
	    return this.getToken(MySqlParser.DISCARD, 0);
	};

	TABLESPACE() {
	    return this.getToken(MySqlParser.TABLESPACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByDiscardTablespace(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByDiscardTablespace(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterByDiscardTablespace(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.AlterByDiscardTablespaceContext = AlterByDiscardTablespaceContext;

class AlterByValidateContext extends AlterSpecificationMysqlItemContext {

    constructor(parser, ctx) {
        super(parser);
        this.validationFormat = null; // Token;
        super.copyFrom(ctx);
    }

	VALIDATION() {
	    return this.getToken(MySqlParser.VALIDATION, 0);
	};

	WITHOUT() {
	    return this.getToken(MySqlParser.WITHOUT, 0);
	};

	WITH() {
	    return this.getToken(MySqlParser.WITH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByValidate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByValidate(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterByValidate(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.AlterByValidateContext = AlterByValidateContext;

class AlterByAddPrimaryKeyContext extends AlterSpecificationMysqlItemContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null; // UidContext;
        super.copyFrom(ctx);
    }

	ADD() {
	    return this.getToken(MySqlParser.ADD, 0);
	};

	PRIMARY() {
	    return this.getToken(MySqlParser.PRIMARY, 0);
	};

	KEY() {
	    return this.getToken(MySqlParser.KEY, 0);
	};

	indexColumnNames() {
	    return this.getTypedRuleContext(IndexColumnNamesContext,0);
	};

	CONSTRAINT() {
	    return this.getToken(MySqlParser.CONSTRAINT, 0);
	};

	indexType() {
	    return this.getTypedRuleContext(IndexTypeContext,0);
	};

	indexOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IndexOptionContext);
	    } else {
	        return this.getTypedRuleContext(IndexOptionContext,i);
	    }
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByAddPrimaryKey(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByAddPrimaryKey(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterByAddPrimaryKey(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.AlterByAddPrimaryKeyContext = AlterByAddPrimaryKeyContext;

class AlterByCheckPartitionContext extends AlterSpecificationMysqlItemContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CHECK() {
	    return this.getToken(MySqlParser.CHECK, 0);
	};

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	ALL() {
	    return this.getToken(MySqlParser.ALL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByCheckPartition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByCheckPartition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterByCheckPartition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.AlterByCheckPartitionContext = AlterByCheckPartitionContext;

class AlterByEnableKeysContext extends AlterSpecificationMysqlItemContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ENABLE() {
	    return this.getToken(MySqlParser.ENABLE, 0);
	};

	KEYS() {
	    return this.getToken(MySqlParser.KEYS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByEnableKeys(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByEnableKeys(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterByEnableKeys(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.AlterByEnableKeysContext = AlterByEnableKeysContext;

class AlterByReorganizePartitionContext extends AlterSpecificationMysqlItemContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	REORGANIZE() {
	    return this.getToken(MySqlParser.REORGANIZE, 0);
	};

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	INTO() {
	    return this.getToken(MySqlParser.INTO, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	partitionDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PartitionDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(PartitionDefinitionContext,i);
	    }
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByReorganizePartition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByReorganizePartition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterByReorganizePartition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.AlterByReorganizePartitionContext = AlterByReorganizePartitionContext;

class AlterBySetAlgorithmContext extends AlterSpecificationMysqlItemContext {

    constructor(parser, ctx) {
        super(parser);
        this.algType = null; // Token;
        super.copyFrom(ctx);
    }

	ALGORITHM() {
	    return this.getToken(MySqlParser.ALGORITHM, 0);
	};

	DEFAULT() {
	    return this.getToken(MySqlParser.DEFAULT, 0);
	};

	INPLACE() {
	    return this.getToken(MySqlParser.INPLACE, 0);
	};

	COPY() {
	    return this.getToken(MySqlParser.COPY, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterBySetAlgorithm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterBySetAlgorithm(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterBySetAlgorithm(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.AlterBySetAlgorithmContext = AlterBySetAlgorithmContext;

class AlterByAnalyzePartitionContext extends AlterSpecificationMysqlItemContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ANALYZE() {
	    return this.getToken(MySqlParser.ANALYZE, 0);
	};

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	ALL() {
	    return this.getToken(MySqlParser.ALL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByAnalyzePartition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByAnalyzePartition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterByAnalyzePartition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.AlterByAnalyzePartitionContext = AlterByAnalyzePartitionContext;

class AlterByChangeColumnContext extends AlterSpecificationMysqlItemContext {

    constructor(parser, ctx) {
        super(parser);
        this.oldColumn = null; // UidContext;
        this.newColumn = null; // UidContext;
        this.afterColumn = null; // UidContext;
        super.copyFrom(ctx);
    }

	CHANGE() {
	    return this.getToken(MySqlParser.CHANGE, 0);
	};

	columnDefinition() {
	    return this.getTypedRuleContext(ColumnDefinitionContext,0);
	};

	uid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidContext);
	    } else {
	        return this.getTypedRuleContext(UidContext,i);
	    }
	};

	COLUMN() {
	    return this.getToken(MySqlParser.COLUMN, 0);
	};

	FIRST() {
	    return this.getToken(MySqlParser.FIRST, 0);
	};

	AFTER() {
	    return this.getToken(MySqlParser.AFTER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByChangeColumn(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByChangeColumn(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterByChangeColumn(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.AlterByChangeColumnContext = AlterByChangeColumnContext;

class AlterByAddUniqueKeyContext extends AlterSpecificationMysqlItemContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null; // UidContext;
        this.indexFormat = null; // Token;
        this.indexName = null; // UidContext;
        super.copyFrom(ctx);
    }

	ADD() {
	    return this.getToken(MySqlParser.ADD, 0);
	};

	UNIQUE() {
	    return this.getToken(MySqlParser.UNIQUE, 0);
	};

	indexColumnNames() {
	    return this.getTypedRuleContext(IndexColumnNamesContext,0);
	};

	CONSTRAINT() {
	    return this.getToken(MySqlParser.CONSTRAINT, 0);
	};

	indexType() {
	    return this.getTypedRuleContext(IndexTypeContext,0);
	};

	indexOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IndexOptionContext);
	    } else {
	        return this.getTypedRuleContext(IndexOptionContext,i);
	    }
	};

	uid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidContext);
	    } else {
	        return this.getTypedRuleContext(UidContext,i);
	    }
	};

	INDEX() {
	    return this.getToken(MySqlParser.INDEX, 0);
	};

	KEY() {
	    return this.getToken(MySqlParser.KEY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByAddUniqueKey(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByAddUniqueKey(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterByAddUniqueKey(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.AlterByAddUniqueKeyContext = AlterByAddUniqueKeyContext;

class AlterByTruncatePartitionContext extends AlterSpecificationMysqlItemContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	TRUNCATE() {
	    return this.getToken(MySqlParser.TRUNCATE, 0);
	};

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	ALL() {
	    return this.getToken(MySqlParser.ALL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByTruncatePartition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByTruncatePartition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterByTruncatePartition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.AlterByTruncatePartitionContext = AlterByTruncatePartitionContext;

class AlterByDropIndexContext extends AlterSpecificationMysqlItemContext {

    constructor(parser, ctx) {
        super(parser);
        this.indexFormat = null; // Token;
        super.copyFrom(ctx);
    }

	DROP() {
	    return this.getToken(MySqlParser.DROP, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	INDEX() {
	    return this.getToken(MySqlParser.INDEX, 0);
	};

	KEY() {
	    return this.getToken(MySqlParser.KEY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByDropIndex(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByDropIndex(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterByDropIndex(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.AlterByDropIndexContext = AlterByDropIndexContext;

class AlterByAddColumnContext extends AlterSpecificationMysqlItemContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ADD() {
	    return this.getToken(MySqlParser.ADD, 0);
	};

	uid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidContext);
	    } else {
	        return this.getTypedRuleContext(UidContext,i);
	    }
	};

	columnDefinition() {
	    return this.getTypedRuleContext(ColumnDefinitionContext,0);
	};

	COLUMN() {
	    return this.getToken(MySqlParser.COLUMN, 0);
	};

	FIRST() {
	    return this.getToken(MySqlParser.FIRST, 0);
	};

	AFTER() {
	    return this.getToken(MySqlParser.AFTER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByAddColumn(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByAddColumn(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterByAddColumn(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.AlterByAddColumnContext = AlterByAddColumnContext;

class AlterByOrderContext extends AlterSpecificationMysqlItemContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ORDER() {
	    return this.getToken(MySqlParser.ORDER, 0);
	};

	BY() {
	    return this.getToken(MySqlParser.BY, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByOrder(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByOrder(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterByOrder(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.AlterByOrderContext = AlterByOrderContext;

class AlterSpecificationInceptorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_alterSpecificationInceptor;
        this.newlineTokens = ['OVERWRITE', 'REJECT', 'LIMIT']
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
			this.newlineTokens = ctx.newlineTokens;
		}

}


class AlterByErrorLogContext extends AlterSpecificationInceptorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SET() {
	    return this.getToken(MySqlParser.SET, 0);
	};

	ERRORS() {
	    return this.getToken(MySqlParser.ERRORS, 0);
	};

	LOG() {
	    return this.getToken(MySqlParser.LOG, 0);
	};

	intoTable() {
	    return this.getTypedRuleContext(IntoTableContext,0);
	};

	OVERWRITE() {
	    return this.getToken(MySqlParser.OVERWRITE, 0);
	};

	REJECT() {
	    return this.getToken(MySqlParser.REJECT, 0);
	};

	LIMIT() {
	    return this.getToken(MySqlParser.LIMIT, 0);
	};

	constant() {
	    return this.getTypedRuleContext(ConstantContext,0);
	};

	ON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.ON);
	    } else {
	        return this.getToken(MySqlParser.ON, i);
	    }
	};


	OFF = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.OFF);
	    } else {
	        return this.getToken(MySqlParser.OFF, i);
	    }
	};


	ROWS() {
	    return this.getToken(MySqlParser.ROWS, 0);
	};

	PERCENT() {
	    return this.getToken(MySqlParser.PERCENT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByErrorLog(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByErrorLog(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterByErrorLog(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.AlterByErrorLogContext = AlterByErrorLogContext;

class AlterBySetLocationContext extends AlterSpecificationInceptorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	setLocationDefinition() {
	    return this.getTypedRuleContext(SetLocationDefinitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterBySetLocation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterBySetLocation(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterBySetLocation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.AlterBySetLocationContext = AlterBySetLocationContext;

class AlterByAddConstraintContext extends AlterSpecificationInceptorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	alterSpecificationConstraint() {
	    return this.getTypedRuleContext(AlterSpecificationConstraintContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByAddConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByAddConstraint(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterByAddConstraint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.AlterByAddConstraintContext = AlterByAddConstraintContext;

class AlterBySkewedContext extends AlterSpecificationInceptorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	alterSpecificationSkewed() {
	    return this.getTypedRuleContext(AlterSpecificationSkewedContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterBySkewed(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterBySkewed(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterBySkewed(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.AlterBySkewedContext = AlterBySkewedContext;

class AlterByPartitionContext extends AlterSpecificationInceptorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	alterSpecificationPartition() {
	    return this.getTypedRuleContext(AlterSpecificationPartitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByPartition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByPartition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterByPartition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.AlterByPartitionContext = AlterByPartitionContext;

class AlterByRenameTableContext extends AlterSpecificationInceptorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	RENAME() {
	    return this.getToken(MySqlParser.RENAME, 0);
	};

	TO() {
	    return this.getToken(MySqlParser.TO, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByRenameTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByRenameTable(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterByRenameTable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.AlterByRenameTableContext = AlterByRenameTableContext;

class AlterBySetTbpropertiesContext extends AlterSpecificationInceptorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SET() {
	    return this.getToken(MySqlParser.SET, 0);
	};

	TBLPROPERTIES() {
	    return this.getToken(MySqlParser.TBLPROPERTIES, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	keyValueProperties() {
	    return this.getTypedRuleContext(KeyValuePropertiesContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	SERDEPROPERTIES() {
	    return this.getToken(MySqlParser.SERDEPROPERTIES, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterBySetTbproperties(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterBySetTbproperties(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterBySetTbproperties(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.AlterBySetTbpropertiesContext = AlterBySetTbpropertiesContext;

class AlterByColumnContext extends AlterSpecificationInceptorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	alterSpecificationColumn() {
	    return this.getTypedRuleContext(AlterSpecificationColumnContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByColumn(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByColumn(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterByColumn(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.AlterByColumnContext = AlterByColumnContext;

class AlterByPlaceholerContext extends AlterSpecificationInceptorContext {

    constructor(parser, ctx) {
        super(parser);
        this._alterSpecificationAnchor = null; // AlterSpecificationAnchorContext;
        super.copyFrom(ctx);
    }

	alterSpecificationAnchor() {
	    return this.getTypedRuleContext(AlterSpecificationAnchorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByPlaceholer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByPlaceholer(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterByPlaceholer(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.AlterByPlaceholerContext = AlterByPlaceholerContext;

class AlterByUnSetTbpropertiesContext extends AlterSpecificationInceptorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	UNSET() {
	    return this.getToken(MySqlParser.UNSET, 0);
	};

	TBLPROPERTIES() {
	    return this.getToken(MySqlParser.TBLPROPERTIES, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByUnSetTbproperties(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByUnSetTbproperties(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterByUnSetTbproperties(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.AlterByUnSetTbpropertiesContext = AlterByUnSetTbpropertiesContext;

class IntoTableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_intoTable;
    }

	INTO() {
	    return this.getToken(MySqlParser.INTO, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterIntoTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitIntoTable(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitIntoTable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterSpecificationAnchorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_alterSpecificationAnchor;
    }

	placeholder() {
	    return this.getTypedRuleContext(PlaceholderContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterSpecificationAnchor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterSpecificationAnchor(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterSpecificationAnchor(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterSpecificationColumnContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_alterSpecificationColumn;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class AlterSpecificationColumnDeleteContext extends AlterSpecificationColumnContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DELETE() {
	    return this.getToken(MySqlParser.DELETE, 0);
	};

	COLUMNS() {
	    return this.getToken(MySqlParser.COLUMNS, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	restrictOrCascade() {
	    return this.getTypedRuleContext(RestrictOrCascadeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterSpecificationColumnDelete(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterSpecificationColumnDelete(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterSpecificationColumnDelete(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.AlterSpecificationColumnDeleteContext = AlterSpecificationColumnDeleteContext;

class AlterSpecificationColumnRenameContext extends AlterSpecificationColumnContext {

    constructor(parser, ctx) {
        super(parser);
        this.column = null; // UidContext;
        this._createColumnDeclaration = null; // CreateColumnDeclarationContext;
        super.copyFrom(ctx);
    }

	CHANGE() {
	    return this.getToken(MySqlParser.CHANGE, 0);
	};

	COLUMN() {
	    return this.getToken(MySqlParser.COLUMN, 0);
	};

	uid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidContext);
	    } else {
	        return this.getTypedRuleContext(UidContext,i);
	    }
	};

	createColumnDeclaration() {
	    return this.getTypedRuleContext(CreateColumnDeclarationContext,0);
	};

	restrictOrCascade() {
	    return this.getTypedRuleContext(RestrictOrCascadeContext,0);
	};

	FIRST() {
	    return this.getToken(MySqlParser.FIRST, 0);
	};

	LAST() {
	    return this.getToken(MySqlParser.LAST, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterSpecificationColumnRename(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterSpecificationColumnRename(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterSpecificationColumnRename(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.AlterSpecificationColumnRenameContext = AlterSpecificationColumnRenameContext;

class AlterSpecificationColumnAddContext extends AlterSpecificationColumnContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	COLUMNS() {
	    return this.getToken(MySqlParser.COLUMNS, 0);
	};

	createDefinitions() {
	    return this.getTypedRuleContext(CreateDefinitionsContext,0);
	};

	ADD() {
	    return this.getToken(MySqlParser.ADD, 0);
	};

	REPLACE() {
	    return this.getToken(MySqlParser.REPLACE, 0);
	};

	restrictOrCascade() {
	    return this.getTypedRuleContext(RestrictOrCascadeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterSpecificationColumnAdd(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterSpecificationColumnAdd(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterSpecificationColumnAdd(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.AlterSpecificationColumnAddContext = AlterSpecificationColumnAddContext;

class AlterSpecificationPartitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_alterSpecificationPartition;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class AlterSpecificationPartitionArchiveContext extends AlterSpecificationPartitionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	TOUCH() {
	    return this.getToken(MySqlParser.TOUCH, 0);
	};

	ARCHIVE() {
	    return this.getToken(MySqlParser.ARCHIVE, 0);
	};

	UNARCHIVE() {
	    return this.getToken(MySqlParser.UNARCHIVE, 0);
	};

	partitionSpec = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PartitionSpecContext);
	    } else {
	        return this.getTypedRuleContext(PartitionSpecContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterSpecificationPartitionArchive(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterSpecificationPartitionArchive(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterSpecificationPartitionArchive(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.AlterSpecificationPartitionArchiveContext = AlterSpecificationPartitionArchiveContext;

class AlterSpecificationPartitionColumnContext extends AlterSpecificationPartitionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	COLUMN() {
	    return this.getToken(MySqlParser.COLUMN, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	createDefinition() {
	    return this.getTypedRuleContext(CreateDefinitionContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterSpecificationPartitionColumn(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterSpecificationPartitionColumn(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterSpecificationPartitionColumn(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.AlterSpecificationPartitionColumnContext = AlterSpecificationPartitionColumnContext;

class AlterSpecificationPartitionOptionsContext extends AlterSpecificationPartitionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	alterTablePartitionOption() {
	    return this.getTypedRuleContext(AlterTablePartitionOptionContext,0);
	};

	partitionSpec() {
	    return this.getTypedRuleContext(PartitionSpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterSpecificationPartitionOptions(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterSpecificationPartitionOptions(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterSpecificationPartitionOptions(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.AlterSpecificationPartitionOptionsContext = AlterSpecificationPartitionOptionsContext;

class AlterSpecificationPartitionAddContext extends AlterSpecificationPartitionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ADD() {
	    return this.getToken(MySqlParser.ADD, 0);
	};

	ifNotExists() {
	    return this.getTypedRuleContext(IfNotExistsContext,0);
	};

	partitionPlus = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PartitionPlusContext);
	    } else {
	        return this.getTypedRuleContext(PartitionPlusContext,i);
	    }
	};

	rangePartition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RangePartitionContext);
	    } else {
	        return this.getTypedRuleContext(RangePartitionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterSpecificationPartitionAdd(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterSpecificationPartitionAdd(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterSpecificationPartitionAdd(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.AlterSpecificationPartitionAddContext = AlterSpecificationPartitionAddContext;

class AlterSpecificationPartitionDropContext extends AlterSpecificationPartitionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DROP() {
	    return this.getToken(MySqlParser.DROP, 0);
	};

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	dropPartitionAtom = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DropPartitionAtomContext);
	    } else {
	        return this.getTypedRuleContext(DropPartitionAtomContext,i);
	    }
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	IGNORE() {
	    return this.getToken(MySqlParser.IGNORE, 0);
	};

	PROTECTION() {
	    return this.getToken(MySqlParser.PROTECTION, 0);
	};

	PURGE() {
	    return this.getToken(MySqlParser.PURGE, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterSpecificationPartitionDrop(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterSpecificationPartitionDrop(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterSpecificationPartitionDrop(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.AlterSpecificationPartitionDropContext = AlterSpecificationPartitionDropContext;

class AlterSpecificationPartitionExchangeContext extends AlterSpecificationPartitionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	EXCHANGE() {
	    return this.getToken(MySqlParser.EXCHANGE, 0);
	};

	partitionSpec() {
	    return this.getTypedRuleContext(PartitionSpecContext,0);
	};

	WITH() {
	    return this.getToken(MySqlParser.WITH, 0);
	};

	TABLE() {
	    return this.getToken(MySqlParser.TABLE, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterSpecificationPartitionExchange(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterSpecificationPartitionExchange(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterSpecificationPartitionExchange(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.AlterSpecificationPartitionExchangeContext = AlterSpecificationPartitionExchangeContext;

class AlterTablePartitionOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_alterTablePartitionOption;
        this.column = null; // UidContext
    }

	SET() {
	    return this.getToken(MySqlParser.SET, 0);
	};

	FILEFORMAT() {
	    return this.getToken(MySqlParser.FILEFORMAT, 0);
	};

	fileFormat() {
	    return this.getTypedRuleContext(FileFormatContext,0);
	};

	setLocationDefinition() {
	    return this.getTypedRuleContext(SetLocationDefinitionContext,0);
	};

	ENABLE() {
	    return this.getToken(MySqlParser.ENABLE, 0);
	};

	DISABLE() {
	    return this.getToken(MySqlParser.DISABLE, 0);
	};

	OFFLINE() {
	    return this.getToken(MySqlParser.OFFLINE, 0);
	};

	READONLY() {
	    return this.getToken(MySqlParser.READONLY, 0);
	};

	NO_DROP() {
	    return this.getToken(MySqlParser.NO_DROP, 0);
	};

	CASCADE() {
	    return this.getToken(MySqlParser.CASCADE, 0);
	};

	CONCATENATE() {
	    return this.getToken(MySqlParser.CONCATENATE, 0);
	};

	setSerde() {
	    return this.getTypedRuleContext(SetSerdeContext,0);
	};

	SERDEPROPERTIES() {
	    return this.getToken(MySqlParser.SERDEPROPERTIES, 0);
	};

	keyOrValueProperties() {
	    return this.getTypedRuleContext(KeyOrValuePropertiesContext,0);
	};

	RENAME() {
	    return this.getToken(MySqlParser.RENAME, 0);
	};

	TO() {
	    return this.getToken(MySqlParser.TO, 0);
	};

	partitionSpec() {
	    return this.getTypedRuleContext(PartitionSpecContext,0);
	};

	intoBuckets() {
	    return this.getTypedRuleContext(IntoBucketsContext,0);
	};

	NOT() {
	    return this.getToken(MySqlParser.NOT, 0);
	};

	CLUSTERED() {
	    return this.getToken(MySqlParser.CLUSTERED, 0);
	};

	SORTED() {
	    return this.getToken(MySqlParser.SORTED, 0);
	};

	tableBuckets() {
	    return this.getTypedRuleContext(TableBucketsContext,0);
	};

	COMPACT() {
	    return this.getToken(MySqlParser.COMPACT, 0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	AND() {
	    return this.getToken(MySqlParser.AND, 0);
	};

	WAIT() {
	    return this.getToken(MySqlParser.WAIT, 0);
	};

	FOR() {
	    return this.getToken(MySqlParser.FOR, 0);
	};

	UPDATE() {
	    return this.getToken(MySqlParser.UPDATE, 0);
	};

	STATISTICS() {
	    return this.getToken(MySqlParser.STATISTICS, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	COLUMNS() {
	    return this.getToken(MySqlParser.COLUMNS, 0);
	};

	commentClause() {
	    return this.getTypedRuleContext(CommentClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterTablePartitionOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterTablePartitionOption(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterTablePartitionOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterSpecificationSkewedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_alterSpecificationSkewed;
    }

	tableSkewed() {
	    return this.getTypedRuleContext(TableSkewedContext,0);
	};

	NOT() {
	    return this.getToken(MySqlParser.NOT, 0);
	};

	SKEWED() {
	    return this.getToken(MySqlParser.SKEWED, 0);
	};

	STORED() {
	    return this.getToken(MySqlParser.STORED, 0);
	};

	AS() {
	    return this.getToken(MySqlParser.AS, 0);
	};

	DIRECTORIES() {
	    return this.getToken(MySqlParser.DIRECTORIES, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterSpecificationSkewed(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterSpecificationSkewed(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterSpecificationSkewed(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterSpecificationConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_alterSpecificationConstraint;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class AlterSpecificationConstraintPrimaryKeyContext extends AlterSpecificationConstraintContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ADD() {
	    return this.getToken(MySqlParser.ADD, 0);
	};

	PRIMARY() {
	    return this.getToken(MySqlParser.PRIMARY, 0);
	};

	KEY() {
	    return this.getToken(MySqlParser.KEY, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	constraintOpts() {
	    return this.getTypedRuleContext(ConstraintOptsContext,0);
	};

	CONSTRAINT() {
	    return this.getToken(MySqlParser.CONSTRAINT, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterSpecificationConstraintPrimaryKey(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterSpecificationConstraintPrimaryKey(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterSpecificationConstraintPrimaryKey(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.AlterSpecificationConstraintPrimaryKeyContext = AlterSpecificationConstraintPrimaryKeyContext;

class AlterSpecificationConstraintDropContext extends AlterSpecificationConstraintContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DROP() {
	    return this.getToken(MySqlParser.DROP, 0);
	};

	CONSTRAINT() {
	    return this.getToken(MySqlParser.CONSTRAINT, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterSpecificationConstraintDrop(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterSpecificationConstraintDrop(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterSpecificationConstraintDrop(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.AlterSpecificationConstraintDropContext = AlterSpecificationConstraintDropContext;

class AlterSpecificationConstraintForeignKeyContext extends AlterSpecificationConstraintContext {

    constructor(parser, ctx) {
        super(parser);
        this.columns = null; // UidListContext;
        this._foreignKeyReferences = null; // ForeignKeyReferencesContext;
        super.copyFrom(ctx);
    }

	ADD() {
	    return this.getToken(MySqlParser.ADD, 0);
	};

	FOREIGN() {
	    return this.getToken(MySqlParser.FOREIGN, 0);
	};

	KEY() {
	    return this.getToken(MySqlParser.KEY, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	constraintOpts() {
	    return this.getTypedRuleContext(ConstraintOptsContext,0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	CONSTRAINT() {
	    return this.getToken(MySqlParser.CONSTRAINT, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	foreignKeyReferences() {
	    return this.getTypedRuleContext(ForeignKeyReferencesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterSpecificationConstraintForeignKey(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterSpecificationConstraintForeignKey(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterSpecificationConstraintForeignKey(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.AlterSpecificationConstraintForeignKeyContext = AlterSpecificationConstraintForeignKeyContext;

class ForeignKeyReferencesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_foreignKeyReferences;
        this.refs = null; // UidListContext
        this._uidList = null; // UidListContext
    }

	REFERENCES() {
	    return this.getToken(MySqlParser.REFERENCES, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterForeignKeyReferences(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitForeignKeyReferences(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitForeignKeyReferences(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RestrictOrCascadeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_restrictOrCascade;
    }

	RESTRICT() {
	    return this.getToken(MySqlParser.RESTRICT, 0);
	};

	CASCADE() {
	    return this.getToken(MySqlParser.CASCADE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterRestrictOrCascade(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitRestrictOrCascade(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitRestrictOrCascade(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropDatabaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_dropDatabase;
        this.dbFormat = null; // Token
    }

	DROP() {
	    return this.getToken(MySqlParser.DROP, 0);
	};

	databaseName() {
	    return this.getTypedRuleContext(DatabaseNameContext,0);
	};

	DATABASE() {
	    return this.getToken(MySqlParser.DATABASE, 0);
	};

	SCHEMA() {
	    return this.getToken(MySqlParser.SCHEMA, 0);
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	restrictOrCascade() {
	    return this.getTypedRuleContext(RestrictOrCascadeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDropDatabase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDropDatabase(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitDropDatabase(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropEventContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_dropEvent;
    }

	DROP() {
	    return this.getToken(MySqlParser.DROP, 0);
	};

	EVENT() {
	    return this.getToken(MySqlParser.EVENT, 0);
	};

	fullId() {
	    return this.getTypedRuleContext(FullIdContext,0);
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDropEvent(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDropEvent(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitDropEvent(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropIndexContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_dropIndex;
        this.intimeAction = null; // Token
        this.algType = null; // Token
        this.lockType = null; // Token
    }

	DROP() {
	    return this.getToken(MySqlParser.DROP, 0);
	};

	INDEX() {
	    return this.getToken(MySqlParser.INDEX, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	ON() {
	    return this.getToken(MySqlParser.ON, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	ALGORITHM() {
	    return this.getToken(MySqlParser.ALGORITHM, 0);
	};

	LOCK() {
	    return this.getToken(MySqlParser.LOCK, 0);
	};

	ONLINE() {
	    return this.getToken(MySqlParser.ONLINE, 0);
	};

	OFFLINE() {
	    return this.getToken(MySqlParser.OFFLINE, 0);
	};

	DEFAULT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.DEFAULT);
	    } else {
	        return this.getToken(MySqlParser.DEFAULT, i);
	    }
	};


	INPLACE() {
	    return this.getToken(MySqlParser.INPLACE, 0);
	};

	COPY() {
	    return this.getToken(MySqlParser.COPY, 0);
	};

	NONE() {
	    return this.getToken(MySqlParser.NONE, 0);
	};

	SHARED() {
	    return this.getToken(MySqlParser.SHARED, 0);
	};

	EXCLUSIVE() {
	    return this.getToken(MySqlParser.EXCLUSIVE, 0);
	};

	EQUAL_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.EQUAL_SYMBOL);
	    } else {
	        return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDropIndex(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDropIndex(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitDropIndex(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropLogfileGroupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_dropLogfileGroup;
    }

	DROP() {
	    return this.getToken(MySqlParser.DROP, 0);
	};

	LOGFILE() {
	    return this.getToken(MySqlParser.LOGFILE, 0);
	};

	GROUP() {
	    return this.getToken(MySqlParser.GROUP, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	ENGINE() {
	    return this.getToken(MySqlParser.ENGINE, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	engineName() {
	    return this.getTypedRuleContext(EngineNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDropLogfileGroup(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDropLogfileGroup(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitDropLogfileGroup(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropProcedureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_dropProcedure;
    }

	DROP() {
	    return this.getToken(MySqlParser.DROP, 0);
	};

	PROCEDURE() {
	    return this.getToken(MySqlParser.PROCEDURE, 0);
	};

	procName() {
	    return this.getTypedRuleContext(ProcNameContext,0);
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDropProcedure(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDropProcedure(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitDropProcedure(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_dropFunction;
    }

	DROP() {
	    return this.getToken(MySqlParser.DROP, 0);
	};

	FUNCTION() {
	    return this.getToken(MySqlParser.FUNCTION, 0);
	};

	funcName() {
	    return this.getTypedRuleContext(FuncNameContext,0);
	};

	functionType() {
	    return this.getTypedRuleContext(FunctionTypeContext,0);
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDropFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDropFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitDropFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropServerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_dropServer;
    }

	DROP() {
	    return this.getToken(MySqlParser.DROP, 0);
	};

	SERVER() {
	    return this.getToken(MySqlParser.SERVER, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDropServer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDropServer(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitDropServer(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropTableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_dropTable;
        this.dropType = null; // RestrictOrCascadeContext
    }

	DROP() {
	    return this.getToken(MySqlParser.DROP, 0);
	};

	TABLE() {
	    return this.getToken(MySqlParser.TABLE, 0);
	};

	tables() {
	    return this.getTypedRuleContext(TablesContext,0);
	};

	TEMPORARY() {
	    return this.getToken(MySqlParser.TEMPORARY, 0);
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	restrictOrCascade() {
	    return this.getTypedRuleContext(RestrictOrCascadeContext,0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	PURGE() {
	    return this.getToken(MySqlParser.PURGE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDropTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDropTable(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitDropTable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropTablespaceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_dropTablespace;
    }

	DROP() {
	    return this.getToken(MySqlParser.DROP, 0);
	};

	TABLESPACE() {
	    return this.getToken(MySqlParser.TABLESPACE, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	ENGINE() {
	    return this.getToken(MySqlParser.ENGINE, 0);
	};

	engineName() {
	    return this.getTypedRuleContext(EngineNameContext,0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDropTablespace(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDropTablespace(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitDropTablespace(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropTriggerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_dropTrigger;
    }

	DROP() {
	    return this.getToken(MySqlParser.DROP, 0);
	};

	TRIGGER() {
	    return this.getToken(MySqlParser.TRIGGER, 0);
	};

	fullId() {
	    return this.getTypedRuleContext(FullIdContext,0);
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDropTrigger(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDropTrigger(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitDropTrigger(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropViewContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_dropView;
        this.dropType = null; // RestrictOrCascadeContext
    }

	DROP() {
	    return this.getToken(MySqlParser.DROP, 0);
	};

	VIEW() {
	    return this.getToken(MySqlParser.VIEW, 0);
	};

	viewName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ViewNameContext);
	    } else {
	        return this.getTypedRuleContext(ViewNameContext,i);
	    }
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	restrictOrCascade() {
	    return this.getTypedRuleContext(RestrictOrCascadeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDropView(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDropView(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitDropView(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FunctionTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_functionType;
    }

	TEMPORARY() {
	    return this.getToken(MySqlParser.TEMPORARY, 0);
	};

	PERMANENT() {
	    return this.getToken(MySqlParser.PERMANENT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterFunctionType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitFunctionType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitFunctionType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RenameTableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_renameTable;
        this.level = 0
    }

	RENAME() {
	    return this.getToken(MySqlParser.RENAME, 0);
	};

	TABLE() {
	    return this.getToken(MySqlParser.TABLE, 0);
	};

	renameTableClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RenameTableClauseContext);
	    } else {
	        return this.getTypedRuleContext(RenameTableClauseContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterRenameTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitRenameTable(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitRenameTable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RenameTableClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_renameTableClause;
        this._TO = null; // Token
    }

	tableName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TableNameContext);
	    } else {
	        return this.getTypedRuleContext(TableNameContext,i);
	    }
	};

	TO() {
	    return this.getToken(MySqlParser.TO, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterRenameTableClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitRenameTableClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitRenameTableClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TruncateTableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_truncateTable;
    }

	TRUNCATE() {
	    return this.getToken(MySqlParser.TRUNCATE, 0);
	};

	TABLE() {
	    return this.getToken(MySqlParser.TABLE, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	partitionSpec() {
	    return this.getTypedRuleContext(PartitionSpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTruncateTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTruncateTable(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitTruncateTable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CallStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_callStatement;
    }

	CALL() {
	    return this.getToken(MySqlParser.CALL, 0);
	};

	fullId() {
	    return this.getTypedRuleContext(FullIdContext,0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	constants() {
	    return this.getTypedRuleContext(ConstantsContext,0);
	};

	expressions() {
	    return this.getTypedRuleContext(ExpressionsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCallStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCallStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitCallStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DeleteStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_deleteStatement;
    }

	singleDeleteStatement() {
	    return this.getTypedRuleContext(SingleDeleteStatementContext,0);
	};

	multipleDeleteStatement() {
	    return this.getTypedRuleContext(MultipleDeleteStatementContext,0);
	};

	deleteStatementInceptor() {
	    return this.getTypedRuleContext(DeleteStatementInceptorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDeleteStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDeleteStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitDeleteStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DoStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_doStatement;
    }

	DO() {
	    return this.getToken(MySqlParser.DO, 0);
	};

	expressions() {
	    return this.getTypedRuleContext(ExpressionsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDoStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDoStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitDoStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class HandlerStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_handlerStatement;
    }

	handlerOpenStatement() {
	    return this.getTypedRuleContext(HandlerOpenStatementContext,0);
	};

	handlerReadIndexStatement() {
	    return this.getTypedRuleContext(HandlerReadIndexStatementContext,0);
	};

	handlerReadStatement() {
	    return this.getTypedRuleContext(HandlerReadStatementContext,0);
	};

	handlerCloseStatement() {
	    return this.getTypedRuleContext(HandlerCloseStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterHandlerStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitHandlerStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitHandlerStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InsertStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_insertStatement;
        this.columns = null; // ColumnUidsContext
    }

	INSERT() {
	    return this.getToken(MySqlParser.INSERT, 0);
	};

	insertAction() {
	    return this.getTypedRuleContext(InsertActionContext,0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	insertStatementValue() {
	    return this.getTypedRuleContext(InsertStatementValueContext,0);
	};

	setUpdatedElements() {
	    return this.getTypedRuleContext(SetUpdatedElementsContext,0);
	};

	insertPartitionSpec() {
	    return this.getTypedRuleContext(InsertPartitionSpecContext,0);
	};

	insertOnDuplicate() {
	    return this.getTypedRuleContext(InsertOnDuplicateContext,0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	columnUids() {
	    return this.getTypedRuleContext(ColumnUidsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterInsertStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitInsertStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitInsertStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FromInsertStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_fromInsertStatement;
    }

	FROM() {
	    return this.getToken(MySqlParser.FROM, 0);
	};

	tableSources() {
	    return this.getTypedRuleContext(TableSourcesContext,0);
	};

	fromInsertStatementInsert = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FromInsertStatementInsertContext);
	    } else {
	        return this.getTypedRuleContext(FromInsertStatementInsertContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterFromInsertStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitFromInsertStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitFromInsertStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FromInsertStatementInsertContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_fromInsertStatementInsert;
        this._fromInsertStatementSelect = null; // FromInsertStatementSelectContext
        this._insertTypeAnchor = null; // InsertTypeAnchorContext
    }

	INSERT() {
	    return this.getToken(MySqlParser.INSERT, 0);
	};

	insertAction() {
	    return this.getTypedRuleContext(InsertActionContext,0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	partitionSpec() {
	    return this.getTypedRuleContext(PartitionSpecContext,0);
	};

	ifNotExists() {
	    return this.getTypedRuleContext(IfNotExistsContext,0);
	};

	fromInsertStatementSelect() {
	    return this.getTypedRuleContext(FromInsertStatementSelectContext,0);
	};

	insertTypeAnchor() {
	    return this.getTypedRuleContext(InsertTypeAnchorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterFromInsertStatementInsert(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitFromInsertStatementInsert(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitFromInsertStatementInsert(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FromInsertStatementSelectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_fromInsertStatementSelect;
        this.level = 0
    }

	SELECT() {
	    return this.getToken(MySqlParser.SELECT, 0);
	};

	selectElements() {
	    return this.getTypedRuleContext(SelectElementsContext,0);
	};

	selectSpec() {
	    return this.getTypedRuleContext(SelectSpecContext,0);
	};

	whereExpressionOptional() {
	    return this.getTypedRuleContext(WhereExpressionOptionalContext,0);
	};

	hierarchyClause() {
	    return this.getTypedRuleContext(HierarchyClauseContext,0);
	};

	groupByClause() {
	    return this.getTypedRuleContext(GroupByClauseContext,0);
	};

	havingClause() {
	    return this.getTypedRuleContext(HavingClauseContext,0);
	};

	orderByClause() {
	    return this.getTypedRuleContext(OrderByClauseContext,0);
	};

	clusterByClause() {
	    return this.getTypedRuleContext(ClusterByClauseContext,0);
	};

	distributeByClause() {
	    return this.getTypedRuleContext(DistributeByClauseContext,0);
	};

	sortByClause() {
	    return this.getTypedRuleContext(SortByClauseContext,0);
	};

	limitClause() {
	    return this.getTypedRuleContext(LimitClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterFromInsertStatementSelect(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitFromInsertStatementSelect(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitFromInsertStatementSelect(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InsertTypeAnchorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_insertTypeAnchor;
    }

	placeholder() {
	    return this.getTypedRuleContext(PlaceholderContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterInsertTypeAnchor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitInsertTypeAnchor(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitInsertTypeAnchor(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InsertFileContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_insertFile;
        this.filename = null; // StringLiteralContext
    }

	INSERT() {
	    return this.getToken(MySqlParser.INSERT, 0);
	};

	OVERWRITE() {
	    return this.getToken(MySqlParser.OVERWRITE, 0);
	};

	selectStatement() {
	    return this.getTypedRuleContext(SelectStatementContext,0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	DIRECTORY() {
	    return this.getToken(MySqlParser.DIRECTORY, 0);
	};

	LOCAL() {
	    return this.getToken(MySqlParser.LOCAL, 0);
	};

	rowFormatDelimited() {
	    return this.getTypedRuleContext(RowFormatDelimitedContext,0);
	};

	fileStore() {
	    return this.getTypedRuleContext(FileStoreContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterInsertFile(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitInsertFile(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitInsertFile(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LoadDataStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_loadDataStatement;
    }

	loadDataMysql() {
	    return this.getTypedRuleContext(LoadDataMysqlContext,0);
	};

	loadDataInceptor() {
	    return this.getTypedRuleContext(LoadDataInceptorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLoadDataStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLoadDataStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitLoadDataStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LoadDataMysqlContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_loadDataMysql;
        this.newlineTokens = ['INTO', 'PARTITION', 'CHARACTER', 'FIELDS', 'COLUMNS', 'LINES']
        this.priority = null; // Token
        this.filename = null; // Token
        this.violation = null; // Token
        this.charset = null; // CharsetNameContext
        this.fieldsFormat = null; // Token
        this.linesFormat = null; // Token
    }

	LOAD() {
	    return this.getToken(MySqlParser.LOAD, 0);
	};

	DATA() {
	    return this.getToken(MySqlParser.DATA, 0);
	};

	INFILE() {
	    return this.getToken(MySqlParser.INFILE, 0);
	};

	INTO() {
	    return this.getToken(MySqlParser.INTO, 0);
	};

	TABLE() {
	    return this.getToken(MySqlParser.TABLE, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	LOCAL() {
	    return this.getToken(MySqlParser.LOCAL, 0);
	};

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	LR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.LR_BRACKET);
	    } else {
	        return this.getToken(MySqlParser.LR_BRACKET, i);
	    }
	};


	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	RR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.RR_BRACKET);
	    } else {
	        return this.getToken(MySqlParser.RR_BRACKET, i);
	    }
	};


	CHARACTER() {
	    return this.getToken(MySqlParser.CHARACTER, 0);
	};

	SET() {
	    return this.getToken(MySqlParser.SET, 0);
	};

	LINES = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.LINES);
	    } else {
	        return this.getToken(MySqlParser.LINES, i);
	    }
	};


	IGNORE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.IGNORE);
	    } else {
	        return this.getToken(MySqlParser.IGNORE, i);
	    }
	};


	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	assignmentField = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AssignmentFieldContext);
	    } else {
	        return this.getTypedRuleContext(AssignmentFieldContext,i);
	    }
	};

	setUpdatedElements() {
	    return this.getTypedRuleContext(SetUpdatedElementsContext,0);
	};

	charsetName() {
	    return this.getTypedRuleContext(CharsetNameContext,0);
	};

	LOW_PRIORITY() {
	    return this.getToken(MySqlParser.LOW_PRIORITY, 0);
	};

	CONCURRENT() {
	    return this.getToken(MySqlParser.CONCURRENT, 0);
	};

	REPLACE() {
	    return this.getToken(MySqlParser.REPLACE, 0);
	};

	FIELDS() {
	    return this.getToken(MySqlParser.FIELDS, 0);
	};

	COLUMNS() {
	    return this.getToken(MySqlParser.COLUMNS, 0);
	};

	ROWS() {
	    return this.getToken(MySqlParser.ROWS, 0);
	};

	selectFieldsInto = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SelectFieldsIntoContext);
	    } else {
	        return this.getTypedRuleContext(SelectFieldsIntoContext,i);
	    }
	};

	selectLinesInto = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SelectLinesIntoContext);
	    } else {
	        return this.getTypedRuleContext(SelectLinesIntoContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLoadDataMysql(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLoadDataMysql(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitLoadDataMysql(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LoadDataInceptorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_loadDataInceptor;
        this.path = null; // StringLiteralContext
    }

	LOAD() {
	    return this.getToken(MySqlParser.LOAD, 0);
	};

	DATA() {
	    return this.getToken(MySqlParser.DATA, 0);
	};

	INPATH() {
	    return this.getToken(MySqlParser.INPATH, 0);
	};

	loadDataInceptorTable() {
	    return this.getTypedRuleContext(LoadDataInceptorTableContext,0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	LOCAL() {
	    return this.getToken(MySqlParser.LOCAL, 0);
	};

	partitionSpec() {
	    return this.getTypedRuleContext(PartitionSpecContext,0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLoadDataInceptor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLoadDataInceptor(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitLoadDataInceptor(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LoadDataInceptorTableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_loadDataInceptorTable;
        this.level = 0
    }

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	INTO() {
	    return this.getToken(MySqlParser.INTO, 0);
	};

	TABLE() {
	    return this.getToken(MySqlParser.TABLE, 0);
	};

	loadDataInceptorAnchor() {
	    return this.getTypedRuleContext(LoadDataInceptorAnchorContext,0);
	};

	OVERWRITE() {
	    return this.getToken(MySqlParser.OVERWRITE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLoadDataInceptorTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLoadDataInceptorTable(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitLoadDataInceptorTable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LoadDataInceptorAnchorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_loadDataInceptorAnchor;
    }

	placeholder() {
	    return this.getTypedRuleContext(PlaceholderContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLoadDataInceptorAnchor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLoadDataInceptorAnchor(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitLoadDataInceptorAnchor(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LoadXmlStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_loadXmlStatement;
        this.priority = null; // Token
        this.filename = null; // Token
        this.violation = null; // Token
        this.charset = null; // CharsetNameContext
        this.tag = null; // Token
        this.linesFormat = null; // Token
    }

	LOAD() {
	    return this.getToken(MySqlParser.LOAD, 0);
	};

	XML() {
	    return this.getToken(MySqlParser.XML, 0);
	};

	INFILE() {
	    return this.getToken(MySqlParser.INFILE, 0);
	};

	INTO() {
	    return this.getToken(MySqlParser.INTO, 0);
	};

	TABLE() {
	    return this.getToken(MySqlParser.TABLE, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	STRING_LITERAL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.STRING_LITERAL);
	    } else {
	        return this.getToken(MySqlParser.STRING_LITERAL, i);
	    }
	};


	LOCAL() {
	    return this.getToken(MySqlParser.LOCAL, 0);
	};

	CHARACTER() {
	    return this.getToken(MySqlParser.CHARACTER, 0);
	};

	SET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.SET);
	    } else {
	        return this.getToken(MySqlParser.SET, i);
	    }
	};


	ROWS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.ROWS);
	    } else {
	        return this.getToken(MySqlParser.ROWS, i);
	    }
	};


	IDENTIFIED() {
	    return this.getToken(MySqlParser.IDENTIFIED, 0);
	};

	BY() {
	    return this.getToken(MySqlParser.BY, 0);
	};

	LESS_SYMBOL() {
	    return this.getToken(MySqlParser.LESS_SYMBOL, 0);
	};

	GREATER_SYMBOL() {
	    return this.getToken(MySqlParser.GREATER_SYMBOL, 0);
	};

	IGNORE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.IGNORE);
	    } else {
	        return this.getToken(MySqlParser.IGNORE, i);
	    }
	};


	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	assignmentField = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AssignmentFieldContext);
	    } else {
	        return this.getTypedRuleContext(AssignmentFieldContext,i);
	    }
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	updatedElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UpdatedElementContext);
	    } else {
	        return this.getTypedRuleContext(UpdatedElementContext,i);
	    }
	};

	charsetName() {
	    return this.getTypedRuleContext(CharsetNameContext,0);
	};

	LOW_PRIORITY() {
	    return this.getToken(MySqlParser.LOW_PRIORITY, 0);
	};

	CONCURRENT() {
	    return this.getToken(MySqlParser.CONCURRENT, 0);
	};

	REPLACE() {
	    return this.getToken(MySqlParser.REPLACE, 0);
	};

	LINES() {
	    return this.getToken(MySqlParser.LINES, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLoadXmlStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLoadXmlStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitLoadXmlStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MergeStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_mergeStatement;
        this._mergeUsingClause = null; // MergeUsingClauseContext
    }

	MERGE() {
	    return this.getToken(MySqlParser.MERGE, 0);
	};

	INTO() {
	    return this.getToken(MySqlParser.INTO, 0);
	};

	crudTargetClause() {
	    return this.getTypedRuleContext(CrudTargetClauseContext,0);
	};

	mergeUsingClause() {
	    return this.getTypedRuleContext(MergeUsingClauseContext,0);
	};

	mergeUpdateClause() {
	    return this.getTypedRuleContext(MergeUpdateClauseContext,0);
	};

	mergeInsertClause() {
	    return this.getTypedRuleContext(MergeInsertClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterMergeStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitMergeStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitMergeStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReplaceStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_replaceStatement;
        this.priority = null; // Token
        this.partitions = null; // UidListContext
        this.columns = null; // UidListContext
        this.setFirst = null; // UpdatedElementContext
        this._updatedElement = null; // UpdatedElementContext
        this.setElements = []; // of UpdatedElementContexts
    }

	REPLACE() {
	    return this.getToken(MySqlParser.REPLACE, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	insertStatementValue() {
	    return this.getTypedRuleContext(InsertStatementValueContext,0);
	};

	SET() {
	    return this.getToken(MySqlParser.SET, 0);
	};

	INTO() {
	    return this.getToken(MySqlParser.INTO, 0);
	};

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	LR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.LR_BRACKET);
	    } else {
	        return this.getToken(MySqlParser.LR_BRACKET, i);
	    }
	};


	RR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.RR_BRACKET);
	    } else {
	        return this.getToken(MySqlParser.RR_BRACKET, i);
	    }
	};


	updatedElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UpdatedElementContext);
	    } else {
	        return this.getTypedRuleContext(UpdatedElementContext,i);
	    }
	};

	uidList = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidListContext);
	    } else {
	        return this.getTypedRuleContext(UidListContext,i);
	    }
	};

	LOW_PRIORITY() {
	    return this.getToken(MySqlParser.LOW_PRIORITY, 0);
	};

	DELAYED() {
	    return this.getToken(MySqlParser.DELAYED, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterReplaceStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitReplaceStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitReplaceStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SelectStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_selectStatement;
        this.level = 0
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
			this.level = ctx.level;
		}

}


class UnionSelectContext extends SelectStatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.unionType = null; // Token;
        super.copyFrom(ctx);
    }

	querySpecificationNointo() {
	    return this.getTypedRuleContext(QuerySpecificationNointoContext,0);
	};

	unionStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UnionStatementContext);
	    } else {
	        return this.getTypedRuleContext(UnionStatementContext,i);
	    }
	};

	UNION() {
	    return this.getToken(MySqlParser.UNION, 0);
	};

	orderByClause() {
	    return this.getTypedRuleContext(OrderByClauseContext,0);
	};

	limitClause() {
	    return this.getTypedRuleContext(LimitClauseContext,0);
	};

	lockClause() {
	    return this.getTypedRuleContext(LockClauseContext,0);
	};

	querySpecification() {
	    return this.getTypedRuleContext(QuerySpecificationContext,0);
	};

	queryExpression() {
	    return this.getTypedRuleContext(QueryExpressionContext,0);
	};

	ALL() {
	    return this.getToken(MySqlParser.ALL, 0);
	};

	DISTINCT() {
	    return this.getToken(MySqlParser.DISTINCT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUnionSelect(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUnionSelect(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitUnionSelect(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.UnionSelectContext = UnionSelectContext;

class UnionParenthesisSelectContext extends SelectStatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.unionType = null; // Token;
        super.copyFrom(ctx);
    }

	queryExpressionNointo() {
	    return this.getTypedRuleContext(QueryExpressionNointoContext,0);
	};

	unionParenthesis = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UnionParenthesisContext);
	    } else {
	        return this.getTypedRuleContext(UnionParenthesisContext,i);
	    }
	};

	UNION() {
	    return this.getToken(MySqlParser.UNION, 0);
	};

	queryExpression() {
	    return this.getTypedRuleContext(QueryExpressionContext,0);
	};

	orderByClause() {
	    return this.getTypedRuleContext(OrderByClauseContext,0);
	};

	limitClause() {
	    return this.getTypedRuleContext(LimitClauseContext,0);
	};

	lockClause() {
	    return this.getTypedRuleContext(LockClauseContext,0);
	};

	ALL() {
	    return this.getToken(MySqlParser.ALL, 0);
	};

	DISTINCT() {
	    return this.getToken(MySqlParser.DISTINCT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUnionParenthesisSelect(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUnionParenthesisSelect(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitUnionParenthesisSelect(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.UnionParenthesisSelectContext = UnionParenthesisSelectContext;

class SimpleSelectContext extends SelectStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	querySpecification() {
	    return this.getTypedRuleContext(QuerySpecificationContext,0);
	};

	lockClause() {
	    return this.getTypedRuleContext(LockClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSimpleSelect(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSimpleSelect(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitSimpleSelect(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.SimpleSelectContext = SimpleSelectContext;

class ParenthesisSelectContext extends SelectStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	queryExpression() {
	    return this.getTypedRuleContext(QueryExpressionContext,0);
	};

	lockClause() {
	    return this.getTypedRuleContext(LockClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterParenthesisSelect(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitParenthesisSelect(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitParenthesisSelect(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.ParenthesisSelectContext = ParenthesisSelectContext;

class UpdateStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_updateStatement;
    }

	singleUpdateStatement() {
	    return this.getTypedRuleContext(SingleUpdateStatementContext,0);
	};

	multipleUpdateStatement() {
	    return this.getTypedRuleContext(MultipleUpdateStatementContext,0);
	};

	updateStatementInceptor() {
	    return this.getTypedRuleContext(UpdateStatementInceptorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUpdateStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUpdateStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitUpdateStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WithStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_withStatement;
        this.level = 0
        this._selectStatement = null; // SelectStatementContext
    }

	WITH() {
	    return this.getToken(MySqlParser.WITH, 0);
	};

	withCommonTableExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WithCommonTableExpressionContext);
	    } else {
	        return this.getTypedRuleContext(WithCommonTableExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	selectStatement() {
	    return this.getTypedRuleContext(SelectStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterWithStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitWithStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitWithStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WithCommonTableExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_withCommonTableExpression;
    }

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	AS() {
	    return this.getToken(MySqlParser.AS, 0);
	};

	queryExpression() {
	    return this.getTypedRuleContext(QueryExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterWithCommonTableExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitWithCommonTableExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitWithCommonTableExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InsertPartitionSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_insertPartitionSpec;
        this.level = 1
        this.partitions = null; // UidListContext
    }

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	partitionSpec() {
	    return this.getTypedRuleContext(PartitionSpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterInsertPartitionSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitInsertPartitionSpec(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitInsertPartitionSpec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InsertOnDuplicateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_insertOnDuplicate;
        this.level = 0
        this.duplicatedFirst = null; // UpdatedElementContext
        this._updatedElement = null; // UpdatedElementContext
        this.duplicatedElements = []; // of UpdatedElementContexts
    }

	ON() {
	    return this.getToken(MySqlParser.ON, 0);
	};

	DUPLICATE() {
	    return this.getToken(MySqlParser.DUPLICATE, 0);
	};

	KEY() {
	    return this.getToken(MySqlParser.KEY, 0);
	};

	UPDATE() {
	    return this.getToken(MySqlParser.UPDATE, 0);
	};

	updatedElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UpdatedElementContext);
	    } else {
	        return this.getTypedRuleContext(UpdatedElementContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterInsertOnDuplicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitInsertOnDuplicate(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitInsertOnDuplicate(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RowFormatDelimitedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_rowFormatDelimited;
        this.level = 1
    }

	ROW() {
	    return this.getToken(MySqlParser.ROW, 0);
	};

	FORMAT() {
	    return this.getToken(MySqlParser.FORMAT, 0);
	};

	DELIMITED() {
	    return this.getToken(MySqlParser.DELIMITED, 0);
	};

	rowFormatDelimitedTail() {
	    return this.getTypedRuleContext(RowFormatDelimitedTailContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterRowFormatDelimited(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitRowFormatDelimited(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitRowFormatDelimited(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RowFormatDelimitedTailContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_rowFormatDelimitedTail;
    }

	FIELDS() {
	    return this.getToken(MySqlParser.FIELDS, 0);
	};

	TERMINATED = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.TERMINATED);
	    } else {
	        return this.getToken(MySqlParser.TERMINATED, i);
	    }
	};


	BY = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.BY);
	    } else {
	        return this.getToken(MySqlParser.BY, i);
	    }
	};


	stringLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringLiteralContext);
	    } else {
	        return this.getTypedRuleContext(StringLiteralContext,i);
	    }
	};

	COLLECTION() {
	    return this.getToken(MySqlParser.COLLECTION, 0);
	};

	ITEMS() {
	    return this.getToken(MySqlParser.ITEMS, 0);
	};

	MAP() {
	    return this.getToken(MySqlParser.MAP, 0);
	};

	KEYS() {
	    return this.getToken(MySqlParser.KEYS, 0);
	};

	LINES() {
	    return this.getToken(MySqlParser.LINES, 0);
	};

	ESCAPED() {
	    return this.getToken(MySqlParser.ESCAPED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterRowFormatDelimitedTail(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitRowFormatDelimitedTail(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitRowFormatDelimitedTail(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RowFormatSerdeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_rowFormatSerde;
        this.level = 1
    }

	ROW() {
	    return this.getToken(MySqlParser.ROW, 0);
	};

	FORMAT() {
	    return this.getToken(MySqlParser.FORMAT, 0);
	};

	SERDE() {
	    return this.getToken(MySqlParser.SERDE, 0);
	};

	rowFormatSerdeTail() {
	    return this.getTypedRuleContext(RowFormatSerdeTailContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterRowFormatSerde(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitRowFormatSerde(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitRowFormatSerde(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RowFormatSerdeTailContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_rowFormatSerdeTail;
    }

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	WITH() {
	    return this.getToken(MySqlParser.WITH, 0);
	};

	SERDEPROPERTIES() {
	    return this.getToken(MySqlParser.SERDEPROPERTIES, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	keyValueProperties() {
	    return this.getTypedRuleContext(KeyValuePropertiesContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterRowFormatSerdeTail(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitRowFormatSerdeTail(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitRowFormatSerdeTail(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RowFormatContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_rowFormat;
        this.level = 1
    }

	ROW() {
	    return this.getToken(MySqlParser.ROW, 0);
	};

	FORMAT() {
	    return this.getToken(MySqlParser.FORMAT, 0);
	};

	DELIMITED() {
	    return this.getToken(MySqlParser.DELIMITED, 0);
	};

	rowFormatDelimitedTail() {
	    return this.getTypedRuleContext(RowFormatDelimitedTailContext,0);
	};

	SERDE() {
	    return this.getToken(MySqlParser.SERDE, 0);
	};

	rowFormatSerdeTail() {
	    return this.getTypedRuleContext(RowFormatSerdeTailContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterRowFormat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitRowFormat(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitRowFormat(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FileStoreContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_fileStore;
        this.level = 1
    }

	STORED() {
	    return this.getToken(MySqlParser.STORED, 0);
	};

	AS() {
	    return this.getToken(MySqlParser.AS, 0);
	};

	fileFormat() {
	    return this.getTypedRuleContext(FileFormatContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterFileStore(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitFileStore(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitFileStore(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FileFormatContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_fileFormat;
        this.inFmt = null; // StringLiteralContext
        this.outFmt = null; // StringLiteralContext
        this.inDriver = null; // StringLiteralContext
        this.outDriver = null; // StringLiteralContext
    }

	fileFormatEnum() {
	    return this.getTypedRuleContext(FileFormatEnumContext,0);
	};

	STARGATE() {
	    return this.getToken(MySqlParser.STARGATE, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	INPUTFORMAT() {
	    return this.getToken(MySqlParser.INPUTFORMAT, 0);
	};

	OUTPUTFORMAT() {
	    return this.getToken(MySqlParser.OUTPUTFORMAT, 0);
	};

	stringLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringLiteralContext);
	    } else {
	        return this.getTypedRuleContext(StringLiteralContext,i);
	    }
	};

	INPUTDRIVER() {
	    return this.getToken(MySqlParser.INPUTDRIVER, 0);
	};

	OUTPUTDRIVER() {
	    return this.getToken(MySqlParser.OUTPUTDRIVER, 0);
	};

	HOLODESK() {
	    return this.getToken(MySqlParser.HOLODESK, 0);
	};

	holoProps() {
	    return this.getTypedRuleContext(HoloPropsContext,0);
	};

	holoTableSize() {
	    return this.getTypedRuleContext(HoloTableSizeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterFileFormat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitFileFormat(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitFileFormat(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FileFormatEnumContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_fileFormatEnum;
    }

	CSVFILE() {
	    return this.getToken(MySqlParser.CSVFILE, 0);
	};

	ES() {
	    return this.getToken(MySqlParser.ES, 0);
	};

	FWCFILE() {
	    return this.getToken(MySqlParser.FWCFILE, 0);
	};

	HYPERDRIVE() {
	    return this.getToken(MySqlParser.HYPERDRIVE, 0);
	};

	ORC() {
	    return this.getToken(MySqlParser.ORC, 0);
	};

	ORC_TRANSACTION() {
	    return this.getToken(MySqlParser.ORC_TRANSACTION, 0);
	};

	PARQUET() {
	    return this.getToken(MySqlParser.PARQUET, 0);
	};

	RCFILE() {
	    return this.getToken(MySqlParser.RCFILE, 0);
	};

	SEQUENCEFILE() {
	    return this.getToken(MySqlParser.SEQUENCEFILE, 0);
	};

	STELLARDB() {
	    return this.getToken(MySqlParser.STELLARDB, 0);
	};

	TEXTFILE() {
	    return this.getToken(MySqlParser.TEXTFILE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterFileFormatEnum(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitFileFormatEnum(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitFileFormatEnum(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FileStoreByContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_fileStoreBy;
        this.level = 1
    }

	STORED() {
	    return this.getToken(MySqlParser.STORED, 0);
	};

	BY() {
	    return this.getToken(MySqlParser.BY, 0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	WITH() {
	    return this.getToken(MySqlParser.WITH, 0);
	};

	SERDEPROPERTIES() {
	    return this.getToken(MySqlParser.SERDEPROPERTIES, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	keyValueProperties() {
	    return this.getTypedRuleContext(KeyValuePropertiesContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterFileStoreBy(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitFileStoreBy(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitFileStoreBy(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InsertActionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_insertAction;
        this.priority = null; // Token
    }

	IGNORE() {
	    return this.getToken(MySqlParser.IGNORE, 0);
	};

	INTO() {
	    return this.getToken(MySqlParser.INTO, 0);
	};

	LOW_PRIORITY() {
	    return this.getToken(MySqlParser.LOW_PRIORITY, 0);
	};

	DELAYED() {
	    return this.getToken(MySqlParser.DELAYED, 0);
	};

	HIGH_PRIORITY() {
	    return this.getToken(MySqlParser.HIGH_PRIORITY, 0);
	};

	OVERWRITE() {
	    return this.getToken(MySqlParser.OVERWRITE, 0);
	};

	TABLE() {
	    return this.getToken(MySqlParser.TABLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterInsertAction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitInsertAction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitInsertAction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InsertStatementValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_insertStatementValue;
        this.level = 0
    }

	querySpecification() {
	    return this.getTypedRuleContext(QuerySpecificationContext,0);
	};

	withStatement() {
	    return this.getTypedRuleContext(WithStatementContext,0);
	};

	insertValueClause() {
	    return this.getTypedRuleContext(InsertValueClauseContext,0);
	};

	emptyElement() {
	    return this.getTypedRuleContext(EmptyElementContext,0);
	};

	VALUES() {
	    return this.getToken(MySqlParser.VALUES, 0);
	};

	VALUE() {
	    return this.getToken(MySqlParser.VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterInsertStatementValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitInsertStatementValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitInsertStatementValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InsertValueClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_insertValueClause;
        this.level = 1
        this.insertFormat = null; // Token
    }

	LR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.LR_BRACKET);
	    } else {
	        return this.getToken(MySqlParser.LR_BRACKET, i);
	    }
	};


	expressionsWithDefaults = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionsWithDefaultsContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionsWithDefaultsContext,i);
	    }
	};

	RR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.RR_BRACKET);
	    } else {
	        return this.getToken(MySqlParser.RR_BRACKET, i);
	    }
	};


	VALUES() {
	    return this.getToken(MySqlParser.VALUES, 0);
	};

	VALUE() {
	    return this.getToken(MySqlParser.VALUE, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterInsertValueClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitInsertValueClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitInsertValueClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UpdatedElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_updatedElement;
    }

	fullColumnNameOptional() {
	    return this.getTypedRuleContext(FullColumnNameOptionalContext,0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	DEFAULT() {
	    return this.getToken(MySqlParser.DEFAULT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUpdatedElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUpdatedElement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitUpdatedElement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AssignmentFieldContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_assignmentField;
    }

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	LOCAL_ID() {
	    return this.getToken(MySqlParser.LOCAL_ID, 0);
	};

	emptyElement() {
	    return this.getTypedRuleContext(EmptyElementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAssignmentField(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAssignmentField(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAssignmentField(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MergeUsingClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_mergeUsingClause;
        this.level = 1
    }

	USING() {
	    return this.getToken(MySqlParser.USING, 0);
	};

	tableSourceItem() {
	    return this.getTypedRuleContext(TableSourceItemContext,0);
	};

	ON() {
	    return this.getToken(MySqlParser.ON, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterMergeUsingClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitMergeUsingClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitMergeUsingClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MergeUpdateClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_mergeUpdateClause;
        this.level = 1
    }

	WHEN() {
	    return this.getToken(MySqlParser.WHEN, 0);
	};

	MATCHED() {
	    return this.getToken(MySqlParser.MATCHED, 0);
	};

	THEN() {
	    return this.getToken(MySqlParser.THEN, 0);
	};

	UPDATE() {
	    return this.getToken(MySqlParser.UPDATE, 0);
	};

	SET() {
	    return this.getToken(MySqlParser.SET, 0);
	};

	updateAssignClauseElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UpdateAssignClauseElementContext);
	    } else {
	        return this.getTypedRuleContext(UpdateAssignClauseElementContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	DELETE() {
	    return this.getToken(MySqlParser.DELETE, 0);
	};

	WHERE() {
	    return this.getToken(MySqlParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterMergeUpdateClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitMergeUpdateClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitMergeUpdateClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MergeInsertClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_mergeInsertClause;
        this.level = 1
    }

	WHEN() {
	    return this.getToken(MySqlParser.WHEN, 0);
	};

	NOT() {
	    return this.getToken(MySqlParser.NOT, 0);
	};

	MATCHED() {
	    return this.getToken(MySqlParser.MATCHED, 0);
	};

	THEN() {
	    return this.getToken(MySqlParser.THEN, 0);
	};

	INSERT() {
	    return this.getToken(MySqlParser.INSERT, 0);
	};

	insertValueClause() {
	    return this.getTypedRuleContext(InsertValueClauseContext,0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	WHERE() {
	    return this.getToken(MySqlParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterMergeInsertClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitMergeInsertClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitMergeInsertClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LockClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_lockClause;
    }

	FOR() {
	    return this.getToken(MySqlParser.FOR, 0);
	};

	UPDATE() {
	    return this.getToken(MySqlParser.UPDATE, 0);
	};

	LOCK() {
	    return this.getToken(MySqlParser.LOCK, 0);
	};

	IN() {
	    return this.getToken(MySqlParser.IN, 0);
	};

	SHARE() {
	    return this.getToken(MySqlParser.SHARE, 0);
	};

	MODE() {
	    return this.getToken(MySqlParser.MODE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLockClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLockClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitLockClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SingleDeleteStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_singleDeleteStatement;
        this.priority = null; // Token
    }

	DELETE() {
	    return this.getToken(MySqlParser.DELETE, 0);
	};

	FROM() {
	    return this.getToken(MySqlParser.FROM, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	QUICK() {
	    return this.getToken(MySqlParser.QUICK, 0);
	};

	IGNORE() {
	    return this.getToken(MySqlParser.IGNORE, 0);
	};

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	WHERE() {
	    return this.getToken(MySqlParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	orderByClause() {
	    return this.getTypedRuleContext(OrderByClauseContext,0);
	};

	LIMIT() {
	    return this.getToken(MySqlParser.LIMIT, 0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	LOW_PRIORITY() {
	    return this.getToken(MySqlParser.LOW_PRIORITY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSingleDeleteStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSingleDeleteStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitSingleDeleteStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MultipleDeleteStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_multipleDeleteStatement;
        this.priority = null; // Token
    }

	DELETE() {
	    return this.getToken(MySqlParser.DELETE, 0);
	};

	tableName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TableNameContext);
	    } else {
	        return this.getTypedRuleContext(TableNameContext,i);
	    }
	};

	FROM() {
	    return this.getToken(MySqlParser.FROM, 0);
	};

	tableSources() {
	    return this.getTypedRuleContext(TableSourcesContext,0);
	};

	USING() {
	    return this.getToken(MySqlParser.USING, 0);
	};

	QUICK() {
	    return this.getToken(MySqlParser.QUICK, 0);
	};

	IGNORE() {
	    return this.getToken(MySqlParser.IGNORE, 0);
	};

	WHERE() {
	    return this.getToken(MySqlParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	LOW_PRIORITY() {
	    return this.getToken(MySqlParser.LOW_PRIORITY, 0);
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.DOT);
	    } else {
	        return this.getToken(MySqlParser.DOT, i);
	    }
	};


	STAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.STAR);
	    } else {
	        return this.getToken(MySqlParser.STAR, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterMultipleDeleteStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitMultipleDeleteStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitMultipleDeleteStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class HandlerOpenStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_handlerOpenStatement;
    }

	HANDLER() {
	    return this.getToken(MySqlParser.HANDLER, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	OPEN() {
	    return this.getToken(MySqlParser.OPEN, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	AS() {
	    return this.getToken(MySqlParser.AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterHandlerOpenStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitHandlerOpenStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitHandlerOpenStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class HandlerReadIndexStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_handlerReadIndexStatement;
        this.index = null; // UidContext
        this.moveOrder = null; // Token
    }

	HANDLER() {
	    return this.getToken(MySqlParser.HANDLER, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	READ() {
	    return this.getToken(MySqlParser.READ, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	comparisonOperator() {
	    return this.getTypedRuleContext(ComparisonOperatorContext,0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	constants() {
	    return this.getTypedRuleContext(ConstantsContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	WHERE() {
	    return this.getToken(MySqlParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	LIMIT() {
	    return this.getToken(MySqlParser.LIMIT, 0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	FIRST() {
	    return this.getToken(MySqlParser.FIRST, 0);
	};

	NEXT() {
	    return this.getToken(MySqlParser.NEXT, 0);
	};

	PREV() {
	    return this.getToken(MySqlParser.PREV, 0);
	};

	LAST() {
	    return this.getToken(MySqlParser.LAST, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterHandlerReadIndexStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitHandlerReadIndexStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitHandlerReadIndexStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class HandlerReadStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_handlerReadStatement;
        this.moveOrder = null; // Token
    }

	HANDLER() {
	    return this.getToken(MySqlParser.HANDLER, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	READ() {
	    return this.getToken(MySqlParser.READ, 0);
	};

	FIRST() {
	    return this.getToken(MySqlParser.FIRST, 0);
	};

	NEXT() {
	    return this.getToken(MySqlParser.NEXT, 0);
	};

	WHERE() {
	    return this.getToken(MySqlParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	LIMIT() {
	    return this.getToken(MySqlParser.LIMIT, 0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterHandlerReadStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitHandlerReadStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitHandlerReadStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class HandlerCloseStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_handlerCloseStatement;
    }

	HANDLER() {
	    return this.getToken(MySqlParser.HANDLER, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	CLOSE() {
	    return this.getToken(MySqlParser.CLOSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterHandlerCloseStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitHandlerCloseStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitHandlerCloseStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SingleUpdateStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_singleUpdateStatement;
        this.priority = null; // Token
        this._setUpdatedElements = null; // SetUpdatedElementsContext
    }

	UPDATE() {
	    return this.getToken(MySqlParser.UPDATE, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	IGNORE() {
	    return this.getToken(MySqlParser.IGNORE, 0);
	};

	baseElementAlias() {
	    return this.getTypedRuleContext(BaseElementAliasContext,0);
	};

	setUpdatedElements() {
	    return this.getTypedRuleContext(SetUpdatedElementsContext,0);
	};

	whereExpressionOptional() {
	    return this.getTypedRuleContext(WhereExpressionOptionalContext,0);
	};

	orderByClause() {
	    return this.getTypedRuleContext(OrderByClauseContext,0);
	};

	limitClause() {
	    return this.getTypedRuleContext(LimitClauseContext,0);
	};

	LOW_PRIORITY() {
	    return this.getToken(MySqlParser.LOW_PRIORITY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSingleUpdateStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSingleUpdateStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitSingleUpdateStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MultipleUpdateStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_multipleUpdateStatement;
        this.priority = null; // Token
        this._setUpdatedElements = null; // SetUpdatedElementsContext
    }

	UPDATE() {
	    return this.getToken(MySqlParser.UPDATE, 0);
	};

	tableSources() {
	    return this.getTypedRuleContext(TableSourcesContext,0);
	};

	IGNORE() {
	    return this.getToken(MySqlParser.IGNORE, 0);
	};

	setUpdatedElements() {
	    return this.getTypedRuleContext(SetUpdatedElementsContext,0);
	};

	whereExpressionOptional() {
	    return this.getTypedRuleContext(WhereExpressionOptionalContext,0);
	};

	LOW_PRIORITY() {
	    return this.getToken(MySqlParser.LOW_PRIORITY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterMultipleUpdateStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitMultipleUpdateStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitMultipleUpdateStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SetUpdatedElementsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_setUpdatedElements;
        this.level = 0
    }

	SET() {
	    return this.getToken(MySqlParser.SET, 0);
	};

	updatedElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UpdatedElementContext);
	    } else {
	        return this.getTypedRuleContext(UpdatedElementContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSetUpdatedElements(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSetUpdatedElements(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitSetUpdatedElements(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UpdateStatementInceptorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_updateStatementInceptor;
        this.newlineTokens = ['SET']
        this._updateAssignClause = null; // UpdateAssignClauseContext
    }

	UPDATE() {
	    return this.getToken(MySqlParser.UPDATE, 0);
	};

	crudTargetClause() {
	    return this.getTypedRuleContext(CrudTargetClauseContext,0);
	};

	SET() {
	    return this.getToken(MySqlParser.SET, 0);
	};

	updateAssignClause() {
	    return this.getTypedRuleContext(UpdateAssignClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUpdateStatementInceptor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUpdateStatementInceptor(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitUpdateStatementInceptor(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CrudTargetClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_crudTargetClause;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class CrudTargetTableContext extends CrudTargetClauseContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	TABLE() {
	    return this.getToken(MySqlParser.TABLE, 0);
	};

	partitionSpec() {
	    return this.getTypedRuleContext(PartitionSpecContext,0);
	};

	baseElementAlias() {
	    return this.getTypedRuleContext(BaseElementAliasContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCrudTargetTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCrudTargetTable(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitCrudTargetTable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.CrudTargetTableContext = CrudTargetTableContext;

class CrudTargetSubqueryContext extends CrudTargetClauseContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	selectStatement() {
	    return this.getTypedRuleContext(SelectStatementContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	baseElementAlias() {
	    return this.getTypedRuleContext(BaseElementAliasContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCrudTargetSubquery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCrudTargetSubquery(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitCrudTargetSubquery(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.CrudTargetSubqueryContext = CrudTargetSubqueryContext;

class UpdateAssignClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_updateAssignClause;
    }

	LR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.LR_BRACKET);
	    } else {
	        return this.getToken(MySqlParser.LR_BRACKET, i);
	    }
	};


	columnNames() {
	    return this.getTypedRuleContext(ColumnNamesContext,0);
	};

	RR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.RR_BRACKET);
	    } else {
	        return this.getToken(MySqlParser.RR_BRACKET, i);
	    }
	};


	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	selectStatement() {
	    return this.getTypedRuleContext(SelectStatementContext,0);
	};

	whereExpressionOptional() {
	    return this.getTypedRuleContext(WhereExpressionOptionalContext,0);
	};

	updateAssignClauseElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UpdateAssignClauseElementContext);
	    } else {
	        return this.getTypedRuleContext(UpdateAssignClauseElementContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUpdateAssignClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUpdateAssignClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitUpdateAssignClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UpdateAssignClauseElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_updateAssignClauseElement;
        this.OP = null; // Token
        this._expression = null; // ExpressionContext
    }

	fullColumnName() {
	    return this.getTypedRuleContext(FullColumnNameContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUpdateAssignClauseElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUpdateAssignClauseElement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitUpdateAssignClauseElement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DeleteStatementInceptorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_deleteStatementInceptor;
    }

	DELETE() {
	    return this.getToken(MySqlParser.DELETE, 0);
	};

	crudTargetClause() {
	    return this.getTypedRuleContext(CrudTargetClauseContext,0);
	};

	FROM() {
	    return this.getToken(MySqlParser.FROM, 0);
	};

	whereExpressionOptional() {
	    return this.getTypedRuleContext(WhereExpressionOptionalContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDeleteStatementInceptor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDeleteStatementInceptor(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitDeleteStatementInceptor(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OrderByClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_orderByClause;
        this.level = 0
    }

	ORDER() {
	    return this.getToken(MySqlParser.ORDER, 0);
	};

	BY() {
	    return this.getToken(MySqlParser.BY, 0);
	};

	orderByExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OrderByExpressionContext);
	    } else {
	        return this.getTypedRuleContext(OrderByExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterOrderByClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitOrderByClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitOrderByClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OrderByExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_orderByExpression;
        this.order = null; // Token
    }

	expressionOptional() {
	    return this.getTypedRuleContext(ExpressionOptionalContext,0);
	};

	ASC() {
	    return this.getToken(MySqlParser.ASC, 0);
	};

	DESC() {
	    return this.getToken(MySqlParser.DESC, 0);
	};

	nullsOrder() {
	    return this.getTypedRuleContext(NullsOrderContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterOrderByExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitOrderByExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitOrderByExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NullsOrderContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_nullsOrder;
    }

	NULLS() {
	    return this.getToken(MySqlParser.NULLS, 0);
	};

	FIRST() {
	    return this.getToken(MySqlParser.FIRST, 0);
	};

	LAST() {
	    return this.getToken(MySqlParser.LAST, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterNullsOrder(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitNullsOrder(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitNullsOrder(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClusterByClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_clusterByClause;
        this.level = 0
    }

	CLUSTER() {
	    return this.getToken(MySqlParser.CLUSTER, 0);
	};

	BY() {
	    return this.getToken(MySqlParser.BY, 0);
	};

	expressionOptional = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionOptionalContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionOptionalContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterClusterByClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitClusterByClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitClusterByClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DistributeByClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_distributeByClause;
        this.level = 0
    }

	DISTRIBUTE() {
	    return this.getToken(MySqlParser.DISTRIBUTE, 0);
	};

	BY() {
	    return this.getToken(MySqlParser.BY, 0);
	};

	expressionOptional = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionOptionalContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionOptionalContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDistributeByClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDistributeByClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitDistributeByClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SortByClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_sortByClause;
        this.level = 0
    }

	SORT() {
	    return this.getToken(MySqlParser.SORT, 0);
	};

	BY() {
	    return this.getToken(MySqlParser.BY, 0);
	};

	orderByExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OrderByExpressionContext);
	    } else {
	        return this.getTypedRuleContext(OrderByExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSortByClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSortByClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitSortByClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableSourcesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_tableSources;
    }

	tableSource = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TableSourceContext);
	    } else {
	        return this.getTypedRuleContext(TableSourceContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableSources(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableSources(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitTableSources(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableSourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_tableSource;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class TableSourceNestedContext extends TableSourceContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	tableSourceItem() {
	    return this.getTypedRuleContext(TableSourceItemContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	joinPart = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(JoinPartContext);
	    } else {
	        return this.getTypedRuleContext(JoinPartContext,i);
	    }
	};

	lateralView = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LateralViewContext);
	    } else {
	        return this.getTypedRuleContext(LateralViewContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableSourceNested(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableSourceNested(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitTableSourceNested(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.TableSourceNestedContext = TableSourceNestedContext;

class TableSourceBaseContext extends TableSourceContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	tableSourceItem() {
	    return this.getTypedRuleContext(TableSourceItemContext,0);
	};

	joinPart = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(JoinPartContext);
	    } else {
	        return this.getTypedRuleContext(JoinPartContext,i);
	    }
	};

	lateralView = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LateralViewContext);
	    } else {
	        return this.getTypedRuleContext(LateralViewContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableSourceBase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableSourceBase(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitTableSourceBase(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.TableSourceBaseContext = TableSourceBaseContext;

class TableSourceItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_tableSourceItem;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class SubqueryTableItemContext extends TableSourceItemContext {

    constructor(parser, ctx) {
        super(parser);
        this.parenthesisSubquery = null; // SelectStatementPlusContext;
        super.copyFrom(ctx);
    }

	selectStatementPlus() {
	    return this.getTypedRuleContext(SelectStatementPlusContext,0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	baseElementAlias() {
	    return this.getTypedRuleContext(BaseElementAliasContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSubqueryTableItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSubqueryTableItem(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitSubqueryTableItem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.SubqueryTableItemContext = SubqueryTableItemContext;

class AtomTableItemContext extends TableSourceItemContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	tableSourceItemIndex() {
	    return this.getTypedRuleContext(TableSourceItemIndexContext,0);
	};

	baseElementAlias() {
	    return this.getTypedRuleContext(BaseElementAliasContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAtomTableItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAtomTableItem(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAtomTableItem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.AtomTableItemContext = AtomTableItemContext;

class TableSourcesItemContext extends TableSourceItemContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	tableSources() {
	    return this.getTypedRuleContext(TableSourcesContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableSourcesItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableSourcesItem(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitTableSourcesItem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.TableSourcesItemContext = TableSourcesItemContext;

class ValuesSourceTableItemContext extends TableSourceItemContext {

    constructor(parser, ctx) {
        super(parser);
        this._baseElementAlias = null; // BaseElementAliasContext;
        this._uidList = null; // UidListContext;
        super.copyFrom(ctx);
    }

	LR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.LR_BRACKET);
	    } else {
	        return this.getToken(MySqlParser.LR_BRACKET, i);
	    }
	};


	VALUES() {
	    return this.getToken(MySqlParser.VALUES, 0);
	};

	valuesSourceExprs = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValuesSourceExprsContext);
	    } else {
	        return this.getTypedRuleContext(ValuesSourceExprsContext,i);
	    }
	};

	RR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.RR_BRACKET);
	    } else {
	        return this.getToken(MySqlParser.RR_BRACKET, i);
	    }
	};


	baseElementAlias() {
	    return this.getTypedRuleContext(BaseElementAliasContext,0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterValuesSourceTableItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitValuesSourceTableItem(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitValuesSourceTableItem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.ValuesSourceTableItemContext = ValuesSourceTableItemContext;

class TableSourceItemIndexContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_tableSourceItemIndex;
    }

	indexHint = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IndexHintContext);
	    } else {
	        return this.getTypedRuleContext(IndexHintContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableSourceItemIndex(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableSourceItemIndex(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitTableSourceItemIndex(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FromClauseSuggesterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_fromClauseSuggester;
    }

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterFromClauseSuggester(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitFromClauseSuggester(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitFromClauseSuggester(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SelectStatementPlusContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_selectStatementPlus;
    }

	selectStatement() {
	    return this.getTypedRuleContext(SelectStatementContext,0);
	};

	withStatement() {
	    return this.getTypedRuleContext(WithStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSelectStatementPlus(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSelectStatementPlus(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitSelectStatementPlus(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ValuesSourceExprsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_valuesSourceExprs;
    }

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterValuesSourceExprs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitValuesSourceExprs(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitValuesSourceExprs(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IndexHintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_indexHint;
        this.indexHintAction = null; // Token
        this.keyFormat = null; // Token
    }

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	USE() {
	    return this.getToken(MySqlParser.USE, 0);
	};

	IGNORE() {
	    return this.getToken(MySqlParser.IGNORE, 0);
	};

	FORCE() {
	    return this.getToken(MySqlParser.FORCE, 0);
	};

	INDEX() {
	    return this.getToken(MySqlParser.INDEX, 0);
	};

	KEY() {
	    return this.getToken(MySqlParser.KEY, 0);
	};

	FOR() {
	    return this.getToken(MySqlParser.FOR, 0);
	};

	indexHintType() {
	    return this.getTypedRuleContext(IndexHintTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterIndexHint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitIndexHint(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitIndexHint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IndexHintTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_indexHintType;
    }

	JOIN() {
	    return this.getToken(MySqlParser.JOIN, 0);
	};

	ORDER() {
	    return this.getToken(MySqlParser.ORDER, 0);
	};

	BY() {
	    return this.getToken(MySqlParser.BY, 0);
	};

	GROUP() {
	    return this.getToken(MySqlParser.GROUP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterIndexHintType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitIndexHintType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitIndexHintType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class JoinPartContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_joinPart;
        this.level = 0
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
			this.level = ctx.level;
		}

}


class InnerJoinContext extends JoinPartContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	JOIN() {
	    return this.getToken(MySqlParser.JOIN, 0);
	};

	tableSourceItem() {
	    return this.getTypedRuleContext(TableSourceItemContext,0);
	};

	joinCondition() {
	    return this.getTypedRuleContext(JoinConditionContext,0);
	};

	INNER() {
	    return this.getToken(MySqlParser.INNER, 0);
	};

	CROSS() {
	    return this.getToken(MySqlParser.CROSS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterInnerJoin(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitInnerJoin(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitInnerJoin(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.InnerJoinContext = InnerJoinContext;

class NaturalJoinContext extends JoinPartContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	NATURAL() {
	    return this.getToken(MySqlParser.NATURAL, 0);
	};

	JOIN() {
	    return this.getToken(MySqlParser.JOIN, 0);
	};

	tableSourceItem() {
	    return this.getTypedRuleContext(TableSourceItemContext,0);
	};

	joinNaturalSubType() {
	    return this.getTypedRuleContext(JoinNaturalSubTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterNaturalJoin(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitNaturalJoin(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitNaturalJoin(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.NaturalJoinContext = NaturalJoinContext;

class PlaceholderJoinContext extends JoinPartContext {

    constructor(parser, ctx) {
        super(parser);
        this._joinTypeAnchor = null; // JoinTypeAnchorContext;
        super.copyFrom(ctx);
    }

	joinTypeAnchor() {
	    return this.getTypedRuleContext(JoinTypeAnchorContext,0);
	};

	tableSourceItem() {
	    return this.getTypedRuleContext(TableSourceItemContext,0);
	};

	joinCondition() {
	    return this.getTypedRuleContext(JoinConditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPlaceholderJoin(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPlaceholderJoin(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitPlaceholderJoin(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.PlaceholderJoinContext = PlaceholderJoinContext;

class LeftSemiJoinContext extends JoinPartContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LEFT() {
	    return this.getToken(MySqlParser.LEFT, 0);
	};

	SEMI2() {
	    return this.getToken(MySqlParser.SEMI2, 0);
	};

	JOIN() {
	    return this.getToken(MySqlParser.JOIN, 0);
	};

	tableSourceItem() {
	    return this.getTypedRuleContext(TableSourceItemContext,0);
	};

	joinCondition() {
	    return this.getTypedRuleContext(JoinConditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLeftSemiJoin(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLeftSemiJoin(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitLeftSemiJoin(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.LeftSemiJoinContext = LeftSemiJoinContext;

class OuterJoinContext extends JoinPartContext {

    constructor(parser, ctx) {
        super(parser);
        this._joinCondition = null; // JoinConditionContext;
        super.copyFrom(ctx);
    }

	joinOuterType() {
	    return this.getTypedRuleContext(JoinOuterTypeContext,0);
	};

	JOIN() {
	    return this.getToken(MySqlParser.JOIN, 0);
	};

	tableSourceItem() {
	    return this.getTypedRuleContext(TableSourceItemContext,0);
	};

	OUTER() {
	    return this.getToken(MySqlParser.OUTER, 0);
	};

	joinCondition() {
	    return this.getTypedRuleContext(JoinConditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterOuterJoin(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitOuterJoin(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitOuterJoin(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.OuterJoinContext = OuterJoinContext;

class StraightJoinContext extends JoinPartContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	STRAIGHT_JOIN() {
	    return this.getToken(MySqlParser.STRAIGHT_JOIN, 0);
	};

	tableSourceItem() {
	    return this.getTypedRuleContext(TableSourceItemContext,0);
	};

	ON() {
	    return this.getToken(MySqlParser.ON, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterStraightJoin(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitStraightJoin(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitStraightJoin(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.StraightJoinContext = StraightJoinContext;

class JoinTypeAnchorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_joinTypeAnchor;
    }

	placeholder() {
	    return this.getTypedRuleContext(PlaceholderContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterJoinTypeAnchor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitJoinTypeAnchor(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitJoinTypeAnchor(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class JoinOuterTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_joinOuterType;
    }

	LEFT() {
	    return this.getToken(MySqlParser.LEFT, 0);
	};

	RIGHT() {
	    return this.getToken(MySqlParser.RIGHT, 0);
	};

	FULL() {
	    return this.getToken(MySqlParser.FULL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterJoinOuterType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitJoinOuterType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitJoinOuterType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class JoinNaturalSubTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_joinNaturalSubType;
    }

	LEFT() {
	    return this.getToken(MySqlParser.LEFT, 0);
	};

	RIGHT() {
	    return this.getToken(MySqlParser.RIGHT, 0);
	};

	OUTER() {
	    return this.getToken(MySqlParser.OUTER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterJoinNaturalSubType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitJoinNaturalSubType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitJoinNaturalSubType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class JoinConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_joinCondition;
    }

	ON() {
	    return this.getToken(MySqlParser.ON, 0);
	};

	expressionOptional() {
	    return this.getTypedRuleContext(ExpressionOptionalContext,0);
	};

	USING() {
	    return this.getToken(MySqlParser.USING, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterJoinCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitJoinCondition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitJoinCondition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LateralViewContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_lateralView;
        this._uid = null; // UidContext
    }

	LATERAL() {
	    return this.getToken(MySqlParser.LATERAL, 0);
	};

	VIEW() {
	    return this.getToken(MySqlParser.VIEW, 0);
	};

	functionCall() {
	    return this.getTypedRuleContext(FunctionCallContext,0);
	};

	OUTER() {
	    return this.getToken(MySqlParser.OUTER, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	AS() {
	    return this.getToken(MySqlParser.AS, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLateralView(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLateralView(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitLateralView(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class QueryExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_queryExpression;
    }

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	querySpecification() {
	    return this.getTypedRuleContext(QuerySpecificationContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	queryExpression() {
	    return this.getTypedRuleContext(QueryExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterQueryExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitQueryExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitQueryExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class QueryExpressionNointoContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_queryExpressionNointo;
    }

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	querySpecificationNointo() {
	    return this.getTypedRuleContext(QuerySpecificationNointoContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	queryExpressionNointo() {
	    return this.getTypedRuleContext(QueryExpressionNointoContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterQueryExpressionNointo(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitQueryExpressionNointo(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitQueryExpressionNointo(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class QuerySpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_querySpecification;
        this.level = 0
    }

	SELECT() {
	    return this.getToken(MySqlParser.SELECT, 0);
	};

	fromClauseSuggester() {
	    return this.getTypedRuleContext(FromClauseSuggesterContext,0);
	};

	selectSpec() {
	    return this.getTypedRuleContext(SelectSpecContext,0);
	};

	selectElements() {
	    return this.getTypedRuleContext(SelectElementsContext,0);
	};

	selectIntoExpression() {
	    return this.getTypedRuleContext(SelectIntoExpressionContext,0);
	};

	fromClause() {
	    return this.getTypedRuleContext(FromClauseContext,0);
	};

	orderByClause() {
	    return this.getTypedRuleContext(OrderByClauseContext,0);
	};

	clusterByClause() {
	    return this.getTypedRuleContext(ClusterByClauseContext,0);
	};

	distributeByClause() {
	    return this.getTypedRuleContext(DistributeByClauseContext,0);
	};

	sortByClause() {
	    return this.getTypedRuleContext(SortByClauseContext,0);
	};

	limitClause() {
	    return this.getTypedRuleContext(LimitClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterQuerySpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitQuerySpecification(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitQuerySpecification(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class QuerySpecificationNointoContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_querySpecificationNointo;
        this.level = 0
    }

	SELECT() {
	    return this.getToken(MySqlParser.SELECT, 0);
	};

	fromClauseSuggester() {
	    return this.getTypedRuleContext(FromClauseSuggesterContext,0);
	};

	selectSpec() {
	    return this.getTypedRuleContext(SelectSpecContext,0);
	};

	selectElements() {
	    return this.getTypedRuleContext(SelectElementsContext,0);
	};

	fromClause() {
	    return this.getTypedRuleContext(FromClauseContext,0);
	};

	orderByClause() {
	    return this.getTypedRuleContext(OrderByClauseContext,0);
	};

	clusterByClause() {
	    return this.getTypedRuleContext(ClusterByClauseContext,0);
	};

	distributeByClause() {
	    return this.getTypedRuleContext(DistributeByClauseContext,0);
	};

	sortByClause() {
	    return this.getTypedRuleContext(SortByClauseContext,0);
	};

	limitClause() {
	    return this.getTypedRuleContext(LimitClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterQuerySpecificationNointo(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitQuerySpecificationNointo(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitQuerySpecificationNointo(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UnionParenthesisContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_unionParenthesis;
        this.unionType = null; // Token
    }

	UNION() {
	    return this.getToken(MySqlParser.UNION, 0);
	};

	queryExpressionNointo() {
	    return this.getTypedRuleContext(QueryExpressionNointoContext,0);
	};

	ALL() {
	    return this.getToken(MySqlParser.ALL, 0);
	};

	DISTINCT() {
	    return this.getToken(MySqlParser.DISTINCT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUnionParenthesis(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUnionParenthesis(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitUnionParenthesis(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UnionStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_unionStatement;
        this.unionType = null; // Token
    }

	UNION() {
	    return this.getToken(MySqlParser.UNION, 0);
	};

	querySpecificationNointo() {
	    return this.getTypedRuleContext(QuerySpecificationNointoContext,0);
	};

	queryExpressionNointo() {
	    return this.getTypedRuleContext(QueryExpressionNointoContext,0);
	};

	ALL() {
	    return this.getToken(MySqlParser.ALL, 0);
	};

	DISTINCT() {
	    return this.getToken(MySqlParser.DISTINCT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUnionStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUnionStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitUnionStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SelectSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_selectSpec;
    }

	selectSpecMysql = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SelectSpecMysqlContext);
	    } else {
	        return this.getTypedRuleContext(SelectSpecMysqlContext,i);
	    }
	};

	selectSpecInceptor() {
	    return this.getTypedRuleContext(SelectSpecInceptorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSelectSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSelectSpec(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitSelectSpec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SelectSpecMysqlContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_selectSpecMysql;
    }

	ALL() {
	    return this.getToken(MySqlParser.ALL, 0);
	};

	DISTINCT() {
	    return this.getToken(MySqlParser.DISTINCT, 0);
	};

	DISTINCTROW() {
	    return this.getToken(MySqlParser.DISTINCTROW, 0);
	};

	HIGH_PRIORITY() {
	    return this.getToken(MySqlParser.HIGH_PRIORITY, 0);
	};

	STRAIGHT_JOIN() {
	    return this.getToken(MySqlParser.STRAIGHT_JOIN, 0);
	};

	SQL_SMALL_RESULT() {
	    return this.getToken(MySqlParser.SQL_SMALL_RESULT, 0);
	};

	SQL_BIG_RESULT() {
	    return this.getToken(MySqlParser.SQL_BIG_RESULT, 0);
	};

	SQL_BUFFER_RESULT() {
	    return this.getToken(MySqlParser.SQL_BUFFER_RESULT, 0);
	};

	SQL_CACHE() {
	    return this.getToken(MySqlParser.SQL_CACHE, 0);
	};

	SQL_NO_CACHE() {
	    return this.getToken(MySqlParser.SQL_NO_CACHE, 0);
	};

	SQL_CALC_FOUND_ROWS() {
	    return this.getToken(MySqlParser.SQL_CALC_FOUND_ROWS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSelectSpecMysql(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSelectSpecMysql(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitSelectSpecMysql(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SelectSpecInceptorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_selectSpecInceptor;
    }

	ALL() {
	    return this.getToken(MySqlParser.ALL, 0);
	};

	DISTINCT() {
	    return this.getToken(MySqlParser.DISTINCT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSelectSpecInceptor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSelectSpecInceptor(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitSelectSpecInceptor(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SelectElementsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_selectElements;
        this.star = null; // Token
    }

	selectElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SelectElementContext);
	    } else {
	        return this.getTypedRuleContext(SelectElementContext,i);
	    }
	};

	STAR() {
	    return this.getToken(MySqlParser.STAR, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSelectElements(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSelectElements(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitSelectElements(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SelectElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_selectElement;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class SelectExpressionElementContext extends SelectElementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	baseElementAlias() {
	    return this.getTypedRuleContext(BaseElementAliasContext,0);
	};

	LOCAL_ID() {
	    return this.getToken(MySqlParser.LOCAL_ID, 0);
	};

	VAR_ASSIGN() {
	    return this.getToken(MySqlParser.VAR_ASSIGN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSelectExpressionElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSelectExpressionElement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitSelectExpressionElement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.SelectExpressionElementContext = SelectExpressionElementContext;

class SelectFunctionElementContext extends SelectElementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	functionCall() {
	    return this.getTypedRuleContext(FunctionCallContext,0);
	};

	baseElementAlias() {
	    return this.getTypedRuleContext(BaseElementAliasContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSelectFunctionElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSelectFunctionElement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitSelectFunctionElement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.SelectFunctionElementContext = SelectFunctionElementContext;

class SelectStarElementContext extends SelectElementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	fullId() {
	    return this.getTypedRuleContext(FullIdContext,0);
	};

	DOT() {
	    return this.getToken(MySqlParser.DOT, 0);
	};

	STAR() {
	    return this.getToken(MySqlParser.STAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSelectStarElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSelectStarElement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitSelectStarElement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.SelectStarElementContext = SelectStarElementContext;

class SelectColumnElementContext extends SelectElementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	funcColumnNameOptional() {
	    return this.getTypedRuleContext(FuncColumnNameOptionalContext,0);
	};

	baseElementAlias() {
	    return this.getTypedRuleContext(BaseElementAliasContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSelectColumnElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSelectColumnElement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitSelectColumnElement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.SelectColumnElementContext = SelectColumnElementContext;

class SelectIntoExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_selectIntoExpression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class SelectIntoVariablesContext extends SelectIntoExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	INTO() {
	    return this.getToken(MySqlParser.INTO, 0);
	};

	assignmentField = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AssignmentFieldContext);
	    } else {
	        return this.getTypedRuleContext(AssignmentFieldContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSelectIntoVariables(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSelectIntoVariables(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitSelectIntoVariables(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.SelectIntoVariablesContext = SelectIntoVariablesContext;

class SelectIntoTextFileContext extends SelectIntoExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.filename = null; // Token;
        this.charset = null; // CharsetNameContext;
        this.fieldsFormat = null; // Token;
        super.copyFrom(ctx);
    }

	INTO() {
	    return this.getToken(MySqlParser.INTO, 0);
	};

	OUTFILE() {
	    return this.getToken(MySqlParser.OUTFILE, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	CHARACTER() {
	    return this.getToken(MySqlParser.CHARACTER, 0);
	};

	SET() {
	    return this.getToken(MySqlParser.SET, 0);
	};

	LINES() {
	    return this.getToken(MySqlParser.LINES, 0);
	};

	charsetName() {
	    return this.getTypedRuleContext(CharsetNameContext,0);
	};

	FIELDS() {
	    return this.getToken(MySqlParser.FIELDS, 0);
	};

	COLUMNS() {
	    return this.getToken(MySqlParser.COLUMNS, 0);
	};

	selectFieldsInto = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SelectFieldsIntoContext);
	    } else {
	        return this.getTypedRuleContext(SelectFieldsIntoContext,i);
	    }
	};

	selectLinesInto = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SelectLinesIntoContext);
	    } else {
	        return this.getTypedRuleContext(SelectLinesIntoContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSelectIntoTextFile(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSelectIntoTextFile(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitSelectIntoTextFile(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.SelectIntoTextFileContext = SelectIntoTextFileContext;

class SelectIntoDumpFileContext extends SelectIntoExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	INTO() {
	    return this.getToken(MySqlParser.INTO, 0);
	};

	DUMPFILE() {
	    return this.getToken(MySqlParser.DUMPFILE, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSelectIntoDumpFile(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSelectIntoDumpFile(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitSelectIntoDumpFile(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.SelectIntoDumpFileContext = SelectIntoDumpFileContext;

class SelectIntoExprsContext extends SelectIntoExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	INTO() {
	    return this.getToken(MySqlParser.INTO, 0);
	};

	expressions() {
	    return this.getTypedRuleContext(ExpressionsContext,0);
	};

	BULK() {
	    return this.getToken(MySqlParser.BULK, 0);
	};

	COLLECT() {
	    return this.getToken(MySqlParser.COLLECT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSelectIntoExprs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSelectIntoExprs(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitSelectIntoExprs(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.SelectIntoExprsContext = SelectIntoExprsContext;

class SelectFieldsIntoContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_selectFieldsInto;
        this.terminationField = null; // Token
        this.enclosion = null; // Token
        this.escaping = null; // Token
    }

	TERMINATED() {
	    return this.getToken(MySqlParser.TERMINATED, 0);
	};

	BY() {
	    return this.getToken(MySqlParser.BY, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	ENCLOSED() {
	    return this.getToken(MySqlParser.ENCLOSED, 0);
	};

	OPTIONALLY() {
	    return this.getToken(MySqlParser.OPTIONALLY, 0);
	};

	ESCAPED() {
	    return this.getToken(MySqlParser.ESCAPED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSelectFieldsInto(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSelectFieldsInto(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitSelectFieldsInto(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SelectLinesIntoContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_selectLinesInto;
        this.starting = null; // Token
        this.terminationLine = null; // Token
    }

	STARTING() {
	    return this.getToken(MySqlParser.STARTING, 0);
	};

	BY() {
	    return this.getToken(MySqlParser.BY, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	TERMINATED() {
	    return this.getToken(MySqlParser.TERMINATED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSelectLinesInto(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSelectLinesInto(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitSelectLinesInto(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FromClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_fromClause;
        this.level = 0
    }

	FROM() {
	    return this.getToken(MySqlParser.FROM, 0);
	};

	tableSources() {
	    return this.getTypedRuleContext(TableSourcesContext,0);
	};

	whereExpressionOptional() {
	    return this.getTypedRuleContext(WhereExpressionOptionalContext,0);
	};

	hierarchyClause() {
	    return this.getTypedRuleContext(HierarchyClauseContext,0);
	};

	groupByClause() {
	    return this.getTypedRuleContext(GroupByClauseContext,0);
	};

	havingClause() {
	    return this.getTypedRuleContext(HavingClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterFromClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitFromClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitFromClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GroupByClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_groupByClause;
        this.level = 0
    }

	GROUP() {
	    return this.getToken(MySqlParser.GROUP, 0);
	};

	BY() {
	    return this.getToken(MySqlParser.BY, 0);
	};

	groupByItems() {
	    return this.getTypedRuleContext(GroupByItemsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterGroupByClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitGroupByClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitGroupByClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class HavingClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_havingClause;
        this.level = 0
    }

	HAVING() {
	    return this.getToken(MySqlParser.HAVING, 0);
	};

	expressionOptional() {
	    return this.getTypedRuleContext(ExpressionOptionalContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterHavingClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitHavingClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitHavingClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WhereExpressionOptionalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_whereExpressionOptional;
        this.level = 0
    }

	WHERE() {
	    return this.getToken(MySqlParser.WHERE, 0);
	};

	expressionOptional() {
	    return this.getTypedRuleContext(ExpressionOptionalContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterWhereExpressionOptional(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitWhereExpressionOptional(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitWhereExpressionOptional(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class HierarchyClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_hierarchyClause;
        this.level = 0
        this.startExpr = null; // ExpressionOptionalContext
        this.connectExpr = null; // ExpressionOptionalContext
    }

	CONNECT() {
	    return this.getToken(MySqlParser.CONNECT, 0);
	};

	BY() {
	    return this.getToken(MySqlParser.BY, 0);
	};

	expressionOptional = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionOptionalContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionOptionalContext,i);
	    }
	};

	START() {
	    return this.getToken(MySqlParser.START, 0);
	};

	WITH() {
	    return this.getToken(MySqlParser.WITH, 0);
	};

	NOCYCLE() {
	    return this.getToken(MySqlParser.NOCYCLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterHierarchyClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitHierarchyClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitHierarchyClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GroupByItemsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_groupByItems;
    }

	groupByItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GroupByItemContext);
	    } else {
	        return this.getTypedRuleContext(GroupByItemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	WITH() {
	    return this.getToken(MySqlParser.WITH, 0);
	};

	ROLLUP() {
	    return this.getToken(MySqlParser.ROLLUP, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	CUBE() {
	    return this.getToken(MySqlParser.CUBE, 0);
	};

	GROUPING() {
	    return this.getToken(MySqlParser.GROUPING, 0);
	};

	SETS() {
	    return this.getToken(MySqlParser.SETS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterGroupByItems(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitGroupByItems(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitGroupByItems(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GroupByItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_groupByItem;
        this.order = null; // Token
    }

	expressionOptional() {
	    return this.getTypedRuleContext(ExpressionOptionalContext,0);
	};

	ASC() {
	    return this.getToken(MySqlParser.ASC, 0);
	};

	DESC() {
	    return this.getToken(MySqlParser.DESC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterGroupByItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitGroupByItem(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitGroupByItem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LimitClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_limitClause;
        this.level = 0
    }

	limitClauseMysql() {
	    return this.getTypedRuleContext(LimitClauseMysqlContext,0);
	};

	limitClauseInceptor() {
	    return this.getTypedRuleContext(LimitClauseInceptorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLimitClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLimitClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitLimitClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LimitClauseMysqlContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_limitClauseMysql;
        this.offset = null; // LimitClauseAtomContext
        this.limit = null; // LimitClauseAtomContext
    }

	LIMIT() {
	    return this.getToken(MySqlParser.LIMIT, 0);
	};

	OFFSET() {
	    return this.getToken(MySqlParser.OFFSET, 0);
	};

	limitClauseAtom = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LimitClauseAtomContext);
	    } else {
	        return this.getTypedRuleContext(LimitClauseAtomContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(MySqlParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLimitClauseMysql(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLimitClauseMysql(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitLimitClauseMysql(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LimitClauseAtomContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_limitClauseAtom;
    }

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	mysqlVariable() {
	    return this.getTypedRuleContext(MysqlVariableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLimitClauseAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLimitClauseAtom(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitLimitClauseAtom(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LimitClauseInceptorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_limitClauseInceptor;
    }

	LIMIT() {
	    return this.getToken(MySqlParser.LIMIT, 0);
	};

	decimalLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DecimalLiteralContext);
	    } else {
	        return this.getTypedRuleContext(DecimalLiteralContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(MySqlParser.COMMA, 0);
	};

	FETCH() {
	    return this.getToken(MySqlParser.FETCH, 0);
	};

	FIRST() {
	    return this.getToken(MySqlParser.FIRST, 0);
	};

	ROWS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.ROWS);
	    } else {
	        return this.getToken(MySqlParser.ROWS, i);
	    }
	};


	ONLY() {
	    return this.getToken(MySqlParser.ONLY, 0);
	};

	NEXT() {
	    return this.getToken(MySqlParser.NEXT, 0);
	};

	OFFSET() {
	    return this.getToken(MySqlParser.OFFSET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLimitClauseInceptor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLimitClauseInceptor(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitLimitClauseInceptor(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StartTransactionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_startTransaction;
    }

	START() {
	    return this.getToken(MySqlParser.START, 0);
	};

	TRANSACTION() {
	    return this.getToken(MySqlParser.TRANSACTION, 0);
	};

	transactionMode = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TransactionModeContext);
	    } else {
	        return this.getTypedRuleContext(TransactionModeContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterStartTransaction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitStartTransaction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitStartTransaction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BeginWorkContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_beginWork;
    }

	BEGIN() {
	    return this.getToken(MySqlParser.BEGIN, 0);
	};

	WORK() {
	    return this.getToken(MySqlParser.WORK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterBeginWork(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitBeginWork(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitBeginWork(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CommitWorkContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_commitWork;
        this.nochain = null; // Token
        this.norelease = null; // Token
    }

	COMMIT() {
	    return this.getToken(MySqlParser.COMMIT, 0);
	};

	WORK() {
	    return this.getToken(MySqlParser.WORK, 0);
	};

	AND() {
	    return this.getToken(MySqlParser.AND, 0);
	};

	CHAIN() {
	    return this.getToken(MySqlParser.CHAIN, 0);
	};

	RELEASE() {
	    return this.getToken(MySqlParser.RELEASE, 0);
	};

	NO = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.NO);
	    } else {
	        return this.getToken(MySqlParser.NO, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCommitWork(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCommitWork(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitCommitWork(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RollbackWorkContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_rollbackWork;
        this.nochain = null; // Token
        this.norelease = null; // Token
    }

	ROLLBACK() {
	    return this.getToken(MySqlParser.ROLLBACK, 0);
	};

	WORK() {
	    return this.getToken(MySqlParser.WORK, 0);
	};

	AND() {
	    return this.getToken(MySqlParser.AND, 0);
	};

	CHAIN() {
	    return this.getToken(MySqlParser.CHAIN, 0);
	};

	RELEASE() {
	    return this.getToken(MySqlParser.RELEASE, 0);
	};

	NO = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.NO);
	    } else {
	        return this.getToken(MySqlParser.NO, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterRollbackWork(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitRollbackWork(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitRollbackWork(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SavepointStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_savepointStatement;
    }

	SAVEPOINT() {
	    return this.getToken(MySqlParser.SAVEPOINT, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSavepointStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSavepointStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitSavepointStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RollbackStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_rollbackStatement;
    }

	ROLLBACK() {
	    return this.getToken(MySqlParser.ROLLBACK, 0);
	};

	TO() {
	    return this.getToken(MySqlParser.TO, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	WORK() {
	    return this.getToken(MySqlParser.WORK, 0);
	};

	SAVEPOINT() {
	    return this.getToken(MySqlParser.SAVEPOINT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterRollbackStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitRollbackStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitRollbackStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReleaseStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_releaseStatement;
    }

	RELEASE() {
	    return this.getToken(MySqlParser.RELEASE, 0);
	};

	SAVEPOINT() {
	    return this.getToken(MySqlParser.SAVEPOINT, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterReleaseStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitReleaseStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitReleaseStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LockTablesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_lockTables;
    }

	LOCK() {
	    return this.getToken(MySqlParser.LOCK, 0);
	};

	TABLES() {
	    return this.getToken(MySqlParser.TABLES, 0);
	};

	lockTableElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LockTableElementContext);
	    } else {
	        return this.getTypedRuleContext(LockTableElementContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLockTables(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLockTables(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitLockTables(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UnlockTablesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_unlockTables;
    }

	UNLOCK() {
	    return this.getToken(MySqlParser.UNLOCK, 0);
	};

	TABLES() {
	    return this.getToken(MySqlParser.TABLES, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUnlockTables(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUnlockTables(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitUnlockTables(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TransactionStatementInceptorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_transactionStatementInceptor;
    }

	BEGIN() {
	    return this.getToken(MySqlParser.BEGIN, 0);
	};

	START() {
	    return this.getToken(MySqlParser.START, 0);
	};

	TRANSACTION() {
	    return this.getToken(MySqlParser.TRANSACTION, 0);
	};

	WORK() {
	    return this.getToken(MySqlParser.WORK, 0);
	};

	COMMIT() {
	    return this.getToken(MySqlParser.COMMIT, 0);
	};

	ROLLBACK() {
	    return this.getToken(MySqlParser.ROLLBACK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTransactionStatementInceptor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTransactionStatementInceptor(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitTransactionStatementInceptor(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SetAutocommitStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_setAutocommitStatement;
        this.autocommitValue = null; // Token
    }

	SET() {
	    return this.getToken(MySqlParser.SET, 0);
	};

	AUTOCOMMIT() {
	    return this.getToken(MySqlParser.AUTOCOMMIT, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	ZERO_DECIMAL() {
	    return this.getToken(MySqlParser.ZERO_DECIMAL, 0);
	};

	ONE_DECIMAL() {
	    return this.getToken(MySqlParser.ONE_DECIMAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSetAutocommitStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSetAutocommitStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitSetAutocommitStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SetTransactionStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_setTransactionStatement;
    }

	setTransactionStatementMysql() {
	    return this.getTypedRuleContext(SetTransactionStatementMysqlContext,0);
	};

	setTransactionStatementInceptor() {
	    return this.getTypedRuleContext(SetTransactionStatementInceptorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSetTransactionStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSetTransactionStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitSetTransactionStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SetTransactionStatementInceptorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_setTransactionStatementInceptor;
    }

	SET() {
	    return this.getToken(MySqlParser.SET, 0);
	};

	TRANSACTION() {
	    return this.getToken(MySqlParser.TRANSACTION, 0);
	};

	READ() {
	    return this.getToken(MySqlParser.READ, 0);
	};

	ONLY() {
	    return this.getToken(MySqlParser.ONLY, 0);
	};

	WRITE() {
	    return this.getToken(MySqlParser.WRITE, 0);
	};

	ISOLATION() {
	    return this.getToken(MySqlParser.ISOLATION, 0);
	};

	LEVEL() {
	    return this.getToken(MySqlParser.LEVEL, 0);
	};

	SERIALIZABLE() {
	    return this.getToken(MySqlParser.SERIALIZABLE, 0);
	};

	COMMITTED() {
	    return this.getToken(MySqlParser.COMMITTED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSetTransactionStatementInceptor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSetTransactionStatementInceptor(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitSetTransactionStatementInceptor(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SetTransactionStatementMysqlContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_setTransactionStatementMysql;
        this.transactionContext = null; // Token
    }

	SET() {
	    return this.getToken(MySqlParser.SET, 0);
	};

	TRANSACTION() {
	    return this.getToken(MySqlParser.TRANSACTION, 0);
	};

	transactionOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TransactionOptionContext);
	    } else {
	        return this.getTypedRuleContext(TransactionOptionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	GLOBAL() {
	    return this.getToken(MySqlParser.GLOBAL, 0);
	};

	SESSION() {
	    return this.getToken(MySqlParser.SESSION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSetTransactionStatementMysql(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSetTransactionStatementMysql(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitSetTransactionStatementMysql(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TransactionModeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_transactionMode;
    }

	WITH() {
	    return this.getToken(MySqlParser.WITH, 0);
	};

	CONSISTENT() {
	    return this.getToken(MySqlParser.CONSISTENT, 0);
	};

	SNAPSHOT() {
	    return this.getToken(MySqlParser.SNAPSHOT, 0);
	};

	READ() {
	    return this.getToken(MySqlParser.READ, 0);
	};

	WRITE() {
	    return this.getToken(MySqlParser.WRITE, 0);
	};

	ONLY() {
	    return this.getToken(MySqlParser.ONLY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTransactionMode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTransactionMode(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitTransactionMode(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LockTableElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_lockTableElement;
    }

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	lockAction() {
	    return this.getTypedRuleContext(LockActionContext,0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	AS() {
	    return this.getToken(MySqlParser.AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLockTableElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLockTableElement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitLockTableElement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LockActionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_lockAction;
    }

	READ() {
	    return this.getToken(MySqlParser.READ, 0);
	};

	LOCAL() {
	    return this.getToken(MySqlParser.LOCAL, 0);
	};

	WRITE() {
	    return this.getToken(MySqlParser.WRITE, 0);
	};

	LOW_PRIORITY() {
	    return this.getToken(MySqlParser.LOW_PRIORITY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLockAction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLockAction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitLockAction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TransactionOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_transactionOption;
    }

	ISOLATION() {
	    return this.getToken(MySqlParser.ISOLATION, 0);
	};

	LEVEL() {
	    return this.getToken(MySqlParser.LEVEL, 0);
	};

	transactionLevel() {
	    return this.getTypedRuleContext(TransactionLevelContext,0);
	};

	READ() {
	    return this.getToken(MySqlParser.READ, 0);
	};

	WRITE() {
	    return this.getToken(MySqlParser.WRITE, 0);
	};

	ONLY() {
	    return this.getToken(MySqlParser.ONLY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTransactionOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTransactionOption(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitTransactionOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TransactionLevelContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_transactionLevel;
    }

	REPEATABLE() {
	    return this.getToken(MySqlParser.REPEATABLE, 0);
	};

	READ() {
	    return this.getToken(MySqlParser.READ, 0);
	};

	COMMITTED() {
	    return this.getToken(MySqlParser.COMMITTED, 0);
	};

	UNCOMMITTED() {
	    return this.getToken(MySqlParser.UNCOMMITTED, 0);
	};

	SERIALIZABLE() {
	    return this.getToken(MySqlParser.SERIALIZABLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTransactionLevel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTransactionLevel(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitTransactionLevel(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ChangeMasterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_changeMaster;
    }

	CHANGE() {
	    return this.getToken(MySqlParser.CHANGE, 0);
	};

	MASTER() {
	    return this.getToken(MySqlParser.MASTER, 0);
	};

	TO() {
	    return this.getToken(MySqlParser.TO, 0);
	};

	masterOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MasterOptionContext);
	    } else {
	        return this.getTypedRuleContext(MasterOptionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	channelOption() {
	    return this.getTypedRuleContext(ChannelOptionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterChangeMaster(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitChangeMaster(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitChangeMaster(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ChangeReplicationFilterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_changeReplicationFilter;
    }

	CHANGE() {
	    return this.getToken(MySqlParser.CHANGE, 0);
	};

	REPLICATION() {
	    return this.getToken(MySqlParser.REPLICATION, 0);
	};

	FILTER() {
	    return this.getToken(MySqlParser.FILTER, 0);
	};

	replicationFilter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ReplicationFilterContext);
	    } else {
	        return this.getTypedRuleContext(ReplicationFilterContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterChangeReplicationFilter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitChangeReplicationFilter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitChangeReplicationFilter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PurgeBinaryLogsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_purgeBinaryLogs;
        this.purgeFormat = null; // Token
        this.fileName = null; // Token
        this.timeValue = null; // Token
    }

	PURGE() {
	    return this.getToken(MySqlParser.PURGE, 0);
	};

	LOGS() {
	    return this.getToken(MySqlParser.LOGS, 0);
	};

	BINARY() {
	    return this.getToken(MySqlParser.BINARY, 0);
	};

	MASTER() {
	    return this.getToken(MySqlParser.MASTER, 0);
	};

	TO() {
	    return this.getToken(MySqlParser.TO, 0);
	};

	BEFORE() {
	    return this.getToken(MySqlParser.BEFORE, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPurgeBinaryLogs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPurgeBinaryLogs(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitPurgeBinaryLogs(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResetMasterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_resetMaster;
    }

	RESET() {
	    return this.getToken(MySqlParser.RESET, 0);
	};

	MASTER() {
	    return this.getToken(MySqlParser.MASTER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterResetMaster(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitResetMaster(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitResetMaster(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResetSlaveContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_resetSlave;
    }

	RESET() {
	    return this.getToken(MySqlParser.RESET, 0);
	};

	SLAVE() {
	    return this.getToken(MySqlParser.SLAVE, 0);
	};

	ALL() {
	    return this.getToken(MySqlParser.ALL, 0);
	};

	channelOption() {
	    return this.getTypedRuleContext(ChannelOptionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterResetSlave(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitResetSlave(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitResetSlave(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StartSlaveContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_startSlave;
    }

	START() {
	    return this.getToken(MySqlParser.START, 0);
	};

	SLAVE() {
	    return this.getToken(MySqlParser.SLAVE, 0);
	};

	threadType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ThreadTypeContext);
	    } else {
	        return this.getTypedRuleContext(ThreadTypeContext,i);
	    }
	};

	UNTIL() {
	    return this.getToken(MySqlParser.UNTIL, 0);
	};

	untilOption() {
	    return this.getTypedRuleContext(UntilOptionContext,0);
	};

	connectionOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConnectionOptionContext);
	    } else {
	        return this.getTypedRuleContext(ConnectionOptionContext,i);
	    }
	};

	channelOption() {
	    return this.getTypedRuleContext(ChannelOptionContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterStartSlave(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitStartSlave(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitStartSlave(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StopSlaveContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_stopSlave;
    }

	STOP() {
	    return this.getToken(MySqlParser.STOP, 0);
	};

	SLAVE() {
	    return this.getToken(MySqlParser.SLAVE, 0);
	};

	threadType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ThreadTypeContext);
	    } else {
	        return this.getTypedRuleContext(ThreadTypeContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterStopSlave(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitStopSlave(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitStopSlave(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StartGroupReplicationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_startGroupReplication;
    }

	START() {
	    return this.getToken(MySqlParser.START, 0);
	};

	GROUP_REPLICATION() {
	    return this.getToken(MySqlParser.GROUP_REPLICATION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterStartGroupReplication(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitStartGroupReplication(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitStartGroupReplication(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StopGroupReplicationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_stopGroupReplication;
    }

	STOP() {
	    return this.getToken(MySqlParser.STOP, 0);
	};

	GROUP_REPLICATION() {
	    return this.getToken(MySqlParser.GROUP_REPLICATION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterStopGroupReplication(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitStopGroupReplication(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitStopGroupReplication(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MasterOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_masterOption;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class MasterStringOptionContext extends MasterOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	stringMasterOption() {
	    return this.getTypedRuleContext(StringMasterOptionContext,0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterMasterStringOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitMasterStringOption(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitMasterStringOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.MasterStringOptionContext = MasterStringOptionContext;

class MasterRealOptionContext extends MasterOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	MASTER_HEARTBEAT_PERIOD() {
	    return this.getToken(MySqlParser.MASTER_HEARTBEAT_PERIOD, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	REAL_LITERAL() {
	    return this.getToken(MySqlParser.REAL_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterMasterRealOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitMasterRealOption(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitMasterRealOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.MasterRealOptionContext = MasterRealOptionContext;

class MasterBoolOptionContext extends MasterOptionContext {

    constructor(parser, ctx) {
        super(parser);
        this.boolVal = null; // Token;
        super.copyFrom(ctx);
    }

	boolMasterOption() {
	    return this.getTypedRuleContext(BoolMasterOptionContext,0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	ZERO_DECIMAL() {
	    return this.getToken(MySqlParser.ZERO_DECIMAL, 0);
	};

	ONE_DECIMAL() {
	    return this.getToken(MySqlParser.ONE_DECIMAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterMasterBoolOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitMasterBoolOption(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitMasterBoolOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.MasterBoolOptionContext = MasterBoolOptionContext;

class MasterUidListOptionContext extends MasterOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	IGNORE_SERVER_IDS() {
	    return this.getToken(MySqlParser.IGNORE_SERVER_IDS, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	uid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidContext);
	    } else {
	        return this.getTypedRuleContext(UidContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterMasterUidListOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitMasterUidListOption(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitMasterUidListOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.MasterUidListOptionContext = MasterUidListOptionContext;

class MasterDecimalOptionContext extends MasterOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	decimalMasterOption() {
	    return this.getTypedRuleContext(DecimalMasterOptionContext,0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterMasterDecimalOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitMasterDecimalOption(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitMasterDecimalOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.MasterDecimalOptionContext = MasterDecimalOptionContext;

class StringMasterOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_stringMasterOption;
    }

	MASTER_BIND() {
	    return this.getToken(MySqlParser.MASTER_BIND, 0);
	};

	MASTER_HOST() {
	    return this.getToken(MySqlParser.MASTER_HOST, 0);
	};

	MASTER_USER() {
	    return this.getToken(MySqlParser.MASTER_USER, 0);
	};

	MASTER_PASSWORD() {
	    return this.getToken(MySqlParser.MASTER_PASSWORD, 0);
	};

	MASTER_LOG_FILE() {
	    return this.getToken(MySqlParser.MASTER_LOG_FILE, 0);
	};

	RELAY_LOG_FILE() {
	    return this.getToken(MySqlParser.RELAY_LOG_FILE, 0);
	};

	MASTER_SSL_CA() {
	    return this.getToken(MySqlParser.MASTER_SSL_CA, 0);
	};

	MASTER_SSL_CAPATH() {
	    return this.getToken(MySqlParser.MASTER_SSL_CAPATH, 0);
	};

	MASTER_SSL_CERT() {
	    return this.getToken(MySqlParser.MASTER_SSL_CERT, 0);
	};

	MASTER_SSL_CRL() {
	    return this.getToken(MySqlParser.MASTER_SSL_CRL, 0);
	};

	MASTER_SSL_CRLPATH() {
	    return this.getToken(MySqlParser.MASTER_SSL_CRLPATH, 0);
	};

	MASTER_SSL_KEY() {
	    return this.getToken(MySqlParser.MASTER_SSL_KEY, 0);
	};

	MASTER_SSL_CIPHER() {
	    return this.getToken(MySqlParser.MASTER_SSL_CIPHER, 0);
	};

	MASTER_TLS_VERSION() {
	    return this.getToken(MySqlParser.MASTER_TLS_VERSION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterStringMasterOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitStringMasterOption(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitStringMasterOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DecimalMasterOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_decimalMasterOption;
    }

	MASTER_PORT() {
	    return this.getToken(MySqlParser.MASTER_PORT, 0);
	};

	MASTER_CONNECT_RETRY() {
	    return this.getToken(MySqlParser.MASTER_CONNECT_RETRY, 0);
	};

	MASTER_RETRY_COUNT() {
	    return this.getToken(MySqlParser.MASTER_RETRY_COUNT, 0);
	};

	MASTER_DELAY() {
	    return this.getToken(MySqlParser.MASTER_DELAY, 0);
	};

	MASTER_LOG_POS() {
	    return this.getToken(MySqlParser.MASTER_LOG_POS, 0);
	};

	RELAY_LOG_POS() {
	    return this.getToken(MySqlParser.RELAY_LOG_POS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDecimalMasterOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDecimalMasterOption(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitDecimalMasterOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BoolMasterOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_boolMasterOption;
    }

	MASTER_AUTO_POSITION() {
	    return this.getToken(MySqlParser.MASTER_AUTO_POSITION, 0);
	};

	MASTER_SSL() {
	    return this.getToken(MySqlParser.MASTER_SSL, 0);
	};

	MASTER_SSL_VERIFY_SERVER_CERT() {
	    return this.getToken(MySqlParser.MASTER_SSL_VERIFY_SERVER_CERT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterBoolMasterOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitBoolMasterOption(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitBoolMasterOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ChannelOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_channelOption;
    }

	FOR() {
	    return this.getToken(MySqlParser.FOR, 0);
	};

	CHANNEL() {
	    return this.getToken(MySqlParser.CHANNEL, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterChannelOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitChannelOption(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitChannelOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReplicationFilterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_replicationFilter;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class WildIgnoreTableReplicationContext extends ReplicationFilterContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	REPLICATE_WILD_IGNORE_TABLE() {
	    return this.getToken(MySqlParser.REPLICATE_WILD_IGNORE_TABLE, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	simpleStrings() {
	    return this.getTypedRuleContext(SimpleStringsContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterWildIgnoreTableReplication(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitWildIgnoreTableReplication(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitWildIgnoreTableReplication(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.WildIgnoreTableReplicationContext = WildIgnoreTableReplicationContext;

class DoTableReplicationContext extends ReplicationFilterContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	REPLICATE_DO_TABLE() {
	    return this.getToken(MySqlParser.REPLICATE_DO_TABLE, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	tables() {
	    return this.getTypedRuleContext(TablesContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDoTableReplication(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDoTableReplication(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitDoTableReplication(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.DoTableReplicationContext = DoTableReplicationContext;

class IgnoreTableReplicationContext extends ReplicationFilterContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	REPLICATE_IGNORE_TABLE() {
	    return this.getToken(MySqlParser.REPLICATE_IGNORE_TABLE, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	tables() {
	    return this.getTypedRuleContext(TablesContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterIgnoreTableReplication(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitIgnoreTableReplication(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitIgnoreTableReplication(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.IgnoreTableReplicationContext = IgnoreTableReplicationContext;

class RewriteDbReplicationContext extends ReplicationFilterContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	REPLICATE_REWRITE_DB() {
	    return this.getToken(MySqlParser.REPLICATE_REWRITE_DB, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	tablePair = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TablePairContext);
	    } else {
	        return this.getTypedRuleContext(TablePairContext,i);
	    }
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterRewriteDbReplication(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitRewriteDbReplication(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitRewriteDbReplication(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.RewriteDbReplicationContext = RewriteDbReplicationContext;

class DoDbReplicationContext extends ReplicationFilterContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	REPLICATE_DO_DB() {
	    return this.getToken(MySqlParser.REPLICATE_DO_DB, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDoDbReplication(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDoDbReplication(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitDoDbReplication(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.DoDbReplicationContext = DoDbReplicationContext;

class IgnoreDbReplicationContext extends ReplicationFilterContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	REPLICATE_IGNORE_DB() {
	    return this.getToken(MySqlParser.REPLICATE_IGNORE_DB, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterIgnoreDbReplication(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitIgnoreDbReplication(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitIgnoreDbReplication(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.IgnoreDbReplicationContext = IgnoreDbReplicationContext;

class WildDoTableReplicationContext extends ReplicationFilterContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	REPLICATE_WILD_DO_TABLE() {
	    return this.getToken(MySqlParser.REPLICATE_WILD_DO_TABLE, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	simpleStrings() {
	    return this.getTypedRuleContext(SimpleStringsContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterWildDoTableReplication(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitWildDoTableReplication(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitWildDoTableReplication(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.WildDoTableReplicationContext = WildDoTableReplicationContext;

class TablePairContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_tablePair;
        this.firstTable = null; // TableNameContext
        this.secondTable = null; // TableNameContext
    }

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	COMMA() {
	    return this.getToken(MySqlParser.COMMA, 0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	tableName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TableNameContext);
	    } else {
	        return this.getTypedRuleContext(TableNameContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTablePair(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTablePair(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitTablePair(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ThreadTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_threadType;
    }

	IO_THREAD() {
	    return this.getToken(MySqlParser.IO_THREAD, 0);
	};

	SQL_THREAD() {
	    return this.getToken(MySqlParser.SQL_THREAD, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterThreadType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitThreadType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitThreadType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UntilOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_untilOption;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class GtidsUntilOptionContext extends UntilOptionContext {

    constructor(parser, ctx) {
        super(parser);
        this.gtids = null; // Token;
        super.copyFrom(ctx);
    }

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	gtuidSet() {
	    return this.getTypedRuleContext(GtuidSetContext,0);
	};

	SQL_BEFORE_GTIDS() {
	    return this.getToken(MySqlParser.SQL_BEFORE_GTIDS, 0);
	};

	SQL_AFTER_GTIDS() {
	    return this.getToken(MySqlParser.SQL_AFTER_GTIDS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterGtidsUntilOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitGtidsUntilOption(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitGtidsUntilOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.GtidsUntilOptionContext = GtidsUntilOptionContext;

class SqlGapsUntilOptionContext extends UntilOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SQL_AFTER_MTS_GAPS() {
	    return this.getToken(MySqlParser.SQL_AFTER_MTS_GAPS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSqlGapsUntilOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSqlGapsUntilOption(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitSqlGapsUntilOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.SqlGapsUntilOptionContext = SqlGapsUntilOptionContext;

class MasterLogUntilOptionContext extends UntilOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	MASTER_LOG_FILE() {
	    return this.getToken(MySqlParser.MASTER_LOG_FILE, 0);
	};

	EQUAL_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.EQUAL_SYMBOL);
	    } else {
	        return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
	    }
	};


	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	COMMA() {
	    return this.getToken(MySqlParser.COMMA, 0);
	};

	MASTER_LOG_POS() {
	    return this.getToken(MySqlParser.MASTER_LOG_POS, 0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterMasterLogUntilOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitMasterLogUntilOption(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitMasterLogUntilOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.MasterLogUntilOptionContext = MasterLogUntilOptionContext;

class RelayLogUntilOptionContext extends UntilOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	RELAY_LOG_FILE() {
	    return this.getToken(MySqlParser.RELAY_LOG_FILE, 0);
	};

	EQUAL_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.EQUAL_SYMBOL);
	    } else {
	        return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
	    }
	};


	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	COMMA() {
	    return this.getToken(MySqlParser.COMMA, 0);
	};

	RELAY_LOG_POS() {
	    return this.getToken(MySqlParser.RELAY_LOG_POS, 0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterRelayLogUntilOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitRelayLogUntilOption(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitRelayLogUntilOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.RelayLogUntilOptionContext = RelayLogUntilOptionContext;

class ConnectionOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_connectionOption;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class PluginDirConnectionOptionContext extends ConnectionOptionContext {

    constructor(parser, ctx) {
        super(parser);
        this.conOptPluginDir = null; // Token;
        super.copyFrom(ctx);
    }

	PLUGIN_DIR() {
	    return this.getToken(MySqlParser.PLUGIN_DIR, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPluginDirConnectionOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPluginDirConnectionOption(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitPluginDirConnectionOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.PluginDirConnectionOptionContext = PluginDirConnectionOptionContext;

class UserConnectionOptionContext extends ConnectionOptionContext {

    constructor(parser, ctx) {
        super(parser);
        this.conOptUser = null; // Token;
        super.copyFrom(ctx);
    }

	USER() {
	    return this.getToken(MySqlParser.USER, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUserConnectionOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUserConnectionOption(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitUserConnectionOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.UserConnectionOptionContext = UserConnectionOptionContext;

class DefaultAuthConnectionOptionContext extends ConnectionOptionContext {

    constructor(parser, ctx) {
        super(parser);
        this.conOptDefAuth = null; // Token;
        super.copyFrom(ctx);
    }

	DEFAULT_AUTH() {
	    return this.getToken(MySqlParser.DEFAULT_AUTH, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDefaultAuthConnectionOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDefaultAuthConnectionOption(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitDefaultAuthConnectionOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.DefaultAuthConnectionOptionContext = DefaultAuthConnectionOptionContext;

class PasswordConnectionOptionContext extends ConnectionOptionContext {

    constructor(parser, ctx) {
        super(parser);
        this.conOptPassword = null; // Token;
        super.copyFrom(ctx);
    }

	PASSWORD() {
	    return this.getToken(MySqlParser.PASSWORD, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPasswordConnectionOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPasswordConnectionOption(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitPasswordConnectionOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.PasswordConnectionOptionContext = PasswordConnectionOptionContext;

class GtuidSetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_gtuidSet;
    }

	uuidSet = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UuidSetContext);
	    } else {
	        return this.getTypedRuleContext(UuidSetContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterGtuidSet(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitGtuidSet(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitGtuidSet(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class XaStartTransactionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_xaStartTransaction;
        this.xaStart = null; // Token
        this.xaAction = null; // Token
    }

	XA() {
	    return this.getToken(MySqlParser.XA, 0);
	};

	xid() {
	    return this.getTypedRuleContext(XidContext,0);
	};

	START() {
	    return this.getToken(MySqlParser.START, 0);
	};

	BEGIN() {
	    return this.getToken(MySqlParser.BEGIN, 0);
	};

	JOIN() {
	    return this.getToken(MySqlParser.JOIN, 0);
	};

	RESUME() {
	    return this.getToken(MySqlParser.RESUME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterXaStartTransaction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitXaStartTransaction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitXaStartTransaction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class XaEndTransactionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_xaEndTransaction;
    }

	XA() {
	    return this.getToken(MySqlParser.XA, 0);
	};

	END() {
	    return this.getToken(MySqlParser.END, 0);
	};

	xid() {
	    return this.getTypedRuleContext(XidContext,0);
	};

	SUSPEND() {
	    return this.getToken(MySqlParser.SUSPEND, 0);
	};

	FOR() {
	    return this.getToken(MySqlParser.FOR, 0);
	};

	MIGRATE() {
	    return this.getToken(MySqlParser.MIGRATE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterXaEndTransaction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitXaEndTransaction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitXaEndTransaction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class XaPrepareStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_xaPrepareStatement;
    }

	XA() {
	    return this.getToken(MySqlParser.XA, 0);
	};

	PREPARE() {
	    return this.getToken(MySqlParser.PREPARE, 0);
	};

	xid() {
	    return this.getTypedRuleContext(XidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterXaPrepareStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitXaPrepareStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitXaPrepareStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class XaCommitWorkContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_xaCommitWork;
    }

	XA() {
	    return this.getToken(MySqlParser.XA, 0);
	};

	COMMIT() {
	    return this.getToken(MySqlParser.COMMIT, 0);
	};

	xid() {
	    return this.getTypedRuleContext(XidContext,0);
	};

	ONE() {
	    return this.getToken(MySqlParser.ONE, 0);
	};

	PHASE() {
	    return this.getToken(MySqlParser.PHASE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterXaCommitWork(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitXaCommitWork(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitXaCommitWork(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class XaRollbackWorkContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_xaRollbackWork;
    }

	XA() {
	    return this.getToken(MySqlParser.XA, 0);
	};

	ROLLBACK() {
	    return this.getToken(MySqlParser.ROLLBACK, 0);
	};

	xid() {
	    return this.getTypedRuleContext(XidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterXaRollbackWork(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitXaRollbackWork(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitXaRollbackWork(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class XaRecoverWorkContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_xaRecoverWork;
    }

	XA() {
	    return this.getToken(MySqlParser.XA, 0);
	};

	RECOVER() {
	    return this.getToken(MySqlParser.RECOVER, 0);
	};

	CONVERT() {
	    return this.getToken(MySqlParser.CONVERT, 0);
	};

	xid() {
	    return this.getTypedRuleContext(XidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterXaRecoverWork(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitXaRecoverWork(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitXaRecoverWork(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrepareStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_prepareStatement;
        this.query = null; // Token
        this.variable = null; // Token
    }

	PREPARE() {
	    return this.getToken(MySqlParser.PREPARE, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	FROM() {
	    return this.getToken(MySqlParser.FROM, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	LOCAL_ID() {
	    return this.getToken(MySqlParser.LOCAL_ID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPrepareStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPrepareStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitPrepareStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExecuteStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_executeStatement;
    }

	EXECUTE() {
	    return this.getToken(MySqlParser.EXECUTE, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	USING() {
	    return this.getToken(MySqlParser.USING, 0);
	};

	userVariables() {
	    return this.getTypedRuleContext(UserVariablesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterExecuteStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitExecuteStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitExecuteStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DeallocatePrepareContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_deallocatePrepare;
        this.dropFormat = null; // Token
    }

	PREPARE() {
	    return this.getToken(MySqlParser.PREPARE, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	DEALLOCATE() {
	    return this.getToken(MySqlParser.DEALLOCATE, 0);
	};

	DROP() {
	    return this.getToken(MySqlParser.DROP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDeallocatePrepare(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDeallocatePrepare(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitDeallocatePrepare(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RoutineBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_routineBody;
    }

	blockStatement() {
	    return this.getTypedRuleContext(BlockStatementContext,0);
	};

	sqlStatement() {
	    return this.getTypedRuleContext(SqlStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterRoutineBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitRoutineBody(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitRoutineBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BlockStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_blockStatement;
    }

	BEGIN() {
	    return this.getToken(MySqlParser.BEGIN, 0);
	};

	END() {
	    return this.getToken(MySqlParser.END, 0);
	};

	uid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidContext);
	    } else {
	        return this.getTypedRuleContext(UidContext,i);
	    }
	};

	COLON_SYMB() {
	    return this.getToken(MySqlParser.COLON_SYMB, 0);
	};

	declareVariable = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DeclareVariableContext);
	    } else {
	        return this.getTypedRuleContext(DeclareVariableContext,i);
	    }
	};

	SEMI = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.SEMI);
	    } else {
	        return this.getToken(MySqlParser.SEMI, i);
	    }
	};


	declareCondition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DeclareConditionContext);
	    } else {
	        return this.getTypedRuleContext(DeclareConditionContext,i);
	    }
	};

	declareCursor = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DeclareCursorContext);
	    } else {
	        return this.getTypedRuleContext(DeclareCursorContext,i);
	    }
	};

	declareHandler = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DeclareHandlerContext);
	    } else {
	        return this.getTypedRuleContext(DeclareHandlerContext,i);
	    }
	};

	declareRowDataType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DeclareRowDataTypeContext);
	    } else {
	        return this.getTypedRuleContext(DeclareRowDataTypeContext,i);
	    }
	};

	procedureSqlStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ProcedureSqlStatementContext);
	    } else {
	        return this.getTypedRuleContext(ProcedureSqlStatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterBlockStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitBlockStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitBlockStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CaseStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_caseStatement;
    }

	CASE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.CASE);
	    } else {
	        return this.getToken(MySqlParser.CASE, i);
	    }
	};


	END() {
	    return this.getToken(MySqlParser.END, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	caseAlternative = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CaseAlternativeContext);
	    } else {
	        return this.getTypedRuleContext(CaseAlternativeContext,i);
	    }
	};

	ELSE() {
	    return this.getToken(MySqlParser.ELSE, 0);
	};

	procedureSqlStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ProcedureSqlStatementContext);
	    } else {
	        return this.getTypedRuleContext(ProcedureSqlStatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCaseStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCaseStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitCaseStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IfStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_ifStatement;
        this._procedureSqlStatement = null; // ProcedureSqlStatementContext
        this.thenStatements = []; // of ProcedureSqlStatementContexts
        this.elseStatements = []; // of ProcedureSqlStatementContexts
    }

	IF = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.IF);
	    } else {
	        return this.getToken(MySqlParser.IF, i);
	    }
	};


	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	THEN() {
	    return this.getToken(MySqlParser.THEN, 0);
	};

	END() {
	    return this.getToken(MySqlParser.END, 0);
	};

	elifAlternative = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ElifAlternativeContext);
	    } else {
	        return this.getTypedRuleContext(ElifAlternativeContext,i);
	    }
	};

	ELSE() {
	    return this.getToken(MySqlParser.ELSE, 0);
	};

	procedureSqlStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ProcedureSqlStatementContext);
	    } else {
	        return this.getTypedRuleContext(ProcedureSqlStatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterIfStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitIfStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitIfStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IterateStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_iterateStatement;
    }

	ITERATE() {
	    return this.getToken(MySqlParser.ITERATE, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterIterateStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitIterateStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitIterateStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LeaveStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_leaveStatement;
    }

	LEAVE() {
	    return this.getToken(MySqlParser.LEAVE, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLeaveStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLeaveStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitLeaveStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LoopStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_loopStatement;
    }

	LOOP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.LOOP);
	    } else {
	        return this.getToken(MySqlParser.LOOP, i);
	    }
	};


	END() {
	    return this.getToken(MySqlParser.END, 0);
	};

	uid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidContext);
	    } else {
	        return this.getTypedRuleContext(UidContext,i);
	    }
	};

	COLON_SYMB() {
	    return this.getToken(MySqlParser.COLON_SYMB, 0);
	};

	procedureSqlStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ProcedureSqlStatementContext);
	    } else {
	        return this.getTypedRuleContext(ProcedureSqlStatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLoopStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLoopStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitLoopStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RepeatStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_repeatStatement;
    }

	REPEAT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.REPEAT);
	    } else {
	        return this.getToken(MySqlParser.REPEAT, i);
	    }
	};


	UNTIL() {
	    return this.getToken(MySqlParser.UNTIL, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	END() {
	    return this.getToken(MySqlParser.END, 0);
	};

	uid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidContext);
	    } else {
	        return this.getTypedRuleContext(UidContext,i);
	    }
	};

	COLON_SYMB() {
	    return this.getToken(MySqlParser.COLON_SYMB, 0);
	};

	procedureSqlStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ProcedureSqlStatementContext);
	    } else {
	        return this.getTypedRuleContext(ProcedureSqlStatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterRepeatStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitRepeatStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitRepeatStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReturnStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_returnStatement;
    }

	RETURN() {
	    return this.getToken(MySqlParser.RETURN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterReturnStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitReturnStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitReturnStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WhileStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_whileStatement;
    }

	WHILE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.WHILE);
	    } else {
	        return this.getToken(MySqlParser.WHILE, i);
	    }
	};


	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	DO() {
	    return this.getToken(MySqlParser.DO, 0);
	};

	END() {
	    return this.getToken(MySqlParser.END, 0);
	};

	uid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidContext);
	    } else {
	        return this.getTypedRuleContext(UidContext,i);
	    }
	};

	COLON_SYMB() {
	    return this.getToken(MySqlParser.COLON_SYMB, 0);
	};

	procedureSqlStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ProcedureSqlStatementContext);
	    } else {
	        return this.getTypedRuleContext(ProcedureSqlStatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterWhileStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitWhileStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitWhileStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CursorStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_cursorStatement;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class CloseCursorContext extends CursorStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CLOSE() {
	    return this.getToken(MySqlParser.CLOSE, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCloseCursor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCloseCursor(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitCloseCursor(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.CloseCursorContext = CloseCursorContext;

class OpenCursorContext extends CursorStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	OPEN() {
	    return this.getToken(MySqlParser.OPEN, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterOpenCursor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitOpenCursor(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitOpenCursor(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.OpenCursorContext = OpenCursorContext;

class FetchCursorContext extends CursorStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	FETCH() {
	    return this.getToken(MySqlParser.FETCH, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	INTO() {
	    return this.getToken(MySqlParser.INTO, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	FROM() {
	    return this.getToken(MySqlParser.FROM, 0);
	};

	NEXT() {
	    return this.getToken(MySqlParser.NEXT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterFetchCursor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitFetchCursor(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitFetchCursor(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.FetchCursorContext = FetchCursorContext;

class DeclareVariableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_declareVariable;
    }

	DECLARE() {
	    return this.getToken(MySqlParser.DECLARE, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	dataType() {
	    return this.getTypedRuleContext(DataTypeContext,0);
	};

	DEFAULT() {
	    return this.getToken(MySqlParser.DEFAULT, 0);
	};

	defaultValue() {
	    return this.getTypedRuleContext(DefaultValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDeclareVariable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDeclareVariable(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitDeclareVariable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DeclareConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_declareCondition;
    }

	DECLARE() {
	    return this.getToken(MySqlParser.DECLARE, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	CONDITION() {
	    return this.getToken(MySqlParser.CONDITION, 0);
	};

	FOR() {
	    return this.getToken(MySqlParser.FOR, 0);
	};

	conditionDialectOption() {
	    return this.getTypedRuleContext(ConditionDialectOptionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDeclareCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDeclareCondition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitDeclareCondition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DeclareCursorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_declareCursor;
    }

	DECLARE() {
	    return this.getToken(MySqlParser.DECLARE, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	CURSOR() {
	    return this.getToken(MySqlParser.CURSOR, 0);
	};

	cursorDialectOption() {
	    return this.getTypedRuleContext(CursorDialectOptionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDeclareCursor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDeclareCursor(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitDeclareCursor(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DeclareHandlerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_declareHandler;
        this.handlerAction = null; // Token
        this._routineBody = null; // RoutineBodyContext
    }

	DECLARE() {
	    return this.getToken(MySqlParser.DECLARE, 0);
	};

	HANDLER() {
	    return this.getToken(MySqlParser.HANDLER, 0);
	};

	FOR() {
	    return this.getToken(MySqlParser.FOR, 0);
	};

	handlerConditionValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(HandlerConditionValueContext);
	    } else {
	        return this.getTypedRuleContext(HandlerConditionValueContext,i);
	    }
	};

	CONTINUE() {
	    return this.getToken(MySqlParser.CONTINUE, 0);
	};

	EXIT() {
	    return this.getToken(MySqlParser.EXIT, 0);
	};

	UNDO() {
	    return this.getToken(MySqlParser.UNDO, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	routineBody() {
	    return this.getTypedRuleContext(RoutineBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDeclareHandler(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDeclareHandler(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitDeclareHandler(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DeclareRowDataTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_declareRowDataType;
    }

	DECLARE() {
	    return this.getToken(MySqlParser.DECLARE, 0);
	};

	TYPE() {
	    return this.getToken(MySqlParser.TYPE, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	AS() {
	    return this.getToken(MySqlParser.AS, 0);
	};

	ROW() {
	    return this.getToken(MySqlParser.ROW, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	functionParameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FunctionParameterContext);
	    } else {
	        return this.getTypedRuleContext(FunctionParameterContext,i);
	    }
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDeclareRowDataType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDeclareRowDataType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitDeclareRowDataType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CursorDialectOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_cursorDialectOption;
    }

	FOR() {
	    return this.getToken(MySqlParser.FOR, 0);
	};

	selectStatement() {
	    return this.getTypedRuleContext(SelectStatementContext,0);
	};

	WITH = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.WITH);
	    } else {
	        return this.getToken(MySqlParser.WITH, i);
	    }
	};


	RETURN() {
	    return this.getToken(MySqlParser.RETURN, 0);
	};

	TO() {
	    return this.getToken(MySqlParser.TO, 0);
	};

	HOLD() {
	    return this.getToken(MySqlParser.HOLD, 0);
	};

	CALLER() {
	    return this.getToken(MySqlParser.CALLER, 0);
	};

	CLIENT() {
	    return this.getToken(MySqlParser.CLIENT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCursorDialectOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCursorDialectOption(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitCursorDialectOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConditionDialectOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_conditionDialectOption;
    }

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	SQLSTATE() {
	    return this.getToken(MySqlParser.SQLSTATE, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	VALUE() {
	    return this.getToken(MySqlParser.VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterConditionDialectOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitConditionDialectOption(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitConditionDialectOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class HandlerConditionValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_handlerConditionValue;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class HandlerConditionWarningContext extends HandlerConditionValueContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SQLWARNING() {
	    return this.getToken(MySqlParser.SQLWARNING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterHandlerConditionWarning(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitHandlerConditionWarning(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitHandlerConditionWarning(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.HandlerConditionWarningContext = HandlerConditionWarningContext;

class HandlerConditionCodeContext extends HandlerConditionValueContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterHandlerConditionCode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitHandlerConditionCode(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitHandlerConditionCode(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.HandlerConditionCodeContext = HandlerConditionCodeContext;

class HandlerConditionNotfoundContext extends HandlerConditionValueContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	NOT() {
	    return this.getToken(MySqlParser.NOT, 0);
	};

	FOUND() {
	    return this.getToken(MySqlParser.FOUND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterHandlerConditionNotfound(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitHandlerConditionNotfound(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitHandlerConditionNotfound(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.HandlerConditionNotfoundContext = HandlerConditionNotfoundContext;

class HandlerConditionStateContext extends HandlerConditionValueContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SQLSTATE() {
	    return this.getToken(MySqlParser.SQLSTATE, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	VALUE() {
	    return this.getToken(MySqlParser.VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterHandlerConditionState(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitHandlerConditionState(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitHandlerConditionState(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.HandlerConditionStateContext = HandlerConditionStateContext;

class HandlerConditionExceptionContext extends HandlerConditionValueContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SQLEXCEPTION() {
	    return this.getToken(MySqlParser.SQLEXCEPTION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterHandlerConditionException(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitHandlerConditionException(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitHandlerConditionException(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.HandlerConditionExceptionContext = HandlerConditionExceptionContext;

class HandlerConditionNameContext extends HandlerConditionValueContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterHandlerConditionName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitHandlerConditionName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitHandlerConditionName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.HandlerConditionNameContext = HandlerConditionNameContext;

class ProcedureSqlStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_procedureSqlStatement;
    }

	SEMI() {
	    return this.getToken(MySqlParser.SEMI, 0);
	};

	compoundStatement() {
	    return this.getTypedRuleContext(CompoundStatementContext,0);
	};

	sqlStatement() {
	    return this.getTypedRuleContext(SqlStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterProcedureSqlStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitProcedureSqlStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitProcedureSqlStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CaseAlternativeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_caseAlternative;
    }

	WHEN() {
	    return this.getToken(MySqlParser.WHEN, 0);
	};

	THEN() {
	    return this.getToken(MySqlParser.THEN, 0);
	};

	constant() {
	    return this.getTypedRuleContext(ConstantContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	procedureSqlStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ProcedureSqlStatementContext);
	    } else {
	        return this.getTypedRuleContext(ProcedureSqlStatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCaseAlternative(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCaseAlternative(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitCaseAlternative(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ElifAlternativeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_elifAlternative;
    }

	ELSEIF() {
	    return this.getToken(MySqlParser.ELSEIF, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	THEN() {
	    return this.getToken(MySqlParser.THEN, 0);
	};

	procedureSqlStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ProcedureSqlStatementContext);
	    } else {
	        return this.getTypedRuleContext(ProcedureSqlStatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterElifAlternative(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitElifAlternative(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitElifAlternative(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterUserContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_alterUser;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class AlterUserMysqlV56Context extends AlterUserContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ALTER() {
	    return this.getToken(MySqlParser.ALTER, 0);
	};

	USER() {
	    return this.getToken(MySqlParser.USER, 0);
	};

	userSpecification = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UserSpecificationContext);
	    } else {
	        return this.getTypedRuleContext(UserSpecificationContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterUserMysqlV56(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterUserMysqlV56(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterUserMysqlV56(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.AlterUserMysqlV56Context = AlterUserMysqlV56Context;

class AlterUserMysqlV57Context extends AlterUserContext {

    constructor(parser, ctx) {
        super(parser);
        this.tlsNone = null; // Token;
        super.copyFrom(ctx);
    }

	ALTER() {
	    return this.getToken(MySqlParser.ALTER, 0);
	};

	USER() {
	    return this.getToken(MySqlParser.USER, 0);
	};

	userAuthOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UserAuthOptionContext);
	    } else {
	        return this.getTypedRuleContext(UserAuthOptionContext,i);
	    }
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	REQUIRE() {
	    return this.getToken(MySqlParser.REQUIRE, 0);
	};

	WITH() {
	    return this.getToken(MySqlParser.WITH, 0);
	};

	userPasswordOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UserPasswordOptionContext);
	    } else {
	        return this.getTypedRuleContext(UserPasswordOptionContext,i);
	    }
	};

	userLockOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UserLockOptionContext);
	    } else {
	        return this.getTypedRuleContext(UserLockOptionContext,i);
	    }
	};

	tlsOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TlsOptionContext);
	    } else {
	        return this.getTypedRuleContext(TlsOptionContext,i);
	    }
	};

	NONE() {
	    return this.getToken(MySqlParser.NONE, 0);
	};

	userResourceOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UserResourceOptionContext);
	    } else {
	        return this.getTypedRuleContext(UserResourceOptionContext,i);
	    }
	};

	AND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.AND);
	    } else {
	        return this.getToken(MySqlParser.AND, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterUserMysqlV57(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterUserMysqlV57(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAlterUserMysqlV57(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.AlterUserMysqlV57Context = AlterUserMysqlV57Context;

class CreateUserContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_createUser;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class CreateUserMysqlV57Context extends CreateUserContext {

    constructor(parser, ctx) {
        super(parser);
        this.tlsNone = null; // Token;
        super.copyFrom(ctx);
    }

	CREATE() {
	    return this.getToken(MySqlParser.CREATE, 0);
	};

	USER() {
	    return this.getToken(MySqlParser.USER, 0);
	};

	userAuthOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UserAuthOptionContext);
	    } else {
	        return this.getTypedRuleContext(UserAuthOptionContext,i);
	    }
	};

	ifNotExists() {
	    return this.getTypedRuleContext(IfNotExistsContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	REQUIRE() {
	    return this.getToken(MySqlParser.REQUIRE, 0);
	};

	WITH() {
	    return this.getToken(MySqlParser.WITH, 0);
	};

	userPasswordOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UserPasswordOptionContext);
	    } else {
	        return this.getTypedRuleContext(UserPasswordOptionContext,i);
	    }
	};

	userLockOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UserLockOptionContext);
	    } else {
	        return this.getTypedRuleContext(UserLockOptionContext,i);
	    }
	};

	tlsOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TlsOptionContext);
	    } else {
	        return this.getTypedRuleContext(TlsOptionContext,i);
	    }
	};

	NONE() {
	    return this.getToken(MySqlParser.NONE, 0);
	};

	userResourceOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UserResourceOptionContext);
	    } else {
	        return this.getTypedRuleContext(UserResourceOptionContext,i);
	    }
	};

	AND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.AND);
	    } else {
	        return this.getToken(MySqlParser.AND, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCreateUserMysqlV57(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCreateUserMysqlV57(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitCreateUserMysqlV57(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.CreateUserMysqlV57Context = CreateUserMysqlV57Context;

class CreateUserMysqlV56Context extends CreateUserContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CREATE() {
	    return this.getToken(MySqlParser.CREATE, 0);
	};

	USER() {
	    return this.getToken(MySqlParser.USER, 0);
	};

	userAuthOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UserAuthOptionContext);
	    } else {
	        return this.getTypedRuleContext(UserAuthOptionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCreateUserMysqlV56(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCreateUserMysqlV56(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitCreateUserMysqlV56(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.CreateUserMysqlV56Context = CreateUserMysqlV56Context;

class DropUserContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_dropUser;
    }

	DROP() {
	    return this.getToken(MySqlParser.DROP, 0);
	};

	USER() {
	    return this.getToken(MySqlParser.USER, 0);
	};

	userName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UserNameContext);
	    } else {
	        return this.getTypedRuleContext(UserNameContext,i);
	    }
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDropUser(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDropUser(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitDropUser(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GrantStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_grantStatement;
        this.privilegeObject = null; // Token
        this.tlsNone = null; // Token
    }

	GRANT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.GRANT);
	    } else {
	        return this.getToken(MySqlParser.GRANT, i);
	    }
	};


	privelegeClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PrivelegeClauseContext);
	    } else {
	        return this.getTypedRuleContext(PrivelegeClauseContext,i);
	    }
	};

	ON() {
	    return this.getToken(MySqlParser.ON, 0);
	};

	privilegeLevel() {
	    return this.getTypedRuleContext(PrivilegeLevelContext,0);
	};

	TO() {
	    return this.getToken(MySqlParser.TO, 0);
	};

	userAuthOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UserAuthOptionContext);
	    } else {
	        return this.getTypedRuleContext(UserAuthOptionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	REQUIRE() {
	    return this.getToken(MySqlParser.REQUIRE, 0);
	};

	WITH() {
	    return this.getToken(MySqlParser.WITH, 0);
	};

	TABLE() {
	    return this.getToken(MySqlParser.TABLE, 0);
	};

	FUNCTION() {
	    return this.getToken(MySqlParser.FUNCTION, 0);
	};

	PROCEDURE() {
	    return this.getToken(MySqlParser.PROCEDURE, 0);
	};

	tlsOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TlsOptionContext);
	    } else {
	        return this.getTypedRuleContext(TlsOptionContext,i);
	    }
	};

	NONE() {
	    return this.getToken(MySqlParser.NONE, 0);
	};

	OPTION = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.OPTION);
	    } else {
	        return this.getToken(MySqlParser.OPTION, i);
	    }
	};


	userResourceOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UserResourceOptionContext);
	    } else {
	        return this.getTypedRuleContext(UserResourceOptionContext,i);
	    }
	};

	AND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.AND);
	    } else {
	        return this.getToken(MySqlParser.AND, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterGrantStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitGrantStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitGrantStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GrantProxyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_grantProxy;
        this.fromFirst = null; // UserNameContext
        this.toFirst = null; // UserNameContext
        this._userName = null; // UserNameContext
        this.toOther = []; // of UserNameContexts
    }

	GRANT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.GRANT);
	    } else {
	        return this.getToken(MySqlParser.GRANT, i);
	    }
	};


	PROXY() {
	    return this.getToken(MySqlParser.PROXY, 0);
	};

	ON() {
	    return this.getToken(MySqlParser.ON, 0);
	};

	TO() {
	    return this.getToken(MySqlParser.TO, 0);
	};

	userName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UserNameContext);
	    } else {
	        return this.getTypedRuleContext(UserNameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	WITH() {
	    return this.getToken(MySqlParser.WITH, 0);
	};

	OPTION() {
	    return this.getToken(MySqlParser.OPTION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterGrantProxy(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitGrantProxy(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitGrantProxy(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RenameUserContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_renameUser;
    }

	RENAME() {
	    return this.getToken(MySqlParser.RENAME, 0);
	};

	USER() {
	    return this.getToken(MySqlParser.USER, 0);
	};

	renameUserClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RenameUserClauseContext);
	    } else {
	        return this.getTypedRuleContext(RenameUserClauseContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterRenameUser(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitRenameUser(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitRenameUser(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RevokeStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_revokeStatement;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class DetailRevokeContext extends RevokeStatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.privilegeObject = null; // Token;
        super.copyFrom(ctx);
    }

	REVOKE() {
	    return this.getToken(MySqlParser.REVOKE, 0);
	};

	privelegeClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PrivelegeClauseContext);
	    } else {
	        return this.getTypedRuleContext(PrivelegeClauseContext,i);
	    }
	};

	ON() {
	    return this.getToken(MySqlParser.ON, 0);
	};

	privilegeLevel() {
	    return this.getTypedRuleContext(PrivilegeLevelContext,0);
	};

	FROM() {
	    return this.getToken(MySqlParser.FROM, 0);
	};

	userName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UserNameContext);
	    } else {
	        return this.getTypedRuleContext(UserNameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	TABLE() {
	    return this.getToken(MySqlParser.TABLE, 0);
	};

	FUNCTION() {
	    return this.getToken(MySqlParser.FUNCTION, 0);
	};

	PROCEDURE() {
	    return this.getToken(MySqlParser.PROCEDURE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDetailRevoke(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDetailRevoke(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitDetailRevoke(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.DetailRevokeContext = DetailRevokeContext;

class ShortRevokeContext extends RevokeStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	REVOKE() {
	    return this.getToken(MySqlParser.REVOKE, 0);
	};

	ALL() {
	    return this.getToken(MySqlParser.ALL, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	GRANT() {
	    return this.getToken(MySqlParser.GRANT, 0);
	};

	OPTION() {
	    return this.getToken(MySqlParser.OPTION, 0);
	};

	FROM() {
	    return this.getToken(MySqlParser.FROM, 0);
	};

	userName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UserNameContext);
	    } else {
	        return this.getTypedRuleContext(UserNameContext,i);
	    }
	};

	PRIVILEGES() {
	    return this.getToken(MySqlParser.PRIVILEGES, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShortRevoke(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShortRevoke(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitShortRevoke(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.ShortRevokeContext = ShortRevokeContext;

class RevokeProxyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_revokeProxy;
        this.onUser = null; // UserNameContext
        this.fromFirst = null; // UserNameContext
        this._userName = null; // UserNameContext
        this.fromOther = []; // of UserNameContexts
    }

	REVOKE() {
	    return this.getToken(MySqlParser.REVOKE, 0);
	};

	PROXY() {
	    return this.getToken(MySqlParser.PROXY, 0);
	};

	ON() {
	    return this.getToken(MySqlParser.ON, 0);
	};

	FROM() {
	    return this.getToken(MySqlParser.FROM, 0);
	};

	userName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UserNameContext);
	    } else {
	        return this.getTypedRuleContext(UserNameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterRevokeProxy(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitRevokeProxy(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitRevokeProxy(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SetPasswordStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_setPasswordStatement;
    }

	SET() {
	    return this.getToken(MySqlParser.SET, 0);
	};

	PASSWORD() {
	    return this.getToken(MySqlParser.PASSWORD, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	passwordFunctionClause() {
	    return this.getTypedRuleContext(PasswordFunctionClauseContext,0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	FOR() {
	    return this.getToken(MySqlParser.FOR, 0);
	};

	userName() {
	    return this.getTypedRuleContext(UserNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSetPasswordStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSetPasswordStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitSetPasswordStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GrantStatementInceptorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_grantStatementInceptor;
    }

	GRANT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.GRANT);
	    } else {
	        return this.getToken(MySqlParser.GRANT, i);
	    }
	};


	privilegeList() {
	    return this.getTypedRuleContext(PrivilegeListContext,0);
	};

	TO() {
	    return this.getToken(MySqlParser.TO, 0);
	};

	principalNames() {
	    return this.getTypedRuleContext(PrincipalNamesContext,0);
	};

	ON() {
	    return this.getToken(MySqlParser.ON, 0);
	};

	privilegeObjectSpec() {
	    return this.getTypedRuleContext(PrivilegeObjectSpecContext,0);
	};

	WITH() {
	    return this.getToken(MySqlParser.WITH, 0);
	};

	OPTION() {
	    return this.getToken(MySqlParser.OPTION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterGrantStatementInceptor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitGrantStatementInceptor(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitGrantStatementInceptor(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RevokeStatementInceptorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_revokeStatementInceptor;
    }

	REVOKE() {
	    return this.getToken(MySqlParser.REVOKE, 0);
	};

	privilegeList() {
	    return this.getTypedRuleContext(PrivilegeListContext,0);
	};

	FROM() {
	    return this.getToken(MySqlParser.FROM, 0);
	};

	principalNames() {
	    return this.getTypedRuleContext(PrincipalNamesContext,0);
	};

	GRANT() {
	    return this.getToken(MySqlParser.GRANT, 0);
	};

	OPTION() {
	    return this.getToken(MySqlParser.OPTION, 0);
	};

	FOR() {
	    return this.getToken(MySqlParser.FOR, 0);
	};

	ON() {
	    return this.getToken(MySqlParser.ON, 0);
	};

	privilegeObjectSpec() {
	    return this.getTypedRuleContext(PrivilegeObjectSpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterRevokeStatementInceptor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitRevokeStatementInceptor(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitRevokeStatementInceptor(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ShowGrantInceptorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_showGrantInceptor;
    }

	SHOW() {
	    return this.getToken(MySqlParser.SHOW, 0);
	};

	GRANT() {
	    return this.getToken(MySqlParser.GRANT, 0);
	};

	principalName() {
	    return this.getTypedRuleContext(PrincipalNameContext,0);
	};

	ON() {
	    return this.getToken(MySqlParser.ON, 0);
	};

	ALL() {
	    return this.getToken(MySqlParser.ALL, 0);
	};

	privilegeObjectSpec() {
	    return this.getTypedRuleContext(PrivilegeObjectSpecContext,0);
	};

	APP() {
	    return this.getToken(MySqlParser.APP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowGrantInceptor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowGrantInceptor(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitShowGrantInceptor(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GrantPermissionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_grantPermission;
    }

	GRANT() {
	    return this.getToken(MySqlParser.GRANT, 0);
	};

	PERMISSION() {
	    return this.getToken(MySqlParser.PERMISSION, 0);
	};

	onTableOrView() {
	    return this.getTypedRuleContext(OnTableOrViewContext,0);
	};

	FOR() {
	    return this.getToken(MySqlParser.FOR, 0);
	};

	ROWS() {
	    return this.getToken(MySqlParser.ROWS, 0);
	};

	whereExpressionOptional() {
	    return this.getTypedRuleContext(WhereExpressionOptionalContext,0);
	};

	COLUMN() {
	    return this.getToken(MySqlParser.COLUMN, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	caseFunction() {
	    return this.getTypedRuleContext(CaseFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterGrantPermission(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitGrantPermission(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitGrantPermission(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RevokePermissionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_revokePermission;
    }

	REVOKE() {
	    return this.getToken(MySqlParser.REVOKE, 0);
	};

	PERMISSION() {
	    return this.getToken(MySqlParser.PERMISSION, 0);
	};

	onTableOrView() {
	    return this.getTypedRuleContext(OnTableOrViewContext,0);
	};

	FOR() {
	    return this.getToken(MySqlParser.FOR, 0);
	};

	ROWS() {
	    return this.getToken(MySqlParser.ROWS, 0);
	};

	COLUMNS() {
	    return this.getToken(MySqlParser.COLUMNS, 0);
	};

	COLUMN() {
	    return this.getToken(MySqlParser.COLUMN, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterRevokePermission(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitRevokePermission(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitRevokePermission(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ShowPermissionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_showPermission;
    }

	SHOW() {
	    return this.getToken(MySqlParser.SHOW, 0);
	};

	PERMISSION() {
	    return this.getToken(MySqlParser.PERMISSION, 0);
	};

	onTableOrView() {
	    return this.getTypedRuleContext(OnTableOrViewContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowPermission(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowPermission(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitShowPermission(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GrantFaclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_grantFacl;
    }

	GRANT() {
	    return this.getToken(MySqlParser.GRANT, 0);
	};

	FACL() {
	    return this.getToken(MySqlParser.FACL, 0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	ON() {
	    return this.getToken(MySqlParser.ON, 0);
	};

	TABLE() {
	    return this.getToken(MySqlParser.TABLE, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	TO() {
	    return this.getToken(MySqlParser.TO, 0);
	};

	userOrGroup() {
	    return this.getTypedRuleContext(UserOrGroupContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterGrantFacl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitGrantFacl(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitGrantFacl(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RevokeFaclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_revokeFacl;
    }

	REVOKE() {
	    return this.getToken(MySqlParser.REVOKE, 0);
	};

	FACL() {
	    return this.getToken(MySqlParser.FACL, 0);
	};

	ON() {
	    return this.getToken(MySqlParser.ON, 0);
	};

	TABLE() {
	    return this.getToken(MySqlParser.TABLE, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	FROM() {
	    return this.getToken(MySqlParser.FROM, 0);
	};

	userOrGroup() {
	    return this.getTypedRuleContext(UserOrGroupContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterRevokeFacl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitRevokeFacl(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitRevokeFacl(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ShowFaclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_showFacl;
    }

	SHOW() {
	    return this.getToken(MySqlParser.SHOW, 0);
	};

	FACL() {
	    return this.getToken(MySqlParser.FACL, 0);
	};

	ON() {
	    return this.getToken(MySqlParser.ON, 0);
	};

	TABLE() {
	    return this.getToken(MySqlParser.TABLE, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	userOrGroup() {
	    return this.getTypedRuleContext(UserOrGroupContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowFacl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowFacl(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitShowFacl(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GrantQuotaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_grantQuota;
    }

	GRANT() {
	    return this.getToken(MySqlParser.GRANT, 0);
	};

	QUOTA() {
	    return this.getToken(MySqlParser.QUOTA, 0);
	};

	UNLIMITED() {
	    return this.getToken(MySqlParser.UNLIMITED, 0);
	};

	FILESIZE_LITERAL() {
	    return this.getToken(MySqlParser.FILESIZE_LITERAL, 0);
	};

	ON() {
	    return this.getToken(MySqlParser.ON, 0);
	};

	quotaDb() {
	    return this.getTypedRuleContext(QuotaDbContext,0);
	};

	TO() {
	    return this.getToken(MySqlParser.TO, 0);
	};

	quotaUser() {
	    return this.getTypedRuleContext(QuotaUserContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterGrantQuota(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitGrantQuota(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitGrantQuota(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RevokeQuotaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_revokeQuota;
    }

	REVOKE() {
	    return this.getToken(MySqlParser.REVOKE, 0);
	};

	QUOTA() {
	    return this.getToken(MySqlParser.QUOTA, 0);
	};

	ON() {
	    return this.getToken(MySqlParser.ON, 0);
	};

	quotaDb() {
	    return this.getTypedRuleContext(QuotaDbContext,0);
	};

	FROM() {
	    return this.getToken(MySqlParser.FROM, 0);
	};

	quotaUser() {
	    return this.getTypedRuleContext(QuotaUserContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterRevokeQuota(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitRevokeQuota(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitRevokeQuota(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ShowQuotaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_showQuota;
    }

	SHOW() {
	    return this.getToken(MySqlParser.SHOW, 0);
	};

	QUOTA() {
	    return this.getToken(MySqlParser.QUOTA, 0);
	};

	quotaUser() {
	    return this.getTypedRuleContext(QuotaUserContext,0);
	};

	ON() {
	    return this.getToken(MySqlParser.ON, 0);
	};

	quotaDb() {
	    return this.getTypedRuleContext(QuotaDbContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowQuota(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowQuota(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitShowQuota(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RoleStatementInceptorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_roleStatementInceptor;
    }

	CREATE() {
	    return this.getToken(MySqlParser.CREATE, 0);
	};

	ROLE() {
	    return this.getToken(MySqlParser.ROLE, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	DROP() {
	    return this.getToken(MySqlParser.DROP, 0);
	};

	SET() {
	    return this.getToken(MySqlParser.SET, 0);
	};

	ALL() {
	    return this.getToken(MySqlParser.ALL, 0);
	};

	SHOW() {
	    return this.getToken(MySqlParser.SHOW, 0);
	};

	ROLES() {
	    return this.getToken(MySqlParser.ROLES, 0);
	};

	CURRENT() {
	    return this.getToken(MySqlParser.CURRENT, 0);
	};

	GRANT() {
	    return this.getToken(MySqlParser.GRANT, 0);
	};

	principalName() {
	    return this.getTypedRuleContext(PrincipalNameContext,0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	TO() {
	    return this.getToken(MySqlParser.TO, 0);
	};

	principalNames() {
	    return this.getTypedRuleContext(PrincipalNamesContext,0);
	};

	WITH() {
	    return this.getToken(MySqlParser.WITH, 0);
	};

	ADMIN() {
	    return this.getToken(MySqlParser.ADMIN, 0);
	};

	OPTION() {
	    return this.getToken(MySqlParser.OPTION, 0);
	};

	REVOKE() {
	    return this.getToken(MySqlParser.REVOKE, 0);
	};

	FROM() {
	    return this.getToken(MySqlParser.FROM, 0);
	};

	FOR() {
	    return this.getToken(MySqlParser.FOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterRoleStatementInceptor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitRoleStatementInceptor(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitRoleStatementInceptor(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ShowPrincipalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_showPrincipal;
    }

	SHOW() {
	    return this.getToken(MySqlParser.SHOW, 0);
	};

	PRINCIPALS() {
	    return this.getToken(MySqlParser.PRINCIPALS, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowPrincipal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowPrincipal(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitShowPrincipal(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrivilegeListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_privilegeList;
    }

	privlegeDef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PrivlegeDefContext);
	    } else {
	        return this.getTypedRuleContext(PrivlegeDefContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPrivilegeList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPrivilegeList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitPrivilegeList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrivlegeDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_privlegeDef;
    }

	privilegeType() {
	    return this.getTypedRuleContext(PrivilegeTypeContext,0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPrivlegeDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPrivlegeDef(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitPrivlegeDef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrivilegeTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_privilegeType;
    }

	ALL() {
	    return this.getToken(MySqlParser.ALL, 0);
	};

	ALTER() {
	    return this.getToken(MySqlParser.ALTER, 0);
	};

	UPDATE() {
	    return this.getToken(MySqlParser.UPDATE, 0);
	};

	CREATE() {
	    return this.getToken(MySqlParser.CREATE, 0);
	};

	APP() {
	    return this.getToken(MySqlParser.APP, 0);
	};

	APPLICATION() {
	    return this.getToken(MySqlParser.APPLICATION, 0);
	};

	DROP() {
	    return this.getToken(MySqlParser.DROP, 0);
	};

	INDEX() {
	    return this.getToken(MySqlParser.INDEX, 0);
	};

	LOCK() {
	    return this.getToken(MySqlParser.LOCK, 0);
	};

	SELECT() {
	    return this.getToken(MySqlParser.SELECT, 0);
	};

	SHOW_DATABASE() {
	    return this.getToken(MySqlParser.SHOW_DATABASE, 0);
	};

	INSERT() {
	    return this.getToken(MySqlParser.INSERT, 0);
	};

	DELETE() {
	    return this.getToken(MySqlParser.DELETE, 0);
	};

	START() {
	    return this.getToken(MySqlParser.START, 0);
	};

	STOP() {
	    return this.getToken(MySqlParser.STOP, 0);
	};

	LIST() {
	    return this.getToken(MySqlParser.LIST, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPrivilegeType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPrivilegeType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitPrivilegeType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrivilegeObjectSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_privilegeObjectSpec;
        this.path = null; // StringLiteralContext
    }

	databaseName() {
	    return this.getTypedRuleContext(DatabaseNameContext,0);
	};

	DATABASE() {
	    return this.getToken(MySqlParser.DATABASE, 0);
	};

	SCHEMA() {
	    return this.getToken(MySqlParser.SCHEMA, 0);
	};

	STAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.STAR);
	    } else {
	        return this.getToken(MySqlParser.STAR, i);
	    }
	};


	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	TABLE() {
	    return this.getToken(MySqlParser.TABLE, 0);
	};

	DOT() {
	    return this.getToken(MySqlParser.DOT, 0);
	};

	partitionSpec() {
	    return this.getTypedRuleContext(PartitionSpecContext,0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	APP() {
	    return this.getToken(MySqlParser.APP, 0);
	};

	APPLICATION() {
	    return this.getToken(MySqlParser.APPLICATION, 0);
	};

	URI() {
	    return this.getToken(MySqlParser.URI, 0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	SERVER() {
	    return this.getToken(MySqlParser.SERVER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPrivilegeObjectSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPrivilegeObjectSpec(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitPrivilegeObjectSpec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrincipalNamesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_principalNames;
    }

	principalName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PrincipalNameContext);
	    } else {
	        return this.getTypedRuleContext(PrincipalNameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPrincipalNames(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPrincipalNames(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitPrincipalNames(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class QuotaUserContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_quotaUser;
    }

	USER() {
	    return this.getToken(MySqlParser.USER, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterQuotaUser(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitQuotaUser(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitQuotaUser(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OnTableOrViewContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_onTableOrView;
    }

	ON() {
	    return this.getToken(MySqlParser.ON, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	VIEW() {
	    return this.getToken(MySqlParser.VIEW, 0);
	};

	viewName() {
	    return this.getTypedRuleContext(ViewNameContext,0);
	};

	TABLE() {
	    return this.getToken(MySqlParser.TABLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterOnTableOrView(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitOnTableOrView(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitOnTableOrView(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class QuotaDbContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_quotaDb;
    }

	DATABASE() {
	    return this.getToken(MySqlParser.DATABASE, 0);
	};

	databaseName() {
	    return this.getTypedRuleContext(DatabaseNameContext,0);
	};

	TEMPORARY() {
	    return this.getToken(MySqlParser.TEMPORARY, 0);
	};

	SPACE2() {
	    return this.getToken(MySqlParser.SPACE2, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterQuotaDb(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitQuotaDb(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitQuotaDb(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UserOrGroupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_userOrGroup;
    }

	USER() {
	    return this.getToken(MySqlParser.USER, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	GROUP() {
	    return this.getToken(MySqlParser.GROUP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUserOrGroup(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUserOrGroup(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitUserOrGroup(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrincipalNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_principalName;
    }

	USER() {
	    return this.getToken(MySqlParser.USER, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	GROUP() {
	    return this.getToken(MySqlParser.GROUP, 0);
	};

	ROLE() {
	    return this.getToken(MySqlParser.ROLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPrincipalName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPrincipalName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitPrincipalName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UserSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_userSpecification;
    }

	userName() {
	    return this.getTypedRuleContext(UserNameContext,0);
	};

	userPasswordOption() {
	    return this.getTypedRuleContext(UserPasswordOptionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUserSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUserSpecification(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitUserSpecification(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UserAuthOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_userAuthOption;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class SimpleAuthOptionContext extends UserAuthOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	userName() {
	    return this.getTypedRuleContext(UserNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSimpleAuthOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSimpleAuthOption(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitSimpleAuthOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.SimpleAuthOptionContext = SimpleAuthOptionContext;

class PasswordAuthOptionContext extends UserAuthOptionContext {

    constructor(parser, ctx) {
        super(parser);
        this.hashed = null; // Token;
        super.copyFrom(ctx);
    }

	userName() {
	    return this.getTypedRuleContext(UserNameContext,0);
	};

	IDENTIFIED() {
	    return this.getToken(MySqlParser.IDENTIFIED, 0);
	};

	BY() {
	    return this.getToken(MySqlParser.BY, 0);
	};

	PASSWORD() {
	    return this.getToken(MySqlParser.PASSWORD, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPasswordAuthOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPasswordAuthOption(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitPasswordAuthOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.PasswordAuthOptionContext = PasswordAuthOptionContext;

class StringAuthOptionContext extends UserAuthOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	userName() {
	    return this.getTypedRuleContext(UserNameContext,0);
	};

	IDENTIFIED() {
	    return this.getToken(MySqlParser.IDENTIFIED, 0);
	};

	BY() {
	    return this.getToken(MySqlParser.BY, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	WITH() {
	    return this.getToken(MySqlParser.WITH, 0);
	};

	authPlugin() {
	    return this.getTypedRuleContext(AuthPluginContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterStringAuthOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitStringAuthOption(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitStringAuthOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.StringAuthOptionContext = StringAuthOptionContext;

class HashAuthOptionContext extends UserAuthOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	userName() {
	    return this.getTypedRuleContext(UserNameContext,0);
	};

	IDENTIFIED() {
	    return this.getToken(MySqlParser.IDENTIFIED, 0);
	};

	WITH() {
	    return this.getToken(MySqlParser.WITH, 0);
	};

	authPlugin() {
	    return this.getTypedRuleContext(AuthPluginContext,0);
	};

	AS() {
	    return this.getToken(MySqlParser.AS, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterHashAuthOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitHashAuthOption(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitHashAuthOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.HashAuthOptionContext = HashAuthOptionContext;

class TlsOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_tlsOption;
    }

	SSL() {
	    return this.getToken(MySqlParser.SSL, 0);
	};

	X509() {
	    return this.getToken(MySqlParser.X509, 0);
	};

	CIPHER() {
	    return this.getToken(MySqlParser.CIPHER, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	ISSUER() {
	    return this.getToken(MySqlParser.ISSUER, 0);
	};

	SUBJECT() {
	    return this.getToken(MySqlParser.SUBJECT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTlsOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTlsOption(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitTlsOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UserResourceOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_userResourceOption;
    }

	MAX_QUERIES_PER_HOUR() {
	    return this.getToken(MySqlParser.MAX_QUERIES_PER_HOUR, 0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	MAX_UPDATES_PER_HOUR() {
	    return this.getToken(MySqlParser.MAX_UPDATES_PER_HOUR, 0);
	};

	MAX_CONNECTIONS_PER_HOUR() {
	    return this.getToken(MySqlParser.MAX_CONNECTIONS_PER_HOUR, 0);
	};

	MAX_USER_CONNECTIONS() {
	    return this.getToken(MySqlParser.MAX_USER_CONNECTIONS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUserResourceOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUserResourceOption(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitUserResourceOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UserPasswordOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_userPasswordOption;
        this.expireType = null; // Token
    }

	PASSWORD() {
	    return this.getToken(MySqlParser.PASSWORD, 0);
	};

	EXPIRE() {
	    return this.getToken(MySqlParser.EXPIRE, 0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	DAY() {
	    return this.getToken(MySqlParser.DAY, 0);
	};

	DEFAULT() {
	    return this.getToken(MySqlParser.DEFAULT, 0);
	};

	NEVER() {
	    return this.getToken(MySqlParser.NEVER, 0);
	};

	INTERVAL() {
	    return this.getToken(MySqlParser.INTERVAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUserPasswordOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUserPasswordOption(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitUserPasswordOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UserLockOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_userLockOption;
        this.lockType = null; // Token
    }

	ACCOUNT() {
	    return this.getToken(MySqlParser.ACCOUNT, 0);
	};

	LOCK() {
	    return this.getToken(MySqlParser.LOCK, 0);
	};

	UNLOCK() {
	    return this.getToken(MySqlParser.UNLOCK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUserLockOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUserLockOption(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitUserLockOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrivelegeClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_privelegeClause;
    }

	privilege() {
	    return this.getTypedRuleContext(PrivilegeContext,0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPrivelegeClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPrivelegeClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitPrivelegeClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrivilegeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_privilege;
    }

	ALL() {
	    return this.getToken(MySqlParser.ALL, 0);
	};

	PRIVILEGES() {
	    return this.getToken(MySqlParser.PRIVILEGES, 0);
	};

	ALTER() {
	    return this.getToken(MySqlParser.ALTER, 0);
	};

	ROUTINE() {
	    return this.getToken(MySqlParser.ROUTINE, 0);
	};

	CREATE() {
	    return this.getToken(MySqlParser.CREATE, 0);
	};

	TEMPORARY() {
	    return this.getToken(MySqlParser.TEMPORARY, 0);
	};

	TABLES() {
	    return this.getToken(MySqlParser.TABLES, 0);
	};

	VIEW() {
	    return this.getToken(MySqlParser.VIEW, 0);
	};

	USER() {
	    return this.getToken(MySqlParser.USER, 0);
	};

	TABLESPACE() {
	    return this.getToken(MySqlParser.TABLESPACE, 0);
	};

	DELETE() {
	    return this.getToken(MySqlParser.DELETE, 0);
	};

	DROP() {
	    return this.getToken(MySqlParser.DROP, 0);
	};

	EVENT() {
	    return this.getToken(MySqlParser.EVENT, 0);
	};

	EXECUTE() {
	    return this.getToken(MySqlParser.EXECUTE, 0);
	};

	FILE() {
	    return this.getToken(MySqlParser.FILE, 0);
	};

	GRANT() {
	    return this.getToken(MySqlParser.GRANT, 0);
	};

	OPTION() {
	    return this.getToken(MySqlParser.OPTION, 0);
	};

	INDEX() {
	    return this.getToken(MySqlParser.INDEX, 0);
	};

	INSERT() {
	    return this.getToken(MySqlParser.INSERT, 0);
	};

	LOCK() {
	    return this.getToken(MySqlParser.LOCK, 0);
	};

	PROCESS() {
	    return this.getToken(MySqlParser.PROCESS, 0);
	};

	PROXY() {
	    return this.getToken(MySqlParser.PROXY, 0);
	};

	REFERENCES() {
	    return this.getToken(MySqlParser.REFERENCES, 0);
	};

	RELOAD() {
	    return this.getToken(MySqlParser.RELOAD, 0);
	};

	REPLICATION() {
	    return this.getToken(MySqlParser.REPLICATION, 0);
	};

	CLIENT() {
	    return this.getToken(MySqlParser.CLIENT, 0);
	};

	SLAVE() {
	    return this.getToken(MySqlParser.SLAVE, 0);
	};

	SELECT() {
	    return this.getToken(MySqlParser.SELECT, 0);
	};

	SHOW() {
	    return this.getToken(MySqlParser.SHOW, 0);
	};

	DATABASES() {
	    return this.getToken(MySqlParser.DATABASES, 0);
	};

	SHUTDOWN() {
	    return this.getToken(MySqlParser.SHUTDOWN, 0);
	};

	SUPER() {
	    return this.getToken(MySqlParser.SUPER, 0);
	};

	TRIGGER() {
	    return this.getToken(MySqlParser.TRIGGER, 0);
	};

	UPDATE() {
	    return this.getToken(MySqlParser.UPDATE, 0);
	};

	USAGE() {
	    return this.getToken(MySqlParser.USAGE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPrivilege(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPrivilege(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitPrivilege(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrivilegeLevelContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_privilegeLevel;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class DefiniteSchemaPrivLevelContext extends PrivilegeLevelContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	DOT() {
	    return this.getToken(MySqlParser.DOT, 0);
	};

	STAR() {
	    return this.getToken(MySqlParser.STAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDefiniteSchemaPrivLevel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDefiniteSchemaPrivLevel(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitDefiniteSchemaPrivLevel(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.DefiniteSchemaPrivLevelContext = DefiniteSchemaPrivLevelContext;

class DefiniteFullTablePrivLevelContext extends PrivilegeLevelContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	uid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidContext);
	    } else {
	        return this.getTypedRuleContext(UidContext,i);
	    }
	};

	DOT() {
	    return this.getToken(MySqlParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDefiniteFullTablePrivLevel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDefiniteFullTablePrivLevel(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitDefiniteFullTablePrivLevel(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.DefiniteFullTablePrivLevelContext = DefiniteFullTablePrivLevelContext;

class GlobalPrivLevelContext extends PrivilegeLevelContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	STAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.STAR);
	    } else {
	        return this.getToken(MySqlParser.STAR, i);
	    }
	};


	DOT() {
	    return this.getToken(MySqlParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterGlobalPrivLevel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitGlobalPrivLevel(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitGlobalPrivLevel(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.GlobalPrivLevelContext = GlobalPrivLevelContext;

class DefiniteTablePrivLevelContext extends PrivilegeLevelContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDefiniteTablePrivLevel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDefiniteTablePrivLevel(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitDefiniteTablePrivLevel(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.DefiniteTablePrivLevelContext = DefiniteTablePrivLevelContext;

class CurrentSchemaPriviLevelContext extends PrivilegeLevelContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	STAR() {
	    return this.getToken(MySqlParser.STAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCurrentSchemaPriviLevel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCurrentSchemaPriviLevel(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitCurrentSchemaPriviLevel(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.CurrentSchemaPriviLevelContext = CurrentSchemaPriviLevelContext;

class RenameUserClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_renameUserClause;
        this.fromFirst = null; // UserNameContext
        this.toFirst = null; // UserNameContext
    }

	TO() {
	    return this.getToken(MySqlParser.TO, 0);
	};

	userName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UserNameContext);
	    } else {
	        return this.getTypedRuleContext(UserNameContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterRenameUserClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitRenameUserClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitRenameUserClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AnalyzeTableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_analyzeTable;
        this.actionOption = null; // Token
    }

	ANALYZE() {
	    return this.getToken(MySqlParser.ANALYZE, 0);
	};

	TABLE() {
	    return this.getToken(MySqlParser.TABLE, 0);
	};

	tables() {
	    return this.getTypedRuleContext(TablesContext,0);
	};

	NO_WRITE_TO_BINLOG() {
	    return this.getToken(MySqlParser.NO_WRITE_TO_BINLOG, 0);
	};

	LOCAL() {
	    return this.getToken(MySqlParser.LOCAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAnalyzeTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAnalyzeTable(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAnalyzeTable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CheckTableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_checkTable;
    }

	CHECK() {
	    return this.getToken(MySqlParser.CHECK, 0);
	};

	TABLE() {
	    return this.getToken(MySqlParser.TABLE, 0);
	};

	tables() {
	    return this.getTypedRuleContext(TablesContext,0);
	};

	checkTableOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CheckTableOptionContext);
	    } else {
	        return this.getTypedRuleContext(CheckTableOptionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCheckTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCheckTable(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitCheckTable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ChecksumTableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_checksumTable;
        this.actionOption = null; // Token
    }

	CHECKSUM() {
	    return this.getToken(MySqlParser.CHECKSUM, 0);
	};

	TABLE() {
	    return this.getToken(MySqlParser.TABLE, 0);
	};

	tables() {
	    return this.getTypedRuleContext(TablesContext,0);
	};

	QUICK() {
	    return this.getToken(MySqlParser.QUICK, 0);
	};

	EXTENDED() {
	    return this.getToken(MySqlParser.EXTENDED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterChecksumTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitChecksumTable(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitChecksumTable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OptimizeTableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_optimizeTable;
        this.actionOption = null; // Token
    }

	OPTIMIZE() {
	    return this.getToken(MySqlParser.OPTIMIZE, 0);
	};

	TABLE() {
	    return this.getToken(MySqlParser.TABLE, 0);
	};

	tables() {
	    return this.getTypedRuleContext(TablesContext,0);
	};

	NO_WRITE_TO_BINLOG() {
	    return this.getToken(MySqlParser.NO_WRITE_TO_BINLOG, 0);
	};

	LOCAL() {
	    return this.getToken(MySqlParser.LOCAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterOptimizeTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitOptimizeTable(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitOptimizeTable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RepairTableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_repairTable;
        this.actionOption = null; // Token
    }

	REPAIR() {
	    return this.getToken(MySqlParser.REPAIR, 0);
	};

	TABLE() {
	    return this.getToken(MySqlParser.TABLE, 0);
	};

	tables() {
	    return this.getTypedRuleContext(TablesContext,0);
	};

	QUICK() {
	    return this.getToken(MySqlParser.QUICK, 0);
	};

	EXTENDED() {
	    return this.getToken(MySqlParser.EXTENDED, 0);
	};

	USE_FRM() {
	    return this.getToken(MySqlParser.USE_FRM, 0);
	};

	NO_WRITE_TO_BINLOG() {
	    return this.getToken(MySqlParser.NO_WRITE_TO_BINLOG, 0);
	};

	LOCAL() {
	    return this.getToken(MySqlParser.LOCAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterRepairTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitRepairTable(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitRepairTable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CheckTableOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_checkTableOption;
    }

	FOR() {
	    return this.getToken(MySqlParser.FOR, 0);
	};

	UPGRADE() {
	    return this.getToken(MySqlParser.UPGRADE, 0);
	};

	QUICK() {
	    return this.getToken(MySqlParser.QUICK, 0);
	};

	FAST() {
	    return this.getToken(MySqlParser.FAST, 0);
	};

	MEDIUM() {
	    return this.getToken(MySqlParser.MEDIUM, 0);
	};

	EXTENDED() {
	    return this.getToken(MySqlParser.EXTENDED, 0);
	};

	CHANGED() {
	    return this.getToken(MySqlParser.CHANGED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCheckTableOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCheckTableOption(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitCheckTableOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateUdfunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_createUdfunction;
        this.returnType = null; // Token
    }

	CREATE() {
	    return this.getToken(MySqlParser.CREATE, 0);
	};

	FUNCTION() {
	    return this.getToken(MySqlParser.FUNCTION, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	RETURNS() {
	    return this.getToken(MySqlParser.RETURNS, 0);
	};

	SONAME() {
	    return this.getToken(MySqlParser.SONAME, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	STRING() {
	    return this.getToken(MySqlParser.STRING, 0);
	};

	INTEGER() {
	    return this.getToken(MySqlParser.INTEGER, 0);
	};

	REAL() {
	    return this.getToken(MySqlParser.REAL, 0);
	};

	DECIMAL() {
	    return this.getToken(MySqlParser.DECIMAL, 0);
	};

	AGGREGATE() {
	    return this.getToken(MySqlParser.AGGREGATE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCreateUdfunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCreateUdfunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitCreateUdfunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InstallPluginContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_installPlugin;
    }

	INSTALL() {
	    return this.getToken(MySqlParser.INSTALL, 0);
	};

	PLUGIN() {
	    return this.getToken(MySqlParser.PLUGIN, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	SONAME() {
	    return this.getToken(MySqlParser.SONAME, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterInstallPlugin(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitInstallPlugin(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitInstallPlugin(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UninstallPluginContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_uninstallPlugin;
    }

	UNINSTALL() {
	    return this.getToken(MySqlParser.UNINSTALL, 0);
	};

	PLUGIN() {
	    return this.getToken(MySqlParser.PLUGIN, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUninstallPlugin(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUninstallPlugin(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitUninstallPlugin(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SetStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_setStatement;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class SetTransactionContext extends SetStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	setTransactionStatement() {
	    return this.getTypedRuleContext(SetTransactionStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSetTransaction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSetTransaction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitSetTransaction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.SetTransactionContext = SetTransactionContext;

class SetCharsetContext extends SetStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.SET);
	    } else {
	        return this.getToken(MySqlParser.SET, i);
	    }
	};


	CHARACTER() {
	    return this.getToken(MySqlParser.CHARACTER, 0);
	};

	CHARSET() {
	    return this.getToken(MySqlParser.CHARSET, 0);
	};

	charsetName() {
	    return this.getTypedRuleContext(CharsetNameContext,0);
	};

	DEFAULT() {
	    return this.getToken(MySqlParser.DEFAULT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSetCharset(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSetCharset(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitSetCharset(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.SetCharsetContext = SetCharsetContext;

class SetNamesContext extends SetStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SET() {
	    return this.getToken(MySqlParser.SET, 0);
	};

	NAMES() {
	    return this.getToken(MySqlParser.NAMES, 0);
	};

	charsetName() {
	    return this.getTypedRuleContext(CharsetNameContext,0);
	};

	DEFAULT() {
	    return this.getToken(MySqlParser.DEFAULT, 0);
	};

	COLLATE() {
	    return this.getToken(MySqlParser.COLLATE, 0);
	};

	collationName() {
	    return this.getTypedRuleContext(CollationNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSetNames(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSetNames(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitSetNames(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.SetNamesContext = SetNamesContext;

class SetPasswordContext extends SetStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	setPasswordStatement() {
	    return this.getTypedRuleContext(SetPasswordStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSetPassword(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSetPassword(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitSetPassword(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.SetPasswordContext = SetPasswordContext;

class SetAutocommitContext extends SetStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	setAutocommitStatement() {
	    return this.getTypedRuleContext(SetAutocommitStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSetAutocommit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSetAutocommit(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitSetAutocommit(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.SetAutocommitContext = SetAutocommitContext;

class SetVariableContext extends SetStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SET() {
	    return this.getToken(MySqlParser.SET, 0);
	};

	variableAssignment = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableAssignmentContext);
	    } else {
	        return this.getTypedRuleContext(VariableAssignmentContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSetVariable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSetVariable(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitSetVariable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.SetVariableContext = SetVariableContext;

class ShowStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_showStatement;
    }

	showStatementMysql() {
	    return this.getTypedRuleContext(ShowStatementMysqlContext,0);
	};

	SHOW() {
	    return this.getToken(MySqlParser.SHOW, 0);
	};

	showStatementInceptor() {
	    return this.getTypedRuleContext(ShowStatementInceptorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitShowStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ShowStatementMysqlContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_showStatementMysql;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ShowOpenTablesContext extends ShowStatementMysqlContext {

    constructor(parser, ctx) {
        super(parser);
        this.schemaFormat = null; // Token;
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(MySqlParser.SHOW, 0);
	};

	OPEN() {
	    return this.getToken(MySqlParser.OPEN, 0);
	};

	TABLES() {
	    return this.getToken(MySqlParser.TABLES, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	showFilter() {
	    return this.getTypedRuleContext(ShowFilterContext,0);
	};

	FROM() {
	    return this.getToken(MySqlParser.FROM, 0);
	};

	IN() {
	    return this.getToken(MySqlParser.IN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowOpenTables(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowOpenTables(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitShowOpenTables(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.ShowOpenTablesContext = ShowOpenTablesContext;

class ShowGlobalInfoContext extends ShowStatementMysqlContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(MySqlParser.SHOW, 0);
	};

	showGlobalInfoClause() {
	    return this.getTypedRuleContext(ShowGlobalInfoClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowGlobalInfo(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowGlobalInfo(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitShowGlobalInfo(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.ShowGlobalInfoContext = ShowGlobalInfoContext;

class ShowCreateFullIdObjectContext extends ShowStatementMysqlContext {

    constructor(parser, ctx) {
        super(parser);
        this.namedEntity = null; // Token;
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(MySqlParser.SHOW, 0);
	};

	CREATE() {
	    return this.getToken(MySqlParser.CREATE, 0);
	};

	fullId() {
	    return this.getTypedRuleContext(FullIdContext,0);
	};

	EVENT() {
	    return this.getToken(MySqlParser.EVENT, 0);
	};

	FUNCTION() {
	    return this.getToken(MySqlParser.FUNCTION, 0);
	};

	PROCEDURE() {
	    return this.getToken(MySqlParser.PROCEDURE, 0);
	};

	TABLE() {
	    return this.getToken(MySqlParser.TABLE, 0);
	};

	TRIGGER() {
	    return this.getToken(MySqlParser.TRIGGER, 0);
	};

	VIEW() {
	    return this.getToken(MySqlParser.VIEW, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowCreateFullIdObject(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowCreateFullIdObject(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitShowCreateFullIdObject(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.ShowCreateFullIdObjectContext = ShowCreateFullIdObjectContext;

class ShowCreateUserContext extends ShowStatementMysqlContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(MySqlParser.SHOW, 0);
	};

	CREATE() {
	    return this.getToken(MySqlParser.CREATE, 0);
	};

	USER() {
	    return this.getToken(MySqlParser.USER, 0);
	};

	userName() {
	    return this.getTypedRuleContext(UserNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowCreateUser(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowCreateUser(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitShowCreateUser(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.ShowCreateUserContext = ShowCreateUserContext;

class ShowErrorsContext extends ShowStatementMysqlContext {

    constructor(parser, ctx) {
        super(parser);
        this.errorFormat = null; // Token;
        this.offset = null; // DecimalLiteralContext;
        this.rowCount = null; // DecimalLiteralContext;
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(MySqlParser.SHOW, 0);
	};

	ERRORS() {
	    return this.getToken(MySqlParser.ERRORS, 0);
	};

	WARNINGS() {
	    return this.getToken(MySqlParser.WARNINGS, 0);
	};

	LIMIT() {
	    return this.getToken(MySqlParser.LIMIT, 0);
	};

	decimalLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DecimalLiteralContext);
	    } else {
	        return this.getTypedRuleContext(DecimalLiteralContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(MySqlParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowErrors(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowErrors(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitShowErrors(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.ShowErrorsContext = ShowErrorsContext;

class ShowCountErrorsContext extends ShowStatementMysqlContext {

    constructor(parser, ctx) {
        super(parser);
        this.errorFormat = null; // Token;
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(MySqlParser.SHOW, 0);
	};

	COUNT() {
	    return this.getToken(MySqlParser.COUNT, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	STAR() {
	    return this.getToken(MySqlParser.STAR, 0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	ERRORS() {
	    return this.getToken(MySqlParser.ERRORS, 0);
	};

	WARNINGS() {
	    return this.getToken(MySqlParser.WARNINGS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowCountErrors(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowCountErrors(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitShowCountErrors(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.ShowCountErrorsContext = ShowCountErrorsContext;

class ShowObjectFilterContext extends ShowStatementMysqlContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(MySqlParser.SHOW, 0);
	};

	showCommonEntity() {
	    return this.getTypedRuleContext(ShowCommonEntityContext,0);
	};

	showFilter() {
	    return this.getTypedRuleContext(ShowFilterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowObjectFilter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowObjectFilter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitShowObjectFilter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.ShowObjectFilterContext = ShowObjectFilterContext;

class ShowCreateDbContext extends ShowStatementMysqlContext {

    constructor(parser, ctx) {
        super(parser);
        this.schemaFormat = null; // Token;
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(MySqlParser.SHOW, 0);
	};

	CREATE() {
	    return this.getToken(MySqlParser.CREATE, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	DATABASE() {
	    return this.getToken(MySqlParser.DATABASE, 0);
	};

	SCHEMA() {
	    return this.getToken(MySqlParser.SCHEMA, 0);
	};

	ifNotExists() {
	    return this.getTypedRuleContext(IfNotExistsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowCreateDb(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowCreateDb(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitShowCreateDb(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.ShowCreateDbContext = ShowCreateDbContext;

class ShowEngineContext extends ShowStatementMysqlContext {

    constructor(parser, ctx) {
        super(parser);
        this.engineOption = null; // Token;
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(MySqlParser.SHOW, 0);
	};

	ENGINE() {
	    return this.getToken(MySqlParser.ENGINE, 0);
	};

	engineName() {
	    return this.getTypedRuleContext(EngineNameContext,0);
	};

	STATUS() {
	    return this.getToken(MySqlParser.STATUS, 0);
	};

	MUTEX() {
	    return this.getToken(MySqlParser.MUTEX, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowEngine(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowEngine(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitShowEngine(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.ShowEngineContext = ShowEngineContext;

class ShowSchemaFilterContext extends ShowStatementMysqlContext {

    constructor(parser, ctx) {
        super(parser);
        this.schemaFormat = null; // Token;
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(MySqlParser.SHOW, 0);
	};

	showSchemaEntity() {
	    return this.getTypedRuleContext(ShowSchemaEntityContext,0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	showFilter() {
	    return this.getTypedRuleContext(ShowFilterContext,0);
	};

	FROM() {
	    return this.getToken(MySqlParser.FROM, 0);
	};

	IN() {
	    return this.getToken(MySqlParser.IN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowSchemaFilter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowSchemaFilter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitShowSchemaFilter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.ShowSchemaFilterContext = ShowSchemaFilterContext;

class ShowIndexesContext extends ShowStatementMysqlContext {

    constructor(parser, ctx) {
        super(parser);
        this.indexFormat = null; // Token;
        this.tableFormat = null; // Token;
        this.schemaFormat = null; // Token;
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(MySqlParser.SHOW, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	INDEX() {
	    return this.getToken(MySqlParser.INDEX, 0);
	};

	INDEXES() {
	    return this.getToken(MySqlParser.INDEXES, 0);
	};

	KEYS() {
	    return this.getToken(MySqlParser.KEYS, 0);
	};

	FROM = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.FROM);
	    } else {
	        return this.getToken(MySqlParser.FROM, i);
	    }
	};


	IN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.IN);
	    } else {
	        return this.getToken(MySqlParser.IN, i);
	    }
	};


	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	WHERE() {
	    return this.getToken(MySqlParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowIndexes(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowIndexes(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitShowIndexes(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.ShowIndexesContext = ShowIndexesContext;

class ShowLogEventsContext extends ShowStatementMysqlContext {

    constructor(parser, ctx) {
        super(parser);
        this.logFormat = null; // Token;
        this.filename = null; // Token;
        this.fromPosition = null; // DecimalLiteralContext;
        this.offset = null; // DecimalLiteralContext;
        this.rowCount = null; // DecimalLiteralContext;
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(MySqlParser.SHOW, 0);
	};

	EVENTS() {
	    return this.getToken(MySqlParser.EVENTS, 0);
	};

	BINLOG() {
	    return this.getToken(MySqlParser.BINLOG, 0);
	};

	RELAYLOG() {
	    return this.getToken(MySqlParser.RELAYLOG, 0);
	};

	IN() {
	    return this.getToken(MySqlParser.IN, 0);
	};

	FROM() {
	    return this.getToken(MySqlParser.FROM, 0);
	};

	LIMIT() {
	    return this.getToken(MySqlParser.LIMIT, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	decimalLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DecimalLiteralContext);
	    } else {
	        return this.getTypedRuleContext(DecimalLiteralContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(MySqlParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowLogEvents(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowLogEvents(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitShowLogEvents(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.ShowLogEventsContext = ShowLogEventsContext;

class ShowMasterLogsContext extends ShowStatementMysqlContext {

    constructor(parser, ctx) {
        super(parser);
        this.logFormat = null; // Token;
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(MySqlParser.SHOW, 0);
	};

	LOGS() {
	    return this.getToken(MySqlParser.LOGS, 0);
	};

	BINARY() {
	    return this.getToken(MySqlParser.BINARY, 0);
	};

	MASTER() {
	    return this.getToken(MySqlParser.MASTER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowMasterLogs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowMasterLogs(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitShowMasterLogs(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.ShowMasterLogsContext = ShowMasterLogsContext;

class ShowGrantsContext extends ShowStatementMysqlContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(MySqlParser.SHOW, 0);
	};

	GRANTS() {
	    return this.getToken(MySqlParser.GRANTS, 0);
	};

	FOR() {
	    return this.getToken(MySqlParser.FOR, 0);
	};

	userName() {
	    return this.getTypedRuleContext(UserNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowGrants(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowGrants(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitShowGrants(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.ShowGrantsContext = ShowGrantsContext;

class ShowSlaveStatusContext extends ShowStatementMysqlContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(MySqlParser.SHOW, 0);
	};

	SLAVE() {
	    return this.getToken(MySqlParser.SLAVE, 0);
	};

	STATUS() {
	    return this.getToken(MySqlParser.STATUS, 0);
	};

	FOR() {
	    return this.getToken(MySqlParser.FOR, 0);
	};

	CHANNEL() {
	    return this.getToken(MySqlParser.CHANNEL, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowSlaveStatus(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowSlaveStatus(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitShowSlaveStatus(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.ShowSlaveStatusContext = ShowSlaveStatusContext;

class ShowRoutineContext extends ShowStatementMysqlContext {

    constructor(parser, ctx) {
        super(parser);
        this.routine = null; // Token;
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(MySqlParser.SHOW, 0);
	};

	CODE() {
	    return this.getToken(MySqlParser.CODE, 0);
	};

	fullId() {
	    return this.getTypedRuleContext(FullIdContext,0);
	};

	FUNCTION() {
	    return this.getToken(MySqlParser.FUNCTION, 0);
	};

	PROCEDURE() {
	    return this.getToken(MySqlParser.PROCEDURE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowRoutine(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowRoutine(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitShowRoutine(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.ShowRoutineContext = ShowRoutineContext;

class ShowProfileContext extends ShowStatementMysqlContext {

    constructor(parser, ctx) {
        super(parser);
        this.queryCount = null; // DecimalLiteralContext;
        this.offset = null; // DecimalLiteralContext;
        this.rowCount = null; // DecimalLiteralContext;
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(MySqlParser.SHOW, 0);
	};

	PROFILE() {
	    return this.getToken(MySqlParser.PROFILE, 0);
	};

	showProfileType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ShowProfileTypeContext);
	    } else {
	        return this.getTypedRuleContext(ShowProfileTypeContext,i);
	    }
	};

	LIMIT() {
	    return this.getToken(MySqlParser.LIMIT, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	FOR() {
	    return this.getToken(MySqlParser.FOR, 0);
	};

	QUERY() {
	    return this.getToken(MySqlParser.QUERY, 0);
	};

	decimalLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DecimalLiteralContext);
	    } else {
	        return this.getTypedRuleContext(DecimalLiteralContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowProfile(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowProfile(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitShowProfile(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.ShowProfileContext = ShowProfileContext;

class ShowColumnsContext extends ShowStatementMysqlContext {

    constructor(parser, ctx) {
        super(parser);
        this.columnsFormat = null; // Token;
        this.tableFormat = null; // Token;
        this.schemaFormat = null; // FromDatabaseContext;
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(MySqlParser.SHOW, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	COLUMNS() {
	    return this.getToken(MySqlParser.COLUMNS, 0);
	};

	FIELDS() {
	    return this.getToken(MySqlParser.FIELDS, 0);
	};

	FROM() {
	    return this.getToken(MySqlParser.FROM, 0);
	};

	IN() {
	    return this.getToken(MySqlParser.IN, 0);
	};

	FULL() {
	    return this.getToken(MySqlParser.FULL, 0);
	};

	showFilter() {
	    return this.getTypedRuleContext(ShowFilterContext,0);
	};

	fromDatabase() {
	    return this.getTypedRuleContext(FromDatabaseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowColumns(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowColumns(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitShowColumns(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.ShowColumnsContext = ShowColumnsContext;

class ShowStatementInceptorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_showStatementInceptor;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ShowInceptorCurrentContext extends ShowStatementInceptorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CURRENT() {
	    return this.getToken(MySqlParser.CURRENT, 0);
	};

	APPLICATION() {
	    return this.getToken(MySqlParser.APPLICATION, 0);
	};

	APP() {
	    return this.getToken(MySqlParser.APP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowInceptorCurrent(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowInceptorCurrent(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitShowInceptorCurrent(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.ShowInceptorCurrentContext = ShowInceptorCurrentContext;

class ShowInceptorDatabaseContext extends ShowStatementInceptorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DATABASES() {
	    return this.getToken(MySqlParser.DATABASES, 0);
	};

	SCHEMAS() {
	    return this.getToken(MySqlParser.SCHEMAS, 0);
	};

	LIKE() {
	    return this.getToken(MySqlParser.LIKE, 0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowInceptorDatabase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowInceptorDatabase(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitShowInceptorDatabase(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.ShowInceptorDatabaseContext = ShowInceptorDatabaseContext;

class ShowInceptorTblPropertiesContext extends ShowStatementInceptorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	TBLPROPERTIES() {
	    return this.getToken(MySqlParser.TBLPROPERTIES, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowInceptorTblProperties(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowInceptorTblProperties(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitShowInceptorTblProperties(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.ShowInceptorTblPropertiesContext = ShowInceptorTblPropertiesContext;

class ShowInceptorPartitionContext extends ShowStatementInceptorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	PARTITIONS() {
	    return this.getToken(MySqlParser.PARTITIONS, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	partitionSpec() {
	    return this.getTypedRuleContext(PartitionSpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowInceptorPartition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowInceptorPartition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitShowInceptorPartition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.ShowInceptorPartitionContext = ShowInceptorPartitionContext;

class ShowInceptorCreateTableContext extends ShowStatementInceptorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CREATE() {
	    return this.getToken(MySqlParser.CREATE, 0);
	};

	TABLE() {
	    return this.getToken(MySqlParser.TABLE, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowInceptorCreateTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowInceptorCreateTable(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitShowInceptorCreateTable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.ShowInceptorCreateTableContext = ShowInceptorCreateTableContext;

class ShowInceptorOtherContext extends ShowStatementInceptorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DATABASE() {
	    return this.getToken(MySqlParser.DATABASE, 0);
	};

	LINKS() {
	    return this.getToken(MySqlParser.LINKS, 0);
	};

	COMPACTIONS() {
	    return this.getToken(MySqlParser.COMPACTIONS, 0);
	};

	TRANSACTIONS() {
	    return this.getToken(MySqlParser.TRANSACTIONS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowInceptorOther(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowInceptorOther(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitShowInceptorOther(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.ShowInceptorOtherContext = ShowInceptorOtherContext;

class ShowInceptorMiscContext extends ShowStatementInceptorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	APPLICATIONS() {
	    return this.getToken(MySqlParser.APPLICATIONS, 0);
	};

	APPS() {
	    return this.getToken(MySqlParser.APPS, 0);
	};

	STREAMJOBS() {
	    return this.getToken(MySqlParser.STREAMJOBS, 0);
	};

	RULES() {
	    return this.getToken(MySqlParser.RULES, 0);
	};

	RULEBASES() {
	    return this.getToken(MySqlParser.RULEBASES, 0);
	};

	POLICIES() {
	    return this.getToken(MySqlParser.POLICIES, 0);
	};

	POLICYBASES() {
	    return this.getToken(MySqlParser.POLICYBASES, 0);
	};

	RULEFUNCTIONS() {
	    return this.getToken(MySqlParser.RULEFUNCTIONS, 0);
	};

	CACHEDMETRICS() {
	    return this.getToken(MySqlParser.CACHEDMETRICS, 0);
	};

	LIKE() {
	    return this.getToken(MySqlParser.LIKE, 0);
	};

	wildUid() {
	    return this.getTypedRuleContext(WildUidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowInceptorMisc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowInceptorMisc(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitShowInceptorMisc(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.ShowInceptorMiscContext = ShowInceptorMiscContext;

class ShowInceptorFunctionContext extends ShowStatementInceptorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	FUNCTIONS() {
	    return this.getToken(MySqlParser.FUNCTIONS, 0);
	};

	wildFuncOptional() {
	    return this.getTypedRuleContext(WildFuncOptionalContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowInceptorFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowInceptorFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitShowInceptorFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.ShowInceptorFunctionContext = ShowInceptorFunctionContext;

class ShowInceptorColumnContext extends ShowStatementInceptorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	COLUMNS() {
	    return this.getToken(MySqlParser.COLUMNS, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	FROM() {
	    return this.getToken(MySqlParser.FROM, 0);
	};

	IN() {
	    return this.getToken(MySqlParser.IN, 0);
	};

	fromDatabase() {
	    return this.getTypedRuleContext(FromDatabaseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowInceptorColumn(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowInceptorColumn(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitShowInceptorColumn(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.ShowInceptorColumnContext = ShowInceptorColumnContext;

class ShowInceptorIndexContext extends ShowStatementInceptorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ON() {
	    return this.getToken(MySqlParser.ON, 0);
	};

	wildUid() {
	    return this.getTypedRuleContext(WildUidContext,0);
	};

	INDEX() {
	    return this.getToken(MySqlParser.INDEX, 0);
	};

	INDEXES() {
	    return this.getToken(MySqlParser.INDEXES, 0);
	};

	FORMATTED() {
	    return this.getToken(MySqlParser.FORMATTED, 0);
	};

	fromDatabase() {
	    return this.getTypedRuleContext(FromDatabaseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowInceptorIndex(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowInceptorIndex(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitShowInceptorIndex(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.ShowInceptorIndexContext = ShowInceptorIndexContext;

class ShowInceptorExtendedTableContext extends ShowStatementInceptorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	TABLE() {
	    return this.getToken(MySqlParser.TABLE, 0);
	};

	EXTENDED() {
	    return this.getToken(MySqlParser.EXTENDED, 0);
	};

	LIKE() {
	    return this.getToken(MySqlParser.LIKE, 0);
	};

	wildUid() {
	    return this.getTypedRuleContext(WildUidContext,0);
	};

	fromDatabase() {
	    return this.getTypedRuleContext(FromDatabaseContext,0);
	};

	partitionSpec() {
	    return this.getTypedRuleContext(PartitionSpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowInceptorExtendedTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowInceptorExtendedTable(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitShowInceptorExtendedTable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.ShowInceptorExtendedTableContext = ShowInceptorExtendedTableContext;

class ShowInceptorBlackListContext extends ShowStatementInceptorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	COMPACT() {
	    return this.getToken(MySqlParser.COMPACT, 0);
	};

	BLACKLIST() {
	    return this.getToken(MySqlParser.BLACKLIST, 0);
	};

	databaseNameAllowEmpty() {
	    return this.getTypedRuleContext(DatabaseNameAllowEmptyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowInceptorBlackList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowInceptorBlackList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitShowInceptorBlackList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.ShowInceptorBlackListContext = ShowInceptorBlackListContext;

class ShowInceptorTablesContext extends ShowStatementInceptorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	TABLES() {
	    return this.getToken(MySqlParser.TABLES, 0);
	};

	MATERIALIZED() {
	    return this.getToken(MySqlParser.MATERIALIZED, 0);
	};

	VIEWS() {
	    return this.getToken(MySqlParser.VIEWS, 0);
	};

	SEQUENCES() {
	    return this.getToken(MySqlParser.SEQUENCES, 0);
	};

	STREAMS() {
	    return this.getToken(MySqlParser.STREAMS, 0);
	};

	METRICS() {
	    return this.getToken(MySqlParser.METRICS, 0);
	};

	fromDatabase() {
	    return this.getTypedRuleContext(FromDatabaseContext,0);
	};

	LIKE() {
	    return this.getToken(MySqlParser.LIKE, 0);
	};

	wildUid() {
	    return this.getTypedRuleContext(WildUidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowInceptorTables(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowInceptorTables(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitShowInceptorTables(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.ShowInceptorTablesContext = ShowInceptorTablesContext;

class ShowInceptorConfContext extends ShowStatementInceptorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CONF() {
	    return this.getToken(MySqlParser.CONF, 0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowInceptorConf(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowInceptorConf(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitShowInceptorConf(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.ShowInceptorConfContext = ShowInceptorConfContext;

class ShowInceptorPlsqlContext extends ShowStatementInceptorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	PLSQL() {
	    return this.getToken(MySqlParser.PLSQL, 0);
	};

	FUNCTIONS() {
	    return this.getToken(MySqlParser.FUNCTIONS, 0);
	};

	PACKAGES() {
	    return this.getToken(MySqlParser.PACKAGES, 0);
	};

	wildUid() {
	    return this.getTypedRuleContext(WildUidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowInceptorPlsql(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowInceptorPlsql(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitShowInceptorPlsql(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.ShowInceptorPlsqlContext = ShowInceptorPlsqlContext;

class VariableAssignmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_variableAssignment;
    }

	variableClause() {
	    return this.getTypedRuleContext(VariableClauseContext,0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	VAR_ASSIGN() {
	    return this.getToken(MySqlParser.VAR_ASSIGN, 0);
	};

	variableExprReserved() {
	    return this.getTypedRuleContext(VariableExprReservedContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterVariableAssignment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitVariableAssignment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitVariableAssignment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VariableClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_variableClause;
    }

	LOCAL_ID() {
	    return this.getToken(MySqlParser.LOCAL_ID, 0);
	};

	GLOBAL_ID() {
	    return this.getToken(MySqlParser.GLOBAL_ID, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	GLOBAL() {
	    return this.getToken(MySqlParser.GLOBAL, 0);
	};

	SESSION() {
	    return this.getToken(MySqlParser.SESSION, 0);
	};

	LOCAL() {
	    return this.getToken(MySqlParser.LOCAL, 0);
	};

	AT_SIGN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.AT_SIGN);
	    } else {
	        return this.getToken(MySqlParser.AT_SIGN, i);
	    }
	};


	variableFullId() {
	    return this.getTypedRuleContext(VariableFullIdContext,0);
	};

	emptyElement() {
	    return this.getTypedRuleContext(EmptyElementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterVariableClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitVariableClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitVariableClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VariableFullIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_variableFullId;
    }

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	dottedId = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DottedIdContext);
	    } else {
	        return this.getTypedRuleContext(DottedIdContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterVariableFullId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitVariableFullId(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitVariableFullId(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VariableExprReservedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_variableExprReserved;
    }

	ORACLE() {
	    return this.getToken(MySqlParser.ORACLE, 0);
	};

	DB2() {
	    return this.getToken(MySqlParser.DB2, 0);
	};

	NONSTRICT() {
	    return this.getToken(MySqlParser.NONSTRICT, 0);
	};

	INCEPTOR() {
	    return this.getToken(MySqlParser.INCEPTOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterVariableExprReserved(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitVariableExprReserved(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitVariableExprReserved(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ShowCommonEntityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_showCommonEntity;
    }

	CHARACTER() {
	    return this.getToken(MySqlParser.CHARACTER, 0);
	};

	SET() {
	    return this.getToken(MySqlParser.SET, 0);
	};

	COLLATION() {
	    return this.getToken(MySqlParser.COLLATION, 0);
	};

	DATABASES() {
	    return this.getToken(MySqlParser.DATABASES, 0);
	};

	SCHEMAS() {
	    return this.getToken(MySqlParser.SCHEMAS, 0);
	};

	FUNCTION() {
	    return this.getToken(MySqlParser.FUNCTION, 0);
	};

	STATUS() {
	    return this.getToken(MySqlParser.STATUS, 0);
	};

	PROCEDURE() {
	    return this.getToken(MySqlParser.PROCEDURE, 0);
	};

	VARIABLES() {
	    return this.getToken(MySqlParser.VARIABLES, 0);
	};

	GLOBAL() {
	    return this.getToken(MySqlParser.GLOBAL, 0);
	};

	SESSION() {
	    return this.getToken(MySqlParser.SESSION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowCommonEntity(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowCommonEntity(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitShowCommonEntity(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ShowFilterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_showFilter;
    }

	LIKE() {
	    return this.getToken(MySqlParser.LIKE, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	WHERE() {
	    return this.getToken(MySqlParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowFilter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowFilter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitShowFilter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ShowGlobalInfoClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_showGlobalInfoClause;
    }

	ENGINES() {
	    return this.getToken(MySqlParser.ENGINES, 0);
	};

	STORAGE() {
	    return this.getToken(MySqlParser.STORAGE, 0);
	};

	MASTER() {
	    return this.getToken(MySqlParser.MASTER, 0);
	};

	STATUS() {
	    return this.getToken(MySqlParser.STATUS, 0);
	};

	PLUGINS() {
	    return this.getToken(MySqlParser.PLUGINS, 0);
	};

	PRIVILEGES() {
	    return this.getToken(MySqlParser.PRIVILEGES, 0);
	};

	PROCESSLIST() {
	    return this.getToken(MySqlParser.PROCESSLIST, 0);
	};

	FULL() {
	    return this.getToken(MySqlParser.FULL, 0);
	};

	PROFILES() {
	    return this.getToken(MySqlParser.PROFILES, 0);
	};

	SLAVE() {
	    return this.getToken(MySqlParser.SLAVE, 0);
	};

	HOSTS() {
	    return this.getToken(MySqlParser.HOSTS, 0);
	};

	AUTHORS() {
	    return this.getToken(MySqlParser.AUTHORS, 0);
	};

	CONTRIBUTORS() {
	    return this.getToken(MySqlParser.CONTRIBUTORS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowGlobalInfoClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowGlobalInfoClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitShowGlobalInfoClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ShowSchemaEntityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_showSchemaEntity;
    }

	EVENTS() {
	    return this.getToken(MySqlParser.EVENTS, 0);
	};

	TABLE() {
	    return this.getToken(MySqlParser.TABLE, 0);
	};

	STATUS() {
	    return this.getToken(MySqlParser.STATUS, 0);
	};

	TABLES() {
	    return this.getToken(MySqlParser.TABLES, 0);
	};

	FULL() {
	    return this.getToken(MySqlParser.FULL, 0);
	};

	TRIGGERS() {
	    return this.getToken(MySqlParser.TRIGGERS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowSchemaEntity(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowSchemaEntity(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitShowSchemaEntity(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ShowProfileTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_showProfileType;
    }

	ALL() {
	    return this.getToken(MySqlParser.ALL, 0);
	};

	BLOCK() {
	    return this.getToken(MySqlParser.BLOCK, 0);
	};

	IO() {
	    return this.getToken(MySqlParser.IO, 0);
	};

	CONTEXT() {
	    return this.getToken(MySqlParser.CONTEXT, 0);
	};

	SWITCHES() {
	    return this.getToken(MySqlParser.SWITCHES, 0);
	};

	CPU() {
	    return this.getToken(MySqlParser.CPU, 0);
	};

	IPC() {
	    return this.getToken(MySqlParser.IPC, 0);
	};

	MEMORY() {
	    return this.getToken(MySqlParser.MEMORY, 0);
	};

	PAGE() {
	    return this.getToken(MySqlParser.PAGE, 0);
	};

	FAULTS() {
	    return this.getToken(MySqlParser.FAULTS, 0);
	};

	SOURCE() {
	    return this.getToken(MySqlParser.SOURCE, 0);
	};

	SWAPS() {
	    return this.getToken(MySqlParser.SWAPS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowProfileType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowProfileType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitShowProfileType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FromDatabaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_fromDatabase;
    }

	databaseName() {
	    return this.getTypedRuleContext(DatabaseNameContext,0);
	};

	FROM() {
	    return this.getToken(MySqlParser.FROM, 0);
	};

	IN() {
	    return this.getToken(MySqlParser.IN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterFromDatabase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitFromDatabase(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitFromDatabase(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AddJarStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_addJarStatement;
    }

	ADD() {
	    return this.getToken(MySqlParser.ADD, 0);
	};

	JAR() {
	    return this.getToken(MySqlParser.JAR, 0);
	};

	JARS() {
	    return this.getToken(MySqlParser.JARS, 0);
	};

	filePath() {
	    return this.getTypedRuleContext(FilePathContext,0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAddJarStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAddJarStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAddJarStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ListJarStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_listJarStatement;
    }

	LIST() {
	    return this.getToken(MySqlParser.LIST, 0);
	};

	JAR() {
	    return this.getToken(MySqlParser.JAR, 0);
	};

	JARS() {
	    return this.getToken(MySqlParser.JARS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterListJarStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitListJarStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitListJarStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BinlogStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_binlogStatement;
    }

	BINLOG() {
	    return this.getToken(MySqlParser.BINLOG, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterBinlogStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitBinlogStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitBinlogStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CacheIndexStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_cacheIndexStatement;
        this.schema = null; // UidContext
    }

	CACHE() {
	    return this.getToken(MySqlParser.CACHE, 0);
	};

	INDEX() {
	    return this.getToken(MySqlParser.INDEX, 0);
	};

	tableIndexes = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TableIndexesContext);
	    } else {
	        return this.getTypedRuleContext(TableIndexesContext,i);
	    }
	};

	IN() {
	    return this.getToken(MySqlParser.IN, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	ALL() {
	    return this.getToken(MySqlParser.ALL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCacheIndexStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCacheIndexStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitCacheIndexStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FlushStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_flushStatement;
        this.flushFormat = null; // Token
    }

	FLUSH() {
	    return this.getToken(MySqlParser.FLUSH, 0);
	};

	flushOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FlushOptionContext);
	    } else {
	        return this.getTypedRuleContext(FlushOptionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	NO_WRITE_TO_BINLOG() {
	    return this.getToken(MySqlParser.NO_WRITE_TO_BINLOG, 0);
	};

	LOCAL() {
	    return this.getToken(MySqlParser.LOCAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterFlushStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitFlushStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitFlushStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class KillStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_killStatement;
        this.connectionFormat = null; // Token
    }

	KILL() {
	    return this.getToken(MySqlParser.KILL, 0);
	};

	decimalLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DecimalLiteralContext);
	    } else {
	        return this.getTypedRuleContext(DecimalLiteralContext,i);
	    }
	};

	CONNECTION() {
	    return this.getToken(MySqlParser.CONNECTION, 0);
	};

	QUERY() {
	    return this.getToken(MySqlParser.QUERY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterKillStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitKillStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitKillStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LoadIndexIntoCacheContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_loadIndexIntoCache;
    }

	LOAD() {
	    return this.getToken(MySqlParser.LOAD, 0);
	};

	INDEX() {
	    return this.getToken(MySqlParser.INDEX, 0);
	};

	INTO() {
	    return this.getToken(MySqlParser.INTO, 0);
	};

	CACHE() {
	    return this.getToken(MySqlParser.CACHE, 0);
	};

	loadedTableIndexes = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LoadedTableIndexesContext);
	    } else {
	        return this.getTypedRuleContext(LoadedTableIndexesContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLoadIndexIntoCache(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLoadIndexIntoCache(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitLoadIndexIntoCache(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResetStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_resetStatement;
    }

	RESET() {
	    return this.getToken(MySqlParser.RESET, 0);
	};

	QUERY() {
	    return this.getToken(MySqlParser.QUERY, 0);
	};

	CACHE() {
	    return this.getToken(MySqlParser.CACHE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterResetStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitResetStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitResetStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ShutdownStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_shutdownStatement;
    }

	SHUTDOWN() {
	    return this.getToken(MySqlParser.SHUTDOWN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShutdownStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShutdownStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitShutdownStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SetDelimiterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_setDelimiter;
        this.delimiter = ';'
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
			this.delimiter = ctx.delimiter;
		}

}


class SetDelimiterInceptorContext extends SetDelimiterContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	EXCLAMATION_SET() {
	    return this.getToken(MySqlParser.EXCLAMATION_SET, 0);
	};

	PLSQLUSESLASH() {
	    return this.getToken(MySqlParser.PLSQLUSESLASH, 0);
	};

	booleanLiteral() {
	    return this.getTypedRuleContext(BooleanLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSetDelimiterInceptor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSetDelimiterInceptor(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitSetDelimiterInceptor(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.SetDelimiterInceptorContext = SetDelimiterInceptorContext;

class SetDelimiterMysqlContext extends SetDelimiterContext {

    constructor(parser, ctx) {
        super(parser);
        this.token = null; // SetDelimiterTokenContext;
        super.copyFrom(ctx);
    }

	DELIMITER() {
	    return this.getToken(MySqlParser.DELIMITER, 0);
	};

	setDelimiterToken() {
	    return this.getTypedRuleContext(SetDelimiterTokenContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSetDelimiterMysql(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSetDelimiterMysql(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitSetDelimiterMysql(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.SetDelimiterMysqlContext = SetDelimiterMysqlContext;

class SetDelimiterTokenContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_setDelimiterToken;
    }


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSetDelimiterToken(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSetDelimiterToken(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitSetDelimiterToken(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SetPlsqlDialectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_setPlsqlDialect;
    }

	EXCLAMATION_SET() {
	    return this.getToken(MySqlParser.EXCLAMATION_SET, 0);
	};

	PLSQLCLIENTDIALECT() {
	    return this.getToken(MySqlParser.PLSQLCLIENTDIALECT, 0);
	};

	setPlsqlDialectId() {
	    return this.getTypedRuleContext(SetPlsqlDialectIdContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSetPlsqlDialect(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSetPlsqlDialect(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitSetPlsqlDialect(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SetPlsqlDialectIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_setPlsqlDialectId;
    }

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	emptyElement() {
	    return this.getTypedRuleContext(EmptyElementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSetPlsqlDialectId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSetPlsqlDialectId(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitSetPlsqlDialectId(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableIndexesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_tableIndexes;
        this.indexFormat = null; // Token
    }

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	INDEX() {
	    return this.getToken(MySqlParser.INDEX, 0);
	};

	KEY() {
	    return this.getToken(MySqlParser.KEY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableIndexes(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableIndexes(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitTableIndexes(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FlushOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_flushOption;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class TableFlushOptionContext extends FlushOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	TABLES() {
	    return this.getToken(MySqlParser.TABLES, 0);
	};

	tables() {
	    return this.getTypedRuleContext(TablesContext,0);
	};

	flushTableOption() {
	    return this.getTypedRuleContext(FlushTableOptionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableFlushOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableFlushOption(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitTableFlushOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.TableFlushOptionContext = TableFlushOptionContext;

class ChannelFlushOptionContext extends FlushOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	RELAY() {
	    return this.getToken(MySqlParser.RELAY, 0);
	};

	LOGS() {
	    return this.getToken(MySqlParser.LOGS, 0);
	};

	channelOption() {
	    return this.getTypedRuleContext(ChannelOptionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterChannelFlushOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitChannelFlushOption(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitChannelFlushOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.ChannelFlushOptionContext = ChannelFlushOptionContext;

class SimpleFlushOptionContext extends FlushOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DES_KEY_FILE() {
	    return this.getToken(MySqlParser.DES_KEY_FILE, 0);
	};

	HOSTS() {
	    return this.getToken(MySqlParser.HOSTS, 0);
	};

	LOGS() {
	    return this.getToken(MySqlParser.LOGS, 0);
	};

	OPTIMIZER_COSTS() {
	    return this.getToken(MySqlParser.OPTIMIZER_COSTS, 0);
	};

	PRIVILEGES() {
	    return this.getToken(MySqlParser.PRIVILEGES, 0);
	};

	QUERY() {
	    return this.getToken(MySqlParser.QUERY, 0);
	};

	CACHE() {
	    return this.getToken(MySqlParser.CACHE, 0);
	};

	STATUS() {
	    return this.getToken(MySqlParser.STATUS, 0);
	};

	USER_RESOURCES() {
	    return this.getToken(MySqlParser.USER_RESOURCES, 0);
	};

	TABLES() {
	    return this.getToken(MySqlParser.TABLES, 0);
	};

	WITH() {
	    return this.getToken(MySqlParser.WITH, 0);
	};

	READ() {
	    return this.getToken(MySqlParser.READ, 0);
	};

	LOCK() {
	    return this.getToken(MySqlParser.LOCK, 0);
	};

	BINARY() {
	    return this.getToken(MySqlParser.BINARY, 0);
	};

	ENGINE() {
	    return this.getToken(MySqlParser.ENGINE, 0);
	};

	ERROR() {
	    return this.getToken(MySqlParser.ERROR, 0);
	};

	GENERAL() {
	    return this.getToken(MySqlParser.GENERAL, 0);
	};

	RELAY() {
	    return this.getToken(MySqlParser.RELAY, 0);
	};

	SLOW() {
	    return this.getToken(MySqlParser.SLOW, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSimpleFlushOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSimpleFlushOption(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitSimpleFlushOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.SimpleFlushOptionContext = SimpleFlushOptionContext;

class FlushTableOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_flushTableOption;
    }

	WITH() {
	    return this.getToken(MySqlParser.WITH, 0);
	};

	READ() {
	    return this.getToken(MySqlParser.READ, 0);
	};

	LOCK() {
	    return this.getToken(MySqlParser.LOCK, 0);
	};

	FOR() {
	    return this.getToken(MySqlParser.FOR, 0);
	};

	EXPORT() {
	    return this.getToken(MySqlParser.EXPORT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterFlushTableOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitFlushTableOption(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitFlushTableOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LoadedTableIndexesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_loadedTableIndexes;
        this.partitionList = null; // UidListContext
        this.indexFormat = null; // Token
        this.indexList = null; // UidListContext
    }

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	LR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.LR_BRACKET);
	    } else {
	        return this.getToken(MySqlParser.LR_BRACKET, i);
	    }
	};


	RR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.RR_BRACKET);
	    } else {
	        return this.getToken(MySqlParser.RR_BRACKET, i);
	    }
	};


	IGNORE() {
	    return this.getToken(MySqlParser.IGNORE, 0);
	};

	LEAVES() {
	    return this.getToken(MySqlParser.LEAVES, 0);
	};

	uidList = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidListContext);
	    } else {
	        return this.getTypedRuleContext(UidListContext,i);
	    }
	};

	ALL() {
	    return this.getToken(MySqlParser.ALL, 0);
	};

	INDEX() {
	    return this.getToken(MySqlParser.INDEX, 0);
	};

	KEY() {
	    return this.getToken(MySqlParser.KEY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLoadedTableIndexes(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLoadedTableIndexes(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitLoadedTableIndexes(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DescribeStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_describeStatement;
    }

	describeStatementMysql() {
	    return this.getTypedRuleContext(DescribeStatementMysqlContext,0);
	};

	describeStatementInceptor() {
	    return this.getTypedRuleContext(DescribeStatementInceptorContext,0);
	};

	DESCRIBE() {
	    return this.getToken(MySqlParser.DESCRIBE, 0);
	};

	DESC() {
	    return this.getToken(MySqlParser.DESC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDescribeStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDescribeStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitDescribeStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DescribeStatementMysqlContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_describeStatementMysql;
    }

	simpleDescribeStatement() {
	    return this.getTypedRuleContext(SimpleDescribeStatementContext,0);
	};

	fullDescribeStatement() {
	    return this.getTypedRuleContext(FullDescribeStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDescribeStatementMysql(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDescribeStatementMysql(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitDescribeStatementMysql(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SimpleDescribeStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_simpleDescribeStatement;
        this.command = null; // Token
        this.column = null; // UidContext
        this.pattern = null; // Token
    }

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	EXPLAIN() {
	    return this.getToken(MySqlParser.EXPLAIN, 0);
	};

	DESCRIBE() {
	    return this.getToken(MySqlParser.DESCRIBE, 0);
	};

	DESC() {
	    return this.getToken(MySqlParser.DESC, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSimpleDescribeStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSimpleDescribeStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitSimpleDescribeStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FullDescribeStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_fullDescribeStatement;
        this.command = null; // Token
        this.formatType = null; // Token
        this.formatValue = null; // Token
    }

	describeObjectClause() {
	    return this.getTypedRuleContext(DescribeObjectClauseContext,0);
	};

	EXPLAIN() {
	    return this.getToken(MySqlParser.EXPLAIN, 0);
	};

	DESCRIBE() {
	    return this.getToken(MySqlParser.DESCRIBE, 0);
	};

	DESC() {
	    return this.getToken(MySqlParser.DESC, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	EXTENDED() {
	    return this.getToken(MySqlParser.EXTENDED, 0);
	};

	PARTITIONS() {
	    return this.getToken(MySqlParser.PARTITIONS, 0);
	};

	FORMAT() {
	    return this.getToken(MySqlParser.FORMAT, 0);
	};

	TRADITIONAL() {
	    return this.getToken(MySqlParser.TRADITIONAL, 0);
	};

	JSON() {
	    return this.getToken(MySqlParser.JSON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterFullDescribeStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitFullDescribeStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitFullDescribeStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DescribeStatementInceptorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_describeStatementInceptor;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class DescribeInceptorMiscContext extends DescribeStatementInceptorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	APPLICATION() {
	    return this.getToken(MySqlParser.APPLICATION, 0);
	};

	APP() {
	    return this.getToken(MySqlParser.APP, 0);
	};

	STREAMJOB() {
	    return this.getToken(MySqlParser.STREAMJOB, 0);
	};

	RULE() {
	    return this.getToken(MySqlParser.RULE, 0);
	};

	POLICY() {
	    return this.getToken(MySqlParser.POLICY, 0);
	};

	RULEFUNCTION() {
	    return this.getToken(MySqlParser.RULEFUNCTION, 0);
	};

	CACHEDMETRIC() {
	    return this.getToken(MySqlParser.CACHEDMETRIC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDescribeInceptorMisc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDescribeInceptorMisc(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitDescribeInceptorMisc(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.DescribeInceptorMiscContext = DescribeInceptorMiscContext;

class DescribeInceptorTableContext extends DescribeStatementInceptorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	prefixedColumnNameOptional() {
	    return this.getTypedRuleContext(PrefixedColumnNameOptionalContext,0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	partitionSpec() {
	    return this.getTypedRuleContext(PartitionSpecContext,0);
	};

	EXTENDED() {
	    return this.getToken(MySqlParser.EXTENDED, 0);
	};

	FORMATTED() {
	    return this.getToken(MySqlParser.FORMATTED, 0);
	};

	PRETTY() {
	    return this.getToken(MySqlParser.PRETTY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDescribeInceptorTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDescribeInceptorTable(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitDescribeInceptorTable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.DescribeInceptorTableContext = DescribeInceptorTableContext;

class DescribeInceptorFunctionContext extends DescribeStatementInceptorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	FUNCTION() {
	    return this.getToken(MySqlParser.FUNCTION, 0);
	};

	udfName() {
	    return this.getTypedRuleContext(UdfNameContext,0);
	};

	functionNameBaseExtra() {
	    return this.getTypedRuleContext(FunctionNameBaseExtraContext,0);
	};

	EXTENDED() {
	    return this.getToken(MySqlParser.EXTENDED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDescribeInceptorFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDescribeInceptorFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitDescribeInceptorFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.DescribeInceptorFunctionContext = DescribeInceptorFunctionContext;

class DescribeInceptorTableSuggesterContext extends DescribeStatementInceptorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	EXTENDED() {
	    return this.getToken(MySqlParser.EXTENDED, 0);
	};

	FORMATTED() {
	    return this.getToken(MySqlParser.FORMATTED, 0);
	};

	PRETTY() {
	    return this.getToken(MySqlParser.PRETTY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDescribeInceptorTableSuggester(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDescribeInceptorTableSuggester(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitDescribeInceptorTableSuggester(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.DescribeInceptorTableSuggesterContext = DescribeInceptorTableSuggesterContext;

class DescribeInceptorIndexContext extends DescribeStatementInceptorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	INDEX() {
	    return this.getToken(MySqlParser.INDEX, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	ON() {
	    return this.getToken(MySqlParser.ON, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	FORMATTED() {
	    return this.getToken(MySqlParser.FORMATTED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDescribeInceptorIndex(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDescribeInceptorIndex(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitDescribeInceptorIndex(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.DescribeInceptorIndexContext = DescribeInceptorIndexContext;

class DescribeInceptorDatabaseContext extends DescribeStatementInceptorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DATABASE() {
	    return this.getToken(MySqlParser.DATABASE, 0);
	};

	databaseName() {
	    return this.getTypedRuleContext(DatabaseNameContext,0);
	};

	LINK() {
	    return this.getToken(MySqlParser.LINK, 0);
	};

	EXTENDED() {
	    return this.getToken(MySqlParser.EXTENDED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDescribeInceptorDatabase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDescribeInceptorDatabase(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitDescribeInceptorDatabase(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.DescribeInceptorDatabaseContext = DescribeInceptorDatabaseContext;

class DescribeInceptorProcedureContext extends DescribeStatementInceptorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	PLSQL() {
	    return this.getToken(MySqlParser.PLSQL, 0);
	};

	fullId() {
	    return this.getTypedRuleContext(FullIdContext,0);
	};

	FUNCTION() {
	    return this.getToken(MySqlParser.FUNCTION, 0);
	};

	PACKAGE() {
	    return this.getToken(MySqlParser.PACKAGE, 0);
	};

	EXTENDED() {
	    return this.getToken(MySqlParser.EXTENDED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDescribeInceptorProcedure(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDescribeInceptorProcedure(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitDescribeInceptorProcedure(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.DescribeInceptorProcedureContext = DescribeInceptorProcedureContext;

class HelpStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_helpStatement;
    }

	HELP() {
	    return this.getToken(MySqlParser.HELP, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterHelpStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitHelpStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitHelpStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UseStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_useStatement;
    }

	USE() {
	    return this.getToken(MySqlParser.USE, 0);
	};

	databaseName() {
	    return this.getTypedRuleContext(DatabaseNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUseStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUseStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitUseStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DescribeObjectClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_describeObjectClause;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class DescribeStatementsContext extends DescribeObjectClauseContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	selectStatement() {
	    return this.getTypedRuleContext(SelectStatementContext,0);
	};

	deleteStatement() {
	    return this.getTypedRuleContext(DeleteStatementContext,0);
	};

	insertStatement() {
	    return this.getTypedRuleContext(InsertStatementContext,0);
	};

	replaceStatement() {
	    return this.getTypedRuleContext(ReplaceStatementContext,0);
	};

	updateStatement() {
	    return this.getTypedRuleContext(UpdateStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDescribeStatements(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDescribeStatements(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitDescribeStatements(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.DescribeStatementsContext = DescribeStatementsContext;

class DescribeConnectionContext extends DescribeObjectClauseContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	FOR() {
	    return this.getToken(MySqlParser.FOR, 0);
	};

	CONNECTION() {
	    return this.getToken(MySqlParser.CONNECTION, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDescribeConnection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDescribeConnection(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitDescribeConnection(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.DescribeConnectionContext = DescribeConnectionContext;

class TablePartitionedByContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_tablePartitionedBy;
        this.level = 0
    }

	PARTITIONED() {
	    return this.getToken(MySqlParser.PARTITIONED, 0);
	};

	BY() {
	    return this.getToken(MySqlParser.BY, 0);
	};

	createDefinitions() {
	    return this.getTypedRuleContext(CreateDefinitionsContext,0);
	};

	RANGE() {
	    return this.getToken(MySqlParser.RANGE, 0);
	};

	LR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.LR_BRACKET);
	    } else {
	        return this.getToken(MySqlParser.LR_BRACKET, i);
	    }
	};


	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	RR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.RR_BRACKET);
	    } else {
	        return this.getToken(MySqlParser.RR_BRACKET, i);
	    }
	};


	INTERVAL() {
	    return this.getToken(MySqlParser.INTERVAL, 0);
	};

	constant() {
	    return this.getTypedRuleContext(ConstantContext,0);
	};

	functionCall() {
	    return this.getTypedRuleContext(FunctionCallContext,0);
	};

	rangePartition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RangePartitionContext);
	    } else {
	        return this.getTypedRuleContext(RangePartitionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTablePartitionedBy(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTablePartitionedBy(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitTablePartitionedBy(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropPartitionAtomContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_dropPartitionAtom;
    }

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	comparisonOperator() {
	    return this.getTypedRuleContext(ComparisonOperatorContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDropPartitionAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDropPartitionAtom(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitDropPartitionAtom(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RangePartitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_rangePartition;
    }

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	VALUES() {
	    return this.getToken(MySqlParser.VALUES, 0);
	};

	LESS() {
	    return this.getToken(MySqlParser.LESS, 0);
	};

	THAN() {
	    return this.getToken(MySqlParser.THAN, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	partitionDefinerAtom = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PartitionDefinerAtomContext);
	    } else {
	        return this.getTypedRuleContext(PartitionDefinerAtomContext,i);
	    }
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	locationDefinition() {
	    return this.getTypedRuleContext(LocationDefinitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterRangePartition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitRangePartition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitRangePartition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PartitionPlusContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_partitionPlus;
    }

	partitionSpec() {
	    return this.getTypedRuleContext(PartitionSpecContext,0);
	};

	locationDefinition() {
	    return this.getTypedRuleContext(LocationDefinitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPartitionPlus(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPartitionPlus(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitPartitionPlus(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PartitionSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_partitionSpec;
        this.level = 0
    }

	partitionSpecList() {
	    return this.getTypedRuleContext(PartitionSpecListContext,0);
	};

	partitionSpecMap() {
	    return this.getTypedRuleContext(PartitionSpecMapContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPartitionSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPartitionSpec(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitPartitionSpec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PartitionSpecListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_partitionSpecList;
        this.level = 0
    }

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPartitionSpecList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPartitionSpecList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitPartitionSpecList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PartitionSpecMapContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_partitionSpecMap;
        this.level = 1
    }

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	idValueProperties() {
	    return this.getTypedRuleContext(IdValuePropertiesContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPartitionSpecMap(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPartitionSpecMap(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitPartitionSpecMap(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FullIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_fullId;
    }

	uid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidContext);
	    } else {
	        return this.getTypedRuleContext(UidContext,i);
	    }
	};

	DOT_ID() {
	    return this.getToken(MySqlParser.DOT_ID, 0);
	};

	DOT() {
	    return this.getToken(MySqlParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterFullId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitFullId(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitFullId(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_tableName;
    }

	fullId() {
	    return this.getTypedRuleContext(FullIdContext,0);
	};

	emptyElement() {
	    return this.getTypedRuleContext(EmptyElementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitTableName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ViewNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_viewName;
    }

	fullId() {
	    return this.getTypedRuleContext(FullIdContext,0);
	};

	emptyElement() {
	    return this.getTypedRuleContext(EmptyElementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterViewName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitViewName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitViewName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TripleIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_tripleId;
    }

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	dottedId = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DottedIdContext);
	    } else {
	        return this.getTypedRuleContext(DottedIdContext,i);
	    }
	};

	DOT() {
	    return this.getToken(MySqlParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTripleId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTripleId(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitTripleId(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColumnUidContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_columnUid;
    }

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	emptyElement() {
	    return this.getTypedRuleContext(EmptyElementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterColumnUid(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitColumnUid(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitColumnUid(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FullColumnNameOptionalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_fullColumnNameOptional;
    }

	fullColumnName() {
	    return this.getTypedRuleContext(FullColumnNameContext,0);
	};

	emptyElement() {
	    return this.getTypedRuleContext(EmptyElementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterFullColumnNameOptional(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitFullColumnNameOptional(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitFullColumnNameOptional(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FullColumnNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_fullColumnName;
    }

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	dottedId = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DottedIdContext);
	    } else {
	        return this.getTypedRuleContext(DottedIdContext,i);
	    }
	};

	DOT() {
	    return this.getToken(MySqlParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterFullColumnName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitFullColumnName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitFullColumnName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrefixedColumnNameOptionalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_prefixedColumnNameOptional;
    }

	prefixedColumnName() {
	    return this.getTypedRuleContext(PrefixedColumnNameContext,0);
	};

	emptyElement() {
	    return this.getTypedRuleContext(EmptyElementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPrefixedColumnNameOptional(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPrefixedColumnNameOptional(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitPrefixedColumnNameOptional(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrefixedColumnNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_prefixedColumnName;
    }

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	dottedId = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DottedIdContext);
	    } else {
	        return this.getTypedRuleContext(DottedIdContext,i);
	    }
	};

	DOT() {
	    return this.getToken(MySqlParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPrefixedColumnName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPrefixedColumnName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitPrefixedColumnName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FuncNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_funcName;
    }

	fullId() {
	    return this.getTypedRuleContext(FullIdContext,0);
	};

	emptyElement() {
	    return this.getTypedRuleContext(EmptyElementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterFuncName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitFuncName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitFuncName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UdfNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_udfName;
    }

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	emptyElement() {
	    return this.getTypedRuleContext(EmptyElementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUdfName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUdfName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitUdfName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ProcNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_procName;
    }

	fullId() {
	    return this.getTypedRuleContext(FullIdContext,0);
	};

	emptyElement() {
	    return this.getTypedRuleContext(EmptyElementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterProcName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitProcName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitProcName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PackNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_packName;
    }

	fullId() {
	    return this.getTypedRuleContext(FullIdContext,0);
	};

	emptyElement() {
	    return this.getTypedRuleContext(EmptyElementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPackName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPackName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitPackName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FuncColumnNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_funcColumnName;
    }

	fullColumnName() {
	    return this.getTypedRuleContext(FullColumnNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterFuncColumnName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitFuncColumnName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitFuncColumnName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FuncColumnNameOptionalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_funcColumnNameOptional;
    }

	funcColumnName() {
	    return this.getTypedRuleContext(FuncColumnNameContext,0);
	};

	emptyElement() {
	    return this.getTypedRuleContext(EmptyElementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterFuncColumnNameOptional(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitFuncColumnNameOptional(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitFuncColumnNameOptional(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WildFuncOptionalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_wildFuncOptional;
    }

	wildUid() {
	    return this.getTypedRuleContext(WildUidContext,0);
	};

	emptyElement() {
	    return this.getTypedRuleContext(EmptyElementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterWildFuncOptional(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitWildFuncOptional(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitWildFuncOptional(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WildUidContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_wildUid;
    }

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterWildUid(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitWildUid(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitWildUid(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IndexColumnNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_indexColumnName;
        this.sortType = null; // Token
    }

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	ASC() {
	    return this.getToken(MySqlParser.ASC, 0);
	};

	DESC() {
	    return this.getToken(MySqlParser.DESC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterIndexColumnName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitIndexColumnName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitIndexColumnName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UserNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_userName;
    }

	STRING_USER_NAME() {
	    return this.getToken(MySqlParser.STRING_USER_NAME, 0);
	};

	ID() {
	    return this.getToken(MySqlParser.ID, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUserName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUserName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitUserName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MysqlVariableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_mysqlVariable;
    }

	LOCAL_ID() {
	    return this.getToken(MySqlParser.LOCAL_ID, 0);
	};

	GLOBAL_ID() {
	    return this.getToken(MySqlParser.GLOBAL_ID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterMysqlVariable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitMysqlVariable(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitMysqlVariable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CharsetNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_charsetName;
    }

	BINARY() {
	    return this.getToken(MySqlParser.BINARY, 0);
	};

	charsetNameBase() {
	    return this.getTypedRuleContext(CharsetNameBaseContext,0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	CHARSET_REVERSE_QOUTE_STRING() {
	    return this.getToken(MySqlParser.CHARSET_REVERSE_QOUTE_STRING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCharsetName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCharsetName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitCharsetName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CollationNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_collationName;
    }

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCollationName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCollationName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitCollationName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EngineNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_engineName;
    }

	ARCHIVE() {
	    return this.getToken(MySqlParser.ARCHIVE, 0);
	};

	BLACKHOLE() {
	    return this.getToken(MySqlParser.BLACKHOLE, 0);
	};

	CSV() {
	    return this.getToken(MySqlParser.CSV, 0);
	};

	FEDERATED() {
	    return this.getToken(MySqlParser.FEDERATED, 0);
	};

	INNODB() {
	    return this.getToken(MySqlParser.INNODB, 0);
	};

	MEMORY() {
	    return this.getToken(MySqlParser.MEMORY, 0);
	};

	MRG_MYISAM() {
	    return this.getToken(MySqlParser.MRG_MYISAM, 0);
	};

	MYISAM() {
	    return this.getToken(MySqlParser.MYISAM, 0);
	};

	NDB() {
	    return this.getToken(MySqlParser.NDB, 0);
	};

	NDBCLUSTER() {
	    return this.getToken(MySqlParser.NDBCLUSTER, 0);
	};

	PERFORMANCE_SCHEMA() {
	    return this.getToken(MySqlParser.PERFORMANCE_SCHEMA, 0);
	};

	TOKUDB() {
	    return this.getToken(MySqlParser.TOKUDB, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	REVERSE_QUOTE_ID() {
	    return this.getToken(MySqlParser.REVERSE_QUOTE_ID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterEngineName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitEngineName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitEngineName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UuidSetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_uuidSet;
    }

	decimalLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DecimalLiteralContext);
	    } else {
	        return this.getTypedRuleContext(DecimalLiteralContext,i);
	    }
	};

	MINUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.MINUS);
	    } else {
	        return this.getToken(MySqlParser.MINUS, i);
	    }
	};


	COLON_SYMB = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COLON_SYMB);
	    } else {
	        return this.getToken(MySqlParser.COLON_SYMB, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUuidSet(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUuidSet(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitUuidSet(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class XidContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_xid;
        this.globalTableUid = null; // XuidStringIdContext
        this.qualifier = null; // XuidStringIdContext
        this.idFormat = null; // DecimalLiteralContext
    }

	xuidStringId = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(XuidStringIdContext);
	    } else {
	        return this.getTypedRuleContext(XuidStringIdContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterXid(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitXid(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitXid(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class XuidStringIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_xuidStringId;
    }

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	BIT_STRING() {
	    return this.getToken(MySqlParser.BIT_STRING, 0);
	};

	HEXADECIMAL_LITERAL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.HEXADECIMAL_LITERAL);
	    } else {
	        return this.getToken(MySqlParser.HEXADECIMAL_LITERAL, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterXuidStringId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitXuidStringId(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitXuidStringId(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AuthPluginContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_authPlugin;
    }

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAuthPlugin(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAuthPlugin(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAuthPlugin(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UidContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_uid;
    }

	simpleId() {
	    return this.getTypedRuleContext(SimpleIdContext,0);
	};

	REVERSE_QUOTE_ID() {
	    return this.getToken(MySqlParser.REVERSE_QUOTE_ID, 0);
	};

	CHARSET_REVERSE_QOUTE_STRING() {
	    return this.getToken(MySqlParser.CHARSET_REVERSE_QOUTE_STRING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUid(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUid(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitUid(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SimpleIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_simpleId;
    }

	ID() {
	    return this.getToken(MySqlParser.ID, 0);
	};

	charsetNameBase() {
	    return this.getTypedRuleContext(CharsetNameBaseContext,0);
	};

	transactionLevelBase() {
	    return this.getTypedRuleContext(TransactionLevelBaseContext,0);
	};

	engineName() {
	    return this.getTypedRuleContext(EngineNameContext,0);
	};

	privilegesBase() {
	    return this.getTypedRuleContext(PrivilegesBaseContext,0);
	};

	intervalTypeBase() {
	    return this.getTypedRuleContext(IntervalTypeBaseContext,0);
	};

	dataTypeBase() {
	    return this.getTypedRuleContext(DataTypeBaseContext,0);
	};

	keywordsCanBeId() {
	    return this.getTypedRuleContext(KeywordsCanBeIdContext,0);
	};

	functionNameBase() {
	    return this.getTypedRuleContext(FunctionNameBaseContext,0);
	};

	fileFormatCanBeId() {
	    return this.getTypedRuleContext(FileFormatCanBeIdContext,0);
	};

	inceptorKeywordCanBeId() {
	    return this.getTypedRuleContext(InceptorKeywordCanBeIdContext,0);
	};

	templateId() {
	    return this.getTypedRuleContext(TemplateIdContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSimpleId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSimpleId(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitSimpleId(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TemplateIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_templateId;
    }

	TEMPLATE_ID() {
	    return this.getToken(MySqlParser.TEMPLATE_ID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTemplateId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTemplateId(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitTemplateId(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DottedIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_dottedId;
    }

	DOT_ID() {
	    return this.getToken(MySqlParser.DOT_ID, 0);
	};

	DOT() {
	    return this.getToken(MySqlParser.DOT, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDottedId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDottedId(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitDottedId(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FilePathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_filePath;
    }

	DIVIDE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.DIVIDE);
	    } else {
	        return this.getToken(MySqlParser.DIVIDE, i);
	    }
	};


	fileSegment = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FileSegmentContext);
	    } else {
	        return this.getTypedRuleContext(FileSegmentContext,i);
	    }
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.DOT);
	    } else {
	        return this.getToken(MySqlParser.DOT, i);
	    }
	};


	dottedId = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DottedIdContext);
	    } else {
	        return this.getTypedRuleContext(DottedIdContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterFilePath(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitFilePath(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitFilePath(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FileSegmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_fileSegment;
    }

	simpleId = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SimpleIdContext);
	    } else {
	        return this.getTypedRuleContext(SimpleIdContext,i);
	    }
	};

	MINUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.MINUS);
	    } else {
	        return this.getToken(MySqlParser.MINUS, i);
	    }
	};


	COLON_SYMB = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COLON_SYMB);
	    } else {
	        return this.getToken(MySqlParser.COLON_SYMB, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterFileSegment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitFileSegment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitFileSegment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DecimalLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_decimalLiteral;
    }

	DECIMAL_LITERAL() {
	    return this.getToken(MySqlParser.DECIMAL_LITERAL, 0);
	};

	ZERO_DECIMAL() {
	    return this.getToken(MySqlParser.ZERO_DECIMAL, 0);
	};

	ONE_DECIMAL() {
	    return this.getToken(MySqlParser.ONE_DECIMAL, 0);
	};

	TWO_DECIMAL() {
	    return this.getToken(MySqlParser.TWO_DECIMAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDecimalLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDecimalLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitDecimalLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FileSizeLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_fileSizeLiteral;
    }

	FILESIZE_LITERAL() {
	    return this.getToken(MySqlParser.FILESIZE_LITERAL, 0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterFileSizeLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitFileSizeLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitFileSizeLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StringLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_stringLiteral;
    }

	STRING_LITERAL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.STRING_LITERAL);
	    } else {
	        return this.getToken(MySqlParser.STRING_LITERAL, i);
	    }
	};


	START_NATIONAL_STRING_LITERAL() {
	    return this.getToken(MySqlParser.START_NATIONAL_STRING_LITERAL, 0);
	};

	STRING_CHARSET_NAME() {
	    return this.getToken(MySqlParser.STRING_CHARSET_NAME, 0);
	};

	stringLiteralCollate() {
	    return this.getTypedRuleContext(StringLiteralCollateContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterStringLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitStringLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitStringLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StringLiteralCollateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_stringLiteralCollate;
    }

	COLLATE() {
	    return this.getToken(MySqlParser.COLLATE, 0);
	};

	collationName() {
	    return this.getTypedRuleContext(CollationNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterStringLiteralCollate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitStringLiteralCollate(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitStringLiteralCollate(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BooleanLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_booleanLiteral;
    }

	TRUE() {
	    return this.getToken(MySqlParser.TRUE, 0);
	};

	FALSE() {
	    return this.getToken(MySqlParser.FALSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterBooleanLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitBooleanLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitBooleanLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class HexadecimalLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_hexadecimalLiteral;
    }

	HEXADECIMAL_LITERAL() {
	    return this.getToken(MySqlParser.HEXADECIMAL_LITERAL, 0);
	};

	STRING_CHARSET_NAME() {
	    return this.getToken(MySqlParser.STRING_CHARSET_NAME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterHexadecimalLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitHexadecimalLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitHexadecimalLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NullNotnullContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_nullNotnull;
    }

	NULL_LITERAL() {
	    return this.getToken(MySqlParser.NULL_LITERAL, 0);
	};

	NULL_SPEC_LITERAL() {
	    return this.getToken(MySqlParser.NULL_SPEC_LITERAL, 0);
	};

	NOT() {
	    return this.getToken(MySqlParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterNullNotnull(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitNullNotnull(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitNullNotnull(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConstantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_constant;
        this.noSpaceTokens = ['-']
        this.nullLiteral = null; // Token
    }

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	MINUS() {
	    return this.getToken(MySqlParser.MINUS, 0);
	};

	hexadecimalLiteral() {
	    return this.getTypedRuleContext(HexadecimalLiteralContext,0);
	};

	booleanLiteral() {
	    return this.getTypedRuleContext(BooleanLiteralContext,0);
	};

	REAL_LITERAL() {
	    return this.getToken(MySqlParser.REAL_LITERAL, 0);
	};

	BIT_STRING() {
	    return this.getToken(MySqlParser.BIT_STRING, 0);
	};

	NULL_LITERAL() {
	    return this.getToken(MySqlParser.NULL_LITERAL, 0);
	};

	NULL_SPEC_LITERAL() {
	    return this.getToken(MySqlParser.NULL_SPEC_LITERAL, 0);
	};

	NOT() {
	    return this.getToken(MySqlParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterConstant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitConstant(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitConstant(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DataTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_dataType;
    }

	inceptorDataType() {
	    return this.getTypedRuleContext(InceptorDataTypeContext,0);
	};

	mySqlDataType() {
	    return this.getTypedRuleContext(MySqlDataTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDataType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDataType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitDataType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MySqlDataTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_mySqlDataType;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class SpatialDataTypeContext extends MySqlDataTypeContext {

    constructor(parser, ctx) {
        super(parser);
        this.typeName = null; // Token;
        super.copyFrom(ctx);
    }

	GEOMETRYCOLLECTION() {
	    return this.getToken(MySqlParser.GEOMETRYCOLLECTION, 0);
	};

	GEOMCOLLECTION() {
	    return this.getToken(MySqlParser.GEOMCOLLECTION, 0);
	};

	LINESTRING() {
	    return this.getToken(MySqlParser.LINESTRING, 0);
	};

	MULTILINESTRING() {
	    return this.getToken(MySqlParser.MULTILINESTRING, 0);
	};

	MULTIPOINT() {
	    return this.getToken(MySqlParser.MULTIPOINT, 0);
	};

	MULTIPOLYGON() {
	    return this.getToken(MySqlParser.MULTIPOLYGON, 0);
	};

	POINT() {
	    return this.getToken(MySqlParser.POINT, 0);
	};

	POLYGON() {
	    return this.getToken(MySqlParser.POLYGON, 0);
	};

	JSON() {
	    return this.getToken(MySqlParser.JSON, 0);
	};

	GEOMETRY() {
	    return this.getToken(MySqlParser.GEOMETRY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSpatialDataType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSpatialDataType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitSpatialDataType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.SpatialDataTypeContext = SpatialDataTypeContext;

class CollectionDataTypeContext extends MySqlDataTypeContext {

    constructor(parser, ctx) {
        super(parser);
        this.typeName = null; // Token;
        super.copyFrom(ctx);
    }

	collectionOptions() {
	    return this.getTypedRuleContext(CollectionOptionsContext,0);
	};

	ENUM() {
	    return this.getToken(MySqlParser.ENUM, 0);
	};

	SET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.SET);
	    } else {
	        return this.getToken(MySqlParser.SET, i);
	    }
	};


	BINARY() {
	    return this.getToken(MySqlParser.BINARY, 0);
	};

	charsetName() {
	    return this.getTypedRuleContext(CharsetNameContext,0);
	};

	CHARACTER() {
	    return this.getToken(MySqlParser.CHARACTER, 0);
	};

	CHARSET() {
	    return this.getToken(MySqlParser.CHARSET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCollectionDataType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCollectionDataType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitCollectionDataType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.CollectionDataTypeContext = CollectionDataTypeContext;

class NationalVaryingStringDataTypeContext extends MySqlDataTypeContext {

    constructor(parser, ctx) {
        super(parser);
        this.typeName = null; // Token;
        super.copyFrom(ctx);
    }

	NATIONAL() {
	    return this.getToken(MySqlParser.NATIONAL, 0);
	};

	VARYING() {
	    return this.getToken(MySqlParser.VARYING, 0);
	};

	CHAR() {
	    return this.getToken(MySqlParser.CHAR, 0);
	};

	CHARACTER() {
	    return this.getToken(MySqlParser.CHARACTER, 0);
	};

	lengthOneDimension() {
	    return this.getTypedRuleContext(LengthOneDimensionContext,0);
	};

	BINARY() {
	    return this.getToken(MySqlParser.BINARY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterNationalVaryingStringDataType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitNationalVaryingStringDataType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitNationalVaryingStringDataType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.NationalVaryingStringDataTypeContext = NationalVaryingStringDataTypeContext;

class DimensionDataTypeContext extends MySqlDataTypeContext {

    constructor(parser, ctx) {
        super(parser);
        this.typeName = null; // Token;
        super.copyFrom(ctx);
    }

	TINYINT() {
	    return this.getToken(MySqlParser.TINYINT, 0);
	};

	SMALLINT() {
	    return this.getToken(MySqlParser.SMALLINT, 0);
	};

	MEDIUMINT() {
	    return this.getToken(MySqlParser.MEDIUMINT, 0);
	};

	INT() {
	    return this.getToken(MySqlParser.INT, 0);
	};

	INTEGER() {
	    return this.getToken(MySqlParser.INTEGER, 0);
	};

	BIGINT() {
	    return this.getToken(MySqlParser.BIGINT, 0);
	};

	lengthOneDimension() {
	    return this.getTypedRuleContext(LengthOneDimensionContext,0);
	};

	ZEROFILL() {
	    return this.getToken(MySqlParser.ZEROFILL, 0);
	};

	SIGNED() {
	    return this.getToken(MySqlParser.SIGNED, 0);
	};

	UNSIGNED() {
	    return this.getToken(MySqlParser.UNSIGNED, 0);
	};

	REAL() {
	    return this.getToken(MySqlParser.REAL, 0);
	};

	lengthTwoDimension() {
	    return this.getTypedRuleContext(LengthTwoDimensionContext,0);
	};

	DOUBLE() {
	    return this.getToken(MySqlParser.DOUBLE, 0);
	};

	PRECISION() {
	    return this.getToken(MySqlParser.PRECISION, 0);
	};

	DECIMAL() {
	    return this.getToken(MySqlParser.DECIMAL, 0);
	};

	DEC() {
	    return this.getToken(MySqlParser.DEC, 0);
	};

	FIXED() {
	    return this.getToken(MySqlParser.FIXED, 0);
	};

	NUMERIC() {
	    return this.getToken(MySqlParser.NUMERIC, 0);
	};

	FLOAT() {
	    return this.getToken(MySqlParser.FLOAT, 0);
	};

	lengthTwoOptionalDimension() {
	    return this.getTypedRuleContext(LengthTwoOptionalDimensionContext,0);
	};

	BIT() {
	    return this.getToken(MySqlParser.BIT, 0);
	};

	TIME() {
	    return this.getToken(MySqlParser.TIME, 0);
	};

	TIMESTAMP() {
	    return this.getToken(MySqlParser.TIMESTAMP, 0);
	};

	DATETIME() {
	    return this.getToken(MySqlParser.DATETIME, 0);
	};

	BINARY() {
	    return this.getToken(MySqlParser.BINARY, 0);
	};

	VARBINARY() {
	    return this.getToken(MySqlParser.VARBINARY, 0);
	};

	YEAR() {
	    return this.getToken(MySqlParser.YEAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDimensionDataType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDimensionDataType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitDimensionDataType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.DimensionDataTypeContext = DimensionDataTypeContext;

class StringDataTypeContext extends MySqlDataTypeContext {

    constructor(parser, ctx) {
        super(parser);
        this.typeName = null; // Token;
        super.copyFrom(ctx);
    }

	CHAR() {
	    return this.getToken(MySqlParser.CHAR, 0);
	};

	VARCHAR() {
	    return this.getToken(MySqlParser.VARCHAR, 0);
	};

	TINYTEXT() {
	    return this.getToken(MySqlParser.TINYTEXT, 0);
	};

	TEXT() {
	    return this.getToken(MySqlParser.TEXT, 0);
	};

	MEDIUMTEXT() {
	    return this.getToken(MySqlParser.MEDIUMTEXT, 0);
	};

	LONGTEXT() {
	    return this.getToken(MySqlParser.LONGTEXT, 0);
	};

	NCHAR() {
	    return this.getToken(MySqlParser.NCHAR, 0);
	};

	NVARCHAR() {
	    return this.getToken(MySqlParser.NVARCHAR, 0);
	};

	lengthOneDimension() {
	    return this.getTypedRuleContext(LengthOneDimensionContext,0);
	};

	BINARY() {
	    return this.getToken(MySqlParser.BINARY, 0);
	};

	charsetName() {
	    return this.getTypedRuleContext(CharsetNameContext,0);
	};

	CHARACTER() {
	    return this.getToken(MySqlParser.CHARACTER, 0);
	};

	SET() {
	    return this.getToken(MySqlParser.SET, 0);
	};

	CHARSET() {
	    return this.getToken(MySqlParser.CHARSET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterStringDataType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitStringDataType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitStringDataType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.StringDataTypeContext = StringDataTypeContext;

class NationalStringDataTypeContext extends MySqlDataTypeContext {

    constructor(parser, ctx) {
        super(parser);
        this.typeName = null; // Token;
        super.copyFrom(ctx);
    }

	NATIONAL() {
	    return this.getToken(MySqlParser.NATIONAL, 0);
	};

	VARCHAR() {
	    return this.getToken(MySqlParser.VARCHAR, 0);
	};

	CHARACTER() {
	    return this.getToken(MySqlParser.CHARACTER, 0);
	};

	lengthOneDimension() {
	    return this.getTypedRuleContext(LengthOneDimensionContext,0);
	};

	BINARY() {
	    return this.getToken(MySqlParser.BINARY, 0);
	};

	NCHAR() {
	    return this.getToken(MySqlParser.NCHAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterNationalStringDataType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitNationalStringDataType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitNationalStringDataType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.NationalStringDataTypeContext = NationalStringDataTypeContext;

class SimpleDataTypeContext extends MySqlDataTypeContext {

    constructor(parser, ctx) {
        super(parser);
        this.typeName = null; // Token;
        super.copyFrom(ctx);
    }

	DATE() {
	    return this.getToken(MySqlParser.DATE, 0);
	};

	TINYBLOB() {
	    return this.getToken(MySqlParser.TINYBLOB, 0);
	};

	BLOB() {
	    return this.getToken(MySqlParser.BLOB, 0);
	};

	MEDIUMBLOB() {
	    return this.getToken(MySqlParser.MEDIUMBLOB, 0);
	};

	LONGBLOB() {
	    return this.getToken(MySqlParser.LONGBLOB, 0);
	};

	BOOL() {
	    return this.getToken(MySqlParser.BOOL, 0);
	};

	BOOLEAN() {
	    return this.getToken(MySqlParser.BOOLEAN, 0);
	};

	SERIAL() {
	    return this.getToken(MySqlParser.SERIAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSimpleDataType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSimpleDataType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitSimpleDataType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.SimpleDataTypeContext = SimpleDataTypeContext;

class InceptorDataTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_inceptorDataType;
        this.noSpaceTokens = ['<', '>']
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
			this.noSpaceTokens = ctx.noSpaceTokens;
		}

}


class InceptorNumericDataTypeContext extends InceptorDataTypeContext {

    constructor(parser, ctx) {
        super(parser);
        this.typeName = null; // Token;
        super.copyFrom(ctx);
    }

	DECIMAL() {
	    return this.getToken(MySqlParser.DECIMAL, 0);
	};

	NUMERIC() {
	    return this.getToken(MySqlParser.NUMERIC, 0);
	};

	NUMBER() {
	    return this.getToken(MySqlParser.NUMBER, 0);
	};

	DEC() {
	    return this.getToken(MySqlParser.DEC, 0);
	};

	lengthTwoOptionalDimension() {
	    return this.getTypedRuleContext(LengthTwoOptionalDimensionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterInceptorNumericDataType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitInceptorNumericDataType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitInceptorNumericDataType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.InceptorNumericDataTypeContext = InceptorNumericDataTypeContext;

class InceptorMapDataTypeContext extends InceptorDataTypeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	MAP() {
	    return this.getToken(MySqlParser.MAP, 0);
	};

	LESS_SYMBOL() {
	    return this.getToken(MySqlParser.LESS_SYMBOL, 0);
	};

	inceptorDataType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InceptorDataTypeContext);
	    } else {
	        return this.getTypedRuleContext(InceptorDataTypeContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(MySqlParser.COMMA, 0);
	};

	GREATER_SYMBOL() {
	    return this.getToken(MySqlParser.GREATER_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterInceptorMapDataType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitInceptorMapDataType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitInceptorMapDataType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.InceptorMapDataTypeContext = InceptorMapDataTypeContext;

class InceptorDateDataTypeContext extends InceptorDataTypeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DATE() {
	    return this.getToken(MySqlParser.DATE, 0);
	};

	FORMAT() {
	    return this.getToken(MySqlParser.FORMAT, 0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterInceptorDateDataType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitInceptorDateDataType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitInceptorDateDataType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.InceptorDateDataTypeContext = InceptorDateDataTypeContext;

class InceptorArrayDataTypeContext extends InceptorDataTypeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ARRAY() {
	    return this.getToken(MySqlParser.ARRAY, 0);
	};

	LESS_SYMBOL() {
	    return this.getToken(MySqlParser.LESS_SYMBOL, 0);
	};

	inceptorDataType() {
	    return this.getTypedRuleContext(InceptorDataTypeContext,0);
	};

	GREATER_SYMBOL() {
	    return this.getToken(MySqlParser.GREATER_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterInceptorArrayDataType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitInceptorArrayDataType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitInceptorArrayDataType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.InceptorArrayDataTypeContext = InceptorArrayDataTypeContext;

class InceptorIntervalDataTypeContext extends InceptorDataTypeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	INTERVAL() {
	    return this.getToken(MySqlParser.INTERVAL, 0);
	};

	YEAR() {
	    return this.getToken(MySqlParser.YEAR, 0);
	};

	TO() {
	    return this.getToken(MySqlParser.TO, 0);
	};

	MONTH() {
	    return this.getToken(MySqlParser.MONTH, 0);
	};

	DAY() {
	    return this.getToken(MySqlParser.DAY, 0);
	};

	SECOND() {
	    return this.getToken(MySqlParser.SECOND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterInceptorIntervalDataType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitInceptorIntervalDataType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitInceptorIntervalDataType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.InceptorIntervalDataTypeContext = InceptorIntervalDataTypeContext;

class InceptorSimpleDataTypeContext extends InceptorDataTypeContext {

    constructor(parser, ctx) {
        super(parser);
        this.typeName = null; // Token;
        super.copyFrom(ctx);
    }

	TINYINT() {
	    return this.getToken(MySqlParser.TINYINT, 0);
	};

	SMALLINT() {
	    return this.getToken(MySqlParser.SMALLINT, 0);
	};

	INT() {
	    return this.getToken(MySqlParser.INT, 0);
	};

	BIGINT() {
	    return this.getToken(MySqlParser.BIGINT, 0);
	};

	BOOLEAN() {
	    return this.getToken(MySqlParser.BOOLEAN, 0);
	};

	FLOAT() {
	    return this.getToken(MySqlParser.FLOAT, 0);
	};

	DOUBLE() {
	    return this.getToken(MySqlParser.DOUBLE, 0);
	};

	INTEGER() {
	    return this.getToken(MySqlParser.INTEGER, 0);
	};

	DATETIME() {
	    return this.getToken(MySqlParser.DATETIME, 0);
	};

	GEO() {
	    return this.getToken(MySqlParser.GEO, 0);
	};

	NVARCHAR() {
	    return this.getToken(MySqlParser.NVARCHAR, 0);
	};

	CLOB() {
	    return this.getToken(MySqlParser.CLOB, 0);
	};

	BINARY() {
	    return this.getToken(MySqlParser.BINARY, 0);
	};

	BLOB() {
	    return this.getToken(MySqlParser.BLOB, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterInceptorSimpleDataType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitInceptorSimpleDataType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitInceptorSimpleDataType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.InceptorSimpleDataTypeContext = InceptorSimpleDataTypeContext;

class InceptorStructDataTypeContext extends InceptorDataTypeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	STRUCT() {
	    return this.getToken(MySqlParser.STRUCT, 0);
	};

	LESS_SYMBOL() {
	    return this.getToken(MySqlParser.LESS_SYMBOL, 0);
	};

	inceptorStructDataTypeItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InceptorStructDataTypeItemContext);
	    } else {
	        return this.getTypedRuleContext(InceptorStructDataTypeItemContext,i);
	    }
	};

	GREATER_SYMBOL() {
	    return this.getToken(MySqlParser.GREATER_SYMBOL, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterInceptorStructDataType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitInceptorStructDataType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitInceptorStructDataType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.InceptorStructDataTypeContext = InceptorStructDataTypeContext;

class InceptorDimensionDataTypeContext extends InceptorDataTypeContext {

    constructor(parser, ctx) {
        super(parser);
        this.typeName = null; // Token;
        super.copyFrom(ctx);
    }

	TIMESTAMP() {
	    return this.getToken(MySqlParser.TIMESTAMP, 0);
	};

	STRING() {
	    return this.getToken(MySqlParser.STRING, 0);
	};

	CHAR() {
	    return this.getToken(MySqlParser.CHAR, 0);
	};

	VARCHAR2() {
	    return this.getToken(MySqlParser.VARCHAR2, 0);
	};

	VARCHAR() {
	    return this.getToken(MySqlParser.VARCHAR, 0);
	};

	lengthOneDimension() {
	    return this.getTypedRuleContext(LengthOneDimensionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterInceptorDimensionDataType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitInceptorDimensionDataType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitInceptorDimensionDataType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.InceptorDimensionDataTypeContext = InceptorDimensionDataTypeContext;

class InceptorUnionDataTypeContext extends InceptorDataTypeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	UNION() {
	    return this.getToken(MySqlParser.UNION, 0);
	};

	LESS_SYMBOL() {
	    return this.getToken(MySqlParser.LESS_SYMBOL, 0);
	};

	inceptorDataType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InceptorDataTypeContext);
	    } else {
	        return this.getTypedRuleContext(InceptorDataTypeContext,i);
	    }
	};

	GREATER_SYMBOL() {
	    return this.getToken(MySqlParser.GREATER_SYMBOL, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterInceptorUnionDataType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitInceptorUnionDataType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitInceptorUnionDataType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.InceptorUnionDataTypeContext = InceptorUnionDataTypeContext;

class InceptorStructDataTypeItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_inceptorStructDataTypeItem;
        this.key = null; // UidContext
    }

	COLON_SYMB() {
	    return this.getToken(MySqlParser.COLON_SYMB, 0);
	};

	inceptorDataType() {
	    return this.getTypedRuleContext(InceptorDataTypeContext,0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterInceptorStructDataTypeItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitInceptorStructDataTypeItem(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitInceptorStructDataTypeItem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CollectionOptionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_collectionOptions;
    }

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	STRING_LITERAL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.STRING_LITERAL);
	    } else {
	        return this.getToken(MySqlParser.STRING_LITERAL, i);
	    }
	};


	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCollectionOptions(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCollectionOptions(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitCollectionOptions(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConvertedDataTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_convertedDataType;
        this.typeName = null; // Token
    }

	BINARY() {
	    return this.getToken(MySqlParser.BINARY, 0);
	};

	NCHAR() {
	    return this.getToken(MySqlParser.NCHAR, 0);
	};

	lengthOneDimension() {
	    return this.getTypedRuleContext(LengthOneDimensionContext,0);
	};

	CHAR() {
	    return this.getToken(MySqlParser.CHAR, 0);
	};

	CHARACTER() {
	    return this.getToken(MySqlParser.CHARACTER, 0);
	};

	SET() {
	    return this.getToken(MySqlParser.SET, 0);
	};

	charsetName() {
	    return this.getTypedRuleContext(CharsetNameContext,0);
	};

	DATE() {
	    return this.getToken(MySqlParser.DATE, 0);
	};

	DATETIME() {
	    return this.getToken(MySqlParser.DATETIME, 0);
	};

	TIME() {
	    return this.getToken(MySqlParser.TIME, 0);
	};

	DECIMAL() {
	    return this.getToken(MySqlParser.DECIMAL, 0);
	};

	lengthTwoDimension() {
	    return this.getTypedRuleContext(LengthTwoDimensionContext,0);
	};

	SIGNED() {
	    return this.getToken(MySqlParser.SIGNED, 0);
	};

	UNSIGNED() {
	    return this.getToken(MySqlParser.UNSIGNED, 0);
	};

	INTEGER() {
	    return this.getToken(MySqlParser.INTEGER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterConvertedDataType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitConvertedDataType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitConvertedDataType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LengthOneDimensionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_lengthOneDimension;
    }

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLengthOneDimension(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLengthOneDimension(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitLengthOneDimension(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LengthTwoDimensionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_lengthTwoDimension;
    }

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	decimalLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DecimalLiteralContext);
	    } else {
	        return this.getTypedRuleContext(DecimalLiteralContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(MySqlParser.COMMA, 0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLengthTwoDimension(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLengthTwoDimension(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitLengthTwoDimension(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LengthTwoOptionalDimensionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_lengthTwoOptionalDimension;
    }

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	decimalLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DecimalLiteralContext);
	    } else {
	        return this.getTypedRuleContext(DecimalLiteralContext,i);
	    }
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	COMMA() {
	    return this.getToken(MySqlParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLengthTwoOptionalDimension(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLengthTwoOptionalDimension(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitLengthTwoOptionalDimension(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UidListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_uidList;
    }

	uid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidContext);
	    } else {
	        return this.getTypedRuleContext(UidContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUidList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUidList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitUidList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UidOrderListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_uidOrderList;
    }

	uidOrder = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidOrderContext);
	    } else {
	        return this.getTypedRuleContext(UidOrderContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUidOrderList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUidOrderList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitUidOrderList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UidOrderContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_uidOrder;
        this.order = null; // Token
    }

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	ASC() {
	    return this.getToken(MySqlParser.ASC, 0);
	};

	DESC() {
	    return this.getToken(MySqlParser.DESC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUidOrder(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUidOrder(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitUidOrder(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FullIdListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_fullIdList;
    }

	fullId = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FullIdContext);
	    } else {
	        return this.getTypedRuleContext(FullIdContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterFullIdList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitFullIdList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitFullIdList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColumnUidsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_columnUids;
    }

	columnUid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnUidContext);
	    } else {
	        return this.getTypedRuleContext(ColumnUidContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterColumnUids(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitColumnUids(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitColumnUids(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColumnNamesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_columnNames;
    }

	fullColumnName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FullColumnNameContext);
	    } else {
	        return this.getTypedRuleContext(FullColumnNameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterColumnNames(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitColumnNames(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitColumnNames(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TablesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_tables;
    }

	tableName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TableNameContext);
	    } else {
	        return this.getTypedRuleContext(TableNameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTables(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTables(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitTables(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IndexColumnNamesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_indexColumnNames;
    }

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	indexColumnName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IndexColumnNameContext);
	    } else {
	        return this.getTypedRuleContext(IndexColumnNameContext,i);
	    }
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterIndexColumnNames(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitIndexColumnNames(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitIndexColumnNames(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExpressionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_expressions;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterExpressions(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitExpressions(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitExpressions(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExpressionsWithDefaultsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_expressionsWithDefaults;
    }

	expressionOrDefault = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionOrDefaultContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionOrDefaultContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterExpressionsWithDefaults(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitExpressionsWithDefaults(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitExpressionsWithDefaults(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConstantsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_constants;
    }

	constant = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConstantContext);
	    } else {
	        return this.getTypedRuleContext(ConstantContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterConstants(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitConstants(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitConstants(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SimpleStringsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_simpleStrings;
    }

	STRING_LITERAL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.STRING_LITERAL);
	    } else {
	        return this.getToken(MySqlParser.STRING_LITERAL, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSimpleStrings(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSimpleStrings(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitSimpleStrings(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UserVariablesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_userVariables;
    }

	LOCAL_ID = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.LOCAL_ID);
	    } else {
	        return this.getToken(MySqlParser.LOCAL_ID, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUserVariables(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUserVariables(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitUserVariables(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DefaultValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_defaultValue;
    }

	NULL_LITERAL() {
	    return this.getToken(MySqlParser.NULL_LITERAL, 0);
	};

	constant() {
	    return this.getTypedRuleContext(ConstantContext,0);
	};

	unaryOperator() {
	    return this.getTypedRuleContext(UnaryOperatorContext,0);
	};

	currentTimestamp = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CurrentTimestampContext);
	    } else {
	        return this.getTypedRuleContext(CurrentTimestampContext,i);
	    }
	};

	ON() {
	    return this.getToken(MySqlParser.ON, 0);
	};

	UPDATE() {
	    return this.getToken(MySqlParser.UPDATE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDefaultValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDefaultValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitDefaultValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CurrentTimestampContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_currentTimestamp;
    }

	NOW() {
	    return this.getToken(MySqlParser.NOW, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	CURRENT_TIMESTAMP() {
	    return this.getToken(MySqlParser.CURRENT_TIMESTAMP, 0);
	};

	LOCALTIME() {
	    return this.getToken(MySqlParser.LOCALTIME, 0);
	};

	LOCALTIMESTAMP() {
	    return this.getToken(MySqlParser.LOCALTIMESTAMP, 0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCurrentTimestamp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCurrentTimestamp(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitCurrentTimestamp(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExpressionOrDefaultContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_expressionOrDefault;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	DEFAULT() {
	    return this.getToken(MySqlParser.DEFAULT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterExpressionOrDefault(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitExpressionOrDefault(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitExpressionOrDefault(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IfExistsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_ifExists;
    }

	IF() {
	    return this.getToken(MySqlParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(MySqlParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterIfExists(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitIfExists(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitIfExists(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IfNotExistsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_ifNotExists;
    }

	IF() {
	    return this.getToken(MySqlParser.IF, 0);
	};

	NOT() {
	    return this.getToken(MySqlParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(MySqlParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterIfNotExists(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitIfNotExists(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitIfNotExists(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FunctionCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_functionCall;
        this.noSpaceTokens = ['(']
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
			this.noSpaceTokens = ctx.noSpaceTokens;
		}

}


class SpecificFunctionCallContext extends FunctionCallContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	specificFunction() {
	    return this.getTypedRuleContext(SpecificFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSpecificFunctionCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSpecificFunctionCall(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitSpecificFunctionCall(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.SpecificFunctionCallContext = SpecificFunctionCallContext;

class PasswordFunctionCallContext extends FunctionCallContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	passwordFunctionClause() {
	    return this.getTypedRuleContext(PasswordFunctionClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPasswordFunctionCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPasswordFunctionCall(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitPasswordFunctionCall(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.PasswordFunctionCallContext = PasswordFunctionCallContext;

class UdfFunctionCallContext extends FunctionCallContext {

    constructor(parser, ctx) {
        super(parser);
        this.paren = null; // Token;
        super.copyFrom(ctx);
    }

	fullId() {
	    return this.getTypedRuleContext(FullIdContext,0);
	};

	functionArgs() {
	    return this.getTypedRuleContext(FunctionArgsContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUdfFunctionCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUdfFunctionCall(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitUdfFunctionCall(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.UdfFunctionCallContext = UdfFunctionCallContext;

class AggregateFunctionCallContext extends FunctionCallContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	aggregateWindowedFunction() {
	    return this.getTypedRuleContext(AggregateWindowedFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAggregateFunctionCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAggregateFunctionCall(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAggregateFunctionCall(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.AggregateFunctionCallContext = AggregateFunctionCallContext;

class SpecificFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_specificFunction;
    }

	specificFunctionMysql() {
	    return this.getTypedRuleContext(SpecificFunctionMysqlContext,0);
	};

	specificFunctionInceptor() {
	    return this.getTypedRuleContext(SpecificFunctionInceptorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSpecificFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSpecificFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitSpecificFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SpecificFunctionMysqlContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_specificFunctionMysql;
        this.noSpaceTokens = ['(']
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
			this.noSpaceTokens = ctx.noSpaceTokens;
		}

}


class PositionFunctionCallContext extends SpecificFunctionMysqlContext {

    constructor(parser, ctx) {
        super(parser);
        this.positionString = null; // StringLiteralContext;
        this.positionExpression = null; // ExpressionContext;
        this.inString = null; // StringLiteralContext;
        this.inExpression = null; // ExpressionContext;
        super.copyFrom(ctx);
    }

	POSITION() {
	    return this.getToken(MySqlParser.POSITION, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	IN() {
	    return this.getToken(MySqlParser.IN, 0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	stringLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringLiteralContext);
	    } else {
	        return this.getTypedRuleContext(StringLiteralContext,i);
	    }
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPositionFunctionCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPositionFunctionCall(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitPositionFunctionCall(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.PositionFunctionCallContext = PositionFunctionCallContext;

class TrimFunctionCallContext extends SpecificFunctionMysqlContext {

    constructor(parser, ctx) {
        super(parser);
        this.positioinForm = null; // Token;
        this.sourceString = null; // StringLiteralContext;
        this.sourceExpression = null; // ExpressionContext;
        this.fromString = null; // StringLiteralContext;
        this.fromExpression = null; // ExpressionContext;
        super.copyFrom(ctx);
    }

	TRIM() {
	    return this.getToken(MySqlParser.TRIM, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	FROM() {
	    return this.getToken(MySqlParser.FROM, 0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	BOTH() {
	    return this.getToken(MySqlParser.BOTH, 0);
	};

	LEADING() {
	    return this.getToken(MySqlParser.LEADING, 0);
	};

	TRAILING() {
	    return this.getToken(MySqlParser.TRAILING, 0);
	};

	stringLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringLiteralContext);
	    } else {
	        return this.getTypedRuleContext(StringLiteralContext,i);
	    }
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTrimFunctionCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTrimFunctionCall(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitTrimFunctionCall(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.TrimFunctionCallContext = TrimFunctionCallContext;

class SimpleFunctionCallContext extends SpecificFunctionMysqlContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CURRENT_DATE() {
	    return this.getToken(MySqlParser.CURRENT_DATE, 0);
	};

	CURRENT_TIME() {
	    return this.getToken(MySqlParser.CURRENT_TIME, 0);
	};

	CURRENT_TIMESTAMP() {
	    return this.getToken(MySqlParser.CURRENT_TIMESTAMP, 0);
	};

	CURRENT_USER() {
	    return this.getToken(MySqlParser.CURRENT_USER, 0);
	};

	LOCALTIME() {
	    return this.getToken(MySqlParser.LOCALTIME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSimpleFunctionCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSimpleFunctionCall(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitSimpleFunctionCall(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.SimpleFunctionCallContext = SimpleFunctionCallContext;

class CharFunctionCallContext extends SpecificFunctionMysqlContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CHAR() {
	    return this.getToken(MySqlParser.CHAR, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	functionArgs() {
	    return this.getTypedRuleContext(FunctionArgsContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	USING() {
	    return this.getToken(MySqlParser.USING, 0);
	};

	charsetName() {
	    return this.getTypedRuleContext(CharsetNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCharFunctionCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCharFunctionCall(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitCharFunctionCall(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.CharFunctionCallContext = CharFunctionCallContext;

class WeightFunctionCallContext extends SpecificFunctionMysqlContext {

    constructor(parser, ctx) {
        super(parser);
        this.stringFormat = null; // Token;
        super.copyFrom(ctx);
    }

	WEIGHT_STRING() {
	    return this.getToken(MySqlParser.WEIGHT_STRING, 0);
	};

	LR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.LR_BRACKET);
	    } else {
	        return this.getToken(MySqlParser.LR_BRACKET, i);
	    }
	};


	RR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.RR_BRACKET);
	    } else {
	        return this.getToken(MySqlParser.RR_BRACKET, i);
	    }
	};


	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	AS() {
	    return this.getToken(MySqlParser.AS, 0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	levelsInWeightString() {
	    return this.getTypedRuleContext(LevelsInWeightStringContext,0);
	};

	CHAR() {
	    return this.getToken(MySqlParser.CHAR, 0);
	};

	BINARY() {
	    return this.getToken(MySqlParser.BINARY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterWeightFunctionCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitWeightFunctionCall(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitWeightFunctionCall(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.WeightFunctionCallContext = WeightFunctionCallContext;

class GetFormatFunctionCallContext extends SpecificFunctionMysqlContext {

    constructor(parser, ctx) {
        super(parser);
        this.datetimeFormat = null; // Token;
        super.copyFrom(ctx);
    }

	GET_FORMAT() {
	    return this.getToken(MySqlParser.GET_FORMAT, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	COMMA() {
	    return this.getToken(MySqlParser.COMMA, 0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	DATE() {
	    return this.getToken(MySqlParser.DATE, 0);
	};

	TIME() {
	    return this.getToken(MySqlParser.TIME, 0);
	};

	DATETIME() {
	    return this.getToken(MySqlParser.DATETIME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterGetFormatFunctionCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitGetFormatFunctionCall(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitGetFormatFunctionCall(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.GetFormatFunctionCallContext = GetFormatFunctionCallContext;

class CaseFunctionCallContext extends SpecificFunctionMysqlContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	caseFunction() {
	    return this.getTypedRuleContext(CaseFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCaseFunctionCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCaseFunctionCall(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitCaseFunctionCall(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.CaseFunctionCallContext = CaseFunctionCallContext;

class ExtractFunctionCallContext extends SpecificFunctionMysqlContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	extractFunction() {
	    return this.getTypedRuleContext(ExtractFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterExtractFunctionCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitExtractFunctionCall(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitExtractFunctionCall(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.ExtractFunctionCallContext = ExtractFunctionCallContext;

class DataTypeFunctionCallContext extends SpecificFunctionMysqlContext {

    constructor(parser, ctx) {
        super(parser);
        this.separator = null; // Token;
        super.copyFrom(ctx);
    }

	CONVERT() {
	    return this.getToken(MySqlParser.CONVERT, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	convertedDataType() {
	    return this.getTypedRuleContext(ConvertedDataTypeContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	COMMA() {
	    return this.getToken(MySqlParser.COMMA, 0);
	};

	USING() {
	    return this.getToken(MySqlParser.USING, 0);
	};

	charsetName() {
	    return this.getTypedRuleContext(CharsetNameContext,0);
	};

	CAST() {
	    return this.getToken(MySqlParser.CAST, 0);
	};

	AS() {
	    return this.getToken(MySqlParser.AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDataTypeFunctionCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDataTypeFunctionCall(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitDataTypeFunctionCall(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.DataTypeFunctionCallContext = DataTypeFunctionCallContext;

class ValuesFunctionCallContext extends SpecificFunctionMysqlContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	VALUES() {
	    return this.getToken(MySqlParser.VALUES, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	fullColumnName() {
	    return this.getTypedRuleContext(FullColumnNameContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterValuesFunctionCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitValuesFunctionCall(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitValuesFunctionCall(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.ValuesFunctionCallContext = ValuesFunctionCallContext;

class SubstrFunctionCallContext extends SpecificFunctionMysqlContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	substringFunction() {
	    return this.getTypedRuleContext(SubstringFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSubstrFunctionCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSubstrFunctionCall(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitSubstrFunctionCall(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.SubstrFunctionCallContext = SubstrFunctionCallContext;

class SpecificFunctionInceptorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_specificFunctionInceptor;
    }

	castFunctionInceptor() {
	    return this.getTypedRuleContext(CastFunctionInceptorContext,0);
	};

	caseFunction() {
	    return this.getTypedRuleContext(CaseFunctionContext,0);
	};

	substringFunction() {
	    return this.getTypedRuleContext(SubstringFunctionContext,0);
	};

	extractFunction() {
	    return this.getTypedRuleContext(ExtractFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSpecificFunctionInceptor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSpecificFunctionInceptor(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitSpecificFunctionInceptor(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CastFunctionInceptorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_castFunctionInceptor;
        this.noSpaceTokens = ['(']
    }

	CAST() {
	    return this.getToken(MySqlParser.CAST, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	AS() {
	    return this.getToken(MySqlParser.AS, 0);
	};

	dataType() {
	    return this.getTypedRuleContext(DataTypeContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCastFunctionInceptor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCastFunctionInceptor(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitCastFunctionInceptor(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SubstringFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_substringFunction;
        this.noSpaceTokens = ['(']
        this.sourceString = null; // StringLiteralContext
        this.sourceExpression = null; // ExpressionContext
        this.fromDecimal = null; // DecimalLiteralContext
        this.fromExpression = null; // ExpressionContext
        this.forDecimal = null; // DecimalLiteralContext
        this.forExpression = null; // ExpressionContext
    }

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	FROM() {
	    return this.getToken(MySqlParser.FROM, 0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	SUBSTR() {
	    return this.getToken(MySqlParser.SUBSTR, 0);
	};

	SUBSTRING() {
	    return this.getToken(MySqlParser.SUBSTRING, 0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	decimalLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DecimalLiteralContext);
	    } else {
	        return this.getTypedRuleContext(DecimalLiteralContext,i);
	    }
	};

	FOR() {
	    return this.getToken(MySqlParser.FOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSubstringFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSubstringFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitSubstringFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExtractFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_extractFunction;
        this.noSpaceTokens = ['(']
        this.sourceString = null; // StringLiteralContext
        this.sourceExpression = null; // ExpressionContext
    }

	EXTRACT() {
	    return this.getToken(MySqlParser.EXTRACT, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	intervalType() {
	    return this.getTypedRuleContext(IntervalTypeContext,0);
	};

	FROM() {
	    return this.getToken(MySqlParser.FROM, 0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterExtractFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitExtractFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitExtractFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CaseFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_caseFunction;
        this.block = null;
        newlineTokens: [] = ['ELSE'];
        this.elseArg = null; // FunctionArgContext
    }

	CASE() {
	    return this.getToken(MySqlParser.CASE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	END() {
	    return this.getToken(MySqlParser.END, 0);
	};

	caseFuncAlternative = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CaseFuncAlternativeContext);
	    } else {
	        return this.getTypedRuleContext(CaseFuncAlternativeContext,i);
	    }
	};

	ELSE() {
	    return this.getToken(MySqlParser.ELSE, 0);
	};

	functionArg() {
	    return this.getTypedRuleContext(FunctionArgContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCaseFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCaseFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitCaseFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CaseFuncAlternativeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_caseFuncAlternative;
        this.level = 0
        this.condi = null; // FunctionArgContext
        this.consequent = null; // FunctionArgContext
    }

	WHEN() {
	    return this.getToken(MySqlParser.WHEN, 0);
	};

	THEN() {
	    return this.getToken(MySqlParser.THEN, 0);
	};

	functionArg = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FunctionArgContext);
	    } else {
	        return this.getTypedRuleContext(FunctionArgContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCaseFuncAlternative(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCaseFuncAlternative(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitCaseFuncAlternative(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LevelsInWeightStringContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_levelsInWeightString;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class LevelWeightRangeContext extends LevelsInWeightStringContext {

    constructor(parser, ctx) {
        super(parser);
        this.firstLevel = null; // DecimalLiteralContext;
        this.lastLevel = null; // DecimalLiteralContext;
        super.copyFrom(ctx);
    }

	LEVEL() {
	    return this.getToken(MySqlParser.LEVEL, 0);
	};

	MINUS() {
	    return this.getToken(MySqlParser.MINUS, 0);
	};

	decimalLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DecimalLiteralContext);
	    } else {
	        return this.getTypedRuleContext(DecimalLiteralContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLevelWeightRange(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLevelWeightRange(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitLevelWeightRange(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.LevelWeightRangeContext = LevelWeightRangeContext;

class LevelWeightListContext extends LevelsInWeightStringContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LEVEL() {
	    return this.getToken(MySqlParser.LEVEL, 0);
	};

	levelInWeightListElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LevelInWeightListElementContext);
	    } else {
	        return this.getTypedRuleContext(LevelInWeightListElementContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLevelWeightList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLevelWeightList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitLevelWeightList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.LevelWeightListContext = LevelWeightListContext;

class LevelInWeightListElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_levelInWeightListElement;
        this.orderType = null; // Token
    }

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	ASC() {
	    return this.getToken(MySqlParser.ASC, 0);
	};

	DESC() {
	    return this.getToken(MySqlParser.DESC, 0);
	};

	REVERSE() {
	    return this.getToken(MySqlParser.REVERSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLevelInWeightListElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLevelInWeightListElement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitLevelInWeightListElement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AggregateWindowedFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_aggregateWindowedFunction;
    }

	aggregateWindowedFunctionMysql() {
	    return this.getTypedRuleContext(AggregateWindowedFunctionMysqlContext,0);
	};

	aggregateWindowedFunctionInceptor() {
	    return this.getTypedRuleContext(AggregateWindowedFunctionInceptorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAggregateWindowedFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAggregateWindowedFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAggregateWindowedFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AggregateWindowedFunctionMysqlContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_aggregateWindowedFunctionMysql;
        this.noSpaceTokens = ['(']
        this.functionName = null; // Token
        this.aggregator = null; // Token
        this.starArg = null; // Token
        this.separator = null; // Token
    }

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	functionArg() {
	    return this.getTypedRuleContext(FunctionArgContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	AVG() {
	    return this.getToken(MySqlParser.AVG, 0);
	};

	MAX() {
	    return this.getToken(MySqlParser.MAX, 0);
	};

	MIN() {
	    return this.getToken(MySqlParser.MIN, 0);
	};

	SUM() {
	    return this.getToken(MySqlParser.SUM, 0);
	};

	ALL() {
	    return this.getToken(MySqlParser.ALL, 0);
	};

	DISTINCT() {
	    return this.getToken(MySqlParser.DISTINCT, 0);
	};

	COUNT() {
	    return this.getToken(MySqlParser.COUNT, 0);
	};

	STAR() {
	    return this.getToken(MySqlParser.STAR, 0);
	};

	functionArgs() {
	    return this.getTypedRuleContext(FunctionArgsContext,0);
	};

	BIT_AND() {
	    return this.getToken(MySqlParser.BIT_AND, 0);
	};

	BIT_OR() {
	    return this.getToken(MySqlParser.BIT_OR, 0);
	};

	BIT_XOR() {
	    return this.getToken(MySqlParser.BIT_XOR, 0);
	};

	STD() {
	    return this.getToken(MySqlParser.STD, 0);
	};

	STDDEV() {
	    return this.getToken(MySqlParser.STDDEV, 0);
	};

	STDDEV_POP() {
	    return this.getToken(MySqlParser.STDDEV_POP, 0);
	};

	STDDEV_SAMP() {
	    return this.getToken(MySqlParser.STDDEV_SAMP, 0);
	};

	VAR_POP() {
	    return this.getToken(MySqlParser.VAR_POP, 0);
	};

	VAR_SAMP() {
	    return this.getToken(MySqlParser.VAR_SAMP, 0);
	};

	VARIANCE() {
	    return this.getToken(MySqlParser.VARIANCE, 0);
	};

	GROUP_CONCAT() {
	    return this.getToken(MySqlParser.GROUP_CONCAT, 0);
	};

	ORDER() {
	    return this.getToken(MySqlParser.ORDER, 0);
	};

	BY() {
	    return this.getToken(MySqlParser.BY, 0);
	};

	orderByExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OrderByExpressionContext);
	    } else {
	        return this.getTypedRuleContext(OrderByExpressionContext,i);
	    }
	};

	SEPARATOR() {
	    return this.getToken(MySqlParser.SEPARATOR, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAggregateWindowedFunctionMysql(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAggregateWindowedFunctionMysql(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAggregateWindowedFunctionMysql(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AggregateWindowedFunctionInceptorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_aggregateWindowedFunctionInceptor;
        this.noSpaceTokens = ['(']
    }

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	STAR() {
	    return this.getToken(MySqlParser.STAR, 0);
	};

	functionArg() {
	    return this.getTypedRuleContext(FunctionArgContext,0);
	};

	OVER() {
	    return this.getToken(MySqlParser.OVER, 0);
	};

	windowOverSpec() {
	    return this.getTypedRuleContext(WindowOverSpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAggregateWindowedFunctionInceptor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAggregateWindowedFunctionInceptor(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAggregateWindowedFunctionInceptor(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WindowOverSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_windowOverSpec;
    }

	LR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.LR_BRACKET);
	    } else {
	        return this.getToken(MySqlParser.LR_BRACKET, i);
	    }
	};


	RR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.RR_BRACKET);
	    } else {
	        return this.getToken(MySqlParser.RR_BRACKET, i);
	    }
	};


	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	BY() {
	    return this.getToken(MySqlParser.BY, 0);
	};

	orderByClause() {
	    return this.getTypedRuleContext(OrderByClauseContext,0);
	};

	windowClause() {
	    return this.getTypedRuleContext(WindowClauseContext,0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterWindowOverSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitWindowOverSpec(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitWindowOverSpec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WindowClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_windowClause;
    }

	ROWS() {
	    return this.getToken(MySqlParser.ROWS, 0);
	};

	RANGE() {
	    return this.getToken(MySqlParser.RANGE, 0);
	};

	windowStartBoundaryDefault() {
	    return this.getTypedRuleContext(WindowStartBoundaryDefaultContext,0);
	};

	BETWEEN() {
	    return this.getToken(MySqlParser.BETWEEN, 0);
	};

	windowStartBoundary() {
	    return this.getTypedRuleContext(WindowStartBoundaryContext,0);
	};

	AND() {
	    return this.getToken(MySqlParser.AND, 0);
	};

	windowEndBoundary() {
	    return this.getTypedRuleContext(WindowEndBoundaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterWindowClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitWindowClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitWindowClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WindowStartBoundaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_windowStartBoundary;
    }

	UNBOUNDED() {
	    return this.getToken(MySqlParser.UNBOUNDED, 0);
	};

	PRECEDING() {
	    return this.getToken(MySqlParser.PRECEDING, 0);
	};

	CURRENT() {
	    return this.getToken(MySqlParser.CURRENT, 0);
	};

	ROW() {
	    return this.getToken(MySqlParser.ROW, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	FOLLOWING() {
	    return this.getToken(MySqlParser.FOLLOWING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterWindowStartBoundary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitWindowStartBoundary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitWindowStartBoundary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WindowStartBoundaryDefaultContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_windowStartBoundaryDefault;
    }

	UNBOUNDED() {
	    return this.getToken(MySqlParser.UNBOUNDED, 0);
	};

	PRECEDING() {
	    return this.getToken(MySqlParser.PRECEDING, 0);
	};

	CURRENT() {
	    return this.getToken(MySqlParser.CURRENT, 0);
	};

	ROW() {
	    return this.getToken(MySqlParser.ROW, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterWindowStartBoundaryDefault(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitWindowStartBoundaryDefault(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitWindowStartBoundaryDefault(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WindowEndBoundaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_windowEndBoundary;
    }

	UNBOUNDED() {
	    return this.getToken(MySqlParser.UNBOUNDED, 0);
	};

	FOLLOWING() {
	    return this.getToken(MySqlParser.FOLLOWING, 0);
	};

	CURRENT() {
	    return this.getToken(MySqlParser.CURRENT, 0);
	};

	ROW() {
	    return this.getToken(MySqlParser.ROW, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	PRECEDING() {
	    return this.getToken(MySqlParser.PRECEDING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterWindowEndBoundary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitWindowEndBoundary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitWindowEndBoundary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PasswordFunctionClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_passwordFunctionClause;
        this.noSpaceTokens = ['(']
        this.functionName = null; // Token
    }

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	functionArg() {
	    return this.getTypedRuleContext(FunctionArgContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	PASSWORD() {
	    return this.getToken(MySqlParser.PASSWORD, 0);
	};

	OLD_PASSWORD() {
	    return this.getToken(MySqlParser.OLD_PASSWORD, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPasswordFunctionClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPasswordFunctionClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitPasswordFunctionClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FunctionArgsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_functionArgs;
    }

	functionArg = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FunctionArgContext);
	    } else {
	        return this.getTypedRuleContext(FunctionArgContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterFunctionArgs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitFunctionArgs(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitFunctionArgs(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FunctionArgContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_functionArg;
    }

	constant() {
	    return this.getTypedRuleContext(ConstantContext,0);
	};

	funcColumnName() {
	    return this.getTypedRuleContext(FuncColumnNameContext,0);
	};

	functionCall() {
	    return this.getTypedRuleContext(FunctionCallContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	functionArgOptional() {
	    return this.getTypedRuleContext(FunctionArgOptionalContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterFunctionArg(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitFunctionArg(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitFunctionArg(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FunctionArgOptionalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_functionArgOptional;
    }

	emptyElement() {
	    return this.getTypedRuleContext(EmptyElementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterFunctionArgOptional(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitFunctionArgOptional(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitFunctionArgOptional(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExpressionOptionalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_expressionOptional;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	emptyElement() {
	    return this.getTypedRuleContext(EmptyElementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterExpressionOptional(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitExpressionOptional(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitExpressionOptional(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_expression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ErrorIsExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.testValue = null; // Token;
        super.copyFrom(ctx);
    }

	predicate() {
	    return this.getTypedRuleContext(PredicateContext,0);
	};

	IS() {
	    return this.getToken(MySqlParser.IS, 0);
	};

	NOT() {
	    return this.getToken(MySqlParser.NOT, 0);
	};

	TRUE() {
	    return this.getToken(MySqlParser.TRUE, 0);
	};

	FALSE() {
	    return this.getToken(MySqlParser.FALSE, 0);
	};

	UNKNOWN() {
	    return this.getToken(MySqlParser.UNKNOWN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterErrorIsExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitErrorIsExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitErrorIsExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.ErrorIsExpressionContext = ErrorIsExpressionContext;

class IsExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.testValue = null; // Token;
        super.copyFrom(ctx);
    }

	predicate() {
	    return this.getTypedRuleContext(PredicateContext,0);
	};

	IS() {
	    return this.getToken(MySqlParser.IS, 0);
	};

	TRUE() {
	    return this.getToken(MySqlParser.TRUE, 0);
	};

	FALSE() {
	    return this.getToken(MySqlParser.FALSE, 0);
	};

	UNKNOWN() {
	    return this.getToken(MySqlParser.UNKNOWN, 0);
	};

	NOT() {
	    return this.getToken(MySqlParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterIsExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitIsExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitIsExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.IsExpressionContext = IsExpressionContext;

class NotExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.notOperator = null; // Token;
        super.copyFrom(ctx);
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	NOT() {
	    return this.getToken(MySqlParser.NOT, 0);
	};

	EXCLAMATION_SYMBOL() {
	    return this.getToken(MySqlParser.EXCLAMATION_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterNotExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitNotExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitNotExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.NotExpressionContext = NotExpressionContext;

class LogicalExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	logicalOperator() {
	    return this.getTypedRuleContext(LogicalOperatorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLogicalExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLogicalExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitLogicalExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.LogicalExpressionContext = LogicalExpressionContext;

class PredicateExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	predicate() {
	    return this.getTypedRuleContext(PredicateContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPredicateExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPredicateExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitPredicateExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.PredicateExpressionContext = PredicateExpressionContext;

class PredicateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_predicate;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class SoundsLikePredicateContext extends PredicateContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	predicate = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PredicateContext);
	    } else {
	        return this.getTypedRuleContext(PredicateContext,i);
	    }
	};

	SOUNDS() {
	    return this.getToken(MySqlParser.SOUNDS, 0);
	};

	LIKE() {
	    return this.getToken(MySqlParser.LIKE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSoundsLikePredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSoundsLikePredicate(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitSoundsLikePredicate(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.SoundsLikePredicateContext = SoundsLikePredicateContext;

class ExpressionAtomPredicateContext extends PredicateContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expressionAtom() {
	    return this.getTypedRuleContext(ExpressionAtomContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterExpressionAtomPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitExpressionAtomPredicate(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitExpressionAtomPredicate(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.ExpressionAtomPredicateContext = ExpressionAtomPredicateContext;

class InPredicateContext extends PredicateContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	predicate() {
	    return this.getTypedRuleContext(PredicateContext,0);
	};

	IN() {
	    return this.getToken(MySqlParser.IN, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	selectStatementPlus() {
	    return this.getTypedRuleContext(SelectStatementPlusContext,0);
	};

	expressions() {
	    return this.getTypedRuleContext(ExpressionsContext,0);
	};

	NOT() {
	    return this.getToken(MySqlParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterInPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitInPredicate(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitInPredicate(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.InPredicateContext = InPredicateContext;

class SubqueryComparasionPredicateContext extends PredicateContext {

    constructor(parser, ctx) {
        super(parser);
        this.quantifier = null; // Token;
        super.copyFrom(ctx);
    }

	predicate() {
	    return this.getTypedRuleContext(PredicateContext,0);
	};

	comparisonOperator() {
	    return this.getTypedRuleContext(ComparisonOperatorContext,0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	selectStatementPlus() {
	    return this.getTypedRuleContext(SelectStatementPlusContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	ALL() {
	    return this.getToken(MySqlParser.ALL, 0);
	};

	ANY() {
	    return this.getToken(MySqlParser.ANY, 0);
	};

	SOME() {
	    return this.getToken(MySqlParser.SOME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSubqueryComparasionPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSubqueryComparasionPredicate(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitSubqueryComparasionPredicate(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.SubqueryComparasionPredicateContext = SubqueryComparasionPredicateContext;

class BetweenPredicateContext extends PredicateContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	predicate = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PredicateContext);
	    } else {
	        return this.getTypedRuleContext(PredicateContext,i);
	    }
	};

	BETWEEN() {
	    return this.getToken(MySqlParser.BETWEEN, 0);
	};

	AND() {
	    return this.getToken(MySqlParser.AND, 0);
	};

	NOT() {
	    return this.getToken(MySqlParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterBetweenPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitBetweenPredicate(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitBetweenPredicate(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.BetweenPredicateContext = BetweenPredicateContext;

class BinaryComparasionPredicateContext extends PredicateContext {

    constructor(parser, ctx) {
        super(parser);
        this.left = null; // PredicateContext;
        this.right = null; // PredicateContext;
        super.copyFrom(ctx);
    }

	comparisonOperator() {
	    return this.getTypedRuleContext(ComparisonOperatorContext,0);
	};

	predicate = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PredicateContext);
	    } else {
	        return this.getTypedRuleContext(PredicateContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterBinaryComparasionPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitBinaryComparasionPredicate(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitBinaryComparasionPredicate(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.BinaryComparasionPredicateContext = BinaryComparasionPredicateContext;

class IsNullPredicateContext extends PredicateContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	predicate() {
	    return this.getTypedRuleContext(PredicateContext,0);
	};

	IS() {
	    return this.getToken(MySqlParser.IS, 0);
	};

	nullNotnull() {
	    return this.getTypedRuleContext(NullNotnullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterIsNullPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitIsNullPredicate(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitIsNullPredicate(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.IsNullPredicateContext = IsNullPredicateContext;

class LikePredicateContext extends PredicateContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	predicate = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PredicateContext);
	    } else {
	        return this.getTypedRuleContext(PredicateContext,i);
	    }
	};

	LIKE() {
	    return this.getToken(MySqlParser.LIKE, 0);
	};

	NOT() {
	    return this.getToken(MySqlParser.NOT, 0);
	};

	ESCAPE() {
	    return this.getToken(MySqlParser.ESCAPE, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLikePredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLikePredicate(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitLikePredicate(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.LikePredicateContext = LikePredicateContext;

class RegexpPredicateContext extends PredicateContext {

    constructor(parser, ctx) {
        super(parser);
        this.regex = null; // Token;
        super.copyFrom(ctx);
    }

	predicate = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PredicateContext);
	    } else {
	        return this.getTypedRuleContext(PredicateContext,i);
	    }
	};

	REGEXP() {
	    return this.getToken(MySqlParser.REGEXP, 0);
	};

	RLIKE() {
	    return this.getToken(MySqlParser.RLIKE, 0);
	};

	NOT() {
	    return this.getToken(MySqlParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterRegexpPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitRegexpPredicate(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitRegexpPredicate(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.RegexpPredicateContext = RegexpPredicateContext;

class ExpressionAtomContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_expressionAtom;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class UnaryExpressionAtomContext extends ExpressionAtomContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expressionAtom() {
	    return this.getTypedRuleContext(ExpressionAtomContext,0);
	};

	unaryOperator() {
	    return this.getTypedRuleContext(UnaryOperatorContext,0);
	};

	unaryPriorOperator() {
	    return this.getTypedRuleContext(UnaryPriorOperatorContext,0);
	};

	NOT() {
	    return this.getToken(MySqlParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUnaryExpressionAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUnaryExpressionAtom(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitUnaryExpressionAtom(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.UnaryExpressionAtomContext = UnaryExpressionAtomContext;

class CollateExpressionAtomContext extends ExpressionAtomContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expressionAtom() {
	    return this.getTypedRuleContext(ExpressionAtomContext,0);
	};

	COLLATE() {
	    return this.getToken(MySqlParser.COLLATE, 0);
	};

	collationName() {
	    return this.getTypedRuleContext(CollationNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCollateExpressionAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCollateExpressionAtom(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitCollateExpressionAtom(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.CollateExpressionAtomContext = CollateExpressionAtomContext;

class SubqueryExpessionAtomContext extends ExpressionAtomContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	selectStatementPlus() {
	    return this.getTypedRuleContext(SelectStatementPlusContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSubqueryExpessionAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSubqueryExpessionAtom(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitSubqueryExpessionAtom(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.SubqueryExpessionAtomContext = SubqueryExpessionAtomContext;

class CursorAttributeExpressionAtomContext extends ExpressionAtomContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	cursorAttribute() {
	    return this.getTypedRuleContext(CursorAttributeContext,0);
	};

	cursorName() {
	    return this.getTypedRuleContext(CursorNameContext,0);
	};

	SQL() {
	    return this.getToken(MySqlParser.SQL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCursorAttributeExpressionAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCursorAttributeExpressionAtom(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitCursorAttributeExpressionAtom(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.CursorAttributeExpressionAtomContext = CursorAttributeExpressionAtomContext;

class MysqlVariableExpressionAtomContext extends ExpressionAtomContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	mysqlVariable() {
	    return this.getTypedRuleContext(MysqlVariableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterMysqlVariableExpressionAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitMysqlVariableExpressionAtom(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitMysqlVariableExpressionAtom(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.MysqlVariableExpressionAtomContext = MysqlVariableExpressionAtomContext;

class NestedExpressionAtomContext extends ExpressionAtomContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterNestedExpressionAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitNestedExpressionAtom(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitNestedExpressionAtom(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.NestedExpressionAtomContext = NestedExpressionAtomContext;

class NestedRowExpressionAtomContext extends ExpressionAtomContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ROW() {
	    return this.getToken(MySqlParser.ROW, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterNestedRowExpressionAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitNestedRowExpressionAtom(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitNestedRowExpressionAtom(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.NestedRowExpressionAtomContext = NestedRowExpressionAtomContext;

class MathExpressionAtomContext extends ExpressionAtomContext {

    constructor(parser, ctx) {
        super(parser);
        this.left = null; // ExpressionAtomContext;
        this.right = null; // ExpressionAtomContext;
        super.copyFrom(ctx);
    }

	mathOperator() {
	    return this.getTypedRuleContext(MathOperatorContext,0);
	};

	expressionAtom = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionAtomContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionAtomContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterMathExpressionAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitMathExpressionAtom(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitMathExpressionAtom(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.MathExpressionAtomContext = MathExpressionAtomContext;

class IntervalExpressionAtomContext extends ExpressionAtomContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	INTERVAL() {
	    return this.getToken(MySqlParser.INTERVAL, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	intervalType() {
	    return this.getTypedRuleContext(IntervalTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterIntervalExpressionAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitIntervalExpressionAtom(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitIntervalExpressionAtom(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.IntervalExpressionAtomContext = IntervalExpressionAtomContext;

class GeneralElementExpressionAtomContext extends ExpressionAtomContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	generalElement() {
	    return this.getTypedRuleContext(GeneralElementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterGeneralElementExpressionAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitGeneralElementExpressionAtom(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitGeneralElementExpressionAtom(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.GeneralElementExpressionAtomContext = GeneralElementExpressionAtomContext;

class ExistsExpessionAtomContext extends ExpressionAtomContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	EXISTS() {
	    return this.getToken(MySqlParser.EXISTS, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	selectStatementPlus() {
	    return this.getTypedRuleContext(SelectStatementPlusContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterExistsExpessionAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitExistsExpessionAtom(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitExistsExpessionAtom(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.ExistsExpessionAtomContext = ExistsExpessionAtomContext;

class ConstantExpressionAtomContext extends ExpressionAtomContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	constant() {
	    return this.getTypedRuleContext(ConstantContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterConstantExpressionAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitConstantExpressionAtom(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitConstantExpressionAtom(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.ConstantExpressionAtomContext = ConstantExpressionAtomContext;

class FunctionCallExpressionAtomContext extends ExpressionAtomContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	functionCall() {
	    return this.getTypedRuleContext(FunctionCallContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterFunctionCallExpressionAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitFunctionCallExpressionAtom(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitFunctionCallExpressionAtom(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.FunctionCallExpressionAtomContext = FunctionCallExpressionAtomContext;

class BinaryExpressionAtomContext extends ExpressionAtomContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	BINARY() {
	    return this.getToken(MySqlParser.BINARY, 0);
	};

	expressionAtom() {
	    return this.getTypedRuleContext(ExpressionAtomContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterBinaryExpressionAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitBinaryExpressionAtom(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitBinaryExpressionAtom(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.BinaryExpressionAtomContext = BinaryExpressionAtomContext;

class FullColumnNameExpressionAtomContext extends ExpressionAtomContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	funcColumnName() {
	    return this.getTypedRuleContext(FuncColumnNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterFullColumnNameExpressionAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitFullColumnNameExpressionAtom(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitFullColumnNameExpressionAtom(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.FullColumnNameExpressionAtomContext = FullColumnNameExpressionAtomContext;

class BitExpressionAtomContext extends ExpressionAtomContext {

    constructor(parser, ctx) {
        super(parser);
        this.left = null; // ExpressionAtomContext;
        this.right = null; // ExpressionAtomContext;
        super.copyFrom(ctx);
    }

	bitOperator() {
	    return this.getTypedRuleContext(BitOperatorContext,0);
	};

	expressionAtom = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionAtomContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionAtomContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterBitExpressionAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitBitExpressionAtom(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitBitExpressionAtom(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySqlParser.BitExpressionAtomContext = BitExpressionAtomContext;

class UnaryPriorOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_unaryPriorOperator;
    }

	PRIOR() {
	    return this.getToken(MySqlParser.PRIOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUnaryPriorOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUnaryPriorOperator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitUnaryPriorOperator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UnaryOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_unaryOperator;
        this.noSpaceBetween = true
    }

	EXCLAMATION_SYMBOL() {
	    return this.getToken(MySqlParser.EXCLAMATION_SYMBOL, 0);
	};

	BIT_NOT_OP() {
	    return this.getToken(MySqlParser.BIT_NOT_OP, 0);
	};

	PLUS() {
	    return this.getToken(MySqlParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(MySqlParser.MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUnaryOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUnaryOperator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitUnaryOperator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ComparisonOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_comparisonOperator;
        this.noSpaceTokens = ['<', '>', '=']
    }

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	GREATER_SYMBOL() {
	    return this.getToken(MySqlParser.GREATER_SYMBOL, 0);
	};

	LESS_SYMBOL() {
	    return this.getToken(MySqlParser.LESS_SYMBOL, 0);
	};

	EXCLAMATION_SYMBOL() {
	    return this.getToken(MySqlParser.EXCLAMATION_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterComparisonOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitComparisonOperator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitComparisonOperator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LogicalOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_logicalOperator;
        this.level = 1;
        noSpaceTokens: [] = ['&', '|'];
    }

	AND() {
	    return this.getToken(MySqlParser.AND, 0);
	};

	BIT_AND_OP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.BIT_AND_OP);
	    } else {
	        return this.getToken(MySqlParser.BIT_AND_OP, i);
	    }
	};


	XOR() {
	    return this.getToken(MySqlParser.XOR, 0);
	};

	OR() {
	    return this.getToken(MySqlParser.OR, 0);
	};

	BIT_OR_OP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.BIT_OR_OP);
	    } else {
	        return this.getToken(MySqlParser.BIT_OR_OP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLogicalOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLogicalOperator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitLogicalOperator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BitOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_bitOperator;
        this.noSpaceTokens = ['<', '>']
    }

	LESS_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.LESS_SYMBOL);
	    } else {
	        return this.getToken(MySqlParser.LESS_SYMBOL, i);
	    }
	};


	GREATER_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.GREATER_SYMBOL);
	    } else {
	        return this.getToken(MySqlParser.GREATER_SYMBOL, i);
	    }
	};


	BIT_AND_OP() {
	    return this.getToken(MySqlParser.BIT_AND_OP, 0);
	};

	BIT_XOR_OP() {
	    return this.getToken(MySqlParser.BIT_XOR_OP, 0);
	};

	BIT_OR_OP() {
	    return this.getToken(MySqlParser.BIT_OR_OP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterBitOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitBitOperator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitBitOperator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MathOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_mathOperator;
    }

	STAR() {
	    return this.getToken(MySqlParser.STAR, 0);
	};

	DIVIDE() {
	    return this.getToken(MySqlParser.DIVIDE, 0);
	};

	MODULE() {
	    return this.getToken(MySqlParser.MODULE, 0);
	};

	DIV() {
	    return this.getToken(MySqlParser.DIV, 0);
	};

	MOD() {
	    return this.getToken(MySqlParser.MOD, 0);
	};

	PLUS() {
	    return this.getToken(MySqlParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(MySqlParser.MINUS, 0);
	};

	MINUSMINUS() {
	    return this.getToken(MySqlParser.MINUSMINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterMathOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitMathOperator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitMathOperator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CursorAttributeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_cursorAttribute;
        this.noSpaceBetween = true;
        noSpaceTokens: [] = ['%'];
    }

	MODULE() {
	    return this.getToken(MySqlParser.MODULE, 0);
	};

	FOUND() {
	    return this.getToken(MySqlParser.FOUND, 0);
	};

	NOTFOUND() {
	    return this.getToken(MySqlParser.NOTFOUND, 0);
	};

	ISOPEN() {
	    return this.getToken(MySqlParser.ISOPEN, 0);
	};

	ROWCOUNT() {
	    return this.getToken(MySqlParser.ROWCOUNT, 0);
	};

	ROWTYPE() {
	    return this.getToken(MySqlParser.ROWTYPE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCursorAttribute(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCursorAttribute(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitCursorAttribute(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CharsetNameBaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_charsetNameBase;
    }

	ARMSCII8() {
	    return this.getToken(MySqlParser.ARMSCII8, 0);
	};

	ASCII() {
	    return this.getToken(MySqlParser.ASCII, 0);
	};

	BIG5() {
	    return this.getToken(MySqlParser.BIG5, 0);
	};

	CP1250() {
	    return this.getToken(MySqlParser.CP1250, 0);
	};

	CP1251() {
	    return this.getToken(MySqlParser.CP1251, 0);
	};

	CP1256() {
	    return this.getToken(MySqlParser.CP1256, 0);
	};

	CP1257() {
	    return this.getToken(MySqlParser.CP1257, 0);
	};

	CP850() {
	    return this.getToken(MySqlParser.CP850, 0);
	};

	CP852() {
	    return this.getToken(MySqlParser.CP852, 0);
	};

	CP866() {
	    return this.getToken(MySqlParser.CP866, 0);
	};

	CP932() {
	    return this.getToken(MySqlParser.CP932, 0);
	};

	DEC8() {
	    return this.getToken(MySqlParser.DEC8, 0);
	};

	EUCJPMS() {
	    return this.getToken(MySqlParser.EUCJPMS, 0);
	};

	EUCKR() {
	    return this.getToken(MySqlParser.EUCKR, 0);
	};

	GB2312() {
	    return this.getToken(MySqlParser.GB2312, 0);
	};

	GBK() {
	    return this.getToken(MySqlParser.GBK, 0);
	};

	GEOSTD8() {
	    return this.getToken(MySqlParser.GEOSTD8, 0);
	};

	GREEK() {
	    return this.getToken(MySqlParser.GREEK, 0);
	};

	HEBREW() {
	    return this.getToken(MySqlParser.HEBREW, 0);
	};

	HP8() {
	    return this.getToken(MySqlParser.HP8, 0);
	};

	KEYBCS2() {
	    return this.getToken(MySqlParser.KEYBCS2, 0);
	};

	KOI8R() {
	    return this.getToken(MySqlParser.KOI8R, 0);
	};

	KOI8U() {
	    return this.getToken(MySqlParser.KOI8U, 0);
	};

	LATIN1() {
	    return this.getToken(MySqlParser.LATIN1, 0);
	};

	LATIN2() {
	    return this.getToken(MySqlParser.LATIN2, 0);
	};

	LATIN5() {
	    return this.getToken(MySqlParser.LATIN5, 0);
	};

	LATIN7() {
	    return this.getToken(MySqlParser.LATIN7, 0);
	};

	MACCE() {
	    return this.getToken(MySqlParser.MACCE, 0);
	};

	MACROMAN() {
	    return this.getToken(MySqlParser.MACROMAN, 0);
	};

	SJIS() {
	    return this.getToken(MySqlParser.SJIS, 0);
	};

	SWE7() {
	    return this.getToken(MySqlParser.SWE7, 0);
	};

	TIS620() {
	    return this.getToken(MySqlParser.TIS620, 0);
	};

	UCS2() {
	    return this.getToken(MySqlParser.UCS2, 0);
	};

	UJIS() {
	    return this.getToken(MySqlParser.UJIS, 0);
	};

	UTF16() {
	    return this.getToken(MySqlParser.UTF16, 0);
	};

	UTF16LE() {
	    return this.getToken(MySqlParser.UTF16LE, 0);
	};

	UTF32() {
	    return this.getToken(MySqlParser.UTF32, 0);
	};

	UTF8() {
	    return this.getToken(MySqlParser.UTF8, 0);
	};

	UTF8MB3() {
	    return this.getToken(MySqlParser.UTF8MB3, 0);
	};

	UTF8MB4() {
	    return this.getToken(MySqlParser.UTF8MB4, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCharsetNameBase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCharsetNameBase(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitCharsetNameBase(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TransactionLevelBaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_transactionLevelBase;
    }

	REPEATABLE() {
	    return this.getToken(MySqlParser.REPEATABLE, 0);
	};

	COMMITTED() {
	    return this.getToken(MySqlParser.COMMITTED, 0);
	};

	UNCOMMITTED() {
	    return this.getToken(MySqlParser.UNCOMMITTED, 0);
	};

	SERIALIZABLE() {
	    return this.getToken(MySqlParser.SERIALIZABLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTransactionLevelBase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTransactionLevelBase(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitTransactionLevelBase(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrivilegesBaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_privilegesBase;
    }

	TABLES() {
	    return this.getToken(MySqlParser.TABLES, 0);
	};

	ROUTINE() {
	    return this.getToken(MySqlParser.ROUTINE, 0);
	};

	EXECUTE() {
	    return this.getToken(MySqlParser.EXECUTE, 0);
	};

	FILE() {
	    return this.getToken(MySqlParser.FILE, 0);
	};

	PROCESS() {
	    return this.getToken(MySqlParser.PROCESS, 0);
	};

	RELOAD() {
	    return this.getToken(MySqlParser.RELOAD, 0);
	};

	SHUTDOWN() {
	    return this.getToken(MySqlParser.SHUTDOWN, 0);
	};

	SUPER() {
	    return this.getToken(MySqlParser.SUPER, 0);
	};

	PRIVILEGES() {
	    return this.getToken(MySqlParser.PRIVILEGES, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPrivilegesBase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPrivilegesBase(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitPrivilegesBase(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IntervalTypeBaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_intervalTypeBase;
    }

	QUARTER() {
	    return this.getToken(MySqlParser.QUARTER, 0);
	};

	MONTH() {
	    return this.getToken(MySqlParser.MONTH, 0);
	};

	DAY() {
	    return this.getToken(MySqlParser.DAY, 0);
	};

	HOUR() {
	    return this.getToken(MySqlParser.HOUR, 0);
	};

	MINUTE() {
	    return this.getToken(MySqlParser.MINUTE, 0);
	};

	WEEK() {
	    return this.getToken(MySqlParser.WEEK, 0);
	};

	SECOND() {
	    return this.getToken(MySqlParser.SECOND, 0);
	};

	MICROSECOND() {
	    return this.getToken(MySqlParser.MICROSECOND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterIntervalTypeBase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitIntervalTypeBase(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitIntervalTypeBase(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DataTypeBaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_dataTypeBase;
    }

	DATE() {
	    return this.getToken(MySqlParser.DATE, 0);
	};

	TIME() {
	    return this.getToken(MySqlParser.TIME, 0);
	};

	TIMESTAMP() {
	    return this.getToken(MySqlParser.TIMESTAMP, 0);
	};

	DATETIME() {
	    return this.getToken(MySqlParser.DATETIME, 0);
	};

	YEAR() {
	    return this.getToken(MySqlParser.YEAR, 0);
	};

	ENUM() {
	    return this.getToken(MySqlParser.ENUM, 0);
	};

	TEXT() {
	    return this.getToken(MySqlParser.TEXT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDataTypeBase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDataTypeBase(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitDataTypeBase(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class KeywordsCanBeIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_keywordsCanBeId;
    }

	ACCOUNT() {
	    return this.getToken(MySqlParser.ACCOUNT, 0);
	};

	ACTION() {
	    return this.getToken(MySqlParser.ACTION, 0);
	};

	AFTER() {
	    return this.getToken(MySqlParser.AFTER, 0);
	};

	AGGREGATE() {
	    return this.getToken(MySqlParser.AGGREGATE, 0);
	};

	ALGORITHM() {
	    return this.getToken(MySqlParser.ALGORITHM, 0);
	};

	ANY() {
	    return this.getToken(MySqlParser.ANY, 0);
	};

	AT() {
	    return this.getToken(MySqlParser.AT, 0);
	};

	AUTHORS() {
	    return this.getToken(MySqlParser.AUTHORS, 0);
	};

	AUTOCOMMIT() {
	    return this.getToken(MySqlParser.AUTOCOMMIT, 0);
	};

	AUTOEXTEND_SIZE() {
	    return this.getToken(MySqlParser.AUTOEXTEND_SIZE, 0);
	};

	AUTO_INCREMENT() {
	    return this.getToken(MySqlParser.AUTO_INCREMENT, 0);
	};

	AVG_ROW_LENGTH() {
	    return this.getToken(MySqlParser.AVG_ROW_LENGTH, 0);
	};

	BINLOG() {
	    return this.getToken(MySqlParser.BINLOG, 0);
	};

	BIT() {
	    return this.getToken(MySqlParser.BIT, 0);
	};

	BLOCK() {
	    return this.getToken(MySqlParser.BLOCK, 0);
	};

	BOOL() {
	    return this.getToken(MySqlParser.BOOL, 0);
	};

	BOOLEAN() {
	    return this.getToken(MySqlParser.BOOLEAN, 0);
	};

	BTREE() {
	    return this.getToken(MySqlParser.BTREE, 0);
	};

	CACHE() {
	    return this.getToken(MySqlParser.CACHE, 0);
	};

	CASCADED() {
	    return this.getToken(MySqlParser.CASCADED, 0);
	};

	CHAIN() {
	    return this.getToken(MySqlParser.CHAIN, 0);
	};

	CHANGED() {
	    return this.getToken(MySqlParser.CHANGED, 0);
	};

	CHANNEL() {
	    return this.getToken(MySqlParser.CHANNEL, 0);
	};

	CHECKSUM() {
	    return this.getToken(MySqlParser.CHECKSUM, 0);
	};

	PAGE_CHECKSUM() {
	    return this.getToken(MySqlParser.PAGE_CHECKSUM, 0);
	};

	CIPHER() {
	    return this.getToken(MySqlParser.CIPHER, 0);
	};

	CLIENT() {
	    return this.getToken(MySqlParser.CLIENT, 0);
	};

	CLOSE() {
	    return this.getToken(MySqlParser.CLOSE, 0);
	};

	COALESCE() {
	    return this.getToken(MySqlParser.COALESCE, 0);
	};

	CODE() {
	    return this.getToken(MySqlParser.CODE, 0);
	};

	COLUMNS() {
	    return this.getToken(MySqlParser.COLUMNS, 0);
	};

	COLUMN_FORMAT() {
	    return this.getToken(MySqlParser.COLUMN_FORMAT, 0);
	};

	COMMENT() {
	    return this.getToken(MySqlParser.COMMENT, 0);
	};

	COMMIT() {
	    return this.getToken(MySqlParser.COMMIT, 0);
	};

	COMPACT() {
	    return this.getToken(MySqlParser.COMPACT, 0);
	};

	COMPLETION() {
	    return this.getToken(MySqlParser.COMPLETION, 0);
	};

	COMPRESSED() {
	    return this.getToken(MySqlParser.COMPRESSED, 0);
	};

	COMPRESSION() {
	    return this.getToken(MySqlParser.COMPRESSION, 0);
	};

	CONCURRENT() {
	    return this.getToken(MySqlParser.CONCURRENT, 0);
	};

	CONNECTION() {
	    return this.getToken(MySqlParser.CONNECTION, 0);
	};

	CONSISTENT() {
	    return this.getToken(MySqlParser.CONSISTENT, 0);
	};

	CONTAINS() {
	    return this.getToken(MySqlParser.CONTAINS, 0);
	};

	CONTEXT() {
	    return this.getToken(MySqlParser.CONTEXT, 0);
	};

	CONTRIBUTORS() {
	    return this.getToken(MySqlParser.CONTRIBUTORS, 0);
	};

	COPY() {
	    return this.getToken(MySqlParser.COPY, 0);
	};

	CPU() {
	    return this.getToken(MySqlParser.CPU, 0);
	};

	DATA() {
	    return this.getToken(MySqlParser.DATA, 0);
	};

	DATAFILE() {
	    return this.getToken(MySqlParser.DATAFILE, 0);
	};

	DEALLOCATE() {
	    return this.getToken(MySqlParser.DEALLOCATE, 0);
	};

	DEFAULT_AUTH() {
	    return this.getToken(MySqlParser.DEFAULT_AUTH, 0);
	};

	DEFINER() {
	    return this.getToken(MySqlParser.DEFINER, 0);
	};

	DELAY_KEY_WRITE() {
	    return this.getToken(MySqlParser.DELAY_KEY_WRITE, 0);
	};

	DES_KEY_FILE() {
	    return this.getToken(MySqlParser.DES_KEY_FILE, 0);
	};

	DIRECTORY() {
	    return this.getToken(MySqlParser.DIRECTORY, 0);
	};

	DISABLE() {
	    return this.getToken(MySqlParser.DISABLE, 0);
	};

	DISCARD() {
	    return this.getToken(MySqlParser.DISCARD, 0);
	};

	DISK() {
	    return this.getToken(MySqlParser.DISK, 0);
	};

	DO() {
	    return this.getToken(MySqlParser.DO, 0);
	};

	DUMPFILE() {
	    return this.getToken(MySqlParser.DUMPFILE, 0);
	};

	DUPLICATE() {
	    return this.getToken(MySqlParser.DUPLICATE, 0);
	};

	DYNAMIC() {
	    return this.getToken(MySqlParser.DYNAMIC, 0);
	};

	ENABLE() {
	    return this.getToken(MySqlParser.ENABLE, 0);
	};

	ENCRYPTION() {
	    return this.getToken(MySqlParser.ENCRYPTION, 0);
	};

	ENDS() {
	    return this.getToken(MySqlParser.ENDS, 0);
	};

	ENGINE() {
	    return this.getToken(MySqlParser.ENGINE, 0);
	};

	ENGINES() {
	    return this.getToken(MySqlParser.ENGINES, 0);
	};

	ERROR() {
	    return this.getToken(MySqlParser.ERROR, 0);
	};

	ERRORS() {
	    return this.getToken(MySqlParser.ERRORS, 0);
	};

	ESCAPE() {
	    return this.getToken(MySqlParser.ESCAPE, 0);
	};

	EVEN() {
	    return this.getToken(MySqlParser.EVEN, 0);
	};

	EVENT() {
	    return this.getToken(MySqlParser.EVENT, 0);
	};

	EVENTS() {
	    return this.getToken(MySqlParser.EVENTS, 0);
	};

	EVERY() {
	    return this.getToken(MySqlParser.EVERY, 0);
	};

	EXCHANGE() {
	    return this.getToken(MySqlParser.EXCHANGE, 0);
	};

	EXCLUSIVE() {
	    return this.getToken(MySqlParser.EXCLUSIVE, 0);
	};

	EXPIRE() {
	    return this.getToken(MySqlParser.EXPIRE, 0);
	};

	EXPORT() {
	    return this.getToken(MySqlParser.EXPORT, 0);
	};

	EXTENT_SIZE() {
	    return this.getToken(MySqlParser.EXTENT_SIZE, 0);
	};

	FAST() {
	    return this.getToken(MySqlParser.FAST, 0);
	};

	FAULTS() {
	    return this.getToken(MySqlParser.FAULTS, 0);
	};

	FIELDS() {
	    return this.getToken(MySqlParser.FIELDS, 0);
	};

	FILE_BLOCK_SIZE() {
	    return this.getToken(MySqlParser.FILE_BLOCK_SIZE, 0);
	};

	FILTER() {
	    return this.getToken(MySqlParser.FILTER, 0);
	};

	FIRST() {
	    return this.getToken(MySqlParser.FIRST, 0);
	};

	FIXED() {
	    return this.getToken(MySqlParser.FIXED, 0);
	};

	FLUSH() {
	    return this.getToken(MySqlParser.FLUSH, 0);
	};

	FOLLOWS() {
	    return this.getToken(MySqlParser.FOLLOWS, 0);
	};

	FOUND() {
	    return this.getToken(MySqlParser.FOUND, 0);
	};

	FULL() {
	    return this.getToken(MySqlParser.FULL, 0);
	};

	GENERAL() {
	    return this.getToken(MySqlParser.GENERAL, 0);
	};

	GLOBAL() {
	    return this.getToken(MySqlParser.GLOBAL, 0);
	};

	GRANTS() {
	    return this.getToken(MySqlParser.GRANTS, 0);
	};

	GROUP_REPLICATION() {
	    return this.getToken(MySqlParser.GROUP_REPLICATION, 0);
	};

	HANDLER() {
	    return this.getToken(MySqlParser.HANDLER, 0);
	};

	HASH() {
	    return this.getToken(MySqlParser.HASH, 0);
	};

	HELP() {
	    return this.getToken(MySqlParser.HELP, 0);
	};

	HOST() {
	    return this.getToken(MySqlParser.HOST, 0);
	};

	HOSTS() {
	    return this.getToken(MySqlParser.HOSTS, 0);
	};

	IDENTIFIED() {
	    return this.getToken(MySqlParser.IDENTIFIED, 0);
	};

	IGNORE_SERVER_IDS() {
	    return this.getToken(MySqlParser.IGNORE_SERVER_IDS, 0);
	};

	IMPORT() {
	    return this.getToken(MySqlParser.IMPORT, 0);
	};

	INDEXES() {
	    return this.getToken(MySqlParser.INDEXES, 0);
	};

	INITIAL_SIZE() {
	    return this.getToken(MySqlParser.INITIAL_SIZE, 0);
	};

	INPLACE() {
	    return this.getToken(MySqlParser.INPLACE, 0);
	};

	INSERT_METHOD() {
	    return this.getToken(MySqlParser.INSERT_METHOD, 0);
	};

	INSTALL() {
	    return this.getToken(MySqlParser.INSTALL, 0);
	};

	INSTANCE() {
	    return this.getToken(MySqlParser.INSTANCE, 0);
	};

	INVOKER() {
	    return this.getToken(MySqlParser.INVOKER, 0);
	};

	IO() {
	    return this.getToken(MySqlParser.IO, 0);
	};

	IO_THREAD() {
	    return this.getToken(MySqlParser.IO_THREAD, 0);
	};

	IPC() {
	    return this.getToken(MySqlParser.IPC, 0);
	};

	ISOLATION() {
	    return this.getToken(MySqlParser.ISOLATION, 0);
	};

	ISSUER() {
	    return this.getToken(MySqlParser.ISSUER, 0);
	};

	JSON() {
	    return this.getToken(MySqlParser.JSON, 0);
	};

	KEY_BLOCK_SIZE() {
	    return this.getToken(MySqlParser.KEY_BLOCK_SIZE, 0);
	};

	LANGUAGE() {
	    return this.getToken(MySqlParser.LANGUAGE, 0);
	};

	LAST() {
	    return this.getToken(MySqlParser.LAST, 0);
	};

	LEAVES() {
	    return this.getToken(MySqlParser.LEAVES, 0);
	};

	LESS() {
	    return this.getToken(MySqlParser.LESS, 0);
	};

	LEVEL() {
	    return this.getToken(MySqlParser.LEVEL, 0);
	};

	LIST() {
	    return this.getToken(MySqlParser.LIST, 0);
	};

	LOCAL() {
	    return this.getToken(MySqlParser.LOCAL, 0);
	};

	LOGFILE() {
	    return this.getToken(MySqlParser.LOGFILE, 0);
	};

	LOGS() {
	    return this.getToken(MySqlParser.LOGS, 0);
	};

	MASTER() {
	    return this.getToken(MySqlParser.MASTER, 0);
	};

	MASTER_AUTO_POSITION() {
	    return this.getToken(MySqlParser.MASTER_AUTO_POSITION, 0);
	};

	MASTER_CONNECT_RETRY() {
	    return this.getToken(MySqlParser.MASTER_CONNECT_RETRY, 0);
	};

	MASTER_DELAY() {
	    return this.getToken(MySqlParser.MASTER_DELAY, 0);
	};

	MASTER_HEARTBEAT_PERIOD() {
	    return this.getToken(MySqlParser.MASTER_HEARTBEAT_PERIOD, 0);
	};

	MASTER_HOST() {
	    return this.getToken(MySqlParser.MASTER_HOST, 0);
	};

	MASTER_LOG_FILE() {
	    return this.getToken(MySqlParser.MASTER_LOG_FILE, 0);
	};

	MASTER_LOG_POS() {
	    return this.getToken(MySqlParser.MASTER_LOG_POS, 0);
	};

	MASTER_PASSWORD() {
	    return this.getToken(MySqlParser.MASTER_PASSWORD, 0);
	};

	MASTER_PORT() {
	    return this.getToken(MySqlParser.MASTER_PORT, 0);
	};

	MASTER_RETRY_COUNT() {
	    return this.getToken(MySqlParser.MASTER_RETRY_COUNT, 0);
	};

	MASTER_SSL() {
	    return this.getToken(MySqlParser.MASTER_SSL, 0);
	};

	MASTER_SSL_CA() {
	    return this.getToken(MySqlParser.MASTER_SSL_CA, 0);
	};

	MASTER_SSL_CAPATH() {
	    return this.getToken(MySqlParser.MASTER_SSL_CAPATH, 0);
	};

	MASTER_SSL_CERT() {
	    return this.getToken(MySqlParser.MASTER_SSL_CERT, 0);
	};

	MASTER_SSL_CIPHER() {
	    return this.getToken(MySqlParser.MASTER_SSL_CIPHER, 0);
	};

	MASTER_SSL_CRL() {
	    return this.getToken(MySqlParser.MASTER_SSL_CRL, 0);
	};

	MASTER_SSL_CRLPATH() {
	    return this.getToken(MySqlParser.MASTER_SSL_CRLPATH, 0);
	};

	MASTER_SSL_KEY() {
	    return this.getToken(MySqlParser.MASTER_SSL_KEY, 0);
	};

	MASTER_TLS_VERSION() {
	    return this.getToken(MySqlParser.MASTER_TLS_VERSION, 0);
	};

	MASTER_USER() {
	    return this.getToken(MySqlParser.MASTER_USER, 0);
	};

	MAX_CONNECTIONS_PER_HOUR() {
	    return this.getToken(MySqlParser.MAX_CONNECTIONS_PER_HOUR, 0);
	};

	MAX_QUERIES_PER_HOUR() {
	    return this.getToken(MySqlParser.MAX_QUERIES_PER_HOUR, 0);
	};

	MAX_ROWS() {
	    return this.getToken(MySqlParser.MAX_ROWS, 0);
	};

	MAX_SIZE() {
	    return this.getToken(MySqlParser.MAX_SIZE, 0);
	};

	MAX_UPDATES_PER_HOUR() {
	    return this.getToken(MySqlParser.MAX_UPDATES_PER_HOUR, 0);
	};

	MAX_USER_CONNECTIONS() {
	    return this.getToken(MySqlParser.MAX_USER_CONNECTIONS, 0);
	};

	MEDIUM() {
	    return this.getToken(MySqlParser.MEDIUM, 0);
	};

	MEMORY() {
	    return this.getToken(MySqlParser.MEMORY, 0);
	};

	MERGE() {
	    return this.getToken(MySqlParser.MERGE, 0);
	};

	MID() {
	    return this.getToken(MySqlParser.MID, 0);
	};

	MIGRATE() {
	    return this.getToken(MySqlParser.MIGRATE, 0);
	};

	MIN_ROWS() {
	    return this.getToken(MySqlParser.MIN_ROWS, 0);
	};

	MODE() {
	    return this.getToken(MySqlParser.MODE, 0);
	};

	MODIFY() {
	    return this.getToken(MySqlParser.MODIFY, 0);
	};

	MUTEX() {
	    return this.getToken(MySqlParser.MUTEX, 0);
	};

	MYSQL() {
	    return this.getToken(MySqlParser.MYSQL, 0);
	};

	NAME() {
	    return this.getToken(MySqlParser.NAME, 0);
	};

	NAMES() {
	    return this.getToken(MySqlParser.NAMES, 0);
	};

	NCHAR() {
	    return this.getToken(MySqlParser.NCHAR, 0);
	};

	NEVER() {
	    return this.getToken(MySqlParser.NEVER, 0);
	};

	NEXT() {
	    return this.getToken(MySqlParser.NEXT, 0);
	};

	NO() {
	    return this.getToken(MySqlParser.NO, 0);
	};

	NODEGROUP() {
	    return this.getToken(MySqlParser.NODEGROUP, 0);
	};

	NONE() {
	    return this.getToken(MySqlParser.NONE, 0);
	};

	OFFLINE() {
	    return this.getToken(MySqlParser.OFFLINE, 0);
	};

	OFFSET() {
	    return this.getToken(MySqlParser.OFFSET, 0);
	};

	OJ() {
	    return this.getToken(MySqlParser.OJ, 0);
	};

	OLD_PASSWORD() {
	    return this.getToken(MySqlParser.OLD_PASSWORD, 0);
	};

	ONE() {
	    return this.getToken(MySqlParser.ONE, 0);
	};

	ONLINE() {
	    return this.getToken(MySqlParser.ONLINE, 0);
	};

	ONLY() {
	    return this.getToken(MySqlParser.ONLY, 0);
	};

	OPEN() {
	    return this.getToken(MySqlParser.OPEN, 0);
	};

	OPTIMIZER_COSTS() {
	    return this.getToken(MySqlParser.OPTIMIZER_COSTS, 0);
	};

	OPTIONS() {
	    return this.getToken(MySqlParser.OPTIONS, 0);
	};

	OWNER() {
	    return this.getToken(MySqlParser.OWNER, 0);
	};

	PACK_KEYS() {
	    return this.getToken(MySqlParser.PACK_KEYS, 0);
	};

	PAGE() {
	    return this.getToken(MySqlParser.PAGE, 0);
	};

	PARSER() {
	    return this.getToken(MySqlParser.PARSER, 0);
	};

	PARTIAL() {
	    return this.getToken(MySqlParser.PARTIAL, 0);
	};

	PARTITIONING() {
	    return this.getToken(MySqlParser.PARTITIONING, 0);
	};

	PARTITIONS() {
	    return this.getToken(MySqlParser.PARTITIONS, 0);
	};

	PASSWORD() {
	    return this.getToken(MySqlParser.PASSWORD, 0);
	};

	PHASE() {
	    return this.getToken(MySqlParser.PHASE, 0);
	};

	PLUGINS() {
	    return this.getToken(MySqlParser.PLUGINS, 0);
	};

	PLUGIN_DIR() {
	    return this.getToken(MySqlParser.PLUGIN_DIR, 0);
	};

	PLUGIN() {
	    return this.getToken(MySqlParser.PLUGIN, 0);
	};

	PORT() {
	    return this.getToken(MySqlParser.PORT, 0);
	};

	PRECEDES() {
	    return this.getToken(MySqlParser.PRECEDES, 0);
	};

	PREPARE() {
	    return this.getToken(MySqlParser.PREPARE, 0);
	};

	PRESERVE() {
	    return this.getToken(MySqlParser.PRESERVE, 0);
	};

	PREV() {
	    return this.getToken(MySqlParser.PREV, 0);
	};

	PROCESSLIST() {
	    return this.getToken(MySqlParser.PROCESSLIST, 0);
	};

	PROFILE() {
	    return this.getToken(MySqlParser.PROFILE, 0);
	};

	PROFILES() {
	    return this.getToken(MySqlParser.PROFILES, 0);
	};

	PROXY() {
	    return this.getToken(MySqlParser.PROXY, 0);
	};

	QUERY() {
	    return this.getToken(MySqlParser.QUERY, 0);
	};

	QUICK() {
	    return this.getToken(MySqlParser.QUICK, 0);
	};

	REBUILD() {
	    return this.getToken(MySqlParser.REBUILD, 0);
	};

	RECOVER() {
	    return this.getToken(MySqlParser.RECOVER, 0);
	};

	REDO_BUFFER_SIZE() {
	    return this.getToken(MySqlParser.REDO_BUFFER_SIZE, 0);
	};

	REDUNDANT() {
	    return this.getToken(MySqlParser.REDUNDANT, 0);
	};

	RELAY() {
	    return this.getToken(MySqlParser.RELAY, 0);
	};

	RELAYLOG() {
	    return this.getToken(MySqlParser.RELAYLOG, 0);
	};

	RELAY_LOG_FILE() {
	    return this.getToken(MySqlParser.RELAY_LOG_FILE, 0);
	};

	RELAY_LOG_POS() {
	    return this.getToken(MySqlParser.RELAY_LOG_POS, 0);
	};

	REMOVE() {
	    return this.getToken(MySqlParser.REMOVE, 0);
	};

	REORGANIZE() {
	    return this.getToken(MySqlParser.REORGANIZE, 0);
	};

	REPAIR() {
	    return this.getToken(MySqlParser.REPAIR, 0);
	};

	REPLICATE_DO_DB() {
	    return this.getToken(MySqlParser.REPLICATE_DO_DB, 0);
	};

	REPLICATE_DO_TABLE() {
	    return this.getToken(MySqlParser.REPLICATE_DO_TABLE, 0);
	};

	REPLICATE_IGNORE_DB() {
	    return this.getToken(MySqlParser.REPLICATE_IGNORE_DB, 0);
	};

	REPLICATE_IGNORE_TABLE() {
	    return this.getToken(MySqlParser.REPLICATE_IGNORE_TABLE, 0);
	};

	REPLICATE_REWRITE_DB() {
	    return this.getToken(MySqlParser.REPLICATE_REWRITE_DB, 0);
	};

	REPLICATE_WILD_DO_TABLE() {
	    return this.getToken(MySqlParser.REPLICATE_WILD_DO_TABLE, 0);
	};

	REPLICATE_WILD_IGNORE_TABLE() {
	    return this.getToken(MySqlParser.REPLICATE_WILD_IGNORE_TABLE, 0);
	};

	REPLICATION() {
	    return this.getToken(MySqlParser.REPLICATION, 0);
	};

	RESET() {
	    return this.getToken(MySqlParser.RESET, 0);
	};

	RESUME() {
	    return this.getToken(MySqlParser.RESUME, 0);
	};

	RETURNS() {
	    return this.getToken(MySqlParser.RETURNS, 0);
	};

	ROLLBACK() {
	    return this.getToken(MySqlParser.ROLLBACK, 0);
	};

	ROLLUP() {
	    return this.getToken(MySqlParser.ROLLUP, 0);
	};

	ROTATE() {
	    return this.getToken(MySqlParser.ROTATE, 0);
	};

	ROW() {
	    return this.getToken(MySqlParser.ROW, 0);
	};

	ROWS() {
	    return this.getToken(MySqlParser.ROWS, 0);
	};

	ROW_FORMAT() {
	    return this.getToken(MySqlParser.ROW_FORMAT, 0);
	};

	SAVEPOINT() {
	    return this.getToken(MySqlParser.SAVEPOINT, 0);
	};

	SCHEDULE() {
	    return this.getToken(MySqlParser.SCHEDULE, 0);
	};

	SECURITY() {
	    return this.getToken(MySqlParser.SECURITY, 0);
	};

	SERIAL() {
	    return this.getToken(MySqlParser.SERIAL, 0);
	};

	SERVER() {
	    return this.getToken(MySqlParser.SERVER, 0);
	};

	SESSION() {
	    return this.getToken(MySqlParser.SESSION, 0);
	};

	SHARE() {
	    return this.getToken(MySqlParser.SHARE, 0);
	};

	SHARED() {
	    return this.getToken(MySqlParser.SHARED, 0);
	};

	SIGNED() {
	    return this.getToken(MySqlParser.SIGNED, 0);
	};

	SIMPLE() {
	    return this.getToken(MySqlParser.SIMPLE, 0);
	};

	SLAVE() {
	    return this.getToken(MySqlParser.SLAVE, 0);
	};

	SLOW() {
	    return this.getToken(MySqlParser.SLOW, 0);
	};

	SNAPSHOT() {
	    return this.getToken(MySqlParser.SNAPSHOT, 0);
	};

	SOCKET() {
	    return this.getToken(MySqlParser.SOCKET, 0);
	};

	SOME() {
	    return this.getToken(MySqlParser.SOME, 0);
	};

	SONAME() {
	    return this.getToken(MySqlParser.SONAME, 0);
	};

	SOUNDS() {
	    return this.getToken(MySqlParser.SOUNDS, 0);
	};

	SOURCE() {
	    return this.getToken(MySqlParser.SOURCE, 0);
	};

	SQL_AFTER_GTIDS() {
	    return this.getToken(MySqlParser.SQL_AFTER_GTIDS, 0);
	};

	SQL_AFTER_MTS_GAPS() {
	    return this.getToken(MySqlParser.SQL_AFTER_MTS_GAPS, 0);
	};

	SQL_BEFORE_GTIDS() {
	    return this.getToken(MySqlParser.SQL_BEFORE_GTIDS, 0);
	};

	SQL_BUFFER_RESULT() {
	    return this.getToken(MySqlParser.SQL_BUFFER_RESULT, 0);
	};

	SQL_CACHE() {
	    return this.getToken(MySqlParser.SQL_CACHE, 0);
	};

	SQL_NO_CACHE() {
	    return this.getToken(MySqlParser.SQL_NO_CACHE, 0);
	};

	SQL_THREAD() {
	    return this.getToken(MySqlParser.SQL_THREAD, 0);
	};

	START() {
	    return this.getToken(MySqlParser.START, 0);
	};

	STARTS() {
	    return this.getToken(MySqlParser.STARTS, 0);
	};

	STATS_AUTO_RECALC() {
	    return this.getToken(MySqlParser.STATS_AUTO_RECALC, 0);
	};

	STATS_PERSISTENT() {
	    return this.getToken(MySqlParser.STATS_PERSISTENT, 0);
	};

	STATS_SAMPLE_PAGES() {
	    return this.getToken(MySqlParser.STATS_SAMPLE_PAGES, 0);
	};

	STATUS() {
	    return this.getToken(MySqlParser.STATUS, 0);
	};

	STOP() {
	    return this.getToken(MySqlParser.STOP, 0);
	};

	STORAGE() {
	    return this.getToken(MySqlParser.STORAGE, 0);
	};

	STRING() {
	    return this.getToken(MySqlParser.STRING, 0);
	};

	SUBJECT() {
	    return this.getToken(MySqlParser.SUBJECT, 0);
	};

	SUBPARTITION() {
	    return this.getToken(MySqlParser.SUBPARTITION, 0);
	};

	SUBPARTITIONS() {
	    return this.getToken(MySqlParser.SUBPARTITIONS, 0);
	};

	SUSPEND() {
	    return this.getToken(MySqlParser.SUSPEND, 0);
	};

	SWAPS() {
	    return this.getToken(MySqlParser.SWAPS, 0);
	};

	SWITCHES() {
	    return this.getToken(MySqlParser.SWITCHES, 0);
	};

	TABLESPACE() {
	    return this.getToken(MySqlParser.TABLESPACE, 0);
	};

	TEMPORARY() {
	    return this.getToken(MySqlParser.TEMPORARY, 0);
	};

	TEMPTABLE() {
	    return this.getToken(MySqlParser.TEMPTABLE, 0);
	};

	THAN() {
	    return this.getToken(MySqlParser.THAN, 0);
	};

	TRADITIONAL() {
	    return this.getToken(MySqlParser.TRADITIONAL, 0);
	};

	TRANSACTION() {
	    return this.getToken(MySqlParser.TRANSACTION, 0);
	};

	TRIGGERS() {
	    return this.getToken(MySqlParser.TRIGGERS, 0);
	};

	TRUNCATE() {
	    return this.getToken(MySqlParser.TRUNCATE, 0);
	};

	UNDEFINED() {
	    return this.getToken(MySqlParser.UNDEFINED, 0);
	};

	UNDOFILE() {
	    return this.getToken(MySqlParser.UNDOFILE, 0);
	};

	UNDO_BUFFER_SIZE() {
	    return this.getToken(MySqlParser.UNDO_BUFFER_SIZE, 0);
	};

	UNINSTALL() {
	    return this.getToken(MySqlParser.UNINSTALL, 0);
	};

	UNKNOWN() {
	    return this.getToken(MySqlParser.UNKNOWN, 0);
	};

	UNTIL() {
	    return this.getToken(MySqlParser.UNTIL, 0);
	};

	UPGRADE() {
	    return this.getToken(MySqlParser.UPGRADE, 0);
	};

	USER() {
	    return this.getToken(MySqlParser.USER, 0);
	};

	USE_FRM() {
	    return this.getToken(MySqlParser.USE_FRM, 0);
	};

	USER_RESOURCES() {
	    return this.getToken(MySqlParser.USER_RESOURCES, 0);
	};

	VALIDATION() {
	    return this.getToken(MySqlParser.VALIDATION, 0);
	};

	VALUE() {
	    return this.getToken(MySqlParser.VALUE, 0);
	};

	VARIABLES() {
	    return this.getToken(MySqlParser.VARIABLES, 0);
	};

	VIEW() {
	    return this.getToken(MySqlParser.VIEW, 0);
	};

	WAIT() {
	    return this.getToken(MySqlParser.WAIT, 0);
	};

	WARNINGS() {
	    return this.getToken(MySqlParser.WARNINGS, 0);
	};

	WITHOUT() {
	    return this.getToken(MySqlParser.WITHOUT, 0);
	};

	WORK() {
	    return this.getToken(MySqlParser.WORK, 0);
	};

	WRAPPER() {
	    return this.getToken(MySqlParser.WRAPPER, 0);
	};

	X509() {
	    return this.getToken(MySqlParser.X509, 0);
	};

	XA() {
	    return this.getToken(MySqlParser.XA, 0);
	};

	XML() {
	    return this.getToken(MySqlParser.XML, 0);
	};

	keywordsCanBeIdMysql() {
	    return this.getTypedRuleContext(KeywordsCanBeIdMysqlContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterKeywordsCanBeId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitKeywordsCanBeId(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitKeywordsCanBeId(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class KeywordsCanBeIdMysqlContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_keywordsCanBeIdMysql;
    }

	EXTENDED() {
	    return this.getToken(MySqlParser.EXTENDED, 0);
	};

	FUNCTION() {
	    return this.getToken(MySqlParser.FUNCTION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterKeywordsCanBeIdMysql(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitKeywordsCanBeIdMysql(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitKeywordsCanBeIdMysql(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InceptorKeywordCanBeIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_inceptorKeywordCanBeId;
    }

	ADMIN() {
	    return this.getToken(MySqlParser.ADMIN, 0);
	};

	ANALYZER() {
	    return this.getToken(MySqlParser.ANALYZER, 0);
	};

	APP() {
	    return this.getToken(MySqlParser.APP, 0);
	};

	APPS() {
	    return this.getToken(MySqlParser.APPS, 0);
	};

	APPLICATION() {
	    return this.getToken(MySqlParser.APPLICATION, 0);
	};

	APPLICATIONS() {
	    return this.getToken(MySqlParser.APPLICATIONS, 0);
	};

	BUCKETS() {
	    return this.getToken(MySqlParser.BUCKETS, 0);
	};

	CAPACITY() {
	    return this.getToken(MySqlParser.CAPACITY, 0);
	};

	CLUSTER() {
	    return this.getToken(MySqlParser.CLUSTER, 0);
	};

	CLUSTERED() {
	    return this.getToken(MySqlParser.CLUSTERED, 0);
	};

	COLLECTION() {
	    return this.getToken(MySqlParser.COLLECTION, 0);
	};

	CONCATENATE() {
	    return this.getToken(MySqlParser.CONCATENATE, 0);
	};

	CONNECT() {
	    return this.getToken(MySqlParser.CONNECT, 0);
	};

	CONF() {
	    return this.getToken(MySqlParser.CONF, 0);
	};

	DBPROPERTIES() {
	    return this.getToken(MySqlParser.DBPROPERTIES, 0);
	};

	DB2() {
	    return this.getToken(MySqlParser.DB2, 0);
	};

	DEFAULT() {
	    return this.getToken(MySqlParser.DEFAULT, 0);
	};

	DELIMITED() {
	    return this.getToken(MySqlParser.DELIMITED, 0);
	};

	DIRECTORIES() {
	    return this.getToken(MySqlParser.DIRECTORIES, 0);
	};

	DISTRIBUTE() {
	    return this.getToken(MySqlParser.DISTRIBUTE, 0);
	};

	EXTERNAL() {
	    return this.getToken(MySqlParser.EXTERNAL, 0);
	};

	FILEFORMAT() {
	    return this.getToken(MySqlParser.FILEFORMAT, 0);
	};

	FORMATTED() {
	    return this.getToken(MySqlParser.FORMATTED, 0);
	};

	FUNCTIONS() {
	    return this.getToken(MySqlParser.FUNCTIONS, 0);
	};

	GROUPING() {
	    return this.getToken(MySqlParser.GROUPING, 0);
	};

	INCEPTOR() {
	    return this.getToken(MySqlParser.INCEPTOR, 0);
	};

	INNER() {
	    return this.getToken(MySqlParser.INNER, 0);
	};

	INPUTDRIVER() {
	    return this.getToken(MySqlParser.INPUTDRIVER, 0);
	};

	INPUTFORMAT() {
	    return this.getToken(MySqlParser.INPUTFORMAT, 0);
	};

	ITEMS() {
	    return this.getToken(MySqlParser.ITEMS, 0);
	};

	JAR() {
	    return this.getToken(MySqlParser.JAR, 0);
	};

	JARS() {
	    return this.getToken(MySqlParser.JARS, 0);
	};

	KEY() {
	    return this.getToken(MySqlParser.KEY, 0);
	};

	LINK() {
	    return this.getToken(MySqlParser.LINK, 0);
	};

	LINKS() {
	    return this.getToken(MySqlParser.LINKS, 0);
	};

	LOCATION() {
	    return this.getToken(MySqlParser.LOCATION, 0);
	};

	LOCKS() {
	    return this.getToken(MySqlParser.LOCKS, 0);
	};

	MATERIALIZED() {
	    return this.getToken(MySqlParser.MATERIALIZED, 0);
	};

	NOCYCLE() {
	    return this.getToken(MySqlParser.NOCYCLE, 0);
	};

	NORELY() {
	    return this.getToken(MySqlParser.NORELY, 0);
	};

	NONSTRICT() {
	    return this.getToken(MySqlParser.NONSTRICT, 0);
	};

	NOVALIDATE() {
	    return this.getToken(MySqlParser.NOVALIDATE, 0);
	};

	NO_DROP() {
	    return this.getToken(MySqlParser.NO_DROP, 0);
	};

	NO_INDEX() {
	    return this.getToken(MySqlParser.NO_INDEX, 0);
	};

	ORACLE() {
	    return this.getToken(MySqlParser.ORACLE, 0);
	};

	OUTER() {
	    return this.getToken(MySqlParser.OUTER, 0);
	};

	OUTPUTDRIVER() {
	    return this.getToken(MySqlParser.OUTPUTDRIVER, 0);
	};

	OUTPUTFORMAT() {
	    return this.getToken(MySqlParser.OUTPUTFORMAT, 0);
	};

	OVERWRITE() {
	    return this.getToken(MySqlParser.OVERWRITE, 0);
	};

	PACKAGE() {
	    return this.getToken(MySqlParser.PACKAGE, 0);
	};

	PACKAGES() {
	    return this.getToken(MySqlParser.PACKAGES, 0);
	};

	PARTITIONED() {
	    return this.getToken(MySqlParser.PARTITIONED, 0);
	};

	PERCENT() {
	    return this.getToken(MySqlParser.PERCENT, 0);
	};

	PERMANENT() {
	    return this.getToken(MySqlParser.PERMANENT, 0);
	};

	PLSQL() {
	    return this.getToken(MySqlParser.PLSQL, 0);
	};

	PRETTY() {
	    return this.getToken(MySqlParser.PRETTY, 0);
	};

	POLICY() {
	    return this.getToken(MySqlParser.POLICY, 0);
	};

	POLICIES() {
	    return this.getToken(MySqlParser.POLICIES, 0);
	};

	PRIOR() {
	    return this.getToken(MySqlParser.PRIOR, 0);
	};

	PROTECTION() {
	    return this.getToken(MySqlParser.PROTECTION, 0);
	};

	READONLY() {
	    return this.getToken(MySqlParser.READONLY, 0);
	};

	RELY() {
	    return this.getToken(MySqlParser.RELY, 0);
	};

	RULE() {
	    return this.getToken(MySqlParser.RULE, 0);
	};

	RULEBASE() {
	    return this.getToken(MySqlParser.RULEBASE, 0);
	};

	RULEBASES() {
	    return this.getToken(MySqlParser.RULEBASES, 0);
	};

	RULES() {
	    return this.getToken(MySqlParser.RULES, 0);
	};

	ROLE() {
	    return this.getToken(MySqlParser.ROLE, 0);
	};

	SEMI2() {
	    return this.getToken(MySqlParser.SEMI2, 0);
	};

	SEQUENCES() {
	    return this.getToken(MySqlParser.SEQUENCES, 0);
	};

	SERDE() {
	    return this.getToken(MySqlParser.SERDE, 0);
	};

	SERDEPROPERTIES() {
	    return this.getToken(MySqlParser.SERDEPROPERTIES, 0);
	};

	SETS() {
	    return this.getToken(MySqlParser.SETS, 0);
	};

	SHARD() {
	    return this.getToken(MySqlParser.SHARD, 0);
	};

	SKEWED() {
	    return this.getToken(MySqlParser.SKEWED, 0);
	};

	SORT() {
	    return this.getToken(MySqlParser.SORT, 0);
	};

	SORTED() {
	    return this.getToken(MySqlParser.SORTED, 0);
	};

	STATISTICS() {
	    return this.getToken(MySqlParser.STATISTICS, 0);
	};

	STREAMJOB() {
	    return this.getToken(MySqlParser.STREAMJOB, 0);
	};

	STREAMJOBS() {
	    return this.getToken(MySqlParser.STREAMJOBS, 0);
	};

	TABLESIZE() {
	    return this.getToken(MySqlParser.TABLESIZE, 0);
	};

	TABLET() {
	    return this.getToken(MySqlParser.TABLET, 0);
	};

	TBLPROPERTIES() {
	    return this.getToken(MySqlParser.TBLPROPERTIES, 0);
	};

	TD() {
	    return this.getToken(MySqlParser.TD, 0);
	};

	TOUCH() {
	    return this.getToken(MySqlParser.TOUCH, 0);
	};

	TRANSACTIONS() {
	    return this.getToken(MySqlParser.TRANSACTIONS, 0);
	};

	TYPE() {
	    return this.getToken(MySqlParser.TYPE, 0);
	};

	UNARCHIVE() {
	    return this.getToken(MySqlParser.UNARCHIVE, 0);
	};

	UNSET() {
	    return this.getToken(MySqlParser.UNSET, 0);
	};

	VALIDATE() {
	    return this.getToken(MySqlParser.VALIDATE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterInceptorKeywordCanBeId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitInceptorKeywordCanBeId(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitInceptorKeywordCanBeId(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FileFormatCanBeIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_fileFormatCanBeId;
    }

	fileFormatEnum() {
	    return this.getTypedRuleContext(FileFormatEnumContext,0);
	};

	STARGATE() {
	    return this.getToken(MySqlParser.STARGATE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterFileFormatCanBeId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitFileFormatCanBeId(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitFileFormatCanBeId(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FunctionNameBaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_functionNameBase;
    }

	ARRAY() {
	    return this.getToken(MySqlParser.ARRAY, 0);
	};

	AVG() {
	    return this.getToken(MySqlParser.AVG, 0);
	};

	BETWEEN() {
	    return this.getToken(MySqlParser.BETWEEN, 0);
	};

	BINARY() {
	    return this.getToken(MySqlParser.BINARY, 0);
	};

	CASE() {
	    return this.getToken(MySqlParser.CASE, 0);
	};

	CHAR() {
	    return this.getToken(MySqlParser.CHAR, 0);
	};

	CHARSET() {
	    return this.getToken(MySqlParser.CHARSET, 0);
	};

	COLLATION() {
	    return this.getToken(MySqlParser.COLLATION, 0);
	};

	COUNT() {
	    return this.getToken(MySqlParser.COUNT, 0);
	};

	CURRENT_DATE() {
	    return this.getToken(MySqlParser.CURRENT_DATE, 0);
	};

	CURRENT_TIME() {
	    return this.getToken(MySqlParser.CURRENT_TIME, 0);
	};

	CURRENT_TIMESTAMP() {
	    return this.getToken(MySqlParser.CURRENT_TIMESTAMP, 0);
	};

	CURRENT_USER() {
	    return this.getToken(MySqlParser.CURRENT_USER, 0);
	};

	DATE() {
	    return this.getToken(MySqlParser.DATE, 0);
	};

	DATE_ADD() {
	    return this.getToken(MySqlParser.DATE_ADD, 0);
	};

	DATE_SUB() {
	    return this.getToken(MySqlParser.DATE_SUB, 0);
	};

	DAY() {
	    return this.getToken(MySqlParser.DAY, 0);
	};

	DECIMAL() {
	    return this.getToken(MySqlParser.DECIMAL, 0);
	};

	DENSE_RANK() {
	    return this.getToken(MySqlParser.DENSE_RANK, 0);
	};

	DIV() {
	    return this.getToken(MySqlParser.DIV, 0);
	};

	EXISTS() {
	    return this.getToken(MySqlParser.EXISTS, 0);
	};

	EXTRACT() {
	    return this.getToken(MySqlParser.EXTRACT, 0);
	};

	FORMAT() {
	    return this.getToken(MySqlParser.FORMAT, 0);
	};

	GEOMETRYCOLLECTION() {
	    return this.getToken(MySqlParser.GEOMETRYCOLLECTION, 0);
	};

	GET_FORMAT() {
	    return this.getToken(MySqlParser.GET_FORMAT, 0);
	};

	GROUP_CONCAT() {
	    return this.getToken(MySqlParser.GROUP_CONCAT, 0);
	};

	HOUR() {
	    return this.getToken(MySqlParser.HOUR, 0);
	};

	IF() {
	    return this.getToken(MySqlParser.IF, 0);
	};

	IN() {
	    return this.getToken(MySqlParser.IN, 0);
	};

	INDEX() {
	    return this.getToken(MySqlParser.INDEX, 0);
	};

	INLINE() {
	    return this.getToken(MySqlParser.INLINE, 0);
	};

	LEFT() {
	    return this.getToken(MySqlParser.LEFT, 0);
	};

	LIKE() {
	    return this.getToken(MySqlParser.LIKE, 0);
	};

	LINESTRING() {
	    return this.getToken(MySqlParser.LINESTRING, 0);
	};

	LOCALTIME() {
	    return this.getToken(MySqlParser.LOCALTIME, 0);
	};

	LOG() {
	    return this.getToken(MySqlParser.LOG, 0);
	};

	MAP() {
	    return this.getToken(MySqlParser.MAP, 0);
	};

	MAX() {
	    return this.getToken(MySqlParser.MAX, 0);
	};

	MICROSECOND() {
	    return this.getToken(MySqlParser.MICROSECOND, 0);
	};

	MIN() {
	    return this.getToken(MySqlParser.MIN, 0);
	};

	MINUTE() {
	    return this.getToken(MySqlParser.MINUTE, 0);
	};

	MOD() {
	    return this.getToken(MySqlParser.MOD, 0);
	};

	MONTH() {
	    return this.getToken(MySqlParser.MONTH, 0);
	};

	MULTILINESTRING() {
	    return this.getToken(MySqlParser.MULTILINESTRING, 0);
	};

	MULTIPOINT() {
	    return this.getToken(MySqlParser.MULTIPOINT, 0);
	};

	MULTIPOLYGON() {
	    return this.getToken(MySqlParser.MULTIPOLYGON, 0);
	};

	POINT() {
	    return this.getToken(MySqlParser.POINT, 0);
	};

	POLYGON() {
	    return this.getToken(MySqlParser.POLYGON, 0);
	};

	POSITION() {
	    return this.getToken(MySqlParser.POSITION, 0);
	};

	QUARTER() {
	    return this.getToken(MySqlParser.QUARTER, 0);
	};

	REGEXP() {
	    return this.getToken(MySqlParser.REGEXP, 0);
	};

	REPEAT() {
	    return this.getToken(MySqlParser.REPEAT, 0);
	};

	REPLACE() {
	    return this.getToken(MySqlParser.REPLACE, 0);
	};

	REVERSE() {
	    return this.getToken(MySqlParser.REVERSE, 0);
	};

	RIGHT() {
	    return this.getToken(MySqlParser.RIGHT, 0);
	};

	RLIKE() {
	    return this.getToken(MySqlParser.RLIKE, 0);
	};

	SECOND() {
	    return this.getToken(MySqlParser.SECOND, 0);
	};

	SPACE2() {
	    return this.getToken(MySqlParser.SPACE2, 0);
	};

	STD() {
	    return this.getToken(MySqlParser.STD, 0);
	};

	STDDEV() {
	    return this.getToken(MySqlParser.STDDEV, 0);
	};

	STDDEV_SAMP() {
	    return this.getToken(MySqlParser.STDDEV_SAMP, 0);
	};

	STDDEV_POP() {
	    return this.getToken(MySqlParser.STDDEV_POP, 0);
	};

	STRUCT() {
	    return this.getToken(MySqlParser.STRUCT, 0);
	};

	SUBSTR() {
	    return this.getToken(MySqlParser.SUBSTR, 0);
	};

	SUBSTRING() {
	    return this.getToken(MySqlParser.SUBSTRING, 0);
	};

	SUM() {
	    return this.getToken(MySqlParser.SUM, 0);
	};

	SYSDATE() {
	    return this.getToken(MySqlParser.SYSDATE, 0);
	};

	SYSTIMESTAMP() {
	    return this.getToken(MySqlParser.SYSTIMESTAMP, 0);
	};

	TIME() {
	    return this.getToken(MySqlParser.TIME, 0);
	};

	TIMESTAMP() {
	    return this.getToken(MySqlParser.TIMESTAMP, 0);
	};

	TRIM() {
	    return this.getToken(MySqlParser.TRIM, 0);
	};

	UNIONTYPE() {
	    return this.getToken(MySqlParser.UNIONTYPE, 0);
	};

	VARCHAR() {
	    return this.getToken(MySqlParser.VARCHAR, 0);
	};

	VARCHAR2() {
	    return this.getToken(MySqlParser.VARCHAR2, 0);
	};

	VARIANCE() {
	    return this.getToken(MySqlParser.VARIANCE, 0);
	};

	VAR_POP() {
	    return this.getToken(MySqlParser.VAR_POP, 0);
	};

	VAR_SAMP() {
	    return this.getToken(MySqlParser.VAR_SAMP, 0);
	};

	WEEK() {
	    return this.getToken(MySqlParser.WEEK, 0);
	};

	WEIGHT_STRING() {
	    return this.getToken(MySqlParser.WEIGHT_STRING, 0);
	};

	WHEN() {
	    return this.getToken(MySqlParser.WHEN, 0);
	};

	YEAR() {
	    return this.getToken(MySqlParser.YEAR, 0);
	};

	functionNameBaseMysql() {
	    return this.getTypedRuleContext(FunctionNameBaseMysqlContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterFunctionNameBase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitFunctionNameBase(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitFunctionNameBase(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FunctionNameBaseMysqlContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_functionNameBaseMysql;
    }

	DATABASE() {
	    return this.getToken(MySqlParser.DATABASE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterFunctionNameBaseMysql(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitFunctionNameBaseMysql(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitFunctionNameBaseMysql(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FunctionNameBaseExtraContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_functionNameBaseExtra;
    }

	AND() {
	    return this.getToken(MySqlParser.AND, 0);
	};

	NOT() {
	    return this.getToken(MySqlParser.NOT, 0);
	};

	OR() {
	    return this.getToken(MySqlParser.OR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterFunctionNameBaseExtra(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitFunctionNameBaseExtra(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitFunctionNameBaseExtra(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DatabaseNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_databaseName;
    }

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	emptyElement() {
	    return this.getTypedRuleContext(EmptyElementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDatabaseName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDatabaseName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitDatabaseName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DatabaseNameAllowEmptyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_databaseNameAllowEmpty;
    }

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	emptyElement() {
	    return this.getTypedRuleContext(EmptyElementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDatabaseNameAllowEmpty(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDatabaseNameAllowEmpty(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitDatabaseNameAllowEmpty(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BaseElementAliasContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_baseElementAlias;
    }

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	AS() {
	    return this.getToken(MySqlParser.AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterBaseElementAlias(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitBaseElementAlias(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitBaseElementAlias(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EmptyElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_emptyElement;
    }

	QUESTION_MARK() {
	    return this.getToken(MySqlParser.QUESTION_MARK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterEmptyElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitEmptyElement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitEmptyElement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PlaceholderContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_placeholder;
    }

	QUESTION_MARK() {
	    return this.getToken(MySqlParser.QUESTION_MARK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPlaceholder(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPlaceholder(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitPlaceholder(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PlsqlStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_plsqlStatement;
    }

	anonymousBlock() {
	    return this.getTypedRuleContext(AnonymousBlockContext,0);
	};

	SEMI() {
	    return this.getToken(MySqlParser.SEMI, 0);
	};

	createFunctionBody() {
	    return this.getTypedRuleContext(CreateFunctionBodyContext,0);
	};

	createProcedureBody() {
	    return this.getTypedRuleContext(CreateProcedureBodyContext,0);
	};

	createPackage() {
	    return this.getTypedRuleContext(CreatePackageContext,0);
	};

	createPackageBody() {
	    return this.getTypedRuleContext(CreatePackageBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPlsqlStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPlsqlStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitPlsqlStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AnonymousBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_anonymousBlock;
        this.level = 0
    }

	seqStatementBlock() {
	    return this.getTypedRuleContext(SeqStatementBlockContext,0);
	};

	DECLARE() {
	    return this.getToken(MySqlParser.DECLARE, 0);
	};

	declareBlock() {
	    return this.getTypedRuleContext(DeclareBlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAnonymousBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAnonymousBlock(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAnonymousBlock(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateFunctionBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_createFunctionBody;
    }

	CREATE() {
	    return this.getToken(MySqlParser.CREATE, 0);
	};

	functionBody() {
	    return this.getTypedRuleContext(FunctionBodyContext,0);
	};

	OR() {
	    return this.getToken(MySqlParser.OR, 0);
	};

	REPLACE() {
	    return this.getToken(MySqlParser.REPLACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCreateFunctionBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCreateFunctionBody(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitCreateFunctionBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FunctionBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_functionBody;
        this.newlineTokens = ['RETURN'];
        noSpaceTokens: [] = ['('];
        block: any = null;
    }

	FUNCTION() {
	    return this.getToken(MySqlParser.FUNCTION, 0);
	};

	fullId() {
	    return this.getTypedRuleContext(FullIdContext,0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	RETURN() {
	    return this.getToken(MySqlParser.RETURN, 0);
	};

	typeSpec() {
	    return this.getTypedRuleContext(TypeSpecContext,0);
	};

	isOrAs() {
	    return this.getTypedRuleContext(IsOrAsContext,0);
	};

	blockStatement2() {
	    return this.getTypedRuleContext(BlockStatement2Context,0);
	};

	parameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ParameterContext);
	    } else {
	        return this.getTypedRuleContext(ParameterContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterFunctionBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitFunctionBody(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitFunctionBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateProcedureBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_createProcedureBody;
    }

	CREATE() {
	    return this.getToken(MySqlParser.CREATE, 0);
	};

	procedureBody() {
	    return this.getTypedRuleContext(ProcedureBodyContext,0);
	};

	OR() {
	    return this.getToken(MySqlParser.OR, 0);
	};

	REPLACE() {
	    return this.getToken(MySqlParser.REPLACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCreateProcedureBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCreateProcedureBody(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitCreateProcedureBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ProcedureBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_procedureBody;
        this.noSpaceTokens = ['(']
    }

	PROCEDURE() {
	    return this.getToken(MySqlParser.PROCEDURE, 0);
	};

	fullId() {
	    return this.getTypedRuleContext(FullIdContext,0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	isOrAs() {
	    return this.getTypedRuleContext(IsOrAsContext,0);
	};

	blockStatement2() {
	    return this.getTypedRuleContext(BlockStatement2Context,0);
	};

	parameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ParameterContext);
	    } else {
	        return this.getTypedRuleContext(ParameterContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterProcedureBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitProcedureBody(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitProcedureBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropPackageContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_dropPackage;
    }

	DROP() {
	    return this.getToken(MySqlParser.DROP, 0);
	};

	PACKAGE() {
	    return this.getToken(MySqlParser.PACKAGE, 0);
	};

	packName() {
	    return this.getTypedRuleContext(PackNameContext,0);
	};

	PLSQL() {
	    return this.getToken(MySqlParser.PLSQL, 0);
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDropPackage(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDropPackage(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitDropPackage(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreatePackageContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_createPackage;
        this.newlineTokens = ['DECLARE', 'END']
    }

	CREATE() {
	    return this.getToken(MySqlParser.CREATE, 0);
	};

	PACKAGE() {
	    return this.getToken(MySqlParser.PACKAGE, 0);
	};

	fullId() {
	    return this.getTypedRuleContext(FullIdContext,0);
	};

	isOrAs() {
	    return this.getTypedRuleContext(IsOrAsContext,0);
	};

	END() {
	    return this.getToken(MySqlParser.END, 0);
	};

	OR() {
	    return this.getToken(MySqlParser.OR, 0);
	};

	REPLACE() {
	    return this.getToken(MySqlParser.REPLACE, 0);
	};

	DECLARE() {
	    return this.getToken(MySqlParser.DECLARE, 0);
	};

	packageObjSpecs() {
	    return this.getTypedRuleContext(PackageObjSpecsContext,0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCreatePackage(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCreatePackage(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitCreatePackage(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreatePackageBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_createPackageBody;
        this.newlineTokens = ['DECLARE', 'END']
    }

	CREATE() {
	    return this.getToken(MySqlParser.CREATE, 0);
	};

	PACKAGE() {
	    return this.getToken(MySqlParser.PACKAGE, 0);
	};

	BODY() {
	    return this.getToken(MySqlParser.BODY, 0);
	};

	fullId() {
	    return this.getTypedRuleContext(FullIdContext,0);
	};

	isOrAs() {
	    return this.getTypedRuleContext(IsOrAsContext,0);
	};

	END() {
	    return this.getToken(MySqlParser.END, 0);
	};

	OR() {
	    return this.getToken(MySqlParser.OR, 0);
	};

	REPLACE() {
	    return this.getToken(MySqlParser.REPLACE, 0);
	};

	DECLARE() {
	    return this.getToken(MySqlParser.DECLARE, 0);
	};

	packageObjBodys() {
	    return this.getTypedRuleContext(PackageObjBodysContext,0);
	};

	packageBodyBlock() {
	    return this.getTypedRuleContext(PackageBodyBlockContext,0);
	};

	labelName() {
	    return this.getTypedRuleContext(LabelNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCreatePackageBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCreatePackageBody(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitCreatePackageBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IsOrAsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_isOrAs;
        this.level = 0
    }

	IS() {
	    return this.getToken(MySqlParser.IS, 0);
	};

	AS() {
	    return this.getToken(MySqlParser.AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterIsOrAs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitIsOrAs(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitIsOrAs(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PackageObjSpecsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_packageObjSpecs;
        this.level = 2
    }

	packageObjSpec = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PackageObjSpecContext);
	    } else {
	        return this.getTypedRuleContext(PackageObjSpecContext,i);
	    }
	};

	SEMI = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.SEMI);
	    } else {
	        return this.getToken(MySqlParser.SEMI, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPackageObjSpecs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPackageObjSpecs(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitPackageObjSpecs(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PackageObjBodysContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_packageObjBodys;
        this.level = 2
    }

	packageObjBody = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PackageObjBodyContext);
	    } else {
	        return this.getTypedRuleContext(PackageObjBodyContext,i);
	    }
	};

	SEMI = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.SEMI);
	    } else {
	        return this.getToken(MySqlParser.SEMI, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPackageObjBodys(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPackageObjBodys(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitPackageObjBodys(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PackageObjSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_packageObjSpec;
        this.level = 0
    }

	pragmaDeclaration() {
	    return this.getTypedRuleContext(PragmaDeclarationContext,0);
	};

	variableDeclaration() {
	    return this.getTypedRuleContext(VariableDeclarationContext,0);
	};

	cursorDeclaration() {
	    return this.getTypedRuleContext(CursorDeclarationContext,0);
	};

	exceptionDeclaration() {
	    return this.getTypedRuleContext(ExceptionDeclarationContext,0);
	};

	typeDeclaration() {
	    return this.getTypedRuleContext(TypeDeclarationContext,0);
	};

	procedureSpec() {
	    return this.getTypedRuleContext(ProcedureSpecContext,0);
	};

	functionSpec() {
	    return this.getTypedRuleContext(FunctionSpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPackageObjSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPackageObjSpec(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitPackageObjSpec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PackageObjBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_packageObjBody;
        this.level = 0
    }

	pragmaDeclaration() {
	    return this.getTypedRuleContext(PragmaDeclarationContext,0);
	};

	variableDeclaration() {
	    return this.getTypedRuleContext(VariableDeclarationContext,0);
	};

	cursorDeclaration() {
	    return this.getTypedRuleContext(CursorDeclarationContext,0);
	};

	exceptionDeclaration() {
	    return this.getTypedRuleContext(ExceptionDeclarationContext,0);
	};

	typeDeclaration() {
	    return this.getTypedRuleContext(TypeDeclarationContext,0);
	};

	procedureBody() {
	    return this.getTypedRuleContext(ProcedureBodyContext,0);
	};

	functionBody() {
	    return this.getTypedRuleContext(FunctionBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPackageObjBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPackageObjBody(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitPackageObjBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ProcedureSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_procedureSpec;
    }

	PROCEDURE() {
	    return this.getToken(MySqlParser.PROCEDURE, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	parameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ParameterContext);
	    } else {
	        return this.getTypedRuleContext(ParameterContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterProcedureSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitProcedureSpec(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitProcedureSpec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FunctionSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_functionSpec;
    }

	FUNCTION() {
	    return this.getToken(MySqlParser.FUNCTION, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	RETURN() {
	    return this.getToken(MySqlParser.RETURN, 0);
	};

	typeSpec() {
	    return this.getTypedRuleContext(TypeSpecContext,0);
	};

	parameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ParameterContext);
	    } else {
	        return this.getTypedRuleContext(ParameterContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterFunctionSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitFunctionSpec(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitFunctionSpec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DeclareSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_declareSpec;
        this.level = 0
    }

	pragmaDeclaration() {
	    return this.getTypedRuleContext(PragmaDeclarationContext,0);
	};

	variableDeclaration() {
	    return this.getTypedRuleContext(VariableDeclarationContext,0);
	};

	cursorDeclaration() {
	    return this.getTypedRuleContext(CursorDeclarationContext,0);
	};

	exceptionDeclaration() {
	    return this.getTypedRuleContext(ExceptionDeclarationContext,0);
	};

	typeDeclaration() {
	    return this.getTypedRuleContext(TypeDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDeclareSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDeclareSpec(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitDeclareSpec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VariableDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_variableDeclaration;
    }

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	typeSpec() {
	    return this.getTypedRuleContext(TypeSpecContext,0);
	};

	CONSTANT() {
	    return this.getToken(MySqlParser.CONSTANT, 0);
	};

	NOT() {
	    return this.getToken(MySqlParser.NOT, 0);
	};

	NULL_LITERAL() {
	    return this.getToken(MySqlParser.NULL_LITERAL, 0);
	};

	defaultValuePart() {
	    return this.getTypedRuleContext(DefaultValuePartContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterVariableDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitVariableDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitVariableDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CursorDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_cursorDeclaration;
        this.noSpaceTokens = ['(']
    }

	CURSOR() {
	    return this.getToken(MySqlParser.CURSOR, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	cursorParameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CursorParameterContext);
	    } else {
	        return this.getTypedRuleContext(CursorParameterContext,i);
	    }
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	RETURN() {
	    return this.getToken(MySqlParser.RETURN, 0);
	};

	typeSpec() {
	    return this.getTypedRuleContext(TypeSpecContext,0);
	};

	IS() {
	    return this.getToken(MySqlParser.IS, 0);
	};

	selectStatement() {
	    return this.getTypedRuleContext(SelectStatementContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCursorDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCursorDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitCursorDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CursorParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_cursorParameter;
    }

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	typeSpec() {
	    return this.getTypedRuleContext(TypeSpecContext,0);
	};

	defaultValuePart() {
	    return this.getTypedRuleContext(DefaultValuePartContext,0);
	};

	IN() {
	    return this.getToken(MySqlParser.IN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCursorParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCursorParameter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitCursorParameter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExceptionDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_exceptionDeclaration;
    }

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	EXCEPTION() {
	    return this.getToken(MySqlParser.EXCEPTION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterExceptionDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitExceptionDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitExceptionDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PragmaDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_pragmaDeclaration;
    }

	PRAGMA() {
	    return this.getToken(MySqlParser.PRAGMA, 0);
	};

	SERIALLY_REUSABLE() {
	    return this.getToken(MySqlParser.SERIALLY_REUSABLE, 0);
	};

	AUTONOMOUS_TRANSACTION() {
	    return this.getToken(MySqlParser.AUTONOMOUS_TRANSACTION, 0);
	};

	EXCEPTION_INIT() {
	    return this.getToken(MySqlParser.EXCEPTION_INIT, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	exceptionName() {
	    return this.getTypedRuleContext(ExceptionNameContext,0);
	};

	COMMA() {
	    return this.getToken(MySqlParser.COMMA, 0);
	};

	numericNegative() {
	    return this.getTypedRuleContext(NumericNegativeContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPragmaDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPragmaDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitPragmaDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RecordTypeDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_recordTypeDef;
    }

	RECORD() {
	    return this.getToken(MySqlParser.RECORD, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	fieldSpec = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FieldSpecContext);
	    } else {
	        return this.getTypedRuleContext(FieldSpecContext,i);
	    }
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterRecordTypeDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitRecordTypeDef(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitRecordTypeDef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FieldSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_fieldSpec;
    }

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	typeSpec() {
	    return this.getTypedRuleContext(TypeSpecContext,0);
	};

	NOT() {
	    return this.getToken(MySqlParser.NOT, 0);
	};

	NULL_LITERAL() {
	    return this.getToken(MySqlParser.NULL_LITERAL, 0);
	};

	defaultValuePart() {
	    return this.getTypedRuleContext(DefaultValuePartContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterFieldSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitFieldSpec(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitFieldSpec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RefCursorTypeDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_refCursorTypeDef;
    }

	REF() {
	    return this.getToken(MySqlParser.REF, 0);
	};

	CURSOR() {
	    return this.getToken(MySqlParser.CURSOR, 0);
	};

	RETURN() {
	    return this.getToken(MySqlParser.RETURN, 0);
	};

	typeSpec() {
	    return this.getTypedRuleContext(TypeSpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterRefCursorTypeDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitRefCursorTypeDef(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitRefCursorTypeDef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_typeDeclaration;
    }

	TYPE() {
	    return this.getToken(MySqlParser.TYPE, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	IS() {
	    return this.getToken(MySqlParser.IS, 0);
	};

	tableTypeDef() {
	    return this.getTypedRuleContext(TableTypeDefContext,0);
	};

	varrayTypeDef() {
	    return this.getTypedRuleContext(VarrayTypeDefContext,0);
	};

	recordTypeDef() {
	    return this.getTypedRuleContext(RecordTypeDefContext,0);
	};

	refCursorTypeDef() {
	    return this.getTypedRuleContext(RefCursorTypeDefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTypeDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTypeDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitTypeDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableTypeDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_tableTypeDef;
    }

	TABLE() {
	    return this.getToken(MySqlParser.TABLE, 0);
	};

	OF() {
	    return this.getToken(MySqlParser.OF, 0);
	};

	typeSpec() {
	    return this.getTypedRuleContext(TypeSpecContext,0);
	};

	tableIndexedByPart() {
	    return this.getTypedRuleContext(TableIndexedByPartContext,0);
	};

	NOT() {
	    return this.getToken(MySqlParser.NOT, 0);
	};

	NULL_LITERAL() {
	    return this.getToken(MySqlParser.NULL_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableTypeDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableTypeDef(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitTableTypeDef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableIndexedByPartContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_tableIndexedByPart;
        this.idx1 = null; // Token
        this.idx2 = null; // Token
    }

	BY() {
	    return this.getToken(MySqlParser.BY, 0);
	};

	typeSpec() {
	    return this.getTypedRuleContext(TypeSpecContext,0);
	};

	INDEXED() {
	    return this.getToken(MySqlParser.INDEXED, 0);
	};

	INDEX() {
	    return this.getToken(MySqlParser.INDEX, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableIndexedByPart(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableIndexedByPart(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitTableIndexedByPart(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VarrayTypeDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_varrayTypeDef;
    }

	VARRAY() {
	    return this.getToken(MySqlParser.VARRAY, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	OF() {
	    return this.getToken(MySqlParser.OF, 0);
	};

	typeSpec() {
	    return this.getTypedRuleContext(TypeSpecContext,0);
	};

	NOT() {
	    return this.getToken(MySqlParser.NOT, 0);
	};

	NULL_LITERAL() {
	    return this.getToken(MySqlParser.NULL_LITERAL, 0);
	};

	VARYING() {
	    return this.getToken(MySqlParser.VARYING, 0);
	};

	ARRAY() {
	    return this.getToken(MySqlParser.ARRAY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterVarrayTypeDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitVarrayTypeDef(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitVarrayTypeDef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SeqOfStatementsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_seqOfStatements;
        this.level = 0
    }

	labelOrSqlStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LabelOrSqlStatementContext);
	    } else {
	        return this.getTypedRuleContext(LabelOrSqlStatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSeqOfStatements(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSeqOfStatements(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitSeqOfStatements(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LabelOrSqlStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_labelOrSqlStatement;
        this.level = 0
    }

	procedureSqlStatement2() {
	    return this.getTypedRuleContext(ProcedureSqlStatement2Context,0);
	};

	EOF() {
	    return this.getToken(MySqlParser.EOF, 0);
	};

	SEMI() {
	    return this.getToken(MySqlParser.SEMI, 0);
	};

	labelDeclaration() {
	    return this.getTypedRuleContext(LabelDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLabelOrSqlStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLabelOrSqlStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitLabelOrSqlStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LabelDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_labelDeclaration;
        this.noSpaceTokens = ['<', '>']
        this.ltp1 = null; // Token
    }

	LESS_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.LESS_SYMBOL);
	    } else {
	        return this.getToken(MySqlParser.LESS_SYMBOL, i);
	    }
	};


	labelName() {
	    return this.getTypedRuleContext(LabelNameContext,0);
	};

	GREATER_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.GREATER_SYMBOL);
	    } else {
	        return this.getToken(MySqlParser.GREATER_SYMBOL, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLabelDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLabelDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitLabelDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ProcedureSqlStatement2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_procedureSqlStatement2;
    }

	blockStatement2() {
	    return this.getTypedRuleContext(BlockStatement2Context,0);
	};

	continueStatement() {
	    return this.getTypedRuleContext(ContinueStatementContext,0);
	};

	exitStatement() {
	    return this.getTypedRuleContext(ExitStatementContext,0);
	};

	gotoStatement() {
	    return this.getTypedRuleContext(GotoStatementContext,0);
	};

	ifStatement2() {
	    return this.getTypedRuleContext(IfStatement2Context,0);
	};

	loopStatement2() {
	    return this.getTypedRuleContext(LoopStatement2Context,0);
	};

	forallStatement() {
	    return this.getTypedRuleContext(ForallStatementContext,0);
	};

	nullStatement() {
	    return this.getTypedRuleContext(NullStatementContext,0);
	};

	raiseStatement() {
	    return this.getTypedRuleContext(RaiseStatementContext,0);
	};

	returnStatement2() {
	    return this.getTypedRuleContext(ReturnStatement2Context,0);
	};

	normalSqlStatement() {
	    return this.getTypedRuleContext(NormalSqlStatementContext,0);
	};

	assignmentStatement() {
	    return this.getTypedRuleContext(AssignmentStatementContext,0);
	};

	procedureWildcard() {
	    return this.getTypedRuleContext(ProcedureWildcardContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterProcedureSqlStatement2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitProcedureSqlStatement2(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitProcedureSqlStatement2(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AssignmentStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_assignmentStatement;
    }

	generalElement() {
	    return this.getTypedRuleContext(GeneralElementContext,0);
	};

	VAR_ASSIGN() {
	    return this.getToken(MySqlParser.VAR_ASSIGN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAssignmentStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAssignmentStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitAssignmentStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ProcedureWildcardContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_procedureWildcard;
    }

	generalElement() {
	    return this.getTypedRuleContext(GeneralElementContext,0);
	};

	CALL() {
	    return this.getToken(MySqlParser.CALL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterProcedureWildcard(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitProcedureWildcard(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitProcedureWildcard(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ContinueStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_continueStatement;
    }

	CONTINUE() {
	    return this.getToken(MySqlParser.CONTINUE, 0);
	};

	labelName() {
	    return this.getTypedRuleContext(LabelNameContext,0);
	};

	WHEN() {
	    return this.getToken(MySqlParser.WHEN, 0);
	};

	condition() {
	    return this.getTypedRuleContext(ConditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterContinueStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitContinueStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitContinueStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExitStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_exitStatement;
    }

	EXIT() {
	    return this.getToken(MySqlParser.EXIT, 0);
	};

	labelName() {
	    return this.getTypedRuleContext(LabelNameContext,0);
	};

	WHEN() {
	    return this.getToken(MySqlParser.WHEN, 0);
	};

	condition() {
	    return this.getTypedRuleContext(ConditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterExitStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitExitStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitExitStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GotoStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_gotoStatement;
    }

	GOTO() {
	    return this.getToken(MySqlParser.GOTO, 0);
	};

	labelName() {
	    return this.getTypedRuleContext(LabelNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterGotoStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitGotoStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitGotoStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IfStatement2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_ifStatement2;
        this.level = 1
              block: any = null
    }

	IF = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.IF);
	    } else {
	        return this.getToken(MySqlParser.IF, i);
	    }
	};


	condition() {
	    return this.getTypedRuleContext(ConditionContext,0);
	};

	THEN() {
	    return this.getToken(MySqlParser.THEN, 0);
	};

	seqOfStatements() {
	    return this.getTypedRuleContext(SeqOfStatementsContext,0);
	};

	END() {
	    return this.getToken(MySqlParser.END, 0);
	};

	elsifPart = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ElsifPartContext);
	    } else {
	        return this.getTypedRuleContext(ElsifPartContext,i);
	    }
	};

	elsePart() {
	    return this.getTypedRuleContext(ElsePartContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterIfStatement2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitIfStatement2(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitIfStatement2(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ElsifPartContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_elsifPart;
        this.level = 1
              block: any = null
    }

	ELSIF() {
	    return this.getToken(MySqlParser.ELSIF, 0);
	};

	condition() {
	    return this.getTypedRuleContext(ConditionContext,0);
	};

	THEN() {
	    return this.getToken(MySqlParser.THEN, 0);
	};

	seqOfStatements() {
	    return this.getTypedRuleContext(SeqOfStatementsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterElsifPart(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitElsifPart(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitElsifPart(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ElsePartContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_elsePart;
        this.level = 1
              block: any = null
    }

	ELSE() {
	    return this.getToken(MySqlParser.ELSE, 0);
	};

	seqOfStatements() {
	    return this.getTypedRuleContext(SeqOfStatementsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterElsePart(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitElsePart(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitElsePart(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LoopStatement2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_loopStatement2;
        this.level = 1
              block: any = null
    }

	LOOP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.LOOP);
	    } else {
	        return this.getToken(MySqlParser.LOOP, i);
	    }
	};


	seqOfStatements() {
	    return this.getTypedRuleContext(SeqOfStatementsContext,0);
	};

	END() {
	    return this.getToken(MySqlParser.END, 0);
	};

	labelDeclaration() {
	    return this.getTypedRuleContext(LabelDeclarationContext,0);
	};

	WHILE() {
	    return this.getToken(MySqlParser.WHILE, 0);
	};

	condition() {
	    return this.getTypedRuleContext(ConditionContext,0);
	};

	FOR() {
	    return this.getToken(MySqlParser.FOR, 0);
	};

	cursorLoopParam() {
	    return this.getTypedRuleContext(CursorLoopParamContext,0);
	};

	labelName() {
	    return this.getTypedRuleContext(LabelNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLoopStatement2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLoopStatement2(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitLoopStatement2(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CursorLoopParamContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_cursorLoopParam;
        this.rangeSeparator = null; // Token
    }

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	IN() {
	    return this.getToken(MySqlParser.IN, 0);
	};

	lowerBound() {
	    return this.getTypedRuleContext(LowerBoundContext,0);
	};

	upperBound() {
	    return this.getTypedRuleContext(UpperBoundContext,0);
	};

	TWO_DOTS() {
	    return this.getToken(MySqlParser.TWO_DOTS, 0);
	};

	REVERSE() {
	    return this.getToken(MySqlParser.REVERSE, 0);
	};

	cursorName() {
	    return this.getTypedRuleContext(CursorNameContext,0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	selectStatement() {
	    return this.getTypedRuleContext(SelectStatementContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	expressions() {
	    return this.getTypedRuleContext(ExpressionsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCursorLoopParam(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCursorLoopParam(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitCursorLoopParam(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ForallStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_forallStatement;
    }

	FORALL() {
	    return this.getToken(MySqlParser.FORALL, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	IN() {
	    return this.getToken(MySqlParser.IN, 0);
	};

	boundsClause() {
	    return this.getTypedRuleContext(BoundsClauseContext,0);
	};

	normalSqlStatement() {
	    return this.getTypedRuleContext(NormalSqlStatementContext,0);
	};

	SAVE() {
	    return this.getToken(MySqlParser.SAVE, 0);
	};

	EXCEPTIONS() {
	    return this.getToken(MySqlParser.EXCEPTIONS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterForallStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitForallStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitForallStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BoundsClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_boundsClause;
    }

	lowerBound() {
	    return this.getTypedRuleContext(LowerBoundContext,0);
	};

	TWO_DOTS() {
	    return this.getToken(MySqlParser.TWO_DOTS, 0);
	};

	upperBound() {
	    return this.getTypedRuleContext(UpperBoundContext,0);
	};

	INDICES() {
	    return this.getToken(MySqlParser.INDICES, 0);
	};

	OF() {
	    return this.getToken(MySqlParser.OF, 0);
	};

	fullId() {
	    return this.getTypedRuleContext(FullIdContext,0);
	};

	betweenBound() {
	    return this.getTypedRuleContext(BetweenBoundContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterBoundsClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitBoundsClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitBoundsClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BetweenBoundContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_betweenBound;
    }

	BETWEEN() {
	    return this.getToken(MySqlParser.BETWEEN, 0);
	};

	lowerBound() {
	    return this.getTypedRuleContext(LowerBoundContext,0);
	};

	AND() {
	    return this.getToken(MySqlParser.AND, 0);
	};

	upperBound() {
	    return this.getTypedRuleContext(UpperBoundContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterBetweenBound(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitBetweenBound(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitBetweenBound(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LowerBoundContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_lowerBound;
    }

	concatenation() {
	    return this.getTypedRuleContext(ConcatenationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLowerBound(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLowerBound(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitLowerBound(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UpperBoundContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_upperBound;
    }

	concatenation() {
	    return this.getTypedRuleContext(ConcatenationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUpperBound(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUpperBound(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitUpperBound(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NullStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_nullStatement;
    }

	NULL_LITERAL() {
	    return this.getToken(MySqlParser.NULL_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterNullStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitNullStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitNullStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RaiseStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_raiseStatement;
    }

	RAISE() {
	    return this.getToken(MySqlParser.RAISE, 0);
	};

	exceptionName() {
	    return this.getTypedRuleContext(ExceptionNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterRaiseStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitRaiseStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitRaiseStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReturnStatement2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_returnStatement2;
    }

	RETURN() {
	    return this.getToken(MySqlParser.RETURN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterReturnStatement2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitReturnStatement2(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitReturnStatement2(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExceptionBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_exceptionBlock;
        this.level = 2
    }

	EXCEPTION() {
	    return this.getToken(MySqlParser.EXCEPTION, 0);
	};

	exceptionHandler = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExceptionHandlerContext);
	    } else {
	        return this.getTypedRuleContext(ExceptionHandlerContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterExceptionBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitExceptionBlock(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitExceptionBlock(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExceptionHandlerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_exceptionHandler;
        this.level = 2
        this._seqOfStatements = null; // SeqOfStatementsContext
    }

	WHEN() {
	    return this.getToken(MySqlParser.WHEN, 0);
	};

	exceptionName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExceptionNameContext);
	    } else {
	        return this.getTypedRuleContext(ExceptionNameContext,i);
	    }
	};

	OR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.OR);
	    } else {
	        return this.getToken(MySqlParser.OR, i);
	    }
	};


	THEN() {
	    return this.getToken(MySqlParser.THEN, 0);
	};

	seqOfStatements() {
	    return this.getTypedRuleContext(SeqOfStatementsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterExceptionHandler(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitExceptionHandler(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitExceptionHandler(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BlockStatement2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_blockStatement2;
        this.level = 0
    }

	seqStatementBlock() {
	    return this.getTypedRuleContext(SeqStatementBlockContext,0);
	};

	DECLARE() {
	    return this.getToken(MySqlParser.DECLARE, 0);
	};

	declareBlock() {
	    return this.getTypedRuleContext(DeclareBlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterBlockStatement2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitBlockStatement2(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitBlockStatement2(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DeclareBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_declareBlock;
        this.level = 2
    }

	declareSpec = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DeclareSpecContext);
	    } else {
	        return this.getTypedRuleContext(DeclareSpecContext,i);
	    }
	};

	SEMI = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.SEMI);
	    } else {
	        return this.getToken(MySqlParser.SEMI, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDeclareBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDeclareBlock(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitDeclareBlock(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SeqStatementBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, withLabel) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_seqStatementBlock;
        this.withLabel = null
        this.level = 0
              block: any = null
        this._labelName = null; // LabelNameContext
        this.withLabel = withLabel || null;
    }

	BEGIN() {
	    return this.getToken(MySqlParser.BEGIN, 0);
	};

	seqOfStatements() {
	    return this.getTypedRuleContext(SeqOfStatementsContext,0);
	};

	END() {
	    return this.getToken(MySqlParser.END, 0);
	};

	exceptionBlock() {
	    return this.getTypedRuleContext(ExceptionBlockContext,0);
	};

	labelName() {
	    return this.getTypedRuleContext(LabelNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSeqStatementBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSeqStatementBlock(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitSeqStatementBlock(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PackageBodyBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_packageBodyBlock;
        this.level = 0
              block: any = null
    }

	BEGIN() {
	    return this.getToken(MySqlParser.BEGIN, 0);
	};

	seqOfStatements() {
	    return this.getTypedRuleContext(SeqOfStatementsContext,0);
	};

	exceptionBlock() {
	    return this.getTypedRuleContext(ExceptionBlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPackageBodyBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPackageBodyBlock(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitPackageBodyBlock(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_parameter;
    }

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	typeSpec() {
	    return this.getTypedRuleContext(TypeSpecContext,0);
	};

	defaultValuePart() {
	    return this.getTypedRuleContext(DefaultValuePartContext,0);
	};

	IN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.IN);
	    } else {
	        return this.getToken(MySqlParser.IN, i);
	    }
	};


	OUT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.OUT);
	    } else {
	        return this.getToken(MySqlParser.OUT, i);
	    }
	};


	INOUT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.INOUT);
	    } else {
	        return this.getToken(MySqlParser.INOUT, i);
	    }
	};


	NOCOPY = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.NOCOPY);
	    } else {
	        return this.getToken(MySqlParser.NOCOPY, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitParameter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitParameter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GeneralElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_generalElement;
    }

	generalElementPart() {
	    return this.getTypedRuleContext(GeneralElementPartContext,0);
	};

	generalElementPartChain = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GeneralElementPartChainContext);
	    } else {
	        return this.getTypedRuleContext(GeneralElementPartChainContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterGeneralElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitGeneralElement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitGeneralElement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GeneralElementPartContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_generalElementPart;
    }

	idExpression() {
	    return this.getTypedRuleContext(IdExpressionContext,0);
	};

	generalArgument() {
	    return this.getTypedRuleContext(GeneralArgumentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterGeneralElementPart(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitGeneralElementPart(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitGeneralElementPart(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GeneralElementPartChainContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_generalElementPartChain;
    }

	generalArgument() {
	    return this.getTypedRuleContext(GeneralArgumentContext,0);
	};

	chainedIdExpression() {
	    return this.getTypedRuleContext(ChainedIdExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterGeneralElementPartChain(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitGeneralElementPartChain(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitGeneralElementPartChain(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GeneralArgumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_generalArgument;
        this.noSpaceBetween = true
    }

	functionArgument() {
	    return this.getTypedRuleContext(FunctionArgumentContext,0);
	};

	arrayArgument() {
	    return this.getTypedRuleContext(ArrayArgumentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterGeneralArgument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitGeneralArgument(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitGeneralArgument(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FunctionArgumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_functionArgument;
    }

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	argument = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArgumentContext);
	    } else {
	        return this.getTypedRuleContext(ArgumentContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterFunctionArgument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitFunctionArgument(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitFunctionArgument(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArgumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_argument;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	GREATER_SYMBOL() {
	    return this.getToken(MySqlParser.GREATER_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterArgument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitArgument(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitArgument(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArrayArgumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_arrayArgument;
    }

	LS_BRACKET() {
	    return this.getToken(MySqlParser.LS_BRACKET, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RS_BRACKET() {
	    return this.getToken(MySqlParser.RS_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterArrayArgument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitArrayArgument(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitArrayArgument(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_typeSpec;
        this.noSpaceTokens = ['%']
    }

	dataType() {
	    return this.getTypedRuleContext(DataTypeContext,0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	REF() {
	    return this.getToken(MySqlParser.REF, 0);
	};

	dottedId = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DottedIdContext);
	    } else {
	        return this.getTypedRuleContext(DottedIdContext,i);
	    }
	};

	MODULE() {
	    return this.getToken(MySqlParser.MODULE, 0);
	};

	TYPE() {
	    return this.getToken(MySqlParser.TYPE, 0);
	};

	ROWTYPE() {
	    return this.getToken(MySqlParser.ROWTYPE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTypeSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTypeSpec(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitTypeSpec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DefaultValuePartContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_defaultValuePart;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	VAR_ASSIGN() {
	    return this.getToken(MySqlParser.VAR_ASSIGN, 0);
	};

	DEFAULT() {
	    return this.getToken(MySqlParser.DEFAULT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDefaultValuePart(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDefaultValuePart(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitDefaultValuePart(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LabelNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_labelName;
    }

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLabelName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLabelName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitLabelName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NumericContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_numeric;
    }

	DECIMAL_LITERAL() {
	    return this.getToken(MySqlParser.DECIMAL_LITERAL, 0);
	};

	REAL_LITERAL() {
	    return this.getToken(MySqlParser.REAL_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterNumeric(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitNumeric(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitNumeric(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NumericNegativeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_numericNegative;
        this.noSpaceTokens = ['-']
    }

	MINUS() {
	    return this.getToken(MySqlParser.MINUS, 0);
	};

	numeric() {
	    return this.getTypedRuleContext(NumericContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterNumericNegative(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitNumericNegative(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitNumericNegative(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExceptionNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_exceptionName;
    }

	tripleId() {
	    return this.getTypedRuleContext(TripleIdContext,0);
	};

	emptyElement() {
	    return this.getTypedRuleContext(EmptyElementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterExceptionName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitExceptionName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitExceptionName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RoutineNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_routineName;
    }

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	dottedId = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DottedIdContext);
	    } else {
	        return this.getTypedRuleContext(DottedIdContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterRoutineName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitRoutineName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitRoutineName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IdExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_idExpression;
    }

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	DOT() {
	    return this.getToken(MySqlParser.DOT, 0);
	};

	dottedId = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DottedIdContext);
	    } else {
	        return this.getTypedRuleContext(DottedIdContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterIdExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitIdExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitIdExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ChainedIdExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_chainedIdExpression;
    }

	dottedId = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DottedIdContext);
	    } else {
	        return this.getTypedRuleContext(DottedIdContext,i);
	    }
	};

	DOT() {
	    return this.getToken(MySqlParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterChainedIdExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitChainedIdExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitChainedIdExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CursorNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_cursorName;
    }

	fullId() {
	    return this.getTypedRuleContext(FullIdContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCursorName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCursorName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitCursorName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PartitionExtensionClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_partitionExtensionClause;
    }

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	SUBPARTITION() {
	    return this.getToken(MySqlParser.SUBPARTITION, 0);
	};

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	FOR() {
	    return this.getToken(MySqlParser.FOR, 0);
	};

	expressions() {
	    return this.getTypedRuleContext(ExpressionsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPartitionExtensionClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPartitionExtensionClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitPartitionExtensionClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_condition;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCondition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitCondition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NormalSqlStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_normalSqlStatement;
        this.level = 0
    }

	executeImmediate() {
	    return this.getTypedRuleContext(ExecuteImmediateContext,0);
	};

	dmlStatement() {
	    return this.getTypedRuleContext(DmlStatementContext,0);
	};

	cursorManipulationStatements() {
	    return this.getTypedRuleContext(CursorManipulationStatementsContext,0);
	};

	transactionStatement() {
	    return this.getTypedRuleContext(TransactionStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterNormalSqlStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitNormalSqlStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitNormalSqlStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExecuteImmediateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_executeImmediate;
    }

	EXECUTE() {
	    return this.getToken(MySqlParser.EXECUTE, 0);
	};

	IMMEDIATE() {
	    return this.getToken(MySqlParser.IMMEDIATE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	bulkCollectClause() {
	    return this.getTypedRuleContext(BulkCollectClauseContext,0);
	};

	usingClause() {
	    return this.getTypedRuleContext(UsingClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterExecuteImmediate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitExecuteImmediate(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitExecuteImmediate(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BulkCollectClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_bulkCollectClause;
        this.level = 0
    }

	INTO() {
	    return this.getToken(MySqlParser.INTO, 0);
	};

	expressions() {
	    return this.getTypedRuleContext(ExpressionsContext,0);
	};

	BULK() {
	    return this.getToken(MySqlParser.BULK, 0);
	};

	COLLECT() {
	    return this.getToken(MySqlParser.COLLECT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterBulkCollectClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitBulkCollectClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitBulkCollectClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UsingClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_usingClause;
        this.level = 0
    }

	USING() {
	    return this.getToken(MySqlParser.USING, 0);
	};

	usingClauseElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UsingClauseElementContext);
	    } else {
	        return this.getTypedRuleContext(UsingClauseElementContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUsingClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUsingClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitUsingClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UsingClauseElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_usingClauseElement;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	IN() {
	    return this.getToken(MySqlParser.IN, 0);
	};

	OUT() {
	    return this.getToken(MySqlParser.OUT, 0);
	};

	INOUT() {
	    return this.getToken(MySqlParser.INOUT, 0);
	};

	NOCOPY() {
	    return this.getToken(MySqlParser.NOCOPY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUsingClauseElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUsingClauseElement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitUsingClauseElement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CursorManipulationStatementsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_cursorManipulationStatements;
        this.level = 0
    }

	closeStatement() {
	    return this.getTypedRuleContext(CloseStatementContext,0);
	};

	openStatement() {
	    return this.getTypedRuleContext(OpenStatementContext,0);
	};

	fetchStatement() {
	    return this.getTypedRuleContext(FetchStatementContext,0);
	};

	openForStatement() {
	    return this.getTypedRuleContext(OpenForStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCursorManipulationStatements(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCursorManipulationStatements(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitCursorManipulationStatements(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CloseStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_closeStatement;
    }

	CLOSE() {
	    return this.getToken(MySqlParser.CLOSE, 0);
	};

	cursorName() {
	    return this.getTypedRuleContext(CursorNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCloseStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCloseStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitCloseStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OpenStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_openStatement;
        this.noSpaceTokens = ['(']
    }

	OPEN() {
	    return this.getToken(MySqlParser.OPEN, 0);
	};

	cursorName() {
	    return this.getTypedRuleContext(CursorNameContext,0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	expressions() {
	    return this.getTypedRuleContext(ExpressionsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterOpenStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitOpenStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitOpenStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FetchStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_fetchStatement;
        this.newlineTokens = ['BULK']
    }

	FETCH() {
	    return this.getToken(MySqlParser.FETCH, 0);
	};

	cursorName() {
	    return this.getTypedRuleContext(CursorNameContext,0);
	};

	INTO() {
	    return this.getToken(MySqlParser.INTO, 0);
	};

	tripleId = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TripleIdContext);
	    } else {
	        return this.getTypedRuleContext(TripleIdContext,i);
	    }
	};

	BULK() {
	    return this.getToken(MySqlParser.BULK, 0);
	};

	COLLECT() {
	    return this.getToken(MySqlParser.COLLECT, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	limitClause() {
	    return this.getTypedRuleContext(LimitClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterFetchStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitFetchStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitFetchStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OpenForStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_openForStatement;
    }

	OPEN() {
	    return this.getToken(MySqlParser.OPEN, 0);
	};

	cursorName() {
	    return this.getTypedRuleContext(CursorNameContext,0);
	};

	FOR() {
	    return this.getToken(MySqlParser.FOR, 0);
	};

	selectStatement() {
	    return this.getTypedRuleContext(SelectStatementContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	usingClause() {
	    return this.getTypedRuleContext(UsingClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterOpenForStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitOpenForStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitOpenForStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConcatenationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_concatenation;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterConcatenation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitConcatenation(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof MySqlParserVisitor ) {
	        return visitor.visitConcatenation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}




MySqlParser.RootContext = RootContext; 
MySqlParser.SqlStatementsContext = SqlStatementsContext; 
MySqlParser.SqlStatementContext = SqlStatementContext; 
MySqlParser.EmptyStatementContext = EmptyStatementContext; 
MySqlParser.DdlStatementContext = DdlStatementContext; 
MySqlParser.DmlStatementContext = DmlStatementContext; 
MySqlParser.TransactionStatementContext = TransactionStatementContext; 
MySqlParser.ReplicationStatementContext = ReplicationStatementContext; 
MySqlParser.PreparedStatementContext = PreparedStatementContext; 
MySqlParser.CompoundStatementContext = CompoundStatementContext; 
MySqlParser.AdministrationStatementContext = AdministrationStatementContext; 
MySqlParser.UtilityStatementContext = UtilityStatementContext; 
MySqlParser.DclStatementContext = DclStatementContext; 
MySqlParser.AnchorStatementContext = AnchorStatementContext; 
MySqlParser.StartAnchorContext = StartAnchorContext; 
MySqlParser.CreateAnchorContext = CreateAnchorContext; 
MySqlParser.DropAnchorContext = DropAnchorContext; 
MySqlParser.CreateDatabaseContext = CreateDatabaseContext; 
MySqlParser.CreateEventContext = CreateEventContext; 
MySqlParser.CreateIndexContext = CreateIndexContext; 
MySqlParser.CreateLogfileGroupContext = CreateLogfileGroupContext; 
MySqlParser.CreateProcedureContext = CreateProcedureContext; 
MySqlParser.CreateFunctionContext = CreateFunctionContext; 
MySqlParser.CreateTemporaryFunctionContext = CreateTemporaryFunctionContext; 
MySqlParser.CreateServerContext = CreateServerContext; 
MySqlParser.CreateTableContext = CreateTableContext; 
MySqlParser.CreateTablespaceInnodbContext = CreateTablespaceInnodbContext; 
MySqlParser.CreateTablespaceNdbContext = CreateTablespaceNdbContext; 
MySqlParser.CreateTriggerContext = CreateTriggerContext; 
MySqlParser.CreateViewContext = CreateViewContext; 
MySqlParser.CreateViewMysqlContext = CreateViewMysqlContext; 
MySqlParser.CreateViewInceptorContext = CreateViewInceptorContext; 
MySqlParser.CreateDatabaseOptionContext = CreateDatabaseOptionContext; 
MySqlParser.MysqlCreateDatabaseOptionContext = MysqlCreateDatabaseOptionContext; 
MySqlParser.InceptorCreateDatabaseOptionContext = InceptorCreateDatabaseOptionContext; 
MySqlParser.KeyOrValuePropertiesContext = KeyOrValuePropertiesContext; 
MySqlParser.KeyPropertiesContext = KeyPropertiesContext; 
MySqlParser.KeyValuePropertiesContext = KeyValuePropertiesContext; 
MySqlParser.KeyValuePropertyContext = KeyValuePropertyContext; 
MySqlParser.IdValuePropertiesContext = IdValuePropertiesContext; 
MySqlParser.IdValuePropertyContext = IdValuePropertyContext; 
MySqlParser.OrReplaceDialectActionContext = OrReplaceDialectActionContext; 
MySqlParser.OwnerStatementContext = OwnerStatementContext; 
MySqlParser.ScheduleExpressionContext = ScheduleExpressionContext; 
MySqlParser.TimestampValueContext = TimestampValueContext; 
MySqlParser.IntervalExprContext = IntervalExprContext; 
MySqlParser.IntervalTypeContext = IntervalTypeContext; 
MySqlParser.EnableTypeContext = EnableTypeContext; 
MySqlParser.IndexTypeContext = IndexTypeContext; 
MySqlParser.IndexOptionContext = IndexOptionContext; 
MySqlParser.ProcedureParameterContext = ProcedureParameterContext; 
MySqlParser.FunctionParameterContext = FunctionParameterContext; 
MySqlParser.PermanentFunctionResourceContext = PermanentFunctionResourceContext; 
MySqlParser.RoutineOptionContext = RoutineOptionContext; 
MySqlParser.ServerOptionContext = ServerOptionContext; 
MySqlParser.CreateTableHeadContext = CreateTableHeadContext; 
MySqlParser.CreateTableAsKeyViolateContext = CreateTableAsKeyViolateContext; 
MySqlParser.CreateTableQueryContext = CreateTableQueryContext; 
MySqlParser.CreateTableLikeOptionContext = CreateTableLikeOptionContext; 
MySqlParser.CreateTableCreateOptionContext = CreateTableCreateOptionContext; 
MySqlParser.CreateDefinitionsContext = CreateDefinitionsContext; 
MySqlParser.CreateDefinitionContext = CreateDefinitionContext; 
MySqlParser.CreateColumnDeclarationContext = CreateColumnDeclarationContext; 
MySqlParser.ColumnDefinitionContext = ColumnDefinitionContext; 
MySqlParser.ColumnConstraintMysqlContext = ColumnConstraintMysqlContext; 
MySqlParser.ColumnConstraintInceptorContext = ColumnConstraintInceptorContext; 
MySqlParser.ColumnAnalyzerContext = ColumnAnalyzerContext; 
MySqlParser.ConstraintOptsContext = ConstraintOptsContext; 
MySqlParser.AsSelectStatementContext = AsSelectStatementContext; 
MySqlParser.UidCommentListContext = UidCommentListContext; 
MySqlParser.UidCommentContext = UidCommentContext; 
MySqlParser.TableBucketsContext = TableBucketsContext; 
MySqlParser.IntoBucketsContext = IntoBucketsContext; 
MySqlParser.TableSkewedContext = TableSkewedContext; 
MySqlParser.SetSerdeContext = SetSerdeContext; 
MySqlParser.EsPropsContext = EsPropsContext; 
MySqlParser.HoloPropsContext = HoloPropsContext; 
MySqlParser.HoloTableSizeContext = HoloTableSizeContext; 
MySqlParser.DialectWithNoDataContext = DialectWithNoDataContext; 
MySqlParser.CommentClauseContext = CommentClauseContext; 
MySqlParser.SetLocationDefinitionContext = SetLocationDefinitionContext; 
MySqlParser.LocationDefinitionContext = LocationDefinitionContext; 
MySqlParser.TblPropertiesDefinitionContext = TblPropertiesDefinitionContext; 
MySqlParser.ErrorLogTableDefinitionContext = ErrorLogTableDefinitionContext; 
MySqlParser.ErrorRejectSpecContext = ErrorRejectSpecContext; 
MySqlParser.TableConstraintContext = TableConstraintContext; 
MySqlParser.TableConstraintMysqlContext = TableConstraintMysqlContext; 
MySqlParser.TableConstraintInceptorContext = TableConstraintInceptorContext; 
MySqlParser.ReferenceDefinitionContext = ReferenceDefinitionContext; 
MySqlParser.ReferenceActionContext = ReferenceActionContext; 
MySqlParser.ReferenceControlTypeContext = ReferenceControlTypeContext; 
MySqlParser.IndexColumnDefinitionContext = IndexColumnDefinitionContext; 
MySqlParser.TableOptionContext = TableOptionContext; 
MySqlParser.TablespaceStorageContext = TablespaceStorageContext; 
MySqlParser.PartitionDefinitionsContext = PartitionDefinitionsContext; 
MySqlParser.PartitionFunctionDefinitionContext = PartitionFunctionDefinitionContext; 
MySqlParser.SubpartitionFunctionDefinitionContext = SubpartitionFunctionDefinitionContext; 
MySqlParser.PartitionDefinitionContext = PartitionDefinitionContext; 
MySqlParser.PartitionDefinerAtomContext = PartitionDefinerAtomContext; 
MySqlParser.PartitionDefinerVectorContext = PartitionDefinerVectorContext; 
MySqlParser.SubpartitionDefinitionContext = SubpartitionDefinitionContext; 
MySqlParser.PartitionOptionContext = PartitionOptionContext; 
MySqlParser.AlterDatabaseContext = AlterDatabaseContext; 
MySqlParser.AlterEventContext = AlterEventContext; 
MySqlParser.AlterFunctionContext = AlterFunctionContext; 
MySqlParser.AlterInstanceContext = AlterInstanceContext; 
MySqlParser.AlterLogfileGroupContext = AlterLogfileGroupContext; 
MySqlParser.AlterProcedureContext = AlterProcedureContext; 
MySqlParser.AlterServerContext = AlterServerContext; 
MySqlParser.AlterTableContext = AlterTableContext; 
MySqlParser.AlterTablespaceContext = AlterTablespaceContext; 
MySqlParser.AlterViewContext = AlterViewContext; 
MySqlParser.AlterDatabaseOptionContext = AlterDatabaseOptionContext; 
MySqlParser.AlterDatabaseSetDbpropertiesContext = AlterDatabaseSetDbpropertiesContext; 
MySqlParser.AlterDatabaseSetOwnerContext = AlterDatabaseSetOwnerContext; 
MySqlParser.AlterDatabaseAnchorContext = AlterDatabaseAnchorContext; 
MySqlParser.AlterTableActionContext = AlterTableActionContext; 
MySqlParser.AlterSpecificationContext = AlterSpecificationContext; 
MySqlParser.AlterSpecificationMysqlContext = AlterSpecificationMysqlContext; 
MySqlParser.AlterSpecificationMysqlItemContext = AlterSpecificationMysqlItemContext; 
MySqlParser.AlterSpecificationInceptorContext = AlterSpecificationInceptorContext; 
MySqlParser.IntoTableContext = IntoTableContext; 
MySqlParser.AlterSpecificationAnchorContext = AlterSpecificationAnchorContext; 
MySqlParser.AlterSpecificationColumnContext = AlterSpecificationColumnContext; 
MySqlParser.AlterSpecificationPartitionContext = AlterSpecificationPartitionContext; 
MySqlParser.AlterTablePartitionOptionContext = AlterTablePartitionOptionContext; 
MySqlParser.AlterSpecificationSkewedContext = AlterSpecificationSkewedContext; 
MySqlParser.AlterSpecificationConstraintContext = AlterSpecificationConstraintContext; 
MySqlParser.ForeignKeyReferencesContext = ForeignKeyReferencesContext; 
MySqlParser.RestrictOrCascadeContext = RestrictOrCascadeContext; 
MySqlParser.DropDatabaseContext = DropDatabaseContext; 
MySqlParser.DropEventContext = DropEventContext; 
MySqlParser.DropIndexContext = DropIndexContext; 
MySqlParser.DropLogfileGroupContext = DropLogfileGroupContext; 
MySqlParser.DropProcedureContext = DropProcedureContext; 
MySqlParser.DropFunctionContext = DropFunctionContext; 
MySqlParser.DropServerContext = DropServerContext; 
MySqlParser.DropTableContext = DropTableContext; 
MySqlParser.DropTablespaceContext = DropTablespaceContext; 
MySqlParser.DropTriggerContext = DropTriggerContext; 
MySqlParser.DropViewContext = DropViewContext; 
MySqlParser.FunctionTypeContext = FunctionTypeContext; 
MySqlParser.RenameTableContext = RenameTableContext; 
MySqlParser.RenameTableClauseContext = RenameTableClauseContext; 
MySqlParser.TruncateTableContext = TruncateTableContext; 
MySqlParser.CallStatementContext = CallStatementContext; 
MySqlParser.DeleteStatementContext = DeleteStatementContext; 
MySqlParser.DoStatementContext = DoStatementContext; 
MySqlParser.HandlerStatementContext = HandlerStatementContext; 
MySqlParser.InsertStatementContext = InsertStatementContext; 
MySqlParser.FromInsertStatementContext = FromInsertStatementContext; 
MySqlParser.FromInsertStatementInsertContext = FromInsertStatementInsertContext; 
MySqlParser.FromInsertStatementSelectContext = FromInsertStatementSelectContext; 
MySqlParser.InsertTypeAnchorContext = InsertTypeAnchorContext; 
MySqlParser.InsertFileContext = InsertFileContext; 
MySqlParser.LoadDataStatementContext = LoadDataStatementContext; 
MySqlParser.LoadDataMysqlContext = LoadDataMysqlContext; 
MySqlParser.LoadDataInceptorContext = LoadDataInceptorContext; 
MySqlParser.LoadDataInceptorTableContext = LoadDataInceptorTableContext; 
MySqlParser.LoadDataInceptorAnchorContext = LoadDataInceptorAnchorContext; 
MySqlParser.LoadXmlStatementContext = LoadXmlStatementContext; 
MySqlParser.MergeStatementContext = MergeStatementContext; 
MySqlParser.ReplaceStatementContext = ReplaceStatementContext; 
MySqlParser.SelectStatementContext = SelectStatementContext; 
MySqlParser.UpdateStatementContext = UpdateStatementContext; 
MySqlParser.WithStatementContext = WithStatementContext; 
MySqlParser.WithCommonTableExpressionContext = WithCommonTableExpressionContext; 
MySqlParser.InsertPartitionSpecContext = InsertPartitionSpecContext; 
MySqlParser.InsertOnDuplicateContext = InsertOnDuplicateContext; 
MySqlParser.RowFormatDelimitedContext = RowFormatDelimitedContext; 
MySqlParser.RowFormatDelimitedTailContext = RowFormatDelimitedTailContext; 
MySqlParser.RowFormatSerdeContext = RowFormatSerdeContext; 
MySqlParser.RowFormatSerdeTailContext = RowFormatSerdeTailContext; 
MySqlParser.RowFormatContext = RowFormatContext; 
MySqlParser.FileStoreContext = FileStoreContext; 
MySqlParser.FileFormatContext = FileFormatContext; 
MySqlParser.FileFormatEnumContext = FileFormatEnumContext; 
MySqlParser.FileStoreByContext = FileStoreByContext; 
MySqlParser.InsertActionContext = InsertActionContext; 
MySqlParser.InsertStatementValueContext = InsertStatementValueContext; 
MySqlParser.InsertValueClauseContext = InsertValueClauseContext; 
MySqlParser.UpdatedElementContext = UpdatedElementContext; 
MySqlParser.AssignmentFieldContext = AssignmentFieldContext; 
MySqlParser.MergeUsingClauseContext = MergeUsingClauseContext; 
MySqlParser.MergeUpdateClauseContext = MergeUpdateClauseContext; 
MySqlParser.MergeInsertClauseContext = MergeInsertClauseContext; 
MySqlParser.LockClauseContext = LockClauseContext; 
MySqlParser.SingleDeleteStatementContext = SingleDeleteStatementContext; 
MySqlParser.MultipleDeleteStatementContext = MultipleDeleteStatementContext; 
MySqlParser.HandlerOpenStatementContext = HandlerOpenStatementContext; 
MySqlParser.HandlerReadIndexStatementContext = HandlerReadIndexStatementContext; 
MySqlParser.HandlerReadStatementContext = HandlerReadStatementContext; 
MySqlParser.HandlerCloseStatementContext = HandlerCloseStatementContext; 
MySqlParser.SingleUpdateStatementContext = SingleUpdateStatementContext; 
MySqlParser.MultipleUpdateStatementContext = MultipleUpdateStatementContext; 
MySqlParser.SetUpdatedElementsContext = SetUpdatedElementsContext; 
MySqlParser.UpdateStatementInceptorContext = UpdateStatementInceptorContext; 
MySqlParser.CrudTargetClauseContext = CrudTargetClauseContext; 
MySqlParser.UpdateAssignClauseContext = UpdateAssignClauseContext; 
MySqlParser.UpdateAssignClauseElementContext = UpdateAssignClauseElementContext; 
MySqlParser.DeleteStatementInceptorContext = DeleteStatementInceptorContext; 
MySqlParser.OrderByClauseContext = OrderByClauseContext; 
MySqlParser.OrderByExpressionContext = OrderByExpressionContext; 
MySqlParser.NullsOrderContext = NullsOrderContext; 
MySqlParser.ClusterByClauseContext = ClusterByClauseContext; 
MySqlParser.DistributeByClauseContext = DistributeByClauseContext; 
MySqlParser.SortByClauseContext = SortByClauseContext; 
MySqlParser.TableSourcesContext = TableSourcesContext; 
MySqlParser.TableSourceContext = TableSourceContext; 
MySqlParser.TableSourceItemContext = TableSourceItemContext; 
MySqlParser.TableSourceItemIndexContext = TableSourceItemIndexContext; 
MySqlParser.FromClauseSuggesterContext = FromClauseSuggesterContext; 
MySqlParser.SelectStatementPlusContext = SelectStatementPlusContext; 
MySqlParser.ValuesSourceExprsContext = ValuesSourceExprsContext; 
MySqlParser.IndexHintContext = IndexHintContext; 
MySqlParser.IndexHintTypeContext = IndexHintTypeContext; 
MySqlParser.JoinPartContext = JoinPartContext; 
MySqlParser.JoinTypeAnchorContext = JoinTypeAnchorContext; 
MySqlParser.JoinOuterTypeContext = JoinOuterTypeContext; 
MySqlParser.JoinNaturalSubTypeContext = JoinNaturalSubTypeContext; 
MySqlParser.JoinConditionContext = JoinConditionContext; 
MySqlParser.LateralViewContext = LateralViewContext; 
MySqlParser.QueryExpressionContext = QueryExpressionContext; 
MySqlParser.QueryExpressionNointoContext = QueryExpressionNointoContext; 
MySqlParser.QuerySpecificationContext = QuerySpecificationContext; 
MySqlParser.QuerySpecificationNointoContext = QuerySpecificationNointoContext; 
MySqlParser.UnionParenthesisContext = UnionParenthesisContext; 
MySqlParser.UnionStatementContext = UnionStatementContext; 
MySqlParser.SelectSpecContext = SelectSpecContext; 
MySqlParser.SelectSpecMysqlContext = SelectSpecMysqlContext; 
MySqlParser.SelectSpecInceptorContext = SelectSpecInceptorContext; 
MySqlParser.SelectElementsContext = SelectElementsContext; 
MySqlParser.SelectElementContext = SelectElementContext; 
MySqlParser.SelectIntoExpressionContext = SelectIntoExpressionContext; 
MySqlParser.SelectFieldsIntoContext = SelectFieldsIntoContext; 
MySqlParser.SelectLinesIntoContext = SelectLinesIntoContext; 
MySqlParser.FromClauseContext = FromClauseContext; 
MySqlParser.GroupByClauseContext = GroupByClauseContext; 
MySqlParser.HavingClauseContext = HavingClauseContext; 
MySqlParser.WhereExpressionOptionalContext = WhereExpressionOptionalContext; 
MySqlParser.HierarchyClauseContext = HierarchyClauseContext; 
MySqlParser.GroupByItemsContext = GroupByItemsContext; 
MySqlParser.GroupByItemContext = GroupByItemContext; 
MySqlParser.LimitClauseContext = LimitClauseContext; 
MySqlParser.LimitClauseMysqlContext = LimitClauseMysqlContext; 
MySqlParser.LimitClauseAtomContext = LimitClauseAtomContext; 
MySqlParser.LimitClauseInceptorContext = LimitClauseInceptorContext; 
MySqlParser.StartTransactionContext = StartTransactionContext; 
MySqlParser.BeginWorkContext = BeginWorkContext; 
MySqlParser.CommitWorkContext = CommitWorkContext; 
MySqlParser.RollbackWorkContext = RollbackWorkContext; 
MySqlParser.SavepointStatementContext = SavepointStatementContext; 
MySqlParser.RollbackStatementContext = RollbackStatementContext; 
MySqlParser.ReleaseStatementContext = ReleaseStatementContext; 
MySqlParser.LockTablesContext = LockTablesContext; 
MySqlParser.UnlockTablesContext = UnlockTablesContext; 
MySqlParser.TransactionStatementInceptorContext = TransactionStatementInceptorContext; 
MySqlParser.SetAutocommitStatementContext = SetAutocommitStatementContext; 
MySqlParser.SetTransactionStatementContext = SetTransactionStatementContext; 
MySqlParser.SetTransactionStatementInceptorContext = SetTransactionStatementInceptorContext; 
MySqlParser.SetTransactionStatementMysqlContext = SetTransactionStatementMysqlContext; 
MySqlParser.TransactionModeContext = TransactionModeContext; 
MySqlParser.LockTableElementContext = LockTableElementContext; 
MySqlParser.LockActionContext = LockActionContext; 
MySqlParser.TransactionOptionContext = TransactionOptionContext; 
MySqlParser.TransactionLevelContext = TransactionLevelContext; 
MySqlParser.ChangeMasterContext = ChangeMasterContext; 
MySqlParser.ChangeReplicationFilterContext = ChangeReplicationFilterContext; 
MySqlParser.PurgeBinaryLogsContext = PurgeBinaryLogsContext; 
MySqlParser.ResetMasterContext = ResetMasterContext; 
MySqlParser.ResetSlaveContext = ResetSlaveContext; 
MySqlParser.StartSlaveContext = StartSlaveContext; 
MySqlParser.StopSlaveContext = StopSlaveContext; 
MySqlParser.StartGroupReplicationContext = StartGroupReplicationContext; 
MySqlParser.StopGroupReplicationContext = StopGroupReplicationContext; 
MySqlParser.MasterOptionContext = MasterOptionContext; 
MySqlParser.StringMasterOptionContext = StringMasterOptionContext; 
MySqlParser.DecimalMasterOptionContext = DecimalMasterOptionContext; 
MySqlParser.BoolMasterOptionContext = BoolMasterOptionContext; 
MySqlParser.ChannelOptionContext = ChannelOptionContext; 
MySqlParser.ReplicationFilterContext = ReplicationFilterContext; 
MySqlParser.TablePairContext = TablePairContext; 
MySqlParser.ThreadTypeContext = ThreadTypeContext; 
MySqlParser.UntilOptionContext = UntilOptionContext; 
MySqlParser.ConnectionOptionContext = ConnectionOptionContext; 
MySqlParser.GtuidSetContext = GtuidSetContext; 
MySqlParser.XaStartTransactionContext = XaStartTransactionContext; 
MySqlParser.XaEndTransactionContext = XaEndTransactionContext; 
MySqlParser.XaPrepareStatementContext = XaPrepareStatementContext; 
MySqlParser.XaCommitWorkContext = XaCommitWorkContext; 
MySqlParser.XaRollbackWorkContext = XaRollbackWorkContext; 
MySqlParser.XaRecoverWorkContext = XaRecoverWorkContext; 
MySqlParser.PrepareStatementContext = PrepareStatementContext; 
MySqlParser.ExecuteStatementContext = ExecuteStatementContext; 
MySqlParser.DeallocatePrepareContext = DeallocatePrepareContext; 
MySqlParser.RoutineBodyContext = RoutineBodyContext; 
MySqlParser.BlockStatementContext = BlockStatementContext; 
MySqlParser.CaseStatementContext = CaseStatementContext; 
MySqlParser.IfStatementContext = IfStatementContext; 
MySqlParser.IterateStatementContext = IterateStatementContext; 
MySqlParser.LeaveStatementContext = LeaveStatementContext; 
MySqlParser.LoopStatementContext = LoopStatementContext; 
MySqlParser.RepeatStatementContext = RepeatStatementContext; 
MySqlParser.ReturnStatementContext = ReturnStatementContext; 
MySqlParser.WhileStatementContext = WhileStatementContext; 
MySqlParser.CursorStatementContext = CursorStatementContext; 
MySqlParser.DeclareVariableContext = DeclareVariableContext; 
MySqlParser.DeclareConditionContext = DeclareConditionContext; 
MySqlParser.DeclareCursorContext = DeclareCursorContext; 
MySqlParser.DeclareHandlerContext = DeclareHandlerContext; 
MySqlParser.DeclareRowDataTypeContext = DeclareRowDataTypeContext; 
MySqlParser.CursorDialectOptionContext = CursorDialectOptionContext; 
MySqlParser.ConditionDialectOptionContext = ConditionDialectOptionContext; 
MySqlParser.HandlerConditionValueContext = HandlerConditionValueContext; 
MySqlParser.ProcedureSqlStatementContext = ProcedureSqlStatementContext; 
MySqlParser.CaseAlternativeContext = CaseAlternativeContext; 
MySqlParser.ElifAlternativeContext = ElifAlternativeContext; 
MySqlParser.AlterUserContext = AlterUserContext; 
MySqlParser.CreateUserContext = CreateUserContext; 
MySqlParser.DropUserContext = DropUserContext; 
MySqlParser.GrantStatementContext = GrantStatementContext; 
MySqlParser.GrantProxyContext = GrantProxyContext; 
MySqlParser.RenameUserContext = RenameUserContext; 
MySqlParser.RevokeStatementContext = RevokeStatementContext; 
MySqlParser.RevokeProxyContext = RevokeProxyContext; 
MySqlParser.SetPasswordStatementContext = SetPasswordStatementContext; 
MySqlParser.GrantStatementInceptorContext = GrantStatementInceptorContext; 
MySqlParser.RevokeStatementInceptorContext = RevokeStatementInceptorContext; 
MySqlParser.ShowGrantInceptorContext = ShowGrantInceptorContext; 
MySqlParser.GrantPermissionContext = GrantPermissionContext; 
MySqlParser.RevokePermissionContext = RevokePermissionContext; 
MySqlParser.ShowPermissionContext = ShowPermissionContext; 
MySqlParser.GrantFaclContext = GrantFaclContext; 
MySqlParser.RevokeFaclContext = RevokeFaclContext; 
MySqlParser.ShowFaclContext = ShowFaclContext; 
MySqlParser.GrantQuotaContext = GrantQuotaContext; 
MySqlParser.RevokeQuotaContext = RevokeQuotaContext; 
MySqlParser.ShowQuotaContext = ShowQuotaContext; 
MySqlParser.RoleStatementInceptorContext = RoleStatementInceptorContext; 
MySqlParser.ShowPrincipalContext = ShowPrincipalContext; 
MySqlParser.PrivilegeListContext = PrivilegeListContext; 
MySqlParser.PrivlegeDefContext = PrivlegeDefContext; 
MySqlParser.PrivilegeTypeContext = PrivilegeTypeContext; 
MySqlParser.PrivilegeObjectSpecContext = PrivilegeObjectSpecContext; 
MySqlParser.PrincipalNamesContext = PrincipalNamesContext; 
MySqlParser.QuotaUserContext = QuotaUserContext; 
MySqlParser.OnTableOrViewContext = OnTableOrViewContext; 
MySqlParser.QuotaDbContext = QuotaDbContext; 
MySqlParser.UserOrGroupContext = UserOrGroupContext; 
MySqlParser.PrincipalNameContext = PrincipalNameContext; 
MySqlParser.UserSpecificationContext = UserSpecificationContext; 
MySqlParser.UserAuthOptionContext = UserAuthOptionContext; 
MySqlParser.TlsOptionContext = TlsOptionContext; 
MySqlParser.UserResourceOptionContext = UserResourceOptionContext; 
MySqlParser.UserPasswordOptionContext = UserPasswordOptionContext; 
MySqlParser.UserLockOptionContext = UserLockOptionContext; 
MySqlParser.PrivelegeClauseContext = PrivelegeClauseContext; 
MySqlParser.PrivilegeContext = PrivilegeContext; 
MySqlParser.PrivilegeLevelContext = PrivilegeLevelContext; 
MySqlParser.RenameUserClauseContext = RenameUserClauseContext; 
MySqlParser.AnalyzeTableContext = AnalyzeTableContext; 
MySqlParser.CheckTableContext = CheckTableContext; 
MySqlParser.ChecksumTableContext = ChecksumTableContext; 
MySqlParser.OptimizeTableContext = OptimizeTableContext; 
MySqlParser.RepairTableContext = RepairTableContext; 
MySqlParser.CheckTableOptionContext = CheckTableOptionContext; 
MySqlParser.CreateUdfunctionContext = CreateUdfunctionContext; 
MySqlParser.InstallPluginContext = InstallPluginContext; 
MySqlParser.UninstallPluginContext = UninstallPluginContext; 
MySqlParser.SetStatementContext = SetStatementContext; 
MySqlParser.ShowStatementContext = ShowStatementContext; 
MySqlParser.ShowStatementMysqlContext = ShowStatementMysqlContext; 
MySqlParser.ShowStatementInceptorContext = ShowStatementInceptorContext; 
MySqlParser.VariableAssignmentContext = VariableAssignmentContext; 
MySqlParser.VariableClauseContext = VariableClauseContext; 
MySqlParser.VariableFullIdContext = VariableFullIdContext; 
MySqlParser.VariableExprReservedContext = VariableExprReservedContext; 
MySqlParser.ShowCommonEntityContext = ShowCommonEntityContext; 
MySqlParser.ShowFilterContext = ShowFilterContext; 
MySqlParser.ShowGlobalInfoClauseContext = ShowGlobalInfoClauseContext; 
MySqlParser.ShowSchemaEntityContext = ShowSchemaEntityContext; 
MySqlParser.ShowProfileTypeContext = ShowProfileTypeContext; 
MySqlParser.FromDatabaseContext = FromDatabaseContext; 
MySqlParser.AddJarStatementContext = AddJarStatementContext; 
MySqlParser.ListJarStatementContext = ListJarStatementContext; 
MySqlParser.BinlogStatementContext = BinlogStatementContext; 
MySqlParser.CacheIndexStatementContext = CacheIndexStatementContext; 
MySqlParser.FlushStatementContext = FlushStatementContext; 
MySqlParser.KillStatementContext = KillStatementContext; 
MySqlParser.LoadIndexIntoCacheContext = LoadIndexIntoCacheContext; 
MySqlParser.ResetStatementContext = ResetStatementContext; 
MySqlParser.ShutdownStatementContext = ShutdownStatementContext; 
MySqlParser.SetDelimiterContext = SetDelimiterContext; 
MySqlParser.SetDelimiterTokenContext = SetDelimiterTokenContext; 
MySqlParser.SetPlsqlDialectContext = SetPlsqlDialectContext; 
MySqlParser.SetPlsqlDialectIdContext = SetPlsqlDialectIdContext; 
MySqlParser.TableIndexesContext = TableIndexesContext; 
MySqlParser.FlushOptionContext = FlushOptionContext; 
MySqlParser.FlushTableOptionContext = FlushTableOptionContext; 
MySqlParser.LoadedTableIndexesContext = LoadedTableIndexesContext; 
MySqlParser.DescribeStatementContext = DescribeStatementContext; 
MySqlParser.DescribeStatementMysqlContext = DescribeStatementMysqlContext; 
MySqlParser.SimpleDescribeStatementContext = SimpleDescribeStatementContext; 
MySqlParser.FullDescribeStatementContext = FullDescribeStatementContext; 
MySqlParser.DescribeStatementInceptorContext = DescribeStatementInceptorContext; 
MySqlParser.HelpStatementContext = HelpStatementContext; 
MySqlParser.UseStatementContext = UseStatementContext; 
MySqlParser.DescribeObjectClauseContext = DescribeObjectClauseContext; 
MySqlParser.TablePartitionedByContext = TablePartitionedByContext; 
MySqlParser.DropPartitionAtomContext = DropPartitionAtomContext; 
MySqlParser.RangePartitionContext = RangePartitionContext; 
MySqlParser.PartitionPlusContext = PartitionPlusContext; 
MySqlParser.PartitionSpecContext = PartitionSpecContext; 
MySqlParser.PartitionSpecListContext = PartitionSpecListContext; 
MySqlParser.PartitionSpecMapContext = PartitionSpecMapContext; 
MySqlParser.FullIdContext = FullIdContext; 
MySqlParser.TableNameContext = TableNameContext; 
MySqlParser.ViewNameContext = ViewNameContext; 
MySqlParser.TripleIdContext = TripleIdContext; 
MySqlParser.ColumnUidContext = ColumnUidContext; 
MySqlParser.FullColumnNameOptionalContext = FullColumnNameOptionalContext; 
MySqlParser.FullColumnNameContext = FullColumnNameContext; 
MySqlParser.PrefixedColumnNameOptionalContext = PrefixedColumnNameOptionalContext; 
MySqlParser.PrefixedColumnNameContext = PrefixedColumnNameContext; 
MySqlParser.FuncNameContext = FuncNameContext; 
MySqlParser.UdfNameContext = UdfNameContext; 
MySqlParser.ProcNameContext = ProcNameContext; 
MySqlParser.PackNameContext = PackNameContext; 
MySqlParser.FuncColumnNameContext = FuncColumnNameContext; 
MySqlParser.FuncColumnNameOptionalContext = FuncColumnNameOptionalContext; 
MySqlParser.WildFuncOptionalContext = WildFuncOptionalContext; 
MySqlParser.WildUidContext = WildUidContext; 
MySqlParser.IndexColumnNameContext = IndexColumnNameContext; 
MySqlParser.UserNameContext = UserNameContext; 
MySqlParser.MysqlVariableContext = MysqlVariableContext; 
MySqlParser.CharsetNameContext = CharsetNameContext; 
MySqlParser.CollationNameContext = CollationNameContext; 
MySqlParser.EngineNameContext = EngineNameContext; 
MySqlParser.UuidSetContext = UuidSetContext; 
MySqlParser.XidContext = XidContext; 
MySqlParser.XuidStringIdContext = XuidStringIdContext; 
MySqlParser.AuthPluginContext = AuthPluginContext; 
MySqlParser.UidContext = UidContext; 
MySqlParser.SimpleIdContext = SimpleIdContext; 
MySqlParser.TemplateIdContext = TemplateIdContext; 
MySqlParser.DottedIdContext = DottedIdContext; 
MySqlParser.FilePathContext = FilePathContext; 
MySqlParser.FileSegmentContext = FileSegmentContext; 
MySqlParser.DecimalLiteralContext = DecimalLiteralContext; 
MySqlParser.FileSizeLiteralContext = FileSizeLiteralContext; 
MySqlParser.StringLiteralContext = StringLiteralContext; 
MySqlParser.StringLiteralCollateContext = StringLiteralCollateContext; 
MySqlParser.BooleanLiteralContext = BooleanLiteralContext; 
MySqlParser.HexadecimalLiteralContext = HexadecimalLiteralContext; 
MySqlParser.NullNotnullContext = NullNotnullContext; 
MySqlParser.ConstantContext = ConstantContext; 
MySqlParser.DataTypeContext = DataTypeContext; 
MySqlParser.MySqlDataTypeContext = MySqlDataTypeContext; 
MySqlParser.InceptorDataTypeContext = InceptorDataTypeContext; 
MySqlParser.InceptorStructDataTypeItemContext = InceptorStructDataTypeItemContext; 
MySqlParser.CollectionOptionsContext = CollectionOptionsContext; 
MySqlParser.ConvertedDataTypeContext = ConvertedDataTypeContext; 
MySqlParser.LengthOneDimensionContext = LengthOneDimensionContext; 
MySqlParser.LengthTwoDimensionContext = LengthTwoDimensionContext; 
MySqlParser.LengthTwoOptionalDimensionContext = LengthTwoOptionalDimensionContext; 
MySqlParser.UidListContext = UidListContext; 
MySqlParser.UidOrderListContext = UidOrderListContext; 
MySqlParser.UidOrderContext = UidOrderContext; 
MySqlParser.FullIdListContext = FullIdListContext; 
MySqlParser.ColumnUidsContext = ColumnUidsContext; 
MySqlParser.ColumnNamesContext = ColumnNamesContext; 
MySqlParser.TablesContext = TablesContext; 
MySqlParser.IndexColumnNamesContext = IndexColumnNamesContext; 
MySqlParser.ExpressionsContext = ExpressionsContext; 
MySqlParser.ExpressionsWithDefaultsContext = ExpressionsWithDefaultsContext; 
MySqlParser.ConstantsContext = ConstantsContext; 
MySqlParser.SimpleStringsContext = SimpleStringsContext; 
MySqlParser.UserVariablesContext = UserVariablesContext; 
MySqlParser.DefaultValueContext = DefaultValueContext; 
MySqlParser.CurrentTimestampContext = CurrentTimestampContext; 
MySqlParser.ExpressionOrDefaultContext = ExpressionOrDefaultContext; 
MySqlParser.IfExistsContext = IfExistsContext; 
MySqlParser.IfNotExistsContext = IfNotExistsContext; 
MySqlParser.FunctionCallContext = FunctionCallContext; 
MySqlParser.SpecificFunctionContext = SpecificFunctionContext; 
MySqlParser.SpecificFunctionMysqlContext = SpecificFunctionMysqlContext; 
MySqlParser.SpecificFunctionInceptorContext = SpecificFunctionInceptorContext; 
MySqlParser.CastFunctionInceptorContext = CastFunctionInceptorContext; 
MySqlParser.SubstringFunctionContext = SubstringFunctionContext; 
MySqlParser.ExtractFunctionContext = ExtractFunctionContext; 
MySqlParser.CaseFunctionContext = CaseFunctionContext; 
MySqlParser.CaseFuncAlternativeContext = CaseFuncAlternativeContext; 
MySqlParser.LevelsInWeightStringContext = LevelsInWeightStringContext; 
MySqlParser.LevelInWeightListElementContext = LevelInWeightListElementContext; 
MySqlParser.AggregateWindowedFunctionContext = AggregateWindowedFunctionContext; 
MySqlParser.AggregateWindowedFunctionMysqlContext = AggregateWindowedFunctionMysqlContext; 
MySqlParser.AggregateWindowedFunctionInceptorContext = AggregateWindowedFunctionInceptorContext; 
MySqlParser.WindowOverSpecContext = WindowOverSpecContext; 
MySqlParser.WindowClauseContext = WindowClauseContext; 
MySqlParser.WindowStartBoundaryContext = WindowStartBoundaryContext; 
MySqlParser.WindowStartBoundaryDefaultContext = WindowStartBoundaryDefaultContext; 
MySqlParser.WindowEndBoundaryContext = WindowEndBoundaryContext; 
MySqlParser.PasswordFunctionClauseContext = PasswordFunctionClauseContext; 
MySqlParser.FunctionArgsContext = FunctionArgsContext; 
MySqlParser.FunctionArgContext = FunctionArgContext; 
MySqlParser.FunctionArgOptionalContext = FunctionArgOptionalContext; 
MySqlParser.ExpressionOptionalContext = ExpressionOptionalContext; 
MySqlParser.ExpressionContext = ExpressionContext; 
MySqlParser.PredicateContext = PredicateContext; 
MySqlParser.ExpressionAtomContext = ExpressionAtomContext; 
MySqlParser.UnaryPriorOperatorContext = UnaryPriorOperatorContext; 
MySqlParser.UnaryOperatorContext = UnaryOperatorContext; 
MySqlParser.ComparisonOperatorContext = ComparisonOperatorContext; 
MySqlParser.LogicalOperatorContext = LogicalOperatorContext; 
MySqlParser.BitOperatorContext = BitOperatorContext; 
MySqlParser.MathOperatorContext = MathOperatorContext; 
MySqlParser.CursorAttributeContext = CursorAttributeContext; 
MySqlParser.CharsetNameBaseContext = CharsetNameBaseContext; 
MySqlParser.TransactionLevelBaseContext = TransactionLevelBaseContext; 
MySqlParser.PrivilegesBaseContext = PrivilegesBaseContext; 
MySqlParser.IntervalTypeBaseContext = IntervalTypeBaseContext; 
MySqlParser.DataTypeBaseContext = DataTypeBaseContext; 
MySqlParser.KeywordsCanBeIdContext = KeywordsCanBeIdContext; 
MySqlParser.KeywordsCanBeIdMysqlContext = KeywordsCanBeIdMysqlContext; 
MySqlParser.InceptorKeywordCanBeIdContext = InceptorKeywordCanBeIdContext; 
MySqlParser.FileFormatCanBeIdContext = FileFormatCanBeIdContext; 
MySqlParser.FunctionNameBaseContext = FunctionNameBaseContext; 
MySqlParser.FunctionNameBaseMysqlContext = FunctionNameBaseMysqlContext; 
MySqlParser.FunctionNameBaseExtraContext = FunctionNameBaseExtraContext; 
MySqlParser.DatabaseNameContext = DatabaseNameContext; 
MySqlParser.DatabaseNameAllowEmptyContext = DatabaseNameAllowEmptyContext; 
MySqlParser.BaseElementAliasContext = BaseElementAliasContext; 
MySqlParser.EmptyElementContext = EmptyElementContext; 
MySqlParser.PlaceholderContext = PlaceholderContext; 
MySqlParser.PlsqlStatementContext = PlsqlStatementContext; 
MySqlParser.AnonymousBlockContext = AnonymousBlockContext; 
MySqlParser.CreateFunctionBodyContext = CreateFunctionBodyContext; 
MySqlParser.FunctionBodyContext = FunctionBodyContext; 
MySqlParser.CreateProcedureBodyContext = CreateProcedureBodyContext; 
MySqlParser.ProcedureBodyContext = ProcedureBodyContext; 
MySqlParser.DropPackageContext = DropPackageContext; 
MySqlParser.CreatePackageContext = CreatePackageContext; 
MySqlParser.CreatePackageBodyContext = CreatePackageBodyContext; 
MySqlParser.IsOrAsContext = IsOrAsContext; 
MySqlParser.PackageObjSpecsContext = PackageObjSpecsContext; 
MySqlParser.PackageObjBodysContext = PackageObjBodysContext; 
MySqlParser.PackageObjSpecContext = PackageObjSpecContext; 
MySqlParser.PackageObjBodyContext = PackageObjBodyContext; 
MySqlParser.ProcedureSpecContext = ProcedureSpecContext; 
MySqlParser.FunctionSpecContext = FunctionSpecContext; 
MySqlParser.DeclareSpecContext = DeclareSpecContext; 
MySqlParser.VariableDeclarationContext = VariableDeclarationContext; 
MySqlParser.CursorDeclarationContext = CursorDeclarationContext; 
MySqlParser.CursorParameterContext = CursorParameterContext; 
MySqlParser.ExceptionDeclarationContext = ExceptionDeclarationContext; 
MySqlParser.PragmaDeclarationContext = PragmaDeclarationContext; 
MySqlParser.RecordTypeDefContext = RecordTypeDefContext; 
MySqlParser.FieldSpecContext = FieldSpecContext; 
MySqlParser.RefCursorTypeDefContext = RefCursorTypeDefContext; 
MySqlParser.TypeDeclarationContext = TypeDeclarationContext; 
MySqlParser.TableTypeDefContext = TableTypeDefContext; 
MySqlParser.TableIndexedByPartContext = TableIndexedByPartContext; 
MySqlParser.VarrayTypeDefContext = VarrayTypeDefContext; 
MySqlParser.SeqOfStatementsContext = SeqOfStatementsContext; 
MySqlParser.LabelOrSqlStatementContext = LabelOrSqlStatementContext; 
MySqlParser.LabelDeclarationContext = LabelDeclarationContext; 
MySqlParser.ProcedureSqlStatement2Context = ProcedureSqlStatement2Context; 
MySqlParser.AssignmentStatementContext = AssignmentStatementContext; 
MySqlParser.ProcedureWildcardContext = ProcedureWildcardContext; 
MySqlParser.ContinueStatementContext = ContinueStatementContext; 
MySqlParser.ExitStatementContext = ExitStatementContext; 
MySqlParser.GotoStatementContext = GotoStatementContext; 
MySqlParser.IfStatement2Context = IfStatement2Context; 
MySqlParser.ElsifPartContext = ElsifPartContext; 
MySqlParser.ElsePartContext = ElsePartContext; 
MySqlParser.LoopStatement2Context = LoopStatement2Context; 
MySqlParser.CursorLoopParamContext = CursorLoopParamContext; 
MySqlParser.ForallStatementContext = ForallStatementContext; 
MySqlParser.BoundsClauseContext = BoundsClauseContext; 
MySqlParser.BetweenBoundContext = BetweenBoundContext; 
MySqlParser.LowerBoundContext = LowerBoundContext; 
MySqlParser.UpperBoundContext = UpperBoundContext; 
MySqlParser.NullStatementContext = NullStatementContext; 
MySqlParser.RaiseStatementContext = RaiseStatementContext; 
MySqlParser.ReturnStatement2Context = ReturnStatement2Context; 
MySqlParser.ExceptionBlockContext = ExceptionBlockContext; 
MySqlParser.ExceptionHandlerContext = ExceptionHandlerContext; 
MySqlParser.BlockStatement2Context = BlockStatement2Context; 
MySqlParser.DeclareBlockContext = DeclareBlockContext; 
MySqlParser.SeqStatementBlockContext = SeqStatementBlockContext; 
MySqlParser.PackageBodyBlockContext = PackageBodyBlockContext; 
MySqlParser.ParameterContext = ParameterContext; 
MySqlParser.GeneralElementContext = GeneralElementContext; 
MySqlParser.GeneralElementPartContext = GeneralElementPartContext; 
MySqlParser.GeneralElementPartChainContext = GeneralElementPartChainContext; 
MySqlParser.GeneralArgumentContext = GeneralArgumentContext; 
MySqlParser.FunctionArgumentContext = FunctionArgumentContext; 
MySqlParser.ArgumentContext = ArgumentContext; 
MySqlParser.ArrayArgumentContext = ArrayArgumentContext; 
MySqlParser.TypeSpecContext = TypeSpecContext; 
MySqlParser.DefaultValuePartContext = DefaultValuePartContext; 
MySqlParser.LabelNameContext = LabelNameContext; 
MySqlParser.NumericContext = NumericContext; 
MySqlParser.NumericNegativeContext = NumericNegativeContext; 
MySqlParser.ExceptionNameContext = ExceptionNameContext; 
MySqlParser.RoutineNameContext = RoutineNameContext; 
MySqlParser.IdExpressionContext = IdExpressionContext; 
MySqlParser.ChainedIdExpressionContext = ChainedIdExpressionContext; 
MySqlParser.CursorNameContext = CursorNameContext; 
MySqlParser.PartitionExtensionClauseContext = PartitionExtensionClauseContext; 
MySqlParser.ConditionContext = ConditionContext; 
MySqlParser.NormalSqlStatementContext = NormalSqlStatementContext; 
MySqlParser.ExecuteImmediateContext = ExecuteImmediateContext; 
MySqlParser.BulkCollectClauseContext = BulkCollectClauseContext; 
MySqlParser.UsingClauseContext = UsingClauseContext; 
MySqlParser.UsingClauseElementContext = UsingClauseElementContext; 
MySqlParser.CursorManipulationStatementsContext = CursorManipulationStatementsContext; 
MySqlParser.CloseStatementContext = CloseStatementContext; 
MySqlParser.OpenStatementContext = OpenStatementContext; 
MySqlParser.FetchStatementContext = FetchStatementContext; 
MySqlParser.OpenForStatementContext = OpenForStatementContext; 
MySqlParser.ConcatenationContext = ConcatenationContext; 
