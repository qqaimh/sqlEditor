// Generated from InceptorOracle.g4 by ANTLR 4.9
// jshint ignore: start
import antlr4 from 'antlr4';
import InceptorOracleListener from './InceptorOracleListener.js';
import InceptorOracleVisitor from './InceptorOracleVisitor.js';


const serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786",
    "\u5964\u0003\u023f\u1ef0\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004",
    "\u0004\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t",
    "\u0007\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004",
    "\f\t\f\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010",
    "\t\u0010\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013",
    "\u0004\u0014\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017",
    "\t\u0017\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a",
    "\u0004\u001b\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e",
    "\t\u001e\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#",
    "\t#\u0004$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004",
    "*\t*\u0004+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u0004",
    "1\t1\u00042\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u0004",
    "8\t8\u00049\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004",
    "?\t?\u0004@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004",
    "F\tF\u0004G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004",
    "M\tM\u0004N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004",
    "T\tT\u0004U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004",
    "[\t[\u0004\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004",
    "b\tb\u0004c\tc\u0004d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004",
    "i\ti\u0004j\tj\u0004k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004",
    "p\tp\u0004q\tq\u0004r\tr\u0004s\ts\u0004t\tt\u0004u\tu\u0004v\tv\u0004",
    "w\tw\u0004x\tx\u0004y\ty\u0004z\tz\u0004{\t{\u0004|\t|\u0004}\t}\u0004",
    "~\t~\u0004\u007f\t\u007f\u0004\u0080\t\u0080\u0004\u0081\t\u0081\u0004",
    "\u0082\t\u0082\u0004\u0083\t\u0083\u0004\u0084\t\u0084\u0004\u0085\t",
    "\u0085\u0004\u0086\t\u0086\u0004\u0087\t\u0087\u0004\u0088\t\u0088\u0004",
    "\u0089\t\u0089\u0004\u008a\t\u008a\u0004\u008b\t\u008b\u0004\u008c\t",
    "\u008c\u0004\u008d\t\u008d\u0004\u008e\t\u008e\u0004\u008f\t\u008f\u0004",
    "\u0090\t\u0090\u0004\u0091\t\u0091\u0004\u0092\t\u0092\u0004\u0093\t",
    "\u0093\u0004\u0094\t\u0094\u0004\u0095\t\u0095\u0004\u0096\t\u0096\u0004",
    "\u0097\t\u0097\u0004\u0098\t\u0098\u0004\u0099\t\u0099\u0004\u009a\t",
    "\u009a\u0004\u009b\t\u009b\u0004\u009c\t\u009c\u0004\u009d\t\u009d\u0004",
    "\u009e\t\u009e\u0004\u009f\t\u009f\u0004\u00a0\t\u00a0\u0004\u00a1\t",
    "\u00a1\u0004\u00a2\t\u00a2\u0004\u00a3\t\u00a3\u0004\u00a4\t\u00a4\u0004",
    "\u00a5\t\u00a5\u0004\u00a6\t\u00a6\u0004\u00a7\t\u00a7\u0004\u00a8\t",
    "\u00a8\u0004\u00a9\t\u00a9\u0004\u00aa\t\u00aa\u0004\u00ab\t\u00ab\u0004",
    "\u00ac\t\u00ac\u0004\u00ad\t\u00ad\u0004\u00ae\t\u00ae\u0004\u00af\t",
    "\u00af\u0004\u00b0\t\u00b0\u0004\u00b1\t\u00b1\u0004\u00b2\t\u00b2\u0004",
    "\u00b3\t\u00b3\u0004\u00b4\t\u00b4\u0004\u00b5\t\u00b5\u0004\u00b6\t",
    "\u00b6\u0004\u00b7\t\u00b7\u0004\u00b8\t\u00b8\u0004\u00b9\t\u00b9\u0004",
    "\u00ba\t\u00ba\u0004\u00bb\t\u00bb\u0004\u00bc\t\u00bc\u0004\u00bd\t",
    "\u00bd\u0004\u00be\t\u00be\u0004\u00bf\t\u00bf\u0004\u00c0\t\u00c0\u0004",
    "\u00c1\t\u00c1\u0004\u00c2\t\u00c2\u0004\u00c3\t\u00c3\u0004\u00c4\t",
    "\u00c4\u0004\u00c5\t\u00c5\u0004\u00c6\t\u00c6\u0004\u00c7\t\u00c7\u0004",
    "\u00c8\t\u00c8\u0004\u00c9\t\u00c9\u0004\u00ca\t\u00ca\u0004\u00cb\t",
    "\u00cb\u0004\u00cc\t\u00cc\u0004\u00cd\t\u00cd\u0004\u00ce\t\u00ce\u0004",
    "\u00cf\t\u00cf\u0004\u00d0\t\u00d0\u0004\u00d1\t\u00d1\u0004\u00d2\t",
    "\u00d2\u0004\u00d3\t\u00d3\u0004\u00d4\t\u00d4\u0004\u00d5\t\u00d5\u0004",
    "\u00d6\t\u00d6\u0004\u00d7\t\u00d7\u0004\u00d8\t\u00d8\u0004\u00d9\t",
    "\u00d9\u0004\u00da\t\u00da\u0004\u00db\t\u00db\u0004\u00dc\t\u00dc\u0004",
    "\u00dd\t\u00dd\u0004\u00de\t\u00de\u0004\u00df\t\u00df\u0004\u00e0\t",
    "\u00e0\u0004\u00e1\t\u00e1\u0004\u00e2\t\u00e2\u0004\u00e3\t\u00e3\u0004",
    "\u00e4\t\u00e4\u0004\u00e5\t\u00e5\u0004\u00e6\t\u00e6\u0004\u00e7\t",
    "\u00e7\u0004\u00e8\t\u00e8\u0004\u00e9\t\u00e9\u0004\u00ea\t\u00ea\u0004",
    "\u00eb\t\u00eb\u0004\u00ec\t\u00ec\u0004\u00ed\t\u00ed\u0004\u00ee\t",
    "\u00ee\u0004\u00ef\t\u00ef\u0004\u00f0\t\u00f0\u0004\u00f1\t\u00f1\u0004",
    "\u00f2\t\u00f2\u0004\u00f3\t\u00f3\u0004\u00f4\t\u00f4\u0004\u00f5\t",
    "\u00f5\u0004\u00f6\t\u00f6\u0004\u00f7\t\u00f7\u0004\u00f8\t\u00f8\u0004",
    "\u00f9\t\u00f9\u0004\u00fa\t\u00fa\u0004\u00fb\t\u00fb\u0004\u00fc\t",
    "\u00fc\u0004\u00fd\t\u00fd\u0004\u00fe\t\u00fe\u0004\u00ff\t\u00ff\u0004",
    "\u0100\t\u0100\u0004\u0101\t\u0101\u0004\u0102\t\u0102\u0004\u0103\t",
    "\u0103\u0004\u0104\t\u0104\u0004\u0105\t\u0105\u0004\u0106\t\u0106\u0004",
    "\u0107\t\u0107\u0004\u0108\t\u0108\u0004\u0109\t\u0109\u0004\u010a\t",
    "\u010a\u0004\u010b\t\u010b\u0004\u010c\t\u010c\u0004\u010d\t\u010d\u0004",
    "\u010e\t\u010e\u0004\u010f\t\u010f\u0004\u0110\t\u0110\u0004\u0111\t",
    "\u0111\u0004\u0112\t\u0112\u0004\u0113\t\u0113\u0004\u0114\t\u0114\u0004",
    "\u0115\t\u0115\u0004\u0116\t\u0116\u0004\u0117\t\u0117\u0004\u0118\t",
    "\u0118\u0004\u0119\t\u0119\u0004\u011a\t\u011a\u0004\u011b\t\u011b\u0004",
    "\u011c\t\u011c\u0004\u011d\t\u011d\u0004\u011e\t\u011e\u0004\u011f\t",
    "\u011f\u0004\u0120\t\u0120\u0004\u0121\t\u0121\u0004\u0122\t\u0122\u0004",
    "\u0123\t\u0123\u0004\u0124\t\u0124\u0004\u0125\t\u0125\u0004\u0126\t",
    "\u0126\u0004\u0127\t\u0127\u0004\u0128\t\u0128\u0004\u0129\t\u0129\u0004",
    "\u012a\t\u012a\u0004\u012b\t\u012b\u0004\u012c\t\u012c\u0004\u012d\t",
    "\u012d\u0004\u012e\t\u012e\u0004\u012f\t\u012f\u0004\u0130\t\u0130\u0004",
    "\u0131\t\u0131\u0004\u0132\t\u0132\u0004\u0133\t\u0133\u0004\u0134\t",
    "\u0134\u0004\u0135\t\u0135\u0004\u0136\t\u0136\u0004\u0137\t\u0137\u0004",
    "\u0138\t\u0138\u0004\u0139\t\u0139\u0004\u013a\t\u013a\u0004\u013b\t",
    "\u013b\u0004\u013c\t\u013c\u0004\u013d\t\u013d\u0004\u013e\t\u013e\u0004",
    "\u013f\t\u013f\u0004\u0140\t\u0140\u0004\u0141\t\u0141\u0004\u0142\t",
    "\u0142\u0004\u0143\t\u0143\u0004\u0144\t\u0144\u0004\u0145\t\u0145\u0004",
    "\u0146\t\u0146\u0004\u0147\t\u0147\u0004\u0148\t\u0148\u0004\u0149\t",
    "\u0149\u0004\u014a\t\u014a\u0004\u014b\t\u014b\u0004\u014c\t\u014c\u0004",
    "\u014d\t\u014d\u0004\u014e\t\u014e\u0004\u014f\t\u014f\u0004\u0150\t",
    "\u0150\u0004\u0151\t\u0151\u0004\u0152\t\u0152\u0004\u0153\t\u0153\u0004",
    "\u0154\t\u0154\u0004\u0155\t\u0155\u0004\u0156\t\u0156\u0004\u0157\t",
    "\u0157\u0004\u0158\t\u0158\u0004\u0159\t\u0159\u0004\u015a\t\u015a\u0004",
    "\u015b\t\u015b\u0004\u015c\t\u015c\u0004\u015d\t\u015d\u0004\u015e\t",
    "\u015e\u0004\u015f\t\u015f\u0004\u0160\t\u0160\u0004\u0161\t\u0161\u0004",
    "\u0162\t\u0162\u0004\u0163\t\u0163\u0004\u0164\t\u0164\u0004\u0165\t",
    "\u0165\u0004\u0166\t\u0166\u0004\u0167\t\u0167\u0004\u0168\t\u0168\u0004",
    "\u0169\t\u0169\u0004\u016a\t\u016a\u0004\u016b\t\u016b\u0004\u016c\t",
    "\u016c\u0004\u016d\t\u016d\u0004\u016e\t\u016e\u0004\u016f\t\u016f\u0004",
    "\u0170\t\u0170\u0004\u0171\t\u0171\u0004\u0172\t\u0172\u0004\u0173\t",
    "\u0173\u0004\u0174\t\u0174\u0004\u0175\t\u0175\u0004\u0176\t\u0176\u0004",
    "\u0177\t\u0177\u0004\u0178\t\u0178\u0004\u0179\t\u0179\u0004\u017a\t",
    "\u017a\u0004\u017b\t\u017b\u0004\u017c\t\u017c\u0004\u017d\t\u017d\u0004",
    "\u017e\t\u017e\u0004\u017f\t\u017f\u0004\u0180\t\u0180\u0004\u0181\t",
    "\u0181\u0004\u0182\t\u0182\u0004\u0183\t\u0183\u0004\u0184\t\u0184\u0004",
    "\u0185\t\u0185\u0004\u0186\t\u0186\u0004\u0187\t\u0187\u0004\u0188\t",
    "\u0188\u0004\u0189\t\u0189\u0004\u018a\t\u018a\u0004\u018b\t\u018b\u0004",
    "\u018c\t\u018c\u0004\u018d\t\u018d\u0004\u018e\t\u018e\u0004\u018f\t",
    "\u018f\u0004\u0190\t\u0190\u0004\u0191\t\u0191\u0004\u0192\t\u0192\u0004",
    "\u0193\t\u0193\u0004\u0194\t\u0194\u0004\u0195\t\u0195\u0004\u0196\t",
    "\u0196\u0004\u0197\t\u0197\u0004\u0198\t\u0198\u0004\u0199\t\u0199\u0004",
    "\u019a\t\u019a\u0004\u019b\t\u019b\u0004\u019c\t\u019c\u0004\u019d\t",
    "\u019d\u0004\u019e\t\u019e\u0004\u019f\t\u019f\u0004\u01a0\t\u01a0\u0004",
    "\u01a1\t\u01a1\u0004\u01a2\t\u01a2\u0004\u01a3\t\u01a3\u0004\u01a4\t",
    "\u01a4\u0004\u01a5\t\u01a5\u0004\u01a6\t\u01a6\u0004\u01a7\t\u01a7\u0004",
    "\u01a8\t\u01a8\u0004\u01a9\t\u01a9\u0004\u01aa\t\u01aa\u0004\u01ab\t",
    "\u01ab\u0004\u01ac\t\u01ac\u0004\u01ad\t\u01ad\u0004\u01ae\t\u01ae\u0004",
    "\u01af\t\u01af\u0004\u01b0\t\u01b0\u0004\u01b1\t\u01b1\u0004\u01b2\t",
    "\u01b2\u0004\u01b3\t\u01b3\u0004\u01b4\t\u01b4\u0004\u01b5\t\u01b5\u0004",
    "\u01b6\t\u01b6\u0004\u01b7\t\u01b7\u0004\u01b8\t\u01b8\u0004\u01b9\t",
    "\u01b9\u0004\u01ba\t\u01ba\u0004\u01bb\t\u01bb\u0004\u01bc\t\u01bc\u0004",
    "\u01bd\t\u01bd\u0004\u01be\t\u01be\u0004\u01bf\t\u01bf\u0004\u01c0\t",
    "\u01c0\u0004\u01c1\t\u01c1\u0004\u01c2\t\u01c2\u0004\u01c3\t\u01c3\u0004",
    "\u01c4\t\u01c4\u0004\u01c5\t\u01c5\u0004\u01c6\t\u01c6\u0004\u01c7\t",
    "\u01c7\u0004\u01c8\t\u01c8\u0004\u01c9\t\u01c9\u0004\u01ca\t\u01ca\u0004",
    "\u01cb\t\u01cb\u0004\u01cc\t\u01cc\u0004\u01cd\t\u01cd\u0004\u01ce\t",
    "\u01ce\u0004\u01cf\t\u01cf\u0004\u01d0\t\u01d0\u0004\u01d1\t\u01d1\u0004",
    "\u01d2\t\u01d2\u0004\u01d3\t\u01d3\u0004\u01d4\t\u01d4\u0004\u01d5\t",
    "\u01d5\u0004\u01d6\t\u01d6\u0004\u01d7\t\u01d7\u0004\u01d8\t\u01d8\u0004",
    "\u01d9\t\u01d9\u0004\u01da\t\u01da\u0004\u01db\t\u01db\u0004\u01dc\t",
    "\u01dc\u0004\u01dd\t\u01dd\u0004\u01de\t\u01de\u0004\u01df\t\u01df\u0004",
    "\u01e0\t\u01e0\u0004\u01e1\t\u01e1\u0004\u01e2\t\u01e2\u0004\u01e3\t",
    "\u01e3\u0004\u01e4\t\u01e4\u0004\u01e5\t\u01e5\u0004\u01e6\t\u01e6\u0004",
    "\u01e7\t\u01e7\u0004\u01e8\t\u01e8\u0004\u01e9\t\u01e9\u0004\u01ea\t",
    "\u01ea\u0004\u01eb\t\u01eb\u0004\u01ec\t\u01ec\u0004\u01ed\t\u01ed\u0004",
    "\u01ee\t\u01ee\u0004\u01ef\t\u01ef\u0004\u01f0\t\u01f0\u0004\u01f1\t",
    "\u01f1\u0004\u01f2\t\u01f2\u0004\u01f3\t\u01f3\u0004\u01f4\t\u01f4\u0004",
    "\u01f5\t\u01f5\u0004\u01f6\t\u01f6\u0004\u01f7\t\u01f7\u0004\u01f8\t",
    "\u01f8\u0004\u01f9\t\u01f9\u0004\u01fa\t\u01fa\u0004\u01fb\t\u01fb\u0004",
    "\u01fc\t\u01fc\u0004\u01fd\t\u01fd\u0004\u01fe\t\u01fe\u0004\u01ff\t",
    "\u01ff\u0004\u0200\t\u0200\u0004\u0201\t\u0201\u0004\u0202\t\u0202\u0004",
    "\u0203\t\u0203\u0004\u0204\t\u0204\u0004\u0205\t\u0205\u0004\u0206\t",
    "\u0206\u0004\u0207\t\u0207\u0004\u0208\t\u0208\u0004\u0209\t\u0209\u0004",
    "\u020a\t\u020a\u0004\u020b\t\u020b\u0004\u020c\t\u020c\u0004\u020d\t",
    "\u020d\u0004\u020e\t\u020e\u0004\u020f\t\u020f\u0004\u0210\t\u0210\u0004",
    "\u0211\t\u0211\u0004\u0212\t\u0212\u0004\u0213\t\u0213\u0004\u0214\t",
    "\u0214\u0004\u0215\t\u0215\u0004\u0216\t\u0216\u0004\u0217\t\u0217\u0004",
    "\u0218\t\u0218\u0004\u0219\t\u0219\u0004\u021a\t\u021a\u0004\u021b\t",
    "\u021b\u0004\u021c\t\u021c\u0004\u021d\t\u021d\u0004\u021e\t\u021e\u0004",
    "\u021f\t\u021f\u0004\u0220\t\u0220\u0004\u0221\t\u0221\u0004\u0222\t",
    "\u0222\u0004\u0223\t\u0223\u0004\u0224\t\u0224\u0004\u0225\t\u0225\u0004",
    "\u0226\t\u0226\u0004\u0227\t\u0227\u0004\u0228\t\u0228\u0004\u0229\t",
    "\u0229\u0004\u022a\t\u022a\u0004\u022b\t\u022b\u0004\u022c\t\u022c\u0004",
    "\u022d\t\u022d\u0004\u022e\t\u022e\u0004\u022f\t\u022f\u0004\u0230\t",
    "\u0230\u0004\u0231\t\u0231\u0004\u0232\t\u0232\u0004\u0233\t\u0233\u0004",
    "\u0234\t\u0234\u0004\u0235\t\u0235\u0004\u0236\t\u0236\u0004\u0237\t",
    "\u0237\u0004\u0238\t\u0238\u0004\u0239\t\u0239\u0004\u023a\t\u023a\u0004",
    "\u023b\t\u023b\u0004\u023c\t\u023c\u0004\u023d\t\u023d\u0004\u023e\t",
    "\u023e\u0004\u023f\t\u023f\u0004\u0240\t\u0240\u0004\u0241\t\u0241\u0004",
    "\u0242\t\u0242\u0004\u0243\t\u0243\u0004\u0244\t\u0244\u0004\u0245\t",
    "\u0245\u0004\u0246\t\u0246\u0004\u0247\t\u0247\u0004\u0248\t\u0248\u0004",
    "\u0249\t\u0249\u0004\u024a\t\u024a\u0004\u024b\t\u024b\u0004\u024c\t",
    "\u024c\u0004\u024d\t\u024d\u0004\u024e\t\u024e\u0004\u024f\t\u024f\u0004",
    "\u0250\t\u0250\u0004\u0251\t\u0251\u0004\u0252\t\u0252\u0004\u0253\t",
    "\u0253\u0004\u0254\t\u0254\u0004\u0255\t\u0255\u0004\u0256\t\u0256\u0004",
    "\u0257\t\u0257\u0004\u0258\t\u0258\u0004\u0259\t\u0259\u0004\u025a\t",
    "\u025a\u0004\u025b\t\u025b\u0004\u025c\t\u025c\u0004\u025d\t\u025d\u0004",
    "\u025e\t\u025e\u0004\u025f\t\u025f\u0004\u0260\t\u0260\u0004\u0261\t",
    "\u0261\u0004\u0262\t\u0262\u0004\u0263\t\u0263\u0004\u0264\t\u0264\u0004",
    "\u0265\t\u0265\u0004\u0266\t\u0266\u0004\u0267\t\u0267\u0004\u0268\t",
    "\u0268\u0004\u0269\t\u0269\u0004\u026a\t\u026a\u0004\u026b\t\u026b\u0004",
    "\u026c\t\u026c\u0004\u026d\t\u026d\u0004\u026e\t\u026e\u0004\u026f\t",
    "\u026f\u0004\u0270\t\u0270\u0004\u0271\t\u0271\u0004\u0272\t\u0272\u0004",
    "\u0273\t\u0273\u0004\u0274\t\u0274\u0004\u0275\t\u0275\u0004\u0276\t",
    "\u0276\u0004\u0277\t\u0277\u0004\u0278\t\u0278\u0004\u0279\t\u0279\u0004",
    "\u027a\t\u027a\u0004\u027b\t\u027b\u0004\u027c\t\u027c\u0004\u027d\t",
    "\u027d\u0004\u027e\t\u027e\u0004\u027f\t\u027f\u0004\u0280\t\u0280\u0004",
    "\u0281\t\u0281\u0004\u0282\t\u0282\u0004\u0283\t\u0283\u0004\u0284\t",
    "\u0284\u0004\u0285\t\u0285\u0004\u0286\t\u0286\u0004\u0287\t\u0287\u0004",
    "\u0288\t\u0288\u0004\u0289\t\u0289\u0004\u028a\t\u028a\u0004\u028b\t",
    "\u028b\u0004\u028c\t\u028c\u0004\u028d\t\u028d\u0004\u028e\t\u028e\u0004",
    "\u028f\t\u028f\u0004\u0290\t\u0290\u0004\u0291\t\u0291\u0004\u0292\t",
    "\u0292\u0004\u0293\t\u0293\u0004\u0294\t\u0294\u0004\u0295\t\u0295\u0004",
    "\u0296\t\u0296\u0004\u0297\t\u0297\u0004\u0298\t\u0298\u0004\u0299\t",
    "\u0299\u0004\u029a\t\u029a\u0004\u029b\t\u029b\u0004\u029c\t\u029c\u0004",
    "\u029d\t\u029d\u0004\u029e\t\u029e\u0004\u029f\t\u029f\u0004\u02a0\t",
    "\u02a0\u0004\u02a1\t\u02a1\u0004\u02a2\t\u02a2\u0004\u02a3\t\u02a3\u0004",
    "\u02a4\t\u02a4\u0004\u02a5\t\u02a5\u0004\u02a6\t\u02a6\u0004\u02a7\t",
    "\u02a7\u0004\u02a8\t\u02a8\u0004\u02a9\t\u02a9\u0004\u02aa\t\u02aa\u0004",
    "\u02ab\t\u02ab\u0004\u02ac\t\u02ac\u0004\u02ad\t\u02ad\u0004\u02ae\t",
    "\u02ae\u0004\u02af\t\u02af\u0004\u02b0\t\u02b0\u0004\u02b1\t\u02b1\u0004",
    "\u02b2\t\u02b2\u0004\u02b3\t\u02b3\u0004\u02b4\t\u02b4\u0004\u02b5\t",
    "\u02b5\u0004\u02b6\t\u02b6\u0004\u02b7\t\u02b7\u0004\u02b8\t\u02b8\u0004",
    "\u02b9\t\u02b9\u0004\u02ba\t\u02ba\u0004\u02bb\t\u02bb\u0004\u02bc\t",
    "\u02bc\u0004\u02bd\t\u02bd\u0004\u02be\t\u02be\u0004\u02bf\t\u02bf\u0004",
    "\u02c0\t\u02c0\u0004\u02c1\t\u02c1\u0004\u02c2\t\u02c2\u0004\u02c3\t",
    "\u02c3\u0004\u02c4\t\u02c4\u0004\u02c5\t\u02c5\u0004\u02c6\t\u02c6\u0004",
    "\u02c7\t\u02c7\u0004\u02c8\t\u02c8\u0004\u02c9\t\u02c9\u0004\u02ca\t",
    "\u02ca\u0004\u02cb\t\u02cb\u0004\u02cc\t\u02cc\u0004\u02cd\t\u02cd\u0004",
    "\u02ce\t\u02ce\u0004\u02cf\t\u02cf\u0004\u02d0\t\u02d0\u0004\u02d1\t",
    "\u02d1\u0004\u02d2\t\u02d2\u0004\u02d3\t\u02d3\u0004\u02d4\t\u02d4\u0004",
    "\u02d5\t\u02d5\u0003\u0002\u0003\u0002\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0005\u0003\u05b0\n\u0003\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0005\u0004\u05b5\n\u0004\u0003\u0005\u0003\u0005\u0005\u0005\u05b9",
    "\n\u0005\u0003\u0006\u0003\u0006\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0003\b\u0003\b\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t",
    "\u0005\t\u05c8\n\t\u0003\t\u0003\t\u0003\t\u0005\t\u05cd\n\t\u0005\t",
    "\u05cf\n\t\u0003\n\u0003\n\u0003\u000b\u0003\u000b\u0003\f\u0003\f\u0003",
    "\r\u0003\r\u0003\r\u0003\r\u0003\r\u0005\r\u05dc\n\r\u0003\u000e\u0003",
    "\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0007\u000e\u05e3\n\u000e",
    "\f\u000e\u000e\u000e\u05e6\u000b\u000e\u0003\u000e\u0003\u000e\u0003",
    "\u000e\u0003\u000e\u0005\u000e\u05ec\n\u000e\u0003\u000f\u0003\u000f",
    "\u0003\u000f\u0005\u000f\u05f1\n\u000f\u0003\u0010\u0003\u0010\u0003",
    "\u0010\u0003\u0010\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0012\u0003",
    "\u0012\u0005\u0012\u05fc\n\u0012\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0007\u0013\u0601\n\u0013\f\u0013\u000e\u0013\u0604\u000b\u0013\u0003",
    "\u0014\u0003\u0014\u0003\u0014\u0007\u0014\u0609\n\u0014\f\u0014\u000e",
    "\u0014\u060c\u000b\u0014\u0003\u0015\u0003\u0015\u0003\u0015\u0007\u0015",
    "\u0611\n\u0015\f\u0015\u000e\u0015\u0614\u000b\u0015\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0005\u0016\u0619\n\u0016\u0003\u0017\u0003\u0017",
    "\u0003\u0017\u0007\u0017\u061e\n\u0017\f\u0017\u000e\u0017\u0621\u000b",
    "\u0017\u0003\u0018\u0003\u0018\u0005\u0018\u0625\n\u0018\u0003\u0019",
    "\u0003\u0019\u0003\u0019\u0003\u001a\u0003\u001a\u0003\u001a\u0005\u001a",
    "\u062d\n\u001a\u0003\u001a\u0005\u001a\u0630\n\u001a\u0003\u001b\u0003",
    "\u001b\u0003\u001b\u0005\u001b\u0635\n\u001b\u0003\u001b\u0005\u001b",
    "\u0638\n\u001b\u0003\u001b\u0005\u001b\u063b\n\u001b\u0003\u001c\u0003",
    "\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003",
    "\u001c\u0003\u001c\u0005\u001c\u0646\n\u001c\u0003\u001d\u0003\u001d",
    "\u0003\u001d\u0003\u001e\u0003\u001e\u0005\u001e\u064d\n\u001e\u0003",
    "\u001f\u0003\u001f\u0003\u001f\u0003 \u0003 \u0003 \u0007 \u0655\n ",
    "\f \u000e \u0658\u000b \u0003!\u0003!\u0003\"\u0003\"\u0003\"\u0007",
    "\"\u065f\n\"\f\"\u000e\"\u0662\u000b\"\u0003#\u0003#\u0003#\u0003#\u0003",
    "#\u0005#\u0669\n#\u0003$\u0003$\u0003$\u0007$\u066e\n$\f$\u000e$\u0671",
    "\u000b$\u0003%\u0003%\u0003%\u0003%\u0003%\u0005%\u0678\n%\u0003%\u0005",
    "%\u067b\n%\u0003&\u0003&\u0005&\u067f\n&\u0003&\u0003&\u0003&\u0003",
    "&\u0005&\u0685\n&\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0005\'\u068c",
    "\n\'\u0003(\u0003(\u0003(\u0005(\u0691\n(\u0003)\u0003)\u0003)\u0003",
    ")\u0003)\u0005)\u0698\n)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003",
    ")\u0003)\u0003)\u0003)\u0007)\u06a4\n)\f)\u000e)\u06a7\u000b)\u0005",
    ")\u06a9\n)\u0003)\u0003)\u0005)\u06ad\n)\u0003*\u0003*\u0003*\u0003",
    "*\u0003*\u0005*\u06b4\n*\u0003+\u0003+\u0003,\u0003,\u0003-\u0003-\u0003",
    "-\u0007-\u06bd\n-\f-\u000e-\u06c0\u000b-\u0003.\u0003.\u0003.\u0007",
    ".\u06c5\n.\f.\u000e.\u06c8\u000b.\u0003/\u0003/\u0003/\u0003/\u0003",
    "/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003",
    "/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003",
    "/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0005/\u06e9\n/\u00030\u0003",
    "0\u00060\u06ed\n0\r0\u000e0\u06ee\u00031\u00031\u00031\u00031\u0003",
    "1\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u0003",
    "1\u00031\u00031\u00051\u0702\n1\u00032\u00032\u00032\u00032\u00032\u0003",
    "2\u00032\u00033\u00033\u00033\u00033\u00033\u00033\u00033\u00033\u0003",
    "3\u00033\u00033\u00033\u00033\u00033\u00033\u00033\u00033\u00033\u0003",
    "3\u00033\u00053\u071f\n3\u00034\u00034\u00034\u00034\u00034\u00054\u0726",
    "\n4\u00034\u00034\u00034\u00034\u00034\u00034\u00034\u00034\u00034\u0003",
    "4\u00034\u00034\u00034\u00034\u00034\u00054\u0737\n4\u00035\u00035\u0005",
    "5\u073b\n5\u00036\u00036\u00037\u00037\u00037\u00037\u00037\u00038\u0003",
    "8\u00038\u00038\u00038\u00039\u00039\u00039\u00039\u00039\u0003:\u0003",
    ":\u0005:\u0750\n:\u0003;\u0003;\u0003;\u0003;\u0003;\u0003<\u0003<\u0003",
    "<\u0003<\u0003<\u0003<\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003",
    ">\u0003>\u0003?\u0003?\u0003?\u0003?\u0003?\u0003@\u0003@\u0003A\u0003",
    "A\u0003A\u0003A\u0003A\u0003B\u0003B\u0005B\u0773\nB\u0003C\u0003C\u0003",
    "C\u0003C\u0003C\u0003D\u0003D\u0003D\u0003D\u0003D\u0003E\u0003E\u0003",
    "E\u0003E\u0003E\u0003F\u0003F\u0003F\u0003F\u0003F\u0005F\u0789\nF\u0003",
    "F\u0005F\u078c\nF\u0003F\u0005F\u078f\nF\u0003F\u0005F\u0792\nF\u0003",
    "F\u0005F\u0795\nF\u0003G\u0003G\u0003H\u0003H\u0003H\u0003I\u0003I\u0003",
    "I\u0003J\u0003J\u0003J\u0003K\u0003K\u0003K\u0003K\u0005K\u07a6\nK\u0003",
    "L\u0003L\u0003L\u0005L\u07ab\nL\u0003L\u0003L\u0003L\u0003L\u0003L\u0005",
    "L\u07b2\nL\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0005L\u07bb",
    "\nL\u0005L\u07bd\nL\u0003M\u0003M\u0003M\u0005M\u07c2\nM\u0003M\u0003",
    "M\u0003M\u0003M\u0005M\u07c8\nM\u0003M\u0003M\u0005M\u07cc\nM\u0003",
    "M\u0005M\u07cf\nM\u0003M\u0005M\u07d2\nM\u0003N\u0003N\u0003N\u0003",
    "O\u0003O\u0003O\u0005O\u07da\nO\u0003O\u0003O\u0003O\u0003O\u0003O\u0003",
    "O\u0005O\u07e2\nO\u0005O\u07e4\nO\u0003P\u0003P\u0003P\u0003P\u0005",
    "P\u07ea\nP\u0003P\u0003P\u0003P\u0003P\u0003P\u0005P\u07f1\nP\u0003",
    "Q\u0003Q\u0003Q\u0005Q\u07f6\nQ\u0003R\u0003R\u0003R\u0005R\u07fb\n",
    "R\u0003R\u0006R\u07fe\nR\rR\u000eR\u07ff\u0003R\u0006R\u0803\nR\rR\u000e",
    "R\u0804\u0005R\u0807\nR\u0003S\u0003S\u0005S\u080b\nS\u0003T\u0003T",
    "\u0005T\u080f\nT\u0003U\u0003U\u0003U\u0007U\u0814\nU\fU\u000eU\u0817",
    "\u000bU\u0003V\u0003V\u0003V\u0007V\u081c\nV\fV\u000eV\u081f\u000bV",
    "\u0003W\u0003W\u0003W\u0007W\u0824\nW\fW\u000eW\u0827\u000bW\u0003X",
    "\u0003X\u0003X\u0003Y\u0003Y\u0003Y\u0005Y\u082f\nY\u0003Y\u0003Y\u0003",
    "Y\u0007Y\u0834\nY\fY\u000eY\u0837\u000bY\u0003Y\u0005Y\u083a\nY\u0003",
    "Y\u0005Y\u083d\nY\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003",
    "Z\u0003Z\u0005Z\u0848\nZ\u0003Z\u0003Z\u0005Z\u084c\nZ\u0003[\u0003",
    "[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003[\u0005[\u0857\n[\u0003",
    "[\u0003[\u0005[\u085b\n[\u0003\\\u0003\\\u0003\\\u0003\\\u0003\\\u0003",
    "\\\u0005\\\u0863\n\\\u0003\\\u0003\\\u0003\\\u0005\\\u0868\n\\\u0003",
    "]\u0003]\u0003]\u0003^\u0003^\u0003^\u0003^\u0003^\u0003^\u0003^\u0003",
    "^\u0003^\u0003^\u0003^\u0003^\u0003^\u0005^\u087a\n^\u0003_\u0003_\u0003",
    "_\u0003_\u0003`\u0003`\u0003`\u0003`\u0003`\u0005`\u0885\n`\u0003a\u0003",
    "a\u0003a\u0003a\u0003a\u0003b\u0003b\u0003b\u0003b\u0003c\u0003c\u0003",
    "c\u0007c\u0893\nc\fc\u000ec\u0896\u000bc\u0003d\u0003d\u0003d\u0003",
    "d\u0003e\u0003e\u0003e\u0003e\u0003f\u0003f\u0003f\u0003f\u0003f\u0003",
    "f\u0003f\u0003f\u0003f\u0003f\u0003f\u0005f\u08ab\nf\u0003g\u0003g\u0003",
    "g\u0003g\u0003g\u0003g\u0003g\u0003h\u0003h\u0003i\u0003i\u0003i\u0003",
    "i\u0003j\u0003j\u0003k\u0003k\u0003k\u0003k\u0005k\u08c0\nk\u0003l\u0003",
    "l\u0003l\u0005l\u08c5\nl\u0003l\u0005l\u08c8\nl\u0003m\u0003m\u0003",
    "m\u0003m\u0003n\u0003n\u0003n\u0003n\u0003n\u0003n\u0003n\u0003n\u0003",
    "n\u0003n\u0003n\u0003n\u0003n\u0003n\u0003n\u0005n\u08dd\nn\u0003n\u0005",
    "n\u08e0\nn\u0003o\u0003o\u0003o\u0003p\u0003p\u0003p\u0003p\u0003p\u0007",
    "p\u08ea\np\fp\u000ep\u08ed\u000bp\u0003p\u0003p\u0003p\u0003p\u0005",
    "p\u08f3\np\u0003q\u0003q\u0003q\u0003q\u0003r\u0003r\u0003s\u0003s\u0003",
    "s\u0003s\u0003s\u0003s\u0003s\u0003s\u0005s\u0903\ns\u0003t\u0003t\u0003",
    "t\u0003t\u0003t\u0003u\u0003u\u0003u\u0003u\u0005u\u090e\nu\u0003v\u0003",
    "v\u0003v\u0003v\u0003v\u0005v\u0915\nv\u0003w\u0003w\u0003w\u0003w\u0003",
    "w\u0003w\u0003w\u0003w\u0003w\u0005w\u0920\nw\u0003x\u0003x\u0003x\u0003",
    "x\u0003x\u0003x\u0005x\u0928\nx\u0003x\u0003x\u0003y\u0003y\u0003y\u0003",
    "y\u0003y\u0003y\u0003y\u0003y\u0003y\u0003y\u0003y\u0003y\u0003y\u0003",
    "y\u0003y\u0005y\u093b\ny\u0003z\u0003z\u0003z\u0003{\u0003{\u0003{\u0003",
    "{\u0003{\u0003{\u0003{\u0003{\u0003{\u0003{\u0003{\u0003{\u0005{\u094c",
    "\n{\u0003|\u0003|\u0003|\u0003|\u0003|\u0003|\u0003|\u0003|\u0003|\u0003",
    "|\u0005|\u0958\n|\u0003}\u0003}\u0003~\u0003~\u0006~\u095e\n~\r~\u000e",
    "~\u095f\u0003\u007f\u0003\u007f\u0003\u007f\u0003\u0080\u0003\u0080",
    "\u0003\u0081\u0003\u0081\u0003\u0081\u0007\u0081\u096a\n\u0081\f\u0081",
    "\u000e\u0081\u096d\u000b\u0081\u0003\u0082\u0003\u0082\u0005\u0082\u0971",
    "\n\u0082\u0003\u0083\u0003\u0083\u0005\u0083\u0975\n\u0083\u0003\u0084",
    "\u0003\u0084\u0005\u0084\u0979\n\u0084\u0003\u0084\u0003\u0084\u0003",
    "\u0084\u0003\u0084\u0003\u0084\u0003\u0084\u0003\u0084\u0005\u0084\u0982",
    "\n\u0084\u0003\u0085\u0003\u0085\u0005\u0085\u0986\n\u0085\u0003\u0085",
    "\u0003\u0085\u0003\u0085\u0005\u0085\u098b\n\u0085\u0003\u0086\u0003",
    "\u0086\u0003\u0086\u0003\u0087\u0003\u0087\u0003\u0087\u0003\u0087\u0003",
    "\u0087\u0003\u0087\u0003\u0087\u0003\u0087\u0003\u0087\u0003\u0087\u0003",
    "\u0087\u0003\u0087\u0003\u0087\u0003\u0087\u0003\u0087\u0003\u0087\u0005",
    "\u0087\u09a0\n\u0087\u0003\u0088\u0003\u0088\u0003\u0089\u0003\u0089",
    "\u0003\u008a\u0003\u008a\u0003\u008b\u0003\u008b\u0005\u008b\u09aa\n",
    "\u008b\u0003\u008c\u0003\u008c\u0005\u008c\u09ae\n\u008c\u0003\u008c",
    "\u0003\u008c\u0003\u008c\u0005\u008c\u09b3\n\u008c\u0003\u008d\u0003",
    "\u008d\u0005\u008d\u09b7\n\u008d\u0003\u008d\u0003\u008d\u0003\u008d",
    "\u0003\u008d\u0003\u008d\u0003\u008d\u0005\u008d\u09bf\n\u008d\u0003",
    "\u008e\u0003\u008e\u0003\u008e\u0003\u008e\u0003\u008f\u0006\u008f\u09c6",
    "\n\u008f\r\u008f\u000e\u008f\u09c7\u0003\u0090\u0003\u0090\u0003\u0090",
    "\u0003\u0090\u0005\u0090\u09ce\n\u0090\u0003\u0091\u0003\u0091\u0003",
    "\u0091\u0003\u0091\u0005\u0091\u09d4\n\u0091\u0003\u0092\u0003\u0092",
    "\u0003\u0092\u0003\u0092\u0003\u0092\u0003\u0092\u0003\u0092\u0003\u0092",
    "\u0003\u0092\u0003\u0092\u0003\u0092\u0005\u0092\u09e1\n\u0092\u0003",
    "\u0092\u0005\u0092\u09e4\n\u0092\u0003\u0092\u0005\u0092\u09e7\n\u0092",
    "\u0003\u0093\u0003\u0093\u0003\u0093\u0003\u0093\u0003\u0093\u0003\u0093",
    "\u0003\u0093\u0005\u0093\u09f0\n\u0093\u0003\u0093\u0005\u0093\u09f3",
    "\n\u0093\u0003\u0094\u0003\u0094\u0003\u0094\u0003\u0095\u0003\u0095",
    "\u0003\u0095\u0003\u0095\u0003\u0095\u0003\u0095\u0003\u0095\u0003\u0095",
    "\u0003\u0095\u0005\u0095\u0a01\n\u0095\u0003\u0095\u0003\u0095\u0005",
    "\u0095\u0a05\n\u0095\u0003\u0096\u0003\u0096\u0003\u0096\u0003\u0096",
    "\u0003\u0096\u0003\u0097\u0003\u0097\u0003\u0097\u0003\u0097\u0003\u0097",
    "\u0003\u0098\u0003\u0098\u0005\u0098\u0a13\n\u0098\u0003\u0098\u0003",
    "\u0098\u0005\u0098\u0a17\n\u0098\u0003\u0098\u0003\u0098\u0003\u0099",
    "\u0003\u0099\u0003\u0099\u0003\u0099\u0003\u0099\u0003\u0099\u0003\u0099",
    "\u0003\u0099\u0003\u0099\u0003\u0099\u0003\u0099\u0003\u0099\u0003\u0099",
    "\u0003\u009a\u0003\u009a\u0003\u009a\u0003\u009a\u0003\u009a\u0003\u009a",
    "\u0003\u009a\u0003\u009a\u0005\u009a\u0a30\n\u009a\u0003\u009a\u0003",
    "\u009a\u0005\u009a\u0a34\n\u009a\u0005\u009a\u0a36\n\u009a\u0003\u009b",
    "\u0003\u009b\u0003\u009b\u0007\u009b\u0a3b\n\u009b\f\u009b\u000e\u009b",
    "\u0a3e\u000b\u009b\u0003\u009c\u0003\u009c\u0003\u009c\u0003\u009c\u0003",
    "\u009d\u0003\u009d\u0003\u009d\u0003\u009d\u0003\u009d\u0005\u009d\u0a49",
    "\n\u009d\u0003\u009e\u0003\u009e\u0003\u009e\u0007\u009e\u0a4e\n\u009e",
    "\f\u009e\u000e\u009e\u0a51\u000b\u009e\u0003\u009f\u0003\u009f\u0003",
    "\u009f\u0003\u009f\u0003\u00a0\u0003\u00a0\u0005\u00a0\u0a59\n\u00a0",
    "\u0003\u00a0\u0003\u00a0\u0005\u00a0\u0a5d\n\u00a0\u0003\u00a1\u0005",
    "\u00a1\u0a60\n\u00a1\u0003\u00a1\u0003\u00a1\u0005\u00a1\u0a64\n\u00a1",
    "\u0003\u00a1\u0005\u00a1\u0a67\n\u00a1\u0003\u00a1\u0005\u00a1\u0a6a",
    "\n\u00a1\u0003\u00a1\u0005\u00a1\u0a6d\n\u00a1\u0003\u00a2\u0003\u00a2",
    "\u0003\u00a2\u0003\u00a2\u0005\u00a2\u0a73\n\u00a2\u0003\u00a3\u0003",
    "\u00a3\u0003\u00a3\u0003\u00a4\u0003\u00a4\u0005\u00a4\u0a7a\n\u00a4",
    "\u0003\u00a5\u0003\u00a5\u0005\u00a5\u0a7e\n\u00a5\u0003\u00a6\u0003",
    "\u00a6\u0003\u00a6\u0003\u00a6\u0003\u00a6\u0005\u00a6\u0a85\n\u00a6",
    "\u0003\u00a6\u0003\u00a6\u0003\u00a6\u0003\u00a6\u0003\u00a6\u0003\u00a6",
    "\u0003\u00a6\u0005\u00a6\u0a8e\n\u00a6\u0005\u00a6\u0a90\n\u00a6\u0003",
    "\u00a7\u0003\u00a7\u0003\u00a7\u0003\u00a7\u0003\u00a7\u0003\u00a7\u0003",
    "\u00a7\u0003\u00a7\u0003\u00a7\u0003\u00a7\u0003\u00a7\u0003\u00a7\u0003",
    "\u00a7\u0003\u00a7\u0003\u00a7\u0003\u00a7\u0003\u00a7\u0003\u00a7\u0003",
    "\u00a7\u0003\u00a7\u0003\u00a7\u0003\u00a7\u0003\u00a7\u0003\u00a7\u0003",
    "\u00a7\u0003\u00a7\u0003\u00a7\u0003\u00a7\u0003\u00a7\u0003\u00a7\u0003",
    "\u00a7\u0003\u00a7\u0003\u00a7\u0003\u00a7\u0003\u00a7\u0005\u00a7\u0ab5",
    "\n\u00a7\u0003\u00a8\u0003\u00a8\u0003\u00a8\u0005\u00a8\u0aba\n\u00a8",
    "\u0003\u00a8\u0003\u00a8\u0005\u00a8\u0abe\n\u00a8\u0003\u00a8\u0005",
    "\u00a8\u0ac1\n\u00a8\u0003\u00a8\u0003\u00a8\u0003\u00a8\u0005\u00a8",
    "\u0ac6\n\u00a8\u0003\u00a9\u0003\u00a9\u0003\u00a9\u0003\u00aa\u0003",
    "\u00aa\u0003\u00aa\u0003\u00aa\u0003\u00ab\u0003\u00ab\u0003\u00ab\u0005",
    "\u00ab\u0ad2\n\u00ab\u0003\u00ab\u0003\u00ab\u0005\u00ab\u0ad6\n\u00ab",
    "\u0003\u00ac\u0003\u00ac\u0005\u00ac\u0ada\n\u00ac\u0003\u00ac\u0005",
    "\u00ac\u0add\n\u00ac\u0003\u00ac\u0003\u00ac\u0003\u00ac\u0003\u00ac",
    "\u0003\u00ac\u0003\u00ac\u0003\u00ac\u0003\u00ac\u0003\u00ac\u0003\u00ac",
    "\u0005\u00ac\u0ae9\n\u00ac\u0003\u00ac\u0003\u00ac\u0003\u00ac\u0003",
    "\u00ad\u0003\u00ad\u0005\u00ad\u0af0\n\u00ad\u0003\u00ad\u0003\u00ad",
    "\u0003\u00ad\u0005\u00ad\u0af5\n\u00ad\u0003\u00ad\u0003\u00ad\u0003",
    "\u00ae\u0003\u00ae\u0003\u00af\u0003\u00af\u0003\u00b0\u0003\u00b0\u0003",
    "\u00b1\u0003\u00b1\u0003\u00b2\u0003\u00b2\u0003\u00b3\u0003\u00b3\u0003",
    "\u00b4\u0003\u00b4\u0003\u00b4\u0005\u00b4\u0b08\n\u00b4\u0003\u00b4",
    "\u0005\u00b4\u0b0b\n\u00b4\u0003\u00b4\u0005\u00b4\u0b0e\n\u00b4\u0003",
    "\u00b5\u0003\u00b5\u0003\u00b6\u0003\u00b6\u0005\u00b6\u0b14\n\u00b6",
    "\u0003\u00b6\u0005\u00b6\u0b17\n\u00b6\u0003\u00b6\u0003\u00b6\u0005",
    "\u00b6\u0b1b\n\u00b6\u0003\u00b6\u0003\u00b6\u0003\u00b6\u0003\u00b6",
    "\u0005\u00b6\u0b21\n\u00b6\u0003\u00b6\u0005\u00b6\u0b24\n\u00b6\u0003",
    "\u00b6\u0003\u00b6\u0003\u00b6\u0003\u00b6\u0005\u00b6\u0b2a\n\u00b6",
    "\u0003\u00b6\u0005\u00b6\u0b2d\n\u00b6\u0003\u00b6\u0005\u00b6\u0b30",
    "\n\u00b6\u0003\u00b6\u0005\u00b6\u0b33\n\u00b6\u0003\u00b6\u0005\u00b6",
    "\u0b36\n\u00b6\u0003\u00b6\u0005\u00b6\u0b39\n\u00b6\u0003\u00b6\u0005",
    "\u00b6\u0b3c\n\u00b6\u0003\u00b6\u0005\u00b6\u0b3f\n\u00b6\u0003\u00b6",
    "\u0005\u00b6\u0b42\n\u00b6\u0003\u00b6\u0003\u00b6\u0005\u00b6\u0b46",
    "\n\u00b6\u0003\u00b6\u0005\u00b6\u0b49\n\u00b6\u0005\u00b6\u0b4b\n\u00b6",
    "\u0003\u00b7\u0003\u00b7\u0005\u00b7\u0b4f\n\u00b7\u0003\u00b7\u0005",
    "\u00b7\u0b52\n\u00b7\u0003\u00b7\u0003\u00b7\u0005\u00b7\u0b56\n\u00b7",
    "\u0003\u00b7\u0003\u00b7\u0003\u00b7\u0003\u00b7\u0005\u00b7\u0b5c\n",
    "\u00b7\u0003\u00b7\u0005\u00b7\u0b5f\n\u00b7\u0003\u00b7\u0003\u00b7",
    "\u0003\u00b7\u0003\u00b7\u0005\u00b7\u0b65\n\u00b7\u0003\u00b7\u0005",
    "\u00b7\u0b68\n\u00b7\u0003\u00b7\u0005\u00b7\u0b6b\n\u00b7\u0003\u00b7",
    "\u0005\u00b7\u0b6e\n\u00b7\u0003\u00b7\u0005\u00b7\u0b71\n\u00b7\u0003",
    "\u00b7\u0005\u00b7\u0b74\n\u00b7\u0003\u00b7\u0005\u00b7\u0b77\n\u00b7",
    "\u0003\u00b7\u0005\u00b7\u0b7a\n\u00b7\u0003\u00b7\u0005\u00b7\u0b7d",
    "\n\u00b7\u0003\u00b7\u0003\u00b7\u0005\u00b7\u0b81\n\u00b7\u0003\u00b7",
    "\u0005\u00b7\u0b84\n\u00b7\u0005\u00b7\u0b86\n\u00b7\u0003\u00b8\u0003",
    "\u00b8\u0003\u00b8\u0003\u00b8\u0003\u00b9\u0003\u00b9\u0003\u00b9\u0005",
    "\u00b9\u0b8f\n\u00b9\u0003\u00b9\u0003\u00b9\u0003\u00b9\u0003\u00b9",
    "\u0003\u00b9\u0005\u00b9\u0b96\n\u00b9\u0003\u00ba\u0003\u00ba\u0003",
    "\u00ba\u0003\u00ba\u0003\u00bb\u0003\u00bb\u0005\u00bb\u0b9e\n\u00bb",
    "\u0003\u00bb\u0003\u00bb\u0003\u00bb\u0003\u00bb\u0003\u00bb\u0005\u00bb",
    "\u0ba5\n\u00bb\u0003\u00bc\u0003\u00bc\u0003\u00bc\u0005\u00bc\u0baa",
    "\n\u00bc\u0003\u00bc\u0003\u00bc\u0003\u00bd\u0003\u00bd\u0003\u00bd",
    "\u0005\u00bd\u0bb1\n\u00bd\u0003\u00bd\u0003\u00bd\u0005\u00bd\u0bb5",
    "\n\u00bd\u0003\u00bd\u0003\u00bd\u0003\u00bd\u0005\u00bd\u0bba\n\u00bd",
    "\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00bf\u0003\u00bf",
    "\u0003\u00bf\u0005\u00bf\u0bc3\n\u00bf\u0003\u00bf\u0003\u00bf\u0005",
    "\u00bf\u0bc7\n\u00bf\u0003\u00c0\u0003\u00c0\u0003\u00c0\u0003\u00c0",
    "\u0003\u00c0\u0003\u00c0\u0005\u00c0\u0bcf\n\u00c0\u0003\u00c1\u0003",
    "\u00c1\u0005\u00c1\u0bd3\n\u00c1\u0003\u00c1\u0003\u00c1\u0003\u00c1",
    "\u0003\u00c1\u0003\u00c1\u0005\u00c1\u0bda\n\u00c1\u0003\u00c1\u0003",
    "\u00c1\u0005\u00c1\u0bde\n\u00c1\u0003\u00c2\u0003\u00c2\u0003\u00c2",
    "\u0003\u00c2\u0005\u00c2\u0be4\n\u00c2\u0003\u00c2\u0003\u00c2\u0003",
    "\u00c2\u0003\u00c2\u0003\u00c2\u0003\u00c2\u0005\u00c2\u0bec\n\u00c2",
    "\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c4\u0003\u00c4",
    "\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0003\u00c6\u0003\u00c6",
    "\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0005\u00c6\u0bfe\n",
    "\u00c6\u0003\u00c6\u0005\u00c6\u0c01\n\u00c6\u0003\u00c6\u0005\u00c6",
    "\u0c04\n\u00c6\u0003\u00c7\u0003\u00c7\u0003\u00c7\u0005\u00c7\u0c09",
    "\n\u00c7\u0003\u00c7\u0003\u00c7\u0003\u00c8\u0003\u00c8\u0003\u00c8",
    "\u0003\u00c8\u0003\u00c9\u0003\u00c9\u0003\u00c9\u0005\u00c9\u0c14\n",
    "\u00c9\u0003\u00c9\u0005\u00c9\u0c17\n\u00c9\u0003\u00c9\u0003\u00c9",
    "\u0003\u00ca\u0003\u00ca\u0003\u00ca\u0005\u00ca\u0c1e\n\u00ca\u0003",
    "\u00ca\u0003\u00ca\u0005\u00ca\u0c22\n\u00ca\u0003\u00ca\u0003\u00ca",
    "\u0005\u00ca\u0c26\n\u00ca\u0003\u00cb\u0003\u00cb\u0003\u00cb\u0005",
    "\u00cb\u0c2b\n\u00cb\u0003\u00cb\u0003\u00cb\u0005\u00cb\u0c2f\n\u00cb",
    "\u0003\u00cc\u0003\u00cc\u0003\u00cc\u0005\u00cc\u0c34\n\u00cc\u0003",
    "\u00cc\u0003\u00cc\u0005\u00cc\u0c38\n\u00cc\u0003\u00cd\u0003\u00cd",
    "\u0003\u00cd\u0005\u00cd\u0c3d\n\u00cd\u0003\u00cd\u0003\u00cd\u0003",
    "\u00ce\u0003\u00ce\u0003\u00ce\u0005\u00ce\u0c44\n\u00ce\u0003\u00ce",
    "\u0003\u00ce\u0003\u00cf\u0003\u00cf\u0003\u00cf\u0005\u00cf\u0c4b\n",
    "\u00cf\u0003\u00cf\u0003\u00cf\u0003\u00d0\u0003\u00d0\u0003\u00d0\u0005",
    "\u00d0\u0c52\n\u00d0\u0003\u00d0\u0003\u00d0\u0005\u00d0\u0c56\n\u00d0",
    "\u0003\u00d0\u0003\u00d0\u0005\u00d0\u0c5a\n\u00d0\u0003\u00d0\u0003",
    "\u00d0\u0005\u00d0\u0c5e\n\u00d0\u0003\u00d1\u0003\u00d1\u0003\u00d1",
    "\u0005\u00d1\u0c63\n\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d2\u0003",
    "\u00d2\u0003\u00d2\u0005\u00d2\u0c6a\n\u00d2\u0003\u00d2\u0003\u00d2",
    "\u0003\u00d3\u0003\u00d3\u0003\u00d3\u0003\u00d3\u0003\u00d4\u0003\u00d4",
    "\u0003\u00d4\u0003\u00d4\u0003\u00d4\u0003\u00d4\u0003\u00d4\u0003\u00d4",
    "\u0005\u00d4\u0c7a\n\u00d4\u0003\u00d4\u0005\u00d4\u0c7d\n\u00d4\u0003",
    "\u00d4\u0005\u00d4\u0c80\n\u00d4\u0003\u00d5\u0003\u00d5\u0005\u00d5",
    "\u0c84\n\u00d5\u0003\u00d6\u0003\u00d6\u0003\u00d6\u0003\u00d6\u0003",
    "\u00d6\u0005\u00d6\u0c8b\n\u00d6\u0003\u00d7\u0003\u00d7\u0003\u00d7",
    "\u0003\u00d7\u0003\u00d7\u0003\u00d8\u0003\u00d8\u0003\u00d8\u0003\u00d8",
    "\u0003\u00d8\u0003\u00d8\u0003\u00d8\u0005\u00d8\u0c99\n\u00d8\u0003",
    "\u00d9\u0003\u00d9\u0003\u00d9\u0003\u00d9\u0005\u00d9\u0c9f\n\u00d9",
    "\u0003\u00d9\u0005\u00d9\u0ca2\n\u00d9\u0003\u00d9\u0005\u00d9\u0ca5",
    "\n\u00d9\u0003\u00d9\u0005\u00d9\u0ca8\n\u00d9\u0003\u00d9\u0005\u00d9",
    "\u0cab\n\u00d9\u0003\u00da\u0003\u00da\u0005\u00da\u0caf\n\u00da\u0003",
    "\u00db\u0003\u00db\u0003\u00db\u0003\u00dc\u0003\u00dc\u0003\u00dc\u0003",
    "\u00dc\u0003\u00dc\u0003\u00dc\u0003\u00dc\u0005\u00dc\u0cbb\n\u00dc",
    "\u0003\u00dd\u0003\u00dd\u0003\u00dd\u0003\u00dd\u0003\u00dd\u0007\u00dd",
    "\u0cc2\n\u00dd\f\u00dd\u000e\u00dd\u0cc5\u000b\u00dd\u0003\u00de\u0003",
    "\u00de\u0005\u00de\u0cc9\n\u00de\u0003\u00df\u0003\u00df\u0003\u00df",
    "\u0003\u00df\u0003\u00df\u0003\u00df\u0003\u00df\u0003\u00df\u0003\u00e0",
    "\u0003\u00e0\u0003\u00e0\u0007\u00e0\u0cd6\n\u00e0\f\u00e0\u000e\u00e0",
    "\u0cd9\u000b\u00e0\u0003\u00e1\u0003\u00e1\u0003\u00e1\u0003\u00e1\u0003",
    "\u00e1\u0003\u00e1\u0003\u00e1\u0003\u00e2\u0003\u00e2\u0003\u00e2\u0003",
    "\u00e2\u0003\u00e2\u0003\u00e2\u0003\u00e2\u0003\u00e2\u0003\u00e2\u0003",
    "\u00e2\u0003\u00e2\u0005\u00e2\u0ced\n\u00e2\u0003\u00e2\u0003\u00e2",
    "\u0003\u00e2\u0003\u00e2\u0003\u00e3\u0003\u00e3\u0003\u00e3\u0003\u00e3",
    "\u0003\u00e3\u0003\u00e3\u0003\u00e3\u0003\u00e3\u0003\u00e3\u0003\u00e3",
    "\u0005\u00e3\u0cfd\n\u00e3\u0003\u00e4\u0003\u00e4\u0005\u00e4\u0d01",
    "\n\u00e4\u0003\u00e5\u0003\u00e5\u0003\u00e5\u0007\u00e5\u0d06\n\u00e5",
    "\f\u00e5\u000e\u00e5\u0d09\u000b\u00e5\u0003\u00e6\u0003\u00e6\u0003",
    "\u00e6\u0003\u00e6\u0003\u00e7\u0003\u00e7\u0003\u00e7\u0007\u00e7\u0d12",
    "\n\u00e7\f\u00e7\u000e\u00e7\u0d15\u000b\u00e7\u0003\u00e8\u0003\u00e8",
    "\u0003\u00e9\u0003\u00e9\u0005\u00e9\u0d1b\n\u00e9\u0003\u00ea\u0003",
    "\u00ea\u0003\u00ea\u0003\u00eb\u0003\u00eb\u0003\u00eb\u0003\u00eb\u0003",
    "\u00eb\u0005\u00eb\u0d25\n\u00eb\u0003\u00eb\u0005\u00eb\u0d28\n\u00eb",
    "\u0003\u00ec\u0003\u00ec\u0003\u00ec\u0003\u00ec\u0003\u00ec\u0003\u00ec",
    "\u0005\u00ec\u0d30\n\u00ec\u0003\u00ed\u0003\u00ed\u0003\u00ed\u0003",
    "\u00ed\u0003\u00ee\u0003\u00ee\u0003\u00ee\u0007\u00ee\u0d39\n\u00ee",
    "\f\u00ee\u000e\u00ee\u0d3c\u000b\u00ee\u0003\u00ee\u0003\u00ee\u0003",
    "\u00ee\u0007\u00ee\u0d41\n\u00ee\f\u00ee\u000e\u00ee\u0d44\u000b\u00ee",
    "\u0005\u00ee\u0d46\n\u00ee\u0003\u00ef\u0003\u00ef\u0003\u00ef\u0003",
    "\u00ef\u0003\u00ef\u0003\u00ef\u0003\u00ef\u0005\u00ef\u0d4f\n\u00ef",
    "\u0003\u00f0\u0003\u00f0\u0003\u00f0\u0003\u00f0\u0003\u00f0\u0003\u00f0",
    "\u0003\u00f1\u0003\u00f1\u0003\u00f1\u0003\u00f1\u0003\u00f1\u0003\u00f1",
    "\u0003\u00f2\u0003\u00f2\u0003\u00f2\u0003\u00f2\u0003\u00f2\u0003\u00f3",
    "\u0003\u00f3\u0003\u00f3\u0003\u00f3\u0003\u00f3\u0003\u00f3\u0003\u00f3",
    "\u0003\u00f3\u0005\u00f3\u0d6a\n\u00f3\u0003\u00f3\u0005\u00f3\u0d6d",
    "\n\u00f3\u0003\u00f4\u0003\u00f4\u0003\u00f4\u0003\u00f4\u0003\u00f4",
    "\u0003\u00f4\u0003\u00f4\u0003\u00f4\u0003\u00f4\u0003\u00f4\u0003\u00f5",
    "\u0003\u00f5\u0003\u00f5\u0003\u00f5\u0003\u00f5\u0005\u00f5\u0d7e\n",
    "\u00f5\u0003\u00f6\u0003\u00f6\u0003\u00f6\u0003\u00f6\u0003\u00f6\u0003",
    "\u00f6\u0003\u00f6\u0003\u00f6\u0003\u00f6\u0003\u00f6\u0003\u00f6\u0003",
    "\u00f6\u0003\u00f6\u0003\u00f6\u0003\u00f6\u0003\u00f6\u0003\u00f6\u0003",
    "\u00f6\u0003\u00f6\u0003\u00f6\u0003\u00f6\u0003\u00f6\u0003\u00f6\u0005",
    "\u00f6\u0d97\n\u00f6\u0003\u00f6\u0003\u00f6\u0003\u00f6\u0003\u00f6",
    "\u0003\u00f6\u0003\u00f6\u0003\u00f6\u0003\u00f6\u0003\u00f6\u0003\u00f6",
    "\u0003\u00f6\u0003\u00f6\u0003\u00f6\u0003\u00f6\u0003\u00f6\u0003\u00f6",
    "\u0003\u00f6\u0003\u00f6\u0003\u00f6\u0003\u00f6\u0003\u00f6\u0003\u00f6",
    "\u0003\u00f6\u0003\u00f6\u0003\u00f6\u0003\u00f6\u0003\u00f6\u0003\u00f6",
    "\u0005\u00f6\u0db5\n\u00f6\u0003\u00f6\u0003\u00f6\u0003\u00f6\u0003",
    "\u00f6\u0003\u00f6\u0003\u00f6\u0005\u00f6\u0dbd\n\u00f6\u0003\u00f6",
    "\u0003\u00f6\u0003\u00f6\u0005\u00f6\u0dc2\n\u00f6\u0003\u00f7\u0003",
    "\u00f7\u0003\u00f7\u0003\u00f7\u0003\u00f8\u0003\u00f8\u0003\u00f9\u0003",
    "\u00f9\u0003\u00fa\u0003\u00fa\u0003\u00fa\u0003\u00fb\u0003\u00fb\u0003",
    "\u00fc\u0003\u00fc\u0003\u00fc\u0003\u00fd\u0003\u00fd\u0003\u00fd\u0003",
    "\u00fe\u0003\u00fe\u0003\u00fe\u0003\u00fe\u0003\u00ff\u0003\u00ff\u0003",
    "\u00ff\u0007\u00ff\u0dde\n\u00ff\f\u00ff\u000e\u00ff\u0de1\u000b\u00ff",
    "\u0003\u0100\u0003\u0100\u0003\u0100\u0003\u0101\u0003\u0101\u0003\u0101",
    "\u0003\u0101\u0003\u0102\u0003\u0102\u0003\u0102\u0003\u0102\u0007\u0102",
    "\u0dee\n\u0102\f\u0102\u000e\u0102\u0df1\u000b\u0102\u0003\u0103\u0003",
    "\u0103\u0003\u0103\u0005\u0103\u0df6\n\u0103\u0003\u0103\u0003\u0103",
    "\u0003\u0104\u0003\u0104\u0003\u0104\u0003\u0104\u0003\u0104\u0003\u0104",
    "\u0003\u0104\u0003\u0104\u0003\u0104\u0003\u0104\u0003\u0104\u0003\u0104",
    "\u0003\u0104\u0003\u0104\u0003\u0104\u0003\u0104\u0003\u0104\u0003\u0104",
    "\u0003\u0104\u0003\u0104\u0003\u0104\u0003\u0104\u0003\u0104\u0003\u0104",
    "\u0003\u0104\u0003\u0104\u0003\u0104\u0003\u0104\u0003\u0104\u0003\u0104",
    "\u0003\u0104\u0003\u0104\u0003\u0104\u0003\u0104\u0003\u0104\u0003\u0104",
    "\u0003\u0104\u0003\u0104\u0003\u0104\u0003\u0104\u0003\u0104\u0005\u0104",
    "\u0e23\n\u0104\u0003\u0105\u0003\u0105\u0003\u0105\u0005\u0105\u0e28",
    "\n\u0105\u0003\u0105\u0003\u0105\u0003\u0105\u0003\u0105\u0003\u0105",
    "\u0003\u0105\u0003\u0105\u0003\u0105\u0003\u0105\u0003\u0105\u0003\u0105",
    "\u0003\u0105\u0003\u0105\u0003\u0105\u0003\u0105\u0003\u0105\u0003\u0105",
    "\u0003\u0105\u0003\u0105\u0003\u0105\u0003\u0105\u0003\u0105\u0003\u0105",
    "\u0003\u0105\u0003\u0105\u0003\u0105\u0005\u0105\u0e44\n\u0105\u0003",
    "\u0105\u0003\u0105\u0003\u0105\u0003\u0105\u0005\u0105\u0e4a\n\u0105",
    "\u0003\u0105\u0003\u0105\u0003\u0105\u0003\u0105\u0003\u0105\u0005\u0105",
    "\u0e51\n\u0105\u0003\u0105\u0003\u0105\u0003\u0105\u0003\u0105\u0003",
    "\u0105\u0005\u0105\u0e58\n\u0105\u0003\u0105\u0003\u0105\u0003\u0105",
    "\u0003\u0105\u0005\u0105\u0e5e\n\u0105\u0003\u0105\u0003\u0105\u0003",
    "\u0105\u0003\u0105\u0003\u0105\u0005\u0105\u0e65\n\u0105\u0003\u0106",
    "\u0003\u0106\u0003\u0106\u0003\u0106\u0005\u0106\u0e6b\n\u0106\u0003",
    "\u0107\u0003\u0107\u0003\u0107\u0005\u0107\u0e70\n\u0107\u0003\u0107",
    "\u0003\u0107\u0003\u0107\u0005\u0107\u0e75\n\u0107\u0003\u0107\u0003",
    "\u0107\u0003\u0107\u0005\u0107\u0e7a\n\u0107\u0003\u0107\u0003\u0107",
    "\u0003\u0107\u0003\u0107\u0005\u0107\u0e80\n\u0107\u0003\u0107\u0003",
    "\u0107\u0003\u0107\u0005\u0107\u0e85\n\u0107\u0003\u0107\u0003\u0107",
    "\u0003\u0107\u0005\u0107\u0e8a\n\u0107\u0003\u0107\u0003\u0107\u0003",
    "\u0107\u0005\u0107\u0e8f\n\u0107\u0003\u0107\u0003\u0107\u0003\u0107",
    "\u0005\u0107\u0e94\n\u0107\u0003\u0107\u0003\u0107\u0003\u0107\u0005",
    "\u0107\u0e99\n\u0107\u0003\u0107\u0003\u0107\u0003\u0107\u0005\u0107",
    "\u0e9e\n\u0107\u0003\u0107\u0003\u0107\u0003\u0107\u0005\u0107\u0ea3",
    "\n\u0107\u0003\u0107\u0003\u0107\u0003\u0107\u0005\u0107\u0ea8\n\u0107",
    "\u0003\u0107\u0003\u0107\u0003\u0107\u0003\u0107\u0003\u0107\u0003\u0107",
    "\u0003\u0107\u0003\u0107\u0003\u0107\u0005\u0107\u0eb3\n\u0107\u0003",
    "\u0107\u0003\u0107\u0003\u0107\u0005\u0107\u0eb8\n\u0107\u0003\u0107",
    "\u0003\u0107\u0003\u0107\u0005\u0107\u0ebd\n\u0107\u0003\u0107\u0003",
    "\u0107\u0003\u0107\u0005\u0107\u0ec2\n\u0107\u0003\u0107\u0003\u0107",
    "\u0003\u0107\u0005\u0107\u0ec7\n\u0107\u0003\u0107\u0003\u0107\u0003",
    "\u0107\u0005\u0107\u0ecc\n\u0107\u0003\u0107\u0003\u0107\u0003\u0107",
    "\u0005\u0107\u0ed1\n\u0107\u0003\u0107\u0003\u0107\u0003\u0107\u0003",
    "\u0107\u0003\u0107\u0005\u0107\u0ed8\n\u0107\u0005\u0107\u0eda\n\u0107",
    "\u0003\u0108\u0003\u0108\u0005\u0108\u0ede\n\u0108\u0003\u0108\u0003",
    "\u0108\u0003\u0108\u0005\u0108\u0ee3\n\u0108\u0003\u0108\u0003\u0108",
    "\u0003\u0108\u0005\u0108\u0ee8\n\u0108\u0003\u0108\u0003\u0108\u0003",
    "\u0108\u0005\u0108\u0eed\n\u0108\u0003\u0108\u0003\u0108\u0003\u0108",
    "\u0003\u0108\u0003\u0108\u0003\u0108\u0003\u0108\u0005\u0108\u0ef6\n",
    "\u0108\u0003\u0108\u0003\u0108\u0003\u0108\u0005\u0108\u0efb\n\u0108",
    "\u0005\u0108\u0efd\n\u0108\u0003\u0109\u0003\u0109\u0003\u0109\u0003",
    "\u0109\u0003\u0109\u0005\u0109\u0f04\n\u0109\u0003\u0109\u0003\u0109",
    "\u0005\u0109\u0f08\n\u0109\u0003\u0109\u0005\u0109\u0f0b\n\u0109\u0003",
    "\u0109\u0003\u0109\u0003\u0109\u0003\u0109\u0005\u0109\u0f11\n\u0109",
    "\u0003\u0109\u0005\u0109\u0f14\n\u0109\u0003\u0109\u0003\u0109\u0003",
    "\u0109\u0003\u0109\u0003\u0109\u0005\u0109\u0f1b\n\u0109\u0003\u0109",
    "\u0003\u0109\u0003\u0109\u0003\u0109\u0003\u0109\u0003\u0109\u0003\u0109",
    "\u0003\u0109\u0003\u0109\u0005\u0109\u0f26\n\u0109\u0005\u0109\u0f28",
    "\n\u0109\u0003\u010a\u0003\u010a\u0005\u010a\u0f2c\n\u010a\u0003\u010a",
    "\u0003\u010a\u0003\u010a\u0005\u010a\u0f31\n\u010a\u0003\u010a\u0003",
    "\u010a\u0007\u010a\u0f35\n\u010a\f\u010a\u000e\u010a\u0f38\u000b\u010a",
    "\u0005\u010a\u0f3a\n\u010a\u0003\u010b\u0003\u010b\u0003\u010b\u0005",
    "\u010b\u0f3f\n\u010b\u0003\u010b\u0003\u010b\u0003\u010c\u0003\u010c",
    "\u0003\u010c\u0003\u010c\u0005\u010c\u0f47\n\u010c\u0003\u010c\u0003",
    "\u010c\u0003\u010d\u0003\u010d\u0003\u010d\u0005\u010d\u0f4e\n\u010d",
    "\u0003\u010d\u0003\u010d\u0003\u010d\u0003\u010d\u0003\u010d\u0005\u010d",
    "\u0f55\n\u010d\u0003\u010e\u0003\u010e\u0003\u010e\u0003\u010e\u0003",
    "\u010e\u0003\u010e\u0005\u010e\u0f5d\n\u010e\u0003\u010e\u0003\u010e",
    "\u0003\u010e\u0003\u010f\u0003\u010f\u0003\u010f\u0003\u010f\u0003\u010f",
    "\u0003\u010f\u0003\u010f\u0003\u010f\u0003\u010f\u0003\u010f\u0003\u010f",
    "\u0003\u010f\u0005\u010f\u0f6e\n\u010f\u0003\u010f\u0005\u010f\u0f71",
    "\n\u010f\u0003\u010f\u0005\u010f\u0f74\n\u010f\u0003\u010f\u0005\u010f",
    "\u0f77\n\u010f\u0003\u010f\u0005\u010f\u0f7a\n\u010f\u0003\u010f\u0005",
    "\u010f\u0f7d\n\u010f\u0003\u010f\u0005\u010f\u0f80\n\u010f\u0003\u010f",
    "\u0005\u010f\u0f83\n\u010f\u0003\u0110\u0003\u0110\u0003\u0110\u0005",
    "\u0110\u0f88\n\u0110\u0003\u0110\u0003\u0110\u0003\u0110\u0003\u0110",
    "\u0003\u0110\u0003\u0110\u0003\u0110\u0003\u0110\u0005\u0110\u0f92\n",
    "\u0110\u0003\u0110\u0003\u0110\u0005\u0110\u0f96\n\u0110\u0003\u0111",
    "\u0003\u0111\u0003\u0111\u0003\u0111\u0005\u0111\u0f9c\n\u0111\u0003",
    "\u0111\u0003\u0111\u0005\u0111\u0fa0\n\u0111\u0003\u0112\u0003\u0112",
    "\u0003\u0112\u0003\u0113\u0003\u0113\u0003\u0113\u0003\u0113\u0005\u0113",
    "\u0fa9\n\u0113\u0003\u0113\u0003\u0113\u0003\u0114\u0003\u0114\u0003",
    "\u0115\u0003\u0115\u0003\u0115\u0003\u0116\u0003\u0116\u0003\u0116\u0003",
    "\u0116\u0003\u0116\u0003\u0116\u0003\u0116\u0003\u0116\u0003\u0116\u0003",
    "\u0116\u0005\u0116\u0fbc\n\u0116\u0005\u0116\u0fbe\n\u0116\u0003\u0117",
    "\u0003\u0117\u0003\u0117\u0003\u0117\u0005\u0117\u0fc4\n\u0117\u0003",
    "\u0117\u0003\u0117\u0003\u0118\u0003\u0118\u0003\u0118\u0003\u0118\u0003",
    "\u0118\u0003\u0119\u0003\u0119\u0003\u0119\u0003\u0119\u0005\u0119\u0fd1",
    "\n\u0119\u0003\u011a\u0003\u011a\u0003\u011a\u0003\u011a\u0003\u011b",
    "\u0003\u011b\u0003\u011b\u0003\u011b\u0003\u011c\u0003\u011c\u0003\u011c",
    "\u0003\u011c\u0003\u011d\u0003\u011d\u0003\u011d\u0005\u011d\u0fe2\n",
    "\u011d\u0003\u011d\u0003\u011d\u0003\u011d\u0005\u011d\u0fe7\n\u011d",
    "\u0003\u011e\u0003\u011e\u0005\u011e\u0feb\n\u011e\u0003\u011e\u0003",
    "\u011e\u0005\u011e\u0fef\n\u011e\u0003\u011e\u0003\u011e\u0003\u011e",
    "\u0003\u011f\u0003\u011f\u0003\u011f\u0005\u011f\u0ff7\n\u011f\u0003",
    "\u011f\u0003\u011f\u0005\u011f\u0ffb\n\u011f\u0003\u0120\u0003\u0120",
    "\u0003\u0120\u0005\u0120\u1000\n\u0120\u0003\u0120\u0003\u0120\u0003",
    "\u0120\u0003\u0120\u0003\u0121\u0003\u0121\u0003\u0121\u0005\u0121\u1009",
    "\n\u0121\u0003\u0121\u0003\u0121\u0005\u0121\u100d\n\u0121\u0003\u0122",
    "\u0003\u0122\u0003\u0122\u0003\u0122\u0003\u0122\u0003\u0123\u0003\u0123",
    "\u0003\u0123\u0003\u0123\u0003\u0124\u0003\u0124\u0003\u0124\u0003\u0125",
    "\u0003\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0005\u0125\u1020\n",
    "\u0125\u0003\u0126\u0003\u0126\u0003\u0126\u0003\u0126\u0003\u0127\u0003",
    "\u0127\u0003\u0127\u0003\u0127\u0003\u0127\u0005\u0127\u102b\n\u0127",
    "\u0003\u0127\u0003\u0127\u0005\u0127\u102f\n\u0127\u0003\u0128\u0003",
    "\u0128\u0003\u0128\u0003\u0128\u0005\u0128\u1035\n\u0128\u0003\u0128",
    "\u0003\u0128\u0005\u0128\u1039\n\u0128\u0003\u0129\u0003\u0129\u0003",
    "\u012a\u0003\u012a\u0003\u012a\u0003\u012a\u0003\u012a\u0003\u012a\u0003",
    "\u012a\u0003\u012a\u0003\u012a\u0003\u012b\u0003\u012b\u0003\u012b\u0003",
    "\u012b\u0003\u012b\u0003\u012b\u0003\u012b\u0005\u012b\u104d\n\u012b",
    "\u0003\u012c\u0003\u012c\u0005\u012c\u1051\n\u012c\u0003\u012c\u0003",
    "\u012c\u0003\u012c\u0007\u012c\u1056\n\u012c\f\u012c\u000e\u012c\u1059",
    "\u000b\u012c\u0003\u012c\u0003\u012c\u0003\u012c\u0005\u012c\u105e\n",
    "\u012c\u0003\u012d\u0003\u012d\u0005\u012d\u1062\n\u012d\u0003\u012d",
    "\u0005\u012d\u1065\n\u012d\u0003\u012d\u0003\u012d\u0003\u012d\u0007",
    "\u012d\u106a\n\u012d\f\u012d\u000e\u012d\u106d\u000b\u012d\u0003\u012d",
    "\u0003\u012d\u0003\u012d\u0003\u012e\u0003\u012e\u0003\u012e\u0003\u012e",
    "\u0003\u012f\u0003\u012f\u0003\u012f\u0003\u012f\u0003\u012f\u0003\u0130",
    "\u0003\u0130\u0003\u0130\u0003\u0130\u0003\u0130\u0003\u0131\u0003\u0131",
    "\u0003\u0131\u0003\u0131\u0003\u0131\u0003\u0132\u0003\u0132\u0003\u0132",
    "\u0003\u0132\u0003\u0133\u0003\u0133\u0003\u0133\u0003\u0133\u0005\u0133",
    "\u108d\n\u0133\u0003\u0134\u0003\u0134\u0003\u0134\u0003\u0135\u0003",
    "\u0135\u0003\u0135\u0003\u0135\u0005\u0135\u1096\n\u0135\u0003\u0136",
    "\u0003\u0136\u0003\u0136\u0003\u0136\u0003\u0137\u0003\u0137\u0003\u0137",
    "\u0003\u0137\u0003\u0138\u0003\u0138\u0003\u0138\u0003\u0138\u0003\u0139",
    "\u0003\u0139\u0003\u013a\u0003\u013a\u0003\u013a\u0003\u013a\u0005\u013a",
    "\u10aa\n\u013a\u0003\u013b\u0005\u013b\u10ad\n\u013b\u0003\u013b\u0003",
    "\u013b\u0003\u013b\u0003\u013b\u0003\u013c\u0003\u013c\u0003\u013c\u0003",
    "\u013c\u0003\u013c\u0003\u013c\u0005\u013c\u10b9\n\u013c\u0003\u013c",
    "\u0003\u013c\u0005\u013c\u10bd\n\u013c\u0003\u013c\u0003\u013c\u0003",
    "\u013c\u0003\u013c\u0005\u013c\u10c3\n\u013c\u0003\u013c\u0003\u013c",
    "\u0003\u013c\u0003\u013c\u0003\u013c\u0005\u013c\u10ca\n\u013c\u0003",
    "\u013c\u0005\u013c\u10cd\n\u013c\u0003\u013c\u0003\u013c\u0003\u013c",
    "\u0003\u013c\u0005\u013c\u10d3\n\u013c\u0003\u013d\u0003\u013d\u0003",
    "\u013d\u0003\u013d\u0003\u013e\u0003\u013e\u0003\u013e\u0007\u013e\u10dc",
    "\n\u013e\f\u013e\u000e\u013e\u10df\u000b\u013e\u0003\u013f\u0003\u013f",
    "\u0003\u013f\u0003\u013f\u0003\u013f\u0005\u013f\u10e6\n\u013f\u0003",
    "\u0140\u0003\u0140\u0003\u0140\u0003\u0140\u0003\u0140\u0003\u0140\u0003",
    "\u0140\u0003\u0140\u0003\u0140\u0003\u0140\u0003\u0140\u0003\u0140\u0003",
    "\u0140\u0003\u0140\u0003\u0140\u0003\u0140\u0005\u0140\u10f8\n\u0140",
    "\u0003\u0141\u0003\u0141\u0003\u0141\u0003\u0142\u0003\u0142\u0005\u0142",
    "\u10ff\n\u0142\u0005\u0142\u1101\n\u0142\u0003\u0143\u0003\u0143\u0003",
    "\u0143\u0003\u0143\u0005\u0143\u1107\n\u0143\u0003\u0143\u0003\u0143",
    "\u0005\u0143\u110b\n\u0143\u0003\u0143\u0003\u0143\u0003\u0143\u0003",
    "\u0143\u0005\u0143\u1111\n\u0143\u0003\u0143\u0003\u0143\u0005\u0143",
    "\u1115\n\u0143\u0003\u0143\u0003\u0143\u0003\u0143\u0003\u0143\u0003",
    "\u0143\u0003\u0143\u0005\u0143\u111d\n\u0143\u0003\u0144\u0003\u0144",
    "\u0003\u0144\u0007\u0144\u1122\n\u0144\f\u0144\u000e\u0144\u1125\u000b",
    "\u0144\u0003\u0145\u0003\u0145\u0003\u0145\u0003\u0145\u0003\u0145\u0003",
    "\u0145\u0005\u0145\u112d\n\u0145\u0003\u0146\u0003\u0146\u0003\u0147",
    "\u0003\u0147\u0003\u0147\u0003\u0148\u0003\u0148\u0003\u0148\u0003\u0148",
    "\u0003\u0149\u0003\u0149\u0003\u0149\u0003\u0149\u0003\u014a\u0003\u014a",
    "\u0003\u014a\u0003\u014b\u0003\u014b\u0003\u014b\u0003\u014b\u0003\u014c",
    "\u0003\u014c\u0003\u014c\u0007\u014c\u1146\n\u014c\f\u014c\u000e\u014c",
    "\u1149\u000b\u014c\u0003\u014d\u0003\u014d\u0003\u014d\u0003\u014d\u0003",
    "\u014d\u0003\u014d\u0005\u014d\u1151\n\u014d\u0007\u014d\u1153\n\u014d",
    "\f\u014d\u000e\u014d\u1156\u000b\u014d\u0003\u014e\u0003\u014e\u0003",
    "\u014e\u0003\u014e\u0003\u014e\u0003\u014e\u0005\u014e\u115e\n\u014e",
    "\u0007\u014e\u1160\n\u014e\f\u014e\u000e\u014e\u1163\u000b\u014e\u0003",
    "\u014e\u0005\u014e\u1166\n\u014e\u0003\u014f\u0003\u014f\u0005\u014f",
    "\u116a\n\u014f\u0003\u0150\u0003\u0150\u0005\u0150\u116e\n\u0150\u0003",
    "\u0151\u0003\u0151\u0005\u0151\u1172\n\u0151\u0003\u0152\u0003\u0152",
    "\u0003\u0153\u0003\u0153\u0003\u0153\u0005\u0153\u1179\n\u0153\u0003",
    "\u0154\u0003\u0154\u0003\u0154\u0003\u0154\u0003\u0154\u0005\u0154\u1180",
    "\n\u0154\u0003\u0155\u0003\u0155\u0005\u0155\u1184\n\u0155\u0003\u0155",
    "\u0003\u0155\u0003\u0155\u0003\u0155\u0003\u0155\u0003\u0155\u0005\u0155",
    "\u118c\n\u0155\u0003\u0156\u0003\u0156\u0005\u0156\u1190\n\u0156\u0003",
    "\u0156\u0003\u0156\u0003\u0156\u0003\u0156\u0003\u0156\u0005\u0156\u1197",
    "\n\u0156\u0003\u0156\u0005\u0156\u119a\n\u0156\u0003\u0156\u0005\u0156",
    "\u119d\n\u0156\u0003\u0156\u0005\u0156\u11a0\n\u0156\u0003\u0156\u0003",
    "\u0156\u0003\u0156\u0003\u0157\u0003\u0157\u0003\u0157\u0003\u0158\u0003",
    "\u0158\u0003\u0158\u0003\u0159\u0003\u0159\u0003\u0159\u0005\u0159\u11ae",
    "\n\u0159\u0003\u0159\u0003\u0159\u0003\u0159\u0003\u0159\u0003\u0159",
    "\u0005\u0159\u11b5\n\u0159\u0003\u0159\u0005\u0159\u11b8\n\u0159\u0003",
    "\u0159\u0005\u0159\u11bb\n\u0159\u0003\u0159\u0005\u0159\u11be\n\u0159",
    "\u0003\u0159\u0005\u0159\u11c1\n\u0159\u0003\u0159\u0003\u0159\u0003",
    "\u0159\u0003\u015a\u0003\u015a\u0003\u015a\u0003\u015a\u0003\u015a\u0003",
    "\u015a\u0003\u015b\u0003\u015b\u0003\u015b\u0003\u015b\u0003\u015c\u0003",
    "\u015c\u0003\u015c\u0003\u015c\u0003\u015c\u0003\u015d\u0003\u015d\u0003",
    "\u015d\u0003\u015d\u0003\u015d\u0003\u015e\u0003\u015e\u0003\u015e\u0003",
    "\u015e\u0003\u015e\u0003\u015e\u0003\u015e\u0003\u015e\u0005\u015e\u11e2",
    "\n\u015e\u0003\u015f\u0003\u015f\u0003\u015f\u0003\u015f\u0003\u015f",
    "\u0003\u015f\u0003\u015f\u0005\u015f\u11eb\n\u015f\u0003\u0160\u0003",
    "\u0160\u0005\u0160\u11ef\n\u0160\u0003\u0160\u0003\u0160\u0003\u0161",
    "\u0003\u0161\u0003\u0161\u0003\u0161\u0003\u0161\u0005\u0161\u11f8\n",
    "\u0161\u0003\u0162\u0003\u0162\u0003\u0162\u0003\u0162\u0003\u0162\u0003",
    "\u0162\u0003\u0162\u0003\u0163\u0003\u0163\u0003\u0164\u0007\u0164\u1204",
    "\n\u0164\f\u0164\u000e\u0164\u1207\u000b\u0164\u0003\u0164\u0003\u0164",
    "\u0003\u0165\u0003\u0165\u0003\u0165\u0005\u0165\u120e\n\u0165\u0003",
    "\u0166\u0003\u0166\u0003\u0167\u0003\u0167\u0003\u0167\u0003\u0167\u0007",
    "\u0167\u1216\n\u0167\f\u0167\u000e\u0167\u1219\u000b\u0167\u0003\u0168",
    "\u0003\u0168\u0003\u0169\u0003\u0169\u0003\u0169\u0003\u0169\u0007\u0169",
    "\u1221\n\u0169\f\u0169\u000e\u0169\u1224\u000b\u0169\u0003\u016a\u0003",
    "\u016a\u0003\u016b\u0003\u016b\u0003\u016b\u0003\u016b\u0007\u016b\u122c",
    "\n\u016b\f\u016b\u000e\u016b\u122f\u000b\u016b\u0003\u016c\u0003\u016c",
    "\u0003\u016d\u0003\u016d\u0003\u016d\u0003\u016d\u0007\u016d\u1237\n",
    "\u016d\f\u016d\u000e\u016d\u123a\u000b\u016d\u0003\u016e\u0003\u016e",
    "\u0003\u016f\u0003\u016f\u0003\u016f\u0003\u016f\u0007\u016f\u1242\n",
    "\u016f\f\u016f\u000e\u016f\u1245\u000b\u016f\u0003\u0170\u0003\u0170",
    "\u0003\u0171\u0003\u0171\u0003\u0171\u0003\u0171\u0007\u0171\u124d\n",
    "\u0171\f\u0171\u000e\u0171\u1250\u000b\u0171\u0003\u0171\u0005\u0171",
    "\u1253\n\u0171\u0003\u0172\u0003\u0172\u0003\u0173\u0003\u0173\u0003",
    "\u0173\u0003\u0173\u0003\u0173\u0003\u0173\u0003\u0173\u0003\u0173\u0005",
    "\u0173\u125f\n\u0173\u0003\u0174\u0003\u0174\u0003\u0175\u0003\u0175",
    "\u0003\u0175\u0003\u0175\u0003\u0175\u0005\u0175\u1268\n\u0175\u0003",
    "\u0176\u0003\u0176\u0003\u0176\u0003\u0176\u0003\u0177\u0003\u0177\u0005",
    "\u0177\u1270\n\u0177\u0003\u0178\u0003\u0178\u0006\u0178\u1274\n\u0178",
    "\r\u0178\u000e\u0178\u1275\u0003\u0179\u0003\u0179\u0003\u0179\u0007",
    "\u0179\u127b\n\u0179\f\u0179\u000e\u0179\u127e\u000b\u0179\u0003\u017a",
    "\u0003\u017a\u0003\u017b\u0003\u017b\u0003\u017b\u0005\u017b\u1285\n",
    "\u017b\u0003\u017c\u0003\u017c\u0005\u017c\u1289\n\u017c\u0003\u017d",
    "\u0003\u017d\u0003\u017d\u0005\u017d\u128e\n\u017d\u0003\u017e\u0003",
    "\u017e\u0003\u017e\u0003\u017e\u0005\u017e\u1294\n\u017e\u0003\u017f",
    "\u0003\u017f\u0003\u017f\u0003\u017f\u0005\u017f\u129a\n\u017f\u0003",
    "\u0180\u0003\u0180\u0003\u0181\u0007\u0181\u129f\n\u0181\f\u0181\u000e",
    "\u0181\u12a2\u000b\u0181\u0003\u0181\u0003\u0181\u0003\u0182\u0003\u0182",
    "\u0003\u0183\u0003\u0183\u0003\u0183\u0003\u0183\u0007\u0183\u12ac\n",
    "\u0183\f\u0183\u000e\u0183\u12af\u000b\u0183\u0003\u0184\u0003\u0184",
    "\u0003\u0185\u0003\u0185\u0003\u0185\u0003\u0185\u0007\u0185\u12b7\n",
    "\u0185\f\u0185\u000e\u0185\u12ba\u000b\u0185\u0003\u0186\u0003\u0186",
    "\u0003\u0186\u0003\u0186\u0007\u0186\u12c0\n\u0186\f\u0186\u000e\u0186",
    "\u12c3\u000b\u0186\u0003\u0187\u0003\u0187\u0003\u0187\u0003\u0188\u0003",
    "\u0188\u0003\u0188\u0003\u0188\u0003\u0188\u0003\u0188\u0003\u0188\u0003",
    "\u0188\u0005\u0188\u12d0\n\u0188\u0007\u0188\u12d2\n\u0188\f\u0188\u000e",
    "\u0188\u12d5\u000b\u0188\u0003\u0188\u0003\u0188\u0003\u0188\u0003\u0188",
    "\u0006\u0188\u12db\n\u0188\r\u0188\u000e\u0188\u12dc\u0005\u0188\u12df",
    "\n\u0188\u0003\u0189\u0005\u0189\u12e2\n\u0189\u0003\u0189\u0003\u0189",
    "\u0003\u0189\u0003\u018a\u0003\u018a\u0003\u018a\u0003\u018a\u0007\u018a",
    "\u12eb\n\u018a\f\u018a\u000e\u018a\u12ee\u000b\u018a\u0003\u018a\u0003",
    "\u018a\u0003\u018b\u0003\u018b\u0003\u018c\u0003\u018c\u0003\u018c\u0003",
    "\u018c\u0003\u018c\u0005\u018c\u12f9\n\u018c\u0003\u018d\u0003\u018d",
    "\u0003\u018d\u0003\u018d\u0003\u018d\u0005\u018d\u1300\n\u018d\u0003",
    "\u018d\u0003\u018d\u0003\u018d\u0005\u018d\u1305\n\u018d\u0003\u018d",
    "\u0003\u018d\u0003\u018d\u0005\u018d\u130a\n\u018d\u0003\u018d\u0003",
    "\u018d\u0003\u018d\u0003\u018d\u0003\u018d\u0003\u018d\u0003\u018d\u0005",
    "\u018d\u1313\n\u018d\u0003\u018e\u0003\u018e\u0003\u018e\u0003\u018e",
    "\u0003\u018e\u0003\u018e\u0003\u018e\u0003\u018e\u0003\u018e\u0007\u018e",
    "\u131e\n\u018e\f\u018e\u000e\u018e\u1321\u000b\u018e\u0005\u018e\u1323",
    "\n\u018e\u0003\u018e\u0003\u018e\u0003\u018e\u0003\u018e\u0003\u018e",
    "\u0003\u018e\u0003\u018e\u0003\u018e\u0007\u018e\u132d\n\u018e\f\u018e",
    "\u000e\u018e\u1330\u000b\u018e\u0005\u018e\u1332\n\u018e\u0005\u018e",
    "\u1334\n\u018e\u0003\u018f\u0003\u018f\u0003\u018f\u0003\u018f\u0003",
    "\u018f\u0005\u018f\u133b\n\u018f\u0003\u018f\u0007\u018f\u133e\n\u018f",
    "\f\u018f\u000e\u018f\u1341\u000b\u018f\u0003\u0190\u0003\u0190\u0005",
    "\u0190\u1345\n\u0190\u0003\u0190\u0005\u0190\u1348\n\u0190\u0003\u0190",
    "\u0005\u0190\u134b\n\u0190\u0003\u0190\u0005\u0190\u134e\n\u0190\u0003",
    "\u0190\u0005\u0190\u1351\n\u0190\u0003\u0191\u0003\u0191\u0003\u0191",
    "\u0003\u0191\u0005\u0191\u1357\n\u0191\u0003\u0191\u0005\u0191\u135a",
    "\n\u0191\u0003\u0192\u0003\u0192\u0003\u0192\u0003\u0192\u0005\u0192",
    "\u1360\n\u0192\u0003\u0192\u0005\u0192\u1363\n\u0192\u0003\u0193\u0003",
    "\u0193\u0003\u0193\u0003\u0193\u0007\u0193\u1369\n\u0193\f\u0193\u000e",
    "\u0193\u136c\u000b\u0193\u0003\u0193\u0003\u0193\u0005\u0193\u1370\n",
    "\u0193\u0003\u0194\u0003\u0194\u0003\u0194\u0003\u0194\u0005\u0194\u1376",
    "\n\u0194\u0003\u0194\u0003\u0194\u0003\u0194\u0003\u0194\u0005\u0194",
    "\u137c\n\u0194\u0003\u0194\u0005\u0194\u137f\n\u0194\u0003\u0195\u0003",
    "\u0195\u0003\u0195\u0003\u0195\u0003\u0195\u0003\u0195\u0003\u0195\u0003",
    "\u0196\u0003\u0196\u0003\u0197\u0007\u0197\u138b\n\u0197\f\u0197\u000e",
    "\u0197\u138e\u000b\u0197\u0003\u0197\u0003\u0197\u0003\u0198\u0003\u0198",
    "\u0003\u0199\u0003\u0199\u0003\u0199\u0003\u0199\u0003\u0199\u0003\u019a",
    "\u0003\u019a\u0003\u019a\u0003\u019b\u0003\u019b\u0003\u019c\u0003\u019c",
    "\u0003\u019c\u0003\u019c\u0003\u019c\u0003\u019c\u0003\u019c\u0003\u019c",
    "\u0003\u019c\u0003\u019c\u0003\u019c\u0007\u019c\u13a9\n\u019c\f\u019c",
    "\u000e\u019c\u13ac\u000b\u019c\u0005\u019c\u13ae\n\u019c\u0003\u019c",
    "\u0003\u019c\u0003\u019d\u0003\u019d\u0003\u019d\u0003\u019d\u0003\u019d",
    "\u0005\u019d\u13b7\n\u019d\u0003\u019d\u0003\u019d\u0003\u019d\u0003",
    "\u019d\u0003\u019d\u0005\u019d\u13be\n\u019d\u0003\u019e\u0003\u019e",
    "\u0005\u019e\u13c2\n\u019e\u0003\u019f\u0003\u019f\u0003\u019f\u0003",
    "\u019f\u0005\u019f\u13c8\n\u019f\u0003\u019f\u0003\u019f\u0003\u019f",
    "\u0007\u019f\u13cd\n\u019f\f\u019f\u000e\u019f\u13d0\u000b\u019f\u0005",
    "\u019f\u13d2\n\u019f\u0005\u019f\u13d4\n\u019f\u0003\u019f\u0003\u019f",
    "\u0003\u019f\u0005\u019f\u13d9\n\u019f\u0003\u01a0\u0003\u01a0\u0003",
    "\u01a0\u0003\u01a0\u0003\u01a0\u0005\u01a0\u13e0\n\u01a0\u0003\u01a1",
    "\u0003\u01a1\u0005\u01a1\u13e4\n\u01a1\u0003\u01a2\u0003\u01a2\u0005",
    "\u01a2\u13e8\n\u01a2\u0003\u01a2\u0003\u01a2\u0003\u01a3\u0003\u01a3",
    "\u0003\u01a3\u0005\u01a3\u13ef\n\u01a3\u0003\u01a3\u0003\u01a3\u0005",
    "\u01a3\u13f3\n\u01a3\u0003\u01a4\u0003\u01a4\u0003\u01a4\u0003\u01a4",
    "\u0003\u01a4\u0003\u01a4\u0003\u01a4\u0003\u01a5\u0003\u01a5\u0003\u01a5",
    "\u0003\u01a5\u0003\u01a5\u0003\u01a6\u0003\u01a6\u0003\u01a6\u0003\u01a6",
    "\u0003\u01a6\u0003\u01a7\u0003\u01a7\u0003\u01a7\u0003\u01a7\u0003\u01a7",
    "\u0003\u01a7\u0005\u01a7\u140c\n\u01a7\u0003\u01a8\u0003\u01a8\u0003",
    "\u01a8\u0003\u01a8\u0003\u01a8\u0003\u01a9\u0003\u01a9\u0003\u01a9\u0003",
    "\u01a9\u0003\u01aa\u0003\u01aa\u0003\u01aa\u0003\u01aa\u0003\u01ab\u0003",
    "\u01ab\u0003\u01ab\u0003\u01ab\u0003\u01ab\u0003\u01ab\u0003\u01ab\u0003",
    "\u01ac\u0003\u01ac\u0003\u01ac\u0003\u01ac\u0003\u01ac\u0003\u01ac\u0003",
    "\u01ac\u0003\u01ac\u0005\u01ac\u142a\n\u01ac\u0003\u01ac\u0003\u01ac",
    "\u0003\u01ad\u0003\u01ad\u0003\u01ae\u0003\u01ae\u0003\u01af\u0003\u01af",
    "\u0003\u01b0\u0003\u01b0\u0003\u01b0\u0003\u01b0\u0003\u01b0\u0003\u01b1",
    "\u0003\u01b1\u0003\u01b1\u0003\u01b1\u0003\u01b1\u0003\u01b2\u0003\u01b2",
    "\u0003\u01b2\u0003\u01b2\u0003\u01b2\u0003\u01b3\u0003\u01b3\u0003\u01b3",
    "\u0003\u01b3\u0003\u01b3\u0003\u01b4\u0003\u01b4\u0003\u01b4\u0003\u01b4",
    "\u0003\u01b4\u0003\u01b5\u0003\u01b5\u0003\u01b5\u0003\u01b5\u0003\u01b5",
    "\u0003\u01b6\u0003\u01b6\u0003\u01b6\u0003\u01b6\u0003\u01b6\u0003\u01b6",
    "\u0003\u01b6\u0006\u01b6\u1459\n\u01b6\r\u01b6\u000e\u01b6\u145a\u0003",
    "\u01b6\u0003\u01b6\u0005\u01b6\u145f\n\u01b6\u0003\u01b6\u0003\u01b6",
    "\u0003\u01b7\u0003\u01b7\u0003\u01b7\u0003\u01b7\u0003\u01b7\u0003\u01b7",
    "\u0006\u01b7\u1469\n\u01b7\r\u01b7\u000e\u01b7\u146a\u0003\u01b7\u0003",
    "\u01b7\u0005\u01b7\u146f\n\u01b7\u0003\u01b7\u0003\u01b7\u0003\u01b8",
    "\u0003\u01b8\u0003\u01b9\u0003\u01b9\u0003\u01b9\u0007\u01b9\u1478\n",
    "\u01b9\f\u01b9\u000e\u01b9\u147b\u000b\u01b9\u0003\u01ba\u0003\u01ba",
    "\u0003\u01ba\u0003\u01bb\u0003\u01bb\u0003\u01bc\u0003\u01bc\u0003\u01bc",
    "\u0003\u01bc\u0003\u01bc\u0003\u01bc\u0003\u01bc\u0003\u01bc\u0003\u01bc",
    "\u0003\u01bc\u0003\u01bc\u0003\u01bc\u0003\u01bc\u0003\u01bc\u0003\u01bc",
    "\u0003\u01bc\u0003\u01bc\u0003\u01bc\u0003\u01bd\u0003\u01bd\u0003\u01bd",
    "\u0003\u01bd\u0003\u01bd\u0005\u01bd\u1499\n\u01bd\u0003\u01be\u0003",
    "\u01be\u0005\u01be\u149d\n\u01be\u0003\u01be\u0003\u01be\u0006\u01be",
    "\u14a1\n\u01be\r\u01be\u000e\u01be\u14a2\u0003\u01bf\u0003\u01bf\u0003",
    "\u01bf\u0005\u01bf\u14a8\n\u01bf\u0003\u01bf\u0003\u01bf\u0003\u01bf",
    "\u0003\u01bf\u0005\u01bf\u14ae\n\u01bf\u0003\u01bf\u0003\u01bf\u0003",
    "\u01c0\u0003\u01c0\u0003\u01c0\u0003\u01c0\u0003\u01c0\u0005\u01c0\u14b7",
    "\n\u01c0\u0003\u01c1\u0003\u01c1\u0003\u01c1\u0003\u01c1\u0007\u01c1",
    "\u14bd\n\u01c1\f\u01c1\u000e\u01c1\u14c0\u000b\u01c1\u0005\u01c1\u14c2",
    "\n\u01c1\u0003\u01c2\u0003\u01c2\u0003\u01c2\u0003\u01c2\u0003\u01c2",
    "\u0005\u01c2\u14c9\n\u01c2\u0003\u01c2\u0003\u01c2\u0003\u01c2\u0003",
    "\u01c2\u0005\u01c2\u14cf\n\u01c2\u0003\u01c3\u0003\u01c3\u0003\u01c3",
    "\u0003\u01c3\u0003\u01c3\u0003\u01c3\u0003\u01c3\u0005\u01c3\u14d8\n",
    "\u01c3\u0003\u01c4\u0003\u01c4\u0005\u01c4\u14dc\n\u01c4\u0003\u01c5",
    "\u0003\u01c5\u0003\u01c5\u0003\u01c5\u0007\u01c5\u14e2\n\u01c5\f\u01c5",
    "\u000e\u01c5\u14e5\u000b\u01c5\u0003\u01c5\u0003\u01c5\u0003\u01c6\u0003",
    "\u01c6\u0003\u01c6\u0007\u01c6\u14ec\n\u01c6\f\u01c6\u000e\u01c6\u14ef",
    "\u000b\u01c6\u0003\u01c6\u0003\u01c6\u0003\u01c6\u0007\u01c6\u14f4\n",
    "\u01c6\f\u01c6\u000e\u01c6\u14f7\u000b\u01c6\u0003\u01c6\u0003\u01c6",
    "\u0003\u01c6\u0007\u01c6\u14fc\n\u01c6\f\u01c6\u000e\u01c6\u14ff\u000b",
    "\u01c6\u0003\u01c6\u0003\u01c6\u0003\u01c6\u0005\u01c6\u1504\n\u01c6",
    "\u0003\u01c7\u0003\u01c7\u0003\u01c7\u0003\u01c7\u0003\u01c7\u0007\u01c7",
    "\u150b\n\u01c7\f\u01c7\u000e\u01c7\u150e\u000b\u01c7\u0003\u01c7\u0003",
    "\u01c7\u0003\u01c8\u0003\u01c8\u0003\u01c8\u0003\u01c8\u0003\u01c8\u0007",
    "\u01c8\u1517\n\u01c8\f\u01c8\u000e\u01c8\u151a\u000b\u01c8\u0003\u01c8",
    "\u0003\u01c8\u0003\u01c9\u0003\u01c9\u0003\u01c9\u0003\u01c9\u0003\u01c9",
    "\u0003\u01c9\u0007\u01c9\u1524\n\u01c9\f\u01c9\u000e\u01c9\u1527\u000b",
    "\u01c9\u0003\u01c9\u0003\u01c9\u0003\u01ca\u0003\u01ca\u0003\u01ca\u0003",
    "\u01ca\u0003\u01ca\u0007\u01ca\u1530\n\u01ca\f\u01ca\u000e\u01ca\u1533",
    "\u000b\u01ca\u0003\u01cb\u0003\u01cb\u0003\u01cc\u0003\u01cc\u0003\u01cc",
    "\u0005\u01cc\u153a\n\u01cc\u0003\u01cd\u0003\u01cd\u0003\u01cd\u0005",
    "\u01cd\u153f\n\u01cd\u0003\u01cd\u0003\u01cd\u0003\u01cd\u0005\u01cd",
    "\u1544\n\u01cd\u0003\u01cd\u0003\u01cd\u0003\u01cd\u0003\u01cd\u0003",
    "\u01ce\u0003\u01ce\u0003\u01ce\u0003\u01ce\u0003\u01ce\u0003\u01ce\u0003",
    "\u01cf\u0003\u01cf\u0005\u01cf\u1552\n\u01cf\u0003\u01cf\u0003\u01cf",
    "\u0005\u01cf\u1556\n\u01cf\u0003\u01cf\u0003\u01cf\u0003\u01cf\u0005",
    "\u01cf\u155b\n\u01cf\u0003\u01d0\u0003\u01d0\u0003\u01d0\u0003\u01d0",
    "\u0003\u01d0\u0003\u01d0\u0003\u01d0\u0003\u01d0\u0003\u01d0\u0003\u01d0",
    "\u0005\u01d0\u1567\n\u01d0\u0003\u01d0\u0003\u01d0\u0003\u01d0\u0003",
    "\u01d0\u0003\u01d0\u0003\u01d0\u0003\u01d0\u0003\u01d0\u0003\u01d0\u0003",
    "\u01d0\u0005\u01d0\u1573\n\u01d0\u0003\u01d0\u0003\u01d0\u0003\u01d0",
    "\u0003\u01d0\u0003\u01d0\u0003\u01d0\u0003\u01d0\u0003\u01d0\u0003\u01d0",
    "\u0003\u01d0\u0005\u01d0\u157f\n\u01d0\u0003\u01d1\u0003\u01d1\u0003",
    "\u01d1\u0003\u01d1\u0003\u01d1\u0003\u01d1\u0003\u01d1\u0003\u01d1\u0003",
    "\u01d1\u0003\u01d1\u0005\u01d1\u158b\n\u01d1\u0003\u01d2\u0003\u01d2",
    "\u0003\u01d2\u0007\u01d2\u1590\n\u01d2\f\u01d2\u000e\u01d2\u1593\u000b",
    "\u01d2\u0003\u01d3\u0003\u01d3\u0005\u01d3\u1597\n\u01d3\u0003\u01d4",
    "\u0003\u01d4\u0003\u01d4\u0003\u01d4\u0003\u01d4\u0003\u01d5\u0003\u01d5",
    "\u0003\u01d5\u0003\u01d5\u0003\u01d6\u0003\u01d6\u0003\u01d6\u0005\u01d6",
    "\u15a5\n\u01d6\u0003\u01d6\u0003\u01d6\u0003\u01d6\u0003\u01d6\u0003",
    "\u01d7\u0003\u01d7\u0003\u01d7\u0007\u01d7\u15ae\n\u01d7\f\u01d7\u000e",
    "\u01d7\u15b1\u000b\u01d7\u0003\u01d8\u0003\u01d8\u0005\u01d8\u15b5\n",
    "\u01d8\u0003\u01d9\u0003\u01d9\u0003\u01d9\u0003\u01d9\u0003\u01d9\u0003",
    "\u01d9\u0005\u01d9\u15bd\n\u01d9\u0003\u01da\u0003\u01da\u0003\u01da",
    "\u0003\u01da\u0003\u01da\u0003\u01db\u0003\u01db\u0003\u01db\u0003\u01db",
    "\u0003\u01db\u0005\u01db\u15c9\n\u01db\u0003\u01dc\u0003\u01dc\u0005",
    "\u01dc\u15cd\n\u01dc\u0003\u01dc\u0003\u01dc\u0003\u01dc\u0003\u01dc",
    "\u0007\u01dc\u15d3\n\u01dc\f\u01dc\u000e\u01dc\u15d6\u000b\u01dc\u0005",
    "\u01dc\u15d8\n\u01dc\u0003\u01dc\u0003\u01dc\u0005\u01dc\u15dc\n\u01dc",
    "\u0003\u01dc\u0005\u01dc\u15df\n\u01dc\u0003\u01dc\u0005\u01dc\u15e2",
    "\n\u01dc\u0003\u01dc\u0005\u01dc\u15e5\n\u01dc\u0003\u01dc\u0005\u01dc",
    "\u15e8\n\u01dc\u0003\u01dc\u0005\u01dc\u15eb\n\u01dc\u0003\u01dc\u0005",
    "\u01dc\u15ee\n\u01dc\u0003\u01dc\u0005\u01dc\u15f1\n\u01dc\u0003\u01dc",
    "\u0005\u01dc\u15f4\n\u01dc\u0003\u01dc\u0005\u01dc\u15f7\n\u01dc\u0003",
    "\u01dc\u0005\u01dc\u15fa\n\u01dc\u0003\u01dc\u0005\u01dc\u15fd\n\u01dc",
    "\u0003\u01dc\u0005\u01dc\u1600\n\u01dc\u0003\u01dd\u0003\u01dd\u0005",
    "\u01dd\u1604\n\u01dd\u0003\u01dd\u0003\u01dd\u0003\u01dd\u0003\u01dd",
    "\u0007\u01dd\u160a\n\u01dd\f\u01dd\u000e\u01dd\u160d\u000b\u01dd\u0005",
    "\u01dd\u160f\n\u01dd\u0003\u01dd\u0003\u01dd\u0005\u01dd\u1613\n\u01dd",
    "\u0003\u01dd\u0005\u01dd\u1616\n\u01dd\u0003\u01dd\u0005\u01dd\u1619",
    "\n\u01dd\u0003\u01dd\u0005\u01dd\u161c\n\u01dd\u0003\u01dd\u0005\u01dd",
    "\u161f\n\u01dd\u0003\u01dd\u0005\u01dd\u1622\n\u01dd\u0003\u01dd\u0005",
    "\u01dd\u1625\n\u01dd\u0003\u01dd\u0005\u01dd\u1628\n\u01dd\u0003\u01dd",
    "\u0005\u01dd\u162b\n\u01dd\u0003\u01dd\u0005\u01dd\u162e\n\u01dd\u0003",
    "\u01dd\u0005\u01dd\u1631\n\u01dd\u0003\u01dd\u0005\u01dd\u1634\n\u01dd",
    "\u0003\u01dd\u0005\u01dd\u1637\n\u01dd\u0003\u01de\u0003\u01de\u0003",
    "\u01de\u0005\u01de\u163c\n\u01de\u0003\u01de\u0003\u01de\u0003\u01de",
    "\u0003\u01df\u0003\u01df\u0003\u01df\u0003\u01df\u0003\u01df\u0003\u01e0",
    "\u0003\u01e0\u0006\u01e0\u1648\n\u01e0\r\u01e0\u000e\u01e0\u1649\u0003",
    "\u01e0\u0003\u01e0\u0003\u01e1\u0005\u01e1\u164f\n\u01e1\u0003\u01e1",
    "\u0003\u01e1\u0003\u01e1\u0003\u01e1\u0003\u01e1\u0003\u01e1\u0005\u01e1",
    "\u1657\n\u01e1\u0003\u01e2\u0003\u01e2\u0003\u01e2\u0005\u01e2\u165c",
    "\n\u01e2\u0003\u01e2\u0003\u01e2\u0003\u01e2\u0003\u01e2\u0005\u01e2",
    "\u1662\n\u01e2\u0003\u01e2\u0005\u01e2\u1665\n\u01e2\u0003\u01e2\u0005",
    "\u01e2\u1668\n\u01e2\u0003\u01e2\u0005\u01e2\u166b\n\u01e2\u0003\u01e2",
    "\u0005\u01e2\u166e\n\u01e2\u0003\u01e2\u0005\u01e2\u1671\n\u01e2\u0003",
    "\u01e2\u0005\u01e2\u1674\n\u01e2\u0003\u01e2\u0005\u01e2\u1677\n\u01e2",
    "\u0003\u01e2\u0005\u01e2\u167a\n\u01e2\u0003\u01e2\u0005\u01e2\u167d",
    "\n\u01e2\u0003\u01e2\u0005\u01e2\u1680\n\u01e2\u0003\u01e2\u0003\u01e2",
    "\u0003\u01e2\u0003\u01e2\u0003\u01e2\u0005\u01e2\u1687\n\u01e2\u0003",
    "\u01e3\u0003\u01e3\u0003\u01e3\u0003\u01e4\u0003\u01e4\u0003\u01e4\u0005",
    "\u01e4\u168f\n\u01e4\u0003\u01e4\u0005\u01e4\u1692\n\u01e4\u0003\u01e4",
    "\u0005\u01e4\u1695\n\u01e4\u0003\u01e4\u0005\u01e4\u1698\n\u01e4\u0003",
    "\u01e4\u0005\u01e4\u169b\n\u01e4\u0003\u01e4\u0005\u01e4\u169e\n\u01e4",
    "\u0003\u01e4\u0005\u01e4\u16a1\n\u01e4\u0003\u01e4\u0005\u01e4\u16a4",
    "\n\u01e4\u0003\u01e4\u0005\u01e4\u16a7\n\u01e4\u0003\u01e4\u0005\u01e4",
    "\u16aa\n\u01e4\u0003\u01e4\u0005\u01e4\u16ad\n\u01e4\u0003\u01e4\u0005",
    "\u01e4\u16b0\n\u01e4\u0003\u01e4\u0005\u01e4\u16b3\n\u01e4\u0003\u01e4",
    "\u0003\u01e4\u0005\u01e4\u16b7\n\u01e4\u0003\u01e4\u0005\u01e4\u16ba",
    "\n\u01e4\u0003\u01e4\u0005\u01e4\u16bd\n\u01e4\u0003\u01e4\u0005\u01e4",
    "\u16c0\n\u01e4\u0003\u01e4\u0005\u01e4\u16c3\n\u01e4\u0003\u01e4\u0005",
    "\u01e4\u16c6\n\u01e4\u0003\u01e4\u0005\u01e4\u16c9\n\u01e4\u0003\u01e4",
    "\u0005\u01e4\u16cc\n\u01e4\u0003\u01e4\u0005\u01e4\u16cf\n\u01e4\u0003",
    "\u01e4\u0005\u01e4\u16d2\n\u01e4\u0003\u01e4\u0005\u01e4\u16d5\n\u01e4",
    "\u0003\u01e4\u0005\u01e4\u16d8\n\u01e4\u0003\u01e4\u0005\u01e4\u16db",
    "\n\u01e4\u0005\u01e4\u16dd\n\u01e4\u0003\u01e5\u0003\u01e5\u0003\u01e5",
    "\u0003\u01e5\u0005\u01e5\u16e3\n\u01e5\u0003\u01e5\u0003\u01e5\u0003",
    "\u01e5\u0005\u01e5\u16e8\n\u01e5\u0003\u01e5\u0005\u01e5\u16eb\n\u01e5",
    "\u0003\u01e6\u0003\u01e6\u0003\u01e6\u0003\u01e7\u0003\u01e7\u0003\u01e7",
    "\u0003\u01e8\u0003\u01e8\u0003\u01e8\u0003\u01e9\u0003\u01e9\u0003\u01ea",
    "\u0003\u01ea\u0003\u01ea\u0003\u01ea\u0007\u01ea\u16fc\n\u01ea\f\u01ea",
    "\u000e\u01ea\u16ff\u000b\u01ea\u0003\u01eb\u0003\u01eb\u0003\u01eb\u0003",
    "\u01eb\u0007\u01eb\u1705\n\u01eb\f\u01eb\u000e\u01eb\u1708\u000b\u01eb",
    "\u0003\u01eb\u0003\u01eb\u0003\u01ec\u0003\u01ec\u0003\u01ec\u0003\u01ed",
    "\u0003\u01ed\u0003\u01ed\u0003\u01ed\u0003\u01ed\u0007\u01ed\u1714\n",
    "\u01ed\f\u01ed\u000e\u01ed\u1717\u000b\u01ed\u0003\u01ed\u0003\u01ed",
    "\u0003\u01ee\u0003\u01ee\u0003\u01ef\u0005\u01ef\u171e\n\u01ef\u0003",
    "\u01ef\u0003\u01ef\u0003\u01f0\u0003\u01f0\u0003\u01f0\u0003\u01f0\u0003",
    "\u01f1\u0003\u01f1\u0003\u01f1\u0005\u01f1\u1729\n\u01f1\u0003\u01f1",
    "\u0003\u01f1\u0003\u01f2\u0003\u01f2\u0003\u01f3\u0003\u01f3\u0003\u01f3",
    "\u0003\u01f3\u0005\u01f3\u1733\n\u01f3\u0003\u01f3\u0005\u01f3\u1736",
    "\n\u01f3\u0003\u01f3\u0003\u01f3\u0003\u01f3\u0005\u01f3\u173b\n\u01f3",
    "\u0003\u01f3\u0005\u01f3\u173e\n\u01f3\u0003\u01f3\u0003\u01f3\u0005",
    "\u01f3\u1742\n\u01f3\u0003\u01f4\u0003\u01f4\u0003\u01f4\u0003\u01f4",
    "\u0007\u01f4\u1748\n\u01f4\f\u01f4\u000e\u01f4\u174b\u000b\u01f4\u0003",
    "\u01f5\u0003\u01f5\u0003\u01f5\u0003\u01f5\u0006\u01f5\u1751\n\u01f5",
    "\r\u01f5\u000e\u01f5\u1752\u0003\u01f6\u0003\u01f6\u0003\u01f6\u0003",
    "\u01f6\u0003\u01f6\u0005\u01f6\u175a\n\u01f6\u0003\u01f7\u0003\u01f7",
    "\u0005\u01f7\u175e\n\u01f7\u0003\u01f7\u0003\u01f7\u0005\u01f7\u1762",
    "\n\u01f7\u0003\u01f7\u0003\u01f7\u0005\u01f7\u1766\n\u01f7\u0005\u01f7",
    "\u1768\n\u01f7\u0003\u01f8\u0003\u01f8\u0006\u01f8\u176c\n\u01f8\r\u01f8",
    "\u000e\u01f8\u176d\u0003\u01f8\u0003\u01f8\u0005\u01f8\u1772\n\u01f8",
    "\u0003\u01f9\u0003\u01f9\u0003\u01f9\u0003\u01f9\u0003\u01f9\u0003\u01f9",
    "\u0003\u01f9\u0005\u01f9\u177b\n\u01f9\u0003\u01f9\u0003\u01f9\u0003",
    "\u01f9\u0003\u01f9\u0005\u01f9\u1781\n\u01f9\u0003\u01fa\u0003\u01fa",
    "\u0003\u01fa\u0003\u01fa\u0005\u01fa\u1787\n\u01fa\u0003\u01fa\u0003",
    "\u01fa\u0003\u01fb\u0003\u01fb\u0003\u01fb\u0007\u01fb\u178e\n\u01fb",
    "\f\u01fb\u000e\u01fb\u1791\u000b\u01fb\u0003\u01fc\u0003\u01fc\u0005",
    "\u01fc\u1795\n\u01fc\u0003\u01fc\u0003\u01fc\u0005\u01fc\u1799\n\u01fc",
    "\u0003\u01fc\u0005\u01fc\u179c\n\u01fc\u0003\u01fd\u0003\u01fd\u0003",
    "\u01fd\u0003\u01fd\u0003\u01fd\u0003\u01fd\u0003\u01fd\u0007\u01fd\u17a5",
    "\n\u01fd\f\u01fd\u000e\u01fd\u17a8\u000b\u01fd\u0003\u01fd\u0003\u01fd",
    "\u0003\u01fe\u0003\u01fe\u0003\u01ff\u0006\u01ff\u17af\n\u01ff\r\u01ff",
    "\u000e\u01ff\u17b0\u0003\u0200\u0003\u0200\u0003\u0200\u0005\u0200\u17b6",
    "\n\u0200\u0003\u0201\u0006\u0201\u17b9\n\u0201\r\u0201\u000e\u0201\u17ba",
    "\u0003\u0202\u0003\u0202\u0003\u0202\u0003\u0202\u0003\u0202\u0003\u0202",
    "\u0003\u0202\u0003\u0202\u0003\u0202\u0005\u0202\u17c6\n\u0202\u0003",
    "\u0203\u0003\u0203\u0003\u0203\u0006\u0203\u17cb\n\u0203\r\u0203\u000e",
    "\u0203\u17cc\u0003\u0203\u0003\u0203\u0003\u0204\u0003\u0204\u0003\u0204",
    "\u0003\u0204\u0003\u0204\u0003\u0204\u0003\u0204\u0003\u0204\u0003\u0204",
    "\u0003\u0204\u0003\u0204\u0003\u0204\u0003\u0204\u0003\u0204\u0005\u0204",
    "\u17df\n\u0204\u0003\u0205\u0003\u0205\u0003\u0206\u0003\u0206\u0005",
    "\u0206\u17e5\n\u0206\u0003\u0206\u0003\u0206\u0005\u0206\u17e9\n\u0206",
    "\u0003\u0206\u0003\u0206\u0003\u0206\u0005\u0206\u17ee\n\u0206\u0003",
    "\u0206\u0005\u0206\u17f1\n\u0206\u0003\u0207\u0003\u0207\u0003\u0207",
    "\u0007\u0207\u17f6\n\u0207\f\u0207\u000e\u0207\u17f9\u000b\u0207\u0003",
    "\u0208\u0003\u0208\u0003\u0208\u0003\u0208\u0003\u0209\u0003\u0209\u0003",
    "\u0209\u0007\u0209\u1802\n\u0209\f\u0209\u000e\u0209\u1805\u000b\u0209",
    "\u0003\u020a\u0003\u020a\u0003\u020a\u0003\u020a\u0003\u020a\u0005\u020a",
    "\u180c\n\u020a\u0003\u020a\u0003\u020a\u0003\u020a\u0003\u020a\u0003",
    "\u020a\u0005\u020a\u1813\n\u020a\u0003\u020a\u0003\u020a\u0003\u020a",
    "\u0003\u020a\u0003\u020a\u0005\u020a\u181a\n\u020a\u0003\u020a\u0003",
    "\u020a\u0003\u020a\u0003\u020a\u0003\u020a\u0005\u020a\u1821\n\u020a",
    "\u0005\u020a\u1823\n\u020a\u0003\u020b\u0003\u020b\u0003\u020c\u0003",
    "\u020c\u0003\u020d\u0003\u020d\u0003\u020d\u0003\u020d\u0003\u020d\u0003",
    "\u020d\u0003\u020d\u0005\u020d\u1830\n\u020d\u0003\u020e\u0003\u020e",
    "\u0003\u020f\u0003\u020f\u0003\u0210\u0003\u0210\u0003\u0211\u0003\u0211",
    "\u0003\u0211\u0007\u0211\u183b\n\u0211\f\u0211\u000e\u0211\u183e\u000b",
    "\u0211\u0003\u0212\u0003\u0212\u0003\u0212\u0007\u0212\u1843\n\u0212",
    "\f\u0212\u000e\u0212\u1846\u000b\u0212\u0003\u0213\u0003\u0213\u0003",
    "\u0213\u0003\u0213\u0003\u0214\u0003\u0214\u0003\u0215\u0003\u0215\u0003",
    "\u0215\u0007\u0215\u1851\n\u0215\f\u0215\u000e\u0215\u1854\u000b\u0215",
    "\u0003\u0216\u0003\u0216\u0005\u0216\u1858\n\u0216\u0003\u0217\u0003",
    "\u0217\u0005\u0217\u185c\n\u0217\u0003\u0217\u0003\u0217\u0003\u0217",
    "\u0003\u0217\u0003\u0217\u0003\u0217\u0007\u0217\u1864\n\u0217\f\u0217",
    "\u000e\u0217\u1867\u000b\u0217\u0003\u0217\u0003\u0217\u0005\u0217\u186b",
    "\n\u0217\u0003\u0217\u0005\u0217\u186e\n\u0217\u0003\u0218\u0003\u0218",
    "\u0003\u0218\u0003\u0218\u0005\u0218\u1874\n\u0218\u0003\u0218\u0003",
    "\u0218\u0003\u0218\u0003\u0218\u0003\u0218\u0003\u0218\u0003\u0218\u0003",
    "\u0218\u0005\u0218\u187e\n\u0218\u0003\u0218\u0003\u0218\u0003\u0218",
    "\u0003\u0218\u0005\u0218\u1884\n\u0218\u0005\u0218\u1886\n\u0218\u0005",
    "\u0218\u1888\n\u0218\u0003\u0218\u0003\u0218\u0003\u0218\u0003\u0219",
    "\u0003\u0219\u0005\u0219\u188f\n\u0219\u0003\u021a\u0003\u021a\u0003",
    "\u021a\u0007\u021a\u1894\n\u021a\f\u021a\u000e\u021a\u1897\u000b\u021a",
    "\u0003\u021b\u0003\u021b\u0003\u021b\u0005\u021b\u189c\n\u021b\u0003",
    "\u021c\u0003\u021c\u0003\u021c\u0005\u021c\u18a1\n\u021c\u0003\u021d",
    "\u0003\u021d\u0003\u021d\u0005\u021d\u18a6\n\u021d\u0003\u021e\u0003",
    "\u021e\u0003\u021e\u0003\u021e\u0003\u021e\u0003\u021e\u0003\u021e\u0003",
    "\u021e\u0003\u021e\u0003\u021e\u0003\u021e\u0005\u021e\u18b3\n\u021e",
    "\u0003\u021e\u0003\u021e\u0003\u021e\u0003\u021e\u0005\u021e\u18b9\n",
    "\u021e\u0005\u021e\u18bb\n\u021e\u0005\u021e\u18bd\n\u021e\u0003\u021e",
    "\u0003\u021e\u0003\u021e\u0003\u021f\u0003\u021f\u0005\u021f\u18c4\n",
    "\u021f\u0003\u0220\u0003\u0220\u0003\u0220\u0003\u0220\u0003\u0220\u0003",
    "\u0220\u0005\u0220\u18cc\n\u0220\u0003\u0221\u0003\u0221\u0003\u0221",
    "\u0003\u0221\u0003\u0221\u0003\u0221\u0003\u0221\u0003\u0221\u0005\u0221",
    "\u18d6\n\u0221\u0003\u0222\u0003\u0222\u0003\u0222\u0003\u0222\u0003",
    "\u0222\u0003\u0222\u0003\u0222\u0003\u0222\u0005\u0222\u18e0\n\u0222",
    "\u0003\u0223\u0003\u0223\u0003\u0223\u0003\u0223\u0003\u0223\u0003\u0223",
    "\u0003\u0223\u0005\u0223\u18e9\n\u0223\u0003\u0224\u0003\u0224\u0003",
    "\u0224\u0003\u0224\u0003\u0224\u0003\u0224\u0003\u0224\u0005\u0224\u18f2",
    "\n\u0224\u0003\u0225\u0003\u0225\u0003\u0226\u0003\u0226\u0003\u0226",
    "\u0003\u0226\u0003\u0226\u0003\u0226\u0005\u0226\u18fc\n\u0226\u0003",
    "\u0227\u0003\u0227\u0003\u0228\u0003\u0228\u0003\u0228\u0003\u0228\u0003",
    "\u0228\u0003\u0228\u0007\u0228\u1906\n\u0228\f\u0228\u000e\u0228\u1909",
    "\u000b\u0228\u0003\u0228\u0003\u0228\u0003\u0228\u0003\u0228\u0003\u0228",
    "\u0003\u0228\u0003\u0228\u0007\u0228\u1912\n\u0228\f\u0228\u000e\u0228",
    "\u1915\u000b\u0228\u0005\u0228\u1917\n\u0228\u0003\u0229\u0003\u0229",
    "\u0003\u0229\u0003\u0229\u0003\u0229\u0003\u0229\u0007\u0229\u191f\n",
    "\u0229\f\u0229\u000e\u0229\u1922\u000b\u0229\u0003\u0229\u0003\u0229",
    "\u0003\u0229\u0003\u0229\u0003\u0229\u0003\u0229\u0003\u0229\u0007\u0229",
    "\u192b\n\u0229\f\u0229\u000e\u0229\u192e\u000b\u0229\u0005\u0229\u1930",
    "\n\u0229\u0003\u022a\u0003\u022a\u0003\u022a\u0003\u022a\u0003\u022a",
    "\u0003\u022a\u0007\u022a\u1938\n\u022a\f\u022a\u000e\u022a\u193b\u000b",
    "\u022a\u0003\u022a\u0003\u022a\u0003\u022a\u0003\u022a\u0003\u022a\u0003",
    "\u022a\u0003\u022a\u0007\u022a\u1944\n\u022a\f\u022a\u000e\u022a\u1947",
    "\u000b\u022a\u0005\u022a\u1949\n\u022a\u0003\u022b\u0003\u022b\u0003",
    "\u022b\u0003\u022b\u0003\u022b\u0003\u022b\u0007\u022b\u1951\n\u022b",
    "\f\u022b\u000e\u022b\u1954\u000b\u022b\u0003\u022b\u0003\u022b\u0003",
    "\u022b\u0003\u022b\u0003\u022b\u0003\u022b\u0003\u022b\u0007\u022b\u195d",
    "\n\u022b\f\u022b\u000e\u022b\u1960\u000b\u022b\u0005\u022b\u1962\n\u022b",
    "\u0003\u022c\u0003\u022c\u0003\u022c\u0003\u022c\u0003\u022c\u0003\u022c",
    "\u0007\u022c\u196a\n\u022c\f\u022c\u000e\u022c\u196d\u000b\u022c\u0003",
    "\u022c\u0003\u022c\u0003\u022c\u0003\u022c\u0003\u022c\u0003\u022c\u0003",
    "\u022c\u0007\u022c\u1976\n\u022c\f\u022c\u000e\u022c\u1979\u000b\u022c",
    "\u0005\u022c\u197b\n\u022c\u0003\u022d\u0003\u022d\u0003\u022e\u0003",
    "\u022e\u0005\u022e\u1981\n\u022e\u0003\u022e\u0003\u022e\u0003\u022e",
    "\u0005\u022e\u1986\n\u022e\u0003\u022e\u0003\u022e\u0003\u022e\u0003",
    "\u022f\u0003\u022f\u0003\u022f\u0003\u022f\u0005\u022f\u198f\n\u022f",
    "\u0003\u0230\u0003\u0230\u0003\u0230\u0003\u0230\u0007\u0230\u1995\n",
    "\u0230\f\u0230\u000e\u0230\u1998\u000b\u0230\u0003\u0231\u0003\u0231",
    "\u0003\u0231\u0003\u0231\u0003\u0232\u0003\u0232\u0003\u0232\u0005\u0232",
    "\u19a1\n\u0232\u0003\u0232\u0005\u0232\u19a4\n\u0232\u0003\u0232\u0005",
    "\u0232\u19a7\n\u0232\u0003\u0232\u0005\u0232\u19aa\n\u0232\u0003\u0233",
    "\u0003\u0233\u0003\u0233\u0005\u0233\u19af\n\u0233\u0003\u0234\u0003",
    "\u0234\u0003\u0234\u0003\u0234\u0003\u0234\u0003\u0234\u0003\u0234\u0003",
    "\u0234\u0003\u0235\u0003\u0235\u0003\u0235\u0003\u0235\u0003\u0235\u0003",
    "\u0235\u0003\u0235\u0003\u0235\u0003\u0236\u0003\u0236\u0003\u0236\u0005",
    "\u0236\u19c4\n\u0236\u0003\u0236\u0005\u0236\u19c7\n\u0236\u0003\u0236",
    "\u0005\u0236\u19ca\n\u0236\u0003\u0236\u0005\u0236\u19cd\n\u0236\u0003",
    "\u0236\u0003\u0236\u0003\u0236\u0003\u0236\u0003\u0236\u0003\u0236\u0005",
    "\u0236\u19d5\n\u0236\u0003\u0236\u0005\u0236\u19d8\n\u0236\u0003\u0236",
    "\u0005\u0236\u19db\n\u0236\u0003\u0236\u0005\u0236\u19de\n\u0236\u0003",
    "\u0237\u0003\u0237\u0003\u0237\u0003\u0237\u0003\u0237\u0003\u0237\u0003",
    "\u0237\u0003\u0238\u0003\u0238\u0003\u0238\u0005\u0238\u19ea\n\u0238",
    "\u0003\u0238\u0003\u0238\u0003\u0238\u0003\u0238\u0003\u0238\u0005\u0238",
    "\u19f1\n\u0238\u0003\u0239\u0003\u0239\u0003\u0239\u0003\u023a\u0003",
    "\u023a\u0003\u023a\u0005\u023a\u19f9\n\u023a\u0003\u023b\u0003\u023b",
    "\u0003\u023b\u0003\u023c\u0003\u023c\u0003\u023c\u0003\u023d\u0003\u023d",
    "\u0003\u023d\u0003\u023d\u0003\u023d\u0003\u023d\u0003\u023e\u0003\u023e",
    "\u0003\u023e\u0003\u023e\u0007\u023e\u1a0b\n\u023e\f\u023e\u000e\u023e",
    "\u1a0e\u000b\u023e\u0003\u023e\u0003\u023e\u0003\u023e\u0003\u023f\u0003",
    "\u023f\u0003\u023f\u0003\u023f\u0003\u023f\u0003\u0240\u0003\u0240\u0003",
    "\u0240\u0005\u0240\u1a1b\n\u0240\u0003\u0240\u0005\u0240\u1a1e\n\u0240",
    "\u0003\u0241\u0003\u0241\u0005\u0241\u1a22\n\u0241\u0003\u0241\u0003",
    "\u0241\u0003\u0241\u0003\u0241\u0005\u0241\u1a28\n\u0241\u0003\u0241",
    "\u0005\u0241\u1a2b\n\u0241\u0003\u0241\u0005\u0241\u1a2e\n\u0241\u0005",
    "\u0241\u1a30\n\u0241\u0003\u0242\u0003\u0242\u0003\u0242\u0005\u0242",
    "\u1a35\n\u0242\u0003\u0242\u0005\u0242\u1a38\n\u0242\u0003\u0243\u0003",
    "\u0243\u0003\u0243\u0003\u0243\u0005\u0243\u1a3e\n\u0243\u0003\u0243",
    "\u0003\u0243\u0003\u0244\u0003\u0244\u0003\u0244\u0003\u0244\u0005\u0244",
    "\u1a46\n\u0244\u0003\u0244\u0003\u0244\u0003\u0245\u0003\u0245\u0003",
    "\u0246\u0003\u0246\u0003\u0246\u0003\u0246\u0003\u0246\u0007\u0246\u1a51",
    "\n\u0246\f\u0246\u000e\u0246\u1a54\u000b\u0246\u0003\u0246\u0003\u0246",
    "\u0003\u0247\u0003\u0247\u0003\u0247\u0003\u0247\u0005\u0247\u1a5c\n",
    "\u0247\u0003\u0247\u0003\u0247\u0003\u0248\u0003\u0248\u0003\u0249\u0003",
    "\u0249\u0003\u0249\u0003\u024a\u0003\u024a\u0005\u024a\u1a67\n\u024a",
    "\u0003\u024b\u0003\u024b\u0003\u024b\u0003\u024c\u0003\u024c\u0003\u024c",
    "\u0003\u024d\u0003\u024d\u0003\u024d\u0003\u024d\u0003\u024e\u0003\u024e",
    "\u0003\u024e\u0003\u024f\u0003\u024f\u0003\u024f\u0003\u024f\u0003\u024f",
    "\u0003\u0250\u0003\u0250\u0003\u0250\u0003\u0251\u0003\u0251\u0003\u0252",
    "\u0003\u0252\u0003\u0252\u0003\u0252\u0003\u0252\u0005\u0252\u1a85\n",
    "\u0252\u0003\u0253\u0003\u0253\u0003\u0253\u0003\u0253\u0003\u0253\u0003",
    "\u0253\u0003\u0253\u0003\u0253\u0003\u0253\u0003\u0253\u0005\u0253\u1a91",
    "\n\u0253\u0003\u0253\u0003\u0253\u0003\u0253\u0003\u0253\u0003\u0253",
    "\u0003\u0253\u0005\u0253\u1a99\n\u0253\u0003\u0253\u0003\u0253\u0003",
    "\u0253\u0003\u0253\u0003\u0253\u0003\u0253\u0003\u0253\u0003\u0253\u0003",
    "\u0253\u0003\u0253\u0003\u0253\u0005\u0253\u1aa6\n\u0253\u0003\u0253",
    "\u0003\u0253\u0003\u0253\u0003\u0253\u0003\u0253\u0003\u0253\u0003\u0253",
    "\u0003\u0253\u0005\u0253\u1ab0\n\u0253\u0003\u0253\u0003\u0253\u0003",
    "\u0253\u0003\u0253\u0003\u0253\u0003\u0253\u0005\u0253\u1ab8\n\u0253",
    "\u0003\u0253\u0005\u0253\u1abb\n\u0253\u0003\u0253\u0005\u0253\u1abe",
    "\n\u0253\u0003\u0254\u0003\u0254\u0003\u0254\u0003\u0254\u0003\u0254",
    "\u0003\u0255\u0003\u0255\u0003\u0255\u0003\u0255\u0003\u0255\u0003\u0256",
    "\u0003\u0256\u0003\u0256\u0003\u0256\u0003\u0256\u0003\u0256\u0003\u0256",
    "\u0003\u0257\u0003\u0257\u0003\u0257\u0003\u0257\u0003\u0257\u0003\u0258",
    "\u0003\u0258\u0003\u0258\u0003\u0258\u0003\u0258\u0005\u0258\u1adb\n",
    "\u0258\u0003\u0259\u0003\u0259\u0003\u025a\u0003\u025a\u0003\u025a\u0007",
    "\u025a\u1ae2\n\u025a\f\u025a\u000e\u025a\u1ae5\u000b\u025a\u0003\u025b",
    "\u0003\u025b\u0003\u025b\u0003\u025c\u0003\u025c\u0005\u025c\u1aec\n",
    "\u025c\u0003\u025d\u0003\u025d\u0005\u025d\u1af0\n\u025d\u0003\u025d",
    "\u0003\u025d\u0005\u025d\u1af4\n\u025d\u0003\u025e\u0003\u025e\u0005",
    "\u025e\u1af8\n\u025e\u0003\u025e\u0003\u025e\u0005\u025e\u1afc\n\u025e",
    "\u0003\u025f\u0003\u025f\u0003\u0260\u0003\u0260\u0003\u0261\u0003\u0261",
    "\u0003\u0262\u0003\u0262\u0003\u0263\u0003\u0263\u0003\u0263\u0003\u0263",
    "\u0007\u0263\u1b0a\n\u0263\f\u0263\u000e\u0263\u1b0d\u000b\u0263\u0003",
    "\u0263\u0003\u0263\u0003\u0264\u0003\u0264\u0003\u0264\u0003\u0265\u0003",
    "\u0265\u0003\u0266\u0003\u0266\u0003\u0266\u0005\u0266\u1b19\n\u0266",
    "\u0003\u0266\u0005\u0266\u1b1c\n\u0266\u0003\u0266\u0003\u0266\u0003",
    "\u0266\u0003\u0267\u0003\u0267\u0003\u0267\u0003\u0267\u0005\u0267\u1b25",
    "\n\u0267\u0003\u0268\u0003\u0268\u0003\u0268\u0005\u0268\u1b2a\n\u0268",
    "\u0005\u0268\u1b2c\n\u0268\u0003\u0269\u0003\u0269\u0003\u0269\u0005",
    "\u0269\u1b31\n\u0269\u0003\u0269\u0003\u0269\u0005\u0269\u1b35\n\u0269",
    "\u0003\u026a\u0003\u026a\u0003\u026a\u0003\u026b\u0003\u026b\u0003\u026b",
    "\u0003\u026b\u0007\u026b\u1b3e\n\u026b\f\u026b\u000e\u026b\u1b41\u000b",
    "\u026b\u0003\u026c\u0003\u026c\u0007\u026c\u1b45\n\u026c\f\u026c\u000e",
    "\u026c\u1b48\u000b\u026c\u0003\u026c\u0003\u026c\u0007\u026c\u1b4c\n",
    "\u026c\f\u026c\u000e\u026c\u1b4f\u000b\u026c\u0003\u026c\u0003\u026c",
    "\u0003\u026d\u0003\u026d\u0007\u026d\u1b55\n\u026d\f\u026d\u000e\u026d",
    "\u1b58\u000b\u026d\u0003\u026d\u0003\u026d\u0007\u026d\u1b5c\n\u026d",
    "\f\u026d\u000e\u026d\u1b5f\u000b\u026d\u0003\u026d\u0003\u026d\u0003",
    "\u026e\u0003\u026e\u0007\u026e\u1b65\n\u026e\f\u026e\u000e\u026e\u1b68",
    "\u000b\u026e\u0003\u026e\u0003\u026e\u0003\u026e\u0005\u026e\u1b6d\n",
    "\u026e\u0003\u026e\u0005\u026e\u1b70\n\u026e\u0003\u026f\u0003\u026f",
    "\u0003\u0270\u0003\u0270\u0005\u0270\u1b76\n\u0270\u0003\u0270\u0003",
    "\u0270\u0005\u0270\u1b7a\n\u0270\u0003\u0270\u0003\u0270\u0005\u0270",
    "\u1b7e\n\u0270\u0003\u0270\u0003\u0270\u0005\u0270\u1b82\n\u0270\u0003",
    "\u0270\u0003\u0270\u0005\u0270\u1b86\n\u0270\u0005\u0270\u1b88\n\u0270",
    "\u0003\u0271\u0003\u0271\u0005\u0271\u1b8c\n\u0271\u0003\u0271\u0003",
    "\u0271\u0003\u0271\u0005\u0271\u1b91\n\u0271\u0003\u0271\u0003\u0271",
    "\u0005\u0271\u1b95\n\u0271\u0003\u0271\u0005\u0271\u1b98\n\u0271\u0003",
    "\u0272\u0005\u0272\u1b9b\n\u0272\u0003\u0272\u0003\u0272\u0003\u0273",
    "\u0003\u0273\u0003\u0274\u0003\u0274\u0003\u0275\u0006\u0275\u1ba4\n",
    "\u0275\r\u0275\u000e\u0275\u1ba5\u0003\u0276\u0003\u0276\u0003\u0277",
    "\u0003\u0277\u0003\u0277\u0003\u0277\u0003\u0277\u0005\u0277\u1baf\n",
    "\u0277\u0003\u0278\u0003\u0278\u0003\u0278\u0003\u0279\u0003\u0279\u0003",
    "\u0279\u0003\u027a\u0003\u027a\u0003\u027a\u0005\u027a\u1bba\n\u027a",
    "\u0003\u027b\u0003\u027b\u0003\u027b\u0003\u027b\u0003\u027b\u0003\u027b",
    "\u0003\u027b\u0003\u027c\u0003\u027c\u0003\u027d\u0003\u027d\u0003\u027e",
    "\u0003\u027e\u0007\u027e\u1bc9\n\u027e\f\u027e\u000e\u027e\u1bcc\u000b",
    "\u027e\u0003\u027f\u0003\u027f\u0007\u027f\u1bd0\n\u027f\f\u027f\u000e",
    "\u027f\u1bd3\u000b\u027f\u0003\u0280\u0003\u0280\u0007\u0280\u1bd7\n",
    "\u0280\f\u0280\u000e\u0280\u1bda\u000b\u0280\u0003\u0281\u0003\u0281",
    "\u0003\u0282\u0003\u0282\u0003\u0282\u0003\u0282\u0005\u0282\u1be2\n",
    "\u0282\u0003\u0282\u0005\u0282\u1be5\n\u0282\u0003\u0282\u0005\u0282",
    "\u1be8\n\u0282\u0003\u0283\u0003\u0283\u0003\u0284\u0003\u0284\u0003",
    "\u0284\u0003\u0285\u0003\u0285\u0003\u0285\u0007\u0285\u1bf2\n\u0285",
    "\f\u0285\u000e\u0285\u1bf5\u000b\u0285\u0003\u0286\u0007\u0286\u1bf8",
    "\n\u0286\f\u0286\u000e\u0286\u1bfb\u000b\u0286\u0003\u0286\u0003\u0286",
    "\u0003\u0287\u0003\u0287\u0003\u0287\u0005\u0287\u1c02\n\u0287\u0003",
    "\u0288\u0003\u0288\u0003\u0289\u0003\u0289\u0003\u028a\u0003\u028a\u0005",
    "\u028a\u1c0a\n\u028a\u0003\u028b\u0003\u028b\u0006\u028b\u1c0e\n\u028b",
    "\r\u028b\u000e\u028b\u1c0f\u0003\u028c\u0003\u028c\u0003\u028c\u0003",
    "\u028c\u0007\u028c\u1c16\n\u028c\f\u028c\u000e\u028c\u1c19\u000b\u028c",
    "\u0003\u028c\u0003\u028c\u0003\u028c\u0003\u028d\u0003\u028d\u0003\u028d",
    "\u0003\u028d\u0003\u028d\u0003\u028d\u0003\u028d\u0005\u028d\u1c25\n",
    "\u028d\u0003\u028d\u0003\u028d\u0006\u028d\u1c29\n\u028d\r\u028d\u000e",
    "\u028d\u1c2a\u0003\u028d\u0003\u028d\u0003\u028d\u0005\u028d\u1c30\n",
    "\u028d\u0003\u028e\u0003\u028e\u0005\u028e\u1c34\n\u028e\u0003\u028f",
    "\u0005\u028f\u1c37\n\u028f\u0003\u028f\u0003\u028f\u0003\u028f\u0003",
    "\u0290\u0003\u0290\u0003\u0290\u0003\u0290\u0005\u0290\u1c40\n\u0290",
    "\u0003\u0291\u0003\u0291\u0003\u0291\u0003\u0291\u0003\u0291\u0003\u0291",
    "\u0003\u0291\u0003\u0291\u0003\u0291\u0007\u0291\u1c4b\n\u0291\f\u0291",
    "\u000e\u0291\u1c4e\u000b\u0291\u0003\u0291\u0003\u0291\u0005\u0291\u1c52",
    "\n\u0291\u0005\u0291\u1c54\n\u0291\u0003\u0292\u0003\u0292\u0003\u0292",
    "\u0003\u0292\u0003\u0292\u0005\u0292\u1c5b\n\u0292\u0003\u0292\u0003",
    "\u0292\u0003\u0293\u0003\u0293\u0003\u0293\u0003\u0294\u0003\u0294\u0005",
    "\u0294\u1c64\n\u0294\u0003\u0295\u0003\u0295\u0003\u0295\u0003\u0295",
    "\u0003\u0295\u0003\u0295\u0003\u0295\u0003\u0295\u0005\u0295\u1c6e\n",
    "\u0295\u0003\u0296\u0003\u0296\u0003\u0297\u0003\u0297\u0003\u0297\u0003",
    "\u0298\u0003\u0298\u0005\u0298\u1c77\n\u0298\u0003\u0298\u0003\u0298",
    "\u0003\u0298\u0003\u0298\u0003\u0298\u0003\u0298\u0003\u0298\u0003\u0298",
    "\u0003\u0298\u0003\u0298\u0003\u0298\u0007\u0298\u1c84\n\u0298\f\u0298",
    "\u000e\u0298\u1c87\u000b\u0298\u0005\u0298\u1c89\n\u0298\u0003\u0298",
    "\u0003\u0298\u0003\u0298\u0005\u0298\u1c8e\n\u0298\u0007\u0298\u1c90",
    "\n\u0298\f\u0298\u000e\u0298\u1c93\u000b\u0298\u0003\u0299\u0003\u0299",
    "\u0003\u0299\u0003\u0299\u0007\u0299\u1c99\n\u0299\f\u0299\u000e\u0299",
    "\u1c9c\u000b\u0299\u0003\u0299\u0007\u0299\u1c9f\n\u0299\f\u0299\u000e",
    "\u0299\u1ca2\u000b\u0299\u0003\u0299\u0005\u0299\u1ca5\n\u0299\u0003",
    "\u0299\u0003\u0299\u0005\u0299\u1ca9\n\u0299\u0003\u029a\u0003\u029a",
    "\u0003\u029a\u0003\u029a\u0007\u029a\u1caf\n\u029a\f\u029a\u000e\u029a",
    "\u1cb2\u000b\u029a\u0003\u029b\u0003\u029b\u0007\u029b\u1cb6\n\u029b",
    "\f\u029b\u000e\u029b\u1cb9\u000b\u029b\u0003\u029c\u0003\u029c\u0003",
    "\u029d\u0003\u029d\u0003\u029e\u0003\u029e\u0003\u029e\u0003\u029e\u0003",
    "\u029e\u0003\u029e\u0003\u029e\u0003\u029e\u0003\u029e\u0003\u029e\u0003",
    "\u029e\u0003\u029e\u0003\u029e\u0003\u029e\u0003\u029e\u0003\u029e\u0005",
    "\u029e\u1ccf\n\u029e\u0003\u029f\u0007\u029f\u1cd2\n\u029f\f\u029f\u000e",
    "\u029f\u1cd5\u000b\u029f\u0003\u029f\u0003\u029f\u0003\u02a0\u0003\u02a0",
    "\u0003\u02a1\u0003\u02a1\u0005\u02a1\u1cdd\n\u02a1\u0003\u02a1\u0003",
    "\u02a1\u0003\u02a1\u0003\u02a1\u0003\u02a1\u0003\u02a1\u0003\u02a1\u0005",
    "\u02a1\u1ce6\n\u02a1\u0003\u02a1\u0003\u02a1\u0005\u02a1\u1cea\n\u02a1",
    "\u0003\u02a2\u0003\u02a2\u0003\u02a2\u0003\u02a3\u0003\u02a3\u0003\u02a3",
    "\u0003\u02a3\u0003\u02a3\u0003\u02a3\u0003\u02a3\u0005\u02a3\u1cf6\n",
    "\u02a3\u0003\u02a3\u0003\u02a3\u0003\u02a4\u0003\u02a4\u0005\u02a4\u1cfc",
    "\n\u02a4\u0003\u02a5\u0003\u02a5\u0003\u02a5\u0003\u02a5\u0003\u02a5",
    "\u0005\u02a5\u1d03\n\u02a5\u0003\u02a6\u0003\u02a6\u0005\u02a6\u1d07",
    "\n\u02a6\u0003\u02a6\u0003\u02a6\u0003\u02a6\u0005\u02a6\u1d0c\n\u02a6",
    "\u0003\u02a6\u0007\u02a6\u1d0f\n\u02a6\f\u02a6\u000e\u02a6\u1d12\u000b",
    "\u02a6\u0003\u02a6\u0003\u02a6\u0005\u02a6\u1d16\n\u02a6\u0003\u02a7",
    "\u0003\u02a7\u0003\u02a7\u0005\u02a7\u1d1b\n\u02a7\u0003\u02a7\u0003",
    "\u02a7\u0003\u02a7\u0005\u02a7\u1d20\n\u02a7\u0003\u02a7\u0007\u02a7",
    "\u1d23\n\u02a7\f\u02a7\u000e\u02a7\u1d26\u000b\u02a7\u0003\u02a7\u0003",
    "\u02a7\u0003\u02a7\u0005\u02a7\u1d2b\n\u02a7\u0005\u02a7\u1d2d\n\u02a7",
    "\u0003\u02a7\u0003\u02a7\u0005\u02a7\u1d31\n\u02a7\u0003\u02a8\u0003",
    "\u02a8\u0005\u02a8\u1d35\n\u02a8\u0003\u02a8\u0003\u02a8\u0005\u02a8",
    "\u1d39\n\u02a8\u0003\u02a8\u0003\u02a8\u0003\u02a9\u0003\u02a9\u0003",
    "\u02a9\u0005\u02a9\u1d40\n\u02a9\u0003\u02aa\u0003\u02aa\u0005\u02aa",
    "\u1d44\n\u02aa\u0003\u02aa\u0003\u02aa\u0005\u02aa\u1d48\n\u02aa\u0003",
    "\u02aa\u0005\u02aa\u1d4b\n\u02aa\u0003\u02ab\u0003\u02ab\u0003\u02ab",
    "\u0003\u02ab\u0003\u02ab\u0003\u02ab\u0005\u02ab\u1d53\n\u02ab\u0003",
    "\u02ac\u0003\u02ac\u0003\u02ac\u0003\u02ac\u0005\u02ac\u1d59\n\u02ac",
    "\u0003\u02ad\u0003\u02ad\u0003\u02ae\u0003\u02ae\u0007\u02ae\u1d5f\n",
    "\u02ae\f\u02ae\u000e\u02ae\u1d62\u000b\u02ae\u0005\u02ae\u1d64\n\u02ae",
    "\u0003\u02ae\u0003\u02ae\u0003\u02ae\u0005\u02ae\u1d69\n\u02ae\u0003",
    "\u02ae\u0003\u02ae\u0005\u02ae\u1d6d\n\u02ae\u0003\u02af\u0006\u02af",
    "\u1d70\n\u02af\r\u02af\u000e\u02af\u1d71\u0003\u02b0\u0003\u02b0\u0003",
    "\u02b0\u0003\u02b0\u0003\u02b0\u0005\u02b0\u1d79\n\u02b0\u0003\u02b1",
    "\u0003\u02b1\u0003\u02b1\u0003\u02b1\u0005\u02b1\u1d7f\n\u02b1\u0003",
    "\u02b2\u0003\u02b2\u0003\u02b2\u0003\u02b2\u0003\u02b3\u0003\u02b3\u0003",
    "\u02b3\u0005\u02b3\u1d88\n\u02b3\u0003\u02b3\u0003\u02b3\u0005\u02b3",
    "\u1d8c\n\u02b3\u0005\u02b3\u1d8e\n\u02b3\u0003\u02b4\u0003\u02b4\u0003",
    "\u02b4\u0003\u02b4\u0005\u02b4\u1d94\n\u02b4\u0003\u02b5\u0003\u02b5",
    "\u0003\u02b5\u0005\u02b5\u1d99\n\u02b5\u0003\u02b6\u0003\u02b6\u0005",
    "\u02b6\u1d9d\n\u02b6\u0003\u02b6\u0003\u02b6\u0003\u02b6\u0003\u02b6",
    "\u0003\u02b6\u0003\u02b6\u0005\u02b6\u1da5\n\u02b6\u0003\u02b6\u0007",
    "\u02b6\u1da8\n\u02b6\f\u02b6\u000e\u02b6\u1dab\u000b\u02b6\u0003\u02b6",
    "\u0003\u02b6\u0003\u02b6\u0005\u02b6\u1db0\n\u02b6\u0003\u02b6\u0003",
    "\u02b6\u0005\u02b6\u1db4\n\u02b6\u0003\u02b7\u0003\u02b7\u0005\u02b7",
    "\u1db8\n\u02b7\u0003\u02b7\u0003\u02b7\u0005\u02b7\u1dbc\n\u02b7\u0003",
    "\u02b7\u0003\u02b7\u0005\u02b7\u1dc0\n\u02b7\u0003\u02b8\u0003\u02b8",
    "\u0005\u02b8\u1dc4\n\u02b8\u0003\u02b8\u0003\u02b8\u0003\u02b8\u0003",
    "\u02b8\u0005\u02b8\u1dca\n\u02b8\u0003\u02b8\u0007\u02b8\u1dcd\n\u02b8",
    "\f\u02b8\u000e\u02b8\u1dd0\u000b\u02b8\u0003\u02b8\u0003\u02b8\u0003",
    "\u02b8\u0005\u02b8\u1dd5\n\u02b8\u0003\u02b8\u0003\u02b8\u0005\u02b8",
    "\u1dd9\n\u02b8\u0003\u02b9\u0003\u02b9\u0005\u02b9\u1ddd\n\u02b9\u0003",
    "\u02b9\u0003\u02b9\u0005\u02b9\u1de1\n\u02b9\u0003\u02b9\u0003\u02b9",
    "\u0005\u02b9\u1de5\n\u02b9\u0003\u02ba\u0003\u02ba\u0003\u02ba\u0005",
    "\u02ba\u1dea\n\u02ba\u0003\u02ba\u0003\u02ba\u0003\u02ba\u0003\u02ba",
    "\u0003\u02ba\u0003\u02ba\u0003\u02ba\u0003\u02ba\u0003\u02ba\u0005\u02ba",
    "\u1df5\n\u02ba\u0003\u02ba\u0003\u02ba\u0003\u02ba\u0003\u02ba\u0003",
    "\u02ba\u0005\u02ba\u1dfc\n\u02ba\u0003\u02bb\u0003\u02bb\u0003\u02bb",
    "\u0005\u02bb\u1e01\n\u02bb\u0003\u02bb\u0003\u02bb\u0005\u02bb\u1e05",
    "\n\u02bb\u0003\u02bb\u0003\u02bb\u0003\u02bb\u0003\u02bc\u0003\u02bc",
    "\u0005\u02bc\u1e0c\n\u02bc\u0003\u02bc\u0003\u02bc\u0005\u02bc\u1e10",
    "\n\u02bc\u0003\u02bc\u0003\u02bc\u0003\u02bc\u0003\u02bd\u0003\u02bd",
    "\u0003\u02bd\u0003\u02bd\u0003\u02be\u0003\u02be\u0003\u02be\u0005\u02be",
    "\u1e1c\n\u02be\u0003\u02bf\u0003\u02bf\u0003\u02bf\u0005\u02bf\u1e21",
    "\n\u02bf\u0003\u02bf\u0005\u02bf\u1e24\n\u02bf\u0003\u02bf\u0003\u02bf",
    "\u0003\u02bf\u0003\u02bf\u0005\u02bf\u1e2a\n\u02bf\u0003\u02bf\u0005",
    "\u02bf\u1e2d\n\u02bf\u0003\u02bf\u0005\u02bf\u1e30\n\u02bf\u0003\u02bf",
    "\u0005\u02bf\u1e33\n\u02bf\u0003\u02bf\u0005\u02bf\u1e36\n\u02bf\u0003",
    "\u02bf\u0005\u02bf\u1e39\n\u02bf\u0003\u02bf\u0005\u02bf\u1e3c\n\u02bf",
    "\u0003\u02bf\u0005\u02bf\u1e3f\n\u02bf\u0003\u02bf\u0005\u02bf\u1e42",
    "\n\u02bf\u0003\u02bf\u0005\u02bf\u1e45\n\u02bf\u0003\u02bf\u0005\u02bf",
    "\u1e48\n\u02bf\u0003\u02bf\u0005\u02bf\u1e4b\n\u02bf\u0003\u02bf\u0005",
    "\u02bf\u1e4e\n\u02bf\u0003\u02bf\u0005\u02bf\u1e51\n\u02bf\u0003\u02bf",
    "\u0003\u02bf\u0005\u02bf\u1e55\n\u02bf\u0003\u02bf\u0005\u02bf\u1e58",
    "\n\u02bf\u0005\u02bf\u1e5a\n\u02bf\u0003\u02c0\u0003\u02c0\u0003\u02c0",
    "\u0003\u02c0\u0003\u02c0\u0005\u02c0\u1e61\n\u02c0\u0003\u02c0\u0003",
    "\u02c0\u0003\u02c0\u0003\u02c0\u0005\u02c0\u1e67\n\u02c0\u0003\u02c1",
    "\u0003\u02c1\u0003\u02c1\u0003\u02c1\u0005\u02c1\u1e6d\n\u02c1\u0003",
    "\u02c2\u0003\u02c2\u0003\u02c2\u0003\u02c3\u0003\u02c3\u0003\u02c3\u0003",
    "\u02c4\u0003\u02c4\u0003\u02c4\u0005\u02c4\u1e78\n\u02c4\u0003\u02c4",
    "\u0003\u02c4\u0003\u02c4\u0005\u02c4\u1e7d\n\u02c4\u0003\u02c4\u0003",
    "\u02c4\u0003\u02c4\u0005\u02c4\u1e82\n\u02c4\u0005\u02c4\u1e84\n\u02c4",
    "\u0003\u02c5\u0003\u02c5\u0003\u02c6\u0003\u02c6\u0003\u02c7\u0003\u02c7",
    "\u0003\u02c8\u0003\u02c8\u0003\u02c8\u0003\u02c8\u0003\u02c8\u0003\u02c8",
    "\u0003\u02c8\u0003\u02c8\u0003\u02c8\u0005\u02c8\u1e95\n\u02c8\u0005",
    "\u02c8\u1e97\n\u02c8\u0003\u02c9\u0003\u02c9\u0003\u02c9\u0003\u02c9",
    "\u0003\u02c9\u0003\u02c9\u0003\u02c9\u0003\u02c9\u0003\u02c9\u0003\u02c9",
    "\u0003\u02c9\u0003\u02c9\u0005\u02c9\u1ea5\n\u02c9\u0003\u02ca\u0003",
    "\u02ca\u0003\u02cb\u0003\u02cb\u0005\u02cb\u1eab\n\u02cb\u0003\u02cc",
    "\u0003\u02cc\u0003\u02cc\u0005\u02cc\u1eb0\n\u02cc\u0003\u02cd\u0003",
    "\u02cd\u0003\u02ce\u0003\u02ce\u0003\u02cf\u0003\u02cf\u0003\u02cf\u0003",
    "\u02cf\u0003\u02cf\u0003\u02cf\u0003\u02cf\u0003\u02cf\u0005\u02cf\u1ebe",
    "\n\u02cf\u0003\u02d0\u0003\u02d0\u0003\u02d0\u0003\u02d0\u0003\u02d0",
    "\u0007\u02d0\u1ec5\n\u02d0\f\u02d0\u000e\u02d0\u1ec8\u000b\u02d0\u0003",
    "\u02d0\u0003\u02d0\u0003\u02d1\u0003\u02d1\u0003\u02d1\u0003\u02d1\u0003",
    "\u02d1\u0005\u02d1\u1ed1\n\u02d1\u0003\u02d1\u0003\u02d1\u0003\u02d1",
    "\u0005\u02d1\u1ed6\n\u02d1\u0003\u02d2\u0003\u02d2\u0003\u02d3\u0003",
    "\u02d3\u0003\u02d3\u0005\u02d3\u1edd\n\u02d3\u0003\u02d3\u0003\u02d3",
    "\u0003\u02d3\u0003\u02d3\u0003\u02d3\u0003\u02d3\u0003\u02d3\u0005\u02d3",
    "\u1ee6\n\u02d3\u0003\u02d4\u0003\u02d4\u0003\u02d5\u0003\u02d5\u0003",
    "\u02d5\u0003\u02d5\u0005\u02d5\u1eee\n\u02d5\u0003\u02d5\u0002\u0002",
    "\u02d6\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a",
    "\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080",
    "\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098",
    "\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0",
    "\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8",
    "\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0",
    "\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8",
    "\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110",
    "\u0112\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128",
    "\u012a\u012c\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140",
    "\u0142\u0144\u0146\u0148\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158",
    "\u015a\u015c\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c\u016e\u0170",
    "\u0172\u0174\u0176\u0178\u017a\u017c\u017e\u0180\u0182\u0184\u0186\u0188",
    "\u018a\u018c\u018e\u0190\u0192\u0194\u0196\u0198\u019a\u019c\u019e\u01a0",
    "\u01a2\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8",
    "\u01ba\u01bc\u01be\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0",
    "\u01d2\u01d4\u01d6\u01d8\u01da\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8",
    "\u01ea\u01ec\u01ee\u01f0\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe\u0200",
    "\u0202\u0204\u0206\u0208\u020a\u020c\u020e\u0210\u0212\u0214\u0216\u0218",
    "\u021a\u021c\u021e\u0220\u0222\u0224\u0226\u0228\u022a\u022c\u022e\u0230",
    "\u0232\u0234\u0236\u0238\u023a\u023c\u023e\u0240\u0242\u0244\u0246\u0248",
    "\u024a\u024c\u024e\u0250\u0252\u0254\u0256\u0258\u025a\u025c\u025e\u0260",
    "\u0262\u0264\u0266\u0268\u026a\u026c\u026e\u0270\u0272\u0274\u0276\u0278",
    "\u027a\u027c\u027e\u0280\u0282\u0284\u0286\u0288\u028a\u028c\u028e\u0290",
    "\u0292\u0294\u0296\u0298\u029a\u029c\u029e\u02a0\u02a2\u02a4\u02a6\u02a8",
    "\u02aa\u02ac\u02ae\u02b0\u02b2\u02b4\u02b6\u02b8\u02ba\u02bc\u02be\u02c0",
    "\u02c2\u02c4\u02c6\u02c8\u02ca\u02cc\u02ce\u02d0\u02d2\u02d4\u02d6\u02d8",
    "\u02da\u02dc\u02de\u02e0\u02e2\u02e4\u02e6\u02e8\u02ea\u02ec\u02ee\u02f0",
    "\u02f2\u02f4\u02f6\u02f8\u02fa\u02fc\u02fe\u0300\u0302\u0304\u0306\u0308",
    "\u030a\u030c\u030e\u0310\u0312\u0314\u0316\u0318\u031a\u031c\u031e\u0320",
    "\u0322\u0324\u0326\u0328\u032a\u032c\u032e\u0330\u0332\u0334\u0336\u0338",
    "\u033a\u033c\u033e\u0340\u0342\u0344\u0346\u0348\u034a\u034c\u034e\u0350",
    "\u0352\u0354\u0356\u0358\u035a\u035c\u035e\u0360\u0362\u0364\u0366\u0368",
    "\u036a\u036c\u036e\u0370\u0372\u0374\u0376\u0378\u037a\u037c\u037e\u0380",
    "\u0382\u0384\u0386\u0388\u038a\u038c\u038e\u0390\u0392\u0394\u0396\u0398",
    "\u039a\u039c\u039e\u03a0\u03a2\u03a4\u03a6\u03a8\u03aa\u03ac\u03ae\u03b0",
    "\u03b2\u03b4\u03b6\u03b8\u03ba\u03bc\u03be\u03c0\u03c2\u03c4\u03c6\u03c8",
    "\u03ca\u03cc\u03ce\u03d0\u03d2\u03d4\u03d6\u03d8\u03da\u03dc\u03de\u03e0",
    "\u03e2\u03e4\u03e6\u03e8\u03ea\u03ec\u03ee\u03f0\u03f2\u03f4\u03f6\u03f8",
    "\u03fa\u03fc\u03fe\u0400\u0402\u0404\u0406\u0408\u040a\u040c\u040e\u0410",
    "\u0412\u0414\u0416\u0418\u041a\u041c\u041e\u0420\u0422\u0424\u0426\u0428",
    "\u042a\u042c\u042e\u0430\u0432\u0434\u0436\u0438\u043a\u043c\u043e\u0440",
    "\u0442\u0444\u0446\u0448\u044a\u044c\u044e\u0450\u0452\u0454\u0456\u0458",
    "\u045a\u045c\u045e\u0460\u0462\u0464\u0466\u0468\u046a\u046c\u046e\u0470",
    "\u0472\u0474\u0476\u0478\u047a\u047c\u047e\u0480\u0482\u0484\u0486\u0488",
    "\u048a\u048c\u048e\u0490\u0492\u0494\u0496\u0498\u049a\u049c\u049e\u04a0",
    "\u04a2\u04a4\u04a6\u04a8\u04aa\u04ac\u04ae\u04b0\u04b2\u04b4\u04b6\u04b8",
    "\u04ba\u04bc\u04be\u04c0\u04c2\u04c4\u04c6\u04c8\u04ca\u04cc\u04ce\u04d0",
    "\u04d2\u04d4\u04d6\u04d8\u04da\u04dc\u04de\u04e0\u04e2\u04e4\u04e6\u04e8",
    "\u04ea\u04ec\u04ee\u04f0\u04f2\u04f4\u04f6\u04f8\u04fa\u04fc\u04fe\u0500",
    "\u0502\u0504\u0506\u0508\u050a\u050c\u050e\u0510\u0512\u0514\u0516\u0518",
    "\u051a\u051c\u051e\u0520\u0522\u0524\u0526\u0528\u052a\u052c\u052e\u0530",
    "\u0532\u0534\u0536\u0538\u053a\u053c\u053e\u0540\u0542\u0544\u0546\u0548",
    "\u054a\u054c\u054e\u0550\u0552\u0554\u0556\u0558\u055a\u055c\u055e\u0560",
    "\u0562\u0564\u0566\u0568\u056a\u056c\u056e\u0570\u0572\u0574\u0576\u0578",
    "\u057a\u057c\u057e\u0580\u0582\u0584\u0586\u0588\u058a\u058c\u058e\u0590",
    "\u0592\u0594\u0596\u0598\u059a\u059c\u059e\u05a0\u05a2\u05a4\u05a6\u05a8",
    "\u0002:A\u0002\u0003\u0005\t\u000b\r\u0013\u0015\u0015\u001b\u001b\u001e",
    "\u001f#(+68=?IKOQjmmppstvvx{\u0083\u0084\u008a\u00ae\u00b0\u00b3\u00b5",
    "\u00b9\u00bb\u00bc\u00be\u00be\u00c0\u00cb\u00cd\u00d1\u00dc\u00e8\u00ec",
    "\u00ef\u00f1\u00f3\u00f5\u00fa\u00fc\u00fd\u0100\u010b\u010d\u010d\u010f",
    "\u010f\u0111\u0129\u012c\u012c\u012e\u0132\u0134\u013e\u0140\u0142\u0145",
    "\u0145\u0149\u0149\u014b\u014f\u0151\u0153\u0159\u015c\u015e\u015e\u0163",
    "\u0166\u0168\u016d\u016f\u0171\u017c\u017d\u0180\u0186\u018f\u0197\u019c",
    "\u019c\u019e\u01a0\u01a3\u01a5\u01a8\u01a9\u01ae\u01b6\u01b8\u01b9\u01bb",
    "\u01bc\u01be\u01c2\u01c5\u01d4\u01d6\u01d8\u01db\u01de\u01e2\u01e4\u01e7",
    "\u01e8\u0003\u0002QR\u0004\u0002\u01be\u01be\u01c0\u01c0\u0003\u0002",
    ")*\u0005\u0002\u01f6\u01f6\u01f8\u01fa\u01fc\u01fd\u0004\u0002\u0214",
    "\u0217\u021a\u021a\u0003\u0002\u0003\u0004\u0003\u0002\u00aa\u00ab\u0003",
    "\u0002\u01c9\u01ca\u0003\u0002\u01cb\u01cc\u0004\u0002\u0176\u0176\u01a2",
    "\u01a2\u0004\u0002\u01a5\u01a5\u01a8\u01a8\u0004\u0002\u0110\u0110\u0113",
    "\u0113\u0003\u0002\u00f2\u00f4\u0003\u0002\u0140\u0141\u0004\u0002\u000f",
    "\u000fTT\u0004\u0002\u0111\u0111\u0114\u0114\u0004\u0002\u0017\u0017",
    "\u010f\u010f\u0004\u0002\u01bf\u01bf\u01c1\u01c1\u0003\u000234\u0004",
    "\u0002\u00b9\u00b9\u01e4\u01e4\u0004\u0002\u0087\u0087\u0218\u0218\u0003",
    "\u0002\u011c\u011d\u0011\u0002\u0006\t\f\f^_aemmsv\u00b7\u00b8\u00d2",
    "\u00d3\u010f\u010f\u0127\u0127\u0129\u0129\u0187\u0187\u01f6\u01fa\u01fc",
    "\u01fd\u01ff\u0209\u0004\u0002..\u010d\u010d\u0005\u0002\u00dc\u00dc",
    "\u0200\u0201\u0207\u0207\u0004\u0002\u01ff\u01ff\u0202\u0204\u0003\u0002",
    "\u0200\u0201\u0004\u0002\t\t\u00b7\u00b8\u0004\u0002\u0159\u015b\u01ee",
    "\u01ee\u0003\u0002\u0182\u0185\u0004\u0002\u0017\u0017\u01ee\u01ee\u0004",
    "\u0002\u0146\u0146\u01ee\u01ee\u0004\u0002\u0136\u0136\u01e2\u01e3\u0005",
    "\u0002\u00de\u00e1\u00e4\u00e7\u0101\u0101\u0003\u0002\u01c3\u01c4\u0004",
    "\u0002\u00dd\u00dd\u0192\u0192\u0004\u0002\u0010\u0010\u0197\u0197\u0003",
    "\u0002\u0154\u0155\u0003\u0002\u014e\u014f\u0004\u0002jl\u0177\u0177",
    "\u0006\u0002\u00b1\u00b1\u010f\u010f\u017e\u017e\u0224\u0224\u0004\u0002",
    "\u01b7\u01b7\u0229\u022d\t\u0002\u00cc\u00cc\u017f\u017f\u0189\u0189",
    "\u01b7\u01b7\u0224\u022e\u0230\u0233\u023a\u023f\u0005\u0002\f\fsv\u0189",
    "\u018b\u0004\u0002\u0018\u0018II\u0003\u0002\u0180\u0181\u0004\u0002",
    "\u0212\u0212\u021a\u021a\u0004\u0002\u0180\u0180\u023a\u023a\u0004\u0002",
    "\u0181\u0181\u023b\u023b\u0004\u0002\u0182\u0182\u023c\u023c\u0004\u0002",
    "\u0184\u0184\u023d\u023d\u0004\u0002\u0183\u0183\u023e\u023e\u0004\u0002",
    "\u0185\u0185\u023f\u023f\u0003\u0002\u012d\u012e\u0004\u0002bbmm\u0002",
    "\u2156\u0002\u05aa\u0003\u0002\u0002\u0002\u0004\u05af\u0003\u0002\u0002",
    "\u0002\u0006\u05b4\u0003\u0002\u0002\u0002\b\u05b8\u0003\u0002\u0002",
    "\u0002\n\u05ba\u0003\u0002\u0002\u0002\f\u05bc\u0003\u0002\u0002\u0002",
    "\u000e\u05c0\u0003\u0002\u0002\u0002\u0010\u05ce\u0003\u0002\u0002\u0002",
    "\u0012\u05d0\u0003\u0002\u0002\u0002\u0014\u05d2\u0003\u0002\u0002\u0002",
    "\u0016\u05d4\u0003\u0002\u0002\u0002\u0018\u05db\u0003\u0002\u0002\u0002",
    "\u001a\u05eb\u0003\u0002\u0002\u0002\u001c\u05ed\u0003\u0002\u0002\u0002",
    "\u001e\u05f2\u0003\u0002\u0002\u0002 \u05f6\u0003\u0002\u0002\u0002",
    "\"\u05fb\u0003\u0002\u0002\u0002$\u05fd\u0003\u0002\u0002\u0002&\u0605",
    "\u0003\u0002\u0002\u0002(\u060d\u0003\u0002\u0002\u0002*\u0615\u0003",
    "\u0002\u0002\u0002,\u061a\u0003\u0002\u0002\u0002.\u0622\u0003\u0002",
    "\u0002\u00020\u0626\u0003\u0002\u0002\u00022\u0629\u0003\u0002\u0002",
    "\u00024\u0631\u0003\u0002\u0002\u00026\u0645\u0003\u0002\u0002\u0002",
    "8\u0647\u0003\u0002\u0002\u0002:\u064c\u0003\u0002\u0002\u0002<\u064e",
    "\u0003\u0002\u0002\u0002>\u0651\u0003\u0002\u0002\u0002@\u0659\u0003",
    "\u0002\u0002\u0002B\u065b\u0003\u0002\u0002\u0002D\u0668\u0003\u0002",
    "\u0002\u0002F\u066a\u0003\u0002\u0002\u0002H\u067a\u0003\u0002\u0002",
    "\u0002J\u067c\u0003\u0002\u0002\u0002L\u0686\u0003\u0002\u0002\u0002",
    "N\u0690\u0003\u0002\u0002\u0002P\u0692\u0003\u0002\u0002\u0002R\u06b3",
    "\u0003\u0002\u0002\u0002T\u06b5\u0003\u0002\u0002\u0002V\u06b7\u0003",
    "\u0002\u0002\u0002X\u06b9\u0003\u0002\u0002\u0002Z\u06c1\u0003\u0002",
    "\u0002\u0002\\\u06c9\u0003\u0002\u0002\u0002^\u06ea\u0003\u0002\u0002",
    "\u0002`\u0701\u0003\u0002\u0002\u0002b\u0703\u0003\u0002\u0002\u0002",
    "d\u071e\u0003\u0002\u0002\u0002f\u0720\u0003\u0002\u0002\u0002h\u073a",
    "\u0003\u0002\u0002\u0002j\u073c\u0003\u0002\u0002\u0002l\u073e\u0003",
    "\u0002\u0002\u0002n\u0743\u0003\u0002\u0002\u0002p\u0748\u0003\u0002",
    "\u0002\u0002r\u074f\u0003\u0002\u0002\u0002t\u0751\u0003\u0002\u0002",
    "\u0002v\u0756\u0003\u0002\u0002\u0002x\u075c\u0003\u0002\u0002\u0002",
    "z\u0762\u0003\u0002\u0002\u0002|\u0764\u0003\u0002\u0002\u0002~\u0769",
    "\u0003\u0002\u0002\u0002\u0080\u076b\u0003\u0002\u0002\u0002\u0082\u0772",
    "\u0003\u0002\u0002\u0002\u0084\u0774\u0003\u0002\u0002\u0002\u0086\u0779",
    "\u0003\u0002\u0002\u0002\u0088\u077e\u0003\u0002\u0002\u0002\u008a\u0783",
    "\u0003\u0002\u0002\u0002\u008c\u0796\u0003\u0002\u0002\u0002\u008e\u0798",
    "\u0003\u0002\u0002\u0002\u0090\u079b\u0003\u0002\u0002\u0002\u0092\u079e",
    "\u0003\u0002\u0002\u0002\u0094\u07a1\u0003\u0002\u0002\u0002\u0096\u07bc",
    "\u0003\u0002\u0002\u0002\u0098\u07be\u0003\u0002\u0002\u0002\u009a\u07d3",
    "\u0003\u0002\u0002\u0002\u009c\u07e3\u0003\u0002\u0002\u0002\u009e\u07e5",
    "\u0003\u0002\u0002\u0002\u00a0\u07f5\u0003\u0002\u0002\u0002\u00a2\u07f7",
    "\u0003\u0002\u0002\u0002\u00a4\u0808\u0003\u0002\u0002\u0002\u00a6\u080c",
    "\u0003\u0002\u0002\u0002\u00a8\u0810\u0003\u0002\u0002\u0002\u00aa\u0818",
    "\u0003\u0002\u0002\u0002\u00ac\u0820\u0003\u0002\u0002\u0002\u00ae\u0828",
    "\u0003\u0002\u0002\u0002\u00b0\u082b\u0003\u0002\u0002\u0002\u00b2\u084b",
    "\u0003\u0002\u0002\u0002\u00b4\u085a\u0003\u0002\u0002\u0002\u00b6\u0867",
    "\u0003\u0002\u0002\u0002\u00b8\u0869\u0003\u0002\u0002\u0002\u00ba\u0879",
    "\u0003\u0002\u0002\u0002\u00bc\u087b\u0003\u0002\u0002\u0002\u00be\u0884",
    "\u0003\u0002\u0002\u0002\u00c0\u0886\u0003\u0002\u0002\u0002\u00c2\u088b",
    "\u0003\u0002\u0002\u0002\u00c4\u088f\u0003\u0002\u0002\u0002\u00c6\u0897",
    "\u0003\u0002\u0002\u0002\u00c8\u089b\u0003\u0002\u0002\u0002\u00ca\u08aa",
    "\u0003\u0002\u0002\u0002\u00cc\u08ac\u0003\u0002\u0002\u0002\u00ce\u08b3",
    "\u0003\u0002\u0002\u0002\u00d0\u08b5\u0003\u0002\u0002\u0002\u00d2\u08b9",
    "\u0003\u0002\u0002\u0002\u00d4\u08bf\u0003\u0002\u0002\u0002\u00d6\u08c7",
    "\u0003\u0002\u0002\u0002\u00d8\u08c9\u0003\u0002\u0002\u0002\u00da\u08df",
    "\u0003\u0002\u0002\u0002\u00dc\u08e1\u0003\u0002\u0002\u0002\u00de\u08f2",
    "\u0003\u0002\u0002\u0002\u00e0\u08f4\u0003\u0002\u0002\u0002\u00e2\u08f8",
    "\u0003\u0002\u0002\u0002\u00e4\u0902\u0003\u0002\u0002\u0002\u00e6\u0904",
    "\u0003\u0002\u0002\u0002\u00e8\u0909\u0003\u0002\u0002\u0002\u00ea\u090f",
    "\u0003\u0002\u0002\u0002\u00ec\u0916\u0003\u0002\u0002\u0002\u00ee\u0921",
    "\u0003\u0002\u0002\u0002\u00f0\u093a\u0003\u0002\u0002\u0002\u00f2\u093c",
    "\u0003\u0002\u0002\u0002\u00f4\u094b\u0003\u0002\u0002\u0002\u00f6\u0957",
    "\u0003\u0002\u0002\u0002\u00f8\u0959\u0003\u0002\u0002\u0002\u00fa\u095b",
    "\u0003\u0002\u0002\u0002\u00fc\u0961\u0003\u0002\u0002\u0002\u00fe\u0964",
    "\u0003\u0002\u0002\u0002\u0100\u0966\u0003\u0002\u0002\u0002\u0102\u0970",
    "\u0003\u0002\u0002\u0002\u0104\u0974\u0003\u0002\u0002\u0002\u0106\u0978",
    "\u0003\u0002\u0002\u0002\u0108\u0985\u0003\u0002\u0002\u0002\u010a\u098c",
    "\u0003\u0002\u0002\u0002\u010c\u099f\u0003\u0002\u0002\u0002\u010e\u09a1",
    "\u0003\u0002\u0002\u0002\u0110\u09a3\u0003\u0002\u0002\u0002\u0112\u09a5",
    "\u0003\u0002\u0002\u0002\u0114\u09a9\u0003\u0002\u0002\u0002\u0116\u09ad",
    "\u0003\u0002\u0002\u0002\u0118\u09b6\u0003\u0002\u0002\u0002\u011a\u09c0",
    "\u0003\u0002\u0002\u0002\u011c\u09c5\u0003\u0002\u0002\u0002\u011e\u09cd",
    "\u0003\u0002\u0002\u0002\u0120\u09d3\u0003\u0002\u0002\u0002\u0122\u09d5",
    "\u0003\u0002\u0002\u0002\u0124\u09e8\u0003\u0002\u0002\u0002\u0126\u09f4",
    "\u0003\u0002\u0002\u0002\u0128\u09f7\u0003\u0002\u0002\u0002\u012a\u0a06",
    "\u0003\u0002\u0002\u0002\u012c\u0a0b\u0003\u0002\u0002\u0002\u012e\u0a10",
    "\u0003\u0002\u0002\u0002\u0130\u0a1a\u0003\u0002\u0002\u0002\u0132\u0a35",
    "\u0003\u0002\u0002\u0002\u0134\u0a37\u0003\u0002\u0002\u0002\u0136\u0a3f",
    "\u0003\u0002\u0002\u0002\u0138\u0a48\u0003\u0002\u0002\u0002\u013a\u0a4a",
    "\u0003\u0002\u0002\u0002\u013c\u0a52\u0003\u0002\u0002\u0002\u013e\u0a56",
    "\u0003\u0002\u0002\u0002\u0140\u0a6c\u0003\u0002\u0002\u0002\u0142\u0a72",
    "\u0003\u0002\u0002\u0002\u0144\u0a74\u0003\u0002\u0002\u0002\u0146\u0a77",
    "\u0003\u0002\u0002\u0002\u0148\u0a7b\u0003\u0002\u0002\u0002\u014a\u0a8f",
    "\u0003\u0002\u0002\u0002\u014c\u0ab4\u0003\u0002\u0002\u0002\u014e\u0ab6",
    "\u0003\u0002\u0002\u0002\u0150\u0ac7\u0003\u0002\u0002\u0002\u0152\u0aca",
    "\u0003\u0002\u0002\u0002\u0154\u0ace\u0003\u0002\u0002\u0002\u0156\u0ad7",
    "\u0003\u0002\u0002\u0002\u0158\u0aed\u0003\u0002\u0002\u0002\u015a\u0af8",
    "\u0003\u0002\u0002\u0002\u015c\u0afa\u0003\u0002\u0002\u0002\u015e\u0afc",
    "\u0003\u0002\u0002\u0002\u0160\u0afe\u0003\u0002\u0002\u0002\u0162\u0b00",
    "\u0003\u0002\u0002\u0002\u0164\u0b02\u0003\u0002\u0002\u0002\u0166\u0b0d",
    "\u0003\u0002\u0002\u0002\u0168\u0b0f\u0003\u0002\u0002\u0002\u016a\u0b11",
    "\u0003\u0002\u0002\u0002\u016c\u0b4c\u0003\u0002\u0002\u0002\u016e\u0b87",
    "\u0003\u0002\u0002\u0002\u0170\u0b8b\u0003\u0002\u0002\u0002\u0172\u0b97",
    "\u0003\u0002\u0002\u0002\u0174\u0b9b\u0003\u0002\u0002\u0002\u0176\u0ba6",
    "\u0003\u0002\u0002\u0002\u0178\u0bad\u0003\u0002\u0002\u0002\u017a\u0bbb",
    "\u0003\u0002\u0002\u0002\u017c\u0bbf\u0003\u0002\u0002\u0002\u017e\u0bce",
    "\u0003\u0002\u0002\u0002\u0180\u0bd0\u0003\u0002\u0002\u0002\u0182\u0bdf",
    "\u0003\u0002\u0002\u0002\u0184\u0bed\u0003\u0002\u0002\u0002\u0186\u0bf1",
    "\u0003\u0002\u0002\u0002\u0188\u0bf3\u0003\u0002\u0002\u0002\u018a\u0bf7",
    "\u0003\u0002\u0002\u0002\u018c\u0c05\u0003\u0002\u0002\u0002\u018e\u0c0c",
    "\u0003\u0002\u0002\u0002\u0190\u0c10\u0003\u0002\u0002\u0002\u0192\u0c1a",
    "\u0003\u0002\u0002\u0002\u0194\u0c27\u0003\u0002\u0002\u0002\u0196\u0c30",
    "\u0003\u0002\u0002\u0002\u0198\u0c39\u0003\u0002\u0002\u0002\u019a\u0c40",
    "\u0003\u0002\u0002\u0002\u019c\u0c47\u0003\u0002\u0002\u0002\u019e\u0c4e",
    "\u0003\u0002\u0002\u0002\u01a0\u0c5f\u0003\u0002\u0002\u0002\u01a2\u0c66",
    "\u0003\u0002\u0002\u0002\u01a4\u0c6d\u0003\u0002\u0002\u0002\u01a6\u0c71",
    "\u0003\u0002\u0002\u0002\u01a8\u0c81\u0003\u0002\u0002\u0002\u01aa\u0c8a",
    "\u0003\u0002\u0002\u0002\u01ac\u0c8c\u0003\u0002\u0002\u0002\u01ae\u0c91",
    "\u0003\u0002\u0002\u0002\u01b0\u0c9a\u0003\u0002\u0002\u0002\u01b2\u0cae",
    "\u0003\u0002\u0002\u0002\u01b4\u0cb0\u0003\u0002\u0002\u0002\u01b6\u0cba",
    "\u0003\u0002\u0002\u0002\u01b8\u0cbc\u0003\u0002\u0002\u0002\u01ba\u0cc8",
    "\u0003\u0002\u0002\u0002\u01bc\u0cca\u0003\u0002\u0002\u0002\u01be\u0cd2",
    "\u0003\u0002\u0002\u0002\u01c0\u0cda\u0003\u0002\u0002\u0002\u01c2\u0ce1",
    "\u0003\u0002\u0002\u0002\u01c4\u0cf2\u0003\u0002\u0002\u0002\u01c6\u0d00",
    "\u0003\u0002\u0002\u0002\u01c8\u0d02\u0003\u0002\u0002\u0002\u01ca\u0d0a",
    "\u0003\u0002\u0002\u0002\u01cc\u0d0e\u0003\u0002\u0002\u0002\u01ce\u0d16",
    "\u0003\u0002\u0002\u0002\u01d0\u0d1a\u0003\u0002\u0002\u0002\u01d2\u0d1c",
    "\u0003\u0002\u0002\u0002\u01d4\u0d1f\u0003\u0002\u0002\u0002\u01d6\u0d29",
    "\u0003\u0002\u0002\u0002\u01d8\u0d31\u0003\u0002\u0002\u0002\u01da\u0d45",
    "\u0003\u0002\u0002\u0002\u01dc\u0d47\u0003\u0002\u0002\u0002\u01de\u0d50",
    "\u0003\u0002\u0002\u0002\u01e0\u0d56\u0003\u0002\u0002\u0002\u01e2\u0d5c",
    "\u0003\u0002\u0002\u0002\u01e4\u0d61\u0003\u0002\u0002\u0002\u01e6\u0d6e",
    "\u0003\u0002\u0002\u0002\u01e8\u0d78\u0003\u0002\u0002\u0002\u01ea\u0dc1",
    "\u0003\u0002\u0002\u0002\u01ec\u0dc3\u0003\u0002\u0002\u0002\u01ee\u0dc7",
    "\u0003\u0002\u0002\u0002\u01f0\u0dc9\u0003\u0002\u0002\u0002\u01f2\u0dcb",
    "\u0003\u0002\u0002\u0002\u01f4\u0dce\u0003\u0002\u0002\u0002\u01f6\u0dd0",
    "\u0003\u0002\u0002\u0002\u01f8\u0dd3\u0003\u0002\u0002\u0002\u01fa\u0dd6",
    "\u0003\u0002\u0002\u0002\u01fc\u0dda\u0003\u0002\u0002\u0002\u01fe\u0de2",
    "\u0003\u0002\u0002\u0002\u0200\u0de5\u0003\u0002\u0002\u0002\u0202\u0de9",
    "\u0003\u0002\u0002\u0002\u0204\u0df2\u0003\u0002\u0002\u0002\u0206\u0e22",
    "\u0003\u0002\u0002\u0002\u0208\u0e64\u0003\u0002\u0002\u0002\u020a\u0e66",
    "\u0003\u0002\u0002\u0002\u020c\u0ed9\u0003\u0002\u0002\u0002\u020e\u0efc",
    "\u0003\u0002\u0002\u0002\u0210\u0f27\u0003\u0002\u0002\u0002\u0212\u0f29",
    "\u0003\u0002\u0002\u0002\u0214\u0f3b\u0003\u0002\u0002\u0002\u0216\u0f42",
    "\u0003\u0002\u0002\u0002\u0218\u0f4a\u0003\u0002\u0002\u0002\u021a\u0f56",
    "\u0003\u0002\u0002\u0002\u021c\u0f61\u0003\u0002\u0002\u0002\u021e\u0f95",
    "\u0003\u0002\u0002\u0002\u0220\u0f97\u0003\u0002\u0002\u0002\u0222\u0fa1",
    "\u0003\u0002\u0002\u0002\u0224\u0fa4\u0003\u0002\u0002\u0002\u0226\u0fac",
    "\u0003\u0002\u0002\u0002\u0228\u0fae\u0003\u0002\u0002\u0002\u022a\u0fb1",
    "\u0003\u0002\u0002\u0002\u022c\u0fbf\u0003\u0002\u0002\u0002\u022e\u0fc7",
    "\u0003\u0002\u0002\u0002\u0230\u0fcc\u0003\u0002\u0002\u0002\u0232\u0fd2",
    "\u0003\u0002\u0002\u0002\u0234\u0fd6\u0003\u0002\u0002\u0002\u0236\u0fda",
    "\u0003\u0002\u0002\u0002\u0238\u0fde\u0003\u0002\u0002\u0002\u023a\u0fe8",
    "\u0003\u0002\u0002\u0002\u023c\u0ff3\u0003\u0002\u0002\u0002\u023e\u0ffc",
    "\u0003\u0002\u0002\u0002\u0240\u1005\u0003\u0002\u0002\u0002\u0242\u100e",
    "\u0003\u0002\u0002\u0002\u0244\u1013\u0003\u0002\u0002\u0002\u0246\u1017",
    "\u0003\u0002\u0002\u0002\u0248\u101a\u0003\u0002\u0002\u0002\u024a\u1021",
    "\u0003\u0002\u0002\u0002\u024c\u1025\u0003\u0002\u0002\u0002\u024e\u1030",
    "\u0003\u0002\u0002\u0002\u0250\u103a\u0003\u0002\u0002\u0002\u0252\u103c",
    "\u0003\u0002\u0002\u0002\u0254\u1045\u0003\u0002\u0002\u0002\u0256\u104e",
    "\u0003\u0002\u0002\u0002\u0258\u105f\u0003\u0002\u0002\u0002\u025a\u1071",
    "\u0003\u0002\u0002\u0002\u025c\u1075\u0003\u0002\u0002\u0002\u025e\u107a",
    "\u0003\u0002\u0002\u0002\u0260\u107f\u0003\u0002\u0002\u0002\u0262\u1084",
    "\u0003\u0002\u0002\u0002\u0264\u108c\u0003\u0002\u0002\u0002\u0266\u108e",
    "\u0003\u0002\u0002\u0002\u0268\u1095\u0003\u0002\u0002\u0002\u026a\u1097",
    "\u0003\u0002\u0002\u0002\u026c\u109b\u0003\u0002\u0002\u0002\u026e\u109f",
    "\u0003\u0002\u0002\u0002\u0270\u10a3\u0003\u0002\u0002\u0002\u0272\u10a9",
    "\u0003\u0002\u0002\u0002\u0274\u10ac\u0003\u0002\u0002\u0002\u0276\u10d2",
    "\u0003\u0002\u0002\u0002\u0278\u10d4\u0003\u0002\u0002\u0002\u027a\u10d8",
    "\u0003\u0002\u0002\u0002\u027c\u10e0\u0003\u0002\u0002\u0002\u027e\u10f7",
    "\u0003\u0002\u0002\u0002\u0280\u10f9\u0003\u0002\u0002\u0002\u0282\u1100",
    "\u0003\u0002\u0002\u0002\u0284\u111c\u0003\u0002\u0002\u0002\u0286\u111e",
    "\u0003\u0002\u0002\u0002\u0288\u112c\u0003\u0002\u0002\u0002\u028a\u112e",
    "\u0003\u0002\u0002\u0002\u028c\u1130\u0003\u0002\u0002\u0002\u028e\u1133",
    "\u0003\u0002\u0002\u0002\u0290\u1137\u0003\u0002\u0002\u0002\u0292\u113b",
    "\u0003\u0002\u0002\u0002\u0294\u113e\u0003\u0002\u0002\u0002\u0296\u1142",
    "\u0003\u0002\u0002\u0002\u0298\u114a\u0003\u0002\u0002\u0002\u029a\u1157",
    "\u0003\u0002\u0002\u0002\u029c\u1167\u0003\u0002\u0002\u0002\u029e\u116b",
    "\u0003\u0002\u0002\u0002\u02a0\u1171\u0003\u0002\u0002\u0002\u02a2\u1173",
    "\u0003\u0002\u0002\u0002\u02a4\u1178\u0003\u0002\u0002\u0002\u02a6\u117f",
    "\u0003\u0002\u0002\u0002\u02a8\u1181\u0003\u0002\u0002\u0002\u02aa\u118d",
    "\u0003\u0002\u0002\u0002\u02ac\u11a4\u0003\u0002\u0002\u0002\u02ae\u11a7",
    "\u0003\u0002\u0002\u0002\u02b0\u11aa\u0003\u0002\u0002\u0002\u02b2\u11c5",
    "\u0003\u0002\u0002\u0002\u02b4\u11cb\u0003\u0002\u0002\u0002\u02b6\u11cf",
    "\u0003\u0002\u0002\u0002\u02b8\u11d4\u0003\u0002\u0002\u0002\u02ba\u11e1",
    "\u0003\u0002\u0002\u0002\u02bc\u11ea\u0003\u0002\u0002\u0002\u02be\u11ec",
    "\u0003\u0002\u0002\u0002\u02c0\u11f7\u0003\u0002\u0002\u0002\u02c2\u11f9",
    "\u0003\u0002\u0002\u0002\u02c4\u1200\u0003\u0002\u0002\u0002\u02c6\u1205",
    "\u0003\u0002\u0002\u0002\u02c8\u120a\u0003\u0002\u0002\u0002\u02ca\u120f",
    "\u0003\u0002\u0002\u0002\u02cc\u1211\u0003\u0002\u0002\u0002\u02ce\u121a",
    "\u0003\u0002\u0002\u0002\u02d0\u121c\u0003\u0002\u0002\u0002\u02d2\u1225",
    "\u0003\u0002\u0002\u0002\u02d4\u1227\u0003\u0002\u0002\u0002\u02d6\u1230",
    "\u0003\u0002\u0002\u0002\u02d8\u1232\u0003\u0002\u0002\u0002\u02da\u123b",
    "\u0003\u0002\u0002\u0002\u02dc\u123d\u0003\u0002\u0002\u0002\u02de\u1246",
    "\u0003\u0002\u0002\u0002\u02e0\u1248\u0003\u0002\u0002\u0002\u02e2\u1254",
    "\u0003\u0002\u0002\u0002\u02e4\u125e\u0003\u0002\u0002\u0002\u02e6\u1260",
    "\u0003\u0002\u0002\u0002\u02e8\u1267\u0003\u0002\u0002\u0002\u02ea\u1269",
    "\u0003\u0002\u0002\u0002\u02ec\u126d\u0003\u0002\u0002\u0002\u02ee\u1273",
    "\u0003\u0002\u0002\u0002\u02f0\u1277\u0003\u0002\u0002\u0002\u02f2\u127f",
    "\u0003\u0002\u0002\u0002\u02f4\u1284\u0003\u0002\u0002\u0002\u02f6\u1286",
    "\u0003\u0002\u0002\u0002\u02f8\u128d\u0003\u0002\u0002\u0002\u02fa\u1293",
    "\u0003\u0002\u0002\u0002\u02fc\u1299\u0003\u0002\u0002\u0002\u02fe\u129b",
    "\u0003\u0002\u0002\u0002\u0300\u12a0\u0003\u0002\u0002\u0002\u0302\u12a5",
    "\u0003\u0002\u0002\u0002\u0304\u12a7\u0003\u0002\u0002\u0002\u0306\u12b0",
    "\u0003\u0002\u0002\u0002\u0308\u12b2\u0003\u0002\u0002\u0002\u030a\u12bb",
    "\u0003\u0002\u0002\u0002\u030c\u12c4\u0003\u0002\u0002\u0002\u030e\u12de",
    "\u0003\u0002\u0002\u0002\u0310\u12e1\u0003\u0002\u0002\u0002\u0312\u12e6",
    "\u0003\u0002\u0002\u0002\u0314\u12f1\u0003\u0002\u0002\u0002\u0316\u12f8",
    "\u0003\u0002\u0002\u0002\u0318\u1312\u0003\u0002\u0002\u0002\u031a\u1333",
    "\u0003\u0002\u0002\u0002\u031c\u133a\u0003\u0002\u0002\u0002\u031e\u1342",
    "\u0003\u0002\u0002\u0002\u0320\u1352\u0003\u0002\u0002\u0002\u0322\u135b",
    "\u0003\u0002\u0002\u0002\u0324\u1364\u0003\u0002\u0002\u0002\u0326\u1371",
    "\u0003\u0002\u0002\u0002\u0328\u1380\u0003\u0002\u0002\u0002\u032a\u1387",
    "\u0003\u0002\u0002\u0002\u032c\u138c\u0003\u0002\u0002\u0002\u032e\u1391",
    "\u0003\u0002\u0002\u0002\u0330\u1393\u0003\u0002\u0002\u0002\u0332\u1398",
    "\u0003\u0002\u0002\u0002\u0334\u139b\u0003\u0002\u0002\u0002\u0336\u139d",
    "\u0003\u0002\u0002\u0002\u0338\u13bd\u0003\u0002\u0002\u0002\u033a\u13c1",
    "\u0003\u0002\u0002\u0002\u033c\u13c3\u0003\u0002\u0002\u0002\u033e\u13df",
    "\u0003\u0002\u0002\u0002\u0340\u13e3\u0003\u0002\u0002\u0002\u0342\u13e7",
    "\u0003\u0002\u0002\u0002\u0344\u13ee\u0003\u0002\u0002\u0002\u0346\u13f4",
    "\u0003\u0002\u0002\u0002\u0348\u13fb\u0003\u0002\u0002\u0002\u034a\u1400",
    "\u0003\u0002\u0002\u0002\u034c\u1405\u0003\u0002\u0002\u0002\u034e\u140d",
    "\u0003\u0002\u0002\u0002\u0350\u1412\u0003\u0002\u0002\u0002\u0352\u1416",
    "\u0003\u0002\u0002\u0002\u0354\u141a\u0003\u0002\u0002\u0002\u0356\u1421",
    "\u0003\u0002\u0002\u0002\u0358\u142d\u0003\u0002\u0002\u0002\u035a\u142f",
    "\u0003\u0002\u0002\u0002\u035c\u1431\u0003\u0002\u0002\u0002\u035e\u1433",
    "\u0003\u0002\u0002\u0002\u0360\u1438\u0003\u0002\u0002\u0002\u0362\u143d",
    "\u0003\u0002\u0002\u0002\u0364\u1442\u0003\u0002\u0002\u0002\u0366\u1447",
    "\u0003\u0002\u0002\u0002\u0368\u144c\u0003\u0002\u0002\u0002\u036a\u1451",
    "\u0003\u0002\u0002\u0002\u036c\u1462\u0003\u0002\u0002\u0002\u036e\u1472",
    "\u0003\u0002\u0002\u0002\u0370\u1474\u0003\u0002\u0002\u0002\u0372\u147c",
    "\u0003\u0002\u0002\u0002\u0374\u147f\u0003\u0002\u0002\u0002\u0376\u1481",
    "\u0003\u0002\u0002\u0002\u0378\u1498\u0003\u0002\u0002\u0002\u037a\u149a",
    "\u0003\u0002\u0002\u0002\u037c\u14a4\u0003\u0002\u0002\u0002\u037e\u14b1",
    "\u0003\u0002\u0002\u0002\u0380\u14c1\u0003\u0002\u0002\u0002\u0382\u14ce",
    "\u0003\u0002\u0002\u0002\u0384\u14d7\u0003\u0002\u0002\u0002\u0386\u14db",
    "\u0003\u0002\u0002\u0002\u0388\u14dd\u0003\u0002\u0002\u0002\u038a\u1503",
    "\u0003\u0002\u0002\u0002\u038c\u1505\u0003\u0002\u0002\u0002\u038e\u1511",
    "\u0003\u0002\u0002\u0002\u0390\u151d\u0003\u0002\u0002\u0002\u0392\u152a",
    "\u0003\u0002\u0002\u0002\u0394\u1534\u0003\u0002\u0002\u0002\u0396\u1539",
    "\u0003\u0002\u0002\u0002\u0398\u153b\u0003\u0002\u0002\u0002\u039a\u1549",
    "\u0003\u0002\u0002\u0002\u039c\u154f\u0003\u0002\u0002\u0002\u039e\u157e",
    "\u0003\u0002\u0002\u0002\u03a0\u1580\u0003\u0002\u0002\u0002\u03a2\u158c",
    "\u0003\u0002\u0002\u0002\u03a4\u1594\u0003\u0002\u0002\u0002\u03a6\u1598",
    "\u0003\u0002\u0002\u0002\u03a8\u159d\u0003\u0002\u0002\u0002\u03aa\u15a1",
    "\u0003\u0002\u0002\u0002\u03ac\u15aa\u0003\u0002\u0002\u0002\u03ae\u15b2",
    "\u0003\u0002\u0002\u0002\u03b0\u15bc\u0003\u0002\u0002\u0002\u03b2\u15be",
    "\u0003\u0002\u0002\u0002\u03b4\u15c8\u0003\u0002\u0002\u0002\u03b6\u15ca",
    "\u0003\u0002\u0002\u0002\u03b8\u1601\u0003\u0002\u0002\u0002\u03ba\u1638",
    "\u0003\u0002\u0002\u0002\u03bc\u1640\u0003\u0002\u0002\u0002\u03be\u1645",
    "\u0003\u0002\u0002\u0002\u03c0\u164e\u0003\u0002\u0002\u0002\u03c2\u1686",
    "\u0003\u0002\u0002\u0002\u03c4\u1688\u0003\u0002\u0002\u0002\u03c6\u16dc",
    "\u0003\u0002\u0002\u0002\u03c8\u16ea\u0003\u0002\u0002\u0002\u03ca\u16ec",
    "\u0003\u0002\u0002\u0002\u03cc\u16ef\u0003\u0002\u0002\u0002\u03ce\u16f2",
    "\u0003\u0002\u0002\u0002\u03d0\u16f5\u0003\u0002\u0002\u0002\u03d2\u16f7",
    "\u0003\u0002\u0002\u0002\u03d4\u1700\u0003\u0002\u0002\u0002\u03d6\u170b",
    "\u0003\u0002\u0002\u0002\u03d8\u170e\u0003\u0002\u0002\u0002\u03da\u171a",
    "\u0003\u0002\u0002\u0002\u03dc\u171d\u0003\u0002\u0002\u0002\u03de\u1721",
    "\u0003\u0002\u0002\u0002\u03e0\u1725\u0003\u0002\u0002\u0002\u03e2\u172c",
    "\u0003\u0002\u0002\u0002\u03e4\u1741\u0003\u0002\u0002\u0002\u03e6\u1743",
    "\u0003\u0002\u0002\u0002\u03e8\u174c\u0003\u0002\u0002\u0002\u03ea\u1759",
    "\u0003\u0002\u0002\u0002\u03ec\u1767\u0003\u0002\u0002\u0002\u03ee\u1771",
    "\u0003\u0002\u0002\u0002\u03f0\u1773\u0003\u0002\u0002\u0002\u03f2\u1782",
    "\u0003\u0002\u0002\u0002\u03f4\u178a\u0003\u0002\u0002\u0002\u03f6\u1792",
    "\u0003\u0002\u0002\u0002\u03f8\u179d\u0003\u0002\u0002\u0002\u03fa\u17ab",
    "\u0003\u0002\u0002\u0002\u03fc\u17ae\u0003\u0002\u0002\u0002\u03fe\u17b5",
    "\u0003\u0002\u0002\u0002\u0400\u17b8\u0003\u0002\u0002\u0002\u0402\u17c5",
    "\u0003\u0002\u0002\u0002\u0404\u17c7\u0003\u0002\u0002\u0002\u0406\u17de",
    "\u0003\u0002\u0002\u0002\u0408\u17e0\u0003\u0002\u0002\u0002\u040a\u17f0",
    "\u0003\u0002\u0002\u0002\u040c\u17f2\u0003\u0002\u0002\u0002\u040e\u17fa",
    "\u0003\u0002\u0002\u0002\u0410\u17fe\u0003\u0002\u0002\u0002\u0412\u1822",
    "\u0003\u0002\u0002\u0002\u0414\u1824\u0003\u0002\u0002\u0002\u0416\u1826",
    "\u0003\u0002\u0002\u0002\u0418\u182f\u0003\u0002\u0002\u0002\u041a\u1831",
    "\u0003\u0002\u0002\u0002\u041c\u1833\u0003\u0002\u0002\u0002\u041e\u1835",
    "\u0003\u0002\u0002\u0002\u0420\u1837\u0003\u0002\u0002\u0002\u0422\u183f",
    "\u0003\u0002\u0002\u0002\u0424\u1847\u0003\u0002\u0002\u0002\u0426\u184b",
    "\u0003\u0002\u0002\u0002\u0428\u184d\u0003\u0002\u0002\u0002\u042a\u1857",
    "\u0003\u0002\u0002\u0002\u042c\u186d\u0003\u0002\u0002\u0002\u042e\u1873",
    "\u0003\u0002\u0002\u0002\u0430\u188e\u0003\u0002\u0002\u0002\u0432\u1890",
    "\u0003\u0002\u0002\u0002\u0434\u189b\u0003\u0002\u0002\u0002\u0436\u18a0",
    "\u0003\u0002\u0002\u0002\u0438\u18a5\u0003\u0002\u0002\u0002\u043a\u18a7",
    "\u0003\u0002\u0002\u0002\u043c\u18c3\u0003\u0002\u0002\u0002\u043e\u18cb",
    "\u0003\u0002\u0002\u0002\u0440\u18d5\u0003\u0002\u0002\u0002\u0442\u18df",
    "\u0003\u0002\u0002\u0002\u0444\u18e8\u0003\u0002\u0002\u0002\u0446\u18f1",
    "\u0003\u0002\u0002\u0002\u0448\u18f3\u0003\u0002\u0002\u0002\u044a\u18fb",
    "\u0003\u0002\u0002\u0002\u044c\u18fd\u0003\u0002\u0002\u0002\u044e\u1916",
    "\u0003\u0002\u0002\u0002\u0450\u192f\u0003\u0002\u0002\u0002\u0452\u1948",
    "\u0003\u0002\u0002\u0002\u0454\u1961\u0003\u0002\u0002\u0002\u0456\u197a",
    "\u0003\u0002\u0002\u0002\u0458\u197c\u0003\u0002\u0002\u0002\u045a\u197e",
    "\u0003\u0002\u0002\u0002\u045c\u198a\u0003\u0002\u0002\u0002\u045e\u1990",
    "\u0003\u0002\u0002\u0002\u0460\u1999\u0003\u0002\u0002\u0002\u0462\u19a9",
    "\u0003\u0002\u0002\u0002\u0464\u19ae\u0003\u0002\u0002\u0002\u0466\u19b0",
    "\u0003\u0002\u0002\u0002\u0468\u19b8\u0003\u0002\u0002\u0002\u046a\u19c0",
    "\u0003\u0002\u0002\u0002\u046c\u19df\u0003\u0002\u0002\u0002\u046e\u19e6",
    "\u0003\u0002\u0002\u0002\u0470\u19f2\u0003\u0002\u0002\u0002\u0472\u19f5",
    "\u0003\u0002\u0002\u0002\u0474\u19fa\u0003\u0002\u0002\u0002\u0476\u19fd",
    "\u0003\u0002\u0002\u0002\u0478\u1a00\u0003\u0002\u0002\u0002\u047a\u1a06",
    "\u0003\u0002\u0002\u0002\u047c\u1a12\u0003\u0002\u0002\u0002\u047e\u1a1d",
    "\u0003\u0002\u0002\u0002\u0480\u1a2f\u0003\u0002\u0002\u0002\u0482\u1a31",
    "\u0003\u0002\u0002\u0002\u0484\u1a39\u0003\u0002\u0002\u0002\u0486\u1a41",
    "\u0003\u0002\u0002\u0002\u0488\u1a49\u0003\u0002\u0002\u0002\u048a\u1a4b",
    "\u0003\u0002\u0002\u0002\u048c\u1a57\u0003\u0002\u0002\u0002\u048e\u1a5f",
    "\u0003\u0002\u0002\u0002\u0490\u1a61\u0003\u0002\u0002\u0002\u0492\u1a66",
    "\u0003\u0002\u0002\u0002\u0494\u1a68\u0003\u0002\u0002\u0002\u0496\u1a6b",
    "\u0003\u0002\u0002\u0002\u0498\u1a6e\u0003\u0002\u0002\u0002\u049a\u1a72",
    "\u0003\u0002\u0002\u0002\u049c\u1a75\u0003\u0002\u0002\u0002\u049e\u1a7a",
    "\u0003\u0002\u0002\u0002\u04a0\u1a7d\u0003\u0002\u0002\u0002\u04a2\u1a84",
    "\u0003\u0002\u0002\u0002\u04a4\u1abd\u0003\u0002\u0002\u0002\u04a6\u1abf",
    "\u0003\u0002\u0002\u0002\u04a8\u1ac4\u0003\u0002\u0002\u0002\u04aa\u1ac9",
    "\u0003\u0002\u0002\u0002\u04ac\u1ad0\u0003\u0002\u0002\u0002\u04ae\u1ad5",
    "\u0003\u0002\u0002\u0002\u04b0\u1adc\u0003\u0002\u0002\u0002\u04b2\u1ade",
    "\u0003\u0002\u0002\u0002\u04b4\u1ae6\u0003\u0002\u0002\u0002\u04b6\u1ae9",
    "\u0003\u0002\u0002\u0002\u04b8\u1aed\u0003\u0002\u0002\u0002\u04ba\u1af5",
    "\u0003\u0002\u0002\u0002\u04bc\u1afd\u0003\u0002\u0002\u0002\u04be\u1aff",
    "\u0003\u0002\u0002\u0002\u04c0\u1b01\u0003\u0002\u0002\u0002\u04c2\u1b03",
    "\u0003\u0002\u0002\u0002\u04c4\u1b05\u0003\u0002\u0002\u0002\u04c6\u1b10",
    "\u0003\u0002\u0002\u0002\u04c8\u1b13\u0003\u0002\u0002\u0002\u04ca\u1b15",
    "\u0003\u0002\u0002\u0002\u04cc\u1b20\u0003\u0002\u0002\u0002\u04ce\u1b2b",
    "\u0003\u0002\u0002\u0002\u04d0\u1b2d\u0003\u0002\u0002\u0002\u04d2\u1b36",
    "\u0003\u0002\u0002\u0002\u04d4\u1b39\u0003\u0002\u0002\u0002\u04d6\u1b42",
    "\u0003\u0002\u0002\u0002\u04d8\u1b52\u0003\u0002\u0002\u0002\u04da\u1b62",
    "\u0003\u0002\u0002\u0002\u04dc\u1b71\u0003\u0002\u0002\u0002\u04de\u1b87",
    "\u0003\u0002\u0002\u0002\u04e0\u1b89\u0003\u0002\u0002\u0002\u04e2\u1b9a",
    "\u0003\u0002\u0002\u0002\u04e4\u1b9e\u0003\u0002\u0002\u0002\u04e6\u1ba0",
    "\u0003\u0002\u0002\u0002\u04e8\u1ba3\u0003\u0002\u0002\u0002\u04ea\u1ba7",
    "\u0003\u0002\u0002\u0002\u04ec\u1bae\u0003\u0002\u0002\u0002\u04ee\u1bb0",
    "\u0003\u0002\u0002\u0002\u04f0\u1bb3\u0003\u0002\u0002\u0002\u04f2\u1bb9",
    "\u0003\u0002\u0002\u0002\u04f4\u1bbb\u0003\u0002\u0002\u0002\u04f6\u1bc2",
    "\u0003\u0002\u0002\u0002\u04f8\u1bc4\u0003\u0002\u0002\u0002\u04fa\u1bc6",
    "\u0003\u0002\u0002\u0002\u04fc\u1bcd\u0003\u0002\u0002\u0002\u04fe\u1bd4",
    "\u0003\u0002\u0002\u0002\u0500\u1bdb\u0003\u0002\u0002\u0002\u0502\u1bdd",
    "\u0003\u0002\u0002\u0002\u0504\u1be9\u0003\u0002\u0002\u0002\u0506\u1beb",
    "\u0003\u0002\u0002\u0002\u0508\u1bee\u0003\u0002\u0002\u0002\u050a\u1bf9",
    "\u0003\u0002\u0002\u0002\u050c\u1bfe\u0003\u0002\u0002\u0002\u050e\u1c03",
    "\u0003\u0002\u0002\u0002\u0510\u1c05\u0003\u0002\u0002\u0002\u0512\u1c07",
    "\u0003\u0002\u0002\u0002\u0514\u1c0b\u0003\u0002\u0002\u0002\u0516\u1c11",
    "\u0003\u0002\u0002\u0002\u0518\u1c24\u0003\u0002\u0002\u0002\u051a\u1c33",
    "\u0003\u0002\u0002\u0002\u051c\u1c36\u0003\u0002\u0002\u0002\u051e\u1c3f",
    "\u0003\u0002\u0002\u0002\u0520\u1c53\u0003\u0002\u0002\u0002\u0522\u1c55",
    "\u0003\u0002\u0002\u0002\u0524\u1c5e\u0003\u0002\u0002\u0002\u0526\u1c63",
    "\u0003\u0002\u0002\u0002\u0528\u1c65\u0003\u0002\u0002\u0002\u052a\u1c6f",
    "\u0003\u0002\u0002\u0002\u052c\u1c71\u0003\u0002\u0002\u0002\u052e\u1c76",
    "\u0003\u0002\u0002\u0002\u0530\u1c94\u0003\u0002\u0002\u0002\u0532\u1caa",
    "\u0003\u0002\u0002\u0002\u0534\u1cb3\u0003\u0002\u0002\u0002\u0536\u1cba",
    "\u0003\u0002\u0002\u0002\u0538\u1cbc\u0003\u0002\u0002\u0002\u053a\u1cce",
    "\u0003\u0002\u0002\u0002\u053c\u1cd3\u0003\u0002\u0002\u0002\u053e\u1cd8",
    "\u0003\u0002\u0002\u0002\u0540\u1ce9\u0003\u0002\u0002\u0002\u0542\u1ceb",
    "\u0003\u0002\u0002\u0002\u0544\u1cee\u0003\u0002\u0002\u0002\u0546\u1cfb",
    "\u0003\u0002\u0002\u0002\u0548\u1d02\u0003\u0002\u0002\u0002\u054a\u1d04",
    "\u0003\u0002\u0002\u0002\u054c\u1d17\u0003\u0002\u0002\u0002\u054e\u1d32",
    "\u0003\u0002\u0002\u0002\u0550\u1d3f\u0003\u0002\u0002\u0002\u0552\u1d4a",
    "\u0003\u0002\u0002\u0002\u0554\u1d4c\u0003\u0002\u0002\u0002\u0556\u1d54",
    "\u0003\u0002\u0002\u0002\u0558\u1d5a\u0003\u0002\u0002\u0002\u055a\u1d63",
    "\u0003\u0002\u0002\u0002\u055c\u1d6f\u0003\u0002\u0002\u0002\u055e\u1d78",
    "\u0003\u0002\u0002\u0002\u0560\u1d7e\u0003\u0002\u0002\u0002\u0562\u1d80",
    "\u0003\u0002\u0002\u0002\u0564\u1d8d\u0003\u0002\u0002\u0002\u0566\u1d93",
    "\u0003\u0002\u0002\u0002\u0568\u1d98\u0003\u0002\u0002\u0002\u056a\u1d9a",
    "\u0003\u0002\u0002\u0002\u056c\u1db5\u0003\u0002\u0002\u0002\u056e\u1dc1",
    "\u0003\u0002\u0002\u0002\u0570\u1dda\u0003\u0002\u0002\u0002\u0572\u1dfb",
    "\u0003\u0002\u0002\u0002\u0574\u1dfd\u0003\u0002\u0002\u0002\u0576\u1e09",
    "\u0003\u0002\u0002\u0002\u0578\u1e14\u0003\u0002\u0002\u0002\u057a\u1e1b",
    "\u0003\u0002\u0002\u0002\u057c\u1e59\u0003\u0002\u0002\u0002\u057e\u1e66",
    "\u0003\u0002\u0002\u0002\u0580\u1e6c\u0003\u0002\u0002\u0002\u0582\u1e6e",
    "\u0003\u0002\u0002\u0002\u0584\u1e71\u0003\u0002\u0002\u0002\u0586\u1e83",
    "\u0003\u0002\u0002\u0002\u0588\u1e85\u0003\u0002\u0002\u0002\u058a\u1e87",
    "\u0003\u0002\u0002\u0002\u058c\u1e89\u0003\u0002\u0002\u0002\u058e\u1e96",
    "\u0003\u0002\u0002\u0002\u0590\u1ea4\u0003\u0002\u0002\u0002\u0592\u1ea6",
    "\u0003\u0002\u0002\u0002\u0594\u1eaa\u0003\u0002\u0002\u0002\u0596\u1eac",
    "\u0003\u0002\u0002\u0002\u0598\u1eb1\u0003\u0002\u0002\u0002\u059a\u1eb3",
    "\u0003\u0002\u0002\u0002\u059c\u1eb5\u0003\u0002\u0002\u0002\u059e\u1ebf",
    "\u0003\u0002\u0002\u0002\u05a0\u1ecb\u0003\u0002\u0002\u0002\u05a2\u1ed7",
    "\u0003\u0002\u0002\u0002\u05a4\u1edc\u0003\u0002\u0002\u0002\u05a6\u1ee7",
    "\u0003\u0002\u0002\u0002\u05a8\u1ee9\u0003\u0002\u0002\u0002\u05aa\u05ab",
    "\u0007%\u0002\u0002\u05ab\u0003\u0003\u0002\u0002\u0002\u05ac\u05b0",
    "\u0007\u021b\u0002\u0002\u05ad\u05b0\u0005\u0002\u0002\u0002\u05ae\u05b0",
    "\u0007\u0212\u0002\u0002\u05af\u05ac\u0003\u0002\u0002\u0002\u05af\u05ad",
    "\u0003\u0002\u0002\u0002\u05af\u05ae\u0003\u0002\u0002\u0002\u05b0\u0005",
    "\u0003\u0002\u0002\u0002\u05b1\u05b5\u0007\u021b\u0002\u0002\u05b2\u05b5",
    "\u0005\n\u0006\u0002\u05b3\u05b5\u0005\u0536\u029c\u0002\u05b4\u05b1",
    "\u0003\u0002\u0002\u0002\u05b4\u05b2\u0003\u0002\u0002\u0002\u05b4\u05b3",
    "\u0003\u0002\u0002\u0002\u05b5\u0007\u0003\u0002\u0002\u0002\u05b6\u05b9",
    "\u0005\u0006\u0004\u0002\u05b7\u05b9\u0007\u0212\u0002\u0002\u05b8\u05b6",
    "\u0003\u0002\u0002\u0002\u05b8\u05b7\u0003\u0002\u0002\u0002\u05b9\t",
    "\u0003\u0002\u0002\u0002\u05ba\u05bb\t\u0002\u0002\u0002\u05bb\u000b",
    "\u0003\u0002\u0002\u0002\u05bc\u05bd\u0007\u0212\u0002\u0002\u05bd\u05be",
    "\u0007\u01f6\u0002\u0002\u05be\u05bf\u0007\u0212\u0002\u0002\u05bf\r",
    "\u0003\u0002\u0002\u0002\u05c0\u05c1\u0007\u0212\u0002\u0002\u05c1\u000f",
    "\u0003\u0002\u0002\u0002\u05c2\u05c3\u0005\u0006\u0004\u0002\u05c3\u05c4",
    "\u0007\u01ec\u0002\u0002\u05c4\u05c7\u0005\u0006\u0004\u0002\u05c5\u05c6",
    "\u0007\u020d\u0002\u0002\u05c6\u05c8\u0005\u0006\u0004\u0002\u05c7\u05c5",
    "\u0003\u0002\u0002\u0002\u05c7\u05c8\u0003\u0002\u0002\u0002\u05c8\u05cf",
    "\u0003\u0002\u0002\u0002\u05c9\u05cc\u0005\u0006\u0004\u0002\u05ca\u05cb",
    "\u0007\u020d\u0002\u0002\u05cb\u05cd\u0005\u0006\u0004\u0002\u05cc\u05ca",
    "\u0003\u0002\u0002\u0002\u05cc\u05cd\u0003\u0002\u0002\u0002\u05cd\u05cf",
    "\u0003\u0002\u0002\u0002\u05ce\u05c2\u0003\u0002\u0002\u0002\u05ce\u05c9",
    "\u0003\u0002\u0002\u0002\u05cf\u0011\u0003\u0002\u0002\u0002\u05d0\u05d1",
    "\u0005\u0006\u0004\u0002\u05d1\u0013\u0003\u0002\u0002\u0002\u05d2\u05d3",
    "\u0005\u0010\t\u0002\u05d3\u0015\u0003\u0002\u0002\u0002\u05d4\u05d5",
    "\u0005\u0006\u0004\u0002\u05d5\u0017\u0003\u0002\u0002\u0002\u05d6\u05d7",
    "\u0005\u0006\u0004\u0002\u05d7\u05d8\u0007\u01ec\u0002\u0002\u05d8\u05d9",
    "\u0005\u0006\u0004\u0002\u05d9\u05dc\u0003\u0002\u0002\u0002\u05da\u05dc",
    "\u0005\u0006\u0004\u0002\u05db\u05d6\u0003\u0002\u0002\u0002\u05db\u05da",
    "\u0003\u0002\u0002\u0002\u05dc\u0019\u0003\u0002\u0002\u0002\u05dd\u05de",
    "\u0007+\u0002\u0002\u05de\u05df\u0007\u01f0\u0002\u0002\u05df\u05e4",
    "\u0005\u001c\u000f\u0002\u05e0\u05e1\u0007\u01ee\u0002\u0002\u05e1\u05e3",
    "\u0005\u001c\u000f\u0002\u05e2\u05e0\u0003\u0002\u0002\u0002\u05e3\u05e6",
    "\u0003\u0002\u0002\u0002\u05e4\u05e2\u0003\u0002\u0002\u0002\u05e4\u05e5",
    "\u0003\u0002\u0002\u0002\u05e5\u05e7\u0003\u0002\u0002\u0002\u05e6\u05e4",
    "\u0003\u0002\u0002\u0002\u05e7\u05e8\u0007\u01f1\u0002\u0002\u05e8\u05ec",
    "\u0003\u0002\u0002\u0002\u05e9\u05ea\u0007+\u0002\u0002\u05ea\u05ec",
    "\u0005Z.\u0002\u05eb\u05dd\u0003\u0002\u0002\u0002\u05eb\u05e9\u0003",
    "\u0002\u0002\u0002\u05ec\u001b\u0003\u0002\u0002\u0002\u05ed\u05f0\u0005",
    "\u0006\u0004\u0002\u05ee\u05ef\u0007\u01f6\u0002\u0002\u05ef\u05f1\u0005",
    "\u00f4{\u0002\u05f0\u05ee\u0003\u0002\u0002\u0002\u05f0\u05f1\u0003",
    "\u0002\u0002\u0002\u05f1\u001d\u0003\u0002\u0002\u0002\u05f2\u05f3\u0007",
    "\u0097\u0002\u0002\u05f3\u05f4\u0007\u0018\u0002\u0002\u05f4\u05f5\u0007",
    "\u0145\u0002\u0002\u05f5\u001f\u0003\u0002\u0002\u0002\u05f6\u05f7\u0007",
    "\u0007\u0002\u0002\u05f7\u05f8\u0007\u00b6\u0002\u0002\u05f8!\u0003",
    "\u0002\u0002\u0002\u05f9\u05fc\u0005$\u0013\u0002\u05fa\u05fc\u0005",
    "> \u0002\u05fb\u05f9\u0003\u0002\u0002\u0002\u05fb\u05fa\u0003\u0002",
    "\u0002\u0002\u05fc#\u0003\u0002\u0002\u0002\u05fd\u0602\u00054\u001b",
    "\u0002\u05fe\u05ff\u0007\u01ee\u0002\u0002\u05ff\u0601\u00054\u001b",
    "\u0002\u0600\u05fe\u0003\u0002\u0002\u0002\u0601\u0604\u0003\u0002\u0002",
    "\u0002\u0602\u0600\u0003\u0002\u0002\u0002\u0602\u0603\u0003\u0002\u0002",
    "\u0002\u0603%\u0003\u0002\u0002\u0002\u0604\u0602\u0003\u0002\u0002",
    "\u0002\u0605\u060a\u0005\u04ae\u0258\u0002\u0606\u0607\u0007\u01ee\u0002",
    "\u0002\u0607\u0609\u0005\u04ae\u0258\u0002\u0608\u0606\u0003\u0002\u0002",
    "\u0002\u0609\u060c\u0003\u0002\u0002\u0002\u060a\u0608\u0003\u0002\u0002",
    "\u0002\u060a\u060b\u0003\u0002\u0002\u0002\u060b\'\u0003\u0002\u0002",
    "\u0002\u060c\u060a\u0003\u0002\u0002\u0002\u060d\u0612\u0005*\u0016",
    "\u0002\u060e\u060f\u0007\u01ee\u0002\u0002\u060f\u0611\u0005*\u0016",
    "\u0002\u0610\u060e\u0003\u0002\u0002\u0002\u0611\u0614\u0003\u0002\u0002",
    "\u0002\u0612\u0610\u0003\u0002\u0002\u0002\u0612\u0613\u0003\u0002\u0002",
    "\u0002\u0613)\u0003\u0002\u0002\u0002\u0614\u0612\u0003\u0002\u0002",
    "\u0002\u0615\u0618\u0005\u0006\u0004\u0002\u0616\u0619\u0007\u000e\u0002",
    "\u0002\u0617\u0619\u0007\u000f\u0002\u0002\u0618\u0616\u0003\u0002\u0002",
    "\u0002\u0618\u0617\u0003\u0002\u0002\u0002\u0618\u0619\u0003\u0002\u0002",
    "\u0002\u0619+\u0003\u0002\u0002\u0002\u061a\u061f\u0005.\u0018\u0002",
    "\u061b\u061c\u0007\u01ee\u0002\u0002\u061c\u061e\u0005.\u0018\u0002",
    "\u061d\u061b\u0003\u0002\u0002\u0002\u061e\u0621\u0003\u0002\u0002\u0002",
    "\u061f\u061d\u0003\u0002\u0002\u0002\u061f\u0620\u0003\u0002\u0002\u0002",
    "\u0620-\u0003\u0002\u0002\u0002\u0621\u061f\u0003\u0002\u0002\u0002",
    "\u0622\u0624\u0005\u0006\u0004\u0002\u0623\u0625\u0005<\u001f\u0002",
    "\u0624\u0623\u0003\u0002\u0002\u0002\u0624\u0625\u0003\u0002\u0002\u0002",
    "\u0625/\u0003\u0002\u0002\u0002\u0626\u0627\u0007K\u0002\u0002\u0627",
    "\u0628\t\u0003\u0002\u0002\u06281\u0003\u0002\u0002\u0002\u0629\u062c",
    "\u0005\u02e6\u0174\u0002\u062a\u062d\u0007\u000e\u0002\u0002\u062b\u062d",
    "\u0007\u000f\u0002\u0002\u062c\u062a\u0003\u0002\u0002\u0002\u062c\u062b",
    "\u0003\u0002\u0002\u0002\u062c\u062d\u0003\u0002\u0002\u0002\u062d\u062f",
    "\u0003\u0002\u0002\u0002\u062e\u0630\u00050\u0019\u0002\u062f\u062e",
    "\u0003\u0002\u0002\u0002\u062f\u0630\u0003\u0002\u0002\u0002\u06303",
    "\u0003\u0002\u0002\u0002\u0631\u0632\u0005\u0006\u0004\u0002\u0632\u0634",
    "\u0005\u04b0\u0259\u0002\u0633\u0635\u00056\u001c\u0002\u0634\u0633",
    "\u0003\u0002\u0002\u0002\u0634\u0635\u0003\u0002\u0002\u0002\u0635\u0637",
    "\u0003\u0002\u0002\u0002\u0636\u0638\u0005\u011c\u008f\u0002\u0637\u0636",
    "\u0003\u0002\u0002\u0002\u0637\u0638\u0003\u0002\u0002\u0002\u0638\u063a",
    "\u0003\u0002\u0002\u0002\u0639\u063b\u0005<\u001f\u0002\u063a\u0639",
    "\u0003\u0002\u0002\u0002\u063a\u063b\u0003\u0002\u0002\u0002\u063b5",
    "\u0003\u0002\u0002\u0002\u063c\u063d\u0007\u00c6\u0002\u0002\u063d\u063e",
    "\u0007\u01db\u0002\u0002\u063e\u063f\u0007\u0212\u0002\u0002\u063f\u0646",
    "\u0007\u0212\u0002\u0002\u0640\u0641\u0007\u01da\u0002\u0002\u0641\u0642",
    "\u0007\u01db\u0002\u0002\u0642\u0643\u0007\u0212\u0002\u0002\u0643\u0646",
    "\u0007\u0212\u0002\u0002\u0644\u0646\u0007\u01dd\u0002\u0002\u0645\u063c",
    "\u0003\u0002\u0002\u0002\u0645\u0640\u0003\u0002\u0002\u0002\u0645\u0644",
    "\u0003\u0002\u0002\u0002\u06467\u0003\u0002\u0002\u0002\u0647\u0648",
    "\u0007\u012c\u0002\u0002\u0648\u0649\u0005:\u001e\u0002\u06499\u0003",
    "\u0002\u0002\u0002\u064a\u064d\u0005\u00f6|\u0002\u064b\u064d\u0007",
    "J\u0002\u0002\u064c\u064a\u0003\u0002\u0002\u0002\u064c\u064b\u0003",
    "\u0002\u0002\u0002\u064d;\u0003\u0002\u0002\u0002\u064e\u064f\u0007",
    "[\u0002\u0002\u064f\u0650\u0007\u0212\u0002\u0002\u0650=\u0003\u0002",
    "\u0002\u0002\u0651\u0656\u0005@!\u0002\u0652\u0653\u0007\u01ee\u0002",
    "\u0002\u0653\u0655\u0005@!\u0002\u0654\u0652\u0003\u0002\u0002\u0002",
    "\u0655\u0658\u0003\u0002\u0002\u0002\u0656\u0654\u0003\u0002\u0002\u0002",
    "\u0656\u0657\u0003\u0002\u0002\u0002\u0657?\u0003\u0002\u0002\u0002",
    "\u0658\u0656\u0003\u0002\u0002\u0002\u0659\u065a\u0005\u0006\u0004\u0002",
    "\u065aA\u0003\u0002\u0002\u0002\u065b\u0660\u0005D#\u0002\u065c\u065d",
    "\u0007\u01ee\u0002\u0002\u065d\u065f\u0005D#\u0002\u065e\u065c\u0003",
    "\u0002\u0002\u0002\u065f\u0662\u0003\u0002\u0002\u0002\u0660\u065e\u0003",
    "\u0002\u0002\u0002\u0660\u0661\u0003\u0002\u0002\u0002\u0661C\u0003",
    "\u0002\u0002\u0002\u0662\u0660\u0003\u0002\u0002\u0002\u0663\u0664\u0005",
    "\u0006\u0004\u0002\u0664\u0665\u0007\u01ec\u0002\u0002\u0665\u0666\u0005",
    "@!\u0002\u0666\u0669\u0003\u0002\u0002\u0002\u0667\u0669\u0005@!\u0002",
    "\u0668\u0663\u0003\u0002\u0002\u0002\u0668\u0667\u0003\u0002\u0002\u0002",
    "\u0669E\u0003\u0002\u0002\u0002\u066a\u066f\u0005H%\u0002\u066b\u066c",
    "\u0007\u01ee\u0002\u0002\u066c\u066e\u0005H%\u0002\u066d\u066b\u0003",
    "\u0002\u0002\u0002\u066e\u0671\u0003\u0002\u0002\u0002\u066f\u066d\u0003",
    "\u0002\u0002\u0002\u066f\u0670\u0003\u0002\u0002\u0002\u0670G\u0003",
    "\u0002\u0002\u0002\u0671\u066f\u0003\u0002\u0002\u0002\u0672\u0673\u0005",
    "\u0006\u0004\u0002\u0673\u0674\u0007\u01ec\u0002\u0002\u0674\u0677\u0005",
    "\u0006\u0004\u0002\u0675\u0676\u0007\u01ec\u0002\u0002\u0676\u0678\u0005",
    "\u0006\u0004\u0002\u0677\u0675\u0003\u0002\u0002\u0002\u0677\u0678\u0003",
    "\u0002\u0002\u0002\u0678\u067b\u0003\u0002\u0002\u0002\u0679\u067b\u0005",
    "@!\u0002\u067a\u0672\u0003\u0002\u0002\u0002\u067a\u0679\u0003\u0002",
    "\u0002\u0002\u067bI\u0003\u0002\u0002\u0002\u067c\u067e\u0005\u0010",
    "\t\u0002\u067d\u067f\u0005\u001a\u000e\u0002\u067e\u067d\u0003\u0002",
    "\u0002\u0002\u067e\u067f\u0003\u0002\u0002\u0002\u067f\u0684\u0003\u0002",
    "\u0002\u0002\u0680\u0681\u0007\u01f0\u0002\u0002\u0681\u0682\u0005>",
    " \u0002\u0682\u0683\u0007\u01f1\u0002\u0002\u0683\u0685\u0003\u0002",
    "\u0002\u0002\u0684\u0680\u0003\u0002\u0002\u0002\u0684\u0685\u0003\u0002",
    "\u0002\u0002\u0685K\u0003\u0002\u0002\u0002\u0686\u068b\u0005\u0012",
    "\n\u0002\u0687\u0688\u0007\u01f0\u0002\u0002\u0688\u0689\u0005> \u0002",
    "\u0689\u068a\u0007\u01f1\u0002\u0002\u068a\u068c\u0003\u0002\u0002\u0002",
    "\u068b\u0687\u0003\u0002\u0002\u0002\u068b\u068c\u0003\u0002\u0002\u0002",
    "\u068cM\u0003\u0002\u0002\u0002\u068d\u0691\u0005\u0320\u0191\u0002",
    "\u068e\u0691\u0005\u031e\u0190\u0002\u068f\u0691\u0005P)\u0002\u0690",
    "\u068d\u0003\u0002\u0002\u0002\u0690\u068e\u0003\u0002\u0002\u0002\u0690",
    "\u068f\u0003\u0002\u0002\u0002\u0691O\u0003\u0002\u0002\u0002\u0692",
    "\u0693\u0007\u021b\u0002\u0002\u0693\u0694\u0007\u01f0\u0002\u0002\u0694",
    "\u0695\u0007)\u0002\u0002\u0695\u0697\u0005N(\u0002\u0696\u0698\u0005",
    "\u045a\u022e\u0002\u0697\u0696\u0003\u0002\u0002\u0002\u0697\u0698\u0003",
    "\u0002\u0002\u0002\u0698\u06a8\u0003\u0002\u0002\u0002\u0699\u069a\u0007",
    "\u021b\u0002\u0002\u069a\u069b\u0007\u01f0\u0002\u0002\u069b\u069c\u0005",
    "\u02e6\u0174\u0002\u069c\u06a5\u0007\u01f1\u0002\u0002\u069d\u069e\u0007",
    "\u01ee\u0002\u0002\u069e\u069f\u0007\u021b\u0002\u0002\u069f\u06a0\u0007",
    "\u01f0\u0002\u0002\u06a0\u06a1\u0005\u02e6\u0174\u0002\u06a1\u06a2\u0007",
    "\u01f1\u0002\u0002\u06a2\u06a4\u0003\u0002\u0002\u0002\u06a3\u069d\u0003",
    "\u0002\u0002\u0002\u06a4\u06a7\u0003\u0002\u0002\u0002\u06a5\u06a3\u0003",
    "\u0002\u0002\u0002\u06a5\u06a6\u0003\u0002\u0002\u0002\u06a6\u06a9\u0003",
    "\u0002\u0002\u0002\u06a7\u06a5\u0003\u0002\u0002\u0002\u06a8\u0699\u0003",
    "\u0002\u0002\u0002\u06a8\u06a9\u0003\u0002\u0002\u0002\u06a9\u06aa\u0003",
    "\u0002\u0002\u0002\u06aa\u06ac\u0007\u01f1\u0002\u0002\u06ab\u06ad\u0005",
    "\u0004\u0003\u0002\u06ac\u06ab\u0003\u0002\u0002\u0002\u06ac\u06ad\u0003",
    "\u0002\u0002\u0002\u06adQ\u0003\u0002\u0002\u0002\u06ae\u06b4\u0007",
    "\u0202\u0002\u0002\u06af\u06b0\u0005\u0010\t\u0002\u06b0\u06b1\u0007",
    "\u01ec\u0002\u0002\u06b1\u06b2\u0007\u0202\u0002\u0002\u06b2\u06b4\u0003",
    "\u0002\u0002\u0002\u06b3\u06ae\u0003\u0002\u0002\u0002\u06b3\u06af\u0003",
    "\u0002\u0002\u0002\u06b4S\u0003\u0002\u0002\u0002\u06b5\u06b6\u0005",
    "\u0006\u0004\u0002\u06b6U\u0003\u0002\u0002\u0002\u06b7\u06b8\u0005",
    "Z.\u0002\u06b8W\u0003\u0002\u0002\u0002\u06b9\u06be\u0007\u021b\u0002",
    "\u0002\u06ba\u06bb\u0007\u01ee\u0002\u0002\u06bb\u06bd\u0007\u021b\u0002",
    "\u0002\u06bc\u06ba\u0003\u0002\u0002\u0002\u06bd\u06c0\u0003\u0002\u0002",
    "\u0002\u06be\u06bc\u0003\u0002\u0002\u0002\u06be\u06bf\u0003\u0002\u0002",
    "\u0002\u06bfY\u0003\u0002\u0002\u0002\u06c0\u06be\u0003\u0002\u0002",
    "\u0002\u06c1\u06c6\u0005\u0006\u0004\u0002\u06c2\u06c3\u0007\u01ee\u0002",
    "\u0002\u06c3\u06c5\u0005\u0006\u0004\u0002\u06c4\u06c2\u0003\u0002\u0002",
    "\u0002\u06c5\u06c8\u0003\u0002\u0002\u0002\u06c6\u06c4\u0003\u0002\u0002",
    "\u0002\u06c6\u06c7\u0003\u0002\u0002\u0002\u06c7[\u0003\u0002\u0002",
    "\u0002\u06c8\u06c6\u0003\u0002\u0002\u0002\u06c9\u06e8\u0007N\u0002",
    "\u0002\u06ca\u06cb\u0007.\u0002\u0002\u06cb\u06e9\u0005`1\u0002\u06cc",
    "\u06cd\u0007\u00e8\u0002\u0002\u06cd\u06e9\u0005`1\u0002\u06ce\u06cf",
    "\u0007\u010d\u0002\u0002\u06cf\u06e9\u0005d3\u0002\u06d0\u06d1\u0007",
    "\u0112\u0002\u0002\u06d1\u06d2\u0007\u010d\u0002\u0002\u06d2\u06e9\u0005",
    "d3\u0002\u06d3\u06d4\u00073\u0002\u0002\u06d4\u06e9\u0005f4\u0002\u06d5",
    "\u06d6\u0007\u0110\u0002\u0002\u06d6\u06e9\u0005\u0082B\u0002\u06d7",
    "\u06d8\t\u0004\u0002\u0002\u06d8\u06e9\u0005h5\u0002\u06d9\u06da\u0007",
    "#\u0002\u0002\u06da\u06e9\u0005j6\u0002\u06db\u06dc\u0007\u00f5\u0002",
    "\u0002\u06dc\u06e9\u0005r:\u0002\u06dd\u06de\u0007\u00ee\u0002\u0002",
    "\u06de\u06df\u0007\u0011\u0002\u0002\u06df\u06e9\u0005x=\u0002\u06e0",
    "\u06e1\u0007\u00ee\u0002\u0002\u06e1\u06e9\u0005z>\u0002\u06e2\u06e3",
    "\u00070\u0002\u0002\u06e3\u06e9\u0005^0\u0002\u06e4\u06e5\u0007\u01e6",
    "\u0002\u0002\u06e5\u06e9\u0005\u00e4s\u0002\u06e6\u06e7\u0007\u00fc",
    "\u0002\u0002\u06e7\u06e9\u0005~@\u0002\u06e8\u06ca\u0003\u0002\u0002",
    "\u0002\u06e8\u06cc\u0003\u0002\u0002\u0002\u06e8\u06ce\u0003\u0002\u0002",
    "\u0002\u06e8\u06d0\u0003\u0002\u0002\u0002\u06e8\u06d3\u0003\u0002\u0002",
    "\u0002\u06e8\u06d5\u0003\u0002\u0002\u0002\u06e8\u06d7\u0003\u0002\u0002",
    "\u0002\u06e8\u06d9\u0003\u0002\u0002\u0002\u06e8\u06db\u0003\u0002\u0002",
    "\u0002\u06e8\u06dd\u0003\u0002\u0002\u0002\u06e8\u06e0\u0003\u0002\u0002",
    "\u0002\u06e8\u06e2\u0003\u0002\u0002\u0002\u06e8\u06e4\u0003\u0002\u0002",
    "\u0002\u06e8\u06e6\u0003\u0002\u0002\u0002\u06e9]\u0003\u0002\u0002",
    "\u0002\u06ea\u06ec\u0005\u0018\r\u0002\u06eb\u06ed\u0005\u043e\u0220",
    "\u0002\u06ec\u06eb\u0003\u0002\u0002\u0002\u06ed\u06ee\u0003\u0002\u0002",
    "\u0002\u06ee\u06ec\u0003\u0002\u0002\u0002\u06ee\u06ef\u0003\u0002\u0002",
    "\u0002\u06ef_\u0003\u0002\u0002\u0002\u06f0\u0702\u0005\u0088E\u0002",
    "\u06f1\u0702\u0005\u0096L\u0002\u06f2\u0702\u0005\u0098M\u0002\u06f3",
    "\u0702\u0005\u00b0Y\u0002\u06f4\u0702\u0005\u00a2R\u0002\u06f5\u0702",
    "\u0005\u00a8U\u0002\u06f6\u0702\u0005\u00aaV\u0002\u06f7\u0702\u0005",
    "\u00acW\u0002\u06f8\u0702\u0005\u00b2Z\u0002\u06f9\u0702\u0005\u00b8",
    "]\u0002\u06fa\u0702\u0005\u00caf\u0002\u06fb\u0702\u0005\u00ccg\u0002",
    "\u06fc\u0702\u0005b2\u0002\u06fd\u0702\u0005\u008aF\u0002\u06fe\u0702",
    "\u0005\u00e6t\u0002\u06ff\u0702\u0005\u00e8u\u0002\u0700\u0702\u0005",
    "\u00eex\u0002\u0701\u06f0\u0003\u0002\u0002\u0002\u0701\u06f1\u0003",
    "\u0002\u0002\u0002\u0701\u06f2\u0003\u0002\u0002\u0002\u0701\u06f3\u0003",
    "\u0002\u0002\u0002\u0701\u06f4\u0003\u0002\u0002\u0002\u0701\u06f5\u0003",
    "\u0002\u0002\u0002\u0701\u06f6\u0003\u0002\u0002\u0002\u0701\u06f7\u0003",
    "\u0002\u0002\u0002\u0701\u06f8\u0003\u0002\u0002\u0002\u0701\u06f9\u0003",
    "\u0002\u0002\u0002\u0701\u06fa\u0003\u0002\u0002\u0002\u0701\u06fb\u0003",
    "\u0002\u0002\u0002\u0701\u06fc\u0003\u0002\u0002\u0002\u0701\u06fd\u0003",
    "\u0002\u0002\u0002\u0701\u06fe\u0003\u0002\u0002\u0002\u0701\u06ff\u0003",
    "\u0002\u0002\u0002\u0701\u0700\u0003\u0002\u0002\u0002\u0702a\u0003",
    "\u0002\u0002\u0002\u0703\u0704\u0005\u0010\t\u0002\u0704\u0705\u0007",
    "+\u0002\u0002\u0705\u0706\u0007P\u0002\u0002\u0706\u0707\u0007\u01f0",
    "\u0002\u0002\u0707\u0708\u00054\u001b\u0002\u0708\u0709\u0007\u01f1",
    "\u0002\u0002\u0709c\u0003\u0002\u0002\u0002\u070a\u071f\u0005\u00b4",
    "[\u0002\u070b\u071f\u0005\u0088E\u0002\u070c\u071f\u0005\u0098M\u0002",
    "\u070d\u071f\u0005\u00a2R\u0002\u070e\u071f\u0005\u00b0Y\u0002\u070f",
    "\u0710\u0005\u0010\t\u0002\u0710\u0711\u0007\u0018\u0002\u0002\u0711",
    "\u0712\u0005\u03b6\u01dc\u0002\u0712\u071f\u0003\u0002\u0002\u0002\u0713",
    "\u0714\u0005\u0010\t\u0002\u0714\u0715\u0007\u00aa\u0002\u0002\u0715",
    "\u0716\u0007\u01c3\u0002\u0002\u0716\u071f\u0003\u0002\u0002\u0002\u0717",
    "\u0718\u0005\u0010\t\u0002\u0718\u0719\u0007\u00ab\u0002\u0002\u0719",
    "\u071a\u0007\u01c3\u0002\u0002\u071a\u071f\u0003\u0002\u0002\u0002\u071b",
    "\u071c\u0005\u0010\t\u0002\u071c\u071d\u00075\u0002\u0002\u071d\u071f",
    "\u0003\u0002\u0002\u0002\u071e\u070a\u0003\u0002\u0002\u0002\u071e\u070b",
    "\u0003\u0002\u0002\u0002\u071e\u070c\u0003\u0002\u0002\u0002\u071e\u070d",
    "\u0003\u0002\u0002\u0002\u071e\u070e\u0003\u0002\u0002\u0002\u071e\u070f",
    "\u0003\u0002\u0002\u0002\u071e\u0713\u0003\u0002\u0002\u0002\u071e\u0717",
    "\u0003\u0002\u0002\u0002\u071e\u071b\u0003\u0002\u0002\u0002\u071fe",
    "\u0003\u0002\u0002\u0002\u0720\u0721\u0005\u0006\u0004\u0002\u0721\u0722",
    "\u0007)\u0002\u0002\u0722\u0723\u0005\u0006\u0004\u0002\u0723\u0725",
    "\u0003\u0002\u0002\u0002\u0724\u0726\u0005\u001a\u000e\u0002\u0725\u0724",
    "\u0003\u0002\u0002\u0002\u0725\u0726\u0003\u0002\u0002\u0002\u0726\u0736",
    "\u0003\u0002\u0002\u0002\u0727\u0737\u00075\u0002\u0002\u0728\u0729",
    "\u0007\u00cc\u0002\u0002\u0729\u072a\u0005\u0006\u0004\u0002\u072a\u072b",
    "\u0007\u01f6\u0002\u0002\u072b\u072c\u0007\u0212\u0002\u0002\u072c\u0737",
    "\u0003\u0002\u0002\u0002\u072d\u072e\u0007\u013e\u0002\u0002\u072e\u072f",
    "\u0005\u0006\u0004\u0002\u072f\u0730\u0007\u01f6\u0002\u0002\u0730\u0731",
    "\u0007\u0212\u0002\u0002\u0731\u0737\u0003\u0002\u0002\u0002\u0732\u0733",
    "\u0007\u01d0\u0002\u0002\u0733\u0737\u0005> \u0002\u0734\u0735\u0007",
    "\u01d1\u0002\u0002\u0735\u0737\u0005> \u0002\u0736\u0727\u0003\u0002",
    "\u0002\u0002\u0736\u0728\u0003\u0002\u0002\u0002\u0736\u072d\u0003\u0002",
    "\u0002\u0002\u0736\u0732\u0003\u0002\u0002\u0002\u0736\u0734\u0003\u0002",
    "\u0002\u0002\u0737g\u0003\u0002\u0002\u0002\u0738\u073b\u0005n8\u0002",
    "\u0739\u073b\u0005p9\u0002\u073a\u0738\u0003\u0002\u0002\u0002\u073a",
    "\u0739\u0003\u0002\u0002\u0002\u073bi\u0003\u0002\u0002\u0002\u073c",
    "\u073d\u0005l7\u0002\u073dk\u0003\u0002\u0002\u0002\u073e\u073f\u0005",
    "\u0006\u0004\u0002\u073f\u0740\u0007\u00cc\u0002\u0002\u0740\u0741\u0007",
    "\u00ff\u0002\u0002\u0741\u0742\u0005\u01fa\u00fe\u0002\u0742m\u0003",
    "\u0002\u0002\u0002\u0743\u0744\u0005\u0006\u0004\u0002\u0744\u0745\u0007",
    "\u00cc\u0002\u0002\u0745\u0746\u0007\u00fe\u0002\u0002\u0746\u0747\u0005",
    "\u01fa\u00fe\u0002\u0747o\u0003\u0002\u0002\u0002\u0748\u0749\u0005",
    "\u0006\u0004\u0002\u0749\u074a\u0007\u00cc\u0002\u0002\u074a\u074b\u0007",
    "\u0170\u0002\u0002\u074b\u074c\u0005\u0288\u0145\u0002\u074cq\u0003",
    "\u0002\u0002\u0002\u074d\u0750\u0005t;\u0002\u074e\u0750\u0005v<\u0002",
    "\u074f\u074d\u0003\u0002\u0002\u0002\u074f\u074e\u0003\u0002\u0002\u0002",
    "\u0750s\u0003\u0002\u0002\u0002\u0751\u0752\u0005\u0006\u0004\u0002",
    "\u0752\u0753\u0007\u00cc\u0002\u0002\u0753\u0754\u0007\u00fb\u0002\u0002",
    "\u0754\u0755\u0005\u01fa\u00fe\u0002\u0755u\u0003\u0002\u0002\u0002",
    "\u0756\u0757\u0005\u0006\u0004\u0002\u0757\u0758\u0007\u00c6\u0002\u0002",
    "\u0758\u0759\u0007\u00ef\u0002\u0002\u0759\u075a\u0007\u00f1\u0002\u0002",
    "\u075a\u075b\u0005\u017e\u00c0\u0002\u075bw\u0003\u0002\u0002\u0002",
    "\u075c\u075d\u0005\u0006\u0004\u0002\u075d\u075e\u0007\u00c6\u0002\u0002",
    "\u075e\u075f\u0007\u00ef\u0002\u0002\u075f\u0760\u0007\u00f1\u0002\u0002",
    "\u0760\u0761\u0005\u017e\u00c0\u0002\u0761y\u0003\u0002\u0002\u0002",
    "\u0762\u0763\u0005|?\u0002\u0763{\u0003\u0002\u0002\u0002\u0764\u0765",
    "\u0005\u0006\u0004\u0002\u0765\u0766\u0007\u00cc\u0002\u0002\u0766\u0767",
    "\u0007\u00f0\u0002\u0002\u0767\u0768\u0005\u01fa\u00fe\u0002\u0768}",
    "\u0003\u0002\u0002\u0002\u0769\u076a\u0005\u0080A\u0002\u076a\u007f",
    "\u0003\u0002\u0002\u0002\u076b\u076c\u0005\u0006\u0004\u0002\u076c\u076d",
    "\u0007\u00cc\u0002\u0002\u076d\u076e\u0007\u0100\u0002\u0002\u076e\u076f",
    "\u0005\u01fa\u00fe\u0002\u076f\u0081\u0003\u0002\u0002\u0002\u0770\u0773",
    "\u0005\u0084C\u0002\u0771\u0773\u0005\u0086D\u0002\u0772\u0770\u0003",
    "\u0002\u0002\u0002\u0772\u0771\u0003\u0002\u0002\u0002\u0773\u0083\u0003",
    "\u0002\u0002\u0002\u0774\u0775\u0005\u0006\u0004\u0002\u0775\u0776\u0007",
    "\u00cc\u0002\u0002\u0776\u0777\u0007\u00ca\u0002\u0002\u0777\u0778\u0005",
    "\u01fa\u00fe\u0002\u0778\u0085\u0003\u0002\u0002\u0002\u0779\u077a\u0005",
    "\u0006\u0004\u0002\u077a\u077b\u0007\u00cc\u0002\u0002\u077b\u077c\u0007",
    "\u0170\u0002\u0002\u077c\u077d\u0005\u0288\u0145\u0002\u077d\u0087\u0003",
    "\u0002\u0002\u0002\u077e\u077f\u0005\u0010\t\u0002\u077f\u0780\u0007",
    "V\u0002\u0002\u0780\u0781\u0007Z\u0002\u0002\u0781\u0782\u0005\u0010",
    "\t\u0002\u0782\u0089\u0003\u0002\u0002\u0002\u0783\u0784\u0005\u0010",
    "\t\u0002\u0784\u0785\u0007\u00cc\u0002\u0002\u0785\u0786\u0007\u01df",
    "\u0002\u0002\u0786\u0788\u0007\u01de\u0002\u0002\u0787\u0789\u0005\u008c",
    "G\u0002\u0788\u0787\u0003\u0002\u0002\u0002\u0788\u0789\u0003\u0002",
    "\u0002\u0002\u0789\u078b\u0003\u0002\u0002\u0002\u078a\u078c\u0005\u008e",
    "H\u0002\u078b\u078a\u0003\u0002\u0002\u0002\u078b\u078c\u0003\u0002",
    "\u0002\u0002\u078c\u078e\u0003\u0002\u0002\u0002\u078d\u078f\u0005\u0090",
    "I\u0002\u078e\u078d\u0003\u0002\u0002\u0002\u078e\u078f\u0003\u0002",
    "\u0002\u0002\u078f\u0791\u0003\u0002\u0002\u0002\u0790\u0792\u0005\u0092",
    "J\u0002\u0791\u0790\u0003\u0002\u0002\u0002\u0791\u0792\u0003\u0002",
    "\u0002\u0002\u0792\u0794\u0003\u0002\u0002\u0002\u0793\u0795\u0005\u0094",
    "K\u0002\u0794\u0793\u0003\u0002\u0002\u0002\u0794\u0795\u0003\u0002",
    "\u0002\u0002\u0795\u008b\u0003\u0002\u0002\u0002\u0796\u0797\t\u0005",
    "\u0002\u0002\u0797\u008d\u0003\u0002\u0002\u0002\u0798\u0799\u0007\u0089",
    "\u0002\u0002\u0799\u079a\u0005\u0010\t\u0002\u079a\u008f\u0003\u0002",
    "\u0002\u0002\u079b\u079c\u0007\u001e\u0002\u0002\u079c\u079d\u0005\u008c",
    "G\u0002\u079d\u0091\u0003\u0002\u0002\u0002\u079e\u079f\u0007\u01e0",
    "\u0002\u0002\u079f\u07a0\u0005\u008cG\u0002\u07a0\u0093\u0003\u0002",
    "\u0002\u0002\u07a1\u07a2\u0007\u00cb\u0002\u0002\u07a2\u07a5\u0007\u021a",
    "\u0002\u0002\u07a3\u07a6\u0007\u008c\u0002\u0002\u07a4\u07a6\u0007\u00b3",
    "\u0002\u0002\u07a5\u07a3\u0003\u0002\u0002\u0002\u07a5\u07a4\u0003\u0002",
    "\u0002\u0002\u07a6\u0095\u0003\u0002\u0002\u0002\u07a7\u07aa\u0005\u0010",
    "\t\u0002\u07a8\u07ab\u0007\u00b5\u0002\u0002\u07a9\u07ab\u0007\u00b6",
    "\u0002\u0002\u07aa\u07a8\u0003\u0002\u0002\u0002\u07aa\u07a9\u0003\u0002",
    "\u0002\u0002\u07ab\u07ac\u0003\u0002\u0002\u0002\u07ac\u07ad\u00072",
    "\u0002\u0002\u07ad\u07ae\u0007\u01f0\u0002\u0002\u07ae\u07af\u0005$",
    "\u0013\u0002\u07af\u07b1\u0007\u01f1\u0002\u0002\u07b0\u07b2\u0005\u01f4",
    "\u00fb\u0002\u07b1\u07b0\u0003\u0002\u0002\u0002\u07b1\u07b2\u0003\u0002",
    "\u0002\u0002\u07b2\u07bd\u0003\u0002\u0002\u0002\u07b3\u07b4\u0005\u0010",
    "\t\u0002\u07b4\u07b5\u0007\u0106\u0002\u0002\u07b5\u07b6\u00072\u0002",
    "\u0002\u07b6\u07b7\u0007\u01f0\u0002\u0002\u07b7\u07b8\u0005Z.\u0002",
    "\u07b8\u07ba\u0007\u01f1\u0002\u0002\u07b9\u07bb\u0005\u01f4\u00fb\u0002",
    "\u07ba\u07b9\u0003\u0002\u0002\u0002\u07ba\u07bb\u0003\u0002\u0002\u0002",
    "\u07bb\u07bd\u0003\u0002\u0002\u0002\u07bc\u07a7\u0003\u0002\u0002\u0002",
    "\u07bc\u07b3\u0003\u0002\u0002\u0002\u07bd\u0097\u0003\u0002\u0002\u0002",
    "\u07be\u07bf\u0005\u0010\t\u0002\u07bf\u07c1\u0007O\u0002\u0002\u07c0",
    "\u07c2\u0007P\u0002\u0002\u07c1\u07c0\u0003\u0002\u0002\u0002\u07c1",
    "\u07c2\u0003\u0002\u0002\u0002\u07c2\u07c3\u0003\u0002\u0002\u0002\u07c3",
    "\u07c4\u0005\u0006\u0004\u0002\u07c4\u07c5\u0005\u0006\u0004\u0002\u07c5",
    "\u07c7\u0005\u04b0\u0259\u0002\u07c6\u07c8\u0005\u011c\u008f\u0002\u07c7",
    "\u07c6\u0003\u0002\u0002\u0002\u07c7\u07c8\u0003\u0002\u0002\u0002\u07c8",
    "\u07cb\u0003\u0002\u0002\u0002\u07c9\u07ca\u0007[\u0002\u0002\u07ca",
    "\u07cc\u0007\u0212\u0002\u0002\u07cb\u07c9\u0003\u0002\u0002\u0002\u07cb",
    "\u07cc\u0003\u0002\u0002\u0002\u07cc\u07ce\u0003\u0002\u0002\u0002\u07cd",
    "\u07cf\u0005\u00a0Q\u0002\u07ce\u07cd\u0003\u0002\u0002\u0002\u07ce",
    "\u07cf\u0003\u0002\u0002\u0002\u07cf\u07d1\u0003\u0002\u0002\u0002\u07d0",
    "\u07d2\u0005\u01f4\u00fb\u0002\u07d1\u07d0\u0003\u0002\u0002\u0002\u07d1",
    "\u07d2\u0003\u0002\u0002\u0002\u07d2\u0099\u0003\u0002\u0002\u0002\u07d3",
    "\u07d4\u0007\u0006\u0002\u0002\u07d4\u07d5\u0007\u01c5\u0002\u0002\u07d5",
    "\u009b\u0003\u0002\u0002\u0002\u07d6\u07d7\u0007\u01a0\u0002\u0002\u07d7",
    "\u07d9\u0007\u0212\u0002\u0002\u07d8\u07da\u0005\u009aN\u0002\u07d9",
    "\u07d8\u0003\u0002\u0002\u0002\u07d9\u07da\u0003\u0002\u0002\u0002\u07da",
    "\u07e4\u0003\u0002\u0002\u0002\u07db\u07dc\u0007\u00aa\u0002\u0002\u07dc",
    "\u07e4\u0007\u01a0\u0002\u0002\u07dd\u07de\u0007\u00ab\u0002\u0002\u07de",
    "\u07e1\u0007\u01a0\u0002\u0002\u07df\u07e0\u0007\u0146\u0002\u0002\u07e0",
    "\u07e2\u0007\u0212\u0002\u0002\u07e1\u07df\u0003\u0002\u0002\u0002\u07e1",
    "\u07e2\u0003\u0002\u0002\u0002\u07e2\u07e4\u0003\u0002\u0002\u0002\u07e3",
    "\u07d6\u0003\u0002\u0002\u0002\u07e3\u07db\u0003\u0002\u0002\u0002\u07e3",
    "\u07dd\u0003\u0002\u0002\u0002\u07e4\u009d\u0003\u0002\u0002\u0002\u07e5",
    "\u07e6\u0007\u013e\u0002\u0002\u07e6\u07e7\u0007\u0139\u0002\u0002\u07e7",
    "\u07e9\u0007\u0146\u0002\u0002\u07e8\u07ea\u0007P\u0002\u0002\u07e9",
    "\u07e8\u0003\u0002\u0002\u0002\u07e9\u07ea\u0003\u0002\u0002\u0002\u07ea",
    "\u07eb\u0003\u0002\u0002\u0002\u07eb\u07ec\u0005\u0006\u0004\u0002\u07ec",
    "\u07ed\u0007\u00cc\u0002\u0002\u07ed\u07f0\u0005\u01d8\u00ed\u0002\u07ee",
    "\u07ef\u0007[\u0002\u0002\u07ef\u07f1\u0007\u0212\u0002\u0002\u07f0",
    "\u07ee\u0003\u0002\u0002\u0002\u07f0\u07f1\u0003\u0002\u0002\u0002\u07f1",
    "\u009f\u0003\u0002\u0002\u0002\u07f2\u07f6\u0007Q\u0002\u0002\u07f3",
    "\u07f4\u0007S\u0002\u0002\u07f4\u07f6\u0005\u0006\u0004\u0002\u07f5",
    "\u07f2\u0003\u0002\u0002\u0002\u07f5\u07f3\u0003\u0002\u0002\u0002\u07f6",
    "\u00a1\u0003\u0002\u0002\u0002\u07f7\u07f8\u0005\u0010\t\u0002\u07f8",
    "\u07fa\u0007\u00b5\u0002\u0002\u07f9\u07fb\u0005\u0200\u0101\u0002\u07fa",
    "\u07f9\u0003\u0002\u0002\u0002\u07fa\u07fb\u0003\u0002\u0002\u0002\u07fb",
    "\u0806\u0003\u0002\u0002\u0002\u07fc\u07fe\u0005\u00a4S\u0002\u07fd",
    "\u07fc\u0003\u0002\u0002\u0002\u07fe\u07ff\u0003\u0002\u0002\u0002\u07ff",
    "\u07fd\u0003\u0002\u0002\u0002\u07ff\u0800\u0003\u0002\u0002\u0002\u0800",
    "\u0807\u0003\u0002\u0002\u0002\u0801\u0803\u0005\u00a6T\u0002\u0802",
    "\u0801\u0003\u0002\u0002\u0002\u0803\u0804\u0003\u0002\u0002\u0002\u0804",
    "\u0802\u0003\u0002\u0002\u0002\u0804\u0805\u0003\u0002\u0002\u0002\u0805",
    "\u0807\u0003\u0002\u0002\u0002\u0806\u07fd\u0003\u0002\u0002\u0002\u0806",
    "\u0802\u0003\u0002\u0002\u0002\u0807\u00a3\u0003\u0002\u0002\u0002\u0808",
    "\u080a\u0005\u001a\u000e\u0002\u0809\u080b\u0005\u00aeX\u0002\u080a",
    "\u0809\u0003\u0002\u0002\u0002\u080a\u080b\u0003\u0002\u0002\u0002\u080b",
    "\u00a5\u0003\u0002\u0002\u0002\u080c\u080e\u0005\u03f6\u01fc\u0002\u080d",
    "\u080f\u0005\u00aeX\u0002\u080e\u080d\u0003\u0002\u0002\u0002\u080e",
    "\u080f\u0003\u0002\u0002\u0002\u080f\u00a7\u0003\u0002\u0002\u0002\u0810",
    "\u0811\u0005\u0010\t\u0002\u0811\u0815\u0007\u0135\u0002\u0002\u0812",
    "\u0814\u0005\u001a\u000e\u0002\u0813\u0812\u0003\u0002\u0002\u0002\u0814",
    "\u0817\u0003\u0002\u0002\u0002\u0815\u0813\u0003\u0002\u0002\u0002\u0815",
    "\u0816\u0003\u0002\u0002\u0002\u0816\u00a9\u0003\u0002\u0002\u0002\u0817",
    "\u0815\u0003\u0002\u0002\u0002\u0818\u0819\u0005\u0010\t\u0002\u0819",
    "\u081d\u0007\u0136\u0002\u0002\u081a\u081c\u0005\u001a\u000e\u0002\u081b",
    "\u081a\u0003\u0002\u0002\u0002\u081c\u081f\u0003\u0002\u0002\u0002\u081d",
    "\u081b\u0003\u0002\u0002\u0002\u081d\u081e\u0003\u0002\u0002\u0002\u081e",
    "\u00ab\u0003\u0002\u0002\u0002\u081f\u081d\u0003\u0002\u0002\u0002\u0820",
    "\u0821\u0005\u0010\t\u0002\u0821\u0825\u0007\u0137\u0002\u0002\u0822",
    "\u0824\u0005\u001a\u000e\u0002\u0823\u0822\u0003\u0002\u0002\u0002\u0824",
    "\u0827\u0003\u0002\u0002\u0002\u0825\u0823\u0003\u0002\u0002\u0002\u0825",
    "\u0826\u0003\u0002\u0002\u0002\u0826\u00ad\u0003\u0002\u0002\u0002\u0827",
    "\u0825\u0003\u0002\u0002\u0002\u0828\u0829\u0007\u00ae\u0002\u0002\u0829",
    "\u082a\u0007\u0212\u0002\u0002\u082a\u00af\u0003\u0002\u0002\u0002\u082b",
    "\u082c\u0005\u0010\t\u0002\u082c\u082e\u0007U\u0002\u0002\u082d\u082f",
    "\u0005\u01fe\u0100\u0002\u082e\u082d\u0003\u0002\u0002\u0002\u082e\u082f",
    "\u0003\u0002\u0002\u0002\u082f\u0830\u0003\u0002\u0002\u0002\u0830\u0835",
    "\u0005\u00dep\u0002\u0831\u0832\u0007\u01ee\u0002\u0002\u0832\u0834",
    "\u0005\u00dep\u0002\u0833\u0831\u0003\u0002\u0002\u0002\u0834\u0837",
    "\u0003\u0002\u0002\u0002\u0835\u0833\u0003\u0002\u0002\u0002\u0835\u0836",
    "\u0003\u0002\u0002\u0002\u0836\u0839\u0003\u0002\u0002\u0002\u0837\u0835",
    "\u0003\u0002\u0002\u0002\u0838\u083a\u0005\u00dco\u0002\u0839\u0838",
    "\u0003\u0002\u0002\u0002\u0839\u083a\u0003\u0002\u0002\u0002\u083a\u083c",
    "\u0003\u0002\u0002\u0002\u083b\u083d\u0007\u0123\u0002\u0002\u083c\u083b",
    "\u0003\u0002\u0002\u0002\u083c\u083d\u0003\u0002\u0002\u0002\u083d\u00b1",
    "\u0003\u0002\u0002\u0002\u083e\u083f\u0005\u0010\t\u0002\u083f\u0840",
    "\u0007\u00cc\u0002\u0002\u0840\u0841\u0007\u00ce\u0002\u0002\u0841\u0842",
    "\u0005\u01d8\u00ed\u0002\u0842\u084c\u0003\u0002\u0002\u0002\u0843\u0844",
    "\u0005\u0010\t\u0002\u0844\u0845\u0007\u00cd\u0002\u0002\u0845\u0847",
    "\u0007\u00ce\u0002\u0002\u0846\u0848\u0005\u01fe\u0100\u0002\u0847\u0846",
    "\u0003\u0002\u0002\u0002\u0847\u0848\u0003\u0002\u0002\u0002\u0848\u0849",
    "\u0003\u0002\u0002\u0002\u0849\u084a\u0005\u01d8\u00ed\u0002\u084a\u084c",
    "\u0003\u0002\u0002\u0002\u084b\u083e\u0003\u0002\u0002\u0002\u084b\u0843",
    "\u0003\u0002\u0002\u0002\u084c\u00b3\u0003\u0002\u0002\u0002\u084d\u084e",
    "\u0005\u0010\t\u0002\u084e\u084f\u0007\u00cc\u0002\u0002\u084f\u0850",
    "\u0007\u00ce\u0002\u0002\u0850\u0851\u0005\u01d8\u00ed\u0002\u0851\u085b",
    "\u0003\u0002\u0002\u0002\u0852\u0853\u0005\u0010\t\u0002\u0853\u0854",
    "\u0007\u00cd\u0002\u0002\u0854\u0856\u0007\u00ce\u0002\u0002\u0855\u0857",
    "\u0005\u01fe\u0100\u0002\u0856\u0855\u0003\u0002\u0002\u0002\u0856\u0857",
    "\u0003\u0002\u0002\u0002\u0857\u0858\u0003\u0002\u0002\u0002\u0858\u0859",
    "\u0005\u01d8\u00ed\u0002\u0859\u085b\u0003\u0002\u0002\u0002\u085a\u084d",
    "\u0003\u0002\u0002\u0002\u085a\u0852\u0003\u0002\u0002\u0002\u085b\u00b5",
    "\u0003\u0002\u0002\u0002\u085c\u085d\u0007\u00cc\u0002\u0002\u085d\u085e",
    "\u0007\u00c5\u0002\u0002\u085e\u0862\u0007\u0212\u0002\u0002\u085f\u0860",
    "\u0007\u00c6\u0002\u0002\u0860\u0861\u0007\u00c9\u0002\u0002\u0861\u0863",
    "\u0005\u01d8\u00ed\u0002\u0862\u085f\u0003\u0002\u0002\u0002\u0862\u0863",
    "\u0003\u0002\u0002\u0002\u0863\u0868\u0003\u0002\u0002\u0002\u0864\u0865",
    "\u0007\u00cc\u0002\u0002\u0865\u0866\u0007\u00c9\u0002\u0002\u0866\u0868",
    "\u0005\u01d8\u00ed\u0002\u0867\u085c\u0003\u0002\u0002\u0002\u0867\u0864",
    "\u0003\u0002\u0002\u0002\u0868\u00b7\u0003\u0002\u0002\u0002\u0869\u086a",
    "\u0005\u01a8\u00d5\u0002\u086a\u086b\u0005\u00ba^\u0002\u086b\u00b9",
    "\u0003\u0002\u0002\u0002\u086c\u087a\u0005\u00bc_\u0002\u086d\u087a",
    "\u0005\u00c8e\u0002\u086e\u087a\u0005\u00ceh\u0002\u086f\u087a\u0005",
    "\u00d2j\u0002\u0870\u087a\u0005\u00b6\\\u0002\u0871\u087a\u0005\u00d0",
    "i\u0002\u0872\u087a\u0005\u00d8m\u0002\u0873\u087a\u0005\u00c0a\u0002",
    "\u0874\u087a\u0005\u00be`\u0002\u0875\u087a\u0005\u009cO\u0002\u0876",
    "\u087a\u0005\u009eP\u0002\u0877\u087a\u0005\u0098M\u0002\u0878\u087a",
    "\u0005\u0096L\u0002\u0879\u086c\u0003\u0002\u0002\u0002\u0879\u086d",
    "\u0003\u0002\u0002\u0002\u0879\u086e\u0003\u0002\u0002\u0002\u0879\u086f",
    "\u0003\u0002\u0002\u0002\u0879\u0870\u0003\u0002\u0002\u0002\u0879\u0871",
    "\u0003\u0002\u0002\u0002\u0879\u0872\u0003\u0002\u0002\u0002\u0879\u0873",
    "\u0003\u0002\u0002\u0002\u0879\u0874\u0003\u0002\u0002\u0002\u0879\u0875",
    "\u0003\u0002\u0002\u0002\u0879\u0876\u0003\u0002\u0002\u0002\u0879\u0877",
    "\u0003\u0002\u0002\u0002\u0879\u0878\u0003\u0002\u0002\u0002\u087a\u00bb",
    "\u0003\u0002\u0002\u0002\u087b\u087c\u0007\u00cc\u0002\u0002\u087c\u087d",
    "\u0007\u0098\u0002\u0002\u087d\u087e\u0005\u00dan\u0002\u087e\u00bd",
    "\u0003\u0002\u0002\u0002\u087f\u0880\u0007\b\u0002\u0002\u0880\u0885",
    "\u0007z\u0002\u0002\u0881\u0882\u0007\b\u0002\u0002\u0882\u0885\u0007",
    "{\u0002\u0002\u0883\u0885\u0005\u01c2\u00e2\u0002\u0884\u087f\u0003",
    "\u0002\u0002\u0002\u0884\u0881\u0003\u0002\u0002\u0002\u0884\u0883\u0003",
    "\u0002\u0002\u0002\u0885\u00bf\u0003\u0002\u0002\u0002\u0886\u0887\u0007",
    "\u00cc\u0002\u0002\u0887\u0888\u0007\u0142\u0002\u0002\u0888\u0889\u0007",
    "\u00ae\u0002\u0002\u0889\u088a\u0005\u00c2b\u0002\u088a\u00c1\u0003",
    "\u0002\u0002\u0002\u088b\u088c\u0007\u01f0\u0002\u0002\u088c\u088d\u0005",
    "\u00c4c\u0002\u088d\u088e\u0007\u01f1\u0002\u0002\u088e\u00c3\u0003",
    "\u0002\u0002\u0002\u088f\u0894\u0005\u00c6d\u0002\u0890\u0891\u0007",
    "\u01ee\u0002\u0002\u0891\u0893\u0005\u00c6d\u0002\u0892\u0890\u0003",
    "\u0002\u0002\u0002\u0893\u0896\u0003\u0002\u0002\u0002\u0894\u0892\u0003",
    "\u0002\u0002\u0002\u0894\u0895\u0003\u0002\u0002\u0002\u0895\u00c5\u0003",
    "\u0002\u0002\u0002\u0896\u0894\u0003\u0002\u0002\u0002\u0897\u0898\u0005",
    "\u01d0\u00e9\u0002\u0898\u0899\u0007\u01f6\u0002\u0002\u0899\u089a\u0007",
    "\u0212\u0002\u0002\u089a\u00c7\u0003\u0002\u0002\u0002\u089b\u089c\u0007",
    "\u00cc\u0002\u0002\u089c\u089d\u0007\u00ae\u0002\u0002\u089d\u089e\u0007",
    "\u0212\u0002\u0002\u089e\u00c9\u0003\u0002\u0002\u0002\u089f\u08a0\u0005",
    "\u0010\t\u0002\u08a0\u08a1\u0005\u01c4\u00e3\u0002\u08a1\u08ab\u0003",
    "\u0002\u0002\u0002\u08a2\u08a3\u0005\u0010\t\u0002\u08a3\u08a4\u0007",
    "\b\u0002\u0002\u08a4\u08a5\u0007\u0142\u0002\u0002\u08a5\u08ab\u0003",
    "\u0002\u0002\u0002\u08a6\u08a7\u0005\u0010\t\u0002\u08a7\u08a8\u0007",
    "\b\u0002\u0002\u08a8\u08a9\u0005\u001e\u0010\u0002\u08a9\u08ab\u0003",
    "\u0002\u0002\u0002\u08aa\u089f\u0003\u0002\u0002\u0002\u08aa\u08a2\u0003",
    "\u0002\u0002\u0002\u08aa\u08a6\u0003\u0002\u0002\u0002\u08ab\u00cb\u0003",
    "\u0002\u0002\u0002\u08ac\u08ad\u0005\u0010\t\u0002\u08ad\u08ae\u0007",
    "\u016e\u0002\u0002\u08ae\u08af\u0005\u001a\u000e\u0002\u08af\u08b0\u0007",
    "\u00c6\u0002\u0002\u08b0\u08b1\u0007.\u0002\u0002\u08b1\u08b2\u0005",
    "\u0010\t\u0002\u08b2\u00cd\u0003\u0002\u0002\u0002\u08b3\u08b4\u0005",
    "\u00d4k\u0002\u08b4\u00cf\u0003\u0002\u0002\u0002\u08b5\u08b6\u0007",
    "V\u0002\u0002\u08b6\u08b7\u0007Z\u0002\u0002\u08b7\u08b8\u0005\u001a",
    "\u000e\u0002\u08b8\u00d1\u0003\u0002\u0002\u0002\u08b9\u08ba\u0007\u013c",
    "\u0002\u0002\u08ba\u00d3\u0003\u0002\u0002\u0002\u08bb\u08bc\u0007\u00aa",
    "\u0002\u0002\u08bc\u08c0\u0005\u00d6l\u0002\u08bd\u08be\u0007\u00ab",
    "\u0002\u0002\u08be\u08c0\u0005\u00d6l\u0002\u08bf\u08bb\u0003\u0002",
    "\u0002\u0002\u08bf\u08bd\u0003\u0002\u0002\u0002\u08c0\u00d5\u0003\u0002",
    "\u0002\u0002\u08c1\u08c8\u0007\u00a9\u0002\u0002\u08c2\u08c4\u0007\u00ad",
    "\u0002\u0002\u08c3\u08c5\u0007\u0141\u0002\u0002\u08c4\u08c3\u0003\u0002",
    "\u0002\u0002\u08c4\u08c5\u0003\u0002\u0002\u0002\u08c5\u08c8\u0003\u0002",
    "\u0002\u0002\u08c6\u08c8\u0007\u00ac\u0002\u0002\u08c7\u08c1\u0003\u0002",
    "\u0002\u0002\u08c7\u08c2\u0003\u0002\u0002\u0002\u08c7\u08c6\u0003\u0002",
    "\u0002\u0002\u08c8\u00d7\u0003\u0002\u0002\u0002\u08c9\u08ca\u0007\u0089",
    "\u0002\u0002\u08ca\u08cb\u0007\u021a\u0002\u0002\u08cb\u08cc\u0007\u008a",
    "\u0002\u0002\u08cc\u00d9\u0003\u0002\u0002\u0002\u08cd\u08e0\u0007\u0099",
    "\u0002\u0002\u08ce\u08e0\u0007\u009a\u0002\u0002\u08cf\u08e0\u0007\u009d",
    "\u0002\u0002\u08d0\u08e0\u0007\u009e\u0002\u0002\u08d1\u08e0\u0007\u00a1",
    "\u0002\u0002\u08d2\u08e0\u0007\u00a2\u0002\u0002\u08d3\u08e0\u0007\u00a3",
    "\u0002\u0002\u08d4\u08d5\u0007\u00a5\u0002\u0002\u08d5\u08d6\u0007\u0212",
    "\u0002\u0002\u08d6\u08d7\u0007\u00a6\u0002\u0002\u08d7\u08dc\u0007\u0212",
    "\u0002\u0002\u08d8\u08d9\u0007\u00a7\u0002\u0002\u08d9\u08da\u0007\u0212",
    "\u0002\u0002\u08da\u08db\u0007\u00a8\u0002\u0002\u08db\u08dd\u0007\u0212",
    "\u0002\u0002\u08dc\u08d8\u0003\u0002\u0002\u0002\u08dc\u08dd\u0003\u0002",
    "\u0002\u0002\u08dd\u08e0\u0003\u0002\u0002\u0002\u08de\u08e0\u0005\u0006",
    "\u0004\u0002\u08df\u08cd\u0003\u0002\u0002\u0002\u08df\u08ce\u0003\u0002",
    "\u0002\u0002\u08df\u08cf\u0003\u0002\u0002\u0002\u08df\u08d0\u0003\u0002",
    "\u0002\u0002\u08df\u08d1\u0003\u0002\u0002\u0002\u08df\u08d2\u0003\u0002",
    "\u0002\u0002\u08df\u08d3\u0003\u0002\u0002\u0002\u08df\u08d4\u0003\u0002",
    "\u0002\u0002\u08df\u08de\u0003\u0002\u0002\u0002\u08e0\u00db\u0003\u0002",
    "\u0002\u0002\u08e1\u08e2\u0007W\u0002\u0002\u08e2\u08e3\u0007Y\u0002",
    "\u0002\u08e3\u00dd\u0003\u0002\u0002\u0002\u08e4\u08e5\u0007+\u0002",
    "\u0002\u08e5\u08e6\u0007\u01f0\u0002\u0002\u08e6\u08eb\u0005\u00e0q",
    "\u0002\u08e7\u08e8\u0007\u01ee\u0002\u0002\u08e8\u08ea\u0005\u00e0q",
    "\u0002\u08e9\u08e7\u0003\u0002\u0002\u0002\u08ea\u08ed\u0003\u0002\u0002",
    "\u0002\u08eb\u08e9\u0003\u0002\u0002\u0002\u08eb\u08ec\u0003\u0002\u0002",
    "\u0002\u08ec\u08ee\u0003\u0002\u0002\u0002\u08ed\u08eb\u0003\u0002\u0002",
    "\u0002\u08ee\u08ef\u0007\u01f1\u0002\u0002\u08ef\u08f3\u0003\u0002\u0002",
    "\u0002\u08f0\u08f1\u0007+\u0002\u0002\u08f1\u08f3\u0005Z.\u0002\u08f2",
    "\u08e4\u0003\u0002\u0002\u0002\u08f2\u08f0\u0003\u0002\u0002\u0002\u08f3",
    "\u00df\u0003\u0002\u0002\u0002\u08f4\u08f5\u0005\u0006\u0004\u0002\u08f5",
    "\u08f6\u0005\u00e2r\u0002\u08f6\u08f7\u0005\u00f4{\u0002\u08f7\u00e1",
    "\u0003\u0002\u0002\u0002\u08f8\u08f9\t\u0006\u0002\u0002\u08f9\u00e3",
    "\u0003\u0002\u0002\u0002\u08fa\u08fb\u0007\u00b5\u0002\u0002\u08fb\u08fc",
    "\u0007\u0168\u0002\u0002\u08fc\u0903\u0005\u0006\u0004\u0002\u08fd\u08fe",
    "\u0007\u0106\u0002\u0002\u08fe\u08ff\u0007\u0168\u0002\u0002\u08ff\u0903",
    "\u0005\u0006\u0004\u0002\u0900\u0901\u0007\u0106\u0002\u0002\u0901\u0903",
    "\u0007\u0005\u0002\u0002\u0902\u08fa\u0003\u0002\u0002\u0002\u0902\u08fd",
    "\u0003\u0002\u0002\u0002\u0902\u0900\u0003\u0002\u0002\u0002\u0903\u00e5",
    "\u0003\u0002\u0002\u0002\u0904\u0905\u0005\u0010\t\u0002\u0905\u0906",
    "\u0007U\u0002\u0002\u0906\u0907\u0007\u017d\u0002\u0002\u0907\u0908",
    "\u0005\u0006\u0004\u0002\u0908\u00e7\u0003\u0002\u0002\u0002\u0909\u090a",
    "\u0005\u0010\t\u0002\u090a\u090d\u0007\u00b5\u0002\u0002\u090b\u090e",
    "\u0005\u00ecw\u0002\u090c\u090e\u0005\u00eav\u0002\u090d\u090b\u0003",
    "\u0002\u0002\u0002\u090d\u090c\u0003\u0002\u0002\u0002\u090e\u00e9\u0003",
    "\u0002\u0002\u0002\u090f\u0910\u0007\u017d\u0002\u0002\u0910\u0911\u0005",
    "\u0006\u0004\u0002\u0911\u0912\u0005\u010a\u0086\u0002\u0912\u0914\u0005",
    "\u011a\u008e\u0002\u0913\u0915\u0005\u010c\u0087\u0002\u0914\u0913\u0003",
    "\u0002\u0002\u0002\u0914\u0915\u0003\u0002\u0002\u0002\u0915\u00eb\u0003",
    "\u0002\u0002\u0002\u0916\u0917\u0007\u017d\u0002\u0002\u0917\u0918\u0005",
    "\u0006\u0004\u0002\u0918\u0919\u0007\u01c7\u0002\u0002\u0919\u091a\u0007",
    "\u01cd\u0002\u0002\u091a\u091b\u0005\u011a\u008e\u0002\u091b\u091c\u0007",
    "\u01c8\u0002\u0002\u091c\u091d\u0005\u0010\t\u0002\u091d\u091f\u0005",
    "\u011a\u008e\u0002\u091e\u0920\u0005\u010c\u0087\u0002\u091f\u091e\u0003",
    "\u0002\u0002\u0002\u091f\u0920\u0003\u0002\u0002\u0002\u0920\u00ed\u0003",
    "\u0002\u0002\u0002\u0921\u0922\u0005\u0010\t\u0002\u0922\u0923\u0007",
    "\u00cc\u0002\u0002\u0923\u0924\u0007\u0186\u0002\u0002\u0924\u0927\u0007",
    "\u01f0\u0002\u0002\u0925\u0928\u0005\u00f4{\u0002\u0926\u0928\u0005",
    "\u033c\u019f\u0002\u0927\u0925\u0003\u0002\u0002\u0002\u0927\u0926\u0003",
    "\u0002\u0002\u0002\u0927\u0928\u0003\u0002\u0002\u0002\u0928\u0929\u0003",
    "\u0002\u0002\u0002\u0929\u092a\u0007\u01f1\u0002\u0002\u092a\u00ef\u0003",
    "\u0002\u0002\u0002\u092b\u093b\u0007J\u0002\u0002\u092c\u093b\u0005",
    "\u00f4{\u0002\u092d\u093b\u0005\u034a\u01a6\u0002\u092e\u093b\u0005",
    "\u0348\u01a5\u0002\u092f\u093b\u0005\u0346\u01a4\u0002\u0930\u093b\u0005",
    "\u036a\u01b6\u0002\u0931\u093b\u0005\u036c\u01b7\u0002\u0932\u093b\u0005",
    "\u0354\u01ab\u0002\u0933\u093b\u0005\u0356\u01ac\u0002\u0934\u093b\u0005",
    "T+\u0002\u0935\u093b\u0005\u02ea\u0176\u0002\u0936\u0937\u0007\u01f0",
    "\u0002\u0002\u0937\u0938\u0005\u03b6\u01dc\u0002\u0938\u0939\u0007\u01f1",
    "\u0002\u0002\u0939\u093b\u0003\u0002\u0002\u0002\u093a\u092b\u0003\u0002",
    "\u0002\u0002\u093a\u092c\u0003\u0002\u0002\u0002\u093a\u092d\u0003\u0002",
    "\u0002\u0002\u093a\u092e\u0003\u0002\u0002\u0002\u093a\u092f\u0003\u0002",
    "\u0002\u0002\u093a\u0930\u0003\u0002\u0002\u0002\u093a\u0931\u0003\u0002",
    "\u0002\u0002\u093a\u0932\u0003\u0002\u0002\u0002\u093a\u0933\u0003\u0002",
    "\u0002\u0002\u093a\u0934\u0003\u0002\u0002\u0002\u093a\u0935\u0003\u0002",
    "\u0002\u0002\u093a\u0936\u0003\u0002\u0002\u0002\u093b\u00f1\u0003\u0002",
    "\u0002\u0002\u093c\u093d\u0007\u018c\u0002\u0002\u093d\u093e\u0005\u04ea",
    "\u0276\u0002\u093e\u00f3\u0003\u0002\u0002\u0002\u093f\u094c\u0005\u0580",
    "\u02c1\u0002\u0940\u094c\u0007\u021a\u0002\u0002\u0941\u094c\u0007\u0212",
    "\u0002\u0002\u0942\u094c\u0007\u0214\u0002\u0002\u0943\u094c\u0007\u0215",
    "\u0002\u0002\u0944\u094c\u0007\u0216\u0002\u0002\u0945\u094c\u0007\u0217",
    "\u0002\u0002\u0946\u094c\u0007\u0213\u0002\u0002\u0947\u094c\u0005\u00fc",
    "\u007f\u0002\u0948\u094c\u0005\u00fe\u0080\u0002\u0949\u094c\u0007\u018e",
    "\u0002\u0002\u094a\u094c\u0007\u0087\u0002\u0002\u094b\u093f\u0003\u0002",
    "\u0002\u0002\u094b\u0940\u0003\u0002\u0002\u0002\u094b\u0941\u0003\u0002",
    "\u0002\u0002\u094b\u0942\u0003\u0002\u0002\u0002\u094b\u0943\u0003\u0002",
    "\u0002\u0002\u094b\u0944\u0003\u0002\u0002\u0002\u094b\u0945\u0003\u0002",
    "\u0002\u0002\u094b\u0946\u0003\u0002\u0002\u0002\u094b\u0947\u0003\u0002",
    "\u0002\u0002\u094b\u0948\u0003\u0002\u0002\u0002\u094b\u0949\u0003\u0002",
    "\u0002\u0002\u094b\u094a\u0003\u0002\u0002\u0002\u094c\u00f5\u0003\u0002",
    "\u0002\u0002\u094d\u0958\u0005\u0580\u02c1\u0002\u094e\u094f\u0007\u0201",
    "\u0002\u0002\u094f\u0958\u0005\u00f8}\u0002\u0950\u0958\u0005\u00f8",
    "}\u0002\u0951\u0958\u0007\u0212\u0002\u0002\u0952\u0958\u0007\u0213",
    "\u0002\u0002\u0953\u0958\u0005\u00fc\u007f\u0002\u0954\u0958\u0005\u00fe",
    "\u0080\u0002\u0955\u0958\u0007\u018e\u0002\u0002\u0956\u0958\u0007\u0087",
    "\u0002\u0002\u0957\u094d\u0003\u0002\u0002\u0002\u0957\u094e\u0003\u0002",
    "\u0002\u0002\u0957\u0950\u0003\u0002\u0002\u0002\u0957\u0951\u0003\u0002",
    "\u0002\u0002\u0957\u0952\u0003\u0002\u0002\u0002\u0957\u0953\u0003\u0002",
    "\u0002\u0002\u0957\u0954\u0003\u0002\u0002\u0002\u0957\u0955\u0003\u0002",
    "\u0002\u0002\u0957\u0956\u0003\u0002\u0002\u0002\u0958\u00f7\u0003\u0002",
    "\u0002\u0002\u0959\u095a\t\u0007\u0002\u0002\u095a\u00f9\u0003\u0002",
    "\u0002\u0002\u095b\u095d\u0007\u0212\u0002\u0002\u095c\u095e\u0007\u0212",
    "\u0002\u0002\u095d\u095c\u0003\u0002\u0002\u0002\u095e\u095f\u0003\u0002",
    "\u0002\u0002\u095f\u095d\u0003\u0002\u0002\u0002\u095f\u0960\u0003\u0002",
    "\u0002\u0002\u0960\u00fb\u0003\u0002\u0002\u0002\u0961\u0962\u0007\u021c",
    "\u0002\u0002\u0962\u0963\u0007\u0213\u0002\u0002\u0963\u00fd\u0003\u0002",
    "\u0002\u0002\u0964\u0965\t\b\u0002\u0002\u0965\u00ff\u0003\u0002\u0002",
    "\u0002\u0966\u096b\u0005\u0102\u0082\u0002\u0967\u0968\u0007\u01ee\u0002",
    "\u0002\u0968\u096a\u0005\u0102\u0082\u0002\u0969\u0967\u0003\u0002\u0002",
    "\u0002\u096a\u096d\u0003\u0002\u0002\u0002\u096b\u0969\u0003\u0002\u0002",
    "\u0002\u096b\u096c\u0003\u0002\u0002\u0002\u096c\u0101\u0003\u0002\u0002",
    "\u0002\u096d\u096b\u0003\u0002\u0002\u0002\u096e\u0971\u0005\u0104\u0083",
    "\u0002\u096f\u0971\u00054\u001b\u0002\u0970\u096e\u0003\u0002\u0002",
    "\u0002\u0970\u096f\u0003\u0002\u0002\u0002\u0971\u0103\u0003\u0002\u0002",
    "\u0002\u0972\u0975\u0005\u0106\u0084\u0002\u0973\u0975\u0005\u0108\u0085",
    "\u0002\u0974\u0972\u0003\u0002\u0002\u0002\u0974\u0973\u0003\u0002\u0002",
    "\u0002\u0975\u0105\u0003\u0002\u0002\u0002\u0976\u0977\u0007\u017d\u0002",
    "\u0002\u0977\u0979\u0005\u0006\u0004\u0002\u0978\u0976\u0003\u0002\u0002",
    "\u0002\u0978\u0979\u0003\u0002\u0002\u0002\u0979\u097a\u0003\u0002\u0002",
    "\u0002\u097a\u097b\u0007\u01c7\u0002\u0002\u097b\u097c\u0007\u01cd\u0002",
    "\u0002\u097c\u097d\u0005\u011a\u008e\u0002\u097d\u097e\u0007\u01c8\u0002",
    "\u0002\u097e\u097f\u0005\u0010\t\u0002\u097f\u0981\u0005\u011a\u008e",
    "\u0002\u0980\u0982\u0005\u010c\u0087\u0002\u0981\u0980\u0003\u0002\u0002",
    "\u0002\u0981\u0982\u0003\u0002\u0002\u0002\u0982\u0107\u0003\u0002\u0002",
    "\u0002\u0983\u0984\u0007\u017d\u0002\u0002\u0984\u0986\u0005\u0006\u0004",
    "\u0002\u0985\u0983\u0003\u0002\u0002\u0002\u0985\u0986\u0003\u0002\u0002",
    "\u0002\u0986\u0987\u0003\u0002\u0002\u0002\u0987\u0988\u0005\u010a\u0086",
    "\u0002\u0988\u098a\u0005\u011a\u008e\u0002\u0989\u098b\u0005\u010c\u0087",
    "\u0002\u098a\u0989\u0003\u0002\u0002\u0002\u098a\u098b\u0003\u0002\u0002",
    "\u0002\u098b\u0109\u0003\u0002\u0002\u0002\u098c\u098d\u0007\u01c6\u0002",
    "\u0002\u098d\u098e\u0007\u01cd\u0002\u0002\u098e\u010b\u0003\u0002\u0002",
    "\u0002\u098f\u0990\u0005\u010e\u0088\u0002\u0990\u0991\u0005\u0110\u0089",
    "\u0002\u0991\u0992\u0005\u0112\u008a\u0002\u0992\u09a0\u0003\u0002\u0002",
    "\u0002\u0993\u0994\u0005\u0110\u0089\u0002\u0994\u0995\u0005\u0112\u008a",
    "\u0002\u0995\u09a0\u0003\u0002\u0002\u0002\u0996\u0997\u0005\u010e\u0088",
    "\u0002\u0997\u0998\u0005\u0110\u0089\u0002\u0998\u09a0\u0003\u0002\u0002",
    "\u0002\u0999\u099a\u0005\u010e\u0088\u0002\u099a\u099b\u0005\u0112\u008a",
    "\u0002\u099b\u09a0\u0003\u0002\u0002\u0002\u099c\u09a0\u0005\u0112\u008a",
    "\u0002\u099d\u09a0\u0005\u0110\u0089\u0002\u099e\u09a0\u0005\u010e\u0088",
    "\u0002\u099f\u098f\u0003\u0002\u0002\u0002\u099f\u0993\u0003\u0002\u0002",
    "\u0002\u099f\u0996\u0003\u0002\u0002\u0002\u099f\u0999\u0003\u0002\u0002",
    "\u0002\u099f\u099c\u0003\u0002\u0002\u0002\u099f\u099d\u0003\u0002\u0002",
    "\u0002\u099f\u099e\u0003\u0002\u0002\u0002\u09a0\u010d\u0003\u0002\u0002",
    "\u0002\u09a1\u09a2\t\t\u0002\u0002\u09a2\u010f\u0003\u0002\u0002\u0002",
    "\u09a3\u09a4\t\n\u0002\u0002\u09a4\u0111\u0003\u0002\u0002\u0002\u09a5",
    "\u09a6\t\u000b\u0002\u0002\u09a6\u0113\u0003\u0002\u0002\u0002\u09a7",
    "\u09aa\u0005\u0116\u008c\u0002\u09a8\u09aa\u0005\u0118\u008d\u0002\u09a9",
    "\u09a7\u0003\u0002\u0002\u0002\u09a9\u09a8\u0003\u0002\u0002\u0002\u09aa",
    "\u0115\u0003\u0002\u0002\u0002\u09ab\u09ac\u0007\u017d\u0002\u0002\u09ac",
    "\u09ae\u0005\u0006\u0004\u0002\u09ad\u09ab\u0003\u0002\u0002\u0002\u09ad",
    "\u09ae\u0003\u0002\u0002\u0002\u09ae\u09af\u0003\u0002\u0002\u0002\u09af",
    "\u09b0\u0007\u01c6\u0002\u0002\u09b0\u09b2\u0007\u01cd\u0002\u0002\u09b1",
    "\u09b3\u0005\u010c\u0087\u0002\u09b2\u09b1\u0003\u0002\u0002\u0002\u09b2",
    "\u09b3\u0003\u0002\u0002\u0002\u09b3\u0117\u0003\u0002\u0002\u0002\u09b4",
    "\u09b5\u0007\u017d\u0002\u0002\u09b5\u09b7\u0005\u0006\u0004\u0002\u09b6",
    "\u09b4\u0003\u0002\u0002\u0002\u09b6\u09b7\u0003\u0002\u0002\u0002\u09b7",
    "\u09b8\u0003\u0002\u0002\u0002\u09b8\u09b9\u0007\u01c8\u0002\u0002\u09b9",
    "\u09ba\u0005\u0010\t\u0002\u09ba\u09bb\u0007\u01f0\u0002\u0002\u09bb",
    "\u09bc\u0005@!\u0002\u09bc\u09be\u0007\u01f1\u0002\u0002\u09bd\u09bf",
    "\u0005\u010c\u0087\u0002\u09be\u09bd\u0003\u0002\u0002\u0002\u09be\u09bf",
    "\u0003\u0002\u0002\u0002\u09bf\u0119\u0003\u0002\u0002\u0002\u09c0\u09c1",
    "\u0007\u01f0\u0002\u0002\u09c1\u09c2\u0005> \u0002\u09c2\u09c3\u0007",
    "\u01f1\u0002\u0002\u09c3\u011b\u0003\u0002\u0002\u0002\u09c4\u09c6\u0005",
    "\u011e\u0090\u0002\u09c5\u09c4\u0003\u0002\u0002\u0002\u09c6\u09c7\u0003",
    "\u0002\u0002\u0002\u09c7\u09c5\u0003\u0002\u0002\u0002\u09c7\u09c8\u0003",
    "\u0002\u0002\u0002\u09c8\u011d\u0003\u0002\u0002\u0002\u09c9\u09ce\u0005",
    "\u057a\u02be\u0002\u09ca\u09ce\u0005\u0114\u008b\u0002\u09cb\u09ce\u0005",
    "<\u001f\u0002\u09cc\u09ce\u00058\u001d\u0002\u09cd\u09c9\u0003\u0002",
    "\u0002\u0002\u09cd\u09ca\u0003\u0002\u0002\u0002\u09cd\u09cb\u0003\u0002",
    "\u0002\u0002\u09cd\u09cc\u0003\u0002\u0002\u0002\u09ce\u011f\u0003\u0002",
    "\u0002\u0002\u09cf\u09d4\u0005\u012c\u0097\u0002\u09d0\u09d4\u0005\u012e",
    "\u0098\u0002\u09d1\u09d4\u0005\u013e\u00a0\u0002\u09d2\u09d4\u0005\u0122",
    "\u0092\u0002\u09d3\u09cf\u0003\u0002\u0002\u0002\u09d3\u09d0\u0003\u0002",
    "\u0002\u0002\u09d3\u09d1\u0003\u0002\u0002\u0002\u09d3\u09d2\u0003\u0002",
    "\u0002\u0002\u09d4\u0121\u0003\u0002\u0002\u0002\u09d5\u09d6\u0007\u019c",
    "\u0002\u0002\u09d6\u09d7\u0007\u0089\u0002\u0002\u09d7\u09d8\u0005\u0140",
    "\u00a1\u0002\u09d8\u09d9\u0007?\u0002\u0002\u09d9\u09da\u0005\u031c",
    "\u018f\u0002\u09da\u09e0\u0007)\u0002\u0002\u09db\u09dc\u0007\u01f0",
    "\u0002\u0002\u09dc\u09dd\u0005\u02e6\u0174\u0002\u09dd\u09de\u0007\u01f1",
    "\u0002\u0002\u09de\u09e1\u0003\u0002\u0002\u0002\u09df\u09e1\u0005\u02e6",
    "\u0174\u0002\u09e0\u09db\u0003\u0002\u0002\u0002\u09e0\u09df\u0003\u0002",
    "\u0002\u0002\u09e1\u09e3\u0003\u0002\u0002\u0002\u09e2\u09e4\u0005\u0124",
    "\u0093\u0002\u09e3\u09e2\u0003\u0002\u0002\u0002\u09e3\u09e4\u0003\u0002",
    "\u0002\u0002\u09e4\u09e6\u0003\u0002\u0002\u0002\u09e5\u09e7\u0005\u0128",
    "\u0095\u0002\u09e6\u09e5\u0003\u0002\u0002\u0002\u09e6\u09e7\u0003\u0002",
    "\u0002\u0002\u09e7\u0123\u0003\u0002\u0002\u0002\u09e8\u09e9\u0007\u00d3",
    "\u0002\u0002\u09e9\u09ea\u0007\u019d\u0002\u0002\u09ea\u09eb\u0007\u00d4",
    "\u0002\u0002\u09eb\u09ec\u0007\u013e\u0002\u0002\u09ec\u09ed\u0007\u00cc",
    "\u0002\u0002\u09ed\u09ef\u0005\u013a\u009e\u0002\u09ee\u09f0\u0005\u03ca",
    "\u01e6\u0002\u09ef\u09ee\u0003\u0002\u0002\u0002\u09ef\u09f0\u0003\u0002",
    "\u0002\u0002\u09f0\u09f2\u0003\u0002\u0002\u0002\u09f1\u09f3\u0005\u0126",
    "\u0094\u0002\u09f2\u09f1\u0003\u0002\u0002\u0002\u09f2\u09f3\u0003\u0002",
    "\u0002\u0002\u09f3\u0125\u0003\u0002\u0002\u0002\u09f4\u09f5\u0007\u0106",
    "\u0002\u0002\u09f5\u09f6\u0005\u03ca\u01e6\u0002\u09f6\u0127\u0003\u0002",
    "\u0002\u0002\u09f7\u09f8\u0007\u00d3\u0002\u0002\u09f8\u09f9\u0007\b",
    "\u0002\u0002\u09f9\u09fa\u0007\u019d\u0002\u0002\u09fa\u09fb\u0007\u00d4",
    "\u0002\u0002\u09fb\u0a00\u0007\u001b\u0002\u0002\u09fc\u09fd\u0007\u01f0",
    "\u0002\u0002\u09fd\u09fe\u0005B\"\u0002\u09fe\u09ff\u0007\u01f1\u0002",
    "\u0002\u09ff\u0a01\u0003\u0002\u0002\u0002\u0a00\u09fc\u0003\u0002\u0002",
    "\u0002\u0a00\u0a01\u0003\u0002\u0002\u0002\u0a01\u0a02\u0003\u0002\u0002",
    "\u0002\u0a02\u0a04\u0005\u03d2\u01ea\u0002\u0a03\u0a05\u0005\u03ca\u01e6",
    "\u0002\u0a04\u0a03\u0003\u0002\u0002\u0002\u0a04\u0a05\u0003\u0002\u0002",
    "\u0002\u0a05\u0129\u0003\u0002\u0002\u0002\u0a06\u0a07\u0005\u040a\u0206",
    "\u0002\u0a07\u0a08\u0007\u0089\u0002\u0002\u0a08\u0a09\u0005\u0006\u0004",
    "\u0002\u0a09\u0a0a\u0005\u030c\u0187\u0002\u0a0a\u012b\u0003\u0002\u0002",
    "\u0002\u0a0b\u0a0c\u0007\u013e\u0002\u0002\u0a0c\u0a0d\u0005\u0140\u00a1",
    "\u0002\u0a0d\u0a0e\u0007\u00cc\u0002\u0002\u0a0e\u0a0f\u0005\u0132\u009a",
    "\u0002\u0a0f\u012d\u0003\u0002\u0002\u0002\u0a10\u0a12\u0007\u013f\u0002",
    "\u0002\u0a11\u0a13\u0007.\u0002\u0002\u0a12\u0a11\u0003\u0002\u0002",
    "\u0002\u0a12\u0a13\u0003\u0002\u0002\u0002\u0a13\u0a14\u0003\u0002\u0002",
    "\u0002\u0a14\u0a16\u0005J&\u0002\u0a15\u0a17\u0005\u0004\u0003\u0002",
    "\u0a16\u0a15\u0003\u0002\u0002\u0002\u0a16\u0a17\u0003\u0002\u0002\u0002",
    "\u0a17\u0a18\u0003\u0002\u0002\u0002\u0a18\u0a19\u0005\u0130\u0099\u0002",
    "\u0a19\u012f\u0003\u0002\u0002\u0002\u0a1a\u0a1b\u0007\u00cc\u0002\u0002",
    "\u0a1b\u0a1c\u0007\u01f0\u0002\u0002\u0a1c\u0a1d\u0005B\"\u0002\u0a1d",
    "\u0a1e\u0007\u01f1\u0002\u0002\u0a1e\u0a1f\u0007\u01f6\u0002\u0002\u0a1f",
    "\u0a20\u0005\u03d8\u01ed\u0002\u0a20\u0a21\u0007\u0016\u0002\u0002\u0a21",
    "\u0a22\u0007\u01f0\u0002\u0002\u0a22\u0a23\u0005B\"\u0002\u0a23\u0a24",
    "\u0007\u01f1\u0002\u0002\u0a24\u0a25\u0007\u010f\u0002\u0002\u0a25\u0a26",
    "\u0005\u03d8\u01ed\u0002\u0a26\u0131\u0003\u0002\u0002\u0002\u0a27\u0a28",
    "\u0007\u01f0\u0002\u0002\u0a28\u0a29\u0005B\"\u0002\u0a29\u0a2a\u0007",
    "\u01f1\u0002\u0002\u0a2a\u0a2b\u0007\u01f6\u0002\u0002\u0a2b\u0a2c\u0007",
    "\u01f0\u0002\u0002\u0a2c\u0a2d\u0005\u03b6\u01dc\u0002\u0a2d\u0a2f\u0007",
    "\u01f1\u0002\u0002\u0a2e\u0a30\u0005\u03ca\u01e6\u0002\u0a2f\u0a2e\u0003",
    "\u0002\u0002\u0002\u0a2f\u0a30\u0003\u0002\u0002\u0002\u0a30\u0a36\u0003",
    "\u0002\u0002\u0002\u0a31\u0a33\u0005\u0134\u009b\u0002\u0a32\u0a34\u0005",
    "\u03ca\u01e6\u0002\u0a33\u0a32\u0003\u0002\u0002\u0002\u0a33\u0a34\u0003",
    "\u0002\u0002\u0002\u0a34\u0a36\u0003\u0002\u0002\u0002\u0a35\u0a27\u0003",
    "\u0002\u0002\u0002\u0a35\u0a31\u0003\u0002\u0002\u0002\u0a36\u0133\u0003",
    "\u0002\u0002\u0002\u0a37\u0a3c\u0005\u0136\u009c\u0002\u0a38\u0a39\u0007",
    "\u01ee\u0002\u0002\u0a39\u0a3b\u0005\u0136\u009c\u0002\u0a3a\u0a38\u0003",
    "\u0002\u0002\u0002\u0a3b\u0a3e\u0003\u0002\u0002\u0002\u0a3c\u0a3a\u0003",
    "\u0002\u0002\u0002\u0a3c\u0a3d\u0003\u0002\u0002\u0002\u0a3d\u0135\u0003",
    "\u0002\u0002\u0002\u0a3e\u0a3c\u0003\u0002\u0002\u0002\u0a3f\u0a40\u0005",
    "D#\u0002\u0a40\u0a41\u0007\u01f6\u0002\u0002\u0a41\u0a42\u0005\u0138",
    "\u009d\u0002\u0a42\u0137\u0003\u0002\u0002\u0002\u0a43\u0a44\u0007\u01f0",
    "\u0002\u0002\u0a44\u0a45\u0005\u03b6\u01dc\u0002\u0a45\u0a46\u0007\u01f1",
    "\u0002\u0002\u0a46\u0a49\u0003\u0002\u0002\u0002\u0a47\u0a49\u0005\u02e6",
    "\u0174\u0002\u0a48\u0a43\u0003\u0002\u0002\u0002\u0a48\u0a47\u0003\u0002",
    "\u0002\u0002\u0a49\u0139\u0003\u0002\u0002\u0002\u0a4a\u0a4f\u0005\u013c",
    "\u009f\u0002\u0a4b\u0a4c\u0007\u01ee\u0002\u0002\u0a4c\u0a4e\u0005\u013c",
    "\u009f\u0002\u0a4d\u0a4b\u0003\u0002\u0002\u0002\u0a4e\u0a51\u0003\u0002",
    "\u0002\u0002\u0a4f\u0a4d\u0003\u0002\u0002\u0002\u0a4f\u0a50\u0003\u0002",
    "\u0002\u0002\u0a50\u013b\u0003\u0002\u0002\u0002\u0a51\u0a4f\u0003\u0002",
    "\u0002\u0002\u0a52\u0a53\u0005D#\u0002\u0a53\u0a54\u0007\u01f6\u0002",
    "\u0002\u0a54\u0a55\u0005\u02e6\u0174\u0002\u0a55\u013d\u0003\u0002\u0002",
    "\u0002\u0a56\u0a58\u0007\u0106\u0002\u0002\u0a57\u0a59\u0007\u0017\u0002",
    "\u0002\u0a58\u0a57\u0003\u0002\u0002\u0002\u0a58\u0a59\u0003\u0002\u0002",
    "\u0002\u0a59\u0a5a\u0003\u0002\u0002\u0002\u0a5a\u0a5c\u0005\u0140\u00a1",
    "\u0002\u0a5b\u0a5d\u0005\u03ca\u01e6\u0002\u0a5c\u0a5b\u0003\u0002\u0002",
    "\u0002\u0a5c\u0a5d\u0003\u0002\u0002\u0002\u0a5d\u013f\u0003\u0002\u0002",
    "\u0002\u0a5e\u0a60\u0007.\u0002\u0002\u0a5f\u0a5e\u0003\u0002\u0002",
    "\u0002\u0a5f\u0a60\u0003\u0002\u0002\u0002\u0a60\u0a61\u0003\u0002\u0002",
    "\u0002\u0a61\u0a63\u0005\u0010\t\u0002\u0a62\u0a64\u0005\u001a\u000e",
    "\u0002\u0a63\u0a62\u0003\u0002\u0002\u0002\u0a63\u0a64\u0003\u0002\u0002",
    "\u0002\u0a64\u0a69\u0003\u0002\u0002\u0002\u0a65\u0a67\u0007\u0018\u0002",
    "\u0002\u0a66\u0a65\u0003\u0002\u0002\u0002\u0a66\u0a67\u0003\u0002\u0002",
    "\u0002\u0a67\u0a68\u0003\u0002\u0002\u0002\u0a68\u0a6a\u0005\u0004\u0003",
    "\u0002\u0a69\u0a66\u0003\u0002\u0002\u0002\u0a69\u0a6a\u0003\u0002\u0002",
    "\u0002\u0a6a\u0a6d\u0003\u0002\u0002\u0002\u0a6b\u0a6d\u0005\u0320\u0191",
    "\u0002\u0a6c\u0a5f\u0003\u0002\u0002\u0002\u0a6c\u0a6b\u0003\u0002\u0002",
    "\u0002\u0a6d\u0141\u0003\u0002\u0002\u0002\u0a6e\u0a73\u0005\u0144\u00a3",
    "\u0002\u0a6f\u0a73\u0005\u0146\u00a4\u0002\u0a70\u0a73\u0005\u0148\u00a5",
    "\u0002\u0a71\u0a73\u0005\u014a\u00a6\u0002\u0a72\u0a6e\u0003\u0002\u0002",
    "\u0002\u0a72\u0a6f\u0003\u0002\u0002\u0002\u0a72\u0a70\u0003\u0002\u0002",
    "\u0002\u0a72\u0a71\u0003\u0002\u0002\u0002\u0a73\u0143\u0003\u0002\u0002",
    "\u0002\u0a74\u0a75\t\f\u0002\u0002\u0a75\u0a76\t\r\u0002\u0002\u0a76",
    "\u0145\u0003\u0002\u0002\u0002\u0a77\u0a79\u0007\u01a6\u0002\u0002\u0a78",
    "\u0a7a\u0007\u01a8\u0002\u0002\u0a79\u0a78\u0003\u0002\u0002\u0002\u0a79",
    "\u0a7a\u0003\u0002\u0002\u0002\u0a7a\u0147\u0003\u0002\u0002\u0002\u0a7b",
    "\u0a7d\u0007\u01a7\u0002\u0002\u0a7c\u0a7e\u0007\u01a8\u0002\u0002\u0a7d",
    "\u0a7c\u0003\u0002\u0002\u0002\u0a7d\u0a7e\u0003\u0002\u0002\u0002\u0a7e",
    "\u0149\u0003\u0002\u0002\u0002\u0a7f\u0a80\u0007\u00cc\u0002\u0002\u0a80",
    "\u0a81\u0007\u01a5\u0002\u0002\u0a81\u0a84\u0007\u0121\u0002\u0002\u0a82",
    "\u0a85\u0007\u01b1\u0002\u0002\u0a83\u0a85\u0007\u01b5\u0002\u0002\u0a84",
    "\u0a82\u0003\u0002\u0002\u0002\u0a84\u0a83\u0003\u0002\u0002\u0002\u0a85",
    "\u0a90\u0003\u0002\u0002\u0002\u0a86\u0a87\u0007\u00cc\u0002\u0002\u0a87",
    "\u0a88\u0007\u01a5\u0002\u0002\u0a88\u0a89\u0007\u01aa\u0002\u0002\u0a89",
    "\u0a8d\u0007\u01b8\u0002\u0002\u0a8a\u0a8b\u0007\u0121\u0002\u0002\u0a8b",
    "\u0a8e\u0007\u01ab\u0002\u0002\u0a8c\u0a8e\u0007\u01ac\u0002\u0002\u0a8d",
    "\u0a8a\u0003\u0002\u0002\u0002\u0a8d\u0a8c\u0003\u0002\u0002\u0002\u0a8e",
    "\u0a90\u0003\u0002\u0002\u0002\u0a8f\u0a7f\u0003\u0002\u0002\u0002\u0a8f",
    "\u0a86\u0003\u0002\u0002\u0002\u0a90\u014b\u0003\u0002\u0002\u0002\u0a91",
    "\u0ab5\u0005\u014e\u00a8\u0002\u0a92\u0ab5\u0005\u0150\u00a9\u0002\u0a93",
    "\u0ab5\u0005\u0152\u00aa\u0002\u0a94\u0ab5\u0005\u0154\u00ab\u0002\u0a95",
    "\u0ab5\u0005\u0156\u00ac\u0002\u0a96\u0ab5\u0005\u0158\u00ad\u0002\u0a97",
    "\u0ab5\u0005\u0162\u00b2\u0002\u0a98\u0ab5\u0005\u0164\u00b3\u0002\u0a99",
    "\u0ab5\u0005\u016a\u00b6\u0002\u0a9a\u0ab5\u0005\u016c\u00b7\u0002\u0a9b",
    "\u0ab5\u0005\u0192\u00ca\u0002\u0a9c\u0ab5\u0005\u0170\u00b9\u0002\u0a9d",
    "\u0ab5\u0005\u0174\u00bb\u0002\u0a9e\u0ab5\u0005\u0176\u00bc\u0002\u0a9f",
    "\u0ab5\u0005\u0178\u00bd\u0002\u0aa0\u0ab5\u0005\u017a\u00be\u0002\u0aa1",
    "\u0ab5\u0005\u017c\u00bf\u0002\u0aa2\u0ab5\u0005\u0180\u00c1\u0002\u0aa3",
    "\u0ab5\u0005\u018e\u00c8\u0002\u0aa4\u0ab5\u0005\u0182\u00c2\u0002\u0aa5",
    "\u0ab5\u0005\u018a\u00c6\u0002\u0aa6\u0ab5\u0005\u018c\u00c7\u0002\u0aa7",
    "\u0ab5\u0005\u0190\u00c9\u0002\u0aa8\u0ab5\u0005\u0196\u00cc\u0002\u0aa9",
    "\u0ab5\u0005\u0198\u00cd\u0002\u0aaa\u0ab5\u0005\u019a\u00ce\u0002\u0aab",
    "\u0ab5\u0005\u0194\u00cb\u0002\u0aac\u0ab5\u0005\u019c\u00cf\u0002\u0aad",
    "\u0ab5\u0005\u01a2\u00d2\u0002\u0aae\u0ab5\u0005\u01a4\u00d3\u0002\u0aaf",
    "\u0ab5\u0005\u01a6\u00d4\u0002\u0ab0\u0ab5\u0005\u0202\u0102\u0002\u0ab1",
    "\u0ab5\u0005\u0204\u0103\u0002\u0ab2\u0ab5\u0005\u019e\u00d0\u0002\u0ab3",
    "\u0ab5\u0005\u01a0\u00d1\u0002\u0ab4\u0a91\u0003\u0002\u0002\u0002\u0ab4",
    "\u0a92\u0003\u0002\u0002\u0002\u0ab4\u0a93\u0003\u0002\u0002\u0002\u0ab4",
    "\u0a94\u0003\u0002\u0002\u0002\u0ab4\u0a95\u0003\u0002\u0002\u0002\u0ab4",
    "\u0a96\u0003\u0002\u0002\u0002\u0ab4\u0a97\u0003\u0002\u0002\u0002\u0ab4",
    "\u0a98\u0003\u0002\u0002\u0002\u0ab4\u0a99\u0003\u0002\u0002\u0002\u0ab4",
    "\u0a9a\u0003\u0002\u0002\u0002\u0ab4\u0a9b\u0003\u0002\u0002\u0002\u0ab4",
    "\u0a9c\u0003\u0002\u0002\u0002\u0ab4\u0a9d\u0003\u0002\u0002\u0002\u0ab4",
    "\u0a9e\u0003\u0002\u0002\u0002\u0ab4\u0a9f\u0003\u0002\u0002\u0002\u0ab4",
    "\u0aa0\u0003\u0002\u0002\u0002\u0ab4\u0aa1\u0003\u0002\u0002\u0002\u0ab4",
    "\u0aa2\u0003\u0002\u0002\u0002\u0ab4\u0aa3\u0003\u0002\u0002\u0002\u0ab4",
    "\u0aa4\u0003\u0002\u0002\u0002\u0ab4\u0aa5\u0003\u0002\u0002\u0002\u0ab4",
    "\u0aa6\u0003\u0002\u0002\u0002\u0ab4\u0aa7\u0003\u0002\u0002\u0002\u0ab4",
    "\u0aa8\u0003\u0002\u0002\u0002\u0ab4\u0aa9\u0003\u0002\u0002\u0002\u0ab4",
    "\u0aaa\u0003\u0002\u0002\u0002\u0ab4\u0aab\u0003\u0002\u0002\u0002\u0ab4",
    "\u0aac\u0003\u0002\u0002\u0002\u0ab4\u0aad\u0003\u0002\u0002\u0002\u0ab4",
    "\u0aae\u0003\u0002\u0002\u0002\u0ab4\u0aaf\u0003\u0002\u0002\u0002\u0ab4",
    "\u0ab0\u0003\u0002\u0002\u0002\u0ab4\u0ab1\u0003\u0002\u0002\u0002\u0ab4",
    "\u0ab2\u0003\u0002\u0002\u0002\u0ab4\u0ab3\u0003\u0002\u0002\u0002\u0ab5",
    "\u014d\u0003\u0002\u0002\u0002\u0ab6\u0ab7\u0007L\u0002\u0002\u0ab7",
    "\u0ab9\t\u000e\u0002\u0002\u0ab8\u0aba\u0005\u0200\u0101\u0002\u0ab9",
    "\u0ab8\u0003\u0002\u0002\u0002\u0ab9\u0aba\u0003\u0002\u0002\u0002\u0aba",
    "\u0abb\u0003\u0002\u0002\u0002\u0abb\u0abd\u0005\u0006\u0004\u0002\u0abc",
    "\u0abe\u0005\u01f6\u00fc\u0002\u0abd\u0abc\u0003\u0002\u0002\u0002\u0abd",
    "\u0abe\u0003\u0002\u0002\u0002\u0abe\u0ac0\u0003\u0002\u0002\u0002\u0abf",
    "\u0ac1\u0005\u01f8\u00fd\u0002\u0ac0\u0abf\u0003\u0002\u0002\u0002\u0ac0",
    "\u0ac1\u0003\u0002\u0002\u0002\u0ac1\u0ac5\u0003\u0002\u0002\u0002\u0ac2",
    "\u0ac3\u0007\u00c6\u0002\u0002\u0ac3\u0ac4\u0007\u00ca\u0002\u0002\u0ac4",
    "\u0ac6\u0005\u01fa\u00fe\u0002\u0ac5\u0ac2\u0003\u0002\u0002\u0002\u0ac5",
    "\u0ac6\u0003\u0002\u0002\u0002\u0ac6\u014f\u0003\u0002\u0002\u0002\u0ac7",
    "\u0ac8\u0007\u013a\u0002\u0002\u0ac8\u0ac9\u0005\u0006\u0004\u0002\u0ac9",
    "\u0151\u0003\u0002\u0002\u0002\u0aca\u0acb\u0007\u013a\u0002\u0002\u0acb",
    "\u0acc\t\u0004\u0002\u0002\u0acc\u0acd\u0005\u0006\u0004\u0002\u0acd",
    "\u0153\u0003\u0002\u0002\u0002\u0ace\u0acf\u0007U\u0002\u0002\u0acf",
    "\u0ad1\t\u000e\u0002\u0002\u0ad0\u0ad2\u0005\u01fe\u0100\u0002\u0ad1",
    "\u0ad0\u0003\u0002\u0002\u0002\u0ad1\u0ad2\u0003\u0002\u0002\u0002\u0ad2",
    "\u0ad3\u0003\u0002\u0002\u0002\u0ad3\u0ad5\u0005\u0006\u0004\u0002\u0ad4",
    "\u0ad6\u0005\u01f4\u00fb\u0002\u0ad5\u0ad4\u0003\u0002\u0002\u0002\u0ad5",
    "\u0ad6\u0003\u0002\u0002\u0002\u0ad6\u0155\u0003\u0002\u0002\u0002\u0ad7",
    "\u0ad9\u0007L\u0002\u0002\u0ad8\u0ada\u0007\u011c\u0002\u0002\u0ad9",
    "\u0ad8\u0003\u0002\u0002\u0002\u0ad9\u0ada\u0003\u0002\u0002\u0002\u0ada",
    "\u0adc\u0003\u0002\u0002\u0002\u0adb\u0add\u0007\u01b9\u0002\u0002\u0adc",
    "\u0adb\u0003\u0002\u0002\u0002\u0adc\u0add\u0003\u0002\u0002\u0002\u0add",
    "\u0ade\u0003\u0002\u0002\u0002\u0ade\u0adf\u0007\u0110\u0002\u0002\u0adf",
    "\u0ae0\u0007\u01ba\u0002\u0002\u0ae0\u0ae8\u0005\u015a\u00ae\u0002\u0ae1",
    "\u0ae2\u0007\u01bc\u0002\u0002\u0ae2\u0ae3\u0007Z\u0002\u0002\u0ae3",
    "\u0ae4\u0005\u015c\u00af\u0002\u0ae4\u0ae5\u0007\u01bd\u0002\u0002\u0ae5",
    "\u0ae6\u0007\u0013\u0002\u0002\u0ae6\u0ae7\u0005\u015e\u00b0\u0002\u0ae7",
    "\u0ae9\u0003\u0002\u0002\u0002\u0ae8\u0ae1\u0003\u0002\u0002\u0002\u0ae8",
    "\u0ae9\u0003\u0002\u0002\u0002\u0ae9\u0aea\u0003\u0002\u0002\u0002\u0aea",
    "\u0aeb\u0007?\u0002\u0002\u0aeb\u0aec\u0005\u0160\u00b1\u0002\u0aec",
    "\u0157\u0003\u0002\u0002\u0002\u0aed\u0aef\u0007U\u0002\u0002\u0aee",
    "\u0af0\u0007\u01b9\u0002\u0002\u0aef\u0aee\u0003\u0002\u0002\u0002\u0aef",
    "\u0af0\u0003\u0002\u0002\u0002\u0af0\u0af1\u0003\u0002\u0002\u0002\u0af1",
    "\u0af2\u0007\u0110\u0002\u0002\u0af2\u0af4\u0007\u01ba\u0002\u0002\u0af3",
    "\u0af5\u0005\u01fe\u0100\u0002\u0af4\u0af3\u0003\u0002\u0002\u0002\u0af4",
    "\u0af5\u0003\u0002\u0002\u0002\u0af5\u0af6\u0003\u0002\u0002\u0002\u0af6",
    "\u0af7\u0005\u015a\u00ae\u0002\u0af7\u0159\u0003\u0002\u0002\u0002\u0af8",
    "\u0af9\u0005\u0006\u0004\u0002\u0af9\u015b\u0003\u0002\u0002\u0002\u0afa",
    "\u0afb\u0005\u0006\u0004\u0002\u0afb\u015d\u0003\u0002\u0002\u0002\u0afc",
    "\u0afd\u0007\u0212\u0002\u0002\u0afd\u015f\u0003\u0002\u0002\u0002\u0afe",
    "\u0aff\u0007\u0212\u0002\u0002\u0aff\u0161\u0003\u0002\u0002\u0002\u0b00",
    "\u0b01\u0005\u0576\u02bc\u0002\u0b01\u0163\u0003\u0002\u0002\u0002\u0b02",
    "\u0b03\u0005\u0574\u02bb\u0002\u0b03\u0165\u0003\u0002\u0002\u0002\u0b04",
    "\u0b05\u0007\t\u0002\u0002\u0b05\u0b07\u0005\u0010\t\u0002\u0b06\u0b08",
    "\u0005\u01f2\u00fa\u0002\u0b07\u0b06\u0003\u0002\u0002\u0002\u0b07\u0b08",
    "\u0003\u0002\u0002\u0002\u0b08\u0b0a\u0003\u0002\u0002\u0002\u0b09\u0b0b",
    "\u0005\u01d2\u00ea\u0002\u0b0a\u0b09\u0003\u0002\u0002\u0002\u0b0a\u0b0b",
    "\u0003\u0002\u0002\u0002\u0b0b\u0b0e\u0003\u0002\u0002\u0002\u0b0c\u0b0e",
    "\u0005\u057c\u02bf\u0002\u0b0d\u0b04\u0003\u0002\u0002\u0002\u0b0d\u0b0c",
    "\u0003\u0002\u0002\u0002\u0b0e\u0167\u0003\u0002\u0002\u0002\u0b0f\u0b10",
    "\u0005\u0578\u02bd\u0002\u0b10\u0169\u0003\u0002\u0002\u0002\u0b11\u0b13",
    "\u0007L\u0002\u0002\u0b12\u0b14\u0007\u00b9\u0002\u0002\u0b13\u0b12",
    "\u0003\u0002\u0002\u0002\u0b13\u0b14\u0003\u0002\u0002\u0002\u0b14\u0b16",
    "\u0003\u0002\u0002\u0002\u0b15\u0b17\u0007M\u0002\u0002\u0b16\u0b15",
    "\u0003\u0002\u0002\u0002\u0b16\u0b17\u0003\u0002\u0002\u0002\u0b17\u0b18",
    "\u0003\u0002\u0002\u0002\u0b18\u0b1a\u0007\u00e8\u0002\u0002\u0b19\u0b1b",
    "\u0005\u0200\u0101\u0002\u0b1a\u0b19\u0003\u0002\u0002\u0002\u0b1a\u0b1b",
    "\u0003\u0002\u0002\u0002\u0b1b\u0b1c\u0003\u0002\u0002\u0002\u0b1c\u0b4a",
    "\u0005\u0010\t\u0002\u0b1d\u0b1e\u0007\t\u0002\u0002\u0b1e\u0b20\u0005",
    "\u0010\t\u0002\u0b1f\u0b21\u0005\u01f2\u00fa\u0002\u0b20\u0b1f\u0003",
    "\u0002\u0002\u0002\u0b20\u0b21\u0003\u0002\u0002\u0002\u0b21\u0b23\u0003",
    "\u0002\u0002\u0002\u0b22\u0b24\u0005\u01d2\u00ea\u0002\u0b23\u0b22\u0003",
    "\u0002\u0002\u0002\u0b23\u0b24\u0003\u0002\u0002\u0002\u0b24\u0b4b\u0003",
    "\u0002\u0002\u0002\u0b25\u0b26\u0007\u01f0\u0002\u0002\u0b26\u0b27\u0005",
    "$\u0013\u0002\u0b27\u0b28\u0007\u01f1\u0002\u0002\u0b28\u0b2a\u0003",
    "\u0002\u0002\u0002\u0b29\u0b25\u0003\u0002\u0002\u0002\u0b29\u0b2a\u0003",
    "\u0002\u0002\u0002\u0b2a\u0b2c\u0003\u0002\u0002\u0002\u0b2b\u0b2d\u0005",
    "\u01b4\u00db\u0002\u0b2c\u0b2b\u0003\u0002\u0002\u0002\u0b2c\u0b2d\u0003",
    "\u0002\u0002\u0002\u0b2d\u0b2f\u0003\u0002\u0002\u0002\u0b2e\u0b30\u0005",
    "\u01b6\u00dc\u0002\u0b2f\u0b2e\u0003\u0002\u0002\u0002\u0b2f\u0b30\u0003",
    "\u0002\u0002\u0002\u0b30\u0b32\u0003\u0002\u0002\u0002\u0b31\u0b33\u0005",
    "\u01c2\u00e2\u0002\u0b32\u0b31\u0003\u0002\u0002\u0002\u0b32\u0b33\u0003",
    "\u0002\u0002\u0002\u0b33\u0b35\u0003\u0002\u0002\u0002\u0b34\u0b36\u0005",
    "\u01c4\u00e3\u0002\u0b35\u0b34\u0003\u0002\u0002\u0002\u0b35\u0b36\u0003",
    "\u0002\u0002\u0002\u0b36\u0b38\u0003\u0002\u0002\u0002\u0b37\u0b39\u0005",
    "\u01b2\u00da\u0002\u0b38\u0b37\u0003\u0002\u0002\u0002\u0b38\u0b39\u0003",
    "\u0002\u0002\u0002\u0b39\u0b3b\u0003\u0002\u0002\u0002\u0b3a\u0b3c\u0005",
    "\u01ea\u00f6\u0002\u0b3b\u0b3a\u0003\u0002\u0002\u0002\u0b3b\u0b3c\u0003",
    "\u0002\u0002\u0002\u0b3c\u0b3e\u0003\u0002\u0002\u0002\u0b3d\u0b3f\u0005",
    "\u01f2\u00fa\u0002\u0b3e\u0b3d\u0003\u0002\u0002\u0002\u0b3e\u0b3f\u0003",
    "\u0002\u0002\u0002\u0b3f\u0b41\u0003\u0002\u0002\u0002\u0b40\u0b42\u0005",
    "\u01d2\u00ea\u0002\u0b41\u0b40\u0003\u0002\u0002\u0002\u0b41\u0b42\u0003",
    "\u0002\u0002\u0002\u0b42\u0b45\u0003\u0002\u0002\u0002\u0b43\u0b44\u0007",
    "\u0018\u0002\u0002\u0b44\u0b46\u0005\u01aa\u00d6\u0002\u0b45\u0b43\u0003",
    "\u0002\u0002\u0002\u0b45\u0b46\u0003\u0002\u0002\u0002\u0b46\u0b48\u0003",
    "\u0002\u0002\u0002\u0b47\u0b49\u0005\u01d4\u00eb\u0002\u0b48\u0b47\u0003",
    "\u0002\u0002\u0002\u0b48\u0b49\u0003\u0002\u0002\u0002\u0b49\u0b4b\u0003",
    "\u0002\u0002\u0002\u0b4a\u0b1d\u0003\u0002\u0002\u0002\u0b4a\u0b29\u0003",
    "\u0002\u0002\u0002\u0b4b\u016b\u0003\u0002\u0002\u0002\u0b4c\u0b4e\u0007",
    "L\u0002\u0002\u0b4d\u0b4f\u0007\u00b9\u0002\u0002\u0b4e\u0b4d\u0003",
    "\u0002\u0002\u0002\u0b4e\u0b4f\u0003\u0002\u0002\u0002\u0b4f\u0b51\u0003",
    "\u0002\u0002\u0002\u0b50\u0b52\u0007M\u0002\u0002\u0b51\u0b50\u0003",
    "\u0002\u0002\u0002\u0b51\u0b52\u0003\u0002\u0002\u0002\u0b52\u0b53\u0003",
    "\u0002\u0002\u0002\u0b53\u0b55\u0007\u00ea\u0002\u0002\u0b54\u0b56\u0005",
    "\u0200\u0101\u0002\u0b55\u0b54\u0003\u0002\u0002\u0002\u0b55\u0b56\u0003",
    "\u0002\u0002\u0002\u0b56\u0b57\u0003\u0002\u0002\u0002\u0b57\u0b85\u0005",
    "\u0010\t\u0002\u0b58\u0b59\u0007\t\u0002\u0002\u0b59\u0b5b\u0005\u0010",
    "\t\u0002\u0b5a\u0b5c\u0005\u01f2\u00fa\u0002\u0b5b\u0b5a\u0003\u0002",
    "\u0002\u0002\u0b5b\u0b5c\u0003\u0002\u0002\u0002\u0b5c\u0b5e\u0003\u0002",
    "\u0002\u0002\u0b5d\u0b5f\u0005\u01d2\u00ea\u0002\u0b5e\u0b5d\u0003\u0002",
    "\u0002\u0002\u0b5e\u0b5f\u0003\u0002\u0002\u0002\u0b5f\u0b86\u0003\u0002",
    "\u0002\u0002\u0b60\u0b61\u0007\u01f0\u0002\u0002\u0b61\u0b62\u0005$",
    "\u0013\u0002\u0b62\u0b63\u0007\u01f1\u0002\u0002\u0b63\u0b65\u0003\u0002",
    "\u0002\u0002\u0b64\u0b60\u0003\u0002\u0002\u0002\u0b64\u0b65\u0003\u0002",
    "\u0002\u0002\u0b65\u0b67\u0003\u0002\u0002\u0002\u0b66\u0b68\u0005\u01b4",
    "\u00db\u0002\u0b67\u0b66\u0003\u0002\u0002\u0002\u0b67\u0b68\u0003\u0002",
    "\u0002\u0002\u0b68\u0b6a\u0003\u0002\u0002\u0002\u0b69\u0b6b\u0005\u01b6",
    "\u00dc\u0002\u0b6a\u0b69\u0003\u0002\u0002\u0002\u0b6a\u0b6b\u0003\u0002",
    "\u0002\u0002\u0b6b\u0b6d\u0003\u0002\u0002\u0002\u0b6c\u0b6e\u0005\u01c2",
    "\u00e2\u0002\u0b6d\u0b6c\u0003\u0002\u0002\u0002\u0b6d\u0b6e\u0003\u0002",
    "\u0002\u0002\u0b6e\u0b70\u0003\u0002\u0002\u0002\u0b6f\u0b71\u0005\u01c4",
    "\u00e3\u0002\u0b70\u0b6f\u0003\u0002\u0002\u0002\u0b70\u0b71\u0003\u0002",
    "\u0002\u0002\u0b71\u0b73\u0003\u0002\u0002\u0002\u0b72\u0b74\u0005\u01b2",
    "\u00da\u0002\u0b73\u0b72\u0003\u0002\u0002\u0002\u0b73\u0b74\u0003\u0002",
    "\u0002\u0002\u0b74\u0b76\u0003\u0002\u0002\u0002\u0b75\u0b77\u0005\u01ea",
    "\u00f6\u0002\u0b76\u0b75\u0003\u0002\u0002\u0002\u0b76\u0b77\u0003\u0002",
    "\u0002\u0002\u0b77\u0b79\u0003\u0002\u0002\u0002\u0b78\u0b7a\u0005\u01f2",
    "\u00fa\u0002\u0b79\u0b78\u0003\u0002\u0002\u0002\u0b79\u0b7a\u0003\u0002",
    "\u0002\u0002\u0b7a\u0b7c\u0003\u0002\u0002\u0002\u0b7b\u0b7d\u0005\u01d2",
    "\u00ea\u0002\u0b7c\u0b7b\u0003\u0002\u0002\u0002\u0b7c\u0b7d\u0003\u0002",
    "\u0002\u0002\u0b7d\u0b80\u0003\u0002\u0002\u0002\u0b7e\u0b7f\u0007\u0018",
    "\u0002\u0002\u0b7f\u0b81\u0005\u01aa\u00d6\u0002\u0b80\u0b7e\u0003\u0002",
    "\u0002\u0002\u0b80\u0b81\u0003\u0002\u0002\u0002\u0b81\u0b83\u0003\u0002",
    "\u0002\u0002\u0b82\u0b84\u0005\u01d4\u00eb\u0002\u0b83\u0b82\u0003\u0002",
    "\u0002\u0002\u0b83\u0b84\u0003\u0002\u0002\u0002\u0b84\u0b86\u0003\u0002",
    "\u0002\u0002\u0b85\u0b58\u0003\u0002\u0002\u0002\u0b85\u0b64\u0003\u0002",
    "\u0002\u0002\u0b86\u016d\u0003\u0002\u0002\u0002\u0b87\u0b88\u0007\u01f0",
    "\u0002\u0002\u0b88\u0b89\u0007\u0212\u0002\u0002\u0b89\u0b8a\u0007\u01f1",
    "\u0002\u0002\u0b8a\u016f\u0003\u0002\u0002\u0002\u0b8b\u0b8c\u0007L",
    "\u0002\u0002\u0b8c\u0b8e\u0007#\u0002\u0002\u0b8d\u0b8f\u0005\u0200",
    "\u0101\u0002\u0b8e\u0b8d\u0003\u0002\u0002\u0002\u0b8e\u0b8f\u0003\u0002",
    "\u0002\u0002\u0b8f\u0b90\u0003\u0002\u0002\u0002\u0b90\u0b91\u0005\u0010",
    "\t\u0002\u0b91\u0b92\u0007\u0018\u0002\u0002\u0b92\u0b95\u0005\u016e",
    "\u00b8\u0002\u0b93\u0b94\u0007\u00ff\u0002\u0002\u0b94\u0b96\u0005\u01fa",
    "\u00fe\u0002\u0b95\u0b93\u0003\u0002\u0002\u0002\u0b95\u0b96\u0003\u0002",
    "\u0002\u0002\u0b96\u0171\u0003\u0002\u0002\u0002\u0b97\u0b98\u0007\u01f0",
    "\u0002\u0002\u0b98\u0b99\u0007\u0212\u0002\u0002\u0b99\u0b9a\u0007\u01f1",
    "\u0002\u0002\u0b9a\u0173\u0003\u0002\u0002\u0002\u0b9b\u0b9d\u0007\u00ee",
    "\u0002\u0002\u0b9c\u0b9e\u0005\u0200\u0101\u0002\u0b9d\u0b9c\u0003\u0002",
    "\u0002\u0002\u0b9d\u0b9e\u0003\u0002\u0002\u0002\u0b9e\u0b9f\u0003\u0002",
    "\u0002\u0002\u0b9f\u0ba0\u0005\u0010\t\u0002\u0ba0\u0ba1\u0007\u0018",
    "\u0002\u0002\u0ba1\u0ba4\u0005\u0172\u00ba\u0002\u0ba2\u0ba3\u0007\u00f0",
    "\u0002\u0002\u0ba3\u0ba5\u0005\u01fa\u00fe\u0002\u0ba4\u0ba2\u0003\u0002",
    "\u0002\u0002\u0ba4\u0ba5\u0003\u0002\u0002\u0002\u0ba5\u0175\u0003\u0002",
    "\u0002\u0002\u0ba6\u0ba7\u0007U\u0002\u0002\u0ba7\u0ba9\u0007\u00ee",
    "\u0002\u0002\u0ba8\u0baa\u0005\u01fe\u0100\u0002\u0ba9\u0ba8\u0003\u0002",
    "\u0002\u0002\u0ba9\u0baa\u0003\u0002\u0002\u0002\u0baa\u0bab\u0003\u0002",
    "\u0002\u0002\u0bab\u0bac\u0005\u0010\t\u0002\u0bac\u0177\u0003\u0002",
    "\u0002\u0002\u0bad\u0bae\u0007L\u0002\u0002\u0bae\u0bb0\u0007\u00ec",
    "\u0002\u0002\u0baf\u0bb1\u0005\u0200\u0101\u0002\u0bb0\u0baf\u0003\u0002",
    "\u0002\u0002\u0bb0\u0bb1\u0003\u0002\u0002\u0002\u0bb1\u0bb2\u0003\u0002",
    "\u0002\u0002\u0bb2\u0bb4\u0005\u0006\u0004\u0002\u0bb3\u0bb5\u0005\u01f6",
    "\u00fc\u0002\u0bb4\u0bb3\u0003\u0002\u0002\u0002\u0bb4\u0bb5\u0003\u0002",
    "\u0002\u0002\u0bb5\u0bb9\u0003\u0002\u0002\u0002\u0bb6\u0bb7\u0007\u00c6",
    "\u0002\u0002\u0bb7\u0bb8\u0007\u00ca\u0002\u0002\u0bb8\u0bba\u0005\u01fa",
    "\u00fe\u0002\u0bb9\u0bb6\u0003\u0002\u0002\u0002\u0bb9\u0bba\u0003\u0002",
    "\u0002\u0002\u0bba\u0179\u0003\u0002\u0002\u0002\u0bbb\u0bbc\u0007\u013a",
    "\u0002\u0002\u0bbc\u0bbd\u0007\u00ec\u0002\u0002\u0bbd\u0bbe\u0005\u0006",
    "\u0004\u0002\u0bbe\u017b\u0003\u0002\u0002\u0002\u0bbf\u0bc0\u0007U",
    "\u0002\u0002\u0bc0\u0bc2\u0007\u00ec\u0002\u0002\u0bc1\u0bc3\u0005\u01fe",
    "\u0100\u0002\u0bc2\u0bc1\u0003\u0002\u0002\u0002\u0bc2\u0bc3\u0003\u0002",
    "\u0002\u0002\u0bc3\u0bc4\u0003\u0002\u0002\u0002\u0bc4\u0bc6\u0005\u0006",
    "\u0004\u0002\u0bc5\u0bc7\u0005\u01f4\u00fb\u0002\u0bc6\u0bc5\u0003\u0002",
    "\u0002\u0002\u0bc6\u0bc7\u0003\u0002\u0002\u0002\u0bc7\u017d\u0003\u0002",
    "\u0002\u0002\u0bc8\u0bcf\u0007\u000b\u0002\u0002\u0bc9\u0bcf\u0007\u0005",
    "\u0002\u0002\u0bca\u0bcb\u0007\u00b3\u0002\u0002\u0bcb\u0bcc\u0007\u01f0",
    "\u0002\u0002\u0bcc\u0bcd\u0007\u021a\u0002\u0002\u0bcd\u0bcf\u0007\u01f1",
    "\u0002\u0002\u0bce\u0bc8\u0003\u0002\u0002\u0002\u0bce\u0bc9\u0003\u0002",
    "\u0002\u0002\u0bce\u0bca\u0003\u0002\u0002\u0002\u0bcf\u017f\u0003\u0002",
    "\u0002\u0002\u0bd0\u0bd2\u0007\u00f5\u0002\u0002\u0bd1\u0bd3\u0005\u0200",
    "\u0101\u0002\u0bd2\u0bd1\u0003\u0002\u0002\u0002\u0bd2\u0bd3\u0003\u0002",
    "\u0002\u0002\u0bd3\u0bd4\u0003\u0002\u0002\u0002\u0bd4\u0bd9\u0005\u0010",
    "\t\u0002\u0bd5\u0bd6\u0007\u00c6\u0002\u0002\u0bd6\u0bd7\u0007\u00ef",
    "\u0002\u0002\u0bd7\u0bd8\u0007\u00f1\u0002\u0002\u0bd8\u0bda\u0005\u017e",
    "\u00c0\u0002\u0bd9\u0bd5\u0003\u0002\u0002\u0002\u0bd9\u0bda\u0003\u0002",
    "\u0002\u0002\u0bda\u0bdd\u0003\u0002\u0002\u0002\u0bdb\u0bdc\u0007\u00fb",
    "\u0002\u0002\u0bdc\u0bde\u0005\u01fa\u00fe\u0002\u0bdd\u0bdb\u0003\u0002",
    "\u0002\u0002\u0bdd\u0bde\u0003\u0002\u0002\u0002\u0bde\u0181\u0003\u0002",
    "\u0002\u0002\u0bdf\u0be0\u0007\u00b5\u0002\u0002\u0be0\u0be1\u0007\u00ee",
    "\u0002\u0002\u0be1\u0be3\u0007\u0011\u0002\u0002\u0be2\u0be4\u0005\u0200",
    "\u0101\u0002\u0be3\u0be2\u0003\u0002\u0002\u0002\u0be3\u0be4\u0003\u0002",
    "\u0002\u0002\u0be4\u0be5\u0003\u0002\u0002\u0002\u0be5\u0be6\u0005\u0010",
    "\t\u0002\u0be6\u0be7\u0007\u00c6\u0002\u0002\u0be7\u0be8\u0007\u00ef",
    "\u0002\u0002\u0be8\u0be9\u0007\u00f1\u0002\u0002\u0be9\u0beb\u0005\u017e",
    "\u00c0\u0002\u0bea\u0bec\u0005\u0184\u00c3\u0002\u0beb\u0bea\u0003\u0002",
    "\u0002\u0002\u0beb\u0bec\u0003\u0002\u0002\u0002\u0bec\u0183\u0003\u0002",
    "\u0002\u0002\u0bed\u0bee\u0007\u0089\u0002\u0002\u0bee\u0bef\u0007\u0011",
    "\u0002\u0002\u0bef\u0bf0\u0005\u0010\t\u0002\u0bf0\u0185\u0003\u0002",
    "\u0002\u0002\u0bf1\u0bf2\t\u000f\u0002\u0002\u0bf2\u0187\u0003\u0002",
    "\u0002\u0002\u0bf3\u0bf4\u0007\u00c6\u0002\u0002\u0bf4\u0bf5\u0007\u00f8",
    "\u0002\u0002\u0bf5\u0bf6\u0007\u0212\u0002\u0002\u0bf6\u0189\u0003\u0002",
    "\u0002\u0002\u0bf7\u0bf8\u0007\u00b5\u0002\u0002\u0bf8\u0bf9\u0007\u00ee",
    "\u0002\u0002\u0bf9\u0bfd\u0005\u0010\t\u0002\u0bfa\u0bfb\u0007\u00c6",
    "\u0002\u0002\u0bfb\u0bfc\u0007\u017d\u0002\u0002\u0bfc\u0bfe\u0005\u0186",
    "\u00c4\u0002\u0bfd\u0bfa\u0003\u0002\u0002\u0002\u0bfd\u0bfe\u0003\u0002",
    "\u0002\u0002\u0bfe\u0c00\u0003\u0002\u0002\u0002\u0bff\u0c01\u0005\u0188",
    "\u00c5\u0002\u0c00\u0bff\u0003\u0002\u0002\u0002\u0c00\u0c01\u0003\u0002",
    "\u0002\u0002\u0c01\u0c03\u0003\u0002\u0002\u0002\u0c02\u0c04\u0005\u0184",
    "\u00c3\u0002\u0c03\u0c02\u0003\u0002\u0002\u0002\u0c03\u0c04\u0003\u0002",
    "\u0002\u0002\u0c04\u018b\u0003\u0002\u0002\u0002\u0c05\u0c06\u0007U",
    "\u0002\u0002\u0c06\u0c08\u0007\u00f5\u0002\u0002\u0c07\u0c09\u0005\u01fe",
    "\u0100\u0002\u0c08\u0c07\u0003\u0002\u0002\u0002\u0c08\u0c09\u0003\u0002",
    "\u0002\u0002\u0c09\u0c0a\u0003\u0002\u0002\u0002\u0c0a\u0c0b\u0005\u0010",
    "\t\u0002\u0c0b\u018d\u0003\u0002\u0002\u0002\u0c0c\u0c0d\u0007\u013a",
    "\u0002\u0002\u0c0d\u0c0e\u0007\u00f5\u0002\u0002\u0c0e\u0c0f\u0005\u0006",
    "\u0004\u0002\u0c0f\u018f\u0003\u0002\u0002\u0002\u0c10\u0c11\u0007\u00f7",
    "\u0002\u0002\u0c11\u0c13\u0007\u00ee\u0002\u0002\u0c12\u0c14\u0007\u0011",
    "\u0002\u0002\u0c13\u0c12\u0003\u0002\u0002\u0002\u0c13\u0c14\u0003\u0002",
    "\u0002\u0002\u0c14\u0c16\u0003\u0002\u0002\u0002\u0c15\u0c17\u0005\u01fe",
    "\u0100\u0002\u0c16\u0c15\u0003\u0002\u0002\u0002\u0c16\u0c17\u0003\u0002",
    "\u0002\u0002\u0c17\u0c18\u0003\u0002\u0002\u0002\u0c18\u0c19\u0005\u0010",
    "\t\u0002\u0c19\u0191\u0003\u0002\u0002\u0002\u0c1a\u0c1b\u0007L\u0002",
    "\u0002\u0c1b\u0c1d\t\u0004\u0002\u0002\u0c1c\u0c1e\u0005\u0200\u0101",
    "\u0002\u0c1d\u0c1c\u0003\u0002\u0002\u0002\u0c1d\u0c1e\u0003\u0002\u0002",
    "\u0002\u0c1e\u0c1f\u0003\u0002\u0002\u0002\u0c1f\u0c25\u0005\u0006\u0004",
    "\u0002\u0c20\u0c22\u0007\u00c6\u0002\u0002\u0c21\u0c20\u0003\u0002\u0002",
    "\u0002\u0c21\u0c22\u0003\u0002\u0002\u0002\u0c22\u0c23\u0003\u0002\u0002",
    "\u0002\u0c23\u0c24\u0007\u00fe\u0002\u0002\u0c24\u0c26\u0005\u01fa\u00fe",
    "\u0002\u0c25\u0c21\u0003\u0002\u0002\u0002\u0c25\u0c26\u0003\u0002\u0002",
    "\u0002\u0c26\u0193\u0003\u0002\u0002\u0002\u0c27\u0c28\u0007U\u0002",
    "\u0002\u0c28\u0c2a\t\u0004\u0002\u0002\u0c29\u0c2b\u0005\u01fe\u0100",
    "\u0002\u0c2a\u0c29\u0003\u0002\u0002\u0002\u0c2a\u0c2b\u0003\u0002\u0002",
    "\u0002\u0c2b\u0c2c\u0003\u0002\u0002\u0002\u0c2c\u0c2e\u0005\u0006\u0004",
    "\u0002\u0c2d\u0c2f\u0005\u01f4\u00fb\u0002\u0c2e\u0c2d\u0003\u0002\u0002",
    "\u0002\u0c2e\u0c2f\u0003\u0002\u0002\u0002\u0c2f\u0195\u0003\u0002\u0002",
    "\u0002\u0c30\u0c31\u0007U\u0002\u0002\u0c31\u0c33\u0007.\u0002\u0002",
    "\u0c32\u0c34\u0005\u01fe\u0100\u0002\u0c33\u0c32\u0003\u0002\u0002\u0002",
    "\u0c33\u0c34\u0003\u0002\u0002\u0002\u0c34\u0c35\u0003\u0002\u0002\u0002",
    "\u0c35\u0c37\u0005\u0010\t\u0002\u0c36\u0c38\u0007\u0123\u0002\u0002",
    "\u0c37\u0c36\u0003\u0002\u0002\u0002\u0c37\u0c38\u0003\u0002\u0002\u0002",
    "\u0c38\u0197\u0003\u0002\u0002\u0002\u0c39\u0c3a\u0007U\u0002\u0002",
    "\u0c3a\u0c3c\u0007\u00e8\u0002\u0002\u0c3b\u0c3d\u0005\u01fe\u0100\u0002",
    "\u0c3c\u0c3b\u0003\u0002\u0002\u0002\u0c3c\u0c3d\u0003\u0002\u0002\u0002",
    "\u0c3d\u0c3e\u0003\u0002\u0002\u0002\u0c3e\u0c3f\u0005\u0010\t\u0002",
    "\u0c3f\u0199\u0003\u0002\u0002\u0002\u0c40\u0c41\u0007U\u0002\u0002",
    "\u0c41\u0c43\u0007\u00ea\u0002\u0002\u0c42\u0c44\u0005\u01fe\u0100\u0002",
    "\u0c43\u0c42\u0003\u0002\u0002\u0002\u0c43\u0c44\u0003\u0002\u0002\u0002",
    "\u0c44\u0c45\u0003\u0002\u0002\u0002\u0c45\u0c46\u0005\u0010\t\u0002",
    "\u0c46\u019b\u0003\u0002\u0002\u0002\u0c47\u0c48\u0007U\u0002\u0002",
    "\u0c48\u0c4a\u0007#\u0002\u0002\u0c49\u0c4b\u0005\u01fe\u0100\u0002",
    "\u0c4a\u0c49\u0003\u0002\u0002\u0002\u0c4a\u0c4b\u0003\u0002\u0002\u0002",
    "\u0c4b\u0c4c\u0003\u0002\u0002\u0002\u0c4c\u0c4d\u0005\u0010\t\u0002",
    "\u0c4d\u019d\u0003\u0002\u0002\u0002\u0c4e\u0c4f\u0007L\u0002\u0002",
    "\u0c4f\u0c51\u0007\u00fc\u0002\u0002\u0c50\u0c52\u0005\u0200\u0101\u0002",
    "\u0c51\u0c50\u0003\u0002\u0002\u0002\u0c51\u0c52\u0003\u0002\u0002\u0002",
    "\u0c52\u0c53\u0003\u0002\u0002\u0002\u0c53\u0c59\u0005\u0006\u0004\u0002",
    "\u0c54\u0c56\u0007\u00c6\u0002\u0002\u0c55\u0c54\u0003\u0002\u0002\u0002",
    "\u0c55\u0c56\u0003\u0002\u0002\u0002\u0c56\u0c57\u0003\u0002\u0002\u0002",
    "\u0c57\u0c58\u0007\u0100\u0002\u0002\u0c58\u0c5a\u0005\u01fa\u00fe\u0002",
    "\u0c59\u0c55\u0003\u0002\u0002\u0002\u0c59\u0c5a\u0003\u0002\u0002\u0002",
    "\u0c5a\u0c5d\u0003\u0002\u0002\u0002\u0c5b\u0c5c\u0007?\u0002\u0002",
    "\u0c5c\u0c5e\u0005\u0370\u01b9\u0002\u0c5d\u0c5b\u0003\u0002\u0002\u0002",
    "\u0c5d\u0c5e\u0003\u0002\u0002\u0002\u0c5e\u019f\u0003\u0002\u0002\u0002",
    "\u0c5f\u0c60\u0007U\u0002\u0002\u0c60\u0c62\u0007\u00fc\u0002\u0002",
    "\u0c61\u0c63\u0005\u01fe\u0100\u0002\u0c62\u0c61\u0003\u0002\u0002\u0002",
    "\u0c62\u0c63\u0003\u0002\u0002\u0002\u0c63\u0c64\u0003\u0002\u0002\u0002",
    "\u0c64\u0c65\u0005\u0006\u0004\u0002\u0c65\u01a1\u0003\u0002\u0002\u0002",
    "\u0c66\u0c67\u0007U\u0002\u0002\u0c67\u0c69\u0007\u0194\u0002\u0002",
    "\u0c68\u0c6a\u0005\u01fe\u0100\u0002\u0c69\u0c68\u0003\u0002\u0002\u0002",
    "\u0c69\u0c6a\u0003\u0002\u0002\u0002\u0c6a\u0c6b\u0003\u0002\u0002\u0002",
    "\u0c6b\u0c6c\u0005\u0006\u0004\u0002\u0c6c\u01a3\u0003\u0002\u0002\u0002",
    "\u0c6d\u0c6e\u0007\u0165\u0002\u0002\u0c6e\u0c6f\u0007\u0194\u0002\u0002",
    "\u0c6f\u0c70\u0005\u0006\u0004\u0002\u0c70\u01a5\u0003\u0002\u0002\u0002",
    "\u0c71\u0c72\u0007\u0165\u0002\u0002\u0c72\u0c73\u0007.\u0002\u0002",
    "\u0c73\u0c79\u0005\u01a8\u00d5\u0002\u0c74\u0c75\u00072\u0002\u0002",
    "\u0c75\u0c76\u0007\u01f0\u0002\u0002\u0c76\u0c77\u0005> \u0002\u0c77",
    "\u0c78\u0007\u01f1\u0002\u0002\u0c78\u0c7a\u0003\u0002\u0002\u0002\u0c79",
    "\u0c74\u0003\u0002\u0002\u0002\u0c79\u0c7a\u0003\u0002\u0002\u0002\u0c7a",
    "\u0c7c\u0003\u0002\u0002\u0002\u0c7b\u0c7d\u0007\u019f\u0002\u0002\u0c7c",
    "\u0c7b\u0003\u0002\u0002\u0002\u0c7c\u0c7d\u0003\u0002\u0002\u0002\u0c7d",
    "\u0c7f\u0003\u0002\u0002\u0002\u0c7e\u0c80\u0007\u0123\u0002\u0002\u0c7f",
    "\u0c7e\u0003\u0002\u0002\u0002\u0c7f\u0c80\u0003\u0002\u0002\u0002\u0c80",
    "\u01a7\u0003\u0002\u0002\u0002\u0c81\u0c83\u0005\u0010\t\u0002\u0c82",
    "\u0c84\u0005\u001a\u000e\u0002\u0c83\u0c82\u0003\u0002\u0002\u0002\u0c83",
    "\u0c84\u0003\u0002\u0002\u0002\u0c84\u01a9\u0003\u0002\u0002\u0002\u0c85",
    "\u0c86\u0007\u01f0\u0002\u0002\u0c86\u0c87\u0005\u03e6\u01f4\u0002\u0c87",
    "\u0c88\u0007\u01f1\u0002\u0002\u0c88\u0c8b\u0003\u0002\u0002\u0002\u0c89",
    "\u0c8b\u0005\u03e6\u01f4\u0002\u0c8a\u0c85\u0003\u0002\u0002\u0002\u0c8a",
    "\u0c89\u0003\u0002\u0002\u0002\u0c8b\u01ab\u0003\u0002\u0002\u0002\u0c8c",
    "\u0c8d\u0007J\u0002\u0002\u0c8d\u0c8e\u0007\u01af\u0002\u0002\u0c8e",
    "\u0c8f\u0007\u0018\u0002\u0002\u0c8f\u0c90\u0007\u0212\u0002\u0002\u0c90",
    "\u01ad\u0003\u0002\u0002\u0002\u0c91\u0c92\u0007\u008b\u0002\u0002\u0c92",
    "\u0c93\u0007\u008d\u0002\u0002\u0c93\u0c94\u0007\u00c5\u0002\u0002\u0c94",
    "\u0c98\u0007\u0212\u0002\u0002\u0c95\u0c96\u0007\u00c6\u0002\u0002\u0c96",
    "\u0c97\u0007\u00c9\u0002\u0002\u0c97\u0c99\u0005\u01d8\u00ed\u0002\u0c98",
    "\u0c95\u0003\u0002\u0002\u0002\u0c98\u0c99\u0003\u0002\u0002\u0002\u0c99",
    "\u01af\u0003\u0002\u0002\u0002\u0c9a\u0c9b\u0007\u008b\u0002\u0002\u0c9b",
    "\u0c9c\u0007\u008d\u0002\u0002\u0c9c\u0c9e\u0007\u008e\u0002\u0002\u0c9d",
    "\u0c9f\u0005\u01dc\u00ef\u0002\u0c9e\u0c9d\u0003\u0002\u0002\u0002\u0c9e",
    "\u0c9f\u0003\u0002\u0002\u0002\u0c9f\u0ca1\u0003\u0002\u0002\u0002\u0ca0",
    "\u0ca2\u0005\u01de\u00f0\u0002\u0ca1\u0ca0\u0003\u0002\u0002\u0002\u0ca1",
    "\u0ca2\u0003\u0002\u0002\u0002\u0ca2\u0ca4\u0003\u0002\u0002\u0002\u0ca3",
    "\u0ca5\u0005\u01e0\u00f1\u0002\u0ca4\u0ca3\u0003\u0002\u0002\u0002\u0ca4",
    "\u0ca5\u0003\u0002\u0002\u0002\u0ca5\u0ca7\u0003\u0002\u0002\u0002\u0ca6",
    "\u0ca8\u0005\u01e2\u00f2\u0002\u0ca7\u0ca6\u0003\u0002\u0002\u0002\u0ca7",
    "\u0ca8\u0003\u0002\u0002\u0002\u0ca8\u0caa\u0003\u0002\u0002\u0002\u0ca9",
    "\u0cab\u0005\u01ac\u00d7\u0002\u0caa\u0ca9\u0003\u0002\u0002\u0002\u0caa",
    "\u0cab\u0003\u0002\u0002\u0002\u0cab\u01b1\u0003\u0002\u0002\u0002\u0cac",
    "\u0caf\u0005\u01b0\u00d9\u0002\u0cad\u0caf\u0005\u01ae\u00d8\u0002\u0cae",
    "\u0cac\u0003\u0002\u0002\u0002\u0cae\u0cad\u0003\u0002\u0002\u0002\u0caf",
    "\u01b3\u0003\u0002\u0002\u0002\u0cb0\u0cb1\u0007[\u0002\u0002\u0cb1",
    "\u0cb2\u0007\u0212\u0002\u0002\u0cb2\u01b5\u0003\u0002\u0002\u0002\u0cb3",
    "\u0cb4\u0007x\u0002\u0002\u0cb4\u0cb5\u0007\u0013\u0002\u0002\u0cb5",
    "\u0cb6\u0007\u01f0\u0002\u0002\u0cb6\u0cb7\u0005$\u0013\u0002\u0cb7",
    "\u0cb8\u0007\u01f1\u0002\u0002\u0cb8\u0cbb\u0003\u0002\u0002\u0002\u0cb9",
    "\u0cbb\u0005\u03f0\u01f9\u0002\u0cba\u0cb3\u0003\u0002\u0002\u0002\u0cba",
    "\u0cb9\u0003\u0002\u0002\u0002\u0cbb\u01b7\u0003\u0002\u0002\u0002\u0cbc",
    "\u0cbd\u0007y\u0002\u0002\u0cbd\u0cbe\u0007\u0013\u0002\u0002\u0cbe",
    "\u0cc3\u0005\u01ba\u00de\u0002\u0cbf\u0cc0\u0007\u01ee\u0002\u0002\u0cc0",
    "\u0cc2\u0005\u01ba\u00de\u0002\u0cc1\u0cbf\u0003\u0002\u0002\u0002\u0cc2",
    "\u0cc5\u0003\u0002\u0002\u0002\u0cc3\u0cc1\u0003\u0002\u0002\u0002\u0cc3",
    "\u0cc4\u0003\u0002\u0002\u0002\u0cc4\u01b9\u0003\u0002\u0002\u0002\u0cc5",
    "\u0cc3\u0003\u0002\u0002\u0002\u0cc6\u0cc9\u0005\u01bc\u00df\u0002\u0cc7",
    "\u0cc9\u0005\u01c0\u00e1\u0002\u0cc8\u0cc6\u0003\u0002\u0002\u0002\u0cc8",
    "\u0cc7\u0003\u0002\u0002\u0002\u0cc9\u01bb\u0003\u0002\u0002\u0002\u0cca",
    "\u0ccb\u0007\u0124\u0002\u0002\u0ccb\u0ccc\u0007\u01f0\u0002\u0002\u0ccc",
    "\u0ccd\u0005@!\u0002\u0ccd\u0cce\u0007\u01f1\u0002\u0002\u0cce\u0ccf",
    "\u0007\u01f0\u0002\u0002\u0ccf\u0cd0\u0005\u01be\u00e0\u0002\u0cd0\u0cd1",
    "\u0007\u01f1\u0002\u0002\u0cd1\u01bd\u0003\u0002\u0002\u0002\u0cd2\u0cd7",
    "\u0005\u00f4{\u0002\u0cd3\u0cd4\u0007\u01ee\u0002\u0002\u0cd4\u0cd6",
    "\u0005\u00f4{\u0002\u0cd5\u0cd3\u0003\u0002\u0002\u0002\u0cd6\u0cd9",
    "\u0003\u0002\u0002\u0002\u0cd7\u0cd5\u0003\u0002\u0002\u0002\u0cd7\u0cd8",
    "\u0003\u0002\u0002\u0002\u0cd8\u01bf\u0003\u0002\u0002\u0002\u0cd9\u0cd7",
    "\u0003\u0002\u0002\u0002\u0cda\u0cdb\u0007\u0015\u0002\u0002\u0cdb\u0cdc",
    "\u0007\u01f0\u0002\u0002\u0cdc\u0cdd\u0005@!\u0002\u0cdd\u0cde\u0007",
    "\u01f1\u0002\u0002\u0cde\u0cdf\u0007\u00b0\u0002\u0002\u0cdf\u0ce0\u0007",
    "\u021a\u0002\u0002\u0ce0\u01c1\u0003\u0002\u0002\u0002\u0ce1\u0ce2\u0007",
    "z\u0002\u0002\u0ce2\u0ce3\u0007\u0013\u0002\u0002\u0ce3\u0ce4\u0007",
    "\u01f0\u0002\u0002\u0ce4\u0ce5\u0005> \u0002\u0ce5\u0cec\u0007\u01f1",
    "\u0002\u0002\u0ce6\u0ce7\u0007{\u0002\u0002\u0ce7\u0ce8\u0007\u0013",
    "\u0002\u0002\u0ce8\u0ce9\u0007\u01f0\u0002\u0002\u0ce9\u0cea\u0005(",
    "\u0015\u0002\u0cea\u0ceb\u0007\u01f1\u0002\u0002\u0ceb\u0ced\u0003\u0002",
    "\u0002\u0002\u0cec\u0ce6\u0003\u0002\u0002\u0002\u0cec\u0ced\u0003\u0002",
    "\u0002\u0002\u0ced\u0cee\u0003\u0002\u0002\u0002\u0cee\u0cef\u0007\u0089",
    "\u0002\u0002\u0cef\u0cf0\u0007\u021a\u0002\u0002\u0cf0\u0cf1\u0007\u008a",
    "\u0002\u0002\u0cf1\u01c3\u0003\u0002\u0002\u0002\u0cf2\u0cf3\u0007\u0142",
    "\u0002\u0002\u0cf3\u0cf4\u0007\u0013\u0002\u0002\u0cf4\u0cf5\u0007\u01f0",
    "\u0002\u0002\u0cf5\u0cf6\u0005> \u0002\u0cf6\u0cf7\u0007\u01f1\u0002",
    "\u0002\u0cf7\u0cf8\u0007)\u0002\u0002\u0cf8\u0cf9\u0007\u01f0\u0002",
    "\u0002\u0cf9\u0cfa\u0005\u01c6\u00e4\u0002\u0cfa\u0cfc\u0007\u01f1\u0002",
    "\u0002\u0cfb\u0cfd\u0005\u001e\u0010\u0002\u0cfc\u0cfb\u0003\u0002\u0002",
    "\u0002\u0cfc\u0cfd\u0003\u0002\u0002\u0002\u0cfd\u01c5\u0003\u0002\u0002",
    "\u0002\u0cfe\u0d01\u0005\u01cc\u00e7\u0002\u0cff\u0d01\u0005\u01c8\u00e5",
    "\u0002\u0d00\u0cfe\u0003\u0002\u0002\u0002\u0d00\u0cff\u0003\u0002\u0002",
    "\u0002\u0d01\u01c7\u0003\u0002\u0002\u0002\u0d02\u0d07\u0005\u01ca\u00e6",
    "\u0002\u0d03\u0d04\u0007\u01ee\u0002\u0002\u0d04\u0d06\u0005\u01ca\u00e6",
    "\u0002\u0d05\u0d03\u0003\u0002\u0002\u0002\u0d06\u0d09\u0003\u0002\u0002",
    "\u0002\u0d07\u0d05\u0003\u0002\u0002\u0002\u0d07\u0d08\u0003\u0002\u0002",
    "\u0002\u0d08\u01c9\u0003\u0002\u0002\u0002\u0d09\u0d07\u0003\u0002\u0002",
    "\u0002\u0d0a\u0d0b\u0007\u01f0\u0002\u0002\u0d0b\u0d0c\u0005\u01cc\u00e7",
    "\u0002\u0d0c\u0d0d\u0007\u01f1\u0002\u0002\u0d0d\u01cb\u0003\u0002\u0002",
    "\u0002\u0d0e\u0d13\u0005\u01ce\u00e8\u0002\u0d0f\u0d10\u0007\u01ee\u0002",
    "\u0002\u0d10\u0d12\u0005\u01ce\u00e8\u0002\u0d11\u0d0f\u0003\u0002\u0002",
    "\u0002\u0d12\u0d15\u0003\u0002\u0002\u0002\u0d13\u0d11\u0003\u0002\u0002",
    "\u0002\u0d13\u0d14\u0003\u0002\u0002\u0002\u0d14\u01cd\u0003\u0002\u0002",
    "\u0002\u0d15\u0d13\u0003\u0002\u0002\u0002\u0d16\u0d17\u0005\u00f4{",
    "\u0002\u0d17\u01cf\u0003\u0002\u0002\u0002\u0d18\u0d1b\u0005\u01ce\u00e8",
    "\u0002\u0d19\u0d1b\u0005\u01ca\u00e6\u0002\u0d1a\u0d18\u0003\u0002\u0002",
    "\u0002\u0d1a\u0d19\u0003\u0002\u0002\u0002\u0d1b\u01d1\u0003\u0002\u0002",
    "\u0002\u0d1c\u0d1d\u0007\u00ce\u0002\u0002\u0d1d\u0d1e\u0005\u01d8\u00ed",
    "\u0002\u0d1e\u01d3\u0003\u0002\u0002\u0002\u0d1f\u0d20\u0007\u01de\u0002",
    "\u0002\u0d20\u0d21\u0007\u01df\u0002\u0002\u0d21\u0d22\u0007\u0089\u0002",
    "\u0002\u0d22\u0d24\u0005\u0010\t\u0002\u0d23\u0d25\u0007\u001e\u0002",
    "\u0002\u0d24\u0d23\u0003\u0002\u0002\u0002\u0d24\u0d25\u0003\u0002\u0002",
    "\u0002\u0d25\u0d27\u0003\u0002\u0002\u0002\u0d26\u0d28\u0005\u01d6\u00ec",
    "\u0002\u0d27\u0d26\u0003\u0002\u0002\u0002\u0d27\u0d28\u0003\u0002\u0002",
    "\u0002\u0d28\u01d5\u0003\u0002\u0002\u0002\u0d29\u0d2a\u0007\u01ce\u0002",
    "\u0002\u0d2a\u0d2b\u0007\u01e0\u0002\u0002\u0d2b\u0d2c\u0007\u00cb\u0002",
    "\u0002\u0d2c\u0d2f\u0007\u021a\u0002\u0002\u0d2d\u0d30\u0007\u008c\u0002",
    "\u0002\u0d2e\u0d30\u0007\u00b3\u0002\u0002\u0d2f\u0d2d\u0003\u0002\u0002",
    "\u0002\u0d2f\u0d2e\u0003\u0002\u0002\u0002\u0d30\u01d7\u0003\u0002\u0002",
    "\u0002\u0d31\u0d32\u0007\u01f0\u0002\u0002\u0d32\u0d33\u0005\u01da\u00ee",
    "\u0002\u0d33\u0d34\u0007\u01f1\u0002\u0002\u0d34\u01d9\u0003\u0002\u0002",
    "\u0002\u0d35\u0d3a\u0005\f\u0007\u0002\u0d36\u0d37\u0007\u01ee\u0002",
    "\u0002\u0d37\u0d39\u0005\f\u0007\u0002\u0d38\u0d36\u0003\u0002\u0002",
    "\u0002\u0d39\u0d3c\u0003\u0002\u0002\u0002\u0d3a\u0d38\u0003\u0002\u0002",
    "\u0002\u0d3a\u0d3b\u0003\u0002\u0002\u0002\u0d3b\u0d46\u0003\u0002\u0002",
    "\u0002\u0d3c\u0d3a\u0003\u0002\u0002\u0002\u0d3d\u0d42\u0005\u000e\b",
    "\u0002\u0d3e\u0d3f\u0007\u01ee\u0002\u0002\u0d3f\u0d41\u0005\u000e\b",
    "\u0002\u0d40\u0d3e\u0003\u0002\u0002\u0002\u0d41\u0d44\u0003\u0002\u0002",
    "\u0002\u0d42\u0d40\u0003\u0002\u0002\u0002\u0d42\u0d43\u0003\u0002\u0002",
    "\u0002\u0d43\u0d46\u0003\u0002\u0002\u0002\u0d44\u0d42\u0003\u0002\u0002",
    "\u0002\u0d45\u0d35\u0003\u0002\u0002\u0002\u0d45\u0d3d\u0003\u0002\u0002",
    "\u0002\u0d46\u01db\u0003\u0002\u0002\u0002\u0d47\u0d48\u0007\u008f\u0002",
    "\u0002\u0d48\u0d49\u0007\u0090\u0002\u0002\u0d49\u0d4a\u0007\u0013\u0002",
    "\u0002\u0d4a\u0d4e\u0007\u0212\u0002\u0002\u0d4b\u0d4c\u0007\u0091\u0002",
    "\u0002\u0d4c\u0d4d\u0007\u0013\u0002\u0002\u0d4d\u0d4f\u0007\u0212\u0002",
    "\u0002\u0d4e\u0d4b\u0003\u0002\u0002\u0002\u0d4e\u0d4f\u0003\u0002\u0002",
    "\u0002\u0d4f\u01dd\u0003\u0002\u0002\u0002\u0d50\u0d51\u0007\u0092\u0002",
    "\u0002\u0d51\u0d52\u0007\u0093\u0002\u0002\u0d52\u0d53\u0007\u0090\u0002",
    "\u0002\u0d53\u0d54\u0007\u0013\u0002\u0002\u0d54\u0d55\u0007\u0212\u0002",
    "\u0002\u0d55\u01df\u0003\u0002\u0002\u0002\u0d56\u0d57\u0007u\u0002",
    "\u0002\u0d57\u0d58\u0007\u0094\u0002\u0002\u0d58\u0d59\u0007\u0090\u0002",
    "\u0002\u0d59\u0d5a\u0007\u0013\u0002\u0002\u0d5a\u0d5b\u0007\u0212\u0002",
    "\u0002\u0d5b\u01e1\u0003\u0002\u0002\u0002\u0d5c\u0d5d\u0007\u0096\u0002",
    "\u0002\u0d5d\u0d5e\u0007\u0090\u0002\u0002\u0d5e\u0d5f\u0007\u0013\u0002",
    "\u0002\u0d5f\u0d60\u0007\u0212\u0002\u0002\u0d60\u01e3\u0003\u0002\u0002",
    "\u0002\u0d61\u0d62\u0007\u00c6\u0002\u0002\u0d62\u0d63\u0007\u01d2\u0002",
    "\u0002\u0d63\u0d64\u0007\u0177\u0002\u0002\u0d64\u0d65\u0007\u021a\u0002",
    "\u0002\u0d65\u0d66\u0007\u01d9\u0002\u0002\u0d66\u0d6c\u0007\u021a\u0002",
    "\u0002\u0d67\u0d6a\u0007\u00ab\u0002\u0002\u0d68\u0d6a\u0007\u00aa\u0002",
    "\u0002\u0d69\u0d67\u0003\u0002\u0002\u0002\u0d69\u0d68\u0003\u0002\u0002",
    "\u0002\u0d6a\u0d6b\u0003\u0002\u0002\u0002\u0d6b\u0d6d\u0007\u0005\u0002",
    "\u0002\u0d6c\u0d69\u0003\u0002\u0002\u0002\u0d6c\u0d6d\u0003\u0002\u0002",
    "\u0002\u0d6d\u01e5\u0003\u0002\u0002\u0002\u0d6e\u0d6f\u0007\u00c6\u0002",
    "\u0002\u0d6f\u0d70\u0007\u01d7\u0002\u0002\u0d70\u0d71\u0007\u0177\u0002",
    "\u0002\u0d71\u0d72\u0007\u021a\u0002\u0002\u0d72\u0d73\u0007\u01d8\u0002",
    "\u0002\u0d73\u0d74\u0007\u0177\u0002\u0002\u0d74\u0d75\u0007\u021a\u0002",
    "\u0002\u0d75\u0d76\u0007\u01d9\u0002\u0002\u0d76\u0d77\u0007\u021a\u0002",
    "\u0002\u0d77\u01e7\u0003\u0002\u0002\u0002\u0d78\u0d79\u0007\u00c6\u0002",
    "\u0002\u0d79\u0d7a\u0007\u01d6\u0002\u0002\u0d7a\u0d7d\u0005\u0006\u0004",
    "\u0002\u0d7b\u0d7c\u0007\u01d9\u0002\u0002\u0d7c\u0d7e\u0007\u021a\u0002",
    "\u0002\u0d7d\u0d7b\u0003\u0002\u0002\u0002\u0d7d\u0d7e\u0003\u0002\u0002",
    "\u0002\u0d7e\u01e9\u0003\u0002\u0002\u0002\u0d7f\u0d80\u0007\u0097\u0002",
    "\u0002\u0d80\u0d81\u0007\u0018\u0002\u0002\u0d81\u0dc2\u0007\u0099\u0002",
    "\u0002\u0d82\u0d83\u0007\u0097\u0002\u0002\u0d83\u0d84\u0007\u0018\u0002",
    "\u0002\u0d84\u0dc2\u0007\u009a\u0002\u0002\u0d85\u0d86\u0007\u0097\u0002",
    "\u0002\u0d86\u0d87\u0007\u0018\u0002\u0002\u0d87\u0dc2\u0007\u009b\u0002",
    "\u0002\u0d88\u0d89\u0007\u0097\u0002\u0002\u0d89\u0d8a\u0007\u0018\u0002",
    "\u0002\u0d8a\u0dc2\u0007\u009c\u0002\u0002\u0d8b\u0d8c\u0007\u0097\u0002",
    "\u0002\u0d8c\u0d8d\u0007\u0018\u0002\u0002\u0d8d\u0dc2\u0007\u009d\u0002",
    "\u0002\u0d8e\u0d8f\u0007\u0097\u0002\u0002\u0d8f\u0d90\u0007\u0018\u0002",
    "\u0002\u0d90\u0dc2\u0007\u009e\u0002\u0002\u0d91\u0d96\u0005\u01ec\u00f7",
    "\u0002\u0d92\u0d93\u0007\u01f0\u0002\u0002\u0d93\u0d94\u0005\u01ee\u00f8",
    "\u0002\u0d94\u0d95\u0007\u01f1\u0002\u0002\u0d95\u0d97\u0003\u0002\u0002",
    "\u0002\u0d96\u0d92\u0003\u0002\u0002\u0002\u0d96\u0d97\u0003\u0002\u0002",
    "\u0002\u0d97\u0dc2\u0003\u0002\u0002\u0002\u0d98\u0d99\u0007\u0097\u0002",
    "\u0002\u0d99\u0d9a\u0007\u0018\u0002\u0002\u0d9a\u0dc2\u0007\u009f\u0002",
    "\u0002\u0d9b\u0d9c\u0007\u0097\u0002\u0002\u0d9c\u0d9d\u0007\u0018\u0002",
    "\u0002\u0d9d\u0dc2\u0007\u00a0\u0002\u0002\u0d9e\u0d9f\u0007\u0097\u0002",
    "\u0002\u0d9f\u0da0\u0007\u0018\u0002\u0002\u0da0\u0dc2\u0007\u00a1\u0002",
    "\u0002\u0da1\u0da2\u0007\u0097\u0002\u0002\u0da2\u0da3\u0007\u0018\u0002",
    "\u0002\u0da3\u0dc2\u0007\u00a2\u0002\u0002\u0da4\u0da5\u0007\u0097\u0002",
    "\u0002\u0da5\u0da6\u0007\u0018\u0002\u0002\u0da6\u0dc2\u0007\u00a3\u0002",
    "\u0002\u0da7\u0da8\u0007\u0097\u0002\u0002\u0da8\u0da9\u0007\u0018\u0002",
    "\u0002\u0da9\u0dc2\u0007\u00a4\u0002\u0002\u0daa\u0dab\u0007\u0097\u0002",
    "\u0002\u0dab\u0dac\u0007\u0018\u0002\u0002\u0dac\u0dad\u0007\u00a5\u0002",
    "\u0002\u0dad\u0dae\u0007\u0212\u0002\u0002\u0dae\u0daf\u0007\u00a6\u0002",
    "\u0002\u0daf\u0db4\u0007\u0212\u0002\u0002\u0db0\u0db1\u0007\u00a7\u0002",
    "\u0002\u0db1\u0db2\u0007\u0212\u0002\u0002\u0db2\u0db3\u0007\u00a8\u0002",
    "\u0002\u0db3\u0db5\u0007\u0212\u0002\u0002\u0db4\u0db0\u0003\u0002\u0002",
    "\u0002\u0db4\u0db5\u0003\u0002\u0002\u0002\u0db5\u0dc2\u0003\u0002\u0002",
    "\u0002\u0db6\u0db7\u0007\u0097\u0002\u0002\u0db7\u0db8\u0007\u0013\u0002",
    "\u0002\u0db8\u0dbc\u0007\u0212\u0002\u0002\u0db9\u0dba\u0007\u00c6\u0002",
    "\u0002\u0dba\u0dbb\u0007\u00c9\u0002\u0002\u0dbb\u0dbd\u0005\u01d8\u00ed",
    "\u0002\u0dbc\u0db9\u0003\u0002\u0002\u0002\u0dbc\u0dbd\u0003\u0002\u0002",
    "\u0002\u0dbd\u0dc2\u0003\u0002\u0002\u0002\u0dbe\u0dbf\u0007\u0097\u0002",
    "\u0002\u0dbf\u0dc0\u0007\u0018\u0002\u0002\u0dc0\u0dc2\u0005\u0006\u0004",
    "\u0002\u0dc1\u0d7f\u0003\u0002\u0002\u0002\u0dc1\u0d82\u0003\u0002\u0002",
    "\u0002\u0dc1\u0d85\u0003\u0002\u0002\u0002\u0dc1\u0d88\u0003\u0002\u0002",
    "\u0002\u0dc1\u0d8b\u0003\u0002\u0002\u0002\u0dc1\u0d8e\u0003\u0002\u0002",
    "\u0002\u0dc1\u0d91\u0003\u0002\u0002\u0002\u0dc1\u0d98\u0003\u0002\u0002",
    "\u0002\u0dc1\u0d9b\u0003\u0002\u0002\u0002\u0dc1\u0d9e\u0003\u0002\u0002",
    "\u0002\u0dc1\u0da1\u0003\u0002\u0002\u0002\u0dc1\u0da4\u0003\u0002\u0002",
    "\u0002\u0dc1\u0da7\u0003\u0002\u0002\u0002\u0dc1\u0daa\u0003\u0002\u0002",
    "\u0002\u0dc1\u0db6\u0003\u0002\u0002\u0002\u0dc1\u0dbe\u0003\u0002\u0002",
    "\u0002\u0dc2\u01eb\u0003\u0002\u0002\u0002\u0dc3\u0dc4\u0007\u0097\u0002",
    "\u0002\u0dc4\u0dc5\u0007\u0018\u0002\u0002\u0dc5\u0dc6\u0007\u00e3\u0002",
    "\u0002\u0dc6\u01ed\u0003\u0002\u0002\u0002\u0dc7\u0dc8\u0005\u01f0\u00f9",
    "\u0002\u0dc8\u01ef\u0003\u0002\u0002\u0002\u0dc9\u0dca\u0005\u0006\u0004",
    "\u0002\u0dca\u01f1\u0003\u0002\u0002\u0002\u0dcb\u0dcc\u0007\u00ae\u0002",
    "\u0002\u0dcc\u0dcd\u0007\u0212\u0002\u0002\u0dcd\u01f3\u0003\u0002\u0002",
    "\u0002\u0dce\u0dcf\t\u0010\u0002\u0002\u0dcf\u01f5\u0003\u0002\u0002",
    "\u0002\u0dd0\u0dd1\u0007[\u0002\u0002\u0dd1\u0dd2\u0007\u0212\u0002",
    "\u0002\u0dd2\u01f7\u0003\u0002\u0002\u0002\u0dd3\u0dd4\u0007\u00ae\u0002",
    "\u0002\u0dd4\u0dd5\u0007\u0212\u0002\u0002\u0dd5\u01f9\u0003\u0002\u0002",
    "\u0002\u0dd6\u0dd7\u0007\u01f0\u0002\u0002\u0dd7\u0dd8\u0005\u01fc\u00ff",
    "\u0002\u0dd8\u0dd9\u0007\u01f1\u0002\u0002\u0dd9\u01fb\u0003\u0002\u0002",
    "\u0002\u0dda\u0ddf\u0005\f\u0007\u0002\u0ddb\u0ddc\u0007\u01ee\u0002",
    "\u0002\u0ddc\u0dde\u0005\f\u0007\u0002\u0ddd\u0ddb\u0003\u0002\u0002",
    "\u0002\u0dde\u0de1\u0003\u0002\u0002\u0002\u0ddf\u0ddd\u0003\u0002\u0002",
    "\u0002\u0ddf\u0de0\u0003\u0002\u0002\u0002\u0de0\u01fd\u0003\u0002\u0002",
    "\u0002\u0de1\u0ddf\u0003\u0002\u0002\u0002\u0de2\u0de3\u0007\f\u0002",
    "\u0002\u0de3\u0de4\u0007\r\u0002\u0002\u0de4\u01ff\u0003\u0002\u0002",
    "\u0002\u0de5\u0de6\u0007\f\u0002\u0002\u0de6\u0de7\u0007\b\u0002\u0002",
    "\u0de7\u0de8\u0007\r\u0002\u0002\u0de8\u0201\u0003\u0002\u0002\u0002",
    "\u0de9\u0dea\u0007L\u0002\u0002\u0dea\u0deb\u00070\u0002\u0002\u0deb",
    "\u0def\u0005\u0018\r\u0002\u0dec\u0dee\u0005\u043c\u021f\u0002\u0ded",
    "\u0dec\u0003\u0002\u0002\u0002\u0dee\u0df1\u0003\u0002\u0002\u0002\u0def",
    "\u0ded\u0003\u0002\u0002\u0002\u0def\u0df0\u0003\u0002\u0002\u0002\u0df0",
    "\u0203\u0003\u0002\u0002\u0002\u0df1\u0def\u0003\u0002\u0002\u0002\u0df2",
    "\u0df3\u0007U\u0002\u0002\u0df3\u0df5\u00070\u0002\u0002\u0df4\u0df6",
    "\u0005\u01fe\u0100\u0002\u0df5\u0df4\u0003\u0002\u0002\u0002\u0df5\u0df6",
    "\u0003\u0002\u0002\u0002\u0df6\u0df7\u0003\u0002\u0002\u0002\u0df7\u0df8",
    "\u0005\u0018\r\u0002\u0df8\u0205\u0003\u0002\u0002\u0002\u0df9\u0e23",
    "\u0005\u0208\u0105\u0002\u0dfa\u0e23\u0005\u020a\u0106\u0002\u0dfb\u0e23",
    "\u0005\u0212\u010a\u0002\u0dfc\u0e23\u0005\u0214\u010b\u0002\u0dfd\u0e23",
    "\u0005\u0216\u010c\u0002\u0dfe\u0e23\u0005\u021a\u010e\u0002\u0dff\u0e23",
    "\u0005\u021c\u010f\u0002\u0e00\u0e23\u0005\u039e\u01d0\u0002\u0e01\u0e23",
    "\u0005\u03a0\u01d1\u0002\u0e02\u0e23\u0005\u021e\u0110\u0002\u0e03\u0e23",
    "\u0005\u0220\u0111\u0002\u0e04\u0e23\u0005\u0222\u0112\u0002\u0e05\u0e23",
    "\u0005\u0224\u0113\u0002\u0e06\u0e23\u0005\u022a\u0116\u0002\u0e07\u0e23",
    "\u0005\u022c\u0117\u0002\u0e08\u0e23\u0005\u0230\u0119\u0002\u0e09\u0e23",
    "\u0005\u022e\u0118\u0002\u0e0a\u0e23\u0005\u0232\u011a\u0002\u0e0b\u0e23",
    "\u0005\u0234\u011b\u0002\u0e0c\u0e23\u0005\u0236\u011c\u0002\u0e0d\u0e23",
    "\u0005\u0238\u011d\u0002\u0e0e\u0e23\u0005\u023a\u011e\u0002\u0e0f\u0e23",
    "\u0005\u023c\u011f\u0002\u0e10\u0e23\u0005\u0240\u0121\u0002\u0e11\u0e23",
    "\u0005\u023e\u0120\u0002\u0e12\u0e23\u0005\u0242\u0122\u0002\u0e13\u0e23",
    "\u0005\u0244\u0123\u0002\u0e14\u0e23\u0005\u0246\u0124\u0002\u0e15\u0e23",
    "\u0005\u0248\u0125\u0002\u0e16\u0e23\u0005\u024a\u0126\u0002\u0e17\u0e23",
    "\u0005\u024c\u0127\u0002\u0e18\u0e23\u0005\u024e\u0128\u0002\u0e19\u0e23",
    "\u0005\u0252\u012a\u0002\u0e1a\u0e23\u0005\u0254\u012b\u0002\u0e1b\u0e23",
    "\u0005\u0256\u012c\u0002\u0e1c\u0e23\u0005\u0258\u012d\u0002\u0e1d\u0e23",
    "\u0005\u0262\u0132\u0002\u0e1e\u0e23\u0005\u025a\u012e\u0002\u0e1f\u0e23",
    "\u0005\u025c\u012f\u0002\u0e20\u0e23\u0005\u025e\u0130\u0002\u0e21\u0e23",
    "\u0005\u0260\u0131\u0002\u0e22\u0df9\u0003\u0002\u0002\u0002\u0e22\u0dfa",
    "\u0003\u0002\u0002\u0002\u0e22\u0dfb\u0003\u0002\u0002\u0002\u0e22\u0dfc",
    "\u0003\u0002\u0002\u0002\u0e22\u0dfd\u0003\u0002\u0002\u0002\u0e22\u0dfe",
    "\u0003\u0002\u0002\u0002\u0e22\u0dff\u0003\u0002\u0002\u0002\u0e22\u0e00",
    "\u0003\u0002\u0002\u0002\u0e22\u0e01\u0003\u0002\u0002\u0002\u0e22\u0e02",
    "\u0003\u0002\u0002\u0002\u0e22\u0e03\u0003\u0002\u0002\u0002\u0e22\u0e04",
    "\u0003\u0002\u0002\u0002\u0e22\u0e05\u0003\u0002\u0002\u0002\u0e22\u0e06",
    "\u0003\u0002\u0002\u0002\u0e22\u0e07\u0003\u0002\u0002\u0002\u0e22\u0e08",
    "\u0003\u0002\u0002\u0002\u0e22\u0e09\u0003\u0002\u0002\u0002\u0e22\u0e0a",
    "\u0003\u0002\u0002\u0002\u0e22\u0e0b\u0003\u0002\u0002\u0002\u0e22\u0e0c",
    "\u0003\u0002\u0002\u0002\u0e22\u0e0d\u0003\u0002\u0002\u0002\u0e22\u0e0e",
    "\u0003\u0002\u0002\u0002\u0e22\u0e0f\u0003\u0002\u0002\u0002\u0e22\u0e10",
    "\u0003\u0002\u0002\u0002\u0e22\u0e11\u0003\u0002\u0002\u0002\u0e22\u0e12",
    "\u0003\u0002\u0002\u0002\u0e22\u0e13\u0003\u0002\u0002\u0002\u0e22\u0e14",
    "\u0003\u0002\u0002\u0002\u0e22\u0e15\u0003\u0002\u0002\u0002\u0e22\u0e16",
    "\u0003\u0002\u0002\u0002\u0e22\u0e17\u0003\u0002\u0002\u0002\u0e22\u0e18",
    "\u0003\u0002\u0002\u0002\u0e22\u0e19\u0003\u0002\u0002\u0002\u0e22\u0e1a",
    "\u0003\u0002\u0002\u0002\u0e22\u0e1b\u0003\u0002\u0002\u0002\u0e22\u0e1c",
    "\u0003\u0002\u0002\u0002\u0e22\u0e1d\u0003\u0002\u0002\u0002\u0e22\u0e1e",
    "\u0003\u0002\u0002\u0002\u0e22\u0e1f\u0003\u0002\u0002\u0002\u0e22\u0e20",
    "\u0003\u0002\u0002\u0002\u0e22\u0e21\u0003\u0002\u0002\u0002\u0e23\u0207",
    "\u0003\u0002\u0002\u0002\u0e24\u0e25\t\u0011\u0002\u0002\u0e25\u0e27",
    "\u00073\u0002\u0002\u0e26\u0e28\u0007\u00c0\u0002\u0002\u0e27\u0e26",
    "\u0003\u0002\u0002\u0002\u0e27\u0e28\u0003\u0002\u0002\u0002\u0e28\u0e29",
    "\u0003\u0002\u0002\u0002\u0e29\u0e2a\u0005\u0006\u0004\u0002\u0e2a\u0e2b",
    "\u0007)\u0002\u0002\u0e2b\u0e2c\u0005\u0010\t\u0002\u0e2c\u0e65\u0003",
    "\u0002\u0002\u0002\u0e2d\u0e2e\t\u0011\u0002\u0002\u0e2e\u0e2f\t\u0004",
    "\u0002\u0002\u0e2f\u0e65\u0005\u0006\u0004\u0002\u0e30\u0e31\t\u0011",
    "\u0002\u0002\u0e31\u0e32\u0007#\u0002\u0002\u0e32\u0e65\u0005\u0006",
    "\u0004\u0002\u0e33\u0e34\t\u0011\u0002\u0002\u0e34\u0e35\u0007\u00ee",
    "\u0002\u0002\u0e35\u0e65\u0005\u0006\u0004\u0002\u0e36\u0e37\t\u0011",
    "\u0002\u0002\u0e37\u0e38\u0007\u00f5\u0002\u0002\u0e38\u0e65\u0005\u0006",
    "\u0004\u0002\u0e39\u0e3a\t\u0011\u0002\u0002\u0e3a\u0e3b\u0007\u00fc",
    "\u0002\u0002\u0e3b\u0e65\u0005\u0006\u0004\u0002\u0e3c\u0e3d\t\u0011",
    "\u0002\u0002\u0e3d\u0e3e\u0007\u0194\u0002\u0002\u0e3e\u0e65\u0005\u0006",
    "\u0004\u0002\u0e3f\u0e43\t\u0011\u0002\u0002\u0e40\u0e44\u0007\u00bf",
    "\u0002\u0002\u0e41\u0e44\u0007\u00c0\u0002\u0002\u0e42\u0e44\u0007\u00c1",
    "\u0002\u0002\u0e43\u0e40\u0003\u0002\u0002\u0002\u0e43\u0e41\u0003\u0002",
    "\u0002\u0002\u0e43\u0e42\u0003\u0002\u0002\u0002\u0e43\u0e44\u0003\u0002",
    "\u0002\u0002\u0e44\u0e45\u0003\u0002\u0002\u0002\u0e45\u0e65\u0005\u029e",
    "\u0150\u0002\u0e46\u0e47\t\u0011\u0002\u0002\u0e47\u0e49\u0007\u00ba",
    "\u0002\u0002\u0e48\u0e4a\u0007\u00bf\u0002\u0002\u0e49\u0e48\u0003\u0002",
    "\u0002\u0002\u0e49\u0e4a\u0003\u0002\u0002\u0002\u0e4a\u0e4b\u0003\u0002",
    "\u0002\u0002\u0e4b\u0e65\u0005\u02a4\u0153\u0002\u0e4c\u0e4d\t\u0011",
    "\u0002\u0002\u0e4d\u0e4e\u00077\u0002\u0002\u0e4e\u0e50\u0007\u00ba",
    "\u0002\u0002\u0e4f\u0e51\u0007\u00bf\u0002\u0002\u0e50\u0e4f\u0003\u0002",
    "\u0002\u0002\u0e50\u0e51\u0003\u0002\u0002\u0002\u0e51\u0e52\u0003\u0002",
    "\u0002\u0002\u0e52\u0e65\u0005\u04ec\u0277\u0002\u0e53\u0e54\t\u0011",
    "\u0002\u0002\u0e54\u0e55\u00077\u0002\u0002\u0e55\u0e57\u0007\u0226",
    "\u0002\u0002\u0e56\u0e58\u0007\u00bf\u0002\u0002\u0e57\u0e56\u0003\u0002",
    "\u0002\u0002\u0e57\u0e58\u0003\u0002\u0002\u0002\u0e58\u0e59\u0003\u0002",
    "\u0002\u0002\u0e59\u0e65\u0005\u04ec\u0277\u0002\u0e5a\u0e5b\t\u0011",
    "\u0002\u0002\u0e5b\u0e5d\u0007\u0110\u0002\u0002\u0e5c\u0e5e\u0007\u00bf",
    "\u0002\u0002\u0e5d\u0e5c\u0003\u0002\u0002\u0002\u0e5d\u0e5e\u0003\u0002",
    "\u0002\u0002\u0e5e\u0e5f\u0003\u0002\u0002\u0002\u0e5f\u0e65\u0005\u0006",
    "\u0004\u0002\u0e60\u0e61\t\u0011\u0002\u0002\u0e61\u0e62\u0007\u0110",
    "\u0002\u0002\u0e62\u0e63\u0007\u01ba\u0002\u0002\u0e63\u0e65\u0005\u015a",
    "\u00ae\u0002\u0e64\u0e24\u0003\u0002\u0002\u0002\u0e64\u0e2d\u0003\u0002",
    "\u0002\u0002\u0e64\u0e30\u0003\u0002\u0002\u0002\u0e64\u0e33\u0003\u0002",
    "\u0002\u0002\u0e64\u0e36\u0003\u0002\u0002\u0002\u0e64\u0e39\u0003\u0002",
    "\u0002\u0002\u0e64\u0e3c\u0003\u0002\u0002\u0002\u0e64\u0e3f\u0003\u0002",
    "\u0002\u0002\u0e64\u0e46\u0003\u0002\u0002\u0002\u0e64\u0e4c\u0003\u0002",
    "\u0002\u0002\u0e64\u0e53\u0003\u0002\u0002\u0002\u0e64\u0e5a\u0003\u0002",
    "\u0002\u0002\u0e64\u0e60\u0003\u0002\u0002\u0002\u0e65\u0209\u0003\u0002",
    "\u0002\u0002\u0e66\u0e6a\u00078\u0002\u0002\u0e67\u0e6b\u0005\u020c",
    "\u0107\u0002\u0e68\u0e6b\u0005\u020e\u0108\u0002\u0e69\u0e6b\u0005\u0210",
    "\u0109\u0002\u0e6a\u0e67\u0003\u0002\u0002\u0002\u0e6a\u0e68\u0003\u0002",
    "\u0002\u0002\u0e6a\u0e69\u0003\u0002\u0002\u0002\u0e6b\u020b\u0003\u0002",
    "\u0002\u0002\u0e6c\u0e6f\t\u0012\u0002\u0002\u0e6d\u0e6e\u0007\t\u0002",
    "\u0002\u0e6e\u0e70\u0005\u02a0\u0151\u0002\u0e6f\u0e6d\u0003\u0002\u0002",
    "\u0002\u0e6f\u0e70\u0003\u0002\u0002\u0002\u0e70\u0eda\u0003\u0002\u0002",
    "\u0002\u0e71\u0e74\u0007/\u0002\u0002\u0e72\u0e73\t\u0013\u0002\u0002",
    "\u0e73\u0e75\u0005\u0006\u0004\u0002\u0e74\u0e72\u0003\u0002\u0002\u0002",
    "\u0e74\u0e75\u0003\u0002\u0002\u0002\u0e75\u0e79\u0003\u0002\u0002\u0002",
    "\u0e76\u0e77\u0007\t\u0002\u0002\u0e77\u0e7a\u0005\u02a0\u0151\u0002",
    "\u0e78\u0e7a\u0005\u02a0\u0151\u0002\u0e79\u0e76\u0003\u0002\u0002\u0002",
    "\u0e79\u0e78\u0003\u0002\u0002\u0002\u0e79\u0e7a\u0003\u0002\u0002\u0002",
    "\u0e7a\u0eda\u0003\u0002\u0002\u0002\u0e7b\u0e7c\u0007\u0112\u0002\u0002",
    "\u0e7c\u0e7f\u0007\u010e\u0002\u0002\u0e7d\u0e7e\t\u0013\u0002\u0002",
    "\u0e7e\u0e80\u0005\u0006\u0004\u0002\u0e7f\u0e7d\u0003\u0002\u0002\u0002",
    "\u0e7f\u0e80\u0003\u0002\u0002\u0002\u0e80\u0e84\u0003\u0002\u0002\u0002",
    "\u0e81\u0e82\u0007\t\u0002\u0002\u0e82\u0e85\u0005\u02a0\u0151\u0002",
    "\u0e83\u0e85\u0005\u02a0\u0151\u0002\u0e84\u0e81\u0003\u0002\u0002\u0002",
    "\u0e84\u0e83\u0003\u0002\u0002\u0002\u0e84\u0e85\u0003\u0002\u0002\u0002",
    "\u0e85\u0eda\u0003\u0002\u0002\u0002\u0e86\u0e89\u00071\u0002\u0002",
    "\u0e87\u0e88\t\u0013\u0002\u0002\u0e88\u0e8a\u0005\u0006\u0004\u0002",
    "\u0e89\u0e87\u0003\u0002\u0002\u0002\u0e89\u0e8a\u0003\u0002\u0002\u0002",
    "\u0e8a\u0e8e\u0003\u0002\u0002\u0002\u0e8b\u0e8c\u0007\t\u0002\u0002",
    "\u0e8c\u0e8f\u0005\u02a0\u0151\u0002\u0e8d\u0e8f\u0005\u02a0\u0151\u0002",
    "\u0e8e\u0e8b\u0003\u0002\u0002\u0002\u0e8e\u0e8d\u0003\u0002\u0002\u0002",
    "\u0e8e\u0e8f\u0003\u0002\u0002\u0002\u0e8f\u0eda\u0003\u0002\u0002\u0002",
    "\u0e90\u0e93\u0007\u00e9\u0002\u0002\u0e91\u0e92\t\u0013\u0002\u0002",
    "\u0e92\u0e94\u0005\u0006\u0004\u0002\u0e93\u0e91\u0003\u0002\u0002\u0002",
    "\u0e93\u0e94\u0003\u0002\u0002\u0002\u0e94\u0e98\u0003\u0002\u0002\u0002",
    "\u0e95\u0e96\u0007\t\u0002\u0002\u0e96\u0e99\u0005\u02a0\u0151\u0002",
    "\u0e97\u0e99\u0005\u02a0\u0151\u0002\u0e98\u0e95\u0003\u0002\u0002\u0002",
    "\u0e98\u0e97\u0003\u0002\u0002\u0002\u0e98\u0e99\u0003\u0002\u0002\u0002",
    "\u0e99\u0eda\u0003\u0002\u0002\u0002\u0e9a\u0e9d\u0007\u00eb\u0002\u0002",
    "\u0e9b\u0e9c\t\u0013\u0002\u0002\u0e9c\u0e9e\u0005\u0006\u0004\u0002",
    "\u0e9d\u0e9b\u0003\u0002\u0002\u0002\u0e9d\u0e9e\u0003\u0002\u0002\u0002",
    "\u0e9e\u0ea2\u0003\u0002\u0002\u0002\u0e9f\u0ea0\u0007\t\u0002\u0002",
    "\u0ea0\u0ea3\u0005\u02a0\u0151\u0002\u0ea1\u0ea3\u0005\u02a0\u0151\u0002",
    "\u0ea2\u0e9f\u0003\u0002\u0002\u0002\u0ea2\u0ea1\u0003\u0002\u0002\u0002",
    "\u0ea2\u0ea3\u0003\u0002\u0002\u0002\u0ea3\u0eda\u0003\u0002\u0002\u0002",
    "\u0ea4\u0ea7\t\u0014\u0002\u0002\u0ea5\u0ea6\u0007\t\u0002\u0002\u0ea6",
    "\u0ea8\u0005\u02a0\u0151\u0002\u0ea7\u0ea5\u0003\u0002\u0002\u0002\u0ea7",
    "\u0ea8\u0003\u0002\u0002\u0002\u0ea8\u0eda\u0003\u0002\u0002\u0002\u0ea9",
    "\u0eaa\u0007\u015d\u0002\u0002\u0eaa\u0eda\t\u0004\u0002\u0002\u0eab",
    "\u0eac\u0007\u015d\u0002\u0002\u0eac\u0eda\u0007\u00f5\u0002\u0002\u0ead",
    "\u0eae\u0007\u015d\u0002\u0002\u0eae\u0eda\u0007\u00ec\u0002\u0002\u0eaf",
    "\u0eb2\u0007$\u0002\u0002\u0eb0\u0eb1\u0007\t\u0002\u0002\u0eb1\u0eb3",
    "\u0005\u02a0\u0151\u0002\u0eb2\u0eb0\u0003\u0002\u0002\u0002\u0eb2\u0eb3",
    "\u0003\u0002\u0002\u0002\u0eb3\u0eda\u0003\u0002\u0002\u0002\u0eb4\u0eb7",
    "\u0007\u00ef\u0002\u0002\u0eb5\u0eb6\u0007\t\u0002\u0002\u0eb6\u0eb8",
    "\u0005\u02a0\u0151\u0002\u0eb7\u0eb5\u0003\u0002\u0002\u0002\u0eb7\u0eb8",
    "\u0003\u0002\u0002\u0002\u0eb8\u0eda\u0003\u0002\u0002\u0002\u0eb9\u0ebc",
    "\u0007\u00ed\u0002\u0002\u0eba\u0ebb\u0007\t\u0002\u0002\u0ebb\u0ebd",
    "\u0005\u02a0\u0151\u0002\u0ebc\u0eba\u0003\u0002\u0002\u0002\u0ebc\u0ebd",
    "\u0003\u0002\u0002\u0002\u0ebd\u0eda\u0003\u0002\u0002\u0002\u0ebe\u0ec1",
    "\u0007\u00f6\u0002\u0002\u0ebf\u0ec0\u0007\t\u0002\u0002\u0ec0\u0ec2",
    "\u0005\u02a0\u0151\u0002\u0ec1\u0ebf\u0003\u0002\u0002\u0002\u0ec1\u0ec2",
    "\u0003\u0002\u0002\u0002\u0ec2\u0eda\u0003\u0002\u0002\u0002\u0ec3\u0ec6",
    "\u0007\u01e9\u0002\u0002\u0ec4\u0ec5\u0007\t\u0002\u0002\u0ec5\u0ec7",
    "\u0005\u02a0\u0151\u0002\u0ec6\u0ec4\u0003\u0002\u0002\u0002\u0ec6\u0ec7",
    "\u0003\u0002\u0002\u0002\u0ec7\u0eda\u0003\u0002\u0002\u0002\u0ec8\u0ecb",
    "\u0007\u00fd\u0002\u0002\u0ec9\u0eca\u0007\t\u0002\u0002\u0eca\u0ecc",
    "\u0005\u02a0\u0151\u0002\u0ecb\u0ec9\u0003\u0002\u0002\u0002\u0ecb\u0ecc",
    "\u0003\u0002\u0002\u0002\u0ecc\u0eda\u0003\u0002\u0002\u0002\u0ecd\u0ed0",
    "\u0007\u0195\u0002\u0002\u0ece\u0ecf\u0007\t\u0002\u0002\u0ecf\u0ed1",
    "\u0005\u02a0\u0151\u0002\u0ed0\u0ece\u0003\u0002\u0002\u0002\u0ed0\u0ed1",
    "\u0003\u0002\u0002\u0002\u0ed1\u0eda\u0003\u0002\u0002\u0002\u0ed2\u0ed3",
    "\u00072\u0002\u0002\u0ed3\u0ed4\t\u0013\u0002\u0002\u0ed4\u0ed7\u0005",
    "\u0010\t\u0002\u0ed5\u0ed6\t\u0013\u0002\u0002\u0ed6\u0ed8\u0005\u0006",
    "\u0004\u0002\u0ed7\u0ed5\u0003\u0002\u0002\u0002\u0ed7\u0ed8\u0003\u0002",
    "\u0002\u0002\u0ed8\u0eda\u0003\u0002\u0002\u0002\u0ed9\u0e6c\u0003\u0002",
    "\u0002\u0002\u0ed9\u0e71\u0003\u0002\u0002\u0002\u0ed9\u0e7b\u0003\u0002",
    "\u0002\u0002\u0ed9\u0e86\u0003\u0002\u0002\u0002\u0ed9\u0e90\u0003\u0002",
    "\u0002\u0002\u0ed9\u0e9a\u0003\u0002\u0002\u0002\u0ed9\u0ea4\u0003\u0002",
    "\u0002\u0002\u0ed9\u0ea9\u0003\u0002\u0002\u0002\u0ed9\u0eab\u0003\u0002",
    "\u0002\u0002\u0ed9\u0ead\u0003\u0002\u0002\u0002\u0ed9\u0eaf\u0003\u0002",
    "\u0002\u0002\u0ed9\u0eb4\u0003\u0002\u0002\u0002\u0ed9\u0eb9\u0003\u0002",
    "\u0002\u0002\u0ed9\u0ebe\u0003\u0002\u0002\u0002\u0ed9\u0ec3\u0003\u0002",
    "\u0002\u0002\u0ed9\u0ec8\u0003\u0002\u0002\u0002\u0ed9\u0ecd\u0003\u0002",
    "\u0002\u0002\u0ed9\u0ed2\u0003\u0002\u0002\u0002\u0eda\u020d\u0003\u0002",
    "\u0002\u0002\u0edb\u0edd\u00076\u0002\u0002\u0edc\u0ede\u0005\u02a0",
    "\u0151\u0002\u0edd\u0edc\u0003\u0002\u0002\u0002\u0edd\u0ede\u0003\u0002",
    "\u0002\u0002\u0ede\u0efd\u0003\u0002\u0002\u0002\u0edf\u0ee0\u00077",
    "\u0002\u0002\u0ee0\u0ee2\u00076\u0002\u0002\u0ee1\u0ee3\u0005\u02a0",
    "\u0151\u0002\u0ee2\u0ee1\u0003\u0002\u0002\u0002\u0ee2\u0ee3\u0003\u0002",
    "\u0002\u0002\u0ee3\u0efd\u0003\u0002\u0002\u0002\u0ee4\u0ee5\u00077",
    "\u0002\u0002\u0ee5\u0ee7\u0007\u0227\u0002\u0002\u0ee6\u0ee8\u0005\u02a0",
    "\u0151\u0002\u0ee7\u0ee6\u0003\u0002\u0002\u0002\u0ee7\u0ee8\u0003\u0002",
    "\u0002\u0002\u0ee8\u0efd\u0003\u0002\u0002\u0002\u0ee9\u0eea\u0007,",
    "\u0002\u0002\u0eea\u0eec\u0005\u0298\u014d\u0002\u0eeb\u0eed\u0005\u001a",
    "\u000e\u0002\u0eec\u0eeb\u0003\u0002\u0002\u0002\u0eec\u0eed\u0003\u0002",
    "\u0002\u0002\u0eed\u0efd\u0003\u0002\u0002\u0002\u0eee\u0eef\u0007L",
    "\u0002\u0002\u0eef\u0ef0\u0007.\u0002\u0002\u0ef0\u0efd\u0005\u0010",
    "\t\u0002\u0ef1\u0ef2\u0007.\u0002\u0002\u0ef2\u0ef5\u0007\u00bf\u0002",
    "\u0002\u0ef3\u0ef4\t\u0013\u0002\u0002\u0ef4\u0ef6\u0005\u0006\u0004",
    "\u0002\u0ef5\u0ef3\u0003\u0002\u0002\u0002\u0ef5\u0ef6\u0003\u0002\u0002",
    "\u0002\u0ef6\u0ef7\u0003\u0002\u0002\u0002\u0ef7\u0ef8\u0007\t\u0002",
    "\u0002\u0ef8\u0efa\u0005\u02a0\u0151\u0002\u0ef9\u0efb\u0005\u001a\u000e",
    "\u0002\u0efa\u0ef9\u0003\u0002\u0002\u0002\u0efa\u0efb\u0003\u0002\u0002",
    "\u0002\u0efb\u0efd\u0003\u0002\u0002\u0002\u0efc\u0edb\u0003\u0002\u0002",
    "\u0002\u0efc\u0edf\u0003\u0002\u0002\u0002\u0efc\u0ee4\u0003\u0002\u0002",
    "\u0002\u0efc\u0ee9\u0003\u0002\u0002\u0002\u0efc\u0eee\u0003\u0002\u0002",
    "\u0002\u0efc\u0ef1\u0003\u0002\u0002\u0002\u0efd\u020f\u0003\u0002\u0002",
    "\u0002\u0efe\u0eff\u0007\u00ce\u0002\u0002\u0eff\u0f03\u0005\u0006\u0004",
    "\u0002\u0f00\u0f01\u0007\u01f0\u0002\u0002\u0f01\u0f02\u0007\u0212\u0002",
    "\u0002\u0f02\u0f04\u0007\u01f1\u0002\u0002\u0f03\u0f00\u0003\u0002\u0002",
    "\u0002\u0f03\u0f04\u0003\u0002\u0002\u0002\u0f04\u0f28\u0003\u0002\u0002",
    "\u0002\u0f05\u0f07\u0007\u011a\u0002\u0002\u0f06\u0f08\u0005\u029c\u014f",
    "\u0002\u0f07\u0f06\u0003\u0002\u0002\u0002\u0f07\u0f08\u0003\u0002\u0002",
    "\u0002\u0f08\u0f0a\u0003\u0002\u0002\u0002\u0f09\u0f0b\u0007\u00bf\u0002",
    "\u0002\u0f0a\u0f09\u0003\u0002\u0002\u0002\u0f0a\u0f0b\u0003\u0002\u0002",
    "\u0002\u0f0b\u0f28\u0003\u0002\u0002\u0002\u0f0c\u0f0d\u0007\u011a\u0002",
    "\u0002\u0f0d\u0f0e\u0007\u0110\u0002\u0002\u0f0e\u0f10\u0007\u021b\u0002",
    "\u0002\u0f0f\u0f11\u0007\u00bf\u0002\u0002\u0f10\u0f0f\u0003\u0002\u0002",
    "\u0002\u0f10\u0f11\u0003\u0002\u0002\u0002\u0f11\u0f28\u0003\u0002\u0002",
    "\u0002\u0f12\u0f14\u0007\u00c0\u0002\u0002\u0f13\u0f12\u0003\u0002\u0002",
    "\u0002\u0f13\u0f14\u0003\u0002\u0002\u0002\u0f14\u0f15\u0003\u0002\u0002",
    "\u0002\u0f15\u0f16\t\u0015\u0002\u0002\u0f16\u0f17\u0007)\u0002\u0002",
    "\u0f17\u0f1a\u0005\u02a0\u0151\u0002\u0f18\u0f19\t\u0013\u0002\u0002",
    "\u0f19\u0f1b\u0005\u0006\u0004\u0002\u0f1a\u0f18\u0003\u0002\u0002\u0002",
    "\u0f1a\u0f1b\u0003\u0002\u0002\u0002\u0f1b\u0f28\u0003\u0002\u0002\u0002",
    "\u0f1c\u0f28\u0007\u01a1\u0002\u0002\u0f1d\u0f28\u0007\u01b3\u0002\u0002",
    "\u0f1e\u0f1f\u0007\u01ae\u0002\u0002\u0f1f\u0f28\u0007\u0212\u0002\u0002",
    "\u0f20\u0f21\u0007\u0110\u0002\u0002\u0f21\u0f28\u0007\u01bb\u0002\u0002",
    "\u0f22\u0f23\u0007\u01a0\u0002\u0002\u0f23\u0f25\u0007\u01e6\u0002\u0002",
    "\u0f24\u0f26\u0007\u021b\u0002\u0002\u0f25\u0f24\u0003\u0002\u0002\u0002",
    "\u0f25\u0f26\u0003\u0002\u0002\u0002\u0f26\u0f28\u0003\u0002\u0002\u0002",
    "\u0f27\u0efe\u0003\u0002\u0002\u0002\u0f27\u0f05\u0003\u0002\u0002\u0002",
    "\u0f27\u0f0c\u0003\u0002\u0002\u0002\u0f27\u0f13\u0003\u0002\u0002\u0002",
    "\u0f27\u0f1c\u0003\u0002\u0002\u0002\u0f27\u0f1d\u0003\u0002\u0002\u0002",
    "\u0f27\u0f1e\u0003\u0002\u0002\u0002\u0f27\u0f20\u0003\u0002\u0002\u0002",
    "\u0f27\u0f22\u0003\u0002\u0002\u0002\u0f28\u0211\u0003\u0002\u0002\u0002",
    "\u0f29\u0f2b\u00079\u0002\u0002\u0f2a\u0f2c\u0007:\u0002\u0002\u0f2b",
    "\u0f2a\u0003\u0002\u0002\u0002\u0f2b\u0f2c\u0003\u0002\u0002\u0002\u0f2c",
    "\u0f39\u0003\u0002\u0002\u0002\u0f2d\u0f2e\u0007.\u0002\u0002\u0f2e",
    "\u0f30\u0005\u0006\u0004\u0002\u0f2f\u0f31\u0005\u001a\u000e\u0002\u0f30",
    "\u0f2f\u0003\u0002\u0002\u0002\u0f30\u0f31\u0003\u0002\u0002\u0002\u0f31",
    "\u0f36\u0003\u0002\u0002\u0002\u0f32\u0f33\u0007\u01ee\u0002\u0002\u0f33",
    "\u0f35\u0005\u001a\u000e\u0002\u0f34\u0f32\u0003\u0002\u0002\u0002\u0f35",
    "\u0f38\u0003\u0002\u0002\u0002\u0f36\u0f34\u0003\u0002\u0002\u0002\u0f36",
    "\u0f37\u0003\u0002\u0002\u0002\u0f37\u0f3a\u0003\u0002\u0002\u0002\u0f38",
    "\u0f36\u0003\u0002\u0002\u0002\u0f39\u0f2d\u0003\u0002\u0002\u0002\u0f39",
    "\u0f3a\u0003\u0002\u0002\u0002\u0f3a\u0213\u0003\u0002\u0002\u0002\u0f3b",
    "\u0f3c\u0007U\u0002\u0002\u0f3c\u0f3e\u0007\u010d\u0002\u0002\u0f3d",
    "\u0f3f\u0005\u01fe\u0100\u0002\u0f3e\u0f3d\u0003\u0002\u0002\u0002\u0f3e",
    "\u0f3f\u0003\u0002\u0002\u0002\u0f3f\u0f40\u0003\u0002\u0002\u0002\u0f40",
    "\u0f41\u0005\u0014\u000b\u0002\u0f41\u0215\u0003\u0002\u0002\u0002\u0f42",
    "\u0f43\u0007U\u0002\u0002\u0f43\u0f44\u0007\u0112\u0002\u0002\u0f44",
    "\u0f46\u0007\u010d\u0002\u0002\u0f45\u0f47\u0005\u01fe\u0100\u0002\u0f46",
    "\u0f45\u0003\u0002\u0002\u0002\u0f46\u0f47\u0003\u0002\u0002\u0002\u0f47",
    "\u0f48\u0003\u0002\u0002\u0002\u0f48\u0f49\u0005\u0014\u000b\u0002\u0f49",
    "\u0217\u0003\u0002\u0002\u0002\u0f4a\u0f4b\u0005\u0226\u0114\u0002\u0f4b",
    "\u0f4d\u0007\u00ba\u0002\u0002\u0f4c\u0f4e\u0005\u0200\u0101\u0002\u0f4d",
    "\u0f4c\u0003\u0002\u0002\u0002\u0f4d\u0f4e\u0003\u0002\u0002\u0002\u0f4e",
    "\u0f4f\u0003\u0002\u0002\u0002\u0f4f\u0f50\u0005\u0006\u0004\u0002\u0f50",
    "\u0f51\u0007\u0018\u0002\u0002\u0f51\u0f54\u0007\u0212\u0002\u0002\u0f52",
    "\u0f53\u0007?\u0002\u0002\u0f53\u0f55\u0005\u0370\u01b9\u0002\u0f54",
    "\u0f52\u0003\u0002\u0002\u0002\u0f54\u0f55\u0003\u0002\u0002\u0002\u0f55",
    "\u0219\u0003\u0002\u0002\u0002\u0f56\u0f57\u0007L\u0002\u0002\u0f57",
    "\u0f58\u0007\u00b9\u0002\u0002\u0f58\u0f59\u0007\u00bd\u0002\u0002\u0f59",
    "\u0f5a\u0007\u021b\u0002\u0002\u0f5a\u0f5c\u0007\u01f0\u0002\u0002\u0f5b",
    "\u0f5d\u0005$\u0013\u0002\u0f5c\u0f5b\u0003\u0002\u0002\u0002\u0f5c",
    "\u0f5d\u0003\u0002\u0002\u0002\u0f5d\u0f5e\u0003\u0002\u0002\u0002\u0f5e",
    "\u0f5f\u0007\u01f1\u0002\u0002\u0f5f\u0f60\u0005\u02e6\u0174\u0002\u0f60",
    "\u021b\u0003\u0002\u0002\u0002\u0f61\u0f62\u0007L\u0002\u0002\u0f62",
    "\u0f63\u00073\u0002\u0002\u0f63\u0f64\u0005\u0006\u0004\u0002\u0f64",
    "\u0f65\u0007)\u0002\u0002\u0f65\u0f66\u0007.\u0002\u0002\u0f66\u0f67",
    "\u0005\u0010\t\u0002\u0f67\u0f68\u0007\u01f0\u0002\u0002\u0f68\u0f69",
    "\u0005> \u0002\u0f69\u0f6a\u0007\u01f1\u0002\u0002\u0f6a\u0f6b\u0007",
    "\u0018\u0002\u0002\u0f6b\u0f6d\u0007\u0212\u0002\u0002\u0f6c\u0f6e\u0005",
    "\u028e\u0148\u0002\u0f6d\u0f6c\u0003\u0002\u0002\u0002\u0f6d\u0f6e\u0003",
    "\u0002\u0002\u0002\u0f6e\u0f70\u0003\u0002\u0002\u0002\u0f6f\u0f71\u0005",
    "\u0292\u014a\u0002\u0f70\u0f6f\u0003\u0002\u0002\u0002\u0f70\u0f71\u0003",
    "\u0002\u0002\u0002\u0f71\u0f73\u0003\u0002\u0002\u0002\u0f72\u0f74\u0005",
    "\u0290\u0149\u0002\u0f73\u0f72\u0003\u0002\u0002\u0002\u0f73\u0f74\u0003",
    "\u0002\u0002\u0002\u0f74\u0f76\u0003\u0002\u0002\u0002\u0f75\u0f77\u0005",
    "\u01b2\u00da\u0002\u0f76\u0f75\u0003\u0002\u0002\u0002\u0f76\u0f77\u0003",
    "\u0002\u0002\u0002\u0f77\u0f79\u0003\u0002\u0002\u0002\u0f78\u0f7a\u0005",
    "\u01ea\u00f6\u0002\u0f79\u0f78\u0003\u0002\u0002\u0002\u0f79\u0f7a\u0003",
    "\u0002\u0002\u0002\u0f7a\u0f7c\u0003\u0002\u0002\u0002\u0f7b\u0f7d\u0005",
    "\u01f2\u00fa\u0002\u0f7c\u0f7b\u0003\u0002\u0002\u0002\u0f7c\u0f7d\u0003",
    "\u0002\u0002\u0002\u0f7d\u0f7f\u0003\u0002\u0002\u0002\u0f7e\u0f80\u0005",
    "\u01d2\u00ea\u0002\u0f7f\u0f7e\u0003\u0002\u0002\u0002\u0f7f\u0f80\u0003",
    "\u0002\u0002\u0002\u0f80\u0f82\u0003\u0002\u0002\u0002\u0f81\u0f83\u0005",
    "\u028c\u0147\u0002\u0f82\u0f81\u0003\u0002\u0002\u0002\u0f82\u0f83\u0003",
    "\u0002\u0002\u0002\u0f83\u021d\u0003\u0002\u0002\u0002\u0f84\u0f85\u0007",
    "U\u0002\u0002\u0f85\u0f87\u00073\u0002\u0002\u0f86\u0f88\u0005\u01fe",
    "\u0100\u0002\u0f87\u0f86\u0003\u0002\u0002\u0002\u0f87\u0f88\u0003\u0002",
    "\u0002\u0002\u0f88\u0f89\u0003\u0002\u0002\u0002\u0f89\u0f8a\u0005\u0006",
    "\u0004\u0002\u0f8a\u0f8b\u0007)\u0002\u0002\u0f8b\u0f8c\u0005\u0010",
    "\t\u0002\u0f8c\u0f96\u0003\u0002\u0002\u0002\u0f8d\u0f8e\u0007U\u0002",
    "\u0002\u0f8e\u0f8f\u0007\u01d4\u0002\u0002\u0f8f\u0f91\u00073\u0002",
    "\u0002\u0f90\u0f92\u0005\u01fe\u0100\u0002\u0f91\u0f90\u0003\u0002\u0002",
    "\u0002\u0f91\u0f92\u0003\u0002\u0002\u0002\u0f92\u0f93\u0003\u0002\u0002",
    "\u0002\u0f93\u0f94\u0007)\u0002\u0002\u0f94\u0f96\u0005\u0010\t\u0002",
    "\u0f95\u0f84\u0003\u0002\u0002\u0002\u0f95\u0f8d\u0003\u0002\u0002\u0002",
    "\u0f96\u021f\u0003\u0002\u0002\u0002\u0f97\u0f98\u0007U\u0002\u0002",
    "\u0f98\u0f99\u0005\u0226\u0114\u0002\u0f99\u0f9b\u0007\u00ba\u0002\u0002",
    "\u0f9a\u0f9c\u0005\u01fe\u0100\u0002\u0f9b\u0f9a\u0003\u0002\u0002\u0002",
    "\u0f9b\u0f9c\u0003\u0002\u0002\u0002\u0f9c\u0f9d\u0003\u0002\u0002\u0002",
    "\u0f9d\u0f9f\u0005\u0006\u0004\u0002\u0f9e\u0fa0\u0005\u0228\u0115\u0002",
    "\u0f9f\u0f9e\u0003\u0002\u0002\u0002\u0f9f\u0fa0\u0003\u0002\u0002\u0002",
    "\u0fa0\u0221\u0003\u0002\u0002\u0002\u0fa1\u0fa2\u0007\u00bc\u0002\u0002",
    "\u0fa2\u0fa3\u0007\u00ba\u0002\u0002\u0fa3\u0223\u0003\u0002\u0002\u0002",
    "\u0fa4\u0fa5\u0007U\u0002\u0002\u0fa5\u0fa6\u0007\u00b9\u0002\u0002",
    "\u0fa6\u0fa8\u0007\u00bd\u0002\u0002\u0fa7\u0fa9\u0005\u01fe\u0100\u0002",
    "\u0fa8\u0fa7\u0003\u0002\u0002\u0002\u0fa8\u0fa9\u0003\u0002\u0002\u0002",
    "\u0fa9\u0faa\u0003\u0002\u0002\u0002\u0faa\u0fab\u0007\u021b\u0002\u0002",
    "\u0fab\u0225\u0003\u0002\u0002\u0002\u0fac\u0fad\t\u0016\u0002\u0002",
    "\u0fad\u0227\u0003\u0002\u0002\u0002\u0fae\u0faf\u0007\u00c6\u0002\u0002",
    "\u0faf\u0fb0\u0007\u00bb\u0002\u0002\u0fb0\u0229\u0003\u0002\u0002\u0002",
    "\u0fb1\u0fb2\u0007\u0125\u0002\u0002\u0fb2\u0fb3\u0007.\u0002\u0002",
    "\u0fb3\u0fb4\u0005J&\u0002\u0fb4\u0fb5\u0007\u0138\u0002\u0002\u0fb5",
    "\u0fbd\u0007\u0139\u0002\u0002\u0fb6\u0fbe\u0007\u0166\u0002\u0002\u0fb7",
    "\u0fbe\u0007\u0167\u0002\u0002\u0fb8\u0fb9\u0007\u0146\u0002\u0002\u0fb9",
    "\u0fbb\u00072\u0002\u0002\u0fba\u0fbc\u0005> \u0002\u0fbb\u0fba\u0003",
    "\u0002\u0002\u0002\u0fbb\u0fbc\u0003\u0002\u0002\u0002\u0fbc\u0fbe\u0003",
    "\u0002\u0002\u0002\u0fbd\u0fb6\u0003\u0002\u0002\u0002\u0fbd\u0fb7\u0003",
    "\u0002\u0002\u0002\u0fbd\u0fb8\u0003\u0002\u0002\u0002\u0fbd\u0fbe\u0003",
    "\u0002\u0002\u0002\u0fbe\u022b\u0003\u0002\u0002\u0002\u0fbf\u0fc0\u0007",
    "\u0119\u0002\u0002\u0fc0\u0fc1\u0007.\u0002\u0002\u0fc1\u0fc3\u0005",
    "\u0010\t\u0002\u0fc2\u0fc4\u0005\u001a\u000e\u0002\u0fc3\u0fc2\u0003",
    "\u0002\u0002\u0002\u0fc3\u0fc4\u0003\u0002\u0002\u0002\u0fc4\u0fc5\u0003",
    "\u0002\u0002\u0002\u0fc5\u0fc6\u0005\u028a\u0146\u0002\u0fc6\u022d\u0003",
    "\u0002\u0002\u0002\u0fc7\u0fc8\u0007\u0119\u0002\u0002\u0fc8\u0fc9\u0007",
    "\u0110\u0002\u0002\u0fc9\u0fca\u0007\u021b\u0002\u0002\u0fca\u0fcb\u0005",
    "\u028a\u0146\u0002\u0fcb\u022f\u0003\u0002\u0002\u0002\u0fcc\u0fcd\u0007",
    "\u011b\u0002\u0002\u0fcd\u0fce\u0007.\u0002\u0002\u0fce\u0fd0\u0005",
    "\u0010\t\u0002\u0fcf\u0fd1\u0005\u001a\u000e\u0002\u0fd0\u0fcf\u0003",
    "\u0002\u0002\u0002\u0fd0\u0fd1\u0003\u0002\u0002\u0002\u0fd1\u0231\u0003",
    "\u0002\u0002\u0002\u0fd2\u0fd3\u0007\u011b\u0002\u0002\u0fd3\u0fd4\u0007",
    "\u0110\u0002\u0002\u0fd4\u0fd5\u0007\u021b\u0002\u0002\u0fd5\u0233\u0003",
    "\u0002\u0002\u0002\u0fd6\u0fd7\u0007L\u0002\u0002\u0fd7\u0fd8\u0007",
    "\u016b\u0002\u0002\u0fd8\u0fd9\u0005\u0006\u0004\u0002\u0fd9\u0235\u0003",
    "\u0002\u0002\u0002\u0fda\u0fdb\u0007U\u0002\u0002\u0fdb\u0fdc\u0007",
    "\u016b\u0002\u0002\u0fdc\u0fdd\u0005\u0006\u0004\u0002\u0fdd\u0237\u0003",
    "\u0002\u0002\u0002\u0fde\u0fdf\u0007\u0115\u0002\u0002\u0fdf\u0fe1\u0005",
    "\u027a\u013e\u0002\u0fe0\u0fe2\u0005\u0280\u0141\u0002\u0fe1\u0fe0\u0003",
    "\u0002\u0002\u0002\u0fe1\u0fe2\u0003\u0002\u0002\u0002\u0fe2\u0fe3\u0003",
    "\u0002\u0002\u0002\u0fe3\u0fe4\u0007Z\u0002\u0002\u0fe4\u0fe6\u0005",
    "\u0286\u0144\u0002\u0fe5\u0fe7\u0005\u026a\u0136\u0002\u0fe6\u0fe5\u0003",
    "\u0002\u0002\u0002\u0fe6\u0fe7\u0003\u0002\u0002\u0002\u0fe7\u0239\u0003",
    "\u0002\u0002\u0002\u0fe8\u0fea\u0007\u0116\u0002\u0002\u0fe9\u0feb\u0005",
    "\u0278\u013d\u0002\u0fea\u0fe9\u0003\u0002\u0002\u0002\u0fea\u0feb\u0003",
    "\u0002\u0002\u0002\u0feb\u0fec\u0003\u0002\u0002\u0002\u0fec\u0fee\u0005",
    "\u027a\u013e\u0002\u0fed\u0fef\u0005\u0280\u0141\u0002\u0fee\u0fed\u0003",
    "\u0002\u0002\u0002\u0fee\u0fef\u0003\u0002\u0002\u0002\u0fef\u0ff0\u0003",
    "\u0002\u0002\u0002\u0ff0\u0ff1\u0007\u0017\u0002\u0002\u0ff1\u0ff2\u0005",
    "\u0286\u0144\u0002\u0ff2\u023b\u0003\u0002\u0002\u0002\u0ff3\u0ff4\u0007",
    "8\u0002\u0002\u0ff4\u0ff6\u0007\u0169\u0002\u0002\u0ff5\u0ff7\u0005",
    "\u0266\u0134\u0002\u0ff6\u0ff5\u0003\u0002\u0002\u0002\u0ff6\u0ff7\u0003",
    "\u0002\u0002\u0002\u0ff7\u0ffa\u0003\u0002\u0002\u0002\u0ff8\u0ff9\u0007",
    ")\u0002\u0002\u0ff9\u0ffb\u0005\u0264\u0133\u0002\u0ffa\u0ff8\u0003",
    "\u0002\u0002\u0002\u0ffa\u0ffb\u0003\u0002\u0002\u0002\u0ffb\u023d\u0003",
    "\u0002\u0002\u0002\u0ffc\u0ffd\u00078\u0002\u0002\u0ffd\u0fff\u0007",
    "\u01b6\u0002\u0002\u0ffe\u1000\u0005\u0268\u0135\u0002\u0fff\u0ffe\u0003",
    "\u0002\u0002\u0002\u0fff\u1000\u0003\u0002\u0002\u0002\u1000\u1001\u0003",
    "\u0002\u0002\u0002\u1001\u1002\u0007)\u0002\u0002\u1002\u1003\u0007",
    ".\u0002\u0002\u1003\u1004\u0005\u0010\t\u0002\u1004\u023f\u0003\u0002",
    "\u0002\u0002\u1005\u1006\u00078\u0002\u0002\u1006\u1008\u0007\u0115",
    "\u0002\u0002\u1007\u1009\u0005\u0288\u0145\u0002\u1008\u1007\u0003\u0002",
    "\u0002\u0002\u1008\u1009\u0003\u0002\u0002\u0002\u1009\u100c\u0003\u0002",
    "\u0002\u0002\u100a\u100b\u0007)\u0002\u0002\u100b\u100d\u0005\u0272",
    "\u013a\u0002\u100c\u100a\u0003\u0002\u0002\u0002\u100c\u100d\u0003\u0002",
    "\u0002\u0002\u100d\u0241\u0003\u0002\u0002\u0002\u100e\u100f\u00078",
    "\u0002\u0002\u100f\u1010\u0007\u016b\u0002\u0002\u1010\u1011\u0007\u0115",
    "\u0002\u0002\u1011\u1012\u0005\u0288\u0145\u0002\u1012\u0243\u0003\u0002",
    "\u0002\u0002\u1013\u1014\u00078\u0002\u0002\u1014\u1015\u0007\u0171",
    "\u0002\u0002\u1015\u1016\u0005\u0006\u0004\u0002\u1016\u0245\u0003\u0002",
    "\u0002\u0002\u1017\u1018\u00078\u0002\u0002\u1018\u1019\u0007\u016c",
    "\u0002\u0002\u1019\u0247\u0003\u0002\u0002\u0002\u101a\u101b\u00078",
    "\u0002\u0002\u101b\u101f\u0007\u01e6\u0002\u0002\u101c\u101d\u0007\t",
    "\u0002\u0002\u101d\u1020\u0005\u02a0\u0151\u0002\u101e\u1020\u0005\u02a0",
    "\u0151\u0002\u101f\u101c\u0003\u0002\u0002\u0002\u101f\u101e\u0003\u0002",
    "\u0002\u0002\u101f\u1020\u0003\u0002\u0002\u0002\u1020\u0249\u0003\u0002",
    "\u0002\u0002\u1021\u1022\u00078\u0002\u0002\u1022\u1023\u0007\u01e7",
    "\u0002\u0002\u1023\u1024\u0007\u01e8\u0002\u0002\u1024\u024b\u0003\u0002",
    "\u0002\u0002\u1025\u1026\u0007\u0115\u0002\u0002\u1026\u1027\u0007\u0169",
    "\u0002\u0002\u1027\u102a\u0005\u0270\u0139\u0002\u1028\u1029\u0007)",
    "\u0002\u0002\u1029\u102b\u0005\u0264\u0133\u0002\u102a\u1028\u0003\u0002",
    "\u0002\u0002\u102a\u102b\u0003\u0002\u0002\u0002\u102b\u102e\u0003\u0002",
    "\u0002\u0002\u102c\u102d\u0007Z\u0002\u0002\u102d\u102f\u0005\u0266",
    "\u0134\u0002\u102e\u102c\u0003\u0002\u0002\u0002\u102e\u102f\u0003\u0002",
    "\u0002\u0002\u102f\u024d\u0003\u0002\u0002\u0002\u1030\u1031\u0007\u0116",
    "\u0002\u0002\u1031\u1034\u0007\u0169\u0002\u0002\u1032\u1033\u0007)",
    "\u0002\u0002\u1033\u1035\u0005\u0264\u0133\u0002\u1034\u1032\u0003\u0002",
    "\u0002\u0002\u1034\u1035\u0003\u0002\u0002\u0002\u1035\u1038\u0003\u0002",
    "\u0002\u0002\u1036\u1037\u0007\u0017\u0002\u0002\u1037\u1039\u0005\u0266",
    "\u0134\u0002\u1038\u1036\u0003\u0002\u0002\u0002\u1038\u1039\u0003\u0002",
    "\u0002\u0002\u1039\u024f\u0003\u0002\u0002\u0002\u103a\u103b\u0007\u0212",
    "\u0002\u0002\u103b\u0251\u0003\u0002\u0002\u0002\u103c\u103d\u0007\u0115",
    "\u0002\u0002\u103d\u103e\u0007\u01b6\u0002\u0002\u103e\u103f\u0005\u0250",
    "\u0129\u0002\u103f\u1040\u0007)\u0002\u0002\u1040\u1041\u0007.\u0002",
    "\u0002\u1041\u1042\u0005\u0010\t\u0002\u1042\u1043\u0007Z\u0002\u0002",
    "\u1043\u1044\u0005\u0268\u0135\u0002\u1044\u0253\u0003\u0002\u0002\u0002",
    "\u1045\u1046\u0007\u0116\u0002\u0002\u1046\u1047\u0007\u01b6\u0002\u0002",
    "\u1047\u1048\u0007)\u0002\u0002\u1048\u1049\u0007.\u0002\u0002\u1049",
    "\u104c\u0005\u0010\t\u0002\u104a\u104b\u0007\u0017\u0002\u0002\u104b",
    "\u104d\u0005\u0268\u0135\u0002\u104c\u104a\u0003\u0002\u0002\u0002\u104c",
    "\u104d\u0003\u0002\u0002\u0002\u104d\u0255\u0003\u0002\u0002\u0002\u104e",
    "\u1050\u0007\u0115\u0002\u0002\u104f\u1051\u0007\u016b\u0002\u0002\u1050",
    "\u104f\u0003\u0002\u0002\u0002\u1050\u1051\u0003\u0002\u0002\u0002\u1051",
    "\u1052\u0003\u0002\u0002\u0002\u1052\u1057\u0005\u0006\u0004\u0002\u1053",
    "\u1054\u0007\u01ee\u0002\u0002\u1054\u1056\u0005\u0006\u0004\u0002\u1055",
    "\u1053\u0003\u0002\u0002\u0002\u1056\u1059\u0003\u0002\u0002\u0002\u1057",
    "\u1055\u0003\u0002\u0002\u0002\u1057\u1058\u0003\u0002\u0002\u0002\u1058",
    "\u105a\u0003\u0002\u0002\u0002\u1059\u1057\u0003\u0002\u0002\u0002\u105a",
    "\u105b\u0007Z\u0002\u0002\u105b\u105d\u0005\u0286\u0144\u0002\u105c",
    "\u105e\u0005\u026c\u0137\u0002\u105d\u105c\u0003\u0002\u0002\u0002\u105d",
    "\u105e\u0003\u0002\u0002\u0002\u105e\u0257\u0003\u0002\u0002\u0002\u105f",
    "\u1061\u0007\u0116\u0002\u0002\u1060\u1062\u0005\u026e\u0138\u0002\u1061",
    "\u1060\u0003\u0002\u0002\u0002\u1061\u1062\u0003\u0002\u0002\u0002\u1062",
    "\u1064\u0003\u0002\u0002\u0002\u1063\u1065\u0007\u016b\u0002\u0002\u1064",
    "\u1063\u0003\u0002\u0002\u0002\u1064\u1065\u0003\u0002\u0002\u0002\u1065",
    "\u1066\u0003\u0002\u0002\u0002\u1066\u106b\u0005\u0006\u0004\u0002\u1067",
    "\u1068\u0007\u01ee\u0002\u0002\u1068\u106a\u0005\u0006\u0004\u0002\u1069",
    "\u1067\u0003\u0002\u0002\u0002\u106a\u106d\u0003\u0002\u0002\u0002\u106b",
    "\u1069\u0003\u0002\u0002\u0002\u106b\u106c\u0003\u0002\u0002\u0002\u106c",
    "\u106e\u0003\u0002\u0002\u0002\u106d\u106b\u0003\u0002\u0002\u0002\u106e",
    "\u106f\u0007\u0017\u0002\u0002\u106f\u1070\u0005\u0286\u0144\u0002\u1070",
    "\u0259\u0003\u0002\u0002\u0002\u1071\u1072\u00078\u0002\u0002\u1072",
    "\u1073\u0007\u015d\u0002\u0002\u1073\u1074\u0007\u016c\u0002\u0002\u1074",
    "\u025b\u0003\u0002\u0002\u0002\u1075\u1076\u0007\u018d\u0002\u0002\u1076",
    "\u1077\u0007\u01dc\u0002\u0002\u1077\u1078\u0007.\u0002\u0002\u1078",
    "\u1079\u0005\u0010\t\u0002\u1079\u025d\u0003\u0002\u0002\u0002\u107a",
    "\u107b\u0007\u018d\u0002\u0002\u107b\u107c\u0007\u01dc\u0002\u0002\u107c",
    "\u107d\u0007\u00ee\u0002\u0002\u107d\u107e\u0005\u0010\t\u0002\u107e",
    "\u025f\u0003\u0002\u0002\u0002\u107f\u1080\u0007\u018d\u0002\u0002\u1080",
    "\u1081\u0007\u01dc\u0002\u0002\u1081\u1082\u0007\u00f5\u0002\u0002\u1082",
    "\u1083\u0005\u0010\t\u0002\u1083\u0261\u0003\u0002\u0002\u0002\u1084",
    "\u1085\u0007\u00cc\u0002\u0002\u1085\u1086\u0007\u016b\u0002\u0002\u1086",
    "\u1087\u0005\u0006\u0004\u0002\u1087\u0263\u0003\u0002\u0002\u0002\u1088",
    "\u1089\u0007\u0110\u0002\u0002\u1089\u108d\u0005\u0006\u0004\u0002\u108a",
    "\u108b\u0007\u00b9\u0002\u0002\u108b\u108d\u0007\u01a9\u0002\u0002\u108c",
    "\u1088\u0003\u0002\u0002\u0002\u108c\u108a\u0003\u0002\u0002\u0002\u108d",
    "\u0265\u0003\u0002\u0002\u0002\u108e\u108f\u0007\u0168\u0002\u0002\u108f",
    "\u1090\u0005\u0006\u0004\u0002\u1090\u0267\u0003\u0002\u0002\u0002\u1091",
    "\u1092\u0007\u0168\u0002\u0002\u1092\u1096\u0005\u0006\u0004\u0002\u1093",
    "\u1094\u0007\u0011\u0002\u0002\u1094\u1096\u0005\u0006\u0004\u0002\u1095",
    "\u1091\u0003\u0002\u0002\u0002\u1095\u1093\u0003\u0002\u0002\u0002\u1096",
    "\u0269\u0003\u0002\u0002\u0002\u1097\u1098\u0007\u00c6\u0002\u0002\u1098",
    "\u1099\u0007\u0115\u0002\u0002\u1099\u109a\u0007\u013b\u0002\u0002\u109a",
    "\u026b\u0003\u0002\u0002\u0002\u109b\u109c\u0007\u00c6\u0002\u0002\u109c",
    "\u109d\u0007\u016f\u0002\u0002\u109d\u109e\u0007\u013b\u0002\u0002\u109e",
    "\u026d\u0003\u0002\u0002\u0002\u109f\u10a0\u0007\u016f\u0002\u0002\u10a0",
    "\u10a1\u0007\u013b\u0002\u0002\u10a1\u10a2\u0007\u0146\u0002\u0002\u10a2",
    "\u026f\u0003\u0002\u0002\u0002\u10a3\u10a4\t\u0017\u0002\u0002\u10a4",
    "\u0271\u0003\u0002\u0002\u0002\u10a5\u10aa\u0007\u0005\u0002\u0002\u10a6",
    "\u10a7\u0007\u0005\u0002\u0002\u10a7\u10aa\u0007\u01c0\u0002\u0002\u10a8",
    "\u10aa\u0005\u0276\u013c\u0002\u10a9\u10a5\u0003\u0002\u0002\u0002\u10a9",
    "\u10a6\u0003\u0002\u0002\u0002\u10a9\u10a8\u0003\u0002\u0002\u0002\u10aa",
    "\u0273\u0003\u0002\u0002\u0002\u10ab\u10ad\u0007.\u0002\u0002\u10ac",
    "\u10ab\u0003\u0002\u0002\u0002\u10ac\u10ad\u0003\u0002\u0002\u0002\u10ad",
    "\u10ae\u0003\u0002\u0002\u0002\u10ae\u10af\u0005\u0006\u0004\u0002\u10af",
    "\u10b0\u0007\u01ec\u0002\u0002\u10b0\u10b1\u0007\u0202\u0002\u0002\u10b1",
    "\u0275\u0003\u0002\u0002\u0002\u10b2\u10b3\t\u000e\u0002\u0002\u10b3",
    "\u10d3\u0005\u0006\u0004\u0002\u10b4\u10b5\t\u0004\u0002\u0002\u10b5",
    "\u10d3\u0005\u0006\u0004\u0002\u10b6\u10d3\u0005\u0274\u013b\u0002\u10b7",
    "\u10b9\u0007.\u0002\u0002\u10b8\u10b7\u0003\u0002\u0002\u0002\u10b8",
    "\u10b9\u0003\u0002\u0002\u0002\u10b9\u10ba\u0003\u0002\u0002\u0002\u10ba",
    "\u10d3\u0007\u0202\u0002\u0002\u10bb\u10bd\u0007.\u0002\u0002\u10bc",
    "\u10bb\u0003\u0002\u0002\u0002\u10bc\u10bd\u0003\u0002\u0002\u0002\u10bd",
    "\u10be\u0003\u0002\u0002\u0002\u10be\u10bf\u0007\u0202\u0002\u0002\u10bf",
    "\u10c0\u0007\u01ec\u0002\u0002\u10c0\u10d3\u0007\u0202\u0002\u0002\u10c1",
    "\u10c3\u0007.\u0002\u0002\u10c2\u10c1\u0003\u0002\u0002\u0002\u10c2",
    "\u10c3\u0003\u0002\u0002\u0002\u10c3\u10c4\u0003\u0002\u0002\u0002\u10c4",
    "\u10c9\u0005\u0010\t\u0002\u10c5\u10c6\u0007\u01f0\u0002\u0002\u10c6",
    "\u10c7\u0005> \u0002\u10c7\u10c8\u0007\u01f1\u0002\u0002\u10c8\u10ca",
    "\u0003\u0002\u0002\u0002\u10c9\u10c5\u0003\u0002\u0002\u0002\u10c9\u10ca",
    "\u0003\u0002\u0002\u0002\u10ca\u10cc\u0003\u0002\u0002\u0002\u10cb\u10cd",
    "\u0005\u001a\u000e\u0002\u10cc\u10cb\u0003\u0002\u0002\u0002\u10cc\u10cd",
    "\u0003\u0002\u0002\u0002\u10cd\u10d3\u0003\u0002\u0002\u0002\u10ce\u10cf",
    "\u0007\u01b4\u0002\u0002\u10cf\u10d3\u0007\u0212\u0002\u0002\u10d0\u10d1",
    "\u0007\u01b2\u0002\u0002\u10d1\u10d3\u0005\u0006\u0004\u0002\u10d2\u10b2",
    "\u0003\u0002\u0002\u0002\u10d2\u10b4\u0003\u0002\u0002\u0002\u10d2\u10b6",
    "\u0003\u0002\u0002\u0002\u10d2\u10b8\u0003\u0002\u0002\u0002\u10d2\u10bc",
    "\u0003\u0002\u0002\u0002\u10d2\u10c2\u0003\u0002\u0002\u0002\u10d2\u10ce",
    "\u0003\u0002\u0002\u0002\u10d2\u10d0\u0003\u0002\u0002\u0002\u10d3\u0277",
    "\u0003\u0002\u0002\u0002\u10d4\u10d5\u0007\u0115\u0002\u0002\u10d5\u10d6",
    "\u0007\u013b\u0002\u0002\u10d6\u10d7\u0007\u0146\u0002\u0002\u10d7\u0279",
    "\u0003\u0002\u0002\u0002\u10d8\u10dd\u0005\u027c\u013f\u0002\u10d9\u10da",
    "\u0007\u01ee\u0002\u0002\u10da\u10dc\u0005\u027c\u013f\u0002\u10db\u10d9",
    "\u0003\u0002\u0002\u0002\u10dc\u10df\u0003\u0002\u0002\u0002\u10dd\u10db",
    "\u0003\u0002\u0002\u0002\u10dd\u10de\u0003\u0002\u0002\u0002\u10de\u027b",
    "\u0003\u0002\u0002\u0002\u10df\u10dd\u0003\u0002\u0002\u0002\u10e0\u10e5",
    "\u0005\u027e\u0140\u0002\u10e1\u10e2\u0007\u01f0\u0002\u0002\u10e2\u10e3",
    "\u0005> \u0002\u10e3\u10e4\u0007\u01f1\u0002\u0002\u10e4\u10e6\u0003",
    "\u0002\u0002\u0002\u10e5\u10e1\u0003\u0002\u0002\u0002\u10e5\u10e6\u0003",
    "\u0002\u0002\u0002\u10e6\u027d\u0003\u0002\u0002\u0002\u10e7\u10f8\u0007",
    "\u0005\u0002\u0002\u10e8\u10f8\u0007N\u0002\u0002\u10e9\u10f8\u0007",
    "\u013e\u0002\u0002\u10ea\u10f8\u0007L\u0002\u0002\u10eb\u10ec\u0007",
    "L\u0002\u0002\u10ec\u10f8\t\u0004\u0002\u0002\u10ed\u10f8\u0007U\u0002",
    "\u0002\u10ee\u10f8\u00073\u0002\u0002\u10ef\u10f8\u0007\u0119\u0002",
    "\u0002\u10f0\u10f8\u0007\u0019\u0002\u0002\u10f1\u10f8\u0007\u013d\u0002",
    "\u0002\u10f2\u10f8\u0007\u001b\u0002\u0002\u10f3\u10f8\u0007\u0106\u0002",
    "\u0002\u10f4\u10f8\u0007\u01a2\u0002\u0002\u10f5\u10f8\u0007\u01a3\u0002",
    "\u0002\u10f6\u10f8\u0007\u01a4\u0002\u0002\u10f7\u10e7\u0003\u0002\u0002",
    "\u0002\u10f7\u10e8\u0003\u0002\u0002\u0002\u10f7\u10e9\u0003\u0002\u0002",
    "\u0002\u10f7\u10ea\u0003\u0002\u0002\u0002\u10f7\u10eb\u0003\u0002\u0002",
    "\u0002\u10f7\u10ed\u0003\u0002\u0002\u0002\u10f7\u10ee\u0003\u0002\u0002",
    "\u0002\u10f7\u10ef\u0003\u0002\u0002\u0002\u10f7\u10f0\u0003\u0002\u0002",
    "\u0002\u10f7\u10f1\u0003\u0002\u0002\u0002\u10f7\u10f2\u0003\u0002\u0002",
    "\u0002\u10f7\u10f3\u0003\u0002\u0002\u0002\u10f7\u10f4\u0003\u0002\u0002",
    "\u0002\u10f7\u10f5\u0003\u0002\u0002\u0002\u10f7\u10f6\u0003\u0002\u0002",
    "\u0002\u10f8\u027f\u0003\u0002\u0002\u0002\u10f9\u10fa\u0007)\u0002",
    "\u0002\u10fa\u10fb\u0005\u0284\u0143\u0002\u10fb\u0281\u0003\u0002\u0002",
    "\u0002\u10fc\u1101\u0007\u0110\u0002\u0002\u10fd\u10ff\u0007.\u0002",
    "\u0002\u10fe\u10fd\u0003\u0002\u0002\u0002\u10fe\u10ff\u0003\u0002\u0002",
    "\u0002\u10ff\u1101\u0003\u0002\u0002\u0002\u1100\u10fc\u0003\u0002\u0002",
    "\u0002\u1100\u10fe\u0003\u0002\u0002\u0002\u1101\u0283\u0003\u0002\u0002",
    "\u0002\u1102\u1103\t\u000e\u0002\u0002\u1103\u111d\u0005\u0006\u0004",
    "\u0002\u1104\u111d\u0005\u0274\u013b\u0002\u1105\u1107\u0007.\u0002",
    "\u0002\u1106\u1105\u0003\u0002\u0002\u0002\u1106\u1107\u0003\u0002\u0002",
    "\u0002\u1107\u1108\u0003\u0002\u0002\u0002\u1108\u111d\u0007\u0202\u0002",
    "\u0002\u1109\u110b\u0007.\u0002\u0002\u110a\u1109\u0003\u0002\u0002",
    "\u0002\u110a\u110b\u0003\u0002\u0002\u0002\u110b\u110c\u0003\u0002\u0002",
    "\u0002\u110c\u110d\u0007\u0202\u0002\u0002\u110d\u110e\u0007\u01ec\u0002",
    "\u0002\u110e\u111d\u0007\u0202\u0002\u0002\u110f\u1111\u0007.\u0002",
    "\u0002\u1110\u110f\u0003\u0002\u0002\u0002\u1110\u1111\u0003\u0002\u0002",
    "\u0002\u1111\u1112\u0003\u0002\u0002\u0002\u1112\u1114\u0005\u0010\t",
    "\u0002\u1113\u1115\u0005\u001a\u000e\u0002\u1114\u1113\u0003\u0002\u0002",
    "\u0002\u1114\u1115\u0003\u0002\u0002\u0002\u1115\u111d\u0003\u0002\u0002",
    "\u0002\u1116\u1117\t\u0004\u0002\u0002\u1117\u111d\u0005\u0006\u0004",
    "\u0002\u1118\u1119\u0007\u01b4\u0002\u0002\u1119\u111d\u0007\u0212\u0002",
    "\u0002\u111a\u111b\u0007\u01b2\u0002\u0002\u111b\u111d\u0005\u0006\u0004",
    "\u0002\u111c\u1102\u0003\u0002\u0002\u0002\u111c\u1104\u0003\u0002\u0002",
    "\u0002\u111c\u1106\u0003\u0002\u0002\u0002\u111c\u110a\u0003\u0002\u0002",
    "\u0002\u111c\u1110\u0003\u0002\u0002\u0002\u111c\u1116\u0003\u0002\u0002",
    "\u0002\u111c\u1118\u0003\u0002\u0002\u0002\u111c\u111a\u0003\u0002\u0002",
    "\u0002\u111d\u0285\u0003\u0002\u0002\u0002\u111e\u1123\u0005\u0288\u0145",
    "\u0002\u111f\u1120\u0007\u01ee\u0002\u0002\u1120\u1122\u0005\u0288\u0145",
    "\u0002\u1121\u111f\u0003\u0002\u0002\u0002\u1122\u1125\u0003\u0002\u0002",
    "\u0002\u1123\u1121\u0003\u0002\u0002\u0002\u1123\u1124\u0003\u0002\u0002",
    "\u0002\u1124\u0287\u0003\u0002\u0002\u0002\u1125\u1123\u0003\u0002\u0002",
    "\u0002\u1126\u1127\u0007\u0168\u0002\u0002\u1127\u112d\u0005\u0006\u0004",
    "\u0002\u1128\u1129\u0007\u0011\u0002\u0002\u1129\u112d\u0005\u0006\u0004",
    "\u0002\u112a\u112b\u0007\u016b\u0002\u0002\u112b\u112d\u0005\u0006\u0004",
    "\u0002\u112c\u1126\u0003\u0002\u0002\u0002\u112c\u1128\u0003\u0002\u0002",
    "\u0002\u112c\u112a\u0003\u0002\u0002\u0002\u112d\u0289\u0003\u0002\u0002",
    "\u0002\u112e\u112f\t\u0018\u0002\u0002\u112f\u028b\u0003\u0002\u0002",
    "\u0002\u1130\u1131\u0007[\u0002\u0002\u1131\u1132\u0007\u0212\u0002",
    "\u0002\u1132\u028d\u0003\u0002\u0002\u0002\u1133\u1134\u0007\u00c6\u0002",
    "\u0002\u1134\u1135\u0007\u00c8\u0002\u0002\u1135\u1136\u00075\u0002",
    "\u0002\u1136\u028f\u0003\u0002\u0002\u0002\u1137\u1138\u0007\u010f\u0002",
    "\u0002\u1138\u1139\u0007.\u0002\u0002\u1139\u113a\u0005\u0010\t\u0002",
    "\u113a\u0291\u0003\u0002\u0002\u0002\u113b\u113c\u0007\u00cf\u0002\u0002",
    "\u113c\u113d\u0005\u0294\u014b\u0002\u113d\u0293\u0003\u0002\u0002\u0002",
    "\u113e\u113f\u0007\u01f0\u0002\u0002\u113f\u1140\u0005\u0296\u014c\u0002",
    "\u1140\u1141\u0007\u01f1\u0002\u0002\u1141\u0295\u0003\u0002\u0002\u0002",
    "\u1142\u1147\u0005\f\u0007\u0002\u1143\u1144\u0007\u01ee\u0002\u0002",
    "\u1144\u1146\u0005\f\u0007\u0002\u1145\u1143\u0003\u0002\u0002\u0002",
    "\u1146\u1149\u0003\u0002\u0002\u0002\u1147\u1145\u0003\u0002\u0002\u0002",
    "\u1147\u1148\u0003\u0002\u0002\u0002\u1148\u0297\u0003\u0002\u0002\u0002",
    "\u1149\u1147\u0003\u0002\u0002\u0002\u114a\u1154\u0005\u0006\u0004\u0002",
    "\u114b\u1150\u0007\u01ec\u0002\u0002\u114c\u1151\u0007\u00d1\u0002\u0002",
    "\u114d\u1151\u0007\u0095\u0002\u0002\u114e\u1151\u0007\u00d0\u0002\u0002",
    "\u114f\u1151\u0005\u0006\u0004\u0002\u1150\u114c\u0003\u0002\u0002\u0002",
    "\u1150\u114d\u0003\u0002\u0002\u0002\u1150\u114e\u0003\u0002\u0002\u0002",
    "\u1150\u114f\u0003\u0002\u0002\u0002\u1151\u1153\u0003\u0002\u0002\u0002",
    "\u1152\u114b\u0003\u0002\u0002\u0002\u1153\u1156\u0003\u0002\u0002\u0002",
    "\u1154\u1152\u0003\u0002\u0002\u0002\u1154\u1155\u0003\u0002\u0002\u0002",
    "\u1155\u0299\u0003\u0002\u0002\u0002\u1156\u1154\u0003\u0002\u0002\u0002",
    "\u1157\u1161\u0005\u0006\u0004\u0002\u1158\u115d\u0007\u01ec\u0002\u0002",
    "\u1159\u115e\u0007\u00d1\u0002\u0002\u115a\u115e\u0007\u0095\u0002\u0002",
    "\u115b\u115e\u0007\u00d0\u0002\u0002\u115c\u115e\u0005\u0006\u0004\u0002",
    "\u115d\u1159\u0003\u0002\u0002\u0002\u115d\u115a\u0003\u0002\u0002\u0002",
    "\u115d\u115b\u0003\u0002\u0002\u0002\u115d\u115c\u0003\u0002\u0002\u0002",
    "\u115e\u1160\u0003\u0002\u0002\u0002\u115f\u1158\u0003\u0002\u0002\u0002",
    "\u1160\u1163\u0003\u0002\u0002\u0002\u1161\u115f\u0003\u0002\u0002\u0002",
    "\u1161\u1162\u0003\u0002\u0002\u0002\u1162\u1165\u0003\u0002\u0002\u0002",
    "\u1163\u1161\u0003\u0002\u0002\u0002\u1164\u1166\u0005\u0006\u0004\u0002",
    "\u1165\u1164\u0003\u0002\u0002\u0002\u1165\u1166\u0003\u0002\u0002\u0002",
    "\u1166\u029b\u0003\u0002\u0002\u0002\u1167\u1169\u0005\u0298\u014d\u0002",
    "\u1168\u116a\u0005\u001a\u000e\u0002\u1169\u1168\u0003\u0002\u0002\u0002",
    "\u1169\u116a\u0003\u0002\u0002\u0002\u116a\u029d\u0003\u0002\u0002\u0002",
    "\u116b\u116d\u0005\u029a\u014e\u0002\u116c\u116e\u0005\u001a\u000e\u0002",
    "\u116d\u116c\u0003\u0002\u0002\u0002\u116d\u116e\u0003\u0002\u0002\u0002",
    "\u116e\u029f\u0003\u0002\u0002\u0002\u116f\u1172\u0005\u0006\u0004\u0002",
    "\u1170\u1172\u0007\u0212\u0002\u0002\u1171\u116f\u0003\u0002\u0002\u0002",
    "\u1171\u1170\u0003\u0002\u0002\u0002\u1172\u02a1\u0003\u0002\u0002\u0002",
    "\u1173\u1174\t\u0019\u0002\u0002\u1174\u02a3\u0003\u0002\u0002\u0002",
    "\u1175\u1179\u0005\u02a2\u0152\u0002\u1176\u1179\u0007\u0212\u0002\u0002",
    "\u1177\u1179\u0005\u0006\u0004\u0002\u1178\u1175\u0003\u0002\u0002\u0002",
    "\u1178\u1176\u0003\u0002\u0002\u0002\u1178\u1177\u0003\u0002\u0002\u0002",
    "\u1179\u02a5\u0003\u0002\u0002\u0002\u117a\u1180\u0005\u02a8\u0155\u0002",
    "\u117b\u1180\u0005\u0568\u02b5\u0002\u117c\u1180\u0005\u02b6\u015c\u0002",
    "\u117d\u1180\u0005\u02b8\u015d\u0002\u117e\u1180\u0005\u02b4\u015b\u0002",
    "\u117f\u117a\u0003\u0002\u0002\u0002\u117f\u117b\u0003\u0002\u0002\u0002",
    "\u117f\u117c\u0003\u0002\u0002\u0002\u117f\u117d\u0003\u0002\u0002\u0002",
    "\u117f\u117e\u0003\u0002\u0002\u0002\u1180\u02a7\u0003\u0002\u0002\u0002",
    "\u1181\u1183\u0007L\u0002\u0002\u1182\u1184\u0005 \u0011\u0002\u1183",
    "\u1182\u0003\u0002\u0002\u0002\u1183\u1184\u0003\u0002\u0002\u0002\u1184",
    "\u118b\u0003\u0002\u0002\u0002\u1185\u118c\u0005\u02aa\u0156\u0002\u1186",
    "\u118c\u0005\u02b0\u0159\u0002\u1187\u118c\u0005\u0218\u010d\u0002\u1188",
    "\u118c\u0005\u0174\u00bb\u0002\u1189\u118c\u0005\u0180\u00c1\u0002\u118a",
    "\u118c\u0005\u0566\u02b4\u0002\u118b\u1185\u0003\u0002\u0002\u0002\u118b",
    "\u1186\u0003\u0002\u0002\u0002\u118b\u1187\u0003\u0002\u0002\u0002\u118b",
    "\u1188\u0003\u0002\u0002\u0002\u118b\u1189\u0003\u0002\u0002\u0002\u118b",
    "\u118a\u0003\u0002\u0002\u0002\u118c\u02a9\u0003\u0002\u0002\u0002\u118d",
    "\u118f\u0007\u010d\u0002\u0002\u118e\u1190\u0005\u0200\u0101\u0002\u118f",
    "\u118e\u0003\u0002\u0002\u0002\u118f\u1190\u0003\u0002\u0002\u0002\u1190",
    "\u1191\u0003\u0002\u0002\u0002\u1191\u1196\u0005\u0010\t\u0002\u1192",
    "\u1193\u0007\u01f0\u0002\u0002\u1193\u1194\u0005,\u0017\u0002\u1194",
    "\u1195\u0007\u01f1\u0002\u0002\u1195\u1197\u0003\u0002\u0002\u0002\u1196",
    "\u1192\u0003\u0002\u0002\u0002\u1196\u1197\u0003\u0002\u0002\u0002\u1197",
    "\u1199\u0003\u0002\u0002\u0002\u1198\u119a\u0005\u01b4\u00db\u0002\u1199",
    "\u1198\u0003\u0002\u0002\u0002\u1199\u119a\u0003\u0002\u0002\u0002\u119a",
    "\u119c\u0003\u0002\u0002\u0002\u119b\u119d\u0005\u02b2\u015a\u0002\u119c",
    "\u119b\u0003\u0002\u0002\u0002\u119c\u119d\u0003\u0002\u0002\u0002\u119d",
    "\u119f\u0003\u0002\u0002\u0002\u119e\u11a0\u0005\u01d2\u00ea\u0002\u119f",
    "\u119e\u0003\u0002\u0002\u0002\u119f\u11a0\u0003\u0002\u0002\u0002\u11a0",
    "\u11a1\u0003\u0002\u0002\u0002\u11a1\u11a2\u0007\u0018\u0002\u0002\u11a2",
    "\u11a3\u0005\u03e6\u01f4\u0002\u11a3\u02ab\u0003\u0002\u0002\u0002\u11a4",
    "\u11a5\u0007\u00aa\u0002\u0002\u11a5\u11a6\u0007\u01c3\u0002\u0002\u11a6",
    "\u02ad\u0003\u0002\u0002\u0002\u11a7\u11a8\u0007\u00ab\u0002\u0002\u11a8",
    "\u11a9\u0007\u01c3\u0002\u0002\u11a9\u02af\u0003\u0002\u0002\u0002\u11aa",
    "\u11ab\u0007\u0112\u0002\u0002\u11ab\u11ad\u0007\u010d\u0002\u0002\u11ac",
    "\u11ae\u0005\u0200\u0101\u0002\u11ad\u11ac\u0003\u0002\u0002\u0002\u11ad",
    "\u11ae\u0003\u0002\u0002\u0002\u11ae\u11af\u0003\u0002\u0002\u0002\u11af",
    "\u11b4\u0005\u0010\t\u0002\u11b0\u11b1\u0007\u01f0\u0002\u0002\u11b1",
    "\u11b2\u0005,\u0017\u0002\u11b2\u11b3\u0007\u01f1\u0002\u0002\u11b3",
    "\u11b5\u0003\u0002\u0002\u0002\u11b4\u11b0\u0003\u0002\u0002\u0002\u11b4",
    "\u11b5\u0003\u0002\u0002\u0002\u11b5\u11b7\u0003\u0002\u0002\u0002\u11b6",
    "\u11b8\u0005\u02ac\u0157\u0002\u11b7\u11b6\u0003\u0002\u0002\u0002\u11b7",
    "\u11b8\u0003\u0002\u0002\u0002\u11b8\u11ba\u0003\u0002\u0002\u0002\u11b9",
    "\u11bb\u0005\u01b4\u00db\u0002\u11ba\u11b9\u0003\u0002\u0002\u0002\u11ba",
    "\u11bb\u0003\u0002\u0002\u0002\u11bb\u11bd\u0003\u0002\u0002\u0002\u11bc",
    "\u11be\u0005\u02b2\u015a\u0002\u11bd\u11bc\u0003\u0002\u0002\u0002\u11bd",
    "\u11be\u0003\u0002\u0002\u0002\u11be\u11c0\u0003\u0002\u0002\u0002\u11bf",
    "\u11c1\u0005\u01d2\u00ea\u0002\u11c0\u11bf\u0003\u0002\u0002\u0002\u11c0",
    "\u11c1\u0003\u0002\u0002\u0002\u11c1\u11c2\u0003\u0002\u0002\u0002\u11c2",
    "\u11c3\u0007\u0018\u0002\u0002\u11c3\u11c4\u0005\u03e6\u01f4\u0002\u11c4",
    "\u02b1\u0003\u0002\u0002\u0002\u11c5\u11c6\u0007x\u0002\u0002\u11c6",
    "\u11c7\u0007)\u0002\u0002\u11c7\u11c8\u0007\u01f0\u0002\u0002\u11c8",
    "\u11c9\u0005> \u0002\u11c9\u11ca\u0007\u01f1\u0002\u0002\u11ca\u02b3",
    "\u0003\u0002\u0002\u0002\u11cb\u11cc\u00078\u0002\u0002\u11cc\u11cd",
    "\u0007\u016a\u0002\u0002\u11cd\u11ce\u0005\u02be\u0160\u0002\u11ce\u02b5",
    "\u0003\u0002\u0002\u0002\u11cf\u11d0\u0007\u0115\u0002\u0002\u11d0\u11d1",
    "\u0007\u016a\u0002\u0002\u11d1\u11d2\u0005\u02be\u0160\u0002\u11d2\u11d3",
    "\u0005\u02ba\u015e\u0002\u11d3\u02b7\u0003\u0002\u0002\u0002\u11d4\u11d5",
    "\u0007\u0116\u0002\u0002\u11d5\u11d6\u0007\u016a\u0002\u0002\u11d6\u11d7",
    "\u0005\u02be\u0160\u0002\u11d7\u11d8\u0005\u02bc\u015f\u0002\u11d8\u02b9",
    "\u0003\u0002\u0002\u0002\u11d9\u11da\u0007\u0146\u0002\u0002\u11da\u11db",
    "\u0007\u008c\u0002\u0002\u11db\u11e2\u0005\u03ca\u01e6\u0002\u11dc\u11dd",
    "\u0007\u0146\u0002\u0002\u11dd\u11de\u0007P\u0002\u0002\u11de\u11df",
    "\u0005@!\u0002\u11df\u11e0\u0005\u036c\u01b7\u0002\u11e0\u11e2\u0003",
    "\u0002\u0002\u0002\u11e1\u11d9\u0003\u0002\u0002\u0002\u11e1\u11dc\u0003",
    "\u0002\u0002\u0002\u11e2\u02bb\u0003\u0002\u0002\u0002\u11e3\u11e4\u0007",
    "\u0146\u0002\u0002\u11e4\u11eb\u0007\u008c\u0002\u0002\u11e5\u11e6\u0007",
    "\u0146\u0002\u0002\u11e6\u11eb\u00072\u0002\u0002\u11e7\u11e8\u0007",
    "\u0146\u0002\u0002\u11e8\u11e9\u0007P\u0002\u0002\u11e9\u11eb\u0005",
    "@!\u0002\u11ea\u11e3\u0003\u0002\u0002\u0002\u11ea\u11e5\u0003\u0002",
    "\u0002\u0002\u11ea\u11e7\u0003\u0002\u0002\u0002\u11eb\u02bd\u0003\u0002",
    "\u0002\u0002\u11ec\u11ee\u0007)\u0002\u0002\u11ed\u11ef\t\u001a\u0002",
    "\u0002\u11ee\u11ed\u0003\u0002\u0002\u0002\u11ee\u11ef\u0003\u0002\u0002",
    "\u0002\u11ef\u11f0\u0003\u0002\u0002\u0002\u11f0\u11f1\u0005\u0010\t",
    "\u0002\u11f1\u02bf\u0003\u0002\u0002\u0002\u11f2\u11f8\u0005\\/\u0002",
    "\u11f3\u11f8\u0005\u014c\u00a7\u0002\u11f4\u11f8\u0005\u0206\u0104\u0002",
    "\u11f5\u11f8\u0005\u02a6\u0154\u0002\u11f6\u11f8\u0005\u02c2\u0162\u0002",
    "\u11f7\u11f2\u0003\u0002\u0002\u0002\u11f7\u11f3\u0003\u0002\u0002\u0002",
    "\u11f7\u11f4\u0003\u0002\u0002\u0002\u11f7\u11f5\u0003\u0002\u0002\u0002",
    "\u11f7\u11f6\u0003\u0002\u0002\u0002\u11f8\u02c1\u0003\u0002\u0002\u0002",
    "\u11f9\u11fa\u0007\u01a0\u0002\u0002\u11fa\u11fb\u0007.\u0002\u0002",
    "\u11fb\u11fc\u0005\u01a8\u00d5\u0002\u11fc\u11fd\u0007\u0212\u0002\u0002",
    "\u11fd\u11fe\u0007\u021a\u0002\u0002\u11fe\u11ff\u0007\u021a\u0002\u0002",
    "\u11ff\u02c3\u0003\u0002\u0002\u0002\u1200\u1201\t\u001b\u0002\u0002",
    "\u1201\u02c5\u0003\u0002\u0002\u0002\u1202\u1204\u0005\u02c4\u0163\u0002",
    "\u1203\u1202\u0003\u0002\u0002\u0002\u1204\u1207\u0003\u0002\u0002\u0002",
    "\u1205\u1203\u0003\u0002\u0002\u0002\u1205\u1206\u0003\u0002\u0002\u0002",
    "\u1206\u1208\u0003\u0002\u0002\u0002\u1207\u1205\u0003\u0002\u0002\u0002",
    "\u1208\u1209\u0005\u052e\u0298\u0002\u1209\u02c7\u0003\u0002\u0002\u0002",
    "\u120a\u120d\u0005\u02c6\u0164\u0002\u120b\u120c\u0007I\u0002\u0002",
    "\u120c\u120e\u0005\u02f4\u017b\u0002\u120d\u120b\u0003\u0002\u0002\u0002",
    "\u120d\u120e\u0003\u0002\u0002\u0002\u120e\u02c9\u0003\u0002\u0002\u0002",
    "\u120f\u1210\u0007\u0209\u0002\u0002\u1210\u02cb\u0003\u0002\u0002\u0002",
    "\u1211\u1217\u0005\u02c8\u0165\u0002\u1212\u1213\u0005\u02ca\u0166\u0002",
    "\u1213\u1214\u0005\u02c8\u0165\u0002\u1214\u1216\u0003\u0002\u0002\u0002",
    "\u1215\u1212\u0003\u0002\u0002\u0002\u1216\u1219\u0003\u0002\u0002\u0002",
    "\u1217\u1215\u0003\u0002\u0002\u0002\u1217\u1218\u0003\u0002\u0002\u0002",
    "\u1218\u02cd\u0003\u0002\u0002\u0002\u1219\u1217\u0003\u0002\u0002\u0002",
    "\u121a\u121b\t\u001c\u0002\u0002\u121b\u02cf\u0003\u0002\u0002\u0002",
    "\u121c\u1222\u0005\u02cc\u0167\u0002\u121d\u121e\u0005\u02ce\u0168\u0002",
    "\u121e\u121f\u0005\u02cc\u0167\u0002\u121f\u1221\u0003\u0002\u0002\u0002",
    "\u1220\u121d\u0003\u0002\u0002\u0002\u1221\u1224\u0003\u0002\u0002\u0002",
    "\u1222\u1220\u0003\u0002\u0002\u0002\u1222\u1223\u0003\u0002\u0002\u0002",
    "\u1223\u02d1\u0003\u0002\u0002\u0002\u1224\u1222\u0003\u0002\u0002\u0002",
    "\u1225\u1226\t\u001d\u0002\u0002\u1226\u02d3\u0003\u0002\u0002\u0002",
    "\u1227\u122d\u0005\u02d0\u0169\u0002\u1228\u1229\u0005\u02d2\u016a\u0002",
    "\u1229\u122a\u0005\u02d0\u0169\u0002\u122a\u122c\u0003\u0002\u0002\u0002",
    "\u122b\u1228\u0003\u0002\u0002\u0002\u122c\u122f\u0003\u0002\u0002\u0002",
    "\u122d\u122b\u0003\u0002\u0002\u0002\u122d\u122e\u0003\u0002\u0002\u0002",
    "\u122e\u02d5\u0003\u0002\u0002\u0002\u122f\u122d\u0003\u0002\u0002\u0002",
    "\u1230\u1231\u0007\u0205\u0002\u0002\u1231\u02d7\u0003\u0002\u0002\u0002",
    "\u1232\u1238\u0005\u02d4\u016b\u0002\u1233\u1234\u0005\u02d6\u016c\u0002",
    "\u1234\u1235\u0005\u02d4\u016b\u0002\u1235\u1237\u0003\u0002\u0002\u0002",
    "\u1236\u1233\u0003\u0002\u0002\u0002\u1237\u123a\u0003\u0002\u0002\u0002",
    "\u1238\u1236\u0003\u0002\u0002\u0002\u1238\u1239\u0003\u0002\u0002\u0002",
    "\u1239\u02d9\u0003\u0002\u0002\u0002\u123a\u1238\u0003\u0002\u0002\u0002",
    "\u123b\u123c\u0007\u0206\u0002\u0002\u123c\u02db\u0003\u0002\u0002\u0002",
    "\u123d\u1243\u0005\u02d8\u016d\u0002\u123e\u123f\u0005\u02da\u016e\u0002",
    "\u123f\u1240\u0005\u02d8\u016d\u0002\u1240\u1242\u0003\u0002\u0002\u0002",
    "\u1241\u123e\u0003\u0002\u0002\u0002\u1242\u1245\u0003\u0002\u0002\u0002",
    "\u1243\u1241\u0003\u0002\u0002\u0002\u1243\u1244\u0003\u0002\u0002\u0002",
    "\u1244\u02dd\u0003\u0002\u0002\u0002\u1245\u1243\u0003\u0002\u0002\u0002",
    "\u1246\u1247\u0007\u0208\u0002\u0002\u1247\u02df\u0003\u0002\u0002\u0002",
    "\u1248\u124e\u0005\u02dc\u016f\u0002\u1249\u124a\u0005\u02de\u0170\u0002",
    "\u124a\u124b\u0005\u02dc\u016f\u0002\u124b\u124d\u0003\u0002\u0002\u0002",
    "\u124c\u1249\u0003\u0002\u0002\u0002\u124d\u1250\u0003\u0002\u0002\u0002",
    "\u124e\u124c\u0003\u0002\u0002\u0002\u124e\u124f\u0003\u0002\u0002\u0002",
    "\u124f\u1252\u0003\u0002\u0002\u0002\u1250\u124e\u0003\u0002\u0002\u0002",
    "\u1251\u1253\u0005\u02f2\u017a\u0002\u1252\u1251\u0003\u0002\u0002\u0002",
    "\u1252\u1253\u0003\u0002\u0002\u0002\u1253\u02e1\u0003\u0002\u0002\u0002",
    "\u1254\u1255\t\u001e\u0002\u0002\u1255\u02e3\u0003\u0002\u0002\u0002",
    "\u1256\u125f\u0005\u02e2\u0172\u0002\u1257\u125f\u0007\u01f6\u0002\u0002",
    "\u1258\u125f\u0007\u01f7\u0002\u0002\u1259\u125f\u0007\u01f8\u0002\u0002",
    "\u125a\u125f\u0007\u01f9\u0002\u0002\u125b\u125f\u0007\u01fa\u0002\u0002",
    "\u125c\u125f\u0007\u01fc\u0002\u0002\u125d\u125f\u0007\u01fd\u0002\u0002",
    "\u125e\u1256\u0003\u0002\u0002\u0002\u125e\u1257\u0003\u0002\u0002\u0002",
    "\u125e\u1258\u0003\u0002\u0002\u0002\u125e\u1259\u0003\u0002\u0002\u0002",
    "\u125e\u125a\u0003\u0002\u0002\u0002\u125e\u125b\u0003\u0002\u0002\u0002",
    "\u125e\u125c\u0003\u0002\u0002\u0002\u125e\u125d\u0003\u0002\u0002\u0002",
    "\u125f\u02e5\u0003\u0002\u0002\u0002\u1260\u1261\u0005\u0308\u0185\u0002",
    "\u1261\u02e7\u0003\u0002\u0002\u0002\u1262\u1268\u0005\u02ea\u0176\u0002",
    "\u1263\u1264\u0007\u01f0\u0002\u0002\u1264\u1265\u0005\u03b6\u01dc\u0002",
    "\u1265\u1266\u0007\u01f1\u0002\u0002\u1266\u1268\u0003\u0002\u0002\u0002",
    "\u1267\u1262\u0003\u0002\u0002\u0002\u1267\u1263\u0003\u0002\u0002\u0002",
    "\u1268\u02e9\u0003\u0002\u0002\u0002\u1269\u126a\u0007\u01f0\u0002\u0002",
    "\u126a\u126b\u0005\u02ec\u0177\u0002\u126b\u126c\u0007\u01f1\u0002\u0002",
    "\u126c\u02eb\u0003\u0002\u0002\u0002\u126d\u126f\u0005\u02e6\u0174\u0002",
    "\u126e\u1270\u0005\u02ee\u0178\u0002\u126f\u126e\u0003\u0002\u0002\u0002",
    "\u126f\u1270\u0003\u0002\u0002\u0002\u1270\u02ed\u0003\u0002\u0002\u0002",
    "\u1271\u1272\u0007\u01ee\u0002\u0002\u1272\u1274\u0005\u02e6\u0174\u0002",
    "\u1273\u1271\u0003\u0002\u0002\u0002\u1274\u1275\u0003\u0002\u0002\u0002",
    "\u1275\u1273\u0003\u0002\u0002\u0002\u1275\u1276\u0003\u0002\u0002\u0002",
    "\u1276\u02ef\u0003\u0002\u0002\u0002\u1277\u127c\u0005\u02e6\u0174\u0002",
    "\u1278\u1279\u0007\u01ee\u0002\u0002\u1279\u127b\u0005\u02e6\u0174\u0002",
    "\u127a\u1278\u0003\u0002\u0002\u0002\u127b\u127e\u0003\u0002\u0002\u0002",
    "\u127c\u127a\u0003\u0002\u0002\u0002\u127c\u127d\u0003\u0002\u0002\u0002",
    "\u127d\u02f1\u0003\u0002\u0002\u0002\u127e\u127c\u0003\u0002\u0002\u0002",
    "\u127f\u1280\u0007\u0210\u0002\u0002\u1280\u02f3\u0003\u0002\u0002\u0002",
    "\u1281\u1285\u0007J\u0002\u0002\u1282\u1283\u0007\b\u0002\u0002\u1283",
    "\u1285\u0007J\u0002\u0002\u1284\u1281\u0003\u0002\u0002\u0002\u1284",
    "\u1282\u0003\u0002\u0002\u0002\u1285\u02f5\u0003\u0002\u0002\u0002\u1286",
    "\u1288\u0005\u02e0\u0171\u0002\u1287\u1289\u0005\u02f8\u017d\u0002\u1288",
    "\u1287\u0003\u0002\u0002\u0002\u1288\u1289\u0003\u0002\u0002\u0002\u1289",
    "\u02f7\u0003\u0002\u0002\u0002\u128a\u128e\u0005\u02fa\u017e\u0002\u128b",
    "\u128c\u0007\b\u0002\u0002\u128c\u128e\u0005\u02fc\u017f\u0002\u128d",
    "\u128a\u0003\u0002\u0002\u0002\u128d\u128b\u0003\u0002\u0002\u0002\u128e",
    "\u02f9\u0003\u0002\u0002\u0002\u128f\u1294\u0005\u0350\u01a9\u0002\u1290",
    "\u1294\u0005\u0352\u01aa\u0002\u1291\u1294\u0005\u034c\u01a7\u0002\u1292",
    "\u1294\u0005\u034e\u01a8\u0002\u1293\u128f\u0003\u0002\u0002\u0002\u1293",
    "\u1290\u0003\u0002\u0002\u0002\u1293\u1291\u0003\u0002\u0002\u0002\u1293",
    "\u1292\u0003\u0002\u0002\u0002\u1294\u02fb\u0003\u0002\u0002\u0002\u1295",
    "\u129a\u0005\u02fa\u017e\u0002\u1296\u1297\u0005\u02e2\u0172\u0002\u1297",
    "\u1298\u0005\u02e0\u0171\u0002\u1298\u129a\u0003\u0002\u0002\u0002\u1299",
    "\u1295\u0003\u0002\u0002\u0002\u1299\u1296\u0003\u0002\u0002\u0002\u129a",
    "\u02fd\u0003\u0002\u0002\u0002\u129b\u129c\u0007\b\u0002\u0002\u129c",
    "\u02ff\u0003\u0002\u0002\u0002\u129d\u129f\u0005\u02fe\u0180\u0002\u129e",
    "\u129d\u0003\u0002\u0002\u0002\u129f\u12a2\u0003\u0002\u0002\u0002\u12a0",
    "\u129e\u0003\u0002\u0002\u0002\u12a0\u12a1\u0003\u0002\u0002\u0002\u12a1",
    "\u12a3\u0003\u0002\u0002\u0002\u12a2\u12a0\u0003\u0002\u0002\u0002\u12a3",
    "\u12a4\u0005\u030a\u0186\u0002\u12a4\u0301\u0003\u0002\u0002\u0002\u12a5",
    "\u12a6\u0007\u0006\u0002\u0002\u12a6\u0303\u0003\u0002\u0002\u0002\u12a7",
    "\u12ad\u0005\u0300\u0181\u0002\u12a8\u12a9\u0005\u0302\u0182\u0002\u12a9",
    "\u12aa\u0005\u0300\u0181\u0002\u12aa\u12ac\u0003\u0002\u0002\u0002\u12ab",
    "\u12a8\u0003\u0002\u0002\u0002\u12ac\u12af\u0003\u0002\u0002\u0002\u12ad",
    "\u12ab\u0003\u0002\u0002\u0002\u12ad\u12ae\u0003\u0002\u0002\u0002\u12ae",
    "\u0305\u0003\u0002\u0002\u0002\u12af\u12ad\u0003\u0002\u0002\u0002\u12b0",
    "\u12b1\u0007\u0007\u0002\u0002\u12b1\u0307\u0003\u0002\u0002\u0002\u12b2",
    "\u12b8\u0005\u0304\u0183\u0002\u12b3\u12b4\u0005\u0306\u0184\u0002\u12b4",
    "\u12b5\u0005\u0304\u0183\u0002\u12b5\u12b7\u0003\u0002\u0002\u0002\u12b6",
    "\u12b3\u0003\u0002\u0002\u0002\u12b7\u12ba\u0003\u0002\u0002\u0002\u12b8",
    "\u12b6\u0003\u0002\u0002\u0002\u12b8\u12b9\u0003\u0002\u0002\u0002\u12b9",
    "\u0309\u0003\u0002\u0002\u0002\u12ba\u12b8\u0003\u0002\u0002\u0002\u12bb",
    "\u12c1\u0005\u02f6\u017c\u0002\u12bc\u12bd\u0005\u02e4\u0173\u0002\u12bd",
    "\u12be\u0005\u02f6\u017c\u0002\u12be\u12c0\u0003\u0002\u0002\u0002\u12bf",
    "\u12bc\u0003\u0002\u0002\u0002\u12c0\u12c3\u0003\u0002\u0002\u0002\u12c1",
    "\u12bf\u0003\u0002\u0002\u0002\u12c1\u12c2\u0003\u0002\u0002\u0002\u12c2",
    "\u030b\u0003\u0002\u0002\u0002\u12c3\u12c1\u0003\u0002\u0002\u0002\u12c4",
    "\u12c5\u0007\u0017\u0002\u0002\u12c5\u12c6\u0005\u030e\u0188\u0002\u12c6",
    "\u030d\u0003\u0002\u0002\u0002\u12c7\u12d3\u0005\u031c\u018f\u0002\u12c8",
    "\u12c9\u0005\u0316\u018c\u0002\u12c9\u12ca\u0005\u031c\u018f\u0002\u12ca",
    "\u12d2\u0003\u0002\u0002\u0002\u12cb\u12cc\u0005\u0318\u018d\u0002\u12cc",
    "\u12cf\u0005\u031c\u018f\u0002\u12cd\u12ce\u0007)\u0002\u0002\u12ce",
    "\u12d0\u0005\u02e6\u0174\u0002\u12cf\u12cd\u0003\u0002\u0002\u0002\u12cf",
    "\u12d0\u0003\u0002\u0002\u0002\u12d0\u12d2\u0003\u0002\u0002\u0002\u12d1",
    "\u12c8\u0003\u0002\u0002\u0002\u12d1\u12cb\u0003\u0002\u0002\u0002\u12d2",
    "\u12d5\u0003\u0002\u0002\u0002\u12d3\u12d1\u0003\u0002\u0002\u0002\u12d3",
    "\u12d4\u0003\u0002\u0002\u0002\u12d4\u12df\u0003\u0002\u0002\u0002\u12d5",
    "\u12d3\u0003\u0002\u0002\u0002\u12d6\u12d7\u0005\u0314\u018b\u0002\u12d7",
    "\u12da\u0005\u0310\u0189\u0002\u12d8\u12d9\u0007\u01ee\u0002\u0002\u12d9",
    "\u12db\u0005\u0310\u0189\u0002\u12da\u12d8\u0003\u0002\u0002\u0002\u12db",
    "\u12dc\u0003\u0002\u0002\u0002\u12dc\u12da\u0003\u0002\u0002\u0002\u12dc",
    "\u12dd\u0003\u0002\u0002\u0002\u12dd\u12df\u0003\u0002\u0002\u0002\u12de",
    "\u12c7\u0003\u0002\u0002\u0002\u12de\u12d6\u0003\u0002\u0002\u0002\u12df",
    "\u030f\u0003\u0002\u0002\u0002\u12e0\u12e2\u0007!\u0002\u0002\u12e1",
    "\u12e0\u0003\u0002\u0002\u0002\u12e1\u12e2\u0003\u0002\u0002\u0002\u12e2",
    "\u12e3\u0003\u0002\u0002\u0002\u12e3\u12e4\u0005\u031c\u018f\u0002\u12e4",
    "\u12e5\u0005\u0312\u018a\u0002\u12e5\u0311\u0003\u0002\u0002\u0002\u12e6",
    "\u12e7\u0007\u01f0\u0002\u0002\u12e7\u12ec\u0005\u02e6\u0174\u0002\u12e8",
    "\u12e9\u0007\u01ee\u0002\u0002\u12e9\u12eb\u0005\u02e6\u0174\u0002\u12ea",
    "\u12e8\u0003\u0002\u0002\u0002\u12eb\u12ee\u0003\u0002\u0002\u0002\u12ec",
    "\u12ea\u0003\u0002\u0002\u0002\u12ec\u12ed\u0003\u0002\u0002\u0002\u12ed",
    "\u12ef\u0003\u0002\u0002\u0002\u12ee\u12ec\u0003\u0002\u0002\u0002\u12ef",
    "\u12f0\u0007\u01f1\u0002\u0002\u12f0\u0313\u0003\u0002\u0002\u0002\u12f1",
    "\u12f2\u0007 \u0002\u0002\u12f2\u0315\u0003\u0002\u0002\u0002\u12f3",
    "\u12f4\u0007\u0172\u0002\u0002\u12f4\u12f9\u0007\"\u0002\u0002\u12f5",
    "\u12f6\u0007\u012a\u0002\u0002\u12f6\u12f9\u0007\"\u0002\u0002\u12f7",
    "\u12f9\u0007\u01ee\u0002\u0002\u12f8\u12f3\u0003\u0002\u0002\u0002\u12f8",
    "\u12f5\u0003\u0002\u0002\u0002\u12f8\u12f7\u0003\u0002\u0002\u0002\u12f9",
    "\u0317\u0003\u0002\u0002\u0002\u12fa\u1313\u0007\"\u0002\u0002\u12fb",
    "\u12fc\u0007\u016d\u0002\u0002\u12fc\u1313\u0007\"\u0002\u0002\u12fd",
    "\u12ff\u0007&\u0002\u0002\u12fe\u1300\u0007\u001f\u0002\u0002\u12ff",
    "\u12fe\u0003\u0002\u0002\u0002\u12ff\u1300\u0003\u0002\u0002\u0002\u1300",
    "\u1301\u0003\u0002\u0002\u0002\u1301\u1313\u0007\"\u0002\u0002\u1302",
    "\u1304\u0007\'\u0002\u0002\u1303\u1305\u0007\u001f\u0002\u0002\u1304",
    "\u1303\u0003\u0002\u0002\u0002\u1304\u1305\u0003\u0002\u0002\u0002\u1305",
    "\u1306\u0003\u0002\u0002\u0002\u1306\u1313\u0007\"\u0002\u0002\u1307",
    "\u1309\u0007(\u0002\u0002\u1308\u130a\u0007\u001f\u0002\u0002\u1309",
    "\u1308\u0003\u0002\u0002\u0002\u1309\u130a\u0003\u0002\u0002\u0002\u130a",
    "\u130b\u0003\u0002\u0002\u0002\u130b\u1313\u0007\"\u0002\u0002\u130c",
    "\u130d\u0007&\u0002\u0002\u130d\u130e\u0007\u0132\u0002\u0002\u130e",
    "\u1313\u0007\"\u0002\u0002\u130f\u1310\u0007&\u0002\u0002\u1310\u1311",
    "\u0007\u0133\u0002\u0002\u1311\u1313\u0007\"\u0002\u0002\u1312\u12fa",
    "\u0003\u0002\u0002\u0002\u1312\u12fb\u0003\u0002\u0002\u0002\u1312\u12fd",
    "\u0003\u0002\u0002\u0002\u1312\u1302\u0003\u0002\u0002\u0002\u1312\u1307",
    "\u0003\u0002\u0002\u0002\u1312\u130c\u0003\u0002\u0002\u0002\u1312\u130f",
    "\u0003\u0002\u0002\u0002\u1313\u0319\u0003\u0002\u0002\u0002\u1314\u1315",
    "\u0007\u0134\u0002\u0002\u1315\u1316\u0007\u010d\u0002\u0002\u1316\u1317",
    "\u0007\u001f\u0002\u0002\u1317\u1318\u0005\u033c\u019f\u0002\u1318\u1322",
    "\u0005\u0016\f\u0002\u1319\u131a\u0007\u0018\u0002\u0002\u131a\u131f",
    "\u0005\u0006\u0004\u0002\u131b\u131c\u0007\u01ee\u0002\u0002\u131c\u131e",
    "\u0005\u0006\u0004\u0002\u131d\u131b\u0003\u0002\u0002\u0002\u131e\u1321",
    "\u0003\u0002\u0002\u0002\u131f\u131d\u0003\u0002\u0002\u0002\u131f\u1320",
    "\u0003\u0002\u0002\u0002\u1320\u1323\u0003\u0002\u0002\u0002\u1321\u131f",
    "\u0003\u0002\u0002\u0002\u1322\u1319\u0003\u0002\u0002\u0002\u1322\u1323",
    "\u0003\u0002\u0002\u0002\u1323\u1334\u0003\u0002\u0002\u0002\u1324\u1325",
    "\u0007\u0134\u0002\u0002\u1325\u1326\u0007\u010d\u0002\u0002\u1326\u1327",
    "\u0005\u033c\u019f\u0002\u1327\u1331\u0005\u0016\f\u0002\u1328\u1329",
    "\u0007\u0018\u0002\u0002\u1329\u132e\u0005\u0006\u0004\u0002\u132a\u132b",
    "\u0007\u01ee\u0002\u0002\u132b\u132d\u0005\u0006\u0004\u0002\u132c\u132a",
    "\u0003\u0002\u0002\u0002\u132d\u1330\u0003\u0002\u0002\u0002\u132e\u132c",
    "\u0003\u0002\u0002\u0002\u132e\u132f\u0003\u0002\u0002\u0002\u132f\u1332",
    "\u0003\u0002\u0002\u0002\u1330\u132e\u0003\u0002\u0002\u0002\u1331\u1328",
    "\u0003\u0002\u0002\u0002\u1331\u1332\u0003\u0002\u0002\u0002\u1332\u1334",
    "\u0003\u0002\u0002\u0002\u1333\u1314\u0003\u0002\u0002\u0002\u1333\u1324",
    "\u0003\u0002\u0002\u0002\u1334\u031b\u0003\u0002\u0002\u0002\u1335\u133b",
    "\u0005\u0324\u0193\u0002\u1336\u133b\u0005P)\u0002\u1337\u133b\u0005",
    "\u031e\u0190\u0002\u1338\u133b\u0005\u0320\u0191\u0002\u1339\u133b\u0005",
    "\u0322\u0192\u0002\u133a\u1335\u0003\u0002\u0002\u0002\u133a\u1336\u0003",
    "\u0002\u0002\u0002\u133a\u1337\u0003\u0002\u0002\u0002\u133a\u1338\u0003",
    "\u0002\u0002\u0002\u133a\u1339\u0003\u0002\u0002\u0002\u133b\u133f\u0003",
    "\u0002\u0002\u0002\u133c\u133e\u0005\u031a\u018e\u0002\u133d\u133c\u0003",
    "\u0002\u0002\u0002\u133e\u1341\u0003\u0002\u0002\u0002\u133f\u133d\u0003",
    "\u0002\u0002\u0002\u133f\u1340\u0003\u0002\u0002\u0002\u1340\u031d\u0003",
    "\u0002\u0002\u0002\u1341\u133f\u0003\u0002\u0002\u0002\u1342\u1344\u0005",
    "\u0010\t\u0002\u1343\u1345\u0005\u01d8\u00ed\u0002\u1344\u1343\u0003",
    "\u0002\u0002\u0002\u1344\u1345\u0003\u0002\u0002\u0002\u1345\u1347\u0003",
    "\u0002\u0002\u0002\u1346\u1348\u0005\u033a\u019e\u0002\u1347\u1346\u0003",
    "\u0002\u0002\u0002\u1347\u1348\u0003\u0002\u0002\u0002\u1348\u134a\u0003",
    "\u0002\u0002\u0002\u1349\u134b\u0005\u047a\u023e\u0002\u134a\u1349\u0003",
    "\u0002\u0002\u0002\u134a\u134b\u0003\u0002\u0002\u0002\u134b\u1350\u0003",
    "\u0002\u0002\u0002\u134c\u134e\u0007\u0018\u0002\u0002\u134d\u134c\u0003",
    "\u0002\u0002\u0002\u134d\u134e\u0003\u0002\u0002\u0002\u134e\u134f\u0003",
    "\u0002\u0002\u0002\u134f\u1351\u0005\u0004\u0003\u0002\u1350\u134d\u0003",
    "\u0002\u0002\u0002\u1350\u1351\u0003\u0002\u0002\u0002\u1351\u031f\u0003",
    "\u0002\u0002\u0002\u1352\u1353\u0007\u01f0\u0002\u0002\u1353\u1354\u0005",
    "\u03e6\u01f4\u0002\u1354\u1359\u0007\u01f1\u0002\u0002\u1355\u1357\u0007",
    "\u0018\u0002\u0002\u1356\u1355\u0003\u0002\u0002\u0002\u1356\u1357\u0003",
    "\u0002\u0002\u0002\u1357\u1358\u0003\u0002\u0002\u0002\u1358\u135a\u0005",
    "\u0004\u0003\u0002\u1359\u1356\u0003\u0002\u0002\u0002\u1359\u135a\u0003",
    "\u0002\u0002\u0002\u135a\u0321\u0003\u0002\u0002\u0002\u135b\u135c\u0007",
    "\u01f0\u0002\u0002\u135c\u135d\u0005\u03d2\u01ea\u0002\u135d\u1362\u0007",
    "\u01f1\u0002\u0002\u135e\u1360\u0007\u0018\u0002\u0002\u135f\u135e\u0003",
    "\u0002\u0002\u0002\u135f\u1360\u0003\u0002\u0002\u0002\u1360\u1361\u0003",
    "\u0002\u0002\u0002\u1361\u1363\u0005L\'\u0002\u1362\u135f\u0003\u0002",
    "\u0002\u0002\u1362\u1363\u0003\u0002\u0002\u0002\u1363\u0323\u0003\u0002",
    "\u0002\u0002\u1364\u1365\u0007-\u0002\u0002\u1365\u1366\u0007\u01f0",
    "\u0002\u0002\u1366\u136a\u0005\u032c\u0197\u0002\u1367\u1369\u0005\u032c",
    "\u0197\u0002\u1368\u1367\u0003\u0002\u0002\u0002\u1369\u136c\u0003\u0002",
    "\u0002\u0002\u136a\u1368\u0003\u0002\u0002\u0002\u136a\u136b\u0003\u0002",
    "\u0002\u0002\u136b\u136d\u0003\u0002\u0002\u0002\u136c\u136a\u0003\u0002",
    "\u0002\u0002\u136d\u136f\u0007\u01f1\u0002\u0002\u136e\u1370\u0005\u0330",
    "\u0199\u0002\u136f\u136e\u0003\u0002\u0002\u0002\u136f\u1370\u0003\u0002",
    "\u0002\u0002\u1370\u0325\u0003\u0002\u0002\u0002\u1371\u1372\u0007\u021b",
    "\u0002\u0002\u1372\u1375\u0007\u01f6\u0002\u0002\u1373\u1376\u0005\u031e",
    "\u0190\u0002\u1374\u1376\u0005\u0320\u0191\u0002\u1375\u1373\u0003\u0002",
    "\u0002\u0002\u1375\u1374\u0003\u0002\u0002\u0002\u1376\u1377\u0003\u0002",
    "\u0002\u0002\u1377\u1378\u0007\u01f2\u0002\u0002\u1378\u1379\u0005\u02e6",
    "\u0174\u0002\u1379\u137b\u0007\u01f3\u0002\u0002\u137a\u137c\u0005\u0328",
    "\u0195\u0002\u137b\u137a\u0003\u0002\u0002\u0002\u137b\u137c\u0003\u0002",
    "\u0002\u0002\u137c\u137e\u0003\u0002\u0002\u0002\u137d\u137f\u0005\u032a",
    "\u0196\u0002\u137e\u137d\u0003\u0002\u0002\u0002\u137e\u137f\u0003\u0002",
    "\u0002\u0002\u137f\u0327\u0003\u0002\u0002\u0002\u1380\u1381\u0007\u01f2",
    "\u0002\u0002\u1381\u1382\u0007\u015c\u0002\u0002\u1382\u1383\u0007\u01f0",
    "\u0002\u0002\u1383\u1384\u0007\u021a\u0002\u0002\u1384\u1385\u0007\u01f1",
    "\u0002\u0002\u1385\u1386\u0007\u01f3\u0002\u0002\u1386\u0329\u0003\u0002",
    "\u0002\u0002\u1387\u1388\u0007\u0200\u0002\u0002\u1388\u032b\u0003\u0002",
    "\u0002\u0002\u1389\u138b\u0005\u032e\u0198\u0002\u138a\u1389\u0003\u0002",
    "\u0002\u0002\u138b\u138e\u0003\u0002\u0002\u0002\u138c\u138a\u0003\u0002",
    "\u0002\u0002\u138c\u138d\u0003\u0002\u0002\u0002\u138d\u138f\u0003\u0002",
    "\u0002\u0002\u138e\u138c\u0003\u0002\u0002\u0002\u138f\u1390\u0005\u0326",
    "\u0194\u0002\u1390\u032d\u0003\u0002\u0002\u0002\u1391\u1392\t\u001f",
    "\u0002\u0002\u1392\u032f\u0003\u0002\u0002\u0002\u1393\u1394\u0007\u00c7",
    "\u0002\u0002\u1394\u1395\u0007\u01f0\u0002\u0002\u1395\u1396\u0005\u0332",
    "\u019a\u0002\u1396\u1397\u0007\u01f1\u0002\u0002\u1397\u0331\u0003\u0002",
    "\u0002\u0002\u1398\u1399\u0007\u0212\u0002\u0002\u1399\u139a\u0005\u0334",
    "\u019b\u0002\u139a\u0333\u0003\u0002\u0002\u0002\u139b\u139c\t \u0002",
    "\u0002\u139c\u0335\u0003\u0002\u0002\u0002\u139d\u139e\u0007\u00af\u0002",
    "\u0002\u139e\u139f\u0007\u01f0\u0002\u0002\u139f\u13a0\u0007\u00b0\u0002",
    "\u0002\u13a0\u13a1\u0007\u021a\u0002\u0002\u13a1\u13a2\u0007\u00b1\u0002",
    "\u0002\u13a2\u13a3\u0007\u00b2\u0002\u0002\u13a3\u13ad\u0007\u021a\u0002",
    "\u0002\u13a4\u13a5\u0007)\u0002\u0002\u13a5\u13aa\u0005\u02e6\u0174",
    "\u0002\u13a6\u13a7\u0007\u01ee\u0002\u0002\u13a7\u13a9\u0005\u02e6\u0174",
    "\u0002\u13a8\u13a6\u0003\u0002\u0002\u0002\u13a9\u13ac\u0003\u0002\u0002",
    "\u0002\u13aa\u13a8\u0003\u0002\u0002\u0002\u13aa\u13ab\u0003\u0002\u0002",
    "\u0002\u13ab\u13ae\u0003\u0002\u0002\u0002\u13ac\u13aa\u0003\u0002\u0002",
    "\u0002\u13ad\u13a4\u0003\u0002\u0002\u0002\u13ad\u13ae\u0003\u0002\u0002",
    "\u0002\u13ae\u13af\u0003\u0002\u0002\u0002\u13af\u13b0\u0007\u01f1\u0002",
    "\u0002\u13b0\u0337\u0003\u0002\u0002\u0002\u13b1\u13b2\u0007\u00af\u0002",
    "\u0002\u13b2\u13b3\u0007\u01f0\u0002\u0002\u13b3\u13b6\u0007\u021a\u0002",
    "\u0002\u13b4\u13b7\u0007\u00b3\u0002\u0002\u13b5\u13b7\u0007\u008c\u0002",
    "\u0002\u13b6\u13b4\u0003\u0002\u0002\u0002\u13b6\u13b5\u0003\u0002\u0002",
    "\u0002\u13b7\u13b8\u0003\u0002\u0002\u0002\u13b8\u13be\u0007\u01f1\u0002",
    "\u0002\u13b9\u13ba\u0007\u00af\u0002\u0002\u13ba\u13bb\u0007\u01f0\u0002",
    "\u0002\u13bb\u13bc\u0007\u0218\u0002\u0002\u13bc\u13be\u0007\u01f1\u0002",
    "\u0002\u13bd\u13b1\u0003\u0002\u0002\u0002\u13bd\u13b9\u0003\u0002\u0002",
    "\u0002\u13be\u0339\u0003\u0002\u0002\u0002\u13bf\u13c2\u0005\u0336\u019c",
    "\u0002\u13c0\u13c2\u0005\u0338\u019d\u0002\u13c1\u13bf\u0003\u0002\u0002",
    "\u0002\u13c1\u13c0\u0003\u0002\u0002\u0002\u13c2\u033b\u0003\u0002\u0002",
    "\u0002\u13c3\u13c4\u0005\u0340\u01a1\u0002\u13c4\u13d3\u0007\u01f0\u0002",
    "\u0002\u13c5\u13d4\u0007\u0202\u0002\u0002\u13c6\u13c8\u0007\u001a\u0002",
    "\u0002\u13c7\u13c6\u0003\u0002\u0002\u0002\u13c7\u13c8\u0003\u0002\u0002",
    "\u0002\u13c8\u13d1\u0003\u0002\u0002\u0002\u13c9\u13ce\u0005\u0344\u01a3",
    "\u0002\u13ca\u13cb\u0007\u01ee\u0002\u0002\u13cb\u13cd\u0005\u0344\u01a3",
    "\u0002\u13cc\u13ca\u0003\u0002\u0002\u0002\u13cd\u13d0\u0003\u0002\u0002",
    "\u0002\u13ce\u13cc\u0003\u0002\u0002\u0002\u13ce\u13cf\u0003\u0002\u0002",
    "\u0002\u13cf\u13d2\u0003\u0002\u0002\u0002\u13d0\u13ce\u0003\u0002\u0002",
    "\u0002\u13d1\u13c9\u0003\u0002\u0002\u0002\u13d1\u13d2\u0003\u0002\u0002",
    "\u0002\u13d2\u13d4\u0003\u0002\u0002\u0002\u13d3\u13c5\u0003\u0002\u0002",
    "\u0002\u13d3\u13c7\u0003\u0002\u0002\u0002\u13d4\u13d5\u0003\u0002\u0002",
    "\u0002\u13d5\u13d8\u0007\u01f1\u0002\u0002\u13d6\u13d7\u0007\u0162\u0002",
    "\u0002\u13d7\u13d9\u0005\u0462\u0232\u0002\u13d8\u13d6\u0003\u0002\u0002",
    "\u0002\u13d8\u13d9\u0003\u0002\u0002\u0002\u13d9\u033d\u0003\u0002\u0002",
    "\u0002\u13da\u13db\u0007\u01f0\u0002\u0002\u13db\u13e0\u0007\u0202\u0002",
    "\u0002\u13dc\u13dd\u0007\u01f0\u0002\u0002\u13dd\u13e0\u0007\u001a\u0002",
    "\u0002\u13de\u13e0\u0007\u01f0\u0002\u0002\u13df\u13da\u0003\u0002\u0002",
    "\u0002\u13df\u13dc\u0003\u0002\u0002\u0002\u13df\u13de\u0003\u0002\u0002",
    "\u0002\u13e0\u033f\u0003\u0002\u0002\u0002\u13e1\u13e4\u0005\u0006\u0004",
    "\u0002\u13e2\u13e4\u0005\u0538\u029d\u0002\u13e3\u13e1\u0003\u0002\u0002",
    "\u0002\u13e3\u13e2\u0003\u0002\u0002\u0002\u13e4\u0341\u0003\u0002\u0002",
    "\u0002\u13e5\u13e8\u0007W\u0002\u0002\u13e6\u13e8\u0007X\u0002\u0002",
    "\u13e7\u13e5\u0003\u0002\u0002\u0002\u13e7\u13e6\u0003\u0002\u0002\u0002",
    "\u13e8\u13e9\u0003\u0002\u0002\u0002\u13e9\u13ea\u0007K\u0002\u0002",
    "\u13ea\u0343\u0003\u0002\u0002\u0002\u13eb\u13ec\u0005\u0006\u0004\u0002",
    "\u13ec\u13ed\u0007\u020e\u0002\u0002\u13ed\u13ef\u0003\u0002\u0002\u0002",
    "\u13ee\u13eb\u0003\u0002\u0002\u0002\u13ee\u13ef\u0003\u0002\u0002\u0002",
    "\u13ef\u13f0\u0003\u0002\u0002\u0002\u13f0\u13f2\u0005\u0430\u0219\u0002",
    "\u13f1\u13f3\u0005\u0342\u01a2\u0002\u13f2\u13f1\u0003\u0002\u0002\u0002",
    "\u13f2\u13f3\u0003\u0002\u0002\u0002\u13f3\u0345\u0003\u0002\u0002\u0002",
    "\u13f4\u13f5\u0007\u00b4\u0002\u0002\u13f5\u13f6\u0007\u01f0\u0002\u0002",
    "\u13f6\u13f7\u0005\u02e6\u0174\u0002\u13f7\u13f8\u0007\u0018\u0002\u0002",
    "\u13f8\u13f9\u0005\u04a4\u0253\u0002\u13f9\u13fa\u0007\u01f1\u0002\u0002",
    "\u13fa\u0347\u0003\u0002\u0002\u0002\u13fb\u13fc\u0007\r\u0002\u0002",
    "\u13fc\u13fd\u0007\u01f0\u0002\u0002\u13fd\u13fe\u0005\u03b6\u01dc\u0002",
    "\u13fe\u13ff\u0007\u01f1\u0002\u0002\u13ff\u0349\u0003\u0002\u0002\u0002",
    "\u1400\u1401\u0007\u0088\u0002\u0002\u1401\u1402\u0007\u01f0\u0002\u0002",
    "\u1402\u1403\u0007\u021a\u0002\u0002\u1403\u1404\u0007\u01f1\u0002\u0002",
    "\u1404\u034b\u0003\u0002\u0002\u0002\u1405\u140b\u0007\u010f\u0002\u0002",
    "\u1406\u1407\u0007\u01f0\u0002\u0002\u1407\u1408\u0005\u03e6\u01f4\u0002",
    "\u1408\u1409\u0007\u01f1\u0002\u0002\u1409\u140c\u0003\u0002\u0002\u0002",
    "\u140a\u140c\u0005\u02ea\u0176\u0002\u140b\u1406\u0003\u0002\u0002\u0002",
    "\u140b\u140a\u0003\u0002\u0002\u0002\u140c\u034d\u0003\u0002\u0002\u0002",
    "\u140d\u140e\u0007\u0127\u0002\u0002\u140e\u140f\u0005\u02e0\u0171\u0002",
    "\u140f\u1410\u0007\u0006\u0002\u0002\u1410\u1411\u0005\u02e0\u0171\u0002",
    "\u1411\u034f\u0003\u0002\u0002\u0002\u1412\u1413\u0007\t\u0002\u0002",
    "\u1413\u1414\u0007\u000b\u0002\u0002\u1414\u1415\u0005\u02ea\u0176\u0002",
    "\u1415\u0351\u0003\u0002\u0002\u0002\u1416\u1417\u0007\t\u0002\u0002",
    "\u1417\u1418\u0007\u0005\u0002\u0002\u1418\u1419\u0005\u02ea\u0176\u0002",
    "\u1419\u0353\u0003\u0002\u0002\u0002\u141a\u141b\u0007\u0187\u0002\u0002",
    "\u141b\u141c\u0007\u01f0\u0002\u0002\u141c\u141d\u0005\u0358\u01ad\u0002",
    "\u141d\u141e\u0007\u0017\u0002\u0002\u141e\u141f\u0005\u02e6\u0174\u0002",
    "\u141f\u1420\u0007\u01f1\u0002\u0002\u1420\u0355\u0003\u0002\u0002\u0002",
    "\u1421\u1422\u0007\u0188\u0002\u0002\u1422\u1423\u0007\u01f0\u0002\u0002",
    "\u1423\u1424\u0005\u02e6\u0174\u0002\u1424\u1425\u0005\u035a\u01ae\u0002",
    "\u1425\u1429\u0005\u02e6\u0174\u0002\u1426\u1427\u0005\u035c\u01af\u0002",
    "\u1427\u1428\u0005\u02e6\u0174\u0002\u1428\u142a\u0003\u0002\u0002\u0002",
    "\u1429\u1426\u0003\u0002\u0002\u0002\u1429\u142a\u0003\u0002\u0002\u0002",
    "\u142a\u142b\u0003\u0002\u0002\u0002\u142b\u142c\u0007\u01f1\u0002\u0002",
    "\u142c\u0357\u0003\u0002\u0002\u0002\u142d\u142e\u0005\u0006\u0004\u0002",
    "\u142e\u0359\u0003\u0002\u0002\u0002\u142f\u1430\t!\u0002\u0002\u1430",
    "\u035b\u0003\u0002\u0002\u0002\u1431\u1432\t\"\u0002\u0002\u1432\u035d",
    "\u0003\u0002\u0002\u0002\u1433\u1434\u0007\u0180\u0002\u0002\u1434\u1435",
    "\u0007\u01f0\u0002\u0002\u1435\u1436\u0005T+\u0002\u1436\u1437\u0007",
    "\u01f1\u0002\u0002\u1437\u035f\u0003\u0002\u0002\u0002\u1438\u1439\u0007",
    "\u0181\u0002\u0002\u1439\u143a\u0007\u01f0\u0002\u0002\u143a\u143b\u0005",
    "T+\u0002\u143b\u143c\u0007\u01f1\u0002\u0002\u143c\u0361\u0003\u0002",
    "\u0002\u0002\u143d\u143e\u0007\u0182\u0002\u0002\u143e\u143f\u0007\u01f0",
    "\u0002\u0002\u143f\u1440\u0005T+\u0002\u1440\u1441\u0007\u01f1\u0002",
    "\u0002\u1441\u0363\u0003\u0002\u0002\u0002\u1442\u1443\u0007\u0184\u0002",
    "\u0002\u1443\u1444\u0007\u01f0\u0002\u0002\u1444\u1445\u0005T+\u0002",
    "\u1445\u1446\u0007\u01f1\u0002\u0002\u1446\u0365\u0003\u0002\u0002\u0002",
    "\u1447\u1448\u0007\u0183\u0002\u0002\u1448\u1449\u0007\u01f0\u0002\u0002",
    "\u1449\u144a\u0005T+\u0002\u144a\u144b\u0007\u01f1\u0002\u0002\u144b",
    "\u0367\u0003\u0002\u0002\u0002\u144c\u144d\u0007\u0185\u0002\u0002\u144d",
    "\u144e\u0007\u01f0\u0002\u0002\u144e\u144f\u0005T+\u0002\u144f\u1450",
    "\u0007\u01f1\u0002\u0002\u1450\u0369\u0003\u0002\u0002\u0002\u1451\u1452",
    "\u0007\u00d2\u0002\u0002\u1452\u1458\u0005\u02e6\u0174\u0002\u1453\u1454",
    "\u0007\u00d3\u0002\u0002\u1454\u1455\u0005\u02e6\u0174\u0002\u1455\u1456",
    "\u0007\u00d4\u0002\u0002\u1456\u1457\u0005\u02e6\u0174\u0002\u1457\u1459",
    "\u0003\u0002\u0002\u0002\u1458\u1453\u0003\u0002\u0002\u0002\u1459\u145a",
    "\u0003\u0002\u0002\u0002\u145a\u1458\u0003\u0002\u0002\u0002\u145a\u145b",
    "\u0003\u0002\u0002\u0002\u145b\u145e\u0003\u0002\u0002\u0002\u145c\u145d",
    "\u0007\u00d5\u0002\u0002\u145d\u145f\u0005\u02e6\u0174\u0002\u145e\u145c",
    "\u0003\u0002\u0002\u0002\u145e\u145f\u0003\u0002\u0002\u0002\u145f\u1460",
    "\u0003\u0002\u0002\u0002\u1460\u1461\u0005\u04bc\u025f\u0002\u1461\u036b",
    "\u0003\u0002\u0002\u0002\u1462\u1468\u0007\u00d2\u0002\u0002\u1463\u1464",
    "\u0007\u00d3\u0002\u0002\u1464\u1465\u0005\u02e6\u0174\u0002\u1465\u1466",
    "\u0007\u00d4\u0002\u0002\u1466\u1467\u0005\u02e6\u0174\u0002\u1467\u1469",
    "\u0003\u0002\u0002\u0002\u1468\u1463\u0003\u0002\u0002\u0002\u1469\u146a",
    "\u0003\u0002\u0002\u0002\u146a\u1468\u0003\u0002\u0002\u0002\u146a\u146b",
    "\u0003\u0002\u0002\u0002\u146b\u146e\u0003\u0002\u0002\u0002\u146c\u146d",
    "\u0007\u00d5\u0002\u0002\u146d\u146f\u0005\u02e6\u0174\u0002\u146e\u146c",
    "\u0003\u0002\u0002\u0002\u146e\u146f\u0003\u0002\u0002\u0002\u146f\u1470",
    "\u0003\u0002\u0002\u0002\u1470\u1471\u0005\u04bc\u025f\u0002\u1471\u036d",
    "\u0003\u0002\u0002\u0002\u1472\u1473\u0005\u02e6\u0174\u0002\u1473\u036f",
    "\u0003\u0002\u0002\u0002\u1474\u1479\u0005\u0372\u01ba\u0002\u1475\u1476",
    "\u0007\u01ee\u0002\u0002\u1476\u1478\u0005\u0372\u01ba\u0002\u1477\u1475",
    "\u0003\u0002\u0002\u0002\u1478\u147b\u0003\u0002\u0002\u0002\u1479\u1477",
    "\u0003\u0002\u0002\u0002\u1479\u147a\u0003\u0002\u0002\u0002\u147a\u0371",
    "\u0003\u0002\u0002\u0002\u147b\u1479\u0003\u0002\u0002\u0002\u147c\u147d",
    "\u0005\u0374\u01bb\u0002\u147d\u147e\u0007\u0212\u0002\u0002\u147e\u0373",
    "\u0003\u0002\u0002\u0002\u147f\u1480\t#\u0002\u0002\u1480\u0375\u0003",
    "\u0002\u0002\u0002\u1481\u1482\u0007\u0019\u0002\u0002\u1482\u1483\u0005",
    "\u0380\u01c1\u0002\u1483\u1484\u0007\u0017\u0002\u0002\u1484\u1485\u0007",
    "\u01e5\u0002\u0002\u1485\u1486\u0007\u01f0\u0002\u0002\u1486\u1487\u0005",
    "\u0378\u01bd\u0002\u1487\u1488\u0007\u01ee\u0002\u0002\u1488\u1489\u0005",
    "\u0378\u01bd\u0002\u1489\u148a\u0007\u01ee\u0002\u0002\u148a\u148b\u0005",
    "\u037a\u01be\u0002\u148b\u148c\u0007\u01ee\u0002\u0002\u148c\u148d\u0005",
    "\u0006\u0004\u0002\u148d\u148e\u0007\u01ee\u0002\u0002\u148e\u148f\u0005",
    "\u0006\u0004\u0002\u148f\u1490\u0007\u01ee\u0002\u0002\u1490\u1491\u0005",
    "\u0006\u0004\u0002\u1491\u1492\u0007\u01f1\u0002\u0002\u1492\u0377\u0003",
    "\u0002\u0002\u0002\u1493\u1494\u0007\u01f0\u0002\u0002\u1494\u1495\u0005",
    "\u03b6\u01dc\u0002\u1495\u1496\u0007\u01f1\u0002\u0002\u1496\u1499\u0003",
    "\u0002\u0002\u0002\u1497\u1499\u0005\u031e\u0190\u0002\u1498\u1493\u0003",
    "\u0002\u0002\u0002\u1498\u1497\u0003\u0002\u0002\u0002\u1499\u0379\u0003",
    "\u0002\u0002\u0002\u149a\u149c\u0007\u01f0\u0002\u0002\u149b\u149d\u0005",
    "\u037e\u01c0\u0002\u149c\u149b\u0003\u0002\u0002\u0002\u149c\u149d\u0003",
    "\u0002\u0002\u0002\u149d\u149e\u0003\u0002\u0002\u0002\u149e\u14a0\u0007",
    "\u01f1\u0002\u0002\u149f\u14a1\u0005\u037c\u01bf\u0002\u14a0\u149f\u0003",
    "\u0002\u0002\u0002\u14a1\u14a2\u0003\u0002\u0002\u0002\u14a2\u14a0\u0003",
    "\u0002\u0002\u0002\u14a2\u14a3\u0003\u0002\u0002\u0002\u14a3\u037b\u0003",
    "\u0002\u0002\u0002\u14a4\u14a5\u0007\u0201\u0002\u0002\u14a5\u14a7\u0007",
    "\u01f2\u0002\u0002\u14a6\u14a8\u0005\u037e\u01c0\u0002\u14a7\u14a6\u0003",
    "\u0002\u0002\u0002\u14a7\u14a8\u0003\u0002\u0002\u0002\u14a8\u14a9\u0003",
    "\u0002\u0002\u0002\u14a9\u14aa\u0007\u01f3\u0002\u0002\u14aa\u14ab\u0007",
    "\u01eb\u0002\u0002\u14ab\u14ad\u0007\u01f0\u0002\u0002\u14ac\u14ae\u0005",
    "\u037e\u01c0\u0002\u14ad\u14ac\u0003\u0002\u0002\u0002\u14ad\u14ae\u0003",
    "\u0002\u0002\u0002\u14ae\u14af\u0003\u0002\u0002\u0002\u14af\u14b0\u0007",
    "\u01f1\u0002\u0002\u14b0\u037d\u0003\u0002\u0002\u0002\u14b1\u14b6\u0005",
    "\u0006\u0004\u0002\u14b2\u14b3\u0007\u01f4\u0002\u0002\u14b3\u14b4\u0005",
    "\u02e6\u0174\u0002\u14b4\u14b5\u0007\u01f5\u0002\u0002\u14b5\u14b7\u0003",
    "\u0002\u0002\u0002\u14b6\u14b2\u0003\u0002\u0002\u0002\u14b6\u14b7\u0003",
    "\u0002\u0002\u0002\u14b7\u037f\u0003\u0002\u0002\u0002\u14b8\u14c2\u0007",
    "\u0202\u0002\u0002\u14b9\u14be\u0005\u0382\u01c2\u0002\u14ba\u14bb\u0007",
    "\u01ee\u0002\u0002\u14bb\u14bd\u0005\u0382\u01c2\u0002\u14bc\u14ba\u0003",
    "\u0002\u0002\u0002\u14bd\u14c0\u0003\u0002\u0002\u0002\u14be\u14bc\u0003",
    "\u0002\u0002\u0002\u14be\u14bf\u0003\u0002\u0002\u0002\u14bf\u14c2\u0003",
    "\u0002\u0002\u0002\u14c0\u14be\u0003\u0002\u0002\u0002\u14c1\u14b8\u0003",
    "\u0002\u0002\u0002\u14c1\u14b9\u0003\u0002\u0002\u0002\u14c2\u0381\u0003",
    "\u0002\u0002\u0002\u14c3\u14c9\u0005\u0006\u0004\u0002\u14c4\u14c5\u0005",
    "\u0006\u0004\u0002\u14c5\u14c6\u0007\u01ec\u0002\u0002\u14c6\u14c7\u0007",
    "\u0202\u0002\u0002\u14c7\u14c9\u0003\u0002\u0002\u0002\u14c8\u14c3\u0003",
    "\u0002\u0002\u0002\u14c8\u14c4\u0003\u0002\u0002\u0002\u14c9\u14cf\u0003",
    "\u0002\u0002\u0002\u14ca\u14cb\u0005\u0006\u0004\u0002\u14cb\u14cc\u0007",
    "\u01ec\u0002\u0002\u14cc\u14cd\u0005\u0006\u0004\u0002\u14cd\u14cf\u0003",
    "\u0002\u0002\u0002\u14ce\u14c8\u0003\u0002\u0002\u0002\u14ce\u14ca\u0003",
    "\u0002\u0002\u0002\u14cf\u0383\u0003\u0002\u0002\u0002\u14d0\u14d8\u0005",
    "\u038c\u01c7\u0002\u14d1\u14d8\u0005\u038e\u01c8\u0002\u14d2\u14d8\u0005",
    "\u0390\u01c9\u0002\u14d3\u14d8\u0005\u0388\u01c5\u0002\u14d4\u14d8\u0005",
    "\u0394\u01cb\u0002\u14d5\u14d6\u0007\u01f0\u0002\u0002\u14d6\u14d8\u0007",
    "\u01f1\u0002\u0002\u14d7\u14d0\u0003\u0002\u0002\u0002\u14d7\u14d1\u0003",
    "\u0002\u0002\u0002\u14d7\u14d2\u0003\u0002\u0002\u0002\u14d7\u14d3\u0003",
    "\u0002\u0002\u0002\u14d7\u14d4\u0003\u0002\u0002\u0002\u14d7\u14d5\u0003",
    "\u0002\u0002\u0002\u14d8\u0385\u0003\u0002\u0002\u0002\u14d9\u14dc\u0005",
    "\u0388\u01c5\u0002\u14da\u14dc\u0005\u0394\u01cb\u0002\u14db\u14d9\u0003",
    "\u0002\u0002\u0002\u14db\u14da\u0003\u0002\u0002\u0002\u14dc\u0387\u0003",
    "\u0002\u0002\u0002\u14dd\u14de\u0007\u01f0\u0002\u0002\u14de\u14e3\u0005",
    "\u0394\u01cb\u0002\u14df\u14e0\u0007\u01ee\u0002\u0002\u14e0\u14e2\u0005",
    "\u0394\u01cb\u0002\u14e1\u14df\u0003\u0002\u0002\u0002\u14e2\u14e5\u0003",
    "\u0002\u0002\u0002\u14e3\u14e1\u0003\u0002\u0002\u0002\u14e3\u14e4\u0003",
    "\u0002\u0002\u0002\u14e4\u14e6\u0003\u0002\u0002\u0002\u14e5\u14e3\u0003",
    "\u0002\u0002\u0002\u14e6\u14e7\u0007\u01f1\u0002\u0002\u14e7\u0389\u0003",
    "\u0002\u0002\u0002\u14e8\u14ed\u0005\u0390\u01c9\u0002\u14e9\u14ea\u0007",
    "\u01ee\u0002\u0002\u14ea\u14ec\u0005\u0390\u01c9\u0002\u14eb\u14e9\u0003",
    "\u0002\u0002\u0002\u14ec\u14ef\u0003\u0002\u0002\u0002\u14ed\u14eb\u0003",
    "\u0002\u0002\u0002\u14ed\u14ee\u0003\u0002\u0002\u0002\u14ee\u1504\u0003",
    "\u0002\u0002\u0002\u14ef\u14ed\u0003\u0002\u0002\u0002\u14f0\u14f5\u0005",
    "\u038c\u01c7\u0002\u14f1\u14f2\u0007\u01ee\u0002\u0002\u14f2\u14f4\u0005",
    "\u038c\u01c7\u0002\u14f3\u14f1\u0003\u0002\u0002\u0002\u14f4\u14f7\u0003",
    "\u0002\u0002\u0002\u14f5\u14f3\u0003\u0002\u0002\u0002\u14f5\u14f6\u0003",
    "\u0002\u0002\u0002\u14f6\u1504\u0003\u0002\u0002\u0002\u14f7\u14f5\u0003",
    "\u0002\u0002\u0002\u14f8\u14fd\u0005\u038e\u01c8\u0002\u14f9\u14fa\u0007",
    "\u01ee\u0002\u0002\u14fa\u14fc\u0005\u038e\u01c8\u0002\u14fb\u14f9\u0003",
    "\u0002\u0002\u0002\u14fc\u14ff\u0003\u0002\u0002\u0002\u14fd\u14fb\u0003",
    "\u0002\u0002\u0002\u14fd\u14fe\u0003\u0002\u0002\u0002\u14fe\u1504\u0003",
    "\u0002\u0002\u0002\u14ff\u14fd\u0003\u0002\u0002\u0002\u1500\u1504\u0005",
    "\u0394\u01cb\u0002\u1501\u1502\u0007\u01f0\u0002\u0002\u1502\u1504\u0007",
    "\u01f1\u0002\u0002\u1503\u14e8\u0003\u0002\u0002\u0002\u1503\u14f0\u0003",
    "\u0002\u0002\u0002\u1503\u14f8\u0003\u0002\u0002\u0002\u1503\u1500\u0003",
    "\u0002\u0002\u0002\u1503\u1501\u0003\u0002\u0002\u0002\u1504\u038b\u0003",
    "\u0002\u0002\u0002\u1505\u1506\u0007\u0143\u0002\u0002\u1506\u1507\u0007",
    "\u01f0\u0002\u0002\u1507\u150c\u0005\u0386\u01c4\u0002\u1508\u1509\u0007",
    "\u01ee\u0002\u0002\u1509\u150b\u0005\u0386\u01c4\u0002\u150a\u1508\u0003",
    "\u0002\u0002\u0002\u150b\u150e\u0003\u0002\u0002\u0002\u150c\u150a\u0003",
    "\u0002\u0002\u0002\u150c\u150d\u0003\u0002\u0002\u0002\u150d\u150f\u0003",
    "\u0002\u0002\u0002\u150e\u150c\u0003\u0002\u0002\u0002\u150f\u1510\u0007",
    "\u01f1\u0002\u0002\u1510\u038d\u0003\u0002\u0002\u0002\u1511\u1512\u0007",
    "\u0144\u0002\u0002\u1512\u1513\u0007\u01f0\u0002\u0002\u1513\u1518\u0005",
    "\u0386\u01c4\u0002\u1514\u1515\u0007\u01ee\u0002\u0002\u1515\u1517\u0005",
    "\u0386\u01c4\u0002\u1516\u1514\u0003\u0002\u0002\u0002\u1517\u151a\u0003",
    "\u0002\u0002\u0002\u1518\u1516\u0003\u0002\u0002\u0002\u1518\u1519\u0003",
    "\u0002\u0002\u0002\u1519\u151b\u0003\u0002\u0002\u0002\u151a\u1518\u0003",
    "\u0002\u0002\u0002\u151b\u151c\u0007\u01f1\u0002\u0002\u151c\u038f\u0003",
    "\u0002\u0002\u0002\u151d\u151e\u0007\u0163\u0002\u0002\u151e\u151f\u0007",
    "\u0164\u0002\u0002\u151f\u1520\u0007\u01f0\u0002\u0002\u1520\u1525\u0005",
    "\u0384\u01c3\u0002\u1521\u1522\u0007\u01ee\u0002\u0002\u1522\u1524\u0005",
    "\u0384\u01c3\u0002\u1523\u1521\u0003\u0002\u0002\u0002\u1524\u1527\u0003",
    "\u0002\u0002\u0002\u1525\u1523\u0003\u0002\u0002\u0002\u1525\u1526\u0003",
    "\u0002\u0002\u0002\u1526\u1528\u0003\u0002\u0002\u0002\u1527\u1525\u0003",
    "\u0002\u0002\u0002\u1528\u1529\u0007\u01f1\u0002\u0002\u1529\u0391\u0003",
    "\u0002\u0002\u0002\u152a\u152b\u0007\u0011\u0002\u0002\u152b\u152c\u0007",
    "\u0013\u0002\u0002\u152c\u1531\u0005\u038a\u01c6\u0002\u152d\u152e\u0007",
    "\u01ee\u0002\u0002\u152e\u1530\u0005\u038a\u01c6\u0002\u152f\u152d\u0003",
    "\u0002\u0002\u0002\u1530\u1533\u0003\u0002\u0002\u0002\u1531\u152f\u0003",
    "\u0002\u0002\u0002\u1531\u1532\u0003\u0002\u0002\u0002\u1532\u0393\u0003",
    "\u0002\u0002\u0002\u1533\u1531\u0003\u0002\u0002\u0002\u1534\u1535\u0005",
    "\u02e6\u0174\u0002\u1535\u0395\u0003\u0002\u0002\u0002\u1536\u153a\u0005",
    "\u0398\u01cd\u0002\u1537\u153a\u0005\u039a\u01ce\u0002\u1538\u153a\u0005",
    "\u039c\u01cf\u0002\u1539\u1536\u0003\u0002\u0002\u0002\u1539\u1537\u0003",
    "\u0002\u0002\u0002\u1539\u1538\u0003\u0002\u0002\u0002\u153a\u0397\u0003",
    "\u0002\u0002\u0002\u153b\u153c\u0007D\u0002\u0002\u153c\u153e\u0007",
    "G\u0002\u0002\u153d\u153f\u0007<\u0002\u0002\u153e\u153d\u0003\u0002",
    "\u0002\u0002\u153e\u153f\u0003\u0002\u0002\u0002\u153f\u1540\u0003\u0002",
    "\u0002\u0002\u1540\u1541\u0007H\u0002\u0002\u1541\u1543\u0007\u0212",
    "\u0002\u0002\u1542\u1544\u0007\u001e\u0002\u0002\u1543\u1542\u0003\u0002",
    "\u0002\u0002\u1543\u1544\u0003\u0002\u0002\u0002\u1544\u1545\u0003\u0002",
    "\u0002\u0002\u1545\u1546\u0007\u0089\u0002\u0002\u1546\u1547\u0007.",
    "\u0002\u0002\u1547\u1548\u0005J&\u0002\u1548\u0399\u0003\u0002\u0002",
    "\u0002\u1549\u154a\u0007E\u0002\u0002\u154a\u154b\u0007.\u0002\u0002",
    "\u154b\u154c\u0005J&\u0002\u154c\u154d\u0007Z\u0002\u0002\u154d\u154e",
    "\u0007\u0212\u0002\u0002\u154e\u039b\u0003\u0002\u0002\u0002\u154f\u1555",
    "\u0007F\u0002\u0002\u1550\u1552\u0007M\u0002\u0002\u1551\u1550\u0003",
    "\u0002\u0002\u0002\u1551\u1552\u0003\u0002\u0002\u0002\u1552\u1553\u0003",
    "\u0002\u0002\u0002\u1553\u1554\u0007.\u0002\u0002\u1554\u1556\u0005",
    "J&\u0002\u1555\u1551\u0003\u0002\u0002\u0002\u1555\u1556\u0003\u0002",
    "\u0002\u0002\u1556\u1557\u0003\u0002\u0002\u0002\u1557\u1558\u0007\u0017",
    "\u0002\u0002\u1558\u155a\u0007\u0212\u0002\u0002\u1559\u155b\u0005\u01f2",
    "\u00fa\u0002\u155a\u1559\u0003\u0002\u0002\u0002\u155a\u155b\u0003\u0002",
    "\u0002\u0002\u155b\u039d\u0003\u0002\u0002\u0002\u155c\u155d\u0007L",
    "\u0002\u0002\u155d\u155e\u0007<\u0002\u0002\u155e\u155f\u00073\u0002",
    "\u0002\u155f\u1560\u0005\u0006\u0004\u0002\u1560\u1561\u0007)\u0002",
    "\u0002\u1561\u1562\u0005\u0010\t\u0002\u1562\u1563\u0007\u01f0\u0002",
    "\u0002\u1563\u1564\u0005\u03ac\u01d7\u0002\u1564\u1566\u0007\u01f1\u0002",
    "\u0002\u1565\u1567\u0005\u03b2\u01da\u0002\u1566\u1565\u0003\u0002\u0002",
    "\u0002\u1566\u1567\u0003\u0002\u0002\u0002\u1567\u157f\u0003\u0002\u0002",
    "\u0002\u1568\u1569\u0007L\u0002\u0002\u1569\u156a\u0007=\u0002\u0002",
    "\u156a\u156b\u00073\u0002\u0002\u156b\u156c\u0005\u0006\u0004\u0002",
    "\u156c\u156d\u0007)\u0002\u0002\u156d\u156e\u0005\u0010\t\u0002\u156e",
    "\u156f\u0007\u01f0\u0002\u0002\u156f\u1570\u0005\u03ac\u01d7\u0002\u1570",
    "\u1572\u0007\u01f1\u0002\u0002\u1571\u1573\u0005\u03b2\u01da\u0002\u1572",
    "\u1571\u0003\u0002\u0002\u0002\u1572\u1573\u0003\u0002\u0002\u0002\u1573",
    "\u157f\u0003\u0002\u0002\u0002\u1574\u1575\u0007L\u0002\u0002\u1575",
    "\u1576\u0007\u01d4\u0002\u0002\u1576\u1577\u00073\u0002\u0002\u1577",
    "\u1578\u0007)\u0002\u0002\u1578\u1579\u0005\u0010\t\u0002\u1579\u157a",
    "\u0007\u01f0\u0002\u0002\u157a\u157b\u0005\u03a2\u01d2\u0002\u157b\u157c",
    "\u0007\u01f1\u0002\u0002\u157c\u157d\u0005\u03a8\u01d5\u0002\u157d\u157f",
    "\u0003\u0002\u0002\u0002\u157e\u155c\u0003\u0002\u0002\u0002\u157e\u1568",
    "\u0003\u0002\u0002\u0002\u157e\u1574\u0003\u0002\u0002\u0002\u157f\u039f",
    "\u0003\u0002\u0002\u0002\u1580\u1581\u00075\u0002\u0002\u1581\u1582",
    "\u0007=\u0002\u0002\u1582\u1583\u00073\u0002\u0002\u1583\u1584\u0005",
    "\u0006\u0004\u0002\u1584\u1585\u0007)\u0002\u0002\u1585\u1586\u0005",
    "\u0010\t\u0002\u1586\u1587\u0007\u01f0\u0002\u0002\u1587\u1588\u0005",
    "\u03ac\u01d7\u0002\u1588\u158a\u0007\u01f1\u0002\u0002\u1589\u158b\u0005",
    "\u03b2\u01da\u0002\u158a\u1589\u0003\u0002\u0002\u0002\u158a\u158b\u0003",
    "\u0002\u0002\u0002\u158b\u03a1\u0003\u0002\u0002\u0002\u158c\u1591\u0005",
    "\u03a4\u01d3\u0002\u158d\u158e\u0007\u01ee\u0002\u0002\u158e\u1590\u0005",
    "\u03a4\u01d3\u0002\u158f\u158d\u0003\u0002\u0002\u0002\u1590\u1593\u0003",
    "\u0002\u0002\u0002\u1591\u158f\u0003\u0002\u0002\u0002\u1591\u1592\u0003",
    "\u0002\u0002\u0002\u1592\u03a3\u0003\u0002\u0002\u0002\u1593\u1591\u0003",
    "\u0002\u0002\u0002\u1594\u1596\u0005\u0006\u0004\u0002\u1595\u1597\u0005",
    "\u03a6\u01d4\u0002\u1596\u1595\u0003\u0002\u0002\u0002\u1596\u1597\u0003",
    "\u0002\u0002\u0002\u1597\u03a5\u0003\u0002\u0002\u0002\u1598\u1599\u0007",
    "\u01d5\u0002\u0002\u1599\u159a\u0007\u01f2\u0002\u0002\u159a\u159b\u0005",
    "\u00fe\u0080\u0002\u159b\u159c\u0007\u01f3\u0002\u0002\u159c\u03a7\u0003",
    "\u0002\u0002\u0002\u159d\u159e\u0007\u01d2\u0002\u0002\u159e\u159f\u0007",
    "\u01d3\u0002\u0002\u159f\u15a0\u0007\u021a\u0002\u0002\u15a0\u03a9\u0003",
    "\u0002\u0002\u0002\u15a1\u15a2\u0007U\u0002\u0002\u15a2\u15a4\u0007",
    "3\u0002\u0002\u15a3\u15a5\u0005\u01fe\u0100\u0002\u15a4\u15a3\u0003",
    "\u0002\u0002\u0002\u15a4\u15a5\u0003\u0002\u0002\u0002\u15a5\u15a6\u0003",
    "\u0002\u0002\u0002\u15a6\u15a7\u0005\u0006\u0004\u0002\u15a7\u15a8\u0007",
    ")\u0002\u0002\u15a8\u15a9\u0005\u0010\t\u0002\u15a9\u03ab\u0003\u0002",
    "\u0002\u0002\u15aa\u15af\u0005\u03ae\u01d8\u0002\u15ab\u15ac\u0007\u01ee",
    "\u0002\u0002\u15ac\u15ae\u0005\u03ae\u01d8\u0002\u15ad\u15ab\u0003\u0002",
    "\u0002\u0002\u15ae\u15b1\u0003\u0002\u0002\u0002\u15af\u15ad\u0003\u0002",
    "\u0002\u0002\u15af\u15b0\u0003\u0002\u0002\u0002\u15b0\u03ad\u0003\u0002",
    "\u0002\u0002\u15b1\u15af\u0003\u0002\u0002\u0002\u15b2\u15b4\u0005\u0006",
    "\u0004\u0002\u15b3\u15b5\u0005\u03b0\u01d9\u0002\u15b4\u15b3\u0003\u0002",
    "\u0002\u0002\u15b4\u15b5\u0003\u0002\u0002\u0002\u15b5\u03af\u0003\u0002",
    "\u0002\u0002\u15b6\u15b7\u0007\u01ce\u0002\u0002\u15b7\u15b8\u0007\u01cf",
    "\u0002\u0002\u15b8\u15bd\u0007\u021a\u0002\u0002\u15b9\u15ba\u0007\u01f0",
    "\u0002\u0002\u15ba\u15bb\u0007\u021a\u0002\u0002\u15bb\u15bd\u0007\u01f1",
    "\u0002\u0002\u15bc\u15b6\u0003\u0002\u0002\u0002\u15bc\u15b9\u0003\u0002",
    "\u0002\u0002\u15bd\u03b1\u0003\u0002\u0002\u0002\u15be\u15bf\u0007\u01d0",
    "\u0002\u0002\u15bf\u15c0\u0007\u01f0\u0002\u0002\u15c0\u15c1\u0005>",
    " \u0002\u15c1\u15c2\u0007\u01f1\u0002\u0002\u15c2\u03b3\u0003\u0002",
    "\u0002\u0002\u15c3\u15c9\u0005\u0396\u01cc\u0002\u15c4\u15c9\u0005\u02c0",
    "\u0161\u0002\u15c5\u15c9\u0005\u0142\u00a2\u0002\u15c6\u15c9\u0005\u03e6",
    "\u01f4\u0002\u15c7\u15c9\u0005\u00f2z\u0002\u15c8\u15c3\u0003\u0002",
    "\u0002\u0002\u15c8\u15c4\u0003\u0002\u0002\u0002\u15c8\u15c5\u0003\u0002",
    "\u0002\u0002\u15c8\u15c6\u0003\u0002\u0002\u0002\u15c8\u15c7\u0003\u0002",
    "\u0002\u0002\u15c9\u03b5\u0003\u0002\u0002\u0002\u15ca\u15d7\u0005\u040a",
    "\u0206\u0002\u15cb\u15cd\u0005\u03c4\u01e3\u0002\u15cc\u15cb\u0003\u0002",
    "\u0002\u0002\u15cc\u15cd\u0003\u0002\u0002\u0002\u15cd\u15ce\u0003\u0002",
    "\u0002\u0002\u15ce\u15cf\u0007\u0089\u0002\u0002\u15cf\u15d4\u0005\u04ea",
    "\u0276\u0002\u15d0\u15d1\u0007\u01ee\u0002\u0002\u15d1\u15d3\u0005\u04ea",
    "\u0276\u0002\u15d2\u15d0\u0003\u0002\u0002\u0002\u15d3\u15d6\u0003\u0002",
    "\u0002\u0002\u15d4\u15d2\u0003\u0002\u0002\u0002\u15d4\u15d5\u0003\u0002",
    "\u0002\u0002\u15d5\u15d8\u0003\u0002\u0002\u0002\u15d6\u15d4\u0003\u0002",
    "\u0002\u0002\u15d7\u15cc\u0003\u0002\u0002\u0002\u15d7\u15d8\u0003\u0002",
    "\u0002\u0002\u15d8\u15d9\u0003\u0002\u0002\u0002\u15d9\u15db\u0005\u030c",
    "\u0187\u0002\u15da\u15dc\u0005\u03ca\u01e6\u0002\u15db\u15da\u0003\u0002",
    "\u0002\u0002\u15db\u15dc\u0003\u0002\u0002\u0002\u15dc\u15de\u0003\u0002",
    "\u0002\u0002\u15dd\u15df\u0005\u03dc\u01ef\u0002\u15de\u15dd\u0003\u0002",
    "\u0002\u0002\u15de\u15df\u0003\u0002\u0002\u0002\u15df\u15e1\u0003\u0002",
    "\u0002\u0002\u15e0\u15e2\u0005\u0392\u01ca\u0002\u15e1\u15e0\u0003\u0002",
    "\u0002\u0002\u15e1\u15e2\u0003\u0002\u0002\u0002\u15e2\u15e4\u0003\u0002",
    "\u0002\u0002\u15e3\u15e5\u0005\u03ce\u01e8\u0002\u15e4\u15e3\u0003\u0002",
    "\u0002\u0002\u15e4\u15e5\u0003\u0002\u0002\u0002\u15e5\u15e7\u0003\u0002",
    "\u0002\u0002\u15e6\u15e8\u0005\u03cc\u01e7\u0002\u15e7\u15e6\u0003\u0002",
    "\u0002\u0002\u15e7\u15e8\u0003\u0002\u0002\u0002\u15e8\u15ea\u0003\u0002",
    "\u0002\u0002\u15e9\u15eb\u0005\u044e\u0228\u0002\u15ea\u15e9\u0003\u0002",
    "\u0002\u0002\u15ea\u15eb\u0003\u0002\u0002\u0002\u15eb\u15ed\u0003\u0002",
    "\u0002\u0002\u15ec\u15ee\u0005\u0450\u0229\u0002\u15ed\u15ec\u0003\u0002",
    "\u0002\u0002\u15ed\u15ee\u0003\u0002\u0002\u0002\u15ee\u15f0\u0003\u0002",
    "\u0002\u0002\u15ef\u15f1\u0005\u0454\u022b\u0002\u15f0\u15ef\u0003\u0002",
    "\u0002\u0002\u15f0\u15f1\u0003\u0002\u0002\u0002\u15f1\u15f3\u0003\u0002",
    "\u0002\u0002\u15f2\u15f4\u0005\u0456\u022c\u0002\u15f3\u15f2\u0003\u0002",
    "\u0002\u0002\u15f3\u15f4\u0003\u0002\u0002\u0002\u15f4\u15f6\u0003\u0002",
    "\u0002\u0002\u15f5\u15f7\u0005\u045e\u0230\u0002\u15f6\u15f5\u0003\u0002",
    "\u0002\u0002\u15f6\u15f7\u0003\u0002\u0002\u0002\u15f7\u15f9\u0003\u0002",
    "\u0002\u0002\u15f8\u15fa\u0005\u047a\u023e\u0002\u15f9\u15f8\u0003\u0002",
    "\u0002\u0002\u15f9\u15fa\u0003\u0002\u0002\u0002\u15fa\u15fc\u0003\u0002",
    "\u0002\u0002\u15fb\u15fd\u0005\u0458\u022d\u0002\u15fc\u15fb\u0003\u0002",
    "\u0002\u0002\u15fc\u15fd\u0003\u0002\u0002\u0002\u15fd\u15ff\u0003\u0002",
    "\u0002\u0002\u15fe\u1600\u0005\u045c\u022f\u0002\u15ff\u15fe\u0003\u0002",
    "\u0002\u0002\u15ff\u1600\u0003\u0002\u0002\u0002\u1600\u03b7\u0003\u0002",
    "\u0002\u0002\u1601\u160e\u0005\u040a\u0206\u0002\u1602\u1604\u0005\u03c4",
    "\u01e3\u0002\u1603\u1602\u0003\u0002\u0002\u0002\u1603\u1604\u0003\u0002",
    "\u0002\u0002\u1604\u1605\u0003\u0002\u0002\u0002\u1605\u1606\u0007\u0089",
    "\u0002\u0002\u1606\u160b\u0005\u04ea\u0276\u0002\u1607\u1608\u0007\u01ee",
    "\u0002\u0002\u1608\u160a\u0005\u04ea\u0276\u0002\u1609\u1607\u0003\u0002",
    "\u0002\u0002\u160a\u160d\u0003\u0002\u0002\u0002\u160b\u1609\u0003\u0002",
    "\u0002\u0002\u160b\u160c\u0003\u0002\u0002\u0002\u160c\u160f\u0003\u0002",
    "\u0002\u0002\u160d\u160b\u0003\u0002\u0002\u0002\u160e\u1603\u0003\u0002",
    "\u0002\u0002\u160e\u160f\u0003\u0002\u0002\u0002\u160f\u1610\u0003\u0002",
    "\u0002\u0002\u1610\u1612\u0005\u030c\u0187\u0002\u1611\u1613\u0005\u03ca",
    "\u01e6\u0002\u1612\u1611\u0003\u0002\u0002\u0002\u1612\u1613\u0003\u0002",
    "\u0002\u0002\u1613\u1615\u0003\u0002\u0002\u0002\u1614\u1616\u0005\u03dc",
    "\u01ef\u0002\u1615\u1614\u0003\u0002\u0002\u0002\u1615\u1616\u0003\u0002",
    "\u0002\u0002\u1616\u1618\u0003\u0002\u0002\u0002\u1617\u1619\u0005\u0392",
    "\u01ca\u0002\u1618\u1617\u0003\u0002\u0002\u0002\u1618\u1619\u0003\u0002",
    "\u0002\u0002\u1619\u161b\u0003\u0002\u0002\u0002\u161a\u161c\u0005\u03ce",
    "\u01e8\u0002\u161b\u161a\u0003\u0002\u0002\u0002\u161b\u161c\u0003\u0002",
    "\u0002\u0002\u161c\u161e\u0003\u0002\u0002\u0002\u161d\u161f\u0005\u03cc",
    "\u01e7\u0002\u161e\u161d\u0003\u0002\u0002\u0002\u161e\u161f\u0003\u0002",
    "\u0002\u0002\u161f\u1621\u0003\u0002\u0002\u0002\u1620\u1622\u0005\u044e",
    "\u0228\u0002\u1621\u1620\u0003\u0002\u0002\u0002\u1621\u1622\u0003\u0002",
    "\u0002\u0002\u1622\u1624\u0003\u0002\u0002\u0002\u1623\u1625\u0005\u0450",
    "\u0229\u0002\u1624\u1623\u0003\u0002\u0002\u0002\u1624\u1625\u0003\u0002",
    "\u0002\u0002\u1625\u1627\u0003\u0002\u0002\u0002\u1626\u1628\u0005\u0454",
    "\u022b\u0002\u1627\u1626\u0003\u0002\u0002\u0002\u1627\u1628\u0003\u0002",
    "\u0002\u0002\u1628\u162a\u0003\u0002\u0002\u0002\u1629\u162b\u0005\u0456",
    "\u022c\u0002\u162a\u1629\u0003\u0002\u0002\u0002\u162a\u162b\u0003\u0002",
    "\u0002\u0002\u162b\u162d\u0003\u0002\u0002\u0002\u162c\u162e\u0005\u045e",
    "\u0230\u0002\u162d\u162c\u0003\u0002\u0002\u0002\u162d\u162e\u0003\u0002",
    "\u0002\u0002\u162e\u1630\u0003\u0002\u0002\u0002\u162f\u1631\u0005\u047a",
    "\u023e\u0002\u1630\u162f\u0003\u0002\u0002\u0002\u1630\u1631\u0003\u0002",
    "\u0002\u0002\u1631\u1633\u0003\u0002\u0002\u0002\u1632\u1634\u0005\u0458",
    "\u022d\u0002\u1633\u1632\u0003\u0002\u0002\u0002\u1633\u1634\u0003\u0002",
    "\u0002\u0002\u1634\u1636\u0003\u0002\u0002\u0002\u1635\u1637\u0005\u045c",
    "\u022f\u0002\u1636\u1635\u0003\u0002\u0002\u0002\u1636\u1637\u0003\u0002",
    "\u0002\u0002\u1637\u03b9\u0003\u0002\u0002\u0002\u1638\u1639\u0007\u001b",
    "\u0002\u0002\u1639\u163b\u0007\u0089\u0002\u0002\u163a\u163c\u0007.",
    "\u0002\u0002\u163b\u163a\u0003\u0002\u0002\u0002\u163b\u163c\u0003\u0002",
    "\u0002\u0002\u163c\u163d\u0003\u0002\u0002\u0002\u163d\u163e\u0005J",
    "&\u0002\u163e\u163f\u0005\u03d2\u01ea\u0002\u163f\u03bb\u0003\u0002",
    "\u0002\u0002\u1640\u1641\u0007\u001c\u0002\u0002\u1641\u1642\u0007\u0089",
    "\u0002\u0002\u1642\u1643\u0005J&\u0002\u1643\u1644\u0005\u03d8\u01ed",
    "\u0002\u1644\u03bd\u0003\u0002\u0002\u0002\u1645\u1647\u0007\u00c6\u0002",
    "\u0002\u1646\u1648\u0005\u03c0\u01e1\u0002\u1647\u1646\u0003\u0002\u0002",
    "\u0002\u1648\u1649\u0003\u0002\u0002\u0002\u1649\u1647\u0003\u0002\u0002",
    "\u0002\u1649\u164a\u0003\u0002\u0002\u0002\u164a\u164b\u0003\u0002\u0002",
    "\u0002\u164b\u164c\u0005\u03e6\u01f4\u0002\u164c\u03bf\u0003\u0002\u0002",
    "\u0002\u164d\u164f\u0007\u00c6\u0002\u0002\u164e\u164d\u0003\u0002\u0002",
    "\u0002\u164e\u164f\u0003\u0002\u0002\u0002\u164f\u1650\u0003\u0002\u0002",
    "\u0002\u1650\u1651\u0007\u021b\u0002\u0002\u1651\u1652\u0007\u0018\u0002",
    "\u0002\u1652\u1653\u0007\u01f0\u0002\u0002\u1653\u1654\u0005\u03e6\u01f4",
    "\u0002\u1654\u1656\u0007\u01f1\u0002\u0002\u1655\u1657\u0007\u01ee\u0002",
    "\u0002\u1656\u1655\u0003\u0002\u0002\u0002\u1656\u1657\u0003\u0002\u0002",
    "\u0002\u1657\u03c1\u0003\u0002\u0002\u0002\u1658\u165b\u0005\u03c8\u01e5",
    "\u0002\u1659\u165c\u0005\u03be\u01e0\u0002\u165a\u165c\u0005\u03e8\u01f5",
    "\u0002\u165b\u1659\u0003\u0002\u0002\u0002\u165b\u165a\u0003\u0002\u0002",
    "\u0002\u165c\u1687\u0003\u0002\u0002\u0002\u165d\u165e\u0005\u03c8\u01e5",
    "\u0002\u165e\u165f\u0005\u040a\u0206\u0002\u165f\u1661\u0005\u030c\u0187",
    "\u0002\u1660\u1662\u0005\u03ca\u01e6\u0002\u1661\u1660\u0003\u0002\u0002",
    "\u0002\u1661\u1662\u0003\u0002\u0002\u0002\u1662\u1664\u0003\u0002\u0002",
    "\u0002\u1663\u1665\u0005\u03dc\u01ef\u0002\u1664\u1663\u0003\u0002\u0002",
    "\u0002\u1664\u1665\u0003\u0002\u0002\u0002\u1665\u1667\u0003\u0002\u0002",
    "\u0002\u1666\u1668\u0005\u0392\u01ca\u0002\u1667\u1666\u0003\u0002\u0002",
    "\u0002\u1667\u1668\u0003\u0002\u0002\u0002\u1668\u166a\u0003\u0002\u0002",
    "\u0002\u1669\u166b\u0005\u03ce\u01e8\u0002\u166a\u1669\u0003\u0002\u0002",
    "\u0002\u166a\u166b\u0003\u0002\u0002\u0002\u166b\u166d\u0003\u0002\u0002",
    "\u0002\u166c\u166e\u0005\u03cc\u01e7\u0002\u166d\u166c\u0003\u0002\u0002",
    "\u0002\u166d\u166e\u0003\u0002\u0002\u0002\u166e\u1670\u0003\u0002\u0002",
    "\u0002\u166f\u1671\u0005\u044e\u0228\u0002\u1670\u166f\u0003\u0002\u0002",
    "\u0002\u1670\u1671\u0003\u0002\u0002\u0002\u1671\u1673\u0003\u0002\u0002",
    "\u0002\u1672\u1674\u0005\u0450\u0229\u0002\u1673\u1672\u0003\u0002\u0002",
    "\u0002\u1673\u1674\u0003\u0002\u0002\u0002\u1674\u1676\u0003\u0002\u0002",
    "\u0002\u1675\u1677\u0005\u0454\u022b\u0002\u1676\u1675\u0003\u0002\u0002",
    "\u0002\u1676\u1677\u0003\u0002\u0002\u0002\u1677\u1679\u0003\u0002\u0002",
    "\u0002\u1678\u167a\u0005\u0456\u022c\u0002\u1679\u1678\u0003\u0002\u0002",
    "\u0002\u1679\u167a\u0003\u0002\u0002\u0002\u167a\u167c\u0003\u0002\u0002",
    "\u0002\u167b\u167d\u0005\u045e\u0230\u0002\u167c\u167b\u0003\u0002\u0002",
    "\u0002\u167c\u167d\u0003\u0002\u0002\u0002\u167d\u167f\u0003\u0002\u0002",
    "\u0002\u167e\u1680\u0005\u0458\u022d\u0002\u167f\u167e\u0003\u0002\u0002",
    "\u0002\u167f\u1680\u0003\u0002\u0002\u0002\u1680\u1687\u0003\u0002\u0002",
    "\u0002\u1681\u1687\u0005\u03b6\u01dc\u0002\u1682\u1687\u0005\u0120\u0091",
    "\u0002\u1683\u1687\u0005\u03ba\u01de\u0002\u1684\u1687\u0005\u03bc\u01df",
    "\u0002\u1685\u1687\u0005\u0376\u01bc\u0002\u1686\u1658\u0003\u0002\u0002",
    "\u0002\u1686\u165d\u0003\u0002\u0002\u0002\u1686\u1681\u0003\u0002\u0002",
    "\u0002\u1686\u1682\u0003\u0002\u0002\u0002\u1686\u1683\u0003\u0002\u0002",
    "\u0002\u1686\u1684\u0003\u0002\u0002\u0002\u1686\u1685\u0003\u0002\u0002",
    "\u0002\u1687\u03c3\u0003\u0002\u0002\u0002\u1688\u1689\u0007\u0198\u0002",
    "\u0002\u1689\u168a\u0007\u0199\u0002\u0002\u168a\u03c5\u0003\u0002\u0002",
    "\u0002\u168b\u168c\u0005\u03c8\u01e5\u0002\u168c\u168e\u0005\u040a\u0206",
    "\u0002\u168d\u168f\u0005\u031a\u018e\u0002\u168e\u168d\u0003\u0002\u0002",
    "\u0002\u168e\u168f\u0003\u0002\u0002\u0002\u168f\u1691\u0003\u0002\u0002",
    "\u0002\u1690\u1692\u0005\u03ca\u01e6\u0002\u1691\u1690\u0003\u0002\u0002",
    "\u0002\u1691\u1692\u0003\u0002\u0002\u0002\u1692\u1694\u0003\u0002\u0002",
    "\u0002\u1693\u1695\u0005\u03dc\u01ef\u0002\u1694\u1693\u0003\u0002\u0002",
    "\u0002\u1694\u1695\u0003\u0002\u0002\u0002\u1695\u1697\u0003\u0002\u0002",
    "\u0002\u1696\u1698\u0005\u0392\u01ca\u0002\u1697\u1696\u0003\u0002\u0002",
    "\u0002\u1697\u1698\u0003\u0002\u0002\u0002\u1698\u169a\u0003\u0002\u0002",
    "\u0002\u1699\u169b\u0005\u03ce\u01e8\u0002\u169a\u1699\u0003\u0002\u0002",
    "\u0002\u169a\u169b\u0003\u0002\u0002\u0002\u169b\u169d\u0003\u0002\u0002",
    "\u0002\u169c\u169e\u0005\u03cc\u01e7\u0002\u169d\u169c\u0003\u0002\u0002",
    "\u0002\u169d\u169e\u0003\u0002\u0002\u0002\u169e\u16a0\u0003\u0002\u0002",
    "\u0002\u169f\u16a1\u0005\u044e\u0228\u0002\u16a0\u169f\u0003\u0002\u0002",
    "\u0002\u16a0\u16a1\u0003\u0002\u0002\u0002\u16a1\u16a3\u0003\u0002\u0002",
    "\u0002\u16a2\u16a4\u0005\u0450\u0229\u0002\u16a3\u16a2\u0003\u0002\u0002",
    "\u0002\u16a3\u16a4\u0003\u0002\u0002\u0002\u16a4\u16a6\u0003\u0002\u0002",
    "\u0002\u16a5\u16a7\u0005\u0454\u022b\u0002\u16a6\u16a5\u0003\u0002\u0002",
    "\u0002\u16a6\u16a7\u0003\u0002\u0002\u0002\u16a7\u16a9\u0003\u0002\u0002",
    "\u0002\u16a8\u16aa\u0005\u0456\u022c\u0002\u16a9\u16a8\u0003\u0002\u0002",
    "\u0002\u16a9\u16aa\u0003\u0002\u0002\u0002\u16aa\u16ac\u0003\u0002\u0002",
    "\u0002\u16ab\u16ad\u0005\u045e\u0230\u0002\u16ac\u16ab\u0003\u0002\u0002",
    "\u0002\u16ac\u16ad\u0003\u0002\u0002\u0002\u16ad\u16af\u0003\u0002\u0002",
    "\u0002\u16ae\u16b0\u0005\u047a\u023e\u0002\u16af\u16ae\u0003\u0002\u0002",
    "\u0002\u16af\u16b0\u0003\u0002\u0002\u0002\u16b0\u16b2\u0003\u0002\u0002",
    "\u0002\u16b1\u16b3\u0005\u0458\u022d\u0002\u16b2\u16b1\u0003\u0002\u0002",
    "\u0002\u16b2\u16b3\u0003\u0002\u0002\u0002\u16b3\u16dd\u0003\u0002\u0002",
    "\u0002\u16b4\u16b6\u0005\u040a\u0206\u0002\u16b5\u16b7\u0005\u031a\u018e",
    "\u0002\u16b6\u16b5\u0003\u0002\u0002\u0002\u16b6\u16b7\u0003\u0002\u0002",
    "\u0002\u16b7\u16b9\u0003\u0002\u0002\u0002\u16b8\u16ba\u0005\u03ca\u01e6",
    "\u0002\u16b9\u16b8\u0003\u0002\u0002\u0002\u16b9\u16ba\u0003\u0002\u0002",
    "\u0002\u16ba\u16bc\u0003\u0002\u0002\u0002\u16bb\u16bd\u0005\u03dc\u01ef",
    "\u0002\u16bc\u16bb\u0003\u0002\u0002\u0002\u16bc\u16bd\u0003\u0002\u0002",
    "\u0002\u16bd\u16bf\u0003\u0002\u0002\u0002\u16be\u16c0\u0005\u0392\u01ca",
    "\u0002\u16bf\u16be\u0003\u0002\u0002\u0002\u16bf\u16c0\u0003\u0002\u0002",
    "\u0002\u16c0\u16c2\u0003\u0002\u0002\u0002\u16c1\u16c3\u0005\u03ce\u01e8",
    "\u0002\u16c2\u16c1\u0003\u0002\u0002\u0002\u16c2\u16c3\u0003\u0002\u0002",
    "\u0002\u16c3\u16c5\u0003\u0002\u0002\u0002\u16c4\u16c6\u0005\u03cc\u01e7",
    "\u0002\u16c5\u16c4\u0003\u0002\u0002\u0002\u16c5\u16c6\u0003\u0002\u0002",
    "\u0002\u16c6\u16c8\u0003\u0002\u0002\u0002\u16c7\u16c9\u0005\u044e\u0228",
    "\u0002\u16c8\u16c7\u0003\u0002\u0002\u0002\u16c8\u16c9\u0003\u0002\u0002",
    "\u0002\u16c9\u16cb\u0003\u0002\u0002\u0002\u16ca\u16cc\u0005\u0450\u0229",
    "\u0002\u16cb\u16ca\u0003\u0002\u0002\u0002\u16cb\u16cc\u0003\u0002\u0002",
    "\u0002\u16cc\u16ce\u0003\u0002\u0002\u0002\u16cd\u16cf\u0005\u0454\u022b",
    "\u0002\u16ce\u16cd\u0003\u0002\u0002\u0002\u16ce\u16cf\u0003\u0002\u0002",
    "\u0002\u16cf\u16d1\u0003\u0002\u0002\u0002\u16d0\u16d2\u0005\u0456\u022c",
    "\u0002\u16d1\u16d0\u0003\u0002\u0002\u0002\u16d1\u16d2\u0003\u0002\u0002",
    "\u0002\u16d2\u16d4\u0003\u0002\u0002\u0002\u16d3\u16d5\u0005\u045e\u0230",
    "\u0002\u16d4\u16d3\u0003\u0002\u0002\u0002\u16d4\u16d5\u0003\u0002\u0002",
    "\u0002\u16d5\u16d7\u0003\u0002\u0002\u0002\u16d6\u16d8\u0005\u047a\u023e",
    "\u0002\u16d7\u16d6\u0003\u0002\u0002\u0002\u16d7\u16d8\u0003\u0002\u0002",
    "\u0002\u16d8\u16da\u0003\u0002\u0002\u0002\u16d9\u16db\u0005\u0458\u022d",
    "\u0002\u16da\u16d9\u0003\u0002\u0002\u0002\u16da\u16db\u0003\u0002\u0002",
    "\u0002\u16db\u16dd\u0003\u0002\u0002\u0002\u16dc\u168b\u0003\u0002\u0002",
    "\u0002\u16dc\u16b4\u0003\u0002\u0002\u0002\u16dd\u03c7\u0003\u0002\u0002",
    "\u0002\u16de\u16df\u0007\u001b\u0002\u0002\u16df\u16e0\u0007\u001e\u0002",
    "\u0002\u16e0\u16e2\u0005\u03e4\u01f3\u0002\u16e1\u16e3\u0005\u0200\u0101",
    "\u0002\u16e2\u16e1\u0003\u0002\u0002\u0002\u16e2\u16e3\u0003\u0002\u0002",
    "\u0002\u16e3\u16eb\u0003\u0002\u0002\u0002\u16e4\u16e5\u0007\u001b\u0002",
    "\u0002\u16e5\u16e7\u0007\u0089\u0002\u0002\u16e6\u16e8\u0007.\u0002",
    "\u0002\u16e7\u16e6\u0003\u0002\u0002\u0002\u16e7\u16e8\u0003\u0002\u0002",
    "\u0002\u16e8\u16e9\u0003\u0002\u0002\u0002\u16e9\u16eb\u0005J&\u0002",
    "\u16ea\u16de\u0003\u0002\u0002\u0002\u16ea\u16e4\u0003\u0002\u0002\u0002",
    "\u16eb\u03c9\u0003\u0002\u0002\u0002\u16ec\u16ed\u0007\u0016\u0002\u0002",
    "\u16ed\u16ee\u0005\u03da\u01ee\u0002\u16ee\u03cb\u0003\u0002\u0002\u0002",
    "\u16ef\u16f0\u0007\u01ea\u0002\u0002\u16f0\u16f1\u0005\u03da\u01ee\u0002",
    "\u16f1\u03cd\u0003\u0002\u0002\u0002\u16f2\u16f3\u0007\u0014\u0002\u0002",
    "\u16f3\u16f4\u0005\u03d0\u01e9\u0002\u16f4\u03cf\u0003\u0002\u0002\u0002",
    "\u16f5\u16f6\u0005\u02e6\u0174\u0002\u16f6\u03d1\u0003\u0002\u0002\u0002",
    "\u16f7\u16f8\u0007\u017f\u0002\u0002\u16f8\u16fd\u0005\u03d4\u01eb\u0002",
    "\u16f9\u16fa\u0007\u01ee\u0002\u0002\u16fa\u16fc\u0005\u03d4\u01eb\u0002",
    "\u16fb\u16f9\u0003\u0002\u0002\u0002\u16fc\u16ff\u0003\u0002\u0002\u0002",
    "\u16fd\u16fb\u0003\u0002\u0002\u0002\u16fd\u16fe\u0003\u0002\u0002\u0002",
    "\u16fe\u03d3\u0003\u0002\u0002\u0002\u16ff\u16fd\u0003\u0002\u0002\u0002",
    "\u1700\u1701\u0007\u01f0\u0002\u0002\u1701\u1706\u0005\u02e6\u0174\u0002",
    "\u1702\u1703\u0007\u01ee\u0002\u0002\u1703\u1705\u0005\u02e6\u0174\u0002",
    "\u1704\u1702\u0003\u0002\u0002\u0002\u1705\u1708\u0003\u0002\u0002\u0002",
    "\u1706\u1704\u0003\u0002\u0002\u0002\u1706\u1707\u0003\u0002\u0002\u0002",
    "\u1707\u1709\u0003\u0002\u0002\u0002\u1708\u1706\u0003\u0002\u0002\u0002",
    "\u1709\u170a\u0007\u01f1\u0002\u0002\u170a\u03d5\u0003\u0002\u0002\u0002",
    "\u170b\u170c\u0007\u017f\u0002\u0002\u170c\u170d\u0005\u03d4\u01eb\u0002",
    "\u170d\u03d7\u0003\u0002\u0002\u0002\u170e\u170f\u0007\u001d\u0002\u0002",
    "\u170f\u1710\u0007\u01f0\u0002\u0002\u1710\u1715\u0005\u03d6\u01ec\u0002",
    "\u1711\u1712\u0007\u01ee\u0002\u0002\u1712\u1714\u0005\u03d6\u01ec\u0002",
    "\u1713\u1711\u0003\u0002\u0002\u0002\u1714\u1717\u0003\u0002\u0002\u0002",
    "\u1715\u1713\u0003\u0002\u0002\u0002\u1715\u1716\u0003\u0002\u0002\u0002",
    "\u1716\u1718\u0003\u0002\u0002\u0002\u1717\u1715\u0003\u0002\u0002\u0002",
    "\u1718\u1719\u0007\u01f1\u0002\u0002\u1719\u03d9\u0003\u0002\u0002\u0002",
    "\u171a\u171b\u0005\u02e6\u0174\u0002\u171b\u03db\u0003\u0002\u0002\u0002",
    "\u171c\u171e\u0005\u03de\u01f0\u0002\u171d\u171c\u0003\u0002\u0002\u0002",
    "\u171d\u171e\u0003\u0002\u0002\u0002\u171e\u171f\u0003\u0002\u0002\u0002",
    "\u171f\u1720\u0005\u03e0\u01f1\u0002\u1720\u03dd\u0003\u0002\u0002\u0002",
    "\u1721\u1722\u0007\u01a2\u0002\u0002\u1722\u1723\u0007\u00c6\u0002\u0002",
    "\u1723\u1724\u0005\u03da\u01ee\u0002\u1724\u03df\u0003\u0002\u0002\u0002",
    "\u1725\u1726\u0007\u01bc\u0002\u0002\u1726\u1728\u0007\u0013\u0002\u0002",
    "\u1727\u1729\u0005\u03e2\u01f2\u0002\u1728\u1727\u0003\u0002\u0002\u0002",
    "\u1728\u1729\u0003\u0002\u0002\u0002\u1729\u172a\u0003\u0002\u0002\u0002",
    "\u172a\u172b\u0005\u03da\u01ee\u0002\u172b\u03e1\u0003\u0002\u0002\u0002",
    "\u172c\u172d\u0007\u00dd\u0002\u0002\u172d\u03e3\u0003\u0002\u0002\u0002",
    "\u172e\u172f\u0007<\u0002\u0002\u172f\u1730\u0007;\u0002\u0002\u1730",
    "\u1732\u0007\u0212\u0002\u0002\u1731\u1733\u0005\u01b2\u00da\u0002\u1732",
    "\u1731\u0003\u0002\u0002\u0002\u1732\u1733\u0003\u0002\u0002\u0002\u1733",
    "\u1735\u0003\u0002\u0002\u0002\u1734\u1736\u0005\u01ea\u00f6\u0002\u1735",
    "\u1734\u0003\u0002\u0002\u0002\u1735\u1736\u0003\u0002\u0002\u0002\u1736",
    "\u1742\u0003\u0002\u0002\u0002\u1737\u1738\u0007;\u0002\u0002\u1738",
    "\u173a\u0007\u0212\u0002\u0002\u1739\u173b\u0005\u01b2\u00da\u0002\u173a",
    "\u1739\u0003\u0002\u0002\u0002\u173a\u173b\u0003\u0002\u0002\u0002\u173b",
    "\u173d\u0003\u0002\u0002\u0002\u173c\u173e\u0005\u01ea\u00f6\u0002\u173d",
    "\u173c\u0003\u0002\u0002\u0002\u173d\u173e\u0003\u0002\u0002\u0002\u173e",
    "\u1742\u0003\u0002\u0002\u0002\u173f\u1740\u0007.\u0002\u0002\u1740",
    "\u1742\u0005J&\u0002\u1741\u172e\u0003\u0002\u0002\u0002\u1741\u1737",
    "\u0003\u0002\u0002\u0002\u1741\u173f\u0003\u0002\u0002\u0002\u1742\u03e5",
    "\u0003\u0002\u0002\u0002\u1743\u1749\u0005\u03ea\u01f6\u0002\u1744\u1745",
    "\u0005\u03ec\u01f7\u0002\u1745\u1746\u0005\u03ea\u01f6\u0002\u1746\u1748",
    "\u0003\u0002\u0002\u0002\u1747\u1744\u0003\u0002\u0002\u0002\u1748\u174b",
    "\u0003\u0002\u0002\u0002\u1749\u1747\u0003\u0002\u0002\u0002\u1749\u174a",
    "\u0003\u0002\u0002\u0002\u174a\u03e7\u0003\u0002\u0002\u0002\u174b\u1749",
    "\u0003\u0002\u0002\u0002\u174c\u1750\u0005\u03ea\u01f6\u0002\u174d\u174e",
    "\u0005\u03ec\u01f7\u0002\u174e\u174f\u0005\u03ea\u01f6\u0002\u174f\u1751",
    "\u0003\u0002\u0002\u0002\u1750\u174d\u0003\u0002\u0002\u0002\u1751\u1752",
    "\u0003\u0002\u0002\u0002\u1752\u1750\u0003\u0002\u0002\u0002\u1752\u1753",
    "\u0003\u0002\u0002\u0002\u1753\u03e9\u0003\u0002\u0002\u0002\u1754\u175a",
    "\u0005\u03ee\u01f8\u0002\u1755\u1756\u0007\u01f0\u0002\u0002\u1756\u1757",
    "\u0005\u03ee\u01f8\u0002\u1757\u1758\u0007\u01f1\u0002\u0002\u1758\u175a",
    "\u0003\u0002\u0002\u0002\u1759\u1754\u0003\u0002\u0002\u0002\u1759\u1755",
    "\u0003\u0002\u0002\u0002\u175a\u03eb\u0003\u0002\u0002\u0002\u175b\u175d",
    "\u0007C\u0002\u0002\u175c\u175e\u0007\u0005\u0002\u0002\u175d\u175c",
    "\u0003\u0002\u0002\u0002\u175d\u175e\u0003\u0002\u0002\u0002\u175e\u1768",
    "\u0003\u0002\u0002\u0002\u175f\u1761\u0007\u010b\u0002\u0002\u1760\u1762",
    "\u0007\u0005\u0002\u0002\u1761\u1760\u0003\u0002\u0002\u0002\u1761\u1762",
    "\u0003\u0002\u0002\u0002\u1762\u1768\u0003\u0002\u0002\u0002\u1763\u1765",
    "\u0007\u010c\u0002\u0002\u1764\u1766\u0007\u0005\u0002\u0002\u1765\u1764",
    "\u0003\u0002\u0002\u0002\u1765\u1766\u0003\u0002\u0002\u0002\u1766\u1768",
    "\u0003\u0002\u0002\u0002\u1767\u175b\u0003\u0002\u0002\u0002\u1767\u175f",
    "\u0003\u0002\u0002\u0002\u1767\u1763\u0003\u0002\u0002\u0002\u1768\u03ed",
    "\u0003\u0002\u0002\u0002\u1769\u176b\u0005\u030c\u0187\u0002\u176a\u176c",
    "\u0005\u03c6\u01e4\u0002\u176b\u176a\u0003\u0002\u0002\u0002\u176c\u176d",
    "\u0003\u0002\u0002\u0002\u176d\u176b\u0003\u0002\u0002\u0002\u176d\u176e",
    "\u0003\u0002\u0002\u0002\u176e\u1772\u0003\u0002\u0002\u0002\u176f\u1772",
    "\u0005\u03c2\u01e2\u0002\u1770\u1772\u0005\u03be\u01e0\u0002\u1771\u1769",
    "\u0003\u0002\u0002\u0002\u1771\u176f\u0003\u0002\u0002\u0002\u1771\u1770",
    "\u0003\u0002\u0002\u0002\u1772\u03ef\u0003\u0002\u0002\u0002\u1773\u1774",
    "\u0007x\u0002\u0002\u1774\u1775\u0007\u0013\u0002\u0002\u1775\u1776",
    "\u0007\u0124\u0002\u0002\u1776\u1777\u0007\u01f0\u0002\u0002\u1777\u1778",
    "\u0005\"\u0012\u0002\u1778\u177a\u0007\u01f1\u0002\u0002\u1779\u177b",
    "\u0005\u03f2\u01fa\u0002\u177a\u1779\u0003\u0002\u0002\u0002\u177a\u177b",
    "\u0003\u0002\u0002\u0002\u177b\u1780\u0003\u0002\u0002\u0002\u177c\u177d",
    "\u0007\u01f0\u0002\u0002\u177d\u177e\u0005\u03f4\u01fb\u0002\u177e\u177f",
    "\u0007\u01f1\u0002\u0002\u177f\u1781\u0003\u0002\u0002\u0002\u1780\u177c",
    "\u0003\u0002\u0002\u0002\u1780\u1781\u0003\u0002\u0002\u0002\u1781\u03f1",
    "\u0003\u0002\u0002\u0002\u1782\u1783\u0007\u0186\u0002\u0002\u1783\u1786",
    "\u0007\u01f0\u0002\u0002\u1784\u1787\u0005\u00f4{\u0002\u1785\u1787",
    "\u0005\u033c\u019f\u0002\u1786\u1784\u0003\u0002\u0002\u0002\u1786\u1785",
    "\u0003\u0002\u0002\u0002\u1787\u1788\u0003\u0002\u0002\u0002\u1788\u1789",
    "\u0007\u01f1\u0002\u0002\u1789\u03f3\u0003\u0002\u0002\u0002\u178a\u178f",
    "\u0005\u03f6\u01fc\u0002\u178b\u178c\u0007\u01ee\u0002\u0002\u178c\u178e",
    "\u0005\u03f6\u01fc\u0002\u178d\u178b\u0003\u0002\u0002\u0002\u178e\u1791",
    "\u0003\u0002\u0002\u0002\u178f\u178d\u0003\u0002\u0002\u0002\u178f\u1790",
    "\u0003\u0002\u0002\u0002\u1790\u03f5\u0003\u0002\u0002\u0002\u1791\u178f",
    "\u0003\u0002\u0002\u0002\u1792\u1794\u0007+\u0002\u0002\u1793\u1795",
    "\u0005\u0006\u0004\u0002\u1794\u1793\u0003\u0002\u0002\u0002\u1794\u1795",
    "\u0003\u0002\u0002\u0002\u1795\u1796\u0003\u0002\u0002\u0002\u1796\u1798",
    "\u0005\u03f8\u01fd\u0002\u1797\u1799\u0005\u03fa\u01fe\u0002\u1798\u1797",
    "\u0003\u0002\u0002\u0002\u1798\u1799\u0003\u0002\u0002\u0002\u1799\u179b",
    "\u0003\u0002\u0002\u0002\u179a\u179c\u0005\u00aeX\u0002\u179b\u179a",
    "\u0003\u0002\u0002\u0002\u179b\u179c\u0003\u0002\u0002\u0002\u179c\u03f7",
    "\u0003\u0002\u0002\u0002\u179d\u179e\u0007\u017f\u0002\u0002\u179e\u179f",
    "\u0007\u015f\u0002\u0002\u179f\u17a0\u0007\u0161\u0002\u0002\u17a0\u17a1",
    "\u0007\u01f0\u0002\u0002\u17a1\u17a6\u0005\u00f4{\u0002\u17a2\u17a3",
    "\u0007\u01ee\u0002\u0002\u17a3\u17a5\u0005\u00f4{\u0002\u17a4\u17a2",
    "\u0003\u0002\u0002\u0002\u17a5\u17a8\u0003\u0002\u0002\u0002\u17a6\u17a4",
    "\u0003\u0002\u0002\u0002\u17a6\u17a7\u0003\u0002\u0002\u0002\u17a7\u17a9",
    "\u0003\u0002\u0002\u0002\u17a8\u17a6\u0003\u0002\u0002\u0002\u17a9\u17aa",
    "\u0007\u01f1\u0002\u0002\u17aa\u03f9\u0003\u0002\u0002\u0002\u17ab\u17ac",
    "\u0005\u03fc\u01ff\u0002\u17ac\u03fb\u0003\u0002\u0002\u0002\u17ad\u17af",
    "\u0005\u03fe\u0200\u0002\u17ae\u17ad\u0003\u0002\u0002\u0002\u17af\u17b0",
    "\u0003\u0002\u0002\u0002\u17b0\u17ae\u0003\u0002\u0002\u0002\u17b0\u17b1",
    "\u0003\u0002\u0002\u0002\u17b1\u03fd\u0003\u0002\u0002\u0002\u17b2\u17b6",
    "\u0005\u0400\u0201\u0002\u17b3\u17b4\u0007|\u0002\u0002\u17b4\u17b6",
    "\u0005\u0006\u0004\u0002\u17b5\u17b2\u0003\u0002\u0002\u0002\u17b5\u17b3",
    "\u0003\u0002\u0002\u0002\u17b6\u03ff\u0003\u0002\u0002\u0002\u17b7\u17b9",
    "\u0005\u0402\u0202\u0002\u17b8\u17b7\u0003\u0002\u0002\u0002\u17b9\u17ba",
    "\u0003\u0002\u0002\u0002\u17ba\u17b8\u0003\u0002\u0002\u0002\u17ba\u17bb",
    "\u0003\u0002\u0002\u0002\u17bb\u0401\u0003\u0002\u0002\u0002\u17bc\u17bd",
    "\u0007}\u0002\u0002\u17bd\u17c6\u0007\u021a\u0002\u0002\u17be\u17bf",
    "\u0007~\u0002\u0002\u17bf\u17c6\u0007\u021a\u0002\u0002\u17c0\u17c1",
    "\u0007\u007f\u0002\u0002\u17c1\u17c6\u0007\u021a\u0002\u0002\u17c2\u17c3",
    "\u0007\u0080\u0002\u0002\u17c3\u17c6\u0007\u021a\u0002\u0002\u17c4\u17c6",
    "\u0005\u0404\u0203\u0002\u17c5\u17bc\u0003\u0002\u0002\u0002\u17c5\u17be",
    "\u0003\u0002\u0002\u0002\u17c5\u17c0\u0003\u0002\u0002\u0002\u17c5\u17c2",
    "\u0003\u0002\u0002\u0002\u17c5\u17c4\u0003\u0002\u0002\u0002\u17c6\u0403",
    "\u0003\u0002\u0002\u0002\u17c7\u17c8\u0007\u0081\u0002\u0002\u17c8\u17ca",
    "\u0007\u01f0\u0002\u0002\u17c9\u17cb\u0005\u0406\u0204\u0002\u17ca\u17c9",
    "\u0003\u0002\u0002\u0002\u17cb\u17cc\u0003\u0002\u0002\u0002\u17cc\u17ca",
    "\u0003\u0002\u0002\u0002\u17cc\u17cd\u0003\u0002\u0002\u0002\u17cd\u17ce",
    "\u0003\u0002\u0002\u0002\u17ce\u17cf\u0007\u01f1\u0002\u0002\u17cf\u0405",
    "\u0003\u0002\u0002\u0002\u17d0\u17d1\u0007\u0082\u0002\u0002\u17d1\u17df",
    "\u0007\u0218\u0002\u0002\u17d2\u17d3\u0007\u0082\u0002\u0002\u17d3\u17df",
    "\u0007\u021a\u0002\u0002\u17d4\u17d5\u0007\u0083\u0002\u0002\u17d5\u17df",
    "\u0007\u0218\u0002\u0002\u17d6\u17d7\u0007\u0083\u0002\u0002\u17d7\u17df",
    "\u0007\u021a\u0002\u0002\u17d8\u17d9\u0007\u0085\u0002\u0002\u17d9\u17df",
    "\u0007\u021a\u0002\u0002\u17da\u17db\u0007\u0086\u0002\u0002\u17db\u17df",
    "\u0007\u0087\u0002\u0002\u17dc\u17dd\u0007\u0086\u0002\u0002\u17dd\u17df",
    "\u0007\u021a\u0002\u0002\u17de\u17d0\u0003\u0002\u0002\u0002\u17de\u17d2",
    "\u0003\u0002\u0002\u0002\u17de\u17d4\u0003\u0002\u0002\u0002\u17de\u17d6",
    "\u0003\u0002\u0002\u0002\u17de\u17d8\u0003\u0002\u0002\u0002\u17de\u17da",
    "\u0003\u0002\u0002\u0002\u17de\u17dc\u0003\u0002\u0002\u0002\u17df\u0407",
    "\u0003\u0002\u0002\u0002\u17e0\u17e1\u0005\u040a\u0206\u0002\u17e1\u0409",
    "\u0003\u0002\u0002\u0002\u17e2\u17e4\u0007\u0019\u0002\u0002\u17e3\u17e5",
    "\u0005\u040e\u0208\u0002\u17e4\u17e3\u0003\u0002\u0002\u0002\u17e4\u17e5",
    "\u0003\u0002\u0002\u0002\u17e5\u17ed\u0003\u0002\u0002\u0002\u17e6\u17e9",
    "\u0007\u0005\u0002\u0002\u17e7\u17e9\u0007\u001a\u0002\u0002\u17e8\u17e6",
    "\u0003\u0002\u0002\u0002\u17e8\u17e7\u0003\u0002\u0002\u0002\u17e8\u17e9",
    "\u0003\u0002\u0002\u0002\u17e9\u17ea\u0003\u0002\u0002\u0002\u17ea\u17ee",
    "\u0005\u040c\u0207\u0002\u17eb\u17ec\u0007>\u0002\u0002\u17ec\u17ee",
    "\u0005\u043a\u021e\u0002\u17ed\u17e8\u0003\u0002\u0002\u0002\u17ed\u17eb",
    "\u0003\u0002\u0002\u0002\u17ee\u17f1\u0003\u0002\u0002\u0002\u17ef\u17f1",
    "\u0005\u042e\u0218\u0002\u17f0\u17e2\u0003\u0002\u0002\u0002\u17f0\u17ef",
    "\u0003\u0002\u0002\u0002\u17f1\u040b\u0003\u0002\u0002\u0002\u17f2\u17f7",
    "\u0005\u042c\u0217\u0002\u17f3\u17f4\u0007\u01ee\u0002\u0002\u17f4\u17f6",
    "\u0005\u042c\u0217\u0002\u17f5\u17f3\u0003\u0002\u0002\u0002\u17f6\u17f9",
    "\u0003\u0002\u0002\u0002\u17f7\u17f5\u0003\u0002\u0002\u0002\u17f7\u17f8",
    "\u0003\u0002\u0002\u0002\u17f8\u040d\u0003\u0002\u0002\u0002\u17f9\u17f7",
    "\u0003\u0002\u0002\u0002\u17fa\u17fb\u0007\u0220\u0002\u0002\u17fb\u17fc",
    "\u0005\u0410\u0209\u0002\u17fc\u17fd\u0007\u021e\u0002\u0002\u17fd\u040f",
    "\u0003\u0002\u0002\u0002\u17fe\u1803\u0005\u0412\u020a\u0002\u17ff\u1800",
    "\u0007\u01ee\u0002\u0002\u1800\u1802\u0005\u0412\u020a\u0002\u1801\u17ff",
    "\u0003\u0002\u0002\u0002\u1802\u1805\u0003\u0002\u0002\u0002\u1803\u1801",
    "\u0003\u0002\u0002\u0002\u1803\u1804\u0003\u0002\u0002\u0002\u1804\u0411",
    "\u0003\u0002\u0002\u0002\u1805\u1803\u0003\u0002\u0002\u0002\u1806\u180b",
    "\u0005\u041a\u020e\u0002\u1807\u1808\u0007\u01f0\u0002\u0002\u1808\u1809",
    "\u0005\u0428\u0215\u0002\u1809\u180a\u0007\u01f1\u0002\u0002\u180a\u180c",
    "\u0003\u0002\u0002\u0002\u180b\u1807\u0003\u0002\u0002\u0002\u180b\u180c",
    "\u0003\u0002\u0002\u0002\u180c\u1823\u0003\u0002\u0002\u0002\u180d\u1812",
    "\u0005\u041c\u020f\u0002\u180e\u180f\u0007\u01f0\u0002\u0002\u180f\u1810",
    "\u0005\u0420\u0211\u0002\u1810\u1811\u0007\u01f1\u0002\u0002\u1811\u1813",
    "\u0003\u0002\u0002\u0002\u1812\u180e\u0003\u0002\u0002\u0002\u1812\u1813",
    "\u0003\u0002\u0002\u0002\u1813\u1823\u0003\u0002\u0002\u0002\u1814\u1819",
    "\u0005\u0414\u020b\u0002\u1815\u1816\u0007\u01f0\u0002\u0002\u1816\u1817",
    "\u0005\u0416\u020c\u0002\u1817\u1818\u0007\u01f1\u0002\u0002\u1818\u181a",
    "\u0003\u0002\u0002\u0002\u1819\u1815\u0003\u0002\u0002\u0002\u1819\u181a",
    "\u0003\u0002\u0002\u0002\u181a\u1823\u0003\u0002\u0002\u0002\u181b\u1820",
    "\u0005\u041e\u0210\u0002\u181c\u181d\u0007\u01f0\u0002\u0002\u181d\u181e",
    "\u0005\u0422\u0212\u0002\u181e\u181f\u0007\u01f1\u0002\u0002\u181f\u1821",
    "\u0003\u0002\u0002\u0002\u1820\u181c\u0003\u0002\u0002\u0002\u1820\u1821",
    "\u0003\u0002\u0002\u0002\u1821\u1823\u0003\u0002\u0002\u0002\u1822\u1806",
    "\u0003\u0002\u0002\u0002\u1822\u180d\u0003\u0002\u0002\u0002\u1822\u1814",
    "\u0003\u0002\u0002\u0002\u1822\u181b\u0003\u0002\u0002\u0002\u1823\u0413",
    "\u0003\u0002\u0002\u0002\u1824\u1825\u0007\u00e3\u0002\u0002\u1825\u0415",
    "\u0003\u0002\u0002\u0002\u1826\u1827\u0005\u0418\u020d\u0002\u1827\u0417",
    "\u0003\u0002\u0002\u0002\u1828\u1829\u0005\u0006\u0004\u0002\u1829\u182a",
    "\u0005\u0006\u0004\u0002\u182a\u182b\u0005\u0006\u0004\u0002\u182b\u1830",
    "\u0003\u0002\u0002\u0002\u182c\u182d\u0005\u0006\u0004\u0002\u182d\u182e",
    "\u0005\u0006\u0004\u0002\u182e\u1830\u0003\u0002\u0002\u0002\u182f\u1828",
    "\u0003\u0002\u0002\u0002\u182f\u182c\u0003\u0002\u0002\u0002\u1830\u0419",
    "\u0003\u0002\u0002\u0002\u1831\u1832\t$\u0002\u0002\u1832\u041b\u0003",
    "\u0002\u0002\u0002\u1833\u1834\u0007\u00e2\u0002\u0002\u1834\u041d\u0003",
    "\u0002\u0002\u0002\u1835\u1836\t%\u0002\u0002\u1836\u041f\u0003\u0002",
    "\u0002\u0002\u1837\u183c\u0005\u0424\u0213\u0002\u1838\u1839\u0007\u01ee",
    "\u0002\u0002\u1839\u183b\u0005\u0424\u0213\u0002\u183a\u1838\u0003\u0002",
    "\u0002\u0002\u183b\u183e\u0003\u0002\u0002\u0002\u183c\u183a\u0003\u0002",
    "\u0002\u0002\u183c\u183d\u0003\u0002\u0002\u0002\u183d\u0421\u0003\u0002",
    "\u0002\u0002\u183e\u183c\u0003\u0002\u0002\u0002\u183f\u1844\u0005\u0426",
    "\u0214\u0002\u1840\u1841\u0007\u01ee\u0002\u0002\u1841\u1843\u0005\u0426",
    "\u0214\u0002\u1842\u1840\u0003\u0002\u0002\u0002\u1843\u1846\u0003\u0002",
    "\u0002\u0002\u1844\u1842\u0003\u0002\u0002\u0002\u1844\u1845\u0003\u0002",
    "\u0002\u0002\u1845\u0423\u0003\u0002\u0002\u0002\u1846\u1844\u0003\u0002",
    "\u0002\u0002\u1847\u1848\u0005\u042a\u0216\u0002\u1848\u1849\u0007?",
    "\u0002\u0002\u1849\u184a\u0005\u042a\u0216\u0002\u184a\u0425\u0003\u0002",
    "\u0002\u0002\u184b\u184c\u0005\u0010\t\u0002\u184c\u0427\u0003\u0002",
    "\u0002\u0002\u184d\u1852\u0005\u042a\u0216\u0002\u184e\u184f\u0007\u01ee",
    "\u0002\u0002\u184f\u1851\u0005\u042a\u0216\u0002\u1850\u184e\u0003\u0002",
    "\u0002\u0002\u1851\u1854\u0003\u0002\u0002\u0002\u1852\u1850\u0003\u0002",
    "\u0002\u0002\u1852\u1853\u0003\u0002\u0002\u0002\u1853\u0429\u0003\u0002",
    "\u0002\u0002\u1854\u1852\u0003\u0002\u0002\u0002\u1855\u1858\u0007\u021a",
    "\u0002\u0002\u1856\u1858\u0005\u0006\u0004\u0002\u1857\u1855\u0003\u0002",
    "\u0002\u0002\u1857\u1856\u0003\u0002\u0002\u0002\u1858\u042b\u0003\u0002",
    "\u0002\u0002\u1859\u186a\u0005\u02e6\u0174\u0002\u185a\u185c\u0007\u0018",
    "\u0002\u0002\u185b\u185a\u0003\u0002\u0002\u0002\u185b\u185c\u0003\u0002",
    "\u0002\u0002\u185c\u185d\u0003\u0002\u0002\u0002\u185d\u186b\u0005\b",
    "\u0005\u0002\u185e\u185f\u0007\u0018\u0002\u0002\u185f\u1860\u0007\u01f0",
    "\u0002\u0002\u1860\u1865\u0005\b\u0005\u0002\u1861\u1862\u0007\u01ee",
    "\u0002\u0002\u1862\u1864\u0005\b\u0005\u0002\u1863\u1861\u0003\u0002",
    "\u0002\u0002\u1864\u1867\u0003\u0002\u0002\u0002\u1865\u1863\u0003\u0002",
    "\u0002\u0002\u1865\u1866\u0003\u0002\u0002\u0002\u1866\u1868\u0003\u0002",
    "\u0002\u0002\u1867\u1865\u0003\u0002\u0002\u0002\u1868\u1869\u0007\u01f1",
    "\u0002\u0002\u1869\u186b\u0003\u0002\u0002\u0002\u186a\u185b\u0003\u0002",
    "\u0002\u0002\u186a\u185e\u0003\u0002\u0002\u0002\u186a\u186b\u0003\u0002",
    "\u0002\u0002\u186b\u186e\u0003\u0002\u0002\u0002\u186c\u186e\u0005R",
    "*\u0002\u186d\u1859\u0003\u0002\u0002\u0002\u186d\u186c\u0003\u0002",
    "\u0002\u0002\u186e\u042d\u0003\u0002\u0002\u0002\u186f\u1870\u0007u",
    "\u0002\u0002\u1870\u1874\u0005\u0432\u021a\u0002\u1871\u1872\u0007w",
    "\u0002\u0002\u1872\u1874\u0005\u0432\u021a\u0002\u1873\u186f\u0003\u0002",
    "\u0002\u0002\u1873\u1871\u0003\u0002\u0002\u0002\u1874\u1875\u0003\u0002",
    "\u0002\u0002\u1875\u1876\u0005\u0434\u021b\u0002\u1876\u1877\u0005\u0438",
    "\u021d\u0002\u1877\u1878\u0007?\u0002\u0002\u1878\u1887\u0007\u0212",
    "\u0002\u0002\u1879\u1885\u0007\u0018\u0002\u0002\u187a\u187d\u0007\u01f0",
    "\u0002\u0002\u187b\u187e\u0005V,\u0002\u187c\u187e\u0005$\u0013\u0002",
    "\u187d\u187b\u0003\u0002\u0002\u0002\u187d\u187c\u0003\u0002\u0002\u0002",
    "\u187e\u187f\u0003\u0002\u0002\u0002\u187f\u1880\u0007\u01f1\u0002\u0002",
    "\u1880\u1886\u0003\u0002\u0002\u0002\u1881\u1884\u0005V,\u0002\u1882",
    "\u1884\u0005$\u0013\u0002\u1883\u1881\u0003\u0002\u0002\u0002\u1883",
    "\u1882\u0003\u0002\u0002\u0002\u1884\u1886\u0003\u0002\u0002\u0002\u1885",
    "\u187a\u0003\u0002\u0002\u0002\u1885\u1883\u0003\u0002\u0002\u0002\u1886",
    "\u1888\u0003\u0002\u0002\u0002\u1887\u1879\u0003\u0002\u0002\u0002\u1887",
    "\u1888\u0003\u0002\u0002\u0002\u1888\u1889\u0003\u0002\u0002\u0002\u1889",
    "\u188a\u0005\u0434\u021b\u0002\u188a\u188b\u0005\u0436\u021c\u0002\u188b",
    "\u042f\u0003\u0002\u0002\u0002\u188c\u188f\u0005\u02e6\u0174\u0002\u188d",
    "\u188f\u0005R*\u0002\u188e\u188c\u0003\u0002\u0002\u0002\u188e\u188d",
    "\u0003\u0002\u0002\u0002\u188f\u0431\u0003\u0002\u0002\u0002\u1890\u1895",
    "\u0005\u0430\u0219\u0002\u1891\u1892\u0007\u01ee\u0002\u0002\u1892\u1894",
    "\u0005\u0430\u0219\u0002\u1893\u1891\u0003\u0002\u0002\u0002\u1894\u1897",
    "\u0003\u0002\u0002\u0002\u1895\u1893\u0003\u0002\u0002\u0002\u1895\u1896",
    "\u0003\u0002\u0002\u0002\u1896\u0433\u0003\u0002\u0002\u0002\u1897\u1895",
    "\u0003\u0002\u0002\u0002\u1898\u189c\u0005\u01ae\u00d8\u0002\u1899\u189c",
    "\u0005\u01b0\u00d9\u0002\u189a\u189c\u0003\u0002\u0002\u0002\u189b\u1898",
    "\u0003\u0002\u0002\u0002\u189b\u1899\u0003\u0002\u0002\u0002\u189b\u189a",
    "\u0003\u0002\u0002\u0002\u189c\u0435\u0003\u0002\u0002\u0002\u189d\u189e",
    "\u0007\u0130\u0002\u0002\u189e\u18a1\u0007\u0212\u0002\u0002\u189f\u18a1",
    "\u0003\u0002\u0002\u0002\u18a0\u189d\u0003\u0002\u0002\u0002\u18a0\u189f",
    "\u0003\u0002\u0002\u0002\u18a1\u0437\u0003\u0002\u0002\u0002\u18a2\u18a3",
    "\u0007\u0131\u0002\u0002\u18a3\u18a6\u0007\u0212\u0002\u0002\u18a4\u18a6",
    "\u0003\u0002\u0002\u0002\u18a5\u18a2\u0003\u0002\u0002\u0002\u18a5\u18a4",
    "\u0003\u0002\u0002\u0002\u18a6\u0439\u0003\u0002\u0002\u0002\u18a7\u18a8",
    "\u0007\u01f0\u0002\u0002\u18a8\u18a9\u0005\u0432\u021a\u0002\u18a9\u18aa",
    "\u0007\u01f1\u0002\u0002\u18aa\u18ab\u0005\u0434\u021b\u0002\u18ab\u18ac",
    "\u0005\u0438\u021d\u0002\u18ac\u18ad\u0007?\u0002\u0002\u18ad\u18bc",
    "\u0007\u0212\u0002\u0002\u18ae\u18ba\u0007\u0018\u0002\u0002\u18af\u18b2",
    "\u0007\u01f0\u0002\u0002\u18b0\u18b3\u0005V,\u0002\u18b1\u18b3\u0005",
    "$\u0013\u0002\u18b2\u18b0\u0003\u0002\u0002\u0002\u18b2\u18b1\u0003",
    "\u0002\u0002\u0002\u18b3\u18b4\u0003\u0002\u0002\u0002\u18b4\u18b5\u0007",
    "\u01f1\u0002\u0002\u18b5\u18bb\u0003\u0002\u0002\u0002\u18b6\u18b9\u0005",
    "V,\u0002\u18b7\u18b9\u0005$\u0013\u0002\u18b8\u18b6\u0003\u0002\u0002",
    "\u0002\u18b8\u18b7\u0003\u0002\u0002\u0002\u18b9\u18bb\u0003\u0002\u0002",
    "\u0002\u18ba\u18af\u0003\u0002\u0002\u0002\u18ba\u18b8\u0003\u0002\u0002",
    "\u0002\u18bb\u18bd\u0003\u0002\u0002\u0002\u18bc\u18ae\u0003\u0002\u0002",
    "\u0002\u18bc\u18bd\u0003\u0002\u0002\u0002\u18bd\u18be\u0003\u0002\u0002",
    "\u0002\u18be\u18bf\u0005\u0434\u021b\u0002\u18bf\u18c0\u0005\u0436\u021c",
    "\u0002\u18c0\u043b\u0003\u0002\u0002\u0002\u18c1\u18c4\u0005\u0442\u0222",
    "\u0002\u18c2\u18c4\u0005\u043e\u0220\u0002\u18c3\u18c1\u0003\u0002\u0002",
    "\u0002\u18c3\u18c2\u0003\u0002\u0002\u0002\u18c4\u043d\u0003\u0002\u0002",
    "\u0002\u18c5\u18cc\u0005\u0440\u0221\u0002\u18c6\u18cc\u0005\u0444\u0223",
    "\u0002\u18c7\u18cc\u0005\u0446\u0224\u0002\u18c8\u18cc\u0005\u0448\u0225",
    "\u0002\u18c9\u18cc\u0005\u044a\u0226\u0002\u18ca\u18cc\u0005\u044c\u0227",
    "\u0002\u18cb\u18c5\u0003\u0002\u0002\u0002\u18cb\u18c6\u0003\u0002\u0002",
    "\u0002\u18cb\u18c7\u0003\u0002\u0002\u0002\u18cb\u18c8\u0003\u0002\u0002",
    "\u0002\u18cb\u18c9\u0003\u0002\u0002\u0002\u18cb\u18ca\u0003\u0002\u0002",
    "\u0002\u18cc\u043f\u0003\u0002\u0002\u0002\u18cd\u18ce\u0007\u0012\u0002",
    "\u0002\u18ce\u18cf\u0007\u0013\u0002\u0002\u18cf\u18d0\u0005\u02d2\u016a",
    "\u0002\u18d0\u18d1\u0007\u021a\u0002\u0002\u18d1\u18d6\u0003\u0002\u0002",
    "\u0002\u18d2\u18d3\u0007\u0012\u0002\u0002\u18d3\u18d4\u0007\u0013\u0002",
    "\u0002\u18d4\u18d6\u0007\u021a\u0002\u0002\u18d5\u18cd\u0003\u0002\u0002",
    "\u0002\u18d5\u18d2\u0003\u0002\u0002\u0002\u18d6\u0441\u0003\u0002\u0002",
    "\u0002\u18d7\u18d8\u0007\u01a2\u0002\u0002\u18d8\u18d9\u0007\u00c6\u0002",
    "\u0002\u18d9\u18da\u0005\u02d2\u016a\u0002\u18da\u18db\u0007\u021a\u0002",
    "\u0002\u18db\u18e0\u0003\u0002\u0002\u0002\u18dc\u18dd\u0007\u01a2\u0002",
    "\u0002\u18dd\u18de\u0007\u00c6\u0002\u0002\u18de\u18e0\u0007\u021a\u0002",
    "\u0002\u18df\u18d7\u0003\u0002\u0002\u0002\u18df\u18dc\u0003\u0002\u0002",
    "\u0002\u18e0\u0443\u0003\u0002\u0002\u0002\u18e1\u18e2\u0007\u018e\u0002",
    "\u0002\u18e2\u18e3\u0005\u02d2\u016a\u0002\u18e3\u18e4\u0007\u021a\u0002",
    "\u0002\u18e4\u18e9\u0003\u0002\u0002\u0002\u18e5\u18e6\u0007\u018e\u0002",
    "\u0002\u18e6\u18e9\u0007\u021a\u0002\u0002\u18e7\u18e9\u0007\u018f\u0002",
    "\u0002\u18e8\u18e1\u0003\u0002\u0002\u0002\u18e8\u18e5\u0003\u0002\u0002",
    "\u0002\u18e8\u18e7\u0003\u0002\u0002\u0002\u18e9\u0445\u0003\u0002\u0002",
    "\u0002\u18ea\u18eb\u0007\u0190\u0002\u0002\u18eb\u18ec\u0005\u02d2\u016a",
    "\u0002\u18ec\u18ed\u0007\u021a\u0002\u0002\u18ed\u18f2\u0003\u0002\u0002",
    "\u0002\u18ee\u18ef\u0007\u0190\u0002\u0002\u18ef\u18f2\u0007\u021a\u0002",
    "\u0002\u18f0\u18f2\u0007\u0191\u0002\u0002\u18f1\u18ea\u0003\u0002\u0002",
    "\u0002\u18f1\u18ee\u0003\u0002\u0002\u0002\u18f1\u18f0\u0003\u0002\u0002",
    "\u0002\u18f2\u0447\u0003\u0002\u0002\u0002\u18f3\u18f4\t&\u0002\u0002",
    "\u18f4\u0449\u0003\u0002\u0002\u0002\u18f5\u18f6\u0007\u0193\u0002\u0002",
    "\u18f6\u18f7\u0007\u0200\u0002\u0002\u18f7\u18fc\u0007\u021a\u0002\u0002",
    "\u18f8\u18f9\u0007\u0193\u0002\u0002\u18f9\u18fc\u0007\u021a\u0002\u0002",
    "\u18fa\u18fc\u0007\u0196\u0002\u0002\u18fb\u18f5\u0003\u0002\u0002\u0002",
    "\u18fb\u18f8\u0003\u0002\u0002\u0002\u18fb\u18fa\u0003\u0002\u0002\u0002",
    "\u18fc\u044b\u0003\u0002\u0002\u0002\u18fd\u18fe\t\'\u0002\u0002\u18fe",
    "\u044d\u0003\u0002\u0002\u0002\u18ff\u1900\u0007\u0010\u0002\u0002\u1900",
    "\u1901\u0007\u0013\u0002\u0002\u1901\u1902\u0007\u01f0\u0002\u0002\u1902",
    "\u1907\u00052\u001a\u0002\u1903\u1904\u0007\u01ee\u0002\u0002\u1904",
    "\u1906\u00052\u001a\u0002\u1905\u1903\u0003\u0002\u0002\u0002\u1906",
    "\u1909\u0003\u0002\u0002\u0002\u1907\u1905\u0003\u0002\u0002\u0002\u1907",
    "\u1908\u0003\u0002\u0002\u0002\u1908\u190a\u0003\u0002\u0002\u0002\u1909",
    "\u1907\u0003\u0002\u0002\u0002\u190a\u190b\u0007\u01f1\u0002\u0002\u190b",
    "\u1917\u0003\u0002\u0002\u0002\u190c\u190d\u0007\u0010\u0002\u0002\u190d",
    "\u190e\u0007\u0013\u0002\u0002\u190e\u1913\u00052\u001a\u0002\u190f",
    "\u1910\u0007\u01ee\u0002\u0002\u1910\u1912\u00052\u001a\u0002\u1911",
    "\u190f\u0003\u0002\u0002\u0002\u1912\u1915\u0003\u0002\u0002\u0002\u1913",
    "\u1911\u0003\u0002\u0002\u0002\u1913\u1914\u0003\u0002\u0002\u0002\u1914",
    "\u1917\u0003\u0002\u0002\u0002\u1915\u1913\u0003\u0002\u0002\u0002\u1916",
    "\u18ff\u0003\u0002\u0002\u0002\u1916\u190c\u0003\u0002\u0002\u0002\u1917",
    "\u044f\u0003\u0002\u0002\u0002\u1918\u1919\u0007@\u0002\u0002\u1919",
    "\u191a\u0007\u0013\u0002\u0002\u191a\u191b\u0007\u01f0\u0002\u0002\u191b",
    "\u1920\u0005\u02e6\u0174\u0002\u191c\u191d\u0007\u01ee\u0002\u0002\u191d",
    "\u191f\u0005\u02e6\u0174\u0002\u191e\u191c\u0003\u0002\u0002\u0002\u191f",
    "\u1922\u0003\u0002\u0002\u0002\u1920\u191e\u0003\u0002\u0002\u0002\u1920",
    "\u1921\u0003\u0002\u0002\u0002\u1921\u1923\u0003\u0002\u0002\u0002\u1922",
    "\u1920\u0003\u0002\u0002\u0002\u1923\u1924\u0007\u01f1\u0002\u0002\u1924",
    "\u1930\u0003\u0002\u0002\u0002\u1925\u1926\u0007@\u0002\u0002\u1926",
    "\u1927\u0007\u0013\u0002\u0002\u1927\u192c\u0005\u02e6\u0174\u0002\u1928",
    "\u1929\u0007\u01ee\u0002\u0002\u1929\u192b\u0005\u02e6\u0174\u0002\u192a",
    "\u1928\u0003\u0002\u0002\u0002\u192b\u192e\u0003\u0002\u0002\u0002\u192c",
    "\u192a\u0003\u0002\u0002\u0002\u192c\u192d\u0003\u0002\u0002\u0002\u192d",
    "\u1930\u0003\u0002\u0002\u0002\u192e\u192c\u0003\u0002\u0002\u0002\u192f",
    "\u1918\u0003\u0002\u0002\u0002\u192f\u1925\u0003\u0002\u0002\u0002\u1930",
    "\u0451\u0003\u0002\u0002\u0002\u1931\u1932\u0007+\u0002\u0002\u1932",
    "\u1933\u0007\u0013\u0002\u0002\u1933\u1934\u0007\u01f0\u0002\u0002\u1934",
    "\u1939\u0005\u02e6\u0174\u0002\u1935\u1936\u0007\u01ee\u0002\u0002\u1936",
    "\u1938\u0005\u02e6\u0174\u0002\u1937\u1935\u0003\u0002\u0002\u0002\u1938",
    "\u193b\u0003\u0002\u0002\u0002\u1939\u1937\u0003\u0002\u0002\u0002\u1939",
    "\u193a\u0003\u0002\u0002\u0002\u193a\u193c\u0003\u0002\u0002\u0002\u193b",
    "\u1939\u0003\u0002\u0002\u0002\u193c\u193d\u0007\u01f1\u0002\u0002\u193d",
    "\u1949\u0003\u0002\u0002\u0002\u193e\u193f\u0007+\u0002\u0002\u193f",
    "\u1940\u0007\u0013\u0002\u0002\u1940\u1945\u0005\u02e6\u0174\u0002\u1941",
    "\u1942\u0007\u01ee\u0002\u0002\u1942\u1944\u0005\u02e6\u0174\u0002\u1943",
    "\u1941\u0003\u0002\u0002\u0002\u1944\u1947\u0003\u0002\u0002\u0002\u1945",
    "\u1943\u0003\u0002\u0002\u0002\u1945\u1946\u0003\u0002\u0002\u0002\u1946",
    "\u1949\u0003\u0002\u0002\u0002\u1947\u1945\u0003\u0002\u0002\u0002\u1948",
    "\u1931\u0003\u0002\u0002\u0002\u1948\u193e\u0003\u0002\u0002\u0002\u1949",
    "\u0453\u0003\u0002\u0002\u0002\u194a\u194b\u0007A\u0002\u0002\u194b",
    "\u194c\u0007\u0013\u0002\u0002\u194c\u194d\u0007\u01f0\u0002\u0002\u194d",
    "\u1952\u0005\u02e6\u0174\u0002\u194e\u194f\u0007\u01ee\u0002\u0002\u194f",
    "\u1951\u0005\u02e6\u0174\u0002\u1950\u194e\u0003\u0002\u0002\u0002\u1951",
    "\u1954\u0003\u0002\u0002\u0002\u1952\u1950\u0003\u0002\u0002\u0002\u1952",
    "\u1953\u0003\u0002\u0002\u0002\u1953\u1955\u0003\u0002\u0002\u0002\u1954",
    "\u1952\u0003\u0002\u0002\u0002\u1955\u1956\u0007\u01f1\u0002\u0002\u1956",
    "\u1962\u0003\u0002\u0002\u0002\u1957\u1958\u0007A\u0002\u0002\u1958",
    "\u1959\u0007\u0013\u0002\u0002\u1959\u195e\u0005\u02e6\u0174\u0002\u195a",
    "\u195b\u0007\u01ee\u0002\u0002\u195b\u195d\u0005\u02e6\u0174\u0002\u195c",
    "\u195a\u0003\u0002\u0002\u0002\u195d\u1960\u0003\u0002\u0002\u0002\u195e",
    "\u195c\u0003\u0002\u0002\u0002\u195e\u195f\u0003\u0002\u0002\u0002\u195f",
    "\u1962\u0003\u0002\u0002\u0002\u1960\u195e\u0003\u0002\u0002\u0002\u1961",
    "\u194a\u0003\u0002\u0002\u0002\u1961\u1957\u0003\u0002\u0002\u0002\u1962",
    "\u0455\u0003\u0002\u0002\u0002\u1963\u1964\u0007B\u0002\u0002\u1964",
    "\u1965\u0007\u0013\u0002\u0002\u1965\u1966\u0007\u01f0\u0002\u0002\u1966",
    "\u196b\u00052\u001a\u0002\u1967\u1968\u0007\u01ee\u0002\u0002\u1968",
    "\u196a\u00052\u001a\u0002\u1969\u1967\u0003\u0002\u0002\u0002\u196a",
    "\u196d\u0003\u0002\u0002\u0002\u196b\u1969\u0003\u0002\u0002\u0002\u196b",
    "\u196c\u0003\u0002\u0002\u0002\u196c\u196e\u0003\u0002\u0002\u0002\u196d",
    "\u196b\u0003\u0002\u0002\u0002\u196e\u196f\u0007\u01f1\u0002\u0002\u196f",
    "\u197b\u0003\u0002\u0002\u0002\u1970\u1971\u0007B\u0002\u0002\u1971",
    "\u1972\u0007\u0013\u0002\u0002\u1972\u1977\u00052\u001a\u0002\u1973",
    "\u1974\u0007\u01ee\u0002\u0002\u1974\u1976\u00052\u001a\u0002\u1975",
    "\u1973\u0003\u0002\u0002\u0002\u1976\u1979\u0003\u0002\u0002\u0002\u1977",
    "\u1975\u0003\u0002\u0002\u0002\u1977\u1978\u0003\u0002\u0002\u0002\u1978",
    "\u197b\u0003\u0002\u0002\u0002\u1979\u1977\u0003\u0002\u0002\u0002\u197a",
    "\u1963\u0003\u0002\u0002\u0002\u197a\u1970\u0003\u0002\u0002\u0002\u197b",
    "\u0457\u0003\u0002\u0002\u0002\u197c\u197d\u0005\u0572\u02ba\u0002\u197d",
    "\u0459\u0003\u0002\u0002\u0002\u197e\u1980\u0005\u0452\u022a\u0002\u197f",
    "\u1981\u0005\u044e\u0228\u0002\u1980\u197f\u0003\u0002\u0002\u0002\u1980",
    "\u1981\u0003\u0002\u0002\u0002\u1981\u1982\u0003\u0002\u0002\u0002\u1982",
    "\u1983\u0005\u044e\u0228\u0002\u1983\u1985\u0005\u0454\u022b\u0002\u1984",
    "\u1986\u0005\u0456\u022c\u0002\u1985\u1984\u0003\u0002\u0002\u0002\u1985",
    "\u1986\u0003\u0002\u0002\u0002\u1986\u1987\u0003\u0002\u0002\u0002\u1987",
    "\u1988\u0005\u0456\u022c\u0002\u1988\u1989\u0005\u0450\u0229\u0002\u1989",
    "\u045b\u0003\u0002\u0002\u0002\u198a\u198b\u0007\u0146\u0002\u0002\u198b",
    "\u198e\u0007\u013e\u0002\u0002\u198c\u198d\u0007\u00b2\u0002\u0002\u198d",
    "\u198f\u0005F$\u0002\u198e\u198c\u0003\u0002\u0002\u0002\u198e\u198f",
    "\u0003\u0002\u0002\u0002\u198f\u045d\u0003\u0002\u0002\u0002\u1990\u1991",
    "\u0007\u0148\u0002\u0002\u1991\u1996\u0005\u0460\u0231\u0002\u1992\u1993",
    "\u0007\u01ee\u0002\u0002\u1993\u1995\u0005\u0460\u0231\u0002\u1994\u1992",
    "\u0003\u0002\u0002\u0002\u1995\u1998\u0003\u0002\u0002\u0002\u1996\u1994",
    "\u0003\u0002\u0002\u0002\u1996\u1997\u0003\u0002\u0002\u0002\u1997\u045f",
    "\u0003\u0002\u0002\u0002\u1998\u1996\u0003\u0002\u0002\u0002\u1999\u199a",
    "\u0007\u021b\u0002\u0002\u199a\u199b\u0007\u0018\u0002\u0002\u199b\u199c",
    "\u0005\u0462\u0232\u0002\u199c\u0461\u0003\u0002\u0002\u0002\u199d\u19aa",
    "\u0007\u021b\u0002\u0002\u199e\u19a0\u0007\u01f0\u0002\u0002\u199f\u19a1",
    "\u0007\u021b\u0002\u0002\u19a0\u199f\u0003\u0002\u0002\u0002\u19a0\u19a1",
    "\u0003\u0002\u0002\u0002\u19a1\u19a3\u0003\u0002\u0002\u0002\u19a2\u19a4",
    "\u0005\u045a\u022e\u0002\u19a3\u19a2\u0003\u0002\u0002\u0002\u19a3\u19a4",
    "\u0003\u0002\u0002\u0002\u19a4\u19a6\u0003\u0002\u0002\u0002\u19a5\u19a7",
    "\u0005\u0464\u0233\u0002\u19a6\u19a5\u0003\u0002\u0002\u0002\u19a6\u19a7",
    "\u0003\u0002\u0002\u0002\u19a7\u19a8\u0003\u0002\u0002\u0002\u19a8\u19aa",
    "\u0007\u01f1\u0002\u0002\u19a9\u199d\u0003\u0002\u0002\u0002\u19a9\u199e",
    "\u0003\u0002\u0002\u0002\u19aa\u0463\u0003\u0002\u0002\u0002\u19ab\u19af",
    "\u0005\u0466\u0234\u0002\u19ac\u19af\u0005\u0468\u0235\u0002\u19ad\u19af",
    "\u0005\u046a\u0236\u0002\u19ae\u19ab\u0003\u0002\u0002\u0002\u19ae\u19ac",
    "\u0003\u0002\u0002\u0002\u19ae\u19ad\u0003\u0002\u0002\u0002\u19af\u0465",
    "\u0003\u0002\u0002\u0002\u19b0\u19b1\u0007\u008c\u0002\u0002\u19b1\u19b2",
    "\u0005\u046c\u0237\u0002\u19b2\u19b3\u0007\u008c\u0002\u0002\u19b3\u19b4",
    "\u0007\u0127\u0002\u0002\u19b4\u19b5\u0005\u046e\u0238\u0002\u19b5\u19b6",
    "\u0007\u0006\u0002\u0002\u19b6\u19b7\u0005\u046e\u0238\u0002\u19b7\u0467",
    "\u0003\u0002\u0002\u0002\u19b8\u19b9\u0007\u0124\u0002\u0002\u19b9\u19ba",
    "\u0005\u046c\u0237\u0002\u19ba\u19bb\u0007\u0124\u0002\u0002\u19bb\u19bc",
    "\u0007\u0127\u0002\u0002\u19bc\u19bd\u0005\u046e\u0238\u0002\u19bd\u19be",
    "\u0007\u0006\u0002\u0002\u19be\u19bf\u0005\u046e\u0238\u0002\u19bf\u0469",
    "\u0003\u0002\u0002\u0002\u19c0\u19c1\u0007\u0124\u0002\u0002\u19c1\u19c3",
    "\u0005\u0470\u0239\u0002\u19c2\u19c4\u0005\u0474\u023b\u0002\u19c3\u19c2",
    "\u0003\u0002\u0002\u0002\u19c3\u19c4\u0003\u0002\u0002\u0002\u19c4\u19c6",
    "\u0003\u0002\u0002\u0002\u19c5\u19c7\u0005\u049c\u024f\u0002\u19c6\u19c5",
    "\u0003\u0002\u0002\u0002\u19c6\u19c7\u0003\u0002\u0002\u0002\u19c7\u19c9",
    "\u0003\u0002\u0002\u0002\u19c8\u19ca\u0005\u0476\u023c\u0002\u19c9\u19c8",
    "\u0003\u0002\u0002\u0002\u19c9\u19ca\u0003\u0002\u0002\u0002\u19ca\u19cc",
    "\u0003\u0002\u0002\u0002\u19cb\u19cd\u0005\u0478\u023d\u0002\u19cc\u19cb",
    "\u0003\u0002\u0002\u0002\u19cc\u19cd\u0003\u0002\u0002\u0002\u19cd\u19ce",
    "\u0003\u0002\u0002\u0002\u19ce\u19cf\u0007\u0124\u0002\u0002\u19cf\u19d0",
    "\u0007\u0127\u0002\u0002\u19d0\u19d1\u0005\u0472\u023a\u0002\u19d1\u19d2",
    "\u0007\u0006\u0002\u0002\u19d2\u19d4\u0005\u0472\u023a\u0002\u19d3\u19d5",
    "\u0005\u0474\u023b\u0002\u19d4\u19d3\u0003\u0002\u0002\u0002\u19d4\u19d5",
    "\u0003\u0002\u0002\u0002\u19d5\u19d7\u0003\u0002\u0002\u0002\u19d6\u19d8",
    "\u0005\u049c\u024f\u0002\u19d7\u19d6\u0003\u0002\u0002\u0002\u19d7\u19d8",
    "\u0003\u0002\u0002\u0002\u19d8\u19da\u0003\u0002\u0002\u0002\u19d9\u19db",
    "\u0005\u0476\u023c\u0002\u19da\u19d9\u0003\u0002\u0002\u0002\u19da\u19db",
    "\u0003\u0002\u0002\u0002\u19db\u19dd\u0003\u0002\u0002\u0002\u19dc\u19de",
    "\u0005\u0478\u023d\u0002\u19dd\u19dc\u0003\u0002\u0002\u0002\u19dd\u19de",
    "\u0003\u0002\u0002\u0002\u19de\u046b\u0003\u0002\u0002\u0002\u19df\u19e0",
    "\u0007\u0156\u0002\u0002\u19e0\u19e1\u0007\u0157\u0002\u0002\u19e1\u19e2",
    "\u0007\u015d\u0002\u0002\u19e2\u19e3\u0007\u008b\u0002\u0002\u19e3\u19e4",
    "\u0007\u021a\u0002\u0002\u19e4\u19e5\u0007\u0157\u0002\u0002\u19e5\u046d",
    "\u0003\u0002\u0002\u0002\u19e6\u19e9\u0007\u0156\u0002\u0002\u19e7\u19ea",
    "\u0007\u0157\u0002\u0002\u19e8\u19ea\u0007\u0158\u0002\u0002\u19e9\u19e7",
    "\u0003\u0002\u0002\u0002\u19e9\u19e8\u0003\u0002\u0002\u0002\u19ea\u19eb",
    "\u0003\u0002\u0002\u0002\u19eb\u19ec\u0007\u015d\u0002\u0002\u19ec\u19ed",
    "\u0007\u008b\u0002\u0002\u19ed\u19f0\u0007\u021a\u0002\u0002\u19ee\u19f1",
    "\u0007\u0157\u0002\u0002\u19ef\u19f1\u0007\u0158\u0002\u0002\u19f0\u19ee",
    "\u0003\u0002\u0002\u0002\u19f0\u19ef\u0003\u0002\u0002\u0002\u19f1\u046f",
    "\u0003\u0002\u0002\u0002\u19f2\u19f3\u0005\u049e\u0250\u0002\u19f3\u19f4",
    "\u0007\u0157\u0002\u0002\u19f4\u0471\u0003\u0002\u0002\u0002\u19f5\u19f8",
    "\u0005\u049e\u0250\u0002\u19f6\u19f9\u0007\u0157\u0002\u0002\u19f7\u19f9",
    "\u0007\u0158\u0002\u0002\u19f8\u19f6\u0003\u0002\u0002\u0002\u19f8\u19f7",
    "\u0003\u0002\u0002\u0002\u19f9\u0473\u0003\u0002\u0002\u0002\u19fa\u19fb",
    "\u0007\u0186\u0002\u0002\u19fb\u19fc\u0005\u049e\u0250\u0002\u19fc\u0475",
    "\u0003\u0002\u0002\u0002\u19fd\u19fe\u0007\u0149\u0002\u0002\u19fe\u19ff",
    "\u0005\u02e6\u0174\u0002\u19ff\u0477\u0003\u0002\u0002\u0002\u1a00\u1a01",
    "\u0007\u0193\u0002\u0002\u1a01\u1a02\u0007\u0018\u0002\u0002\u1a02\u1a03",
    "\u0005\u02e6\u0174\u0002\u1a03\u1a04\u0007\u0089\u0002\u0002\u1a04\u1a05",
    "\u0005\u02e6\u0174\u0002\u1a05\u0479\u0003\u0002\u0002\u0002\u1a06\u1a07",
    "\u0007\u0151\u0002\u0002\u1a07\u1a0c\u0005\u047c\u023f\u0002\u1a08\u1a09",
    "\u0007\u01ee\u0002\u0002\u1a09\u1a0b\u0005\u047c\u023f\u0002\u1a0a\u1a08",
    "\u0003\u0002\u0002\u0002\u1a0b\u1a0e\u0003\u0002\u0002\u0002\u1a0c\u1a0a",
    "\u0003\u0002\u0002\u0002\u1a0c\u1a0d\u0003\u0002\u0002\u0002\u1a0d\u1a0f",
    "\u0003\u0002\u0002\u0002\u1a0e\u1a0c\u0003\u0002\u0002\u0002\u1a0f\u1a10",
    "\u0007\u014a\u0002\u0002\u1a10\u1a11\u0005\u047c\u023f\u0002\u1a11\u047b",
    "\u0003\u0002\u0002\u0002\u1a12\u1a13\u0007\u021b\u0002\u0002\u1a13\u1a14",
    "\u0007\u0018\u0002\u0002\u1a14\u1a15\u0005\u047e\u0240\u0002\u1a15\u1a16",
    "\u0005\u047e\u0240\u0002\u1a16\u047d\u0003\u0002\u0002\u0002\u1a17\u1a1e",
    "\u0007\u021b\u0002\u0002\u1a18\u1a1a\u0007\u01f0\u0002\u0002\u1a19\u1a1b",
    "\u0005\u0480\u0241\u0002\u1a1a\u1a19\u0003\u0002\u0002\u0002\u1a1a\u1a1b",
    "\u0003\u0002\u0002\u0002\u1a1b\u1a1c\u0003\u0002\u0002\u0002\u1a1c\u1a1e",
    "\u0007\u01f1\u0002\u0002\u1a1d\u1a17\u0003\u0002\u0002\u0002\u1a1d\u1a18",
    "\u0003\u0002\u0002\u0002\u1a1e\u047f\u0003\u0002\u0002\u0002\u1a1f\u1a30",
    "\u0005\u0482\u0242\u0002\u1a20\u1a22\u0005\u0498\u024d\u0002\u1a21\u1a20",
    "\u0003\u0002\u0002\u0002\u1a21\u1a22\u0003\u0002\u0002\u0002\u1a22\u1a27",
    "\u0003\u0002\u0002\u0002\u1a23\u1a24\u0005\u0490\u0249\u0002\u1a24\u1a25",
    "\u0005\u0494\u024b\u0002\u1a25\u1a28\u0003\u0002\u0002\u0002\u1a26\u1a28",
    "\u0005\u0496\u024c\u0002\u1a27\u1a23\u0003\u0002\u0002\u0002\u1a27\u1a26",
    "\u0003\u0002\u0002\u0002\u1a28\u1a2a\u0003\u0002\u0002\u0002\u1a29\u1a2b",
    "\u0005\u049a\u024e\u0002\u1a2a\u1a29\u0003\u0002\u0002\u0002\u1a2a\u1a2b",
    "\u0003\u0002\u0002\u0002\u1a2b\u1a2d\u0003\u0002\u0002\u0002\u1a2c\u1a2e",
    "\u0005\u049c\u024f\u0002\u1a2d\u1a2c\u0003\u0002\u0002\u0002\u1a2d\u1a2e",
    "\u0003\u0002\u0002\u0002\u1a2e\u1a30\u0003\u0002\u0002\u0002\u1a2f\u1a1f",
    "\u0003\u0002\u0002\u0002\u1a2f\u1a21\u0003\u0002\u0002\u0002\u1a30\u0481",
    "\u0003\u0002\u0002\u0002\u1a31\u1a32\u0005\u0484\u0243\u0002\u1a32\u1a34",
    "\u0005\u0486\u0244\u0002\u1a33\u1a35\u0005\u048a\u0246\u0002\u1a34\u1a33",
    "\u0003\u0002\u0002\u0002\u1a34\u1a35\u0003\u0002\u0002\u0002\u1a35\u1a37",
    "\u0003\u0002\u0002\u0002\u1a36\u1a38\u0005\u048c\u0247\u0002\u1a37\u1a36",
    "\u0003\u0002\u0002\u0002\u1a37\u1a38\u0003\u0002\u0002\u0002\u1a38\u0483",
    "\u0003\u0002\u0002\u0002\u1a39\u1a3a\u0007\u014b\u0002\u0002\u1a3a\u1a3b",
    "\u0007\u01f2\u0002\u0002\u1a3b\u1a3d\u0005\u02e6\u0174\u0002\u1a3c\u1a3e",
    "\u0005\u0488\u0245\u0002\u1a3d\u1a3c\u0003\u0002\u0002\u0002\u1a3d\u1a3e",
    "\u0003\u0002\u0002\u0002\u1a3e\u1a3f\u0003\u0002\u0002\u0002\u1a3f\u1a40",
    "\u0007\u01f3\u0002\u0002\u1a40\u0485\u0003\u0002\u0002\u0002\u1a41\u1a42",
    "\u0007\u00d7\u0002\u0002\u1a42\u1a43\u0007\u01f2\u0002\u0002\u1a43\u1a45",
    "\u0005\u02e6\u0174\u0002\u1a44\u1a46\u0005\u0488\u0245\u0002\u1a45\u1a44",
    "\u0003\u0002\u0002\u0002\u1a45\u1a46\u0003\u0002\u0002\u0002\u1a46\u1a47",
    "\u0003\u0002\u0002\u0002\u1a47\u1a48\u0007\u01f3\u0002\u0002\u1a48\u0487",
    "\u0003\u0002\u0002\u0002\u1a49\u1a4a\t(\u0002\u0002\u1a4a\u0489\u0003",
    "\u0002\u0002\u0002\u1a4b\u1a4c\u0007\u0150\u0002\u0002\u1a4c\u1a4d\u0007",
    "\u01f0\u0002\u0002\u1a4d\u1a52\u0005\u02e6\u0174\u0002\u1a4e\u1a4f\u0007",
    "\u01ee\u0002\u0002\u1a4f\u1a51\u0005\u02e6\u0174\u0002\u1a50\u1a4e\u0003",
    "\u0002\u0002\u0002\u1a51\u1a54\u0003\u0002\u0002\u0002\u1a52\u1a50\u0003",
    "\u0002\u0002\u0002\u1a52\u1a53\u0003\u0002\u0002\u0002\u1a53\u1a55\u0003",
    "\u0002\u0002\u0002\u1a54\u1a52\u0003\u0002\u0002\u0002\u1a55\u1a56\u0007",
    "\u01f1\u0002\u0002\u1a56\u048b\u0003\u0002\u0002\u0002\u1a57\u1a58\u0007",
    "\u014d\u0002\u0002\u1a58\u1a59\u0007\u01f0\u0002\u0002\u1a59\u1a5b\u0005",
    "\u049e\u0250\u0002\u1a5a\u1a5c\u0005\u048e\u0248\u0002\u1a5b\u1a5a\u0003",
    "\u0002\u0002\u0002\u1a5b\u1a5c\u0003\u0002\u0002\u0002\u1a5c\u1a5d\u0003",
    "\u0002\u0002\u0002\u1a5d\u1a5e\u0007\u01f1\u0002\u0002\u1a5e\u048d\u0003",
    "\u0002\u0002\u0002\u1a5f\u1a60\t)\u0002\u0002\u1a60\u048f\u0003\u0002",
    "\u0002\u0002\u1a61\u1a62\u0007\u01cf\u0002\u0002\u1a62\u1a63\u0005\u0492",
    "\u024a\u0002\u1a63\u0491\u0003\u0002\u0002\u0002\u1a64\u1a67\u0005\u049e",
    "\u0250\u0002\u1a65\u1a67\u0007\u01c2\u0002\u0002\u1a66\u1a64\u0003\u0002",
    "\u0002\u0002\u1a66\u1a65\u0003\u0002\u0002\u0002\u1a67\u0493\u0003\u0002",
    "\u0002\u0002\u1a68\u1a69\u0007\u0152\u0002\u0002\u1a69\u1a6a\u0005\u049e",
    "\u0250\u0002\u1a6a\u0495\u0003\u0002\u0002\u0002\u1a6b\u1a6c\u0007\u0186",
    "\u0002\u0002\u1a6c\u1a6d\u0005\u049e\u0250\u0002\u1a6d\u0497\u0003\u0002",
    "\u0002\u0002\u1a6e\u1a6f\u0007\u0153\u0002\u0002\u1a6f\u1a70\u0007\u0013",
    "\u0002\u0002\u1a70\u1a71\u0005\u0006\u0004\u0002\u1a71\u0499\u0003\u0002",
    "\u0002\u0002\u1a72\u1a73\u0007\u008d\u0002\u0002\u1a73\u1a74\u0007\u0212",
    "\u0002\u0002\u1a74\u049b\u0003\u0002\u0002\u0002\u1a75\u1a76\u0007\u01a2",
    "\u0002\u0002\u1a76\u1a77\u0007i\u0002\u0002\u1a77\u1a78\u0007%\u0002",
    "\u0002\u1a78\u1a79\u0007\u0212\u0002\u0002\u1a79\u049d\u0003\u0002\u0002",
    "\u0002\u1a7a\u1a7b\u0007\u0212\u0002\u0002\u1a7b\u1a7c\u0005\u04a0\u0251",
    "\u0002\u1a7c\u049f\u0003\u0002\u0002\u0002\u1a7d\u1a7e\t \u0002\u0002",
    "\u1a7e\u04a1\u0003\u0002\u0002\u0002\u1a7f\u1a85\u0005\u04a4\u0253\u0002",
    "\u1a80\u1a85\u0005\u04a6\u0254\u0002\u1a81\u1a85\u0005\u04a8\u0255\u0002",
    "\u1a82\u1a85\u0005\u04aa\u0256\u0002\u1a83\u1a85\u0005\u04ac\u0257\u0002",
    "\u1a84\u1a7f\u0003\u0002\u0002\u0002\u1a84\u1a80\u0003\u0002\u0002\u0002",
    "\u1a84\u1a81\u0003\u0002\u0002\u0002\u1a84\u1a82\u0003\u0002\u0002\u0002",
    "\u1a84\u1a83\u0003\u0002\u0002\u0002\u1a85\u04a3\u0003\u0002\u0002\u0002",
    "\u1a86\u1abe\u0007_\u0002\u0002\u1a87\u1abe\u0007a\u0002\u0002\u1a88",
    "\u1abe\u0007b\u0002\u0002\u1a89\u1abe\u0007c\u0002\u0002\u1a8a\u1abe",
    "\u0007^\u0002\u0002\u1a8b\u1abe\u0007d\u0002\u0002\u1a8c\u1abe\u0007",
    "e\u0002\u0002\u1a8d\u1a90\u0007f\u0002\u0002\u1a8e\u1a8f\u0007\u008d",
    "\u0002\u0002\u1a8f\u1a91\u0007\u0212\u0002\u0002\u1a90\u1a8e\u0003\u0002",
    "\u0002\u0002\u1a90\u1a91\u0003\u0002\u0002\u0002\u1a91\u1abe\u0003\u0002",
    "\u0002\u0002\u1a92\u1abe\u0007g\u0002\u0002\u1a93\u1abe\u0007p\u0002",
    "\u0002\u1a94\u1a98\u0007h\u0002\u0002\u1a95\u1a96\u0007\u01f0\u0002",
    "\u0002\u1a96\u1a97\u0007\u021a\u0002\u0002\u1a97\u1a99\u0007\u01f1\u0002",
    "\u0002\u1a98\u1a95\u0003\u0002\u0002\u0002\u1a98\u1a99\u0003\u0002\u0002",
    "\u0002\u1a99\u1abe\u0003\u0002\u0002\u0002\u1a9a\u1a9b\u0007\u0186\u0002",
    "\u0002\u1a9b\u1a9c\u0007\u0180\u0002\u0002\u1a9c\u1a9d\u0007Z\u0002",
    "\u0002\u1a9d\u1abe\u0007\u0181\u0002\u0002\u1a9e\u1a9f\u0007\u0186\u0002",
    "\u0002\u1a9f\u1aa0\u0007\u0182\u0002\u0002\u1aa0\u1aa1\u0007Z\u0002",
    "\u0002\u1aa1\u1abe\u0007\u0185\u0002\u0002\u1aa2\u1aa5\u0007m\u0002",
    "\u0002\u1aa3\u1aa4\u0007\u01cf\u0002\u0002\u1aa4\u1aa6\u0007\u021a\u0002",
    "\u0002\u1aa5\u1aa3\u0003\u0002\u0002\u0002\u1aa5\u1aa6\u0003\u0002\u0002",
    "\u0002\u1aa6\u1abe\u0003\u0002\u0002\u0002\u1aa7\u1abe\u0007r\u0002",
    "\u0002\u1aa8\u1abe\u0007\u0179\u0002\u0002\u1aa9\u1abe\u0007\u0129\u0002",
    "\u0002\u1aaa\u1abe\u0007\u0178\u0002\u0002\u1aab\u1aaf\u0007n\u0002",
    "\u0002\u1aac\u1aad\u0007\u01f0\u0002\u0002\u1aad\u1aae\u0007\u021a\u0002",
    "\u0002\u1aae\u1ab0\u0007\u01f1\u0002\u0002\u1aaf\u1aac\u0003\u0002\u0002",
    "\u0002\u1aaf\u1ab0\u0003\u0002\u0002\u0002\u1ab0\u1abe\u0003\u0002\u0002",
    "\u0002\u1ab1\u1abe\u0007\u01b0\u0002\u0002\u1ab2\u1aba\t*\u0002\u0002",
    "\u1ab3\u1ab4\u0007\u01f0\u0002\u0002\u1ab4\u1ab7\u0007\u021a\u0002\u0002",
    "\u1ab5\u1ab6\u0007\u01ee\u0002\u0002\u1ab6\u1ab8\u0007\u021a\u0002\u0002",
    "\u1ab7\u1ab5\u0003\u0002\u0002\u0002\u1ab7\u1ab8\u0003\u0002\u0002\u0002",
    "\u1ab8\u1ab9\u0003\u0002\u0002\u0002\u1ab9\u1abb\u0007\u01f1\u0002\u0002",
    "\u1aba\u1ab3\u0003\u0002\u0002\u0002\u1aba\u1abb\u0003\u0002\u0002\u0002",
    "\u1abb\u1abe\u0003\u0002\u0002\u0002\u1abc\u1abe\u0005\u057e\u02c0\u0002",
    "\u1abd\u1a86\u0003\u0002\u0002\u0002\u1abd\u1a87\u0003\u0002\u0002\u0002",
    "\u1abd\u1a88\u0003\u0002\u0002\u0002\u1abd\u1a89\u0003\u0002\u0002\u0002",
    "\u1abd\u1a8a\u0003\u0002\u0002\u0002\u1abd\u1a8b\u0003\u0002\u0002\u0002",
    "\u1abd\u1a8c\u0003\u0002\u0002\u0002\u1abd\u1a8d\u0003\u0002\u0002\u0002",
    "\u1abd\u1a92\u0003\u0002\u0002\u0002\u1abd\u1a93\u0003\u0002\u0002\u0002",
    "\u1abd\u1a94\u0003\u0002\u0002\u0002\u1abd\u1a9a\u0003\u0002\u0002\u0002",
    "\u1abd\u1a9e\u0003\u0002\u0002\u0002\u1abd\u1aa2\u0003\u0002\u0002\u0002",
    "\u1abd\u1aa7\u0003\u0002\u0002\u0002\u1abd\u1aa8\u0003\u0002\u0002\u0002",
    "\u1abd\u1aa9\u0003\u0002\u0002\u0002\u1abd\u1aaa\u0003\u0002\u0002\u0002",
    "\u1abd\u1aab\u0003\u0002\u0002\u0002\u1abd\u1ab1\u0003\u0002\u0002\u0002",
    "\u1abd\u1ab2\u0003\u0002\u0002\u0002\u1abd\u1abc\u0003\u0002\u0002\u0002",
    "\u1abe\u04a5\u0003\u0002\u0002\u0002\u1abf\u1ac0\u0007s\u0002\u0002",
    "\u1ac0\u1ac1\u0007\u01fa\u0002\u0002\u1ac1\u1ac2\u0005\u04a2\u0252\u0002",
    "\u1ac2\u1ac3\u0007\u01fd\u0002\u0002\u1ac3\u04a7\u0003\u0002\u0002\u0002",
    "\u1ac4\u1ac5\u0007t\u0002\u0002\u1ac5\u1ac6\u0007\u01fa\u0002\u0002",
    "\u1ac6\u1ac7\u0005&\u0014\u0002\u1ac7\u1ac8\u0007\u01fd\u0002\u0002",
    "\u1ac8\u04a9\u0003\u0002\u0002\u0002\u1ac9\u1aca\u0007u\u0002\u0002",
    "\u1aca\u1acb\u0007\u01fa\u0002\u0002\u1acb\u1acc\u0005\u04a4\u0253\u0002",
    "\u1acc\u1acd\u0007\u01ee\u0002\u0002\u1acd\u1ace\u0005\u04a2\u0252\u0002",
    "\u1ace\u1acf\u0007\u01fd\u0002\u0002\u1acf\u04ab\u0003\u0002\u0002\u0002",
    "\u1ad0\u1ad1\u0007v\u0002\u0002\u1ad1\u1ad2\u0007\u01fa\u0002\u0002",
    "\u1ad2\u1ad3\u0005\u04b2\u025a\u0002\u1ad3\u1ad4\u0007\u01fd\u0002\u0002",
    "\u1ad4\u04ad\u0003\u0002\u0002\u0002\u1ad5\u1ad6\u0005\u0006\u0004\u0002",
    "\u1ad6\u1ad7\u0007\u01ed\u0002\u0002\u1ad7\u1ada\u0005\u04b0\u0259\u0002",
    "\u1ad8\u1ad9\u0007[\u0002\u0002\u1ad9\u1adb\u0007\u0212\u0002\u0002",
    "\u1ada\u1ad8\u0003\u0002\u0002\u0002\u1ada\u1adb\u0003\u0002\u0002\u0002",
    "\u1adb\u04af\u0003\u0002\u0002\u0002\u1adc\u1add\u0005\u04a2\u0252\u0002",
    "\u1add\u04b1\u0003\u0002\u0002\u0002\u1ade\u1ae3\u0005\u04b0\u0259\u0002",
    "\u1adf\u1ae0\u0007\u01ee\u0002\u0002\u1ae0\u1ae2\u0005\u04b0\u0259\u0002",
    "\u1ae1\u1adf\u0003\u0002\u0002\u0002\u1ae2\u1ae5\u0003\u0002\u0002\u0002",
    "\u1ae3\u1ae1\u0003\u0002\u0002\u0002\u1ae3\u1ae4\u0003\u0002\u0002\u0002",
    "\u1ae4\u04b3\u0003\u0002\u0002\u0002\u1ae5\u1ae3\u0003\u0002\u0002\u0002",
    "\u1ae6\u1ae7\u0007\u00d8\u0002\u0002\u1ae7\u1ae8\u0007\u021b\u0002\u0002",
    "\u1ae8\u04b5\u0003\u0002\u0002\u0002\u1ae9\u1aeb\u0007\u0173\u0002\u0002",
    "\u1aea\u1aec\u0005\u02e6\u0174\u0002\u1aeb\u1aea\u0003\u0002\u0002\u0002",
    "\u1aeb\u1aec\u0003\u0002\u0002\u0002\u1aec\u04b7\u0003\u0002\u0002\u0002",
    "\u1aed\u1aef\u0007\u0175\u0002\u0002\u1aee\u1af0\u0007\u021b\u0002\u0002",
    "\u1aef\u1aee\u0003\u0002\u0002\u0002\u1aef\u1af0\u0003\u0002\u0002\u0002",
    "\u1af0\u1af3\u0003\u0002\u0002\u0002\u1af1\u1af2\u0007\u00d3\u0002\u0002",
    "\u1af2\u1af4\u0005\u036e\u01b8\u0002\u1af3\u1af1\u0003\u0002\u0002\u0002",
    "\u1af3\u1af4\u0003\u0002\u0002\u0002\u1af4\u04b9\u0003\u0002\u0002\u0002",
    "\u1af5\u1af7\u0007\u00d9\u0002\u0002\u1af6\u1af8\u0007\u021b\u0002\u0002",
    "\u1af7\u1af6\u0003\u0002\u0002\u0002\u1af7\u1af8\u0003\u0002\u0002\u0002",
    "\u1af8\u1afb\u0003\u0002\u0002\u0002\u1af9\u1afa\u0007\u00d3\u0002\u0002",
    "\u1afa\u1afc\u0005\u036e\u01b8\u0002\u1afb\u1af9\u0003\u0002\u0002\u0002",
    "\u1afb\u1afc\u0003\u0002\u0002\u0002\u1afc\u04bb\u0003\u0002\u0002\u0002",
    "\u1afd\u1afe\u0007\u00d7\u0002\u0002\u1afe\u04bd\u0003\u0002\u0002\u0002",
    "\u1aff\u1b00\u0005\u04c0\u0261\u0002\u1b00\u04bf\u0003\u0002\u0002\u0002",
    "\u1b01\u1b02\u0005\u0006\u0004\u0002\u1b02\u04c1\u0003\u0002\u0002\u0002",
    "\u1b03\u1b04\u0005\u04da\u026e\u0002\u1b04\u04c3\u0003\u0002\u0002\u0002",
    "\u1b05\u1b06\u0007\u01f0\u0002\u0002\u1b06\u1b0b\u0005\u04c2\u0262\u0002",
    "\u1b07\u1b08\u0007\u01ee\u0002\u0002\u1b08\u1b0a\u0005\u04c2\u0262\u0002",
    "\u1b09\u1b07\u0003\u0002\u0002\u0002\u1b0a\u1b0d\u0003\u0002\u0002\u0002",
    "\u1b0b\u1b09\u0003\u0002\u0002\u0002\u1b0b\u1b0c\u0003\u0002\u0002\u0002",
    "\u1b0c\u1b0e\u0003\u0002\u0002\u0002\u1b0d\u1b0b\u0003\u0002\u0002\u0002",
    "\u1b0e\u1b0f\u0007\u01f1\u0002\u0002\u1b0f\u04c5\u0003\u0002\u0002\u0002",
    "\u1b10\u1b11\u0007\u0173\u0002\u0002\u1b11\u1b12\u0005\u0594\u02cb\u0002",
    "\u1b12\u04c7\u0003\u0002\u0002\u0002\u1b13\u1b14\u0005\u03b6\u01dc\u0002",
    "\u1b14\u04c9\u0003\u0002\u0002\u0002\u1b15\u1b16\u0007\u012b\u0002\u0002",
    "\u1b16\u1b18\u0005\u04c0\u0261\u0002\u1b17\u1b19\u0005\u04c4\u0263\u0002",
    "\u1b18\u1b17\u0003\u0002\u0002\u0002\u1b18\u1b19\u0003\u0002\u0002\u0002",
    "\u1b19\u1b1b\u0003\u0002\u0002\u0002\u1b1a\u1b1c\u0005\u04c6\u0264\u0002",
    "\u1b1b\u1b1a\u0003\u0002\u0002\u0002\u1b1b\u1b1c\u0003\u0002\u0002\u0002",
    "\u1b1c\u1b1d\u0003\u0002\u0002\u0002\u1b1d\u1b1e\u0007I\u0002\u0002",
    "\u1b1e\u1b1f\u0005\u04c8\u0265\u0002\u1b1f\u04cb\u0003\u0002\u0002\u0002",
    "\u1b20\u1b21\u0007\u00da\u0002\u0002\u1b21\u1b24\u0005\u04ea\u0276\u0002",
    "\u1b22\u1b23\u0007\u0146\u0002\u0002\u1b23\u1b25\u0005\u04ce\u0268\u0002",
    "\u1b24\u1b22\u0003\u0002\u0002\u0002\u1b24\u1b25\u0003\u0002\u0002\u0002",
    "\u1b25\u04cd\u0003\u0002\u0002\u0002\u1b26\u1b2c\u0005\u03b6\u01dc\u0002",
    "\u1b27\u1b29\u0005\u0504\u0283\u0002\u1b28\u1b2a\u0005\u0506\u0284\u0002",
    "\u1b29\u1b28\u0003\u0002\u0002\u0002\u1b29\u1b2a\u0003\u0002\u0002\u0002",
    "\u1b2a\u1b2c\u0003\u0002\u0002\u0002\u1b2b\u1b26\u0003\u0002\u0002\u0002",
    "\u1b2b\u1b27\u0003\u0002\u0002\u0002\u1b2c\u04cf\u0003\u0002\u0002\u0002",
    "\u1b2d\u1b2e\u0007\u010a\u0002\u0002\u1b2e\u1b30\u0005\u04ea\u0276\u0002",
    "\u1b2f\u1b31\u0005\u03c4\u01e3\u0002\u1b30\u1b2f\u0003\u0002\u0002\u0002",
    "\u1b30\u1b31\u0003\u0002\u0002\u0002\u1b31\u1b32\u0003\u0002\u0002\u0002",
    "\u1b32\u1b34\u0005\u04d4\u026b\u0002\u1b33\u1b35\u0005\u0458\u022d\u0002",
    "\u1b34\u1b33\u0003\u0002\u0002\u0002\u1b34\u1b35\u0003\u0002\u0002\u0002",
    "\u1b35\u04d1\u0003\u0002\u0002\u0002\u1b36\u1b37\u0007\u00db\u0002\u0002",
    "\u1b37\u1b38\u0005\u04ea\u0276\u0002\u1b38\u04d3\u0003\u0002\u0002\u0002",
    "\u1b39\u1b3a\u0007\u0089\u0002\u0002\u1b3a\u1b3f\u0005\u04ea\u0276\u0002",
    "\u1b3b\u1b3c\u0007\u01ee\u0002\u0002\u1b3c\u1b3e\u0005\u04ea\u0276\u0002",
    "\u1b3d\u1b3b\u0003\u0002\u0002\u0002\u1b3e\u1b41\u0003\u0002\u0002\u0002",
    "\u1b3f\u1b3d\u0003\u0002\u0002\u0002\u1b3f\u1b40\u0003\u0002\u0002\u0002",
    "\u1b40\u04d5\u0003\u0002\u0002\u0002\u1b41\u1b3f\u0003\u0002\u0002\u0002",
    "\u1b42\u1b46\u0007\u01f0\u0002\u0002\u1b43\u1b45\u0005\u02e6\u0174\u0002",
    "\u1b44\u1b43\u0003\u0002\u0002\u0002\u1b45\u1b48\u0003\u0002\u0002\u0002",
    "\u1b46\u1b44\u0003\u0002\u0002\u0002\u1b46\u1b47\u0003\u0002\u0002\u0002",
    "\u1b47\u1b4d\u0003\u0002\u0002\u0002\u1b48\u1b46\u0003\u0002\u0002\u0002",
    "\u1b49\u1b4a\u0007\u01ee\u0002\u0002\u1b4a\u1b4c\u0005\u0006\u0004\u0002",
    "\u1b4b\u1b49\u0003\u0002\u0002\u0002\u1b4c\u1b4f\u0003\u0002\u0002\u0002",
    "\u1b4d\u1b4b\u0003\u0002\u0002\u0002\u1b4d\u1b4e\u0003\u0002\u0002\u0002",
    "\u1b4e\u1b50\u0003\u0002\u0002\u0002\u1b4f\u1b4d\u0003\u0002\u0002\u0002",
    "\u1b50\u1b51\u0007\u01f1\u0002\u0002\u1b51\u04d7\u0003\u0002\u0002\u0002",
    "\u1b52\u1b56\u0007\u01f0\u0002\u0002\u1b53\u1b55\u0005\u04da\u026e\u0002",
    "\u1b54\u1b53\u0003\u0002\u0002\u0002\u1b55\u1b58\u0003\u0002\u0002\u0002",
    "\u1b56\u1b54\u0003\u0002\u0002\u0002\u1b56\u1b57\u0003\u0002\u0002\u0002",
    "\u1b57\u1b5d\u0003\u0002\u0002\u0002\u1b58\u1b56\u0003\u0002\u0002\u0002",
    "\u1b59\u1b5a\u0007\u01ee\u0002\u0002\u1b5a\u1b5c\u0005\u04da\u026e\u0002",
    "\u1b5b\u1b59\u0003\u0002\u0002\u0002\u1b5c\u1b5f\u0003\u0002\u0002\u0002",
    "\u1b5d\u1b5b\u0003\u0002\u0002\u0002\u1b5d\u1b5e\u0003\u0002\u0002\u0002",
    "\u1b5e\u1b60\u0003\u0002\u0002\u0002\u1b5f\u1b5d\u0003\u0002\u0002\u0002",
    "\u1b60\u1b61\u0007\u01f1\u0002\u0002\u1b61\u04d9\u0003\u0002\u0002\u0002",
    "\u1b62\u1b66\u0005\u04e2\u0272\u0002\u1b63\u1b65\u0005\u04dc\u026f\u0002",
    "\u1b64\u1b63\u0003\u0002\u0002\u0002\u1b65\u1b68\u0003\u0002\u0002\u0002",
    "\u1b66\u1b64\u0003\u0002\u0002\u0002\u1b66\u1b67\u0003\u0002\u0002\u0002",
    "\u1b67\u1b69\u0003\u0002\u0002\u0002\u1b68\u1b66\u0003\u0002\u0002\u0002",
    "\u1b69\u1b6f\u0005\u0594\u02cb\u0002\u1b6a\u1b6d\u0007\u020c\u0002\u0002",
    "\u1b6b\u1b6d\u0007\u012c\u0002\u0002\u1b6c\u1b6a\u0003\u0002\u0002\u0002",
    "\u1b6c\u1b6b\u0003\u0002\u0002\u0002\u1b6d\u1b6e\u0003\u0002\u0002\u0002",
    "\u1b6e\u1b70\u0005\u04e4\u0273\u0002\u1b6f\u1b6c\u0003\u0002\u0002\u0002",
    "\u1b6f\u1b70\u0003\u0002\u0002\u0002\u1b70\u04db\u0003\u0002\u0002\u0002",
    "\u1b71\u1b72\t+\u0002\u0002\u1b72\u04dd\u0003\u0002\u0002\u0002\u1b73",
    "\u1b75\u0005\u059c\u02cf\u0002\u1b74\u1b76\u0007\u01ef\u0002\u0002\u1b75",
    "\u1b74\u0003\u0002\u0002\u0002\u1b75\u1b76\u0003\u0002\u0002\u0002\u1b76",
    "\u1b88\u0003\u0002\u0002\u0002\u1b77\u1b79\u0005\u04ee\u0278\u0002\u1b78",
    "\u1b7a\u0007\u01ef\u0002\u0002\u1b79\u1b78\u0003\u0002\u0002\u0002\u1b79",
    "\u1b7a\u0003\u0002\u0002\u0002\u1b7a\u1b88\u0003\u0002\u0002\u0002\u1b7b",
    "\u1b7d\u0005\u04e0\u0271\u0002\u1b7c\u1b7e\u0007\u01ef\u0002\u0002\u1b7d",
    "\u1b7c\u0003\u0002\u0002\u0002\u1b7d\u1b7e\u0003\u0002\u0002\u0002\u1b7e",
    "\u1b88\u0003\u0002\u0002\u0002\u1b7f\u1b81\u0005\u04ca\u0266\u0002\u1b80",
    "\u1b82\u0007\u01ef\u0002\u0002\u1b81\u1b80\u0003\u0002\u0002\u0002\u1b81",
    "\u1b82\u0003\u0002\u0002\u0002\u1b82\u1b88\u0003\u0002\u0002\u0002\u1b83",
    "\u1b85\u0005\u04f0\u0279\u0002\u1b84\u1b86\u0007\u01ef\u0002\u0002\u1b85",
    "\u1b84\u0003\u0002\u0002\u0002\u1b85\u1b86\u0003\u0002\u0002\u0002\u1b86",
    "\u1b88\u0003\u0002\u0002\u0002\u1b87\u1b73\u0003\u0002\u0002\u0002\u1b87",
    "\u1b77\u0003\u0002\u0002\u0002\u1b87\u1b7b\u0003\u0002\u0002\u0002\u1b87",
    "\u1b7f\u0003\u0002\u0002\u0002\u1b87\u1b83\u0003\u0002\u0002\u0002\u1b88",
    "\u04df\u0003\u0002\u0002\u0002\u1b89\u1b8b\u0005\u04e2\u0272\u0002\u1b8a",
    "\u1b8c\u0007\u017c\u0002\u0002\u1b8b\u1b8a\u0003\u0002\u0002\u0002\u1b8b",
    "\u1b8c\u0003\u0002\u0002\u0002\u1b8c\u1b8d\u0003\u0002\u0002\u0002\u1b8d",
    "\u1b90\u0005\u0594\u02cb\u0002\u1b8e\u1b8f\u0007\b\u0002\u0002\u1b8f",
    "\u1b91\u0007J\u0002\u0002\u1b90\u1b8e\u0003\u0002\u0002\u0002\u1b90",
    "\u1b91\u0003\u0002\u0002\u0002\u1b91\u1b97\u0003\u0002\u0002\u0002\u1b92",
    "\u1b95\u0007\u020c\u0002\u0002\u1b93\u1b95\u0007\u012c\u0002\u0002\u1b94",
    "\u1b92\u0003\u0002\u0002\u0002\u1b94\u1b93\u0003\u0002\u0002\u0002\u1b95",
    "\u1b96\u0003\u0002\u0002\u0002\u1b96\u1b98\u0005\u04e4\u0273\u0002\u1b97",
    "\u1b94\u0003\u0002\u0002\u0002\u1b97\u1b98\u0003\u0002\u0002\u0002\u1b98",
    "\u04e1\u0003\u0002\u0002\u0002\u1b99\u1b9b\u0007\u020d\u0002\u0002\u1b9a",
    "\u1b99\u0003\u0002\u0002\u0002\u1b9a\u1b9b\u0003\u0002\u0002\u0002\u1b9b",
    "\u1b9c\u0003\u0002\u0002\u0002\u1b9c\u1b9d\u0005\u0006\u0004\u0002\u1b9d",
    "\u04e3\u0003\u0002\u0002\u0002\u1b9e\u1b9f\u0005\u02e6\u0174\u0002\u1b9f",
    "\u04e5\u0003\u0002\u0002\u0002\u1ba0\u1ba1\u0005\u0594\u02cb\u0002\u1ba1",
    "\u04e7\u0003\u0002\u0002\u0002\u1ba2\u1ba4\u0007\u0211\u0002\u0002\u1ba3",
    "\u1ba2\u0003\u0002\u0002\u0002\u1ba4\u1ba5\u0003\u0002\u0002\u0002\u1ba5",
    "\u1ba3\u0003\u0002\u0002\u0002\u1ba5\u1ba6\u0003\u0002\u0002\u0002\u1ba6",
    "\u04e9\u0003\u0002\u0002\u0002\u1ba7\u1ba8\u0005\u052e\u0298\u0002\u1ba8",
    "\u04eb\u0003\u0002\u0002\u0002\u1ba9\u1baa\u0005\u0006\u0004\u0002\u1baa",
    "\u1bab\u0007\u01ec\u0002\u0002\u1bab\u1bac\u0005\u0006\u0004\u0002\u1bac",
    "\u1baf\u0003\u0002\u0002\u0002\u1bad\u1baf\u0005\u0006\u0004\u0002\u1bae",
    "\u1ba9\u0003\u0002\u0002\u0002\u1bae\u1bad\u0003\u0002\u0002\u0002\u1baf",
    "\u04ed\u0003\u0002\u0002\u0002\u1bb0\u1bb1\u0005\u0006\u0004\u0002\u1bb1",
    "\u1bb2\u0007\u019b\u0002\u0002\u1bb2\u04ef\u0003\u0002\u0002\u0002\u1bb3",
    "\u1bb4\u0007\u0235\u0002\u0002\u1bb4\u1bb5\u0005\u04f2\u027a\u0002\u1bb5",
    "\u04f1\u0003\u0002\u0002\u0002\u1bb6\u1bba\u0005\u04f4\u027b\u0002\u1bb7",
    "\u1bba\u0005\u04f6\u027c\u0002\u1bb8\u1bba\u0005\u04f8\u027d\u0002\u1bb9",
    "\u1bb6\u0003\u0002\u0002\u0002\u1bb9\u1bb7\u0003\u0002\u0002\u0002\u1bb9",
    "\u1bb8\u0003\u0002\u0002\u0002\u1bba\u04f3\u0003\u0002\u0002\u0002\u1bbb",
    "\u1bbc\u0007\u0236\u0002\u0002\u1bbc\u1bbd\u0007\u01f0\u0002\u0002\u1bbd",
    "\u1bbe\u0005\u0006\u0004\u0002\u1bbe\u1bbf\u0007\u01ee\u0002\u0002\u1bbf",
    "\u1bc0\u0005\u02e6\u0174\u0002\u1bc0\u1bc1\u0007\u01f1\u0002\u0002\u1bc1",
    "\u04f5\u0003\u0002\u0002\u0002\u1bc2\u1bc3\u0007\u0237\u0002\u0002\u1bc3",
    "\u04f7\u0003\u0002\u0002\u0002\u1bc4\u1bc5\u0007\u0238\u0002\u0002\u1bc5",
    "\u04f9\u0003\u0002\u0002\u0002\u1bc6\u1bca\u0007\u0235\u0002\u0002\u1bc7",
    "\u1bc9\u0005\u0006\u0004\u0002\u1bc8\u1bc7\u0003\u0002\u0002\u0002\u1bc9",
    "\u1bcc\u0003\u0002\u0002\u0002\u1bca\u1bc8\u0003\u0002\u0002\u0002\u1bca",
    "\u1bcb\u0003\u0002\u0002\u0002\u1bcb\u04fb\u0003\u0002\u0002\u0002\u1bcc",
    "\u1bca\u0003\u0002\u0002\u0002\u1bcd\u1bd1\u0007\u0239\u0002\u0002\u1bce",
    "\u1bd0\u0005\u0006\u0004\u0002\u1bcf\u1bce\u0003\u0002\u0002\u0002\u1bd0",
    "\u1bd3\u0003\u0002\u0002\u0002\u1bd1\u1bcf\u0003\u0002\u0002\u0002\u1bd1",
    "\u1bd2\u0003\u0002\u0002\u0002\u1bd2\u04fd\u0003\u0002\u0002\u0002\u1bd3",
    "\u1bd1\u0003\u0002\u0002\u0002\u1bd4\u1bd8\u0007.\u0002\u0002\u1bd5",
    "\u1bd7\u0005\u0006\u0004\u0002\u1bd6\u1bd5\u0003\u0002\u0002\u0002\u1bd7",
    "\u1bda\u0003\u0002\u0002\u0002\u1bd8\u1bd6\u0003\u0002\u0002\u0002\u1bd8",
    "\u1bd9\u0003\u0002\u0002\u0002\u1bd9\u04ff\u0003\u0002\u0002\u0002\u1bda",
    "\u1bd8\u0003\u0002\u0002\u0002\u1bdb\u1bdc\u0005\u0504\u0283\u0002\u1bdc",
    "\u0501\u0003\u0002\u0002\u0002\u1bdd\u1bde\u0007\u018d\u0002\u0002\u1bde",
    "\u1bdf\u0007\u019f\u0002\u0002\u1bdf\u1be4\u0005\u0504\u0283\u0002\u1be0",
    "\u1be2\u0005\u03c4\u01e3\u0002\u1be1\u1be0\u0003\u0002\u0002\u0002\u1be1",
    "\u1be2\u0003\u0002\u0002\u0002\u1be2\u1be3\u0003\u0002\u0002\u0002\u1be3",
    "\u1be5\u0005\u04d4\u026b\u0002\u1be4\u1be1\u0003\u0002\u0002\u0002\u1be4",
    "\u1be5\u0003\u0002\u0002\u0002\u1be5\u1be7\u0003\u0002\u0002\u0002\u1be6",
    "\u1be8\u0005\u0506\u0284\u0002\u1be7\u1be6\u0003\u0002\u0002\u0002\u1be7",
    "\u1be8\u0003\u0002\u0002\u0002\u1be8\u0503\u0003\u0002\u0002\u0002\u1be9",
    "\u1bea\u0005\u02e6\u0174\u0002\u1bea\u0505\u0003\u0002\u0002\u0002\u1beb",
    "\u1bec\u0007?\u0002\u0002\u1bec\u1bed\u0005\u0508\u0285\u0002\u1bed",
    "\u0507\u0003\u0002\u0002\u0002\u1bee\u1bf3\u0005\u050a\u0286\u0002\u1bef",
    "\u1bf0\u0007\u01ee\u0002\u0002\u1bf0\u1bf2\u0005\u050a\u0286\u0002\u1bf1",
    "\u1bef\u0003\u0002\u0002\u0002\u1bf2\u1bf5\u0003\u0002\u0002\u0002\u1bf3",
    "\u1bf1\u0003\u0002\u0002\u0002\u1bf3\u1bf4\u0003\u0002\u0002\u0002\u1bf4",
    "\u0509\u0003\u0002\u0002\u0002\u1bf5\u1bf3\u0003\u0002\u0002\u0002\u1bf6",
    "\u1bf8\u0005\u04dc\u026f\u0002\u1bf7\u1bf6\u0003\u0002\u0002\u0002\u1bf8",
    "\u1bfb\u0003\u0002\u0002\u0002\u1bf9\u1bf7\u0003\u0002\u0002\u0002\u1bf9",
    "\u1bfa\u0003\u0002\u0002\u0002\u1bfa\u1bfc\u0003\u0002\u0002\u0002\u1bfb",
    "\u1bf9\u0003\u0002\u0002\u0002\u1bfc\u1bfd\u0005\u02e6\u0174\u0002\u1bfd",
    "\u050b\u0003\u0002\u0002\u0002\u1bfe\u1c01\u0005\u04ea\u0276\u0002\u1bff",
    "\u1c00\u0007\u020c\u0002\u0002\u1c00\u1c02\u0005\u02e6\u0174\u0002\u1c01",
    "\u1bff\u0003\u0002\u0002\u0002\u1c01\u1c02\u0003\u0002\u0002\u0002\u1c02",
    "\u050d\u0003\u0002\u0002\u0002\u1c03\u1c04\u0007J\u0002\u0002\u1c04",
    "\u050f\u0003\u0002\u0002\u0002\u1c05\u1c06\u0005\u0512\u028a\u0002\u1c06",
    "\u0511\u0003\u0002\u0002\u0002\u1c07\u1c09\u0007\u0234\u0002\u0002\u1c08",
    "\u1c0a\u0005\u04ea\u0276\u0002\u1c09\u1c08\u0003\u0002\u0002\u0002\u1c09",
    "\u1c0a\u0003\u0002\u0002\u0002\u1c0a\u0513\u0003\u0002\u0002\u0002\u1c0b",
    "\u1c0d\u0007\u019b\u0002\u0002\u1c0c\u1c0e\u0005\u0516\u028c\u0002\u1c0d",
    "\u1c0c\u0003\u0002\u0002\u0002\u1c0e\u1c0f\u0003\u0002\u0002\u0002\u1c0f",
    "\u1c0d\u0003\u0002\u0002\u0002\u1c0f\u1c10\u0003\u0002\u0002\u0002\u1c10",
    "\u0515\u0003\u0002\u0002\u0002\u1c11\u1c12\u0007\u00d3\u0002\u0002\u1c12",
    "\u1c17\u0005\u04ea\u0276\u0002\u1c13\u1c14\u0007\u0007\u0002\u0002\u1c14",
    "\u1c16\u0005\u04ea\u0276\u0002\u1c15\u1c13\u0003\u0002\u0002\u0002\u1c16",
    "\u1c19\u0003\u0002\u0002\u0002\u1c17\u1c15\u0003\u0002\u0002\u0002\u1c17",
    "\u1c18\u0003\u0002\u0002\u0002\u1c18\u1c1a\u0003\u0002\u0002\u0002\u1c19",
    "\u1c17\u0003\u0002\u0002\u0002\u1c1a\u1c1b\u0007\u00d4\u0002\u0002\u1c1b",
    "\u1c1c\u0005\u055c\u02af\u0002\u1c1c\u0517\u0003\u0002\u0002\u0002\u1c1d",
    "\u1c1e\u0007\u0120\u0002\u0002\u1c1e\u1c25\u0005\u036e\u01b8\u0002\u1c1f",
    "\u1c20\u0007\u0146\u0002\u0002\u1c20\u1c21\u0005\u0006\u0004\u0002\u1c21",
    "\u1c22\u0007\u010f\u0002\u0002\u1c22\u1c23\u0005\u051a\u028e\u0002\u1c23",
    "\u1c25\u0003\u0002\u0002\u0002\u1c24\u1c1d\u0003\u0002\u0002\u0002\u1c24",
    "\u1c1f\u0003\u0002\u0002\u0002\u1c24\u1c25\u0003\u0002\u0002\u0002\u1c25",
    "\u1c26\u0003\u0002\u0002\u0002\u1c26\u1c28\u0007\u0147\u0002\u0002\u1c27",
    "\u1c29\u0005\u0564\u02b3\u0002\u1c28\u1c27\u0003\u0002\u0002\u0002\u1c29",
    "\u1c2a\u0003\u0002\u0002\u0002\u1c2a\u1c28\u0003\u0002\u0002\u0002\u1c2a",
    "\u1c2b\u0003\u0002\u0002\u0002\u1c2b\u1c2c\u0003\u0002\u0002\u0002\u1c2c",
    "\u1c2d\u0007\u00d7\u0002\u0002\u1c2d\u1c2f\u0007\u0147\u0002\u0002\u1c2e",
    "\u1c30\u0007\u021b\u0002\u0002\u1c2f\u1c2e\u0003\u0002\u0002\u0002\u1c2f",
    "\u1c30\u0003\u0002\u0002\u0002\u1c30\u0519\u0003\u0002\u0002\u0002\u1c31",
    "\u1c34\u0005\u051c\u028f\u0002\u1c32\u1c34\u0005\u0520\u0291\u0002\u1c33",
    "\u1c31\u0003\u0002\u0002\u0002\u1c33\u1c32\u0003\u0002\u0002\u0002\u1c34",
    "\u051b\u0003\u0002\u0002\u0002\u1c35\u1c37\u0007\u022e\u0002\u0002\u1c36",
    "\u1c35\u0003\u0002\u0002\u0002\u1c36\u1c37\u0003\u0002\u0002\u0002\u1c37",
    "\u1c38\u0003\u0002\u0002\u0002\u1c38\u1c39\u0005\u051e\u0290\u0002\u1c39",
    "\u1c3a\u0005\u02e6\u0174\u0002\u1c3a\u051d\u0003\u0002\u0002\u0002\u1c3b",
    "\u1c40\u0007\u0219\u0002\u0002\u1c3c\u1c3d\u0005\u02e6\u0174\u0002\u1c3d",
    "\u1c3e\u0007\u020f\u0002\u0002\u1c3e\u1c40\u0003\u0002\u0002\u0002\u1c3f",
    "\u1c3b\u0003\u0002\u0002\u0002\u1c3f\u1c3c\u0003\u0002\u0002\u0002\u1c40",
    "\u051f\u0003\u0002\u0002\u0002\u1c41\u1c42\u0007\u01f0\u0002\u0002\u1c42",
    "\u1c43\u0005\u03b6\u01dc\u0002\u1c43\u1c44\u0007\u01f1\u0002\u0002\u1c44",
    "\u1c54\u0003\u0002\u0002\u0002\u1c45\u1c51\u0005\u04ea\u0276\u0002\u1c46",
    "\u1c47\u0007\u01f0\u0002\u0002\u1c47\u1c4c\u0005\u02e6\u0174\u0002\u1c48",
    "\u1c49\u0007\u01ee\u0002\u0002\u1c49\u1c4b\u0005\u02e6\u0174\u0002\u1c4a",
    "\u1c48\u0003\u0002\u0002\u0002\u1c4b\u1c4e\u0003\u0002\u0002\u0002\u1c4c",
    "\u1c4a\u0003\u0002\u0002\u0002\u1c4c\u1c4d\u0003\u0002\u0002\u0002\u1c4d",
    "\u1c4f\u0003\u0002\u0002\u0002\u1c4e\u1c4c\u0003\u0002\u0002\u0002\u1c4f",
    "\u1c50\u0007\u01f1\u0002\u0002\u1c50\u1c52\u0003\u0002\u0002\u0002\u1c51",
    "\u1c46\u0003\u0002\u0002\u0002\u1c51\u1c52\u0003\u0002\u0002\u0002\u1c52",
    "\u1c54\u0003\u0002\u0002\u0002\u1c53\u1c41\u0003\u0002\u0002\u0002\u1c53",
    "\u1c45\u0003\u0002\u0002\u0002\u1c54\u0521\u0003\u0002\u0002\u0002\u1c55",
    "\u1c56\u0007\u022f\u0002\u0002\u1c56\u1c57\u0005\u0006\u0004\u0002\u1c57",
    "\u1c58\u0007\u010f\u0002\u0002\u1c58\u1c5a\u0005\u0526\u0294\u0002\u1c59",
    "\u1c5b\u0005\u0524\u0293\u0002\u1c5a\u1c59\u0003\u0002\u0002\u0002\u1c5a",
    "\u1c5b\u0003\u0002\u0002\u0002\u1c5b\u1c5c\u0003\u0002\u0002\u0002\u1c5c",
    "\u1c5d\u0005\u03ee\u01f8\u0002\u1c5d\u0523\u0003\u0002\u0002\u0002\u1c5e",
    "\u1c5f\u0007\u0230\u0002\u0002\u1c5f\u1c60\u0007\u0231\u0002\u0002\u1c60",
    "\u0525\u0003\u0002\u0002\u0002\u1c61\u1c64\u0005\u051c\u028f\u0002\u1c62",
    "\u1c64\u0005\u0528\u0295\u0002\u1c63\u1c61\u0003\u0002\u0002\u0002\u1c63",
    "\u1c62\u0003\u0002\u0002\u0002\u1c64\u0527\u0003\u0002\u0002\u0002\u1c65",
    "\u1c66\u0007\u0232\u0002\u0002\u1c66\u1c67\u0007\u00b2\u0002\u0002\u1c67",
    "\u1c6d\u0005\u04ea\u0276\u0002\u1c68\u1c69\u0007\u0127\u0002\u0002\u1c69",
    "\u1c6a\u0005\u0300\u0181\u0002\u1c6a\u1c6b\u0007\u0006\u0002\u0002\u1c6b",
    "\u1c6c\u0005\u0300\u0181\u0002\u1c6c\u1c6e\u0003\u0002\u0002\u0002\u1c6d",
    "\u1c68\u0003\u0002\u0002\u0002\u1c6d\u1c6e\u0003\u0002\u0002\u0002\u1c6e",
    "\u0529\u0003\u0002\u0002\u0002\u1c6f\u1c70\t,\u0002\u0002\u1c70\u052b",
    "\u0003\u0002\u0002\u0002\u1c71\u1c72\u0007\u0203\u0002\u0002\u1c72\u1c73",
    "\u0005\u052a\u0296\u0002\u1c73\u052d\u0003\u0002\u0002\u0002\u1c74\u1c77",
    "\u0005\u00f0y\u0002\u1c75\u1c77\u0005\u0538\u029d\u0002\u1c76\u1c74",
    "\u0003\u0002\u0002\u0002\u1c76\u1c75\u0003\u0002\u0002\u0002\u1c77\u1c91",
    "\u0003\u0002\u0002\u0002\u1c78\u1c90\u0005\u052c\u0297\u0002\u1c79\u1c7a",
    "\u0007\u01ec\u0002\u0002\u1c7a\u1c90\u0005\u00f0y\u0002\u1c7b\u1c7c",
    "\u0007\u01f2\u0002\u0002\u1c7c\u1c7d\u0005\u02e6\u0174\u0002\u1c7d\u1c7e",
    "\u0007\u01f3\u0002\u0002\u1c7e\u1c90\u0003\u0002\u0002\u0002\u1c7f\u1c88",
    "\u0005\u033e\u01a0\u0002\u1c80\u1c85\u0005\u0344\u01a3\u0002\u1c81\u1c82",
    "\u0007\u01ee\u0002\u0002\u1c82\u1c84\u0005\u0344\u01a3\u0002\u1c83\u1c81",
    "\u0003\u0002\u0002\u0002\u1c84\u1c87\u0003\u0002\u0002\u0002\u1c85\u1c83",
    "\u0003\u0002\u0002\u0002\u1c85\u1c86\u0003\u0002\u0002\u0002\u1c86\u1c89",
    "\u0003\u0002\u0002\u0002\u1c87\u1c85\u0003\u0002\u0002\u0002\u1c88\u1c80",
    "\u0003\u0002\u0002\u0002\u1c88\u1c89\u0003\u0002\u0002\u0002\u1c89\u1c8a",
    "\u0003\u0002\u0002\u0002\u1c8a\u1c8d\u0007\u01f1\u0002\u0002\u1c8b\u1c8c",
    "\u0007\u0162\u0002\u0002\u1c8c\u1c8e\u0005\u0462\u0232\u0002\u1c8d\u1c8b",
    "\u0003\u0002\u0002\u0002\u1c8d\u1c8e\u0003\u0002\u0002\u0002\u1c8e\u1c90",
    "\u0003\u0002\u0002\u0002\u1c8f\u1c78\u0003\u0002\u0002\u0002\u1c8f\u1c79",
    "\u0003\u0002\u0002\u0002\u1c8f\u1c7b\u0003\u0002\u0002\u0002\u1c8f\u1c7f",
    "\u0003\u0002\u0002\u0002\u1c90\u1c93\u0003\u0002\u0002\u0002\u1c91\u1c8f",
    "\u0003\u0002\u0002\u0002\u1c91\u1c92\u0003\u0002\u0002\u0002\u1c92\u052f",
    "\u0003\u0002\u0002\u0002\u1c93\u1c91\u0003\u0002\u0002\u0002\u1c94\u1c95",
    "\u0007\f\u0002\u0002\u1c95\u1c96\u0005\u036e\u01b8\u0002\u1c96\u1c9a",
    "\u0007\u00d4\u0002\u0002\u1c97\u1c99\u0005\u0564\u02b3\u0002\u1c98\u1c97",
    "\u0003\u0002\u0002\u0002\u1c99\u1c9c\u0003\u0002\u0002\u0002\u1c9a\u1c98",
    "\u0003\u0002\u0002\u0002\u1c9a\u1c9b\u0003\u0002\u0002\u0002\u1c9b\u1ca0",
    "\u0003\u0002\u0002\u0002\u1c9c\u1c9a\u0003\u0002\u0002\u0002\u1c9d\u1c9f",
    "\u0005\u0532\u029a\u0002\u1c9e\u1c9d\u0003\u0002\u0002\u0002\u1c9f\u1ca2",
    "\u0003\u0002\u0002\u0002\u1ca0\u1c9e\u0003\u0002\u0002\u0002\u1ca0\u1ca1",
    "\u0003\u0002\u0002\u0002\u1ca1\u1ca4\u0003\u0002\u0002\u0002\u1ca2\u1ca0",
    "\u0003\u0002\u0002\u0002\u1ca3\u1ca5\u0005\u0534\u029b\u0002\u1ca4\u1ca3",
    "\u0003\u0002\u0002\u0002\u1ca4\u1ca5\u0003\u0002\u0002\u0002\u1ca5\u1ca6",
    "\u0003\u0002\u0002\u0002\u1ca6\u1ca8\u0007\u00d7\u0002\u0002\u1ca7\u1ca9",
    "\u0007\f\u0002\u0002\u1ca8\u1ca7\u0003\u0002\u0002\u0002\u1ca8\u1ca9",
    "\u0003\u0002\u0002\u0002\u1ca9\u0531\u0003\u0002\u0002\u0002\u1caa\u1cab",
    "\u0007\u00d6\u0002\u0002\u1cab\u1cac\u0005\u036e\u01b8\u0002\u1cac\u1cb0",
    "\u0007\u00d4\u0002\u0002\u1cad\u1caf\u0005\u0564\u02b3\u0002\u1cae\u1cad",
    "\u0003\u0002\u0002\u0002\u1caf\u1cb2\u0003\u0002\u0002\u0002\u1cb0\u1cae",
    "\u0003\u0002\u0002\u0002\u1cb0\u1cb1\u0003\u0002\u0002\u0002\u1cb1\u0533",
    "\u0003\u0002\u0002\u0002\u1cb2\u1cb0\u0003\u0002\u0002\u0002\u1cb3\u1cb7",
    "\u0007\u00d5\u0002\u0002\u1cb4\u1cb6\u0005\u0564\u02b3\u0002\u1cb5\u1cb4",
    "\u0003\u0002\u0002\u0002\u1cb6\u1cb9\u0003\u0002\u0002\u0002\u1cb7\u1cb5",
    "\u0003\u0002\u0002\u0002\u1cb7\u1cb8\u0003\u0002\u0002\u0002\u1cb8\u0535",
    "\u0003\u0002\u0002\u0002\u1cb9\u1cb7\u0003\u0002\u0002\u0002\u1cba\u1cbb",
    "\t-\u0002\u0002\u1cbb\u0537\u0003\u0002\u0002\u0002\u1cbc\u1cbd\t.\u0002",
    "\u0002\u1cbd\u0539\u0003\u0002\u0002\u0002\u1cbe\u1ccf\u0005\u050e\u0288",
    "\u0002\u1cbf\u1ccf\u0005\u0530\u0299\u0002\u1cc0\u1ccf\u0005\u0518\u028d",
    "\u0002\u1cc1\u1ccf\u0005\u0522\u0292\u0002\u1cc2\u1ccf\u0005\u04b8\u025d",
    "\u0002\u1cc3\u1ccf\u0005\u04ba\u025e\u0002\u1cc4\u1ccf\u0005\u04b6\u025c",
    "\u0002\u1cc5\u1ccf\u0005\u04b4\u025b\u0002\u1cc6\u1ccf\u0005\u04cc\u0267",
    "\u0002\u1cc7\u1ccf\u0005\u04d0\u0269\u0002\u1cc8\u1ccf\u0005\u04d2\u026a",
    "\u0002\u1cc9\u1ccf\u0005\u050c\u0287\u0002\u1cca\u1ccf\u0005\u0512\u028a",
    "\u0002\u1ccb\u1ccf\u0005\u0142\u00a2\u0002\u1ccc\u1ccf\u0005\u055a\u02ae",
    "\u0002\u1ccd\u1ccf\u0005\u0502\u0282\u0002\u1cce\u1cbe\u0003\u0002\u0002",
    "\u0002\u1cce\u1cbf\u0003\u0002\u0002\u0002\u1cce\u1cc0\u0003\u0002\u0002",
    "\u0002\u1cce\u1cc1\u0003\u0002\u0002\u0002\u1cce\u1cc2\u0003\u0002\u0002",
    "\u0002\u1cce\u1cc3\u0003\u0002\u0002\u0002\u1cce\u1cc4\u0003\u0002\u0002",
    "\u0002\u1cce\u1cc5\u0003\u0002\u0002\u0002\u1cce\u1cc6\u0003\u0002\u0002",
    "\u0002\u1cce\u1cc7\u0003\u0002\u0002\u0002\u1cce\u1cc8\u0003\u0002\u0002",
    "\u0002\u1cce\u1cc9\u0003\u0002\u0002\u0002\u1cce\u1cca\u0003\u0002\u0002",
    "\u0002\u1cce\u1ccb\u0003\u0002\u0002\u0002\u1cce\u1ccc\u0003\u0002\u0002",
    "\u0002\u1cce\u1ccd\u0003\u0002\u0002\u0002\u1ccf\u053b\u0003\u0002\u0002",
    "\u0002\u1cd0\u1cd2\u0005\u0540\u02a1\u0002\u1cd1\u1cd0\u0003\u0002\u0002",
    "\u0002\u1cd2\u1cd5\u0003\u0002\u0002\u0002\u1cd3\u1cd1\u0003\u0002\u0002",
    "\u0002\u1cd3\u1cd4\u0003\u0002\u0002\u0002\u1cd4\u1cd6\u0003\u0002\u0002",
    "\u0002\u1cd5\u1cd3\u0003\u0002\u0002\u0002\u1cd6\u1cd7\u0005\u0540\u02a1",
    "\u0002\u1cd7\u053d\u0003\u0002\u0002\u0002\u1cd8\u1cd9\u0005\u0540\u02a1",
    "\u0002\u1cd9\u053f\u0003\u0002\u0002\u0002\u1cda\u1cdc\u0005\u0542\u02a2",
    "\u0002\u1cdb\u1cdd\u0007\u01ef\u0002\u0002\u1cdc\u1cdb\u0003\u0002\u0002",
    "\u0002\u1cdc\u1cdd\u0003\u0002\u0002\u0002\u1cdd\u1cde\u0003\u0002\u0002",
    "\u0002\u1cde\u1cdf\u0007\u0002\u0002\u0003\u1cdf\u1cea\u0003\u0002\u0002",
    "\u0002\u1ce0\u1ce1\u0005\u0544\u02a3\u0002\u1ce1\u1ce2\u0007\u0002\u0002",
    "\u0003\u1ce2\u1cea\u0003\u0002\u0002\u0002\u1ce3\u1ce5\u0005\u0546\u02a4",
    "\u0002\u1ce4\u1ce6\u0007\u01ef\u0002\u0002\u1ce5\u1ce4\u0003\u0002\u0002",
    "\u0002\u1ce5\u1ce6\u0003\u0002\u0002\u0002\u1ce6\u1ce7\u0003\u0002\u0002",
    "\u0002\u1ce7\u1ce8\u0007\u0002\u0002\u0003\u1ce8\u1cea\u0003\u0002\u0002",
    "\u0002\u1ce9\u1cda\u0003\u0002\u0002\u0002\u1ce9\u1ce0\u0003\u0002\u0002",
    "\u0002\u1ce9\u1ce3\u0003\u0002\u0002\u0002\u1cea\u0541\u0003\u0002\u0002",
    "\u0002\u1ceb\u1cec\u0007\u019e\u0002\u0002\u1cec\u1ced\u0005\u0546\u02a4",
    "\u0002\u1ced\u0543\u0003\u0002\u0002\u0002\u1cee\u1cf5\u0007\u00be\u0002",
    "\u0002\u1cef\u1cf6\u0007\u00bf\u0002\u0002\u1cf0\u1cf6\u0007\u00c0\u0002",
    "\u0002\u1cf1\u1cf6\u0007\u00c2\u0002\u0002\u1cf2\u1cf6\u0007\u00c3\u0002",
    "\u0002\u1cf3\u1cf6\u0007\u00c4\u0002\u0002\u1cf4\u1cf6\u0007\u00e3\u0002",
    "\u0002\u1cf5\u1cef\u0003\u0002\u0002\u0002\u1cf5\u1cf0\u0003\u0002\u0002",
    "\u0002\u1cf5\u1cf1\u0003\u0002\u0002\u0002\u1cf5\u1cf2\u0003\u0002\u0002",
    "\u0002\u1cf5\u1cf3\u0003\u0002\u0002\u0002\u1cf5\u1cf4\u0003\u0002\u0002",
    "\u0002\u1cf5\u1cf6\u0003\u0002\u0002\u0002\u1cf6\u1cf7\u0003\u0002\u0002",
    "\u0002\u1cf7\u1cf8\u0005\u0546\u02a4\u0002\u1cf8\u0545\u0003\u0002\u0002",
    "\u0002\u1cf9\u1cfc\u0005\u03b4\u01db\u0002\u1cfa\u1cfc\u0005\u0558\u02ad",
    "\u0002\u1cfb\u1cf9\u0003\u0002\u0002\u0002\u1cfb\u1cfa\u0003\u0002\u0002",
    "\u0002\u1cfc\u0547\u0003\u0002\u0002\u0002\u1cfd\u1cfe\u0005\u0006\u0004",
    "\u0002\u1cfe\u1cff\u0007\u01ec\u0002\u0002\u1cff\u1d00\u0007\u021b\u0002",
    "\u0002\u1d00\u1d03\u0003\u0002\u0002\u0002\u1d01\u1d03\u0007\u021b\u0002",
    "\u0002\u1d02\u1cfd\u0003\u0002\u0002\u0002\u1d02\u1d01\u0003\u0002\u0002",
    "\u0002\u1d03\u0549\u0003\u0002\u0002\u0002\u1d04\u1d06\u0007\u0226\u0002",
    "\u0002\u1d05\u1d07\u0005\u0200\u0101\u0002\u1d06\u1d05\u0003\u0002\u0002",
    "\u0002\u1d06\u1d07\u0003\u0002\u0002\u0002\u1d07\u1d08\u0003\u0002\u0002",
    "\u0002\u1d08\u1d09\u0005\u0548\u02a5\u0002\u1d09\u1d0b\t/\u0002\u0002",
    "\u1d0a\u1d0c\u0007\u017b\u0002\u0002\u1d0b\u1d0a\u0003\u0002\u0002\u0002",
    "\u1d0b\u1d0c\u0003\u0002\u0002\u0002\u1d0c\u1d10\u0003\u0002\u0002\u0002",
    "\u1d0d\u1d0f\u0005\u0550\u02a9\u0002\u1d0e\u1d0d\u0003\u0002\u0002\u0002",
    "\u1d0f\u1d12\u0003\u0002\u0002\u0002\u1d10\u1d0e\u0003\u0002\u0002\u0002",
    "\u1d10\u1d11\u0003\u0002\u0002\u0002\u1d11\u1d13\u0003\u0002\u0002\u0002",
    "\u1d12\u1d10\u0003\u0002\u0002\u0002\u1d13\u1d15\u0007\u00d7\u0002\u0002",
    "\u1d14\u1d16\u0007\u021b\u0002\u0002\u1d15\u1d14\u0003\u0002\u0002\u0002",
    "\u1d15\u1d16\u0003\u0002\u0002\u0002\u1d16\u054b\u0003\u0002\u0002\u0002",
    "\u1d17\u1d18\u0007\u0226\u0002\u0002\u1d18\u1d1a\u0007\u0228\u0002\u0002",
    "\u1d19\u1d1b\u0005\u0200\u0101\u0002\u1d1a\u1d19\u0003\u0002\u0002\u0002",
    "\u1d1a\u1d1b\u0003\u0002\u0002\u0002\u1d1b\u1d1c\u0003\u0002\u0002\u0002",
    "\u1d1c\u1d1d\u0005\u0548\u02a5\u0002\u1d1d\u1d1f\t/\u0002\u0002\u1d1e",
    "\u1d20\u0007\u017b\u0002\u0002\u1d1f\u1d1e\u0003\u0002\u0002\u0002\u1d1f",
    "\u1d20\u0003\u0002\u0002\u0002\u1d20\u1d24\u0003\u0002\u0002\u0002\u1d21",
    "\u1d23\u0005\u0552\u02aa\u0002\u1d22\u1d21\u0003\u0002\u0002\u0002\u1d23",
    "\u1d26\u0003\u0002\u0002\u0002\u1d24\u1d22\u0003\u0002\u0002\u0002\u1d24",
    "\u1d25\u0003\u0002\u0002\u0002\u1d25\u1d2c\u0003\u0002\u0002\u0002\u1d26",
    "\u1d24\u0003\u0002\u0002\u0002\u1d27\u1d28\u0007\u0176\u0002\u0002\u1d28",
    "\u1d2a\u0005\u055c\u02af\u0002\u1d29\u1d2b\u0005\u0514\u028b\u0002\u1d2a",
    "\u1d29\u0003\u0002\u0002\u0002\u1d2a\u1d2b\u0003\u0002\u0002\u0002\u1d2b",
    "\u1d2d\u0003\u0002\u0002\u0002\u1d2c\u1d27\u0003\u0002\u0002\u0002\u1d2c",
    "\u1d2d\u0003\u0002\u0002\u0002\u1d2d\u1d2e\u0003\u0002\u0002\u0002\u1d2e",
    "\u1d30\u0007\u00d7\u0002\u0002\u1d2f\u1d31\u0007\u021b\u0002\u0002\u1d30",
    "\u1d2f\u0003\u0002\u0002\u0002\u1d30\u1d31\u0003\u0002\u0002\u0002\u1d31",
    "\u054d\u0003\u0002\u0002\u0002\u1d32\u1d34\u0007U\u0002\u0002\u1d33",
    "\u1d35\u00077\u0002\u0002\u1d34\u1d33\u0003\u0002\u0002\u0002\u1d34",
    "\u1d35\u0003\u0002\u0002\u0002\u1d35\u1d36\u0003\u0002\u0002\u0002\u1d36",
    "\u1d38\u0007\u0226\u0002\u0002\u1d37\u1d39\u0005\u01fe\u0100\u0002\u1d38",
    "\u1d37\u0003\u0002\u0002\u0002\u1d38\u1d39\u0003\u0002\u0002\u0002\u1d39",
    "\u1d3a\u0003\u0002\u0002\u0002\u1d3a\u1d3b\u0005\u0548\u02a5\u0002\u1d3b",
    "\u054f\u0003\u0002\u0002\u0002\u1d3c\u1d40\u0005\u0554\u02ab\u0002\u1d3d",
    "\u1d40\u0005\u0556\u02ac\u0002\u1d3e\u1d40\u0005\u04de\u0270\u0002\u1d3f",
    "\u1d3c\u0003\u0002\u0002\u0002\u1d3f\u1d3d\u0003\u0002\u0002\u0002\u1d3f",
    "\u1d3e\u0003\u0002\u0002\u0002\u1d40\u0551\u0003\u0002\u0002\u0002\u1d41",
    "\u1d43\u0005\u056a\u02b6\u0002\u1d42\u1d44\u0007\u01ef\u0002\u0002\u1d43",
    "\u1d42\u0003\u0002\u0002\u0002\u1d43\u1d44\u0003\u0002\u0002\u0002\u1d44",
    "\u1d4b\u0003\u0002\u0002\u0002\u1d45\u1d47\u0005\u056e\u02b8\u0002\u1d46",
    "\u1d48\u0007\u01ef\u0002\u0002\u1d47\u1d46\u0003\u0002\u0002\u0002\u1d47",
    "\u1d48\u0003\u0002\u0002\u0002\u1d48\u1d4b\u0003\u0002\u0002\u0002\u1d49",
    "\u1d4b\u0005\u04de\u0270\u0002\u1d4a\u1d41\u0003\u0002\u0002\u0002\u1d4a",
    "\u1d45\u0003\u0002\u0002\u0002\u1d4a\u1d49\u0003\u0002\u0002\u0002\u1d4b",
    "\u0553\u0003\u0002\u0002\u0002\u1d4c\u1d4d\u0007\u00ba\u0002\u0002\u1d4d",
    "\u1d4e\u0005\u0006\u0004\u0002\u1d4e\u1d4f\u0005\u04d8\u026d\u0002\u1d4f",
    "\u1d50\u0007\u0173\u0002\u0002\u1d50\u1d52\u0005\u04e6\u0274\u0002\u1d51",
    "\u1d53\u0007\u01ef\u0002\u0002\u1d52\u1d51\u0003\u0002\u0002\u0002\u1d52",
    "\u1d53\u0003\u0002\u0002\u0002\u1d53\u0555\u0003\u0002\u0002\u0002\u1d54",
    "\u1d55\u0007\u011e\u0002\u0002\u1d55\u1d56\u0005\u0006\u0004\u0002\u1d56",
    "\u1d58\u0005\u04d8\u026d\u0002\u1d57\u1d59\u0007\u01ef\u0002\u0002\u1d58",
    "\u1d57\u0003\u0002\u0002\u0002\u1d58\u1d59\u0003\u0002\u0002\u0002\u1d59",
    "\u0557\u0003\u0002\u0002\u0002\u1d5a\u1d5b\u0005\u055a\u02ae\u0002\u1d5b",
    "\u0559\u0003\u0002\u0002\u0002\u1d5c\u1d60\u0007\u017b\u0002\u0002\u1d5d",
    "\u1d5f\u0005\u04de\u0270\u0002\u1d5e\u1d5d\u0003\u0002\u0002\u0002\u1d5f",
    "\u1d62\u0003\u0002\u0002\u0002\u1d60\u1d5e\u0003\u0002\u0002\u0002\u1d60",
    "\u1d61\u0003\u0002\u0002\u0002\u1d61\u1d64\u0003\u0002\u0002\u0002\u1d62",
    "\u1d60\u0003\u0002\u0002\u0002\u1d63\u1d5c\u0003\u0002\u0002\u0002\u1d63",
    "\u1d64\u0003\u0002\u0002\u0002\u1d64\u1d65\u0003\u0002\u0002\u0002\u1d65",
    "\u1d66\u0007\u0176\u0002\u0002\u1d66\u1d68\u0005\u055c\u02af\u0002\u1d67",
    "\u1d69\u0005\u0514\u028b\u0002\u1d68\u1d67\u0003\u0002\u0002\u0002\u1d68",
    "\u1d69\u0003\u0002\u0002\u0002\u1d69\u1d6a\u0003\u0002\u0002\u0002\u1d6a",
    "\u1d6c\u0007\u00d7\u0002\u0002\u1d6b\u1d6d\u0007\u021b\u0002\u0002\u1d6c",
    "\u1d6b\u0003\u0002\u0002\u0002\u1d6c\u1d6d\u0003\u0002\u0002\u0002\u1d6d",
    "\u055b\u0003\u0002\u0002\u0002\u1d6e\u1d70\u0005\u0564\u02b3\u0002\u1d6f",
    "\u1d6e\u0003\u0002\u0002\u0002\u1d70\u1d71\u0003\u0002\u0002\u0002\u1d71",
    "\u1d6f\u0003\u0002\u0002\u0002\u1d71\u1d72\u0003\u0002\u0002\u0002\u1d72",
    "\u055d\u0003\u0002\u0002\u0002\u1d73\u1d79\u0005\u012c\u0097\u0002\u1d74",
    "\u1d79\u0005\u013e\u00a0\u0002\u1d75\u1d79\u0005\u0122\u0092\u0002\u1d76",
    "\u1d79\u0005\u03e6\u01f4\u0002\u1d77\u1d79\u0005\u053a\u029e\u0002\u1d78",
    "\u1d73\u0003\u0002\u0002\u0002\u1d78\u1d74\u0003\u0002\u0002\u0002\u1d78",
    "\u1d75\u0003\u0002\u0002\u0002\u1d78\u1d76\u0003\u0002\u0002\u0002\u1d78",
    "\u1d77\u0003\u0002\u0002\u0002\u1d79\u055f\u0003\u0002\u0002\u0002\u1d7a",
    "\u1d7b\u0005\u040e\u0208\u0002\u1d7b\u1d7c\u0005\u055e\u02b0\u0002\u1d7c",
    "\u1d7f\u0003\u0002\u0002\u0002\u1d7d\u1d7f\u0005\u055e\u02b0\u0002\u1d7e",
    "\u1d7a\u0003\u0002\u0002\u0002\u1d7e\u1d7d\u0003\u0002\u0002\u0002\u1d7f",
    "\u0561\u0003\u0002\u0002\u0002\u1d80\u1d81\u0007\u01fb\u0002\u0002\u1d81",
    "\u1d82\u0007\u021b\u0002\u0002\u1d82\u1d83\u0007\u01fe\u0002\u0002\u1d83",
    "\u0563\u0003\u0002\u0002\u0002\u1d84\u1d85\u0005\u0562\u02b2\u0002\u1d85",
    "\u1d87\u0005\u0560\u02b1\u0002\u1d86\u1d88\u0007\u01ef\u0002\u0002\u1d87",
    "\u1d86\u0003\u0002\u0002\u0002\u1d87\u1d88\u0003\u0002\u0002\u0002\u1d88",
    "\u1d8e\u0003\u0002\u0002\u0002\u1d89\u1d8b\u0005\u0560\u02b1\u0002\u1d8a",
    "\u1d8c\u0007\u01ef\u0002\u0002\u1d8b\u1d8a\u0003\u0002\u0002\u0002\u1d8b",
    "\u1d8c\u0003\u0002\u0002\u0002\u1d8c\u1d8e\u0003\u0002\u0002\u0002\u1d8d",
    "\u1d84\u0003\u0002\u0002\u0002\u1d8d\u1d89\u0003\u0002\u0002\u0002\u1d8e",
    "\u0565\u0003\u0002\u0002\u0002\u1d8f\u1d94\u0005\u056a\u02b6\u0002\u1d90",
    "\u1d94\u0005\u056e\u02b8\u0002\u1d91\u1d94\u0005\u054a\u02a6\u0002\u1d92",
    "\u1d94\u0005\u054c\u02a7\u0002\u1d93\u1d8f\u0003\u0002\u0002\u0002\u1d93",
    "\u1d90\u0003\u0002\u0002\u0002\u1d93\u1d91\u0003\u0002\u0002\u0002\u1d93",
    "\u1d92\u0003\u0002\u0002\u0002\u1d94\u0567\u0003\u0002\u0002\u0002\u1d95",
    "\u1d99\u0005\u056c\u02b7\u0002\u1d96\u1d99\u0005\u0570\u02b9\u0002\u1d97",
    "\u1d99\u0005\u054e\u02a8\u0002\u1d98\u1d95\u0003\u0002\u0002\u0002\u1d98",
    "\u1d96\u0003\u0002\u0002\u0002\u1d98\u1d97\u0003\u0002\u0002\u0002\u1d99",
    "\u0569\u0003\u0002\u0002\u0002\u1d9a\u1d9c\u0007\u00ba\u0002\u0002\u1d9b",
    "\u1d9d\u0005\u0200\u0101\u0002\u1d9c\u1d9b\u0003\u0002\u0002\u0002\u1d9c",
    "\u1d9d\u0003\u0002\u0002\u0002\u1d9d\u1d9e\u0003\u0002\u0002\u0002\u1d9e",
    "\u1d9f\u0005\u04ec\u0277\u0002\u1d9f\u1da0\u0005\u04d8\u026d\u0002\u1da0",
    "\u1da1\u0007\u0173\u0002\u0002\u1da1\u1da2\u0005\u04e6\u0274\u0002\u1da2",
    "\u1da4\t/\u0002\u0002\u1da3\u1da5\u0007\u017b\u0002\u0002\u1da4\u1da3",
    "\u0003\u0002\u0002\u0002\u1da4\u1da5\u0003\u0002\u0002\u0002\u1da5\u1da9",
    "\u0003\u0002\u0002\u0002\u1da6\u1da8\u0005\u04de\u0270\u0002\u1da7\u1da6",
    "\u0003\u0002\u0002\u0002\u1da8\u1dab\u0003\u0002\u0002\u0002\u1da9\u1da7",
    "\u0003\u0002\u0002\u0002\u1da9\u1daa\u0003\u0002\u0002\u0002\u1daa\u1dac",
    "\u0003\u0002\u0002\u0002\u1dab\u1da9\u0003\u0002\u0002\u0002\u1dac\u1dad",
    "\u0007\u0176\u0002\u0002\u1dad\u1daf\u0005\u055c\u02af\u0002\u1dae\u1db0",
    "\u0005\u0514\u028b\u0002\u1daf\u1dae\u0003\u0002\u0002\u0002\u1daf\u1db0",
    "\u0003\u0002\u0002\u0002\u1db0\u1db1\u0003\u0002\u0002\u0002\u1db1\u1db3",
    "\u0007\u00d7\u0002\u0002\u1db2\u1db4\u0007\u021b\u0002\u0002\u1db3\u1db2",
    "\u0003\u0002\u0002\u0002\u1db3\u1db4\u0003\u0002\u0002\u0002\u1db4\u056b",
    "\u0003\u0002\u0002\u0002\u1db5\u1db7\u0007U\u0002\u0002\u1db6\u1db8",
    "\u00077\u0002\u0002\u1db7\u1db6\u0003\u0002\u0002\u0002\u1db7\u1db8",
    "\u0003\u0002\u0002\u0002\u1db8\u1db9\u0003\u0002\u0002\u0002\u1db9\u1dbb",
    "\u0007\u00ba\u0002\u0002\u1dba\u1dbc\u0005\u01fe\u0100\u0002\u1dbb\u1dba",
    "\u0003\u0002\u0002\u0002\u1dbb\u1dbc\u0003\u0002\u0002\u0002\u1dbc\u1dbd",
    "\u0003\u0002\u0002\u0002\u1dbd\u1dbf\u0005\u04ec\u0277\u0002\u1dbe\u1dc0",
    "\u0005\u04d8\u026d\u0002\u1dbf\u1dbe\u0003\u0002\u0002\u0002\u1dbf\u1dc0",
    "\u0003\u0002\u0002\u0002\u1dc0\u056d\u0003\u0002\u0002\u0002\u1dc1\u1dc3",
    "\u0007\u011e\u0002\u0002\u1dc2\u1dc4\u0005\u0200\u0101\u0002\u1dc3\u1dc2",
    "\u0003\u0002\u0002\u0002\u1dc3\u1dc4\u0003\u0002\u0002\u0002\u1dc4\u1dc5",
    "\u0003\u0002\u0002\u0002\u1dc5\u1dc6\u0005\u04ec\u0277\u0002\u1dc6\u1dc7",
    "\u0005\u04d8\u026d\u0002\u1dc7\u1dc9\t/\u0002\u0002\u1dc8\u1dca\u0007",
    "\u017b\u0002\u0002\u1dc9\u1dc8\u0003\u0002\u0002\u0002\u1dc9\u1dca\u0003",
    "\u0002\u0002\u0002\u1dca\u1dce\u0003\u0002\u0002\u0002\u1dcb\u1dcd\u0005",
    "\u04de\u0270\u0002\u1dcc\u1dcb\u0003\u0002\u0002\u0002\u1dcd\u1dd0\u0003",
    "\u0002\u0002\u0002\u1dce\u1dcc\u0003\u0002\u0002\u0002\u1dce\u1dcf\u0003",
    "\u0002\u0002\u0002\u1dcf\u1dd1\u0003\u0002\u0002\u0002\u1dd0\u1dce\u0003",
    "\u0002\u0002\u0002\u1dd1\u1dd2\u0007\u0176\u0002\u0002\u1dd2\u1dd4\u0005",
    "\u055c\u02af\u0002\u1dd3\u1dd5\u0005\u0514\u028b\u0002\u1dd4\u1dd3\u0003",
    "\u0002\u0002\u0002\u1dd4\u1dd5\u0003\u0002\u0002\u0002\u1dd5\u1dd6\u0003",
    "\u0002\u0002\u0002\u1dd6\u1dd8\u0007\u00d7\u0002\u0002\u1dd7\u1dd9\u0007",
    "\u021b\u0002\u0002\u1dd8\u1dd7\u0003\u0002\u0002\u0002\u1dd8\u1dd9\u0003",
    "\u0002\u0002\u0002\u1dd9\u056f\u0003\u0002\u0002\u0002\u1dda\u1ddc\u0007",
    "U\u0002\u0002\u1ddb\u1ddd\u00077\u0002\u0002\u1ddc\u1ddb\u0003\u0002",
    "\u0002\u0002\u1ddc\u1ddd\u0003\u0002\u0002\u0002\u1ddd\u1dde\u0003\u0002",
    "\u0002\u0002\u1dde\u1de0\u0007\u011e\u0002\u0002\u1ddf\u1de1\u0005\u01fe",
    "\u0100\u0002\u1de0\u1ddf\u0003\u0002\u0002\u0002\u1de0\u1de1\u0003\u0002",
    "\u0002\u0002\u1de1\u1de2\u0003\u0002\u0002\u0002\u1de2\u1de4\u0005\u04ec",
    "\u0277\u0002\u1de3\u1de5\u0005\u04d8\u026d\u0002\u1de4\u1de3\u0003\u0002",
    "\u0002\u0002\u1de4\u1de5\u0003\u0002\u0002\u0002\u1de5\u0571\u0003\u0002",
    "\u0002\u0002\u1de6\u1de9\u0007\u00cb\u0002\u0002\u1de7\u1de8\u0007\u021a",
    "\u0002\u0002\u1de8\u1dea\u0007\u01ee\u0002\u0002\u1de9\u1de7\u0003\u0002",
    "\u0002\u0002\u1de9\u1dea\u0003\u0002\u0002\u0002\u1dea\u1deb\u0003\u0002",
    "\u0002\u0002\u1deb\u1dfc\u0007\u021a\u0002\u0002\u1dec\u1ded\u0007\u010a",
    "\u0002\u0002\u1ded\u1dee\u0007Q\u0002\u0002\u1dee\u1def\u0007\u021a",
    "\u0002\u0002\u1def\u1df0\u0007\u008c\u0002\u0002\u1df0\u1dfc\u0007\u01b1",
    "\u0002\u0002\u1df1\u1df2\u0007\u01e1\u0002\u0002\u1df2\u1df3\u0007\u021a",
    "\u0002\u0002\u1df3\u1df5\u0007\u008c\u0002\u0002\u1df4\u1df1\u0003\u0002",
    "\u0002\u0002\u1df4\u1df5\u0003\u0002\u0002\u0002\u1df5\u1df6\u0003\u0002",
    "\u0002\u0002\u1df6\u1df7\u0007\u010a\u0002\u0002\u1df7\u1df8\u0007\u0083",
    "\u0002\u0002\u1df8\u1df9\u0007\u021a\u0002\u0002\u1df9\u1dfa\u0007\u008c",
    "\u0002\u0002\u1dfa\u1dfc\u0007\u01b1\u0002\u0002\u1dfb\u1de6\u0003\u0002",
    "\u0002\u0002\u1dfb\u1dec\u0003\u0002\u0002\u0002\u1dfb\u1df4\u0003\u0002",
    "\u0002\u0002\u1dfc\u0573\u0003\u0002\u0002\u0002\u1dfd\u1dfe\u0007L",
    "\u0002\u0002\u1dfe\u1e00\u0007\u00b9\u0002\u0002\u1dff\u1e01\u0007M",
    "\u0002\u0002\u1e00\u1dff\u0003\u0002\u0002\u0002\u1e00\u1e01\u0003\u0002",
    "\u0002\u0002\u1e01\u1e02\u0003\u0002\u0002\u0002\u1e02\u1e04\u0007.",
    "\u0002\u0002\u1e03\u1e05\u0005\u0200\u0101\u0002\u1e04\u1e03\u0003\u0002",
    "\u0002\u0002\u1e04\u1e05\u0003\u0002\u0002\u0002\u1e05\u1e06\u0003\u0002",
    "\u0002\u0002\u1e06\u1e07\u0005\u0010\t\u0002\u1e07\u1e08\u0005\u0166",
    "\u00b4\u0002\u1e08\u0575\u0003\u0002\u0002\u0002\u1e09\u1e0b\u0007L",
    "\u0002\u0002\u1e0a\u1e0c\u0007M\u0002\u0002\u1e0b\u1e0a\u0003\u0002",
    "\u0002\u0002\u1e0b\u1e0c\u0003\u0002\u0002\u0002\u1e0c\u1e0d\u0003\u0002",
    "\u0002\u0002\u1e0d\u1e0f\u0007.\u0002\u0002\u1e0e\u1e10\u0005\u0200",
    "\u0101\u0002\u1e0f\u1e0e\u0003\u0002\u0002\u0002\u1e0f\u1e10\u0003\u0002",
    "\u0002\u0002\u1e10\u1e11\u0003\u0002\u0002\u0002\u1e11\u1e12\u0005\u0010",
    "\t\u0002\u1e12\u1e13\u0005\u0166\u00b4\u0002\u1e13\u0577\u0003\u0002",
    "\u0002\u0002\u1e14\u1e15\u0007\u00c6\u0002\u0002\u1e15\u1e16\u0007\n",
    "\u0002\u0002\u1e16\u1e17\u0007G\u0002\u0002\u1e17\u0579\u0003\u0002",
    "\u0002\u0002\u1e18\u1e19\u0007\b\u0002\u0002\u1e19\u1e1c\u0007J\u0002",
    "\u0002\u1e1a\u1e1c\u0007\u01ad\u0002\u0002\u1e1b\u1e18\u0003\u0002\u0002",
    "\u0002\u1e1b\u1e1a\u0003\u0002\u0002\u0002\u1e1c\u057b\u0003\u0002\u0002",
    "\u0002\u1e1d\u1e1e\u0007\t\u0002\u0002\u1e1e\u1e20\u0005\u0010\t\u0002",
    "\u1e1f\u1e21\u0005\u01f2\u00fa\u0002\u1e20\u1e1f\u0003\u0002\u0002\u0002",
    "\u1e20\u1e21\u0003\u0002\u0002\u0002\u1e21\u1e23\u0003\u0002\u0002\u0002",
    "\u1e22\u1e24\u0005\u01d2\u00ea\u0002\u1e23\u1e22\u0003\u0002\u0002\u0002",
    "\u1e23\u1e24\u0003\u0002\u0002\u0002\u1e24\u1e5a\u0003\u0002\u0002\u0002",
    "\u1e25\u1e26\u0007\u01f0\u0002\u0002\u1e26\u1e27\u0005\u0100\u0081\u0002",
    "\u1e27\u1e28\u0007\u01f1\u0002\u0002\u1e28\u1e2a\u0003\u0002\u0002\u0002",
    "\u1e29\u1e25\u0003\u0002\u0002\u0002\u1e29\u1e2a\u0003\u0002\u0002\u0002",
    "\u1e2a\u1e2c\u0003\u0002\u0002\u0002\u1e2b\u1e2d\u0005\u01b4\u00db\u0002",
    "\u1e2c\u1e2b\u0003\u0002\u0002\u0002\u1e2c\u1e2d\u0003\u0002\u0002\u0002",
    "\u1e2d\u1e2f\u0003\u0002\u0002\u0002\u1e2e\u1e30\u0005\u01b6\u00dc\u0002",
    "\u1e2f\u1e2e\u0003\u0002\u0002\u0002\u1e2f\u1e30\u0003\u0002\u0002\u0002",
    "\u1e30\u1e32\u0003\u0002\u0002\u0002\u1e31\u1e33\u0005\u01b8\u00dd\u0002",
    "\u1e32\u1e31\u0003\u0002\u0002\u0002\u1e32\u1e33\u0003\u0002\u0002\u0002",
    "\u1e33\u1e35\u0003\u0002\u0002\u0002\u1e34\u1e36\u0005\u01c2\u00e2\u0002",
    "\u1e35\u1e34\u0003\u0002\u0002\u0002\u1e35\u1e36\u0003\u0002\u0002\u0002",
    "\u1e36\u1e38\u0003\u0002\u0002\u0002\u1e37\u1e39\u0005\u01c4\u00e3\u0002",
    "\u1e38\u1e37\u0003\u0002\u0002\u0002\u1e38\u1e39\u0003\u0002\u0002\u0002",
    "\u1e39\u1e3b\u0003\u0002\u0002\u0002\u1e3a\u1e3c\u0005\u01b2\u00da\u0002",
    "\u1e3b\u1e3a\u0003\u0002\u0002\u0002\u1e3b\u1e3c\u0003\u0002\u0002\u0002",
    "\u1e3c\u1e3e\u0003\u0002\u0002\u0002\u1e3d\u1e3f\u0005\u01ea\u00f6\u0002",
    "\u1e3e\u1e3d\u0003\u0002\u0002\u0002\u1e3e\u1e3f\u0003\u0002\u0002\u0002",
    "\u1e3f\u1e41\u0003\u0002\u0002\u0002\u1e40\u1e42\u0005\u01e4\u00f3\u0002",
    "\u1e41\u1e40\u0003\u0002\u0002\u0002\u1e41\u1e42\u0003\u0002\u0002\u0002",
    "\u1e42\u1e44\u0003\u0002\u0002\u0002\u1e43\u1e45\u0005\u01e6\u00f4\u0002",
    "\u1e44\u1e43\u0003\u0002\u0002\u0002\u1e44\u1e45\u0003\u0002\u0002\u0002",
    "\u1e45\u1e47\u0003\u0002\u0002\u0002\u1e46\u1e48\u0005\u01e8\u00f5\u0002",
    "\u1e47\u1e46\u0003\u0002\u0002\u0002\u1e47\u1e48\u0003\u0002\u0002\u0002",
    "\u1e48\u1e4a\u0003\u0002\u0002\u0002\u1e49\u1e4b\u0005\u01f2\u00fa\u0002",
    "\u1e4a\u1e49\u0003\u0002\u0002\u0002\u1e4a\u1e4b\u0003\u0002\u0002\u0002",
    "\u1e4b\u1e4d\u0003\u0002\u0002\u0002\u1e4c\u1e4e\u0005\u01d2\u00ea\u0002",
    "\u1e4d\u1e4c\u0003\u0002\u0002\u0002\u1e4d\u1e4e\u0003\u0002\u0002\u0002",
    "\u1e4e\u1e50\u0003\u0002\u0002\u0002\u1e4f\u1e51\u0005\u01d4\u00eb\u0002",
    "\u1e50\u1e4f\u0003\u0002\u0002\u0002\u1e50\u1e51\u0003\u0002\u0002\u0002",
    "\u1e51\u1e54\u0003\u0002\u0002\u0002\u1e52\u1e53\u0007\u0018\u0002\u0002",
    "\u1e53\u1e55\u0005\u01aa\u00d6\u0002\u1e54\u1e52\u0003\u0002\u0002\u0002",
    "\u1e54\u1e55\u0003\u0002\u0002\u0002\u1e55\u1e57\u0003\u0002\u0002\u0002",
    "\u1e56\u1e58\u0005\u0168\u00b5\u0002\u1e57\u1e56\u0003\u0002\u0002\u0002",
    "\u1e57\u1e58\u0003\u0002\u0002\u0002\u1e58\u1e5a\u0003\u0002\u0002\u0002",
    "\u1e59\u1e1d\u0003\u0002\u0002\u0002\u1e59\u1e29\u0003\u0002\u0002\u0002",
    "\u1e5a\u057d\u0003\u0002\u0002\u0002\u1e5b\u1e67\u0007r\u0002\u0002",
    "\u1e5c\u1e60\u0007q\u0002\u0002\u1e5d\u1e5e\u0007\u01f0\u0002\u0002",
    "\u1e5e\u1e5f\u0007\u021a\u0002\u0002\u1e5f\u1e61\u0007\u01f1\u0002\u0002",
    "\u1e60\u1e5d\u0003\u0002\u0002\u0002\u1e60\u1e61\u0003\u0002\u0002\u0002",
    "\u1e61\u1e67\u0003\u0002\u0002\u0002\u1e62\u1e63\u0007o\u0002\u0002",
    "\u1e63\u1e64\u0007\u01f0\u0002\u0002\u1e64\u1e65\u0007\u021a\u0002\u0002",
    "\u1e65\u1e67\u0007\u01f1\u0002\u0002\u1e66\u1e5b\u0003\u0002\u0002\u0002",
    "\u1e66\u1e5c\u0003\u0002\u0002\u0002\u1e66\u1e62\u0003\u0002\u0002\u0002",
    "\u1e67\u057f\u0003\u0002\u0002\u0002\u1e68\u1e6d\u0005\u0582\u02c2\u0002",
    "\u1e69\u1e6d\u0005\u0584\u02c3\u0002\u1e6a\u1e6d\u0005\u0586\u02c4\u0002",
    "\u1e6b\u1e6d\u0005\u058e\u02c8\u0002\u1e6c\u1e68\u0003\u0002\u0002\u0002",
    "\u1e6c\u1e69\u0003\u0002\u0002\u0002\u1e6c\u1e6a\u0003\u0002\u0002\u0002",
    "\u1e6c\u1e6b\u0003\u0002\u0002\u0002\u1e6d\u0581\u0003\u0002\u0002\u0002",
    "\u1e6e\u1e6f\u0007f\u0002\u0002\u1e6f\u1e70\u0007\u0212\u0002\u0002",
    "\u1e70\u0583\u0003\u0002\u0002\u0002\u1e71\u1e72\u0007h\u0002\u0002",
    "\u1e72\u1e73\u0007\u0212\u0002\u0002\u1e73\u0585\u0003\u0002\u0002\u0002",
    "\u1e74\u1e77\u0007\u0189\u0002\u0002\u1e75\u1e76\u0007\u01f0\u0002\u0002",
    "\u1e76\u1e78\u0007\u01f1\u0002\u0002\u1e77\u1e75\u0003\u0002\u0002\u0002",
    "\u1e77\u1e78\u0003\u0002\u0002\u0002\u1e78\u1e84\u0003\u0002\u0002\u0002",
    "\u1e79\u1e7c\u0007\u018a\u0002\u0002\u1e7a\u1e7b\u0007\u01f0\u0002\u0002",
    "\u1e7b\u1e7d\u0007\u01f1\u0002\u0002\u1e7c\u1e7a\u0003\u0002\u0002\u0002",
    "\u1e7c\u1e7d\u0003\u0002\u0002\u0002\u1e7d\u1e84\u0003\u0002\u0002\u0002",
    "\u1e7e\u1e81\u0007\u018b\u0002\u0002\u1e7f\u1e80\u0007\u01f0\u0002\u0002",
    "\u1e80\u1e82\u0007\u01f1\u0002\u0002\u1e81\u1e7f\u0003\u0002\u0002\u0002",
    "\u1e81\u1e82\u0003\u0002\u0002\u0002\u1e82\u1e84\u0003\u0002\u0002\u0002",
    "\u1e83\u1e74\u0003\u0002\u0002\u0002\u1e83\u1e79\u0003\u0002\u0002\u0002",
    "\u1e83\u1e7e\u0003\u0002\u0002\u0002\u1e84\u0587\u0003\u0002\u0002\u0002",
    "\u1e85\u1e86\t \u0002\u0002\u1e86\u0589\u0003\u0002\u0002\u0002\u1e87",
    "\u1e88\t0\u0002\u0002\u1e88\u058b\u0003\u0002\u0002\u0002\u1e89\u1e8a",
    "\t1\u0002\u0002\u1e8a\u058d\u0003\u0002\u0002\u0002\u1e8b\u1e8c\u0005",
    "\u058c\u02c7\u0002\u1e8c\u1e8d\u0005\u0590\u02c9\u0002\u1e8d\u1e97\u0003",
    "\u0002\u0002\u0002\u1e8e\u1e8f\u0007\u0186\u0002\u0002\u1e8f\u1e90\u0005",
    "\u058c\u02c7\u0002\u1e90\u1e94\u0005\u0590\u02c9\u0002\u1e91\u1e92\u0007",
    "\u01f0\u0002\u0002\u1e92\u1e93\u0007\u021a\u0002\u0002\u1e93\u1e95\u0007",
    "\u01f1\u0002\u0002\u1e94\u1e91\u0003\u0002\u0002\u0002\u1e94\u1e95\u0003",
    "\u0002\u0002\u0002\u1e95\u1e97\u0003\u0002\u0002\u0002\u1e96\u1e8b\u0003",
    "\u0002\u0002\u0002\u1e96\u1e8e\u0003\u0002\u0002\u0002\u1e97\u058f\u0003",
    "\u0002\u0002\u0002\u1e98\u1e99\u0007\u0180\u0002\u0002\u1e99\u1e9a\u0007",
    "Z\u0002\u0002\u1e9a\u1ea5\u0007\u0181\u0002\u0002\u1e9b\u1e9c\u0007",
    "\u0182\u0002\u0002\u1e9c\u1e9d\u0007Z\u0002\u0002\u1e9d\u1ea5\u0007",
    "\u0185\u0002\u0002\u1e9e\u1ea5\t2\u0002\u0002\u1e9f\u1ea5\t3\u0002\u0002",
    "\u1ea0\u1ea5\t4\u0002\u0002\u1ea1\u1ea5\t5\u0002\u0002\u1ea2\u1ea5\t",
    "6\u0002\u0002\u1ea3\u1ea5\t7\u0002\u0002\u1ea4\u1e98\u0003\u0002\u0002",
    "\u0002\u1ea4\u1e9b\u0003\u0002\u0002\u0002\u1ea4\u1e9e\u0003\u0002\u0002",
    "\u0002\u1ea4\u1e9f\u0003\u0002\u0002\u0002\u1ea4\u1ea0\u0003\u0002\u0002",
    "\u0002\u1ea4\u1ea1\u0003\u0002\u0002\u0002\u1ea4\u1ea2\u0003\u0002\u0002",
    "\u0002\u1ea4\u1ea3\u0003\u0002\u0002\u0002\u1ea5\u0591\u0003\u0002\u0002",
    "\u0002\u1ea6\u1ea7\u0005\u0594\u02cb\u0002\u1ea7\u0593\u0003\u0002\u0002",
    "\u0002\u1ea8\u1eab\u0005\u0598\u02cd\u0002\u1ea9\u1eab\u0005\u0596\u02cc",
    "\u0002\u1eaa\u1ea8\u0003\u0002\u0002\u0002\u1eaa\u1ea9\u0003\u0002\u0002",
    "\u0002\u1eab\u0595\u0003\u0002\u0002\u0002\u1eac\u1eaf\u0005\u04ea\u0276",
    "\u0002\u1ead\u1eae\u0007\u0203\u0002\u0002\u1eae\u1eb0\t8\u0002\u0002",
    "\u1eaf\u1ead\u0003\u0002\u0002\u0002\u1eaf\u1eb0\u0003\u0002\u0002\u0002",
    "\u1eb0\u0597\u0003\u0002\u0002\u0002\u1eb1\u1eb2\u0005\u059a\u02ce\u0002",
    "\u1eb2\u0599\u0003\u0002\u0002\u0002\u1eb3\u1eb4\u0005\u04a4\u0253\u0002",
    "\u1eb4\u059b\u0003\u0002\u0002\u0002\u1eb5\u1eb6\u0007\u012e\u0002\u0002",
    "\u1eb6\u1eb7\u0007\u021b\u0002\u0002\u1eb7\u1ebd\u0007I\u0002\u0002",
    "\u1eb8\u1ebe\u0005\u05a0\u02d1\u0002\u1eb9\u1ebe\u0005\u05a4\u02d3\u0002",
    "\u1eba\u1ebe\u0005\u059e\u02d0\u0002\u1ebb\u1ebe\u0005\u05a8\u02d5\u0002",
    "\u1ebc\u1ebe\u0005\u0594\u02cb\u0002\u1ebd\u1eb8\u0003\u0002\u0002\u0002",
    "\u1ebd\u1eb9\u0003\u0002\u0002\u0002\u1ebd\u1eba\u0003\u0002\u0002\u0002",
    "\u1ebd\u1ebb\u0003\u0002\u0002\u0002\u1ebd\u1ebc\u0003\u0002\u0002\u0002",
    "\u1ebe\u059d\u0003\u0002\u0002\u0002\u1ebf\u1ec0\u0007\u0239\u0002\u0002",
    "\u1ec0\u1ec1\u0007\u01f0\u0002\u0002\u1ec1\u1ec6\u0005\u04e0\u0271\u0002",
    "\u1ec2\u1ec3\u0007\u01ee\u0002\u0002\u1ec3\u1ec5\u0005\u04e0\u0271\u0002",
    "\u1ec4\u1ec2\u0003\u0002\u0002\u0002\u1ec5\u1ec8\u0003\u0002\u0002\u0002",
    "\u1ec6\u1ec4\u0003\u0002\u0002\u0002\u1ec6\u1ec7\u0003\u0002\u0002\u0002",
    "\u1ec7\u1ec9\u0003\u0002\u0002\u0002\u1ec8\u1ec6\u0003\u0002\u0002\u0002",
    "\u1ec9\u1eca\u0007\u01f1\u0002\u0002\u1eca\u059f\u0003\u0002\u0002\u0002",
    "\u1ecb\u1ecc\u0007.\u0002\u0002\u1ecc\u1ecd\u0007\u00b2\u0002\u0002",
    "\u1ecd\u1ed0\u0005\u05a6\u02d4\u0002\u1ece\u1ecf\u0007\b\u0002\u0002",
    "\u1ecf\u1ed1\u0007J\u0002\u0002\u1ed0\u1ece\u0003\u0002\u0002\u0002",
    "\u1ed0\u1ed1\u0003\u0002\u0002\u0002\u1ed1\u1ed5\u0003\u0002\u0002\u0002",
    "\u1ed2\u1ed3\u00073\u0002\u0002\u1ed3\u1ed4\u0007\u0013\u0002\u0002",
    "\u1ed4\u1ed6\u0005\u05a2\u02d2\u0002\u1ed5\u1ed2\u0003\u0002\u0002\u0002",
    "\u1ed5\u1ed6\u0003\u0002\u0002\u0002\u1ed6\u05a1\u0003\u0002\u0002\u0002",
    "\u1ed7\u1ed8\t9\u0002\u0002\u1ed8\u05a3\u0003\u0002\u0002\u0002\u1ed9",
    "\u1edd\u0007\u0225\u0002\u0002\u1eda\u1edb\u0007\u019a\u0002\u0002\u1edb",
    "\u1edd\u0007s\u0002\u0002\u1edc\u1ed9\u0003\u0002\u0002\u0002\u1edc",
    "\u1eda\u0003\u0002\u0002\u0002\u1edd\u1ede\u0003\u0002\u0002\u0002\u1ede",
    "\u1edf\u0007\u01f0\u0002\u0002\u1edf\u1ee0\u0007\u021a\u0002\u0002\u1ee0",
    "\u1ee1\u0007\u01f1\u0002\u0002\u1ee1\u1ee2\u0007\u00b2\u0002\u0002\u1ee2",
    "\u1ee5\u0005\u05a6\u02d4\u0002\u1ee3\u1ee4\u0007\b\u0002\u0002\u1ee4",
    "\u1ee6\u0007J\u0002\u0002\u1ee5\u1ee3\u0003\u0002\u0002\u0002\u1ee5",
    "\u1ee6\u0003\u0002\u0002\u0002\u1ee6\u05a5\u0003\u0002\u0002\u0002\u1ee7",
    "\u1ee8\u0005\u0594\u02cb\u0002\u1ee8\u05a7\u0003\u0002\u0002\u0002\u1ee9",
    "\u1eea\u0007\u0233\u0002\u0002\u1eea\u1eed\u0007\u012b\u0002\u0002\u1eeb",
    "\u1eec\u0007\u0173\u0002\u0002\u1eec\u1eee\u0005\u0596\u02cc\u0002\u1eed",
    "\u1eeb\u0003\u0002\u0002\u0002\u1eed\u1eee\u0003\u0002\u0002\u0002\u1eee",
    "\u05a9\u0003\u0002\u0002\u0002\u039e\u05af\u05b4\u05b8\u05c7\u05cc\u05ce",
    "\u05db\u05e4\u05eb\u05f0\u05fb\u0602\u060a\u0612\u0618\u061f\u0624\u062c",
    "\u062f\u0634\u0637\u063a\u0645\u064c\u0656\u0660\u0668\u066f\u0677\u067a",
    "\u067e\u0684\u068b\u0690\u0697\u06a5\u06a8\u06ac\u06b3\u06be\u06c6\u06e8",
    "\u06ee\u0701\u071e\u0725\u0736\u073a\u074f\u0772\u0788\u078b\u078e\u0791",
    "\u0794\u07a5\u07aa\u07b1\u07ba\u07bc\u07c1\u07c7\u07cb\u07ce\u07d1\u07d9",
    "\u07e1\u07e3\u07e9\u07f0\u07f5\u07fa\u07ff\u0804\u0806\u080a\u080e\u0815",
    "\u081d\u0825\u082e\u0835\u0839\u083c\u0847\u084b\u0856\u085a\u0862\u0867",
    "\u0879\u0884\u0894\u08aa\u08bf\u08c4\u08c7\u08dc\u08df\u08eb\u08f2\u0902",
    "\u090d\u0914\u091f\u0927\u093a\u094b\u0957\u095f\u096b\u0970\u0974\u0978",
    "\u0981\u0985\u098a\u099f\u09a9\u09ad\u09b2\u09b6\u09be\u09c7\u09cd\u09d3",
    "\u09e0\u09e3\u09e6\u09ef\u09f2\u0a00\u0a04\u0a12\u0a16\u0a2f\u0a33\u0a35",
    "\u0a3c\u0a48\u0a4f\u0a58\u0a5c\u0a5f\u0a63\u0a66\u0a69\u0a6c\u0a72\u0a79",
    "\u0a7d\u0a84\u0a8d\u0a8f\u0ab4\u0ab9\u0abd\u0ac0\u0ac5\u0ad1\u0ad5\u0ad9",
    "\u0adc\u0ae8\u0aef\u0af4\u0b07\u0b0a\u0b0d\u0b13\u0b16\u0b1a\u0b20\u0b23",
    "\u0b29\u0b2c\u0b2f\u0b32\u0b35\u0b38\u0b3b\u0b3e\u0b41\u0b45\u0b48\u0b4a",
    "\u0b4e\u0b51\u0b55\u0b5b\u0b5e\u0b64\u0b67\u0b6a\u0b6d\u0b70\u0b73\u0b76",
    "\u0b79\u0b7c\u0b80\u0b83\u0b85\u0b8e\u0b95\u0b9d\u0ba4\u0ba9\u0bb0\u0bb4",
    "\u0bb9\u0bc2\u0bc6\u0bce\u0bd2\u0bd9\u0bdd\u0be3\u0beb\u0bfd\u0c00\u0c03",
    "\u0c08\u0c13\u0c16\u0c1d\u0c21\u0c25\u0c2a\u0c2e\u0c33\u0c37\u0c3c\u0c43",
    "\u0c4a\u0c51\u0c55\u0c59\u0c5d\u0c62\u0c69\u0c79\u0c7c\u0c7f\u0c83\u0c8a",
    "\u0c98\u0c9e\u0ca1\u0ca4\u0ca7\u0caa\u0cae\u0cba\u0cc3\u0cc8\u0cd7\u0cec",
    "\u0cfc\u0d00\u0d07\u0d13\u0d1a\u0d24\u0d27\u0d2f\u0d3a\u0d42\u0d45\u0d4e",
    "\u0d69\u0d6c\u0d7d\u0d96\u0db4\u0dbc\u0dc1\u0ddf\u0def\u0df5\u0e22\u0e27",
    "\u0e43\u0e49\u0e50\u0e57\u0e5d\u0e64\u0e6a\u0e6f\u0e74\u0e79\u0e7f\u0e84",
    "\u0e89\u0e8e\u0e93\u0e98\u0e9d\u0ea2\u0ea7\u0eb2\u0eb7\u0ebc\u0ec1\u0ec6",
    "\u0ecb\u0ed0\u0ed7\u0ed9\u0edd\u0ee2\u0ee7\u0eec\u0ef5\u0efa\u0efc\u0f03",
    "\u0f07\u0f0a\u0f10\u0f13\u0f1a\u0f25\u0f27\u0f2b\u0f30\u0f36\u0f39\u0f3e",
    "\u0f46\u0f4d\u0f54\u0f5c\u0f6d\u0f70\u0f73\u0f76\u0f79\u0f7c\u0f7f\u0f82",
    "\u0f87\u0f91\u0f95\u0f9b\u0f9f\u0fa8\u0fbb\u0fbd\u0fc3\u0fd0\u0fe1\u0fe6",
    "\u0fea\u0fee\u0ff6\u0ffa\u0fff\u1008\u100c\u101f\u102a\u102e\u1034\u1038",
    "\u104c\u1050\u1057\u105d\u1061\u1064\u106b\u108c\u1095\u10a9\u10ac\u10b8",
    "\u10bc\u10c2\u10c9\u10cc\u10d2\u10dd\u10e5\u10f7\u10fe\u1100\u1106\u110a",
    "\u1110\u1114\u111c\u1123\u112c\u1147\u1150\u1154\u115d\u1161\u1165\u1169",
    "\u116d\u1171\u1178\u117f\u1183\u118b\u118f\u1196\u1199\u119c\u119f\u11ad",
    "\u11b4\u11b7\u11ba\u11bd\u11c0\u11e1\u11ea\u11ee\u11f7\u1205\u120d\u1217",
    "\u1222\u122d\u1238\u1243\u124e\u1252\u125e\u1267\u126f\u1275\u127c\u1284",
    "\u1288\u128d\u1293\u1299\u12a0\u12ad\u12b8\u12c1\u12cf\u12d1\u12d3\u12dc",
    "\u12de\u12e1\u12ec\u12f8\u12ff\u1304\u1309\u1312\u131f\u1322\u132e\u1331",
    "\u1333\u133a\u133f\u1344\u1347\u134a\u134d\u1350\u1356\u1359\u135f\u1362",
    "\u136a\u136f\u1375\u137b\u137e\u138c\u13aa\u13ad\u13b6\u13bd\u13c1\u13c7",
    "\u13ce\u13d1\u13d3\u13d8\u13df\u13e3\u13e7\u13ee\u13f2\u140b\u1429\u145a",
    "\u145e\u146a\u146e\u1479\u1498\u149c\u14a2\u14a7\u14ad\u14b6\u14be\u14c1",
    "\u14c8\u14ce\u14d7\u14db\u14e3\u14ed\u14f5\u14fd\u1503\u150c\u1518\u1525",
    "\u1531\u1539\u153e\u1543\u1551\u1555\u155a\u1566\u1572\u157e\u158a\u1591",
    "\u1596\u15a4\u15af\u15b4\u15bc\u15c8\u15cc\u15d4\u15d7\u15db\u15de\u15e1",
    "\u15e4\u15e7\u15ea\u15ed\u15f0\u15f3\u15f6\u15f9\u15fc\u15ff\u1603\u160b",
    "\u160e\u1612\u1615\u1618\u161b\u161e\u1621\u1624\u1627\u162a\u162d\u1630",
    "\u1633\u1636\u163b\u1649\u164e\u1656\u165b\u1661\u1664\u1667\u166a\u166d",
    "\u1670\u1673\u1676\u1679\u167c\u167f\u1686\u168e\u1691\u1694\u1697\u169a",
    "\u169d\u16a0\u16a3\u16a6\u16a9\u16ac\u16af\u16b2\u16b6\u16b9\u16bc\u16bf",
    "\u16c2\u16c5\u16c8\u16cb\u16ce\u16d1\u16d4\u16d7\u16da\u16dc\u16e2\u16e7",
    "\u16ea\u16fd\u1706\u1715\u171d\u1728\u1732\u1735\u173a\u173d\u1741\u1749",
    "\u1752\u1759\u175d\u1761\u1765\u1767\u176d\u1771\u177a\u1780\u1786\u178f",
    "\u1794\u1798\u179b\u17a6\u17b0\u17b5\u17ba\u17c5\u17cc\u17de\u17e4\u17e8",
    "\u17ed\u17f0\u17f7\u1803\u180b\u1812\u1819\u1820\u1822\u182f\u183c\u1844",
    "\u1852\u1857\u185b\u1865\u186a\u186d\u1873\u187d\u1883\u1885\u1887\u188e",
    "\u1895\u189b\u18a0\u18a5\u18b2\u18b8\u18ba\u18bc\u18c3\u18cb\u18d5\u18df",
    "\u18e8\u18f1\u18fb\u1907\u1913\u1916\u1920\u192c\u192f\u1939\u1945\u1948",
    "\u1952\u195e\u1961\u196b\u1977\u197a\u1980\u1985\u198e\u1996\u19a0\u19a3",
    "\u19a6\u19a9\u19ae\u19c3\u19c6\u19c9\u19cc\u19d4\u19d7\u19da\u19dd\u19e9",
    "\u19f0\u19f8\u1a0c\u1a1a\u1a1d\u1a21\u1a27\u1a2a\u1a2d\u1a2f\u1a34\u1a37",
    "\u1a3d\u1a45\u1a52\u1a5b\u1a66\u1a84\u1a90\u1a98\u1aa5\u1aaf\u1ab7\u1aba",
    "\u1abd\u1ada\u1ae3\u1aeb\u1aef\u1af3\u1af7\u1afb\u1b0b\u1b18\u1b1b\u1b24",
    "\u1b29\u1b2b\u1b30\u1b34\u1b3f\u1b46\u1b4d\u1b56\u1b5d\u1b66\u1b6c\u1b6f",
    "\u1b75\u1b79\u1b7d\u1b81\u1b85\u1b87\u1b8b\u1b90\u1b94\u1b97\u1b9a\u1ba5",
    "\u1bae\u1bb9\u1bca\u1bd1\u1bd8\u1be1\u1be4\u1be7\u1bf3\u1bf9\u1c01\u1c09",
    "\u1c0f\u1c17\u1c24\u1c2a\u1c2f\u1c33\u1c36\u1c3f\u1c4c\u1c51\u1c53\u1c5a",
    "\u1c63\u1c6d\u1c76\u1c85\u1c88\u1c8d\u1c8f\u1c91\u1c9a\u1ca0\u1ca4\u1ca8",
    "\u1cb0\u1cb7\u1cce\u1cd3\u1cdc\u1ce5\u1ce9\u1cf5\u1cfb\u1d02\u1d06\u1d0b",
    "\u1d10\u1d15\u1d1a\u1d1f\u1d24\u1d2a\u1d2c\u1d30\u1d34\u1d38\u1d3f\u1d43",
    "\u1d47\u1d4a\u1d52\u1d58\u1d60\u1d63\u1d68\u1d6c\u1d71\u1d78\u1d7e\u1d87",
    "\u1d8b\u1d8d\u1d93\u1d98\u1d9c\u1da4\u1da9\u1daf\u1db3\u1db7\u1dbb\u1dbf",
    "\u1dc3\u1dc9\u1dce\u1dd4\u1dd8\u1ddc\u1de0\u1de4\u1de9\u1df4\u1dfb\u1e00",
    "\u1e04\u1e0b\u1e0f\u1e1b\u1e20\u1e23\u1e29\u1e2c\u1e2f\u1e32\u1e35\u1e38",
    "\u1e3b\u1e3e\u1e41\u1e44\u1e47\u1e4a\u1e4d\u1e50\u1e54\u1e57\u1e59\u1e60",
    "\u1e66\u1e6c\u1e77\u1e7c\u1e81\u1e83\u1e94\u1e96\u1ea4\u1eaa\u1eaf\u1ebd",
    "\u1ec6\u1ed0\u1ed5\u1edc\u1ee5\u1eed"].join("");


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.PredictionContextCache();

export default class InceptorOracleParser extends antlr4.Parser {

    static grammarFileName = "InceptorOracle.g4";
    static literalNames = [ null, "'TRUE'", "'FALSE'", "'ALL'", "'AND'", 
                            "'OR'", "'NOT'", "'LIKE'", "'NO'", "'ANY'", 
                            "'IF'", "'EXISTS'", "'ASC'", "'DESC'", "'ORDER'", 
                            "'GROUP'", "'INCREMENT'", "'BY'", "'HAVING'", 
                            "'HASH'", "'WHERE'", "'FROM'", "'AS'", "'SELECT'", 
                            "'DISTINCT'", "'INSERT'", "'BATCHINSERT'", "'BATCHVALUES'", 
                            "'OVERWRITE'", "'OUTER'", "'UNIQUEJOIN'", "'PRESERVE'", 
                            "'JOIN'", "'STREAMJOB'", "'STREAMJOBS'", "'AT'", 
                            "'LEFT'", "'RIGHT'", "'FULL'", "'ON'", "'OFF'", 
                            "'PARTITION'", "'PARTITIONS'", "'PATTERN'", 
                            "'TABLE'", "'TABLES'", "'SEQUENCE'", "'SEQUENCES'", 
                            "'COLUMNS'", "'INDEX'", "'INDEXES'", "'REBUILD'", 
                            "'FUNCTIONS'", "'PLSQL'", "'SHOW'", "'MSCK'", 
                            "'REPAIR'", "'DIRECTORY'", "'LOCAL'", "'GLOBAL'", 
                            "'TRANSFORM'", "'USING'", "'CLUSTER'", "'DISTRIBUTE'", 
                            "'SORT'", "'UNION'", "'LOAD'", "'EXPORT'", "'IMPORT'", 
                            "'DATA'", "'INPATH'", "'IS'", "'NULL'", "'NULLS'", 
                            "'CREATE'", "'EXTERNAL'", "'ALTER'", "'CHANGE'", 
                            "'COLUMN'", "'FIRST'", "'LAST'", "'AFTER'", 
                            "'DESCRIBE'", "'DROP'", "'RENAME'", "'IGNORE'", 
                            "'RESPECT'", "'PROTECTION'", "'TO'", "'COMMENT'", 
                            "'PROMPT'", "'SPOOL'", "'BOOLEAN'", "'TINYINT'", 
                            "'BYTE'", "'SMALLINT'", "'INT'", "'BIGINT'", 
                            "'FLOAT'", "'DOUBLE'", "'DATE'", "'DATETIME'", 
                            "'TIMESTAMP'", "'TIME'", "'DECIMAL'", "'NUMERIC'", 
                            "'DEC'", "'STRING'", "'CHAR'", "'VARCHAR'", 
                            "'GEO'", "'VARCHAR2'", "'NVARCHAR'", "'ARRAY'", 
                            "'STRUCT'", "'MAP'", "'UNIONTYPE'", "'REDUCE'", 
                            "'PARTITIONED'", "'ROUTED'", "'CLUSTERED'", 
                            "'SORTED'", "'TABLESPACE'", "'PCTFREE'", "'PCTUSED'", 
                            "'INITRANS'", "'MAXTRANS'", "'STORAGE'", "'INITIAL'", 
                            "'NEXT'", "'NEXTVAL'", "'MINEXTENTS'", "'MAXEXTENTS'", 
                            "'UNLIMITED'", "'WIDCARD'", "'INTO'", "'BUCKETS'", 
                            "'ROW'", "'ROWS'", "'FORMAT'", "'DELIMITED'", 
                            "'FIELDS'", "'TERMINATED'", "'ESCAPED'", "'COLLECTION'", 
                            "'ITEMS'", "'KEYS'", "'$KEY$'", "'LINES'", "'STORED'", 
                            "'FILEFORMAT'", "'SEQUENCEFILE'", "'TEXTFILE'", 
                            "'CSVFILE'", "'FWCFILE'", "'RCFILE'", "'ORC'", 
                            "'HOLODESK'", "'STELLARDB'", "'ORC_TRANSACTION'", 
                            "'PARQUET'", "'HYPERDRIVE'", "'ES'", "'INPUTFORMAT'", 
                            "'OUTPUTFORMAT'", "'INPUTDRIVER'", "'OUTPUTDRIVER'", 
                            "'OFFLINE'", "'ENABLE'", "'DISABLE'", "'READONLY'", 
                            "'NO_DROP'", "'LOCATION'", "'TABLESAMPLE'", 
                            "'BUCKET'", "'OUT'", "'OF'", "'PERCENT'", "'CAST'", 
                            "'ADD'", "'REPLACE'", "'RLIKE'", "'REGEXP'", 
                            "'TEMPORARY'", "'FUNCTION'", "'RESOURCE'", "'RELOAD'", 
                            "'MACRO'", "'EXPLAIN'", "'EXTENDED'", "'FORMATTED'", 
                            "'PRETTY'", "'DEPENDENCY'", "'LOGICAL'", "'COST'", 
                            "'SERDE'", "'WITH'", "'WITHIN'", "'DEFERRED'", 
                            "'SERDEPROPERTIES'", "'DBPROPERTIES'", "'LIMIT'", 
                            "'SET'", "'UNSET'", "'TBLPROPERTIES'", "'IDXPROPERTIES'", 
                            "'$VALUE$'", "'$ELEM$'", "'CASE'", "'WHEN'", 
                            "'THEN'", "'ELSE'", null, "'END'", "'GOTO'", 
                            "'EXIT'", "'OPEN'", "'CLOSE'", "'PRIOR'", "'NOCYCLE'", 
                            "'MAPJOIN'", "'COMBINE'", "'STRUCT_INDEX'", 
                            "'GLKJOIN'", "'USE_INDEX'", "'STARGATE'", "'USE_BULKLOAD'", 
                            "'ADHOC'", "'PRECOMPILE'", "'STREAMTABLE'", 
                            "'STREAM'", "'STREAMS'", "'METRIC'", "'METRICS'", 
                            "'RULEBASE'", "'RULEBASES'", "'RULE'", "'RULES'", 
                            "'RULEPROPERTIES'", "'MEET'", "'MUST'", "'MUSTNOT'", 
                            "'NONE'", "'POLICY'", "'POLICIES'", "'REMOVE'", 
                            "'POLICYKEY'", "'POLICYRULE'", "'LOOKUP'", "'POLICYPROPERTIES'", 
                            "'RULEFUNCTION'", "'RULEFUNCTIONS'", "'APPPROPERTIES'", 
                            "'JOBPROPERTIES'", "'RULEFUNCTIONPROPERTIES'", 
                            "'HOLD_DDLTIME'", "'CLUSTERSTATUS'", "'UTC'", 
                            "'UTC_TMESSTAMP'", "'LONG'", "'DELETE'", "'PLUS'", 
                            "'MINUS'", "'OP_CONCAT'", "'FETCH'", "'INTERSECT'", 
                            "'EXCEPT'", "'VIEW'", "'VIEWS'", "'IN'", "'DATABASE'", 
                            "'DATABASES'", "'MATERIALIZED'", "'SCHEMA'", 
                            "'SCHEMAS'", "'GRANT'", "'REVOKE'", "'SSL'", 
                            "'UNDO'", "'LOCK'", "'LOCKS'", "'UNLOCK'", "'SHARED'", 
                            "'EXCLUSIVE'", "'PROCEDURE'", "'UNSIGNED'", 
                            "'WHILE'", "'READ'", "'READS'", "'PURGE'", "'RANGE'", 
                            "'ANALYZE'", "'BEFORE'", "'BETWEEN'", "'BOTH'", 
                            "'BINARY'", "'CROSS'", "'CURSOR'", "'DEFAULT'", 
                            "'ROWTYPE'", "'TYPE'", "'TRIGGER'", "'RECORDREADER'", 
                            "'RECORDWRITER'", "'SEMI'", "'ANTISEMI'", "'LATERAL'", 
                            "'TOUCH'", "'ARCHIVE'", "'UNARCHIVE'", "'COMPUTE'", 
                            "'STATISTICS'", "'USE'", "'OPTION'", "'CONCATENATE'", 
                            "'SHOW_DATABASE'", "'UPDATE'", "'BATCHUPDATE'", 
                            "'RESTRICT'", "'CASCADE'", "'SKEWED'", "'ROLLUP'", 
                            "'CUBE'", "'DIRECTORIES'", "'FOR'", "'LOOP'", 
                            "'WINDOW'", "'RESET'", "'SESSIONWINDOW'", "'INIT'", 
                            "'SESSIONEND'", "'EXPIRE'", "'DISCARD'", "'COMPLETE'", 
                            "'KEYEDBY'", "'STREAMWINDOW'", "'SLIDE'", "'SEPARATED'", 
                            "'INCLUDE'", "'EXCLUDE'", "'UNBOUNDED'", "'PRECEDING'", 
                            "'FOLLOWING'", "'FOLLOWEDBY'", "'NOTFOLLOWEDBY'", 
                            "'NOTNEXT'", "'TIMES'", "'CURRENT'", "'CURRVAL'", 
                            "'LESS'", "'MORE'", "'THAN'", "'OVER'", "'GROUPING'", 
                            "'SETS'", "'TRUNCATE'", "'NOSCAN'", "'PARTIALSCAN'", 
                            "'USER'", "'QUOTA'", "'PERMISSION'", "'ROLE'", 
                            "'ROLES'", "'INNER'", "'EXCHANGE'", "'ADMIN'", 
                            "'OWNER'", "'PRINCIPALS'", "'NATURAL'", "'RETURN'", 
                            "'BREAK'", "'CONTINUE'", "'BEGIN'", "'NUMBER'", 
                            "'BLOB'", "'CLOB'", "'BFILE'", "'DECLARE'", 
                            "'CONSTANT'", "'CONSTRAINT'", "'INOUT'", "'VALUES'", 
                            "'YEAR'", "'MONTH'", "'DAY'", "'MINUTE'", "'HOUR'", 
                            "'SECOND'", "'INTERVAL'", "'EXTRACT'", "'SUBSTRING'", 
                            "'SYSDATE'", "'SYSTIMESTAMP'", "'SYSTIME'", 
                            "'CALL'", "'EXECUTE'", "'MAXVALUE'", "'NOMAXVALUE'", 
                            "'MINVALUE'", "'NOMINVALUE'", "'CYCLE'", "'CACHE'", 
                            "'CACHEDMETRIC'", "'CACHEDMETRICS'", "'NOCACHE'", 
                            "'NOORDER'", "'BULK'", "'COLLECT'", "'VARYING'", 
                            "'EXCEPTION'", "'MERGE'", "'MATCHED'", "'PLANT'", 
                            "'IMMEDIATE'", "'COMPACT'", "'COMPACTIONS'", 
                            "'START'", "'STOP'", "'LIST'", "'TRANSACTION'", 
                            "'COMMIT'", "'ROLLBACK'", "'WORK'", "'SPACE'", 
                            "'ISOLATION'", "'COMMITTED'", "'SERIALIZABLE'", 
                            "'UNIQUE'", "'CONF'", "'DEFINED'", "'INTEGER'", 
                            "'ONLY'", "'SERVER'", "'TRANSACTIONS'", "'URI'", 
                            "'WRITE'", "'FACL'", "'FOUND'", "'LEVEL'", "'PUBLIC'", 
                            "'LINK'", "'LINKS'", "'CONNECT'", "'IDENTIFIED'", 
                            "'APPLICATION'", "'APPLICATIONS'", "'APP'", 
                            "'APPS'", "'INFINITE'", "'REWRITE'", "'NO_REWRITE'", 
                            "'WAIT'", "'PRIMARY'", "'FOREIGN'", "'REFERENCES'", 
                            "'VALIDATE'", "'NOVALIDATE'", "'RELY'", "'NORELY'", 
                            "'KEY'", "'SEGMENT'", "'LENGTH'", "'ATTACH'", 
                            "'DETTACH'", "'SHARD'", "'NUM'", "'FULLTEXT'", 
                            "'DOCVALUES'", "'TABLESIZE'", "'TABLET'", "'CAPACITY'", 
                            "'REPLICATION'", "'APPEND'", "'ANALYZER'", "'SYNC'", 
                            "'NO_INDEX'", "'LOG'", "'ERRORS'", "'REJECT'", 
                            "'OFFSET'", "'FILE'", "'JAR'", "'PERMANENT'", 
                            "'GRAPH_PATH'", "'BLACKLIST'", "'SCHEDULER'", 
                            "'MODE'", "'POLICYBASES'", "'QUALIFY'", "'->'", 
                            "'.'", "':'", "','", "';'", "'('", "')'", "'['", 
                            "']'", "'{'", "'}'", null, "'<=>'", null, "'<='", 
                            "'<'", "'<<'", "'>='", "'>'", "'>>'", "'/'", 
                            "'+'", "'-'", "'*'", "'%'", "'DIV'", "'||'", 
                            "'&'", "'~'", "'|'", "'^'", "'?'", "'$'", "':='", 
                            "'@'", "'=>'", "'..'", null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, "'/*'", "'*/'", null, null, null, null, 
                            null, "'NOCOPY'", "'VARRAY'", "'PACKAGE'", "'PACKAGES'", 
                            "'BODY'", "'ISOPEN'", "'NOTFOUND'", "'ROWCOUNT'", 
                            "'BULK_ROWCOUNT'", "'BULK_EXCEPTIONS'", "'REVERSE'", 
                            "'FORALL'", "'SAVE'", "'EXCEPTIONS'", "'INDICES'", 
                            "'REF'", "'RAISE'", "'PRAGMA'", "'EXCEPTION_INIT'", 
                            "'AUTONOMOUS_TRANSACTION'", "'SERIALLY_REUSABLE'", 
                            "'RECORD'", "'YEARS'", "'MONTHS'", "'DAYS'", 
                            "'HOURS'", "'MINUTES'", "'SECONDS'" ];
    static symbolicNames = [ null, "KW_TRUE", "KW_FALSE", "KW_ALL", "KW_AND", 
                             "KW_OR", "KW_NOT", "KW_LIKE", "KW_NO", "KW_ANY", 
                             "KW_IF", "KW_EXISTS", "KW_ASC", "KW_DESC", 
                             "KW_ORDER", "KW_GROUP", "KW_INCREMENT", "KW_BY", 
                             "KW_HAVING", "KW_HASH", "KW_WHERE", "KW_FROM", 
                             "KW_AS", "KW_SELECT", "KW_DISTINCT", "KW_INSERT", 
                             "KW_BATCH_INSERT", "KW_BATCH_VALUES", "KW_OVERWRITE", 
                             "KW_OUTER", "KW_UNIQUEJOIN", "KW_PRESERVE", 
                             "KW_JOIN", "KW_STREAMJOB", "KW_STREAMJOBS", 
                             "KW_AT", "KW_LEFT", "KW_RIGHT", "KW_FULL", 
                             "KW_ON", "KW_OFF", "KW_PARTITION", "KW_PARTITIONS", 
                             "KW_PATTERN", "KW_TABLE", "KW_TABLES", "KW_SEQUENCE", 
                             "KW_SEQUENCES", "KW_COLUMNS", "KW_INDEX", "KW_INDEXES", 
                             "KW_REBUILD", "KW_FUNCTIONS", "KW_PLSQL", "KW_SHOW", 
                             "KW_MSCK", "KW_REPAIR", "KW_DIRECTORY", "KW_LOCAL", 
                             "KW_GLOBAL", "KW_TRANSFORM", "KW_USING", "KW_CLUSTER", 
                             "KW_DISTRIBUTE", "KW_SORT", "KW_UNION", "KW_LOAD", 
                             "KW_EXPORT", "KW_IMPORT", "KW_DATA", "KW_INPATH", 
                             "KW_IS", "KW_NULL", "KW_NULLS", "KW_CREATE", 
                             "KW_EXTERNAL", "KW_ALTER", "KW_CHANGE", "KW_COLUMN", 
                             "KW_FIRST", "KW_LAST", "KW_AFTER", "KW_DESCRIBE", 
                             "KW_DROP", "KW_RENAME", "KW_IGNORE", "KW_RESPECT", 
                             "KW_PROTECTION", "KW_TO", "KW_COMMENT", "KW_PROMPT", 
                             "KW_SPOOL", "KW_BOOLEAN", "KW_TINYINT", "KW_BYTE", 
                             "KW_SMALLINT", "KW_INT", "KW_BIGINT", "KW_FLOAT", 
                             "KW_DOUBLE", "KW_DATE", "KW_DATETIME", "KW_TIMESTAMP", 
                             "KW_TIME", "KW_DECIMAL", "KW_NUMERIC", "KW_DEC", 
                             "KW_STRING", "KW_CHAR", "KW_VARCHAR", "KW_GEO", 
                             "KW_VARCHAR2", "KW_NVARCHAR", "KW_ARRAY", "KW_STRUCT", 
                             "KW_MAP", "KW_UNIONTYPE", "KW_REDUCE", "KW_PARTITIONED", 
                             "KW_ROUTED", "KW_CLUSTERED", "KW_SORTED", "KW_TABLESPACE", 
                             "KW_PCTFREE", "KW_PCTUSED", "KW_INITRANS", 
                             "KW_MAXTRANS", "KW_STORAGE", "KW_INITIAL", 
                             "KW_NEXT", "KW_NEXTVALUE", "KW_MINEXTENTS", 
                             "KW_MAXEXTENTS", "KW_UNLIMITED", "KW_WIDCARD", 
                             "KW_INTO", "KW_BUCKETS", "KW_ROW", "KW_ROWS", 
                             "KW_FORMAT", "KW_DELIMITED", "KW_FIELDS", "KW_TERMINATED", 
                             "KW_ESCAPED", "KW_COLLECTION", "KW_ITEMS", 
                             "KW_KEYS", "KW_KEY_TYPE", "KW_LINES", "KW_STORED", 
                             "KW_FILEFORMAT", "KW_SEQUENCEFILE", "KW_TEXTFILE", 
                             "KW_CSVFILE", "KW_FWCFILE", "KW_RCFILE", "KW_ORCFILE", 
                             "KW_HOLODESK", "KW_STELLARDB", "KW_ORCTRANSACTIONFILE", 
                             "KW_PARQUET", "KW_HYPERDRIVE", "KW_ESDRIVE", 
                             "KW_INPUTFORMAT", "KW_OUTPUTFORMAT", "KW_INPUTDRIVER", 
                             "KW_OUTPUTDRIVER", "KW_OFFLINE", "KW_ENABLE", 
                             "KW_DISABLE", "KW_READONLY", "KW_NO_DROP", 
                             "KW_LOCATION", "KW_TABLESAMPLE", "KW_BUCKET", 
                             "KW_OUT", "KW_OF", "KW_PERCENT", "KW_CAST", 
                             "KW_ADD", "KW_REPLACE", "KW_RLIKE", "KW_REGEXP", 
                             "KW_TEMPORARY", "KW_FUNCTION", "KW_RESOURCE", 
                             "KW_RELOAD", "KW_MACRO", "KW_EXPLAIN", "KW_EXTENDED", 
                             "KW_FORMATTED", "KW_PRETTY", "KW_DEPENDENCY", 
                             "KW_LOGICAL", "KW_COST", "KW_SERDE", "KW_WITH", 
                             "KW_WITHIN", "KW_DEFERRED", "KW_SERDEPROPERTIES", 
                             "KW_DBPROPERTIES", "KW_LIMIT", "KW_SET", "KW_UNSET", 
                             "KW_TBLPROPERTIES", "KW_IDXPROPERTIES", "KW_VALUE_TYPE", 
                             "KW_ELEM_TYPE", "KW_CASE", "KW_WHEN", "KW_THEN", 
                             "KW_ELSE", "KW_ELSIF", "KW_END", "KW_GOTO", 
                             "KW_EXIT", "KW_OPEN", "KW_CLOSE", "KW_PRIOR", 
                             "KW_NOCYCLE", "KW_MAPJOIN", "KW_COMBINE", "KW_COMBINE_STRUCT_INDEX", 
                             "KW_GLKJOIN", "KW_USE_INDEX", "KW_STARGATE", 
                             "KW_USE_BULKLOAD", "KW_ADHOC", "KW_PRECOMPILE", 
                             "KW_STREAMTABLE", "KW_STREAM", "KW_STREAMS", 
                             "KW_METRIC", "KW_METRICS", "KW_RULEBASE", "KW_RULEBASES", 
                             "KW_RULE", "KW_RULES", "KW_RULEPROPERTIES", 
                             "KW_MEET", "KW_MUST", "KW_MUSTNOT", "KW_NONE", 
                             "KW_POLICY", "KW_POLICIES", "KW_REMOVE", "KW_POLICYKEY", 
                             "KW_POLICY_RULE", "KW_LOOKUP", "KW_POLICYPROPERTIES", 
                             "KW_RULE_FUNCTION", "KW_RULE_FUNCTIONS", "KW_APPPROPERTIES", 
                             "KW_JOBPROPERTIES", "KW_RULE_FUNCTION_PROPERTIES", 
                             "KW_HOLD_DDLTIME", "KW_CLUSTERSTATUS", "KW_UTC", 
                             "KW_UTCTIMESTAMP", "KW_LONG", "KW_DELETE", 
                             "KW_PLUS", "KW_MINUS", "KW_OP_CONCAT", "KW_FETCH", 
                             "KW_INTERSECT", "KW_EXCEPT", "KW_VIEW", "KW_VIEWS", 
                             "KW_IN", "KW_DATABASE", "KW_DATABASES", "KW_MATERIALIZED", 
                             "KW_SCHEMA", "KW_SCHEMAS", "KW_GRANT", "KW_REVOKE", 
                             "KW_SSL", "KW_UNDO", "KW_LOCK", "KW_LOCKS", 
                             "KW_UNLOCK", "KW_SHARED", "KW_EXCLUSIVE", "KW_PROCEDURE", 
                             "KW_UNSIGNED", "KW_WHILE", "KW_READ", "KW_READS", 
                             "KW_PURGE", "KW_RANGE", "KW_ANALYZE", "KW_BEFORE", 
                             "KW_BETWEEN", "KW_BOTH", "KW_BINARY", "KW_CROSS", 
                             "KW_CURSOR", "KW_DEFAULT", "KW_ROWTYPE", "KW_TYPE", 
                             "KW_TRIGGER", "KW_RECORDREADER", "KW_RECORDWRITER", 
                             "KW_SEMI", "KW_ANTISEMI", "KW_LATERAL", "KW_TOUCH", 
                             "KW_ARCHIVE", "KW_UNARCHIVE", "KW_COMPUTE", 
                             "KW_STATISTICS", "KW_USE", "KW_OPTION", "KW_CONCATENATE", 
                             "KW_SHOW_DATABASE", "KW_UPDATE", "KW_BATCHUPDATE", 
                             "KW_RESTRICT", "KW_CASCADE", "KW_SKEWED", "KW_ROLLUP", 
                             "KW_CUBE", "KW_DIRECTORIES", "KW_FOR", "KW_LOOP", 
                             "KW_WINDOW", "KW_WINDOWRESET", "KW_SESSIONWINDOW", 
                             "KW_SESSIONSTART", "KW_SESSIONSTOP", "KW_SESSIONEXPIRE", 
                             "KW_SESSIONEXPIRE_DISCARD", "KW_SESSIONEXPIRE_COMPLETE", 
                             "KW_SESSIONPARTITION", "KW_STREAMWINDOW", "KW_STREAMWINDOWSLIDELENGTH", 
                             "KW_STREAMWINDOWSEPARATED", "KW_SESSIONWINDOW_INCLUDE", 
                             "KW_SESSIONWINDOW_EXCLUDE", "KW_UNBOUNDED", 
                             "KW_PRECEDING", "KW_FOLLOWING", "KW_FOLLOWEDBY", 
                             "KW_NOTFOLLOWEDBY", "KW_NOTNEXT", "KW_PATTERN_TIMES", 
                             "KW_CURRENT", "KW_CURRVALUE", "KW_LESS", "KW_MORE", 
                             "KW_THAN", "KW_OVER", "KW_GROUPING", "KW_SETS", 
                             "KW_TRUNCATE", "KW_NOSCAN", "KW_PARTIALSCAN", 
                             "KW_USER", "KW_QUOTA", "KW_PERMISSION", "KW_ROLE", 
                             "KW_ROLES", "KW_INNER", "KW_EXCHANGE", "KW_ADMIN", 
                             "KW_OWNER", "KW_PRINCIPALS", "KW_NATURAL", 
                             "KW_RETURN", "KW_BREAK", "KW_CONTINUE", "KW_BEGIN", 
                             "KW_NUMBER", "KW_BLOB", "KW_CLOB", "KW_BFILE", 
                             "KW_DECLARE", "KW_CONSTANT", "KW_CONSTRAINT", 
                             "KW_INOUT", "KW_VALUES", "KW_YEAR", "KW_MONTH", 
                             "KW_DAY", "KW_MINUTE", "KW_HOUR", "KW_SECOND", 
                             "KW_INTERVAL", "KW_EXTRACT", "KW_SUBSTRING", 
                             "KW_SYSDATE", "KW_SYSTIMESTAMP", "KW_SYSTIME", 
                             "KW_CALL", "KW_EXEC", "KW_MAXVALUE", "KW_NOMAXVALUE", 
                             "KW_MINVALUE", "KW_NOMINVALUE", "KW_CYCLE", 
                             "KW_CACHE", "KW_CACHEDMETRIC", "KW_CACHEDMETRICS", 
                             "KW_NOCACHE", "KW_NOORDER", "KW_BULK", "KW_COLLECT", 
                             "KW_VARYING", "KW_EXCEPTION", "KW_MERGE", "KW_MATCHED", 
                             "KW_PLANT", "KW_IMMEDIATE", "KW_COMPACT", "KW_COMPACTIONS", 
                             "KW_START", "KW_STOP", "KW_LIST", "KW_TRANSACTION", 
                             "KW_COMMIT", "KW_ROLLBACK", "KW_WORK", "KW_SPACE", 
                             "KW_ISOLATION", "KW_COMMITTED", "KW_SERIALIZABLE", 
                             "KW_UNIQUE", "KW_CONF", "KW_DEFINED", "KW_INTEGER", 
                             "KW_ONLY", "KW_SERVER", "KW_TRANSACTIONS", 
                             "KW_URI", "KW_WRITE", "KW_FACL", "KW_FOUND", 
                             "KW_LEVEL", "KW_PUBLIC", "KW_LINK", "KW_LINKS", 
                             "KW_CONNECT", "KW_IDENTIFIED", "KW_APPLICATION", 
                             "KW_APPLICATIONS", "KW_APP", "KW_APPS", "KW_INFINITE", 
                             "KW_REWRITE", "KW_NO_REWRITE", "KW_WAIT", "KW_PRIMARY", 
                             "KW_FOREIGN", "KW_REFERENCES", "KW_VALIDATE", 
                             "KW_NOVALIDATE", "KW_RELY", "KW_NORELY", "KW_KEY", 
                             "KW_SEGMENT", "KW_LENGTH", "KW_ATTACH", "KW_DETTACH", 
                             "KW_SHARD", "KW_NUM", "KW_FULLTEXT", "KW_DOCVALUES", 
                             "KW_TABLESIZE", "KW_TABLET", "KW_CAPACITY", 
                             "KW_REPLICATION", "KW_APPEND", "KW_ANALYZER", 
                             "KW_SYNC", "KW_NO_INDEX", "KW_LOG", "KW_ERRORS", 
                             "KW_REJECT", "KW_OFFSET", "KW_FILE", "KW_JAR", 
                             "KW_PERMANENT", "KW_GRAPH_PATH", "KW_BLACKLIST", 
                             "KW_SCHEDULER", "KW_MODE", "KW_POLICYBASES", 
                             "KW_QUALIFY", "RARROW", "DOT", "COLON", "COMMA", 
                             "SEMICOLON", "LPAREN", "RPAREN", "LSQUARE", 
                             "RSQUARE", "LCURLY", "RCURLY", "EQUAL", "EQUAL_NS", 
                             "NOTEQUAL", "LESSTHANOREQUALTO", "LESSTHAN", 
                             "DOUBLELESSTHAN", "GREATERTHANOREQUALTO", "GREATERTHAN", 
                             "DOUBLEGREATERTHAN", "DIVIDE", "PLUS", "MINUS", 
                             "STAR", "MOD", "DIV", "OP_CONCAT", "AMPERSAND", 
                             "TILDE", "BITWISEOR", "BITWISEXOR", "QUESTION", 
                             "DOLLAR", "ASSIGN_OP", "AT", "NAMED_NOTATION", 
                             "RANGE_OP", "OUTER_JOIN_SIGN", "Digit", "StringLiteral", 
                             "CharSetLiteral", "BigintLiteral", "SmallintLiteral", 
                             "TinyintLiteral", "DecimalLiteral", "ByteLengthLiteral", 
                             "IntRangeMin", "Number", "Identifier", "CharSetName", 
                             "C_COMMENT_LEFT", "C_COMMENT_RIGHT", "C_COMMENT", 
                             "HINT_LEFT", "WS", "COMMENT", "CPP_COMMENT", 
                             "KW_NOCOPY", "KW_VARRAY", "KW_PACKAGE", "KW_PACKAGES", 
                             "KW_BODY", "KW_ISOPEN", "KW_NOTFOUND", "KW_ROWCOUNT", 
                             "KW_BULK_ROWCOUNT", "KW_BULK_EXCEPTIONS", "KW_REVERSE", 
                             "KW_FORALL", "KW_SAVE", "KW_EXCEPTIONS", "KW_INDICES", 
                             "KW_REF", "KW_RAISE", "KW_PRAGMA", "KW_EXCEPTION_INIT", 
                             "KW_AUTONOMOUS_TRANSACTION", "KW_SERIALLY_REUSABLE", 
                             "KW_RECORD", "KW_YEARS", "KW_MONTHS", "KW_DAYS", 
                             "KW_HOURS", "KW_MINUTES", "KW_SECONDS" ];
    static ruleNames = [ "aliasNonReserved", "alias", "identifier", "columnAlias", 
                         "commonNonReserved", "keyValueProperty", "keyProperty", 
                         "tableName", "valuesName", "viewName", "tableAlias", 
                         "sequenceName", "partitionSpec", "partitionVal", 
                         "storedAsDirs", "orReplace", "columnList", "columnNameTypeList", 
                         "columnNameColonTypeList", "columnNameOrderList", 
                         "columnNameOrder", "columnNameCommentList", "columnNameComment", 
                         "nullsOrder", "columnRefOrder", "columnNameType", 
                         "columnAnalyzer", "defaultValueNode", "constantOrNull", 
                         "columnComment", "columnNameList", "columnName", 
                         "columnOrtableDotColumnNameList", "columnOrtableDotColumnName", 
                         "columnOrtableDotColumnWithDBNameList", "columnOrtableDotColumnWithDBName", 
                         "tableOrPartition", "tableOrColumnAliasOfValues", 
                         "partitionTableFunctionSource", "partitionedTableFunction", 
                         "tableAllColumns", "tableOrColumn", "aliasList", 
                         "capIdentifierList", "identifierList", "alterStatement", 
                         "alterSequenceStatementSuffix", "alterTableStatementSuffix", 
                         "alterStatementPartitionKeyType", "alterViewStatementSuffix", 
                         "alterIndexStatementSuffix", "alterApplicationStatementSuffix", 
                         "alterJobStatementSuffix", "alterJobSuffixProperties", 
                         "alterApplicationSuffixProperties", "alterApplicationSuffixSetOwner", 
                         "alterPolicyStatementSuffix", "alterPolicySuffixProperties", 
                         "alterPolicySuffixRootGroupType", "alterPolicyRuleGroupSuffix", 
                         "alterRuleStatementSuffix", "alterRuleSuffixProperties", 
                         "alterRuleFunctionStatementSuffix", "alterRuleFunctionSuffixProperties", 
                         "alterDatabaseStatementSuffix", "alterDatabaseSuffixProperties", 
                         "alterDatabaseSuffixSetOwner", "alterStatementSuffixRename", 
                         "alterStatementErrorLogSetting", "onOffOpt", "errorIntoTableOpt", 
                         "errorOverwriteOpt", "errorRejectOpt", "errorLimitOpt", 
                         "alterStatementSuffixAddCol", "alterStatementSuffixRenameCol", 
                         "blocking", "alterStatementSuffixCompact", "alterStatementSuffixUpdateStatsCol", 
                         "alterStatementChangeColPosition", "alterStatementSuffixAddPartitions", 
                         "alterStatementSuffixAddPartitionsElement", "alterStatementSuffixAddRangePartitionsElement", 
                         "alterStatementSuffixTouch", "alterStatementSuffixArchive", 
                         "alterStatementSuffixUnArchive", "partitionLocation", 
                         "alterStatementSuffixDropPartitions", "alterStatementSuffixProperties", 
                         "alterViewSuffixProperties", "alterStatementSuffixSerdeProperties", 
                         "alterTblPartitionStatement", "alterTblPartitionStatementSuffix", 
                         "alterStatementSuffixFileFormat", "alterStatementSuffixClusterbySortby", 
                         "alterTblPartitionStatementSuffixSkewedLocation", 
                         "skewedLocations", "skewedLocationsList", "skewedLocationMap", 
                         "alterStatementSuffixLocation", "alterStatementSuffixSkewedby", 
                         "alterStatementSuffixExchangePartition", "alterStatementSuffixProtectMode", 
                         "alterStatementSuffixRenamePart", "alterStatementSuffixMergeFiles", 
                         "alterProtectMode", "alterProtectModeMode", "alterStatementSuffixBucketNum", 
                         "fileFormat", "ignoreProtection", "dropPartitionSpec", 
                         "dropPartitionVal", "dropPartitionOperator", "alterBlacklistStatementSuffix", 
                         "alterStatementSuffixDropConstraint", "alterStatementSuffixAddConstraint", 
                         "alterConstraintWithName", "alterForeignKeyWithName", 
                         "alterStatementIntervalValue", "atomExpression", 
                         "sqlCallStatement", "constant", "defaultConstantValue", 
                         "nonNegativeDigitValue", "stringLiteralSequence", 
                         "charSetStringLiteral", "booleanValue", "columnNameTypeOrConstraintList", 
                         "columnNameTypeOrConstraint", "tableConstraint", 
                         "createForeignKey", "createConstraint", "tableConstraintType", 
                         "constraintOpts", "enableSpecification", "validateSpecification", 
                         "relySpecification", "columnConstraint", "colPKConstraint", 
                         "colFKConstraint", "parenColumnNameList", "defaultVauleOrColumnConstraint", 
                         "columnAttribute", "crudStatement", "mergeStatement", 
                         "mergeUpdateClause", "mergeDeleteClause", "mergeInsertClause", 
                         "implicitInsertStatement", "updateStatement", "batchUpdateStatement", 
                         "batchUpdate_set_clause", "update_set_clause_suffix", 
                         "update_set_clause_elements", "update_set_clause_element", 
                         "update_set_clause_element_part", "update_set_elements", 
                         "update_set_element", "deleteStatement", "crudTargetStatement", 
                         "dclStatement", "beginTransactionStatement", "commitTransactionStatement", 
                         "rollbackTransactionStatement", "transactionSettingStatement", 
                         "ddlAStatement", "createDatabaseStatement", "switchDatabaseStatement", 
                         "switchApplicationStatement", "dropDatabaseStatement", 
                         "createDbLinkStatement", "dropDbLinkStatement", 
                         "dblink", "dblinkUser", "dblinkPwd", "dblinkService", 
                         "createTableStatement", "createTemporaryTableStatement", 
                         "tableDefinitionClause", "noDataCopyQuery", "createStreamStatement", 
                         "createMetricStatement", "streamJob", "createJobStatement", 
                         "streamRule", "createRuleStatement", "dropRuleStatement", 
                         "createRuleBaseStatement", "switchRuleBaseStatement", 
                         "dropRuleBaseStatement", "ruleGroupType", "createPolicyStatement", 
                         "createRuleGroupStatement", "intoRuleGroupStatement", 
                         "ruleConstraintType", "policyKey", "createPolicyRuleStatement", 
                         "dropPolicyStatement", "switchPolicyStatement", 
                         "dropPolicyRuleStatement", "createApplicationStatement", 
                         "dropApplicationStatement", "dropTableStatement", 
                         "dropStreamStatement", "dropMetricStatement", "dropJobStatement", 
                         "createRuleFunctionStatement", "dropRuleFunctionStatement", 
                         "dropCachedMetricStatement", "truncateCachedMetricStatement", 
                         "truncateTableStatement", "tablePartitionPrefix", 
                         "ctasTargetStatement", "tableRowNullFormat", "rowFormatSerde", 
                         "rowFormatDelimited", "tableRowFormat", "tableComment", 
                         "tablePartition", "tableRoute", "tableRouteSpec", 
                         "tableRangeRoute", "rangeRouteValues", "tableHashRoute", 
                         "tableBuckets", "tableSkewed", "skewedValueElement", 
                         "skewedColumnValuePairList", "skewedColumnValuePair", 
                         "skewedColumnValues", "skewedColumnValue", "skewedValueLocationElement", 
                         "tablePropertiesPrefixed", "erroLogTableSpec", 
                         "errorRejectSpec", "tableProperties", "tablePropertiesList", 
                         "tableRowFormatFieldIdentifier", "tableRowFormatCollItemsIdentifier", 
                         "tableRowFormatMapKeysIdentifier", "tableRowFormatLinesIdentifier", 
                         "esProps", "holoProps", "holoTableSize", "tableFileFormat", 
                         "stargateIdentifier", "storeArgs", "storeArgName", 
                         "tableLocation", "restrictOrCascade", "databaseComment", 
                         "dbLocation", "dbProperties", "dbPropertiesList", 
                         "ifExists", "ifNotExists", "createSequenceStatement", 
                         "dropSequenceStatement", "ddlBStatement", "descStatement", 
                         "showStatement", "showStatementPartA", "showStatementPartB", 
                         "showStatementPartC", "metastoreCheck", "dropViewStatement", 
                         "dropMaterializedViewStatement", "createFunctionStatement", 
                         "createMacroStatement", "createIndexStatement", 
                         "dropIndexStatement", "dropFunctionStatement", 
                         "reloadFunctionStatement", "dropMacroStatement", 
                         "functionType", "cleanClassLoader", "analyzeStatement", 
                         "lockStatement", "lockDatabase", "unlockStatement", 
                         "unlockDatabase", "createRoleStatement", "dropRoleStatement", 
                         "grantPrivileges", "revokePrivileges", "showQuota", 
                         "showFacl", "showGrants", "showRoleGrants", "showRolePrincipals", 
                         "showRoles", "showBlacklist", "showSchedulerMode", 
                         "grantQuota", "revokeQuota", "faclSpec", "grantFacl", 
                         "revokeFacl", "grantRole", "revokeRole", "showCurrentRole", 
                         "syncIndex", "syncRule", "syncPolicy", "setRole", 
                         "quotaDb", "quotaUser", "userOrGroup", "withGrantOption", 
                         "withAdminOption", "adminOptionFor", "quotaSpec", 
                         "privilegeIncludeColObject", "allTablesInDB", "privObjectCols", 
                         "grantOptionFor", "privilegeList", "privlegeDef", 
                         "privilegeType", "privilegeObject", "privObjectType", 
                         "privObject", "principalSpecification", "principalName", 
                         "lockMode", "indexComment", "autoRebuild", "indexTblName", 
                         "indexPropertiesPrefixed", "indexProperties", "indexPropertiesList", 
                         "tabTypeExpr", "descTabTypeExpr", "partTypeExpr", 
                         "descPartTypeExpr", "showStmtIdentifier", "sysFuncNames", 
                         "descFuncNames", "ddlCStatement", "createOrReplaceStatement", 
                         "createViewStatement", "rewriteEnabled", "rewriteDisabled", 
                         "createMaterializedViewStatement", "viewPartition", 
                         "showPermission", "grantPermission", "revokePermission", 
                         "grantDefinition", "revokeDefinition", "rclsObject", 
                         "ddlStatement", "compactStatement", "precedenceUnaryOperator", 
                         "precedenceUnaryPrefixExpression", "precedenceUnarySuffixExpression", 
                         "precedenceBitwiseXorOperator", "precedenceBitwiseXorExpression", 
                         "precedenceStarOperator", "precedenceStarExpression", 
                         "precedencePlusOperator", "precedencePlusExpression", 
                         "precedenceOPConcatOperator", "precedenceOPConcatExpression", 
                         "precedenceAmpersandOperator", "precedenceAmpersandExpression", 
                         "precedenceBitwiseOrOperator", "precedenceBitwiseOrExpression", 
                         "precedenceRegexpOperator", "precedenceEqualOperator", 
                         "expression", "expressions", "expressionsInParenthesis", 
                         "expressionsNotInParenthesis", "expressionPart", 
                         "expressionList", "outer_join_sign", "nullCondition", 
                         "precedenceSimilarExpression", "precedenceSimilarExpressionPart", 
                         "precedenceSimilarExpressionAtom", "precedenceSimilarExpressionPartNot", 
                         "precedenceNotOperator", "precedenceNotExpression", 
                         "precedenceAndOperator", "precedenceAndExpression", 
                         "precedenceOrOperator", "precedenceOrExpression", 
                         "precedenceEqualExpression", "fromClause", "joinSource", 
                         "uniqueJoinSource", "uniqueJoinExpr", "uniqueJoinToken", 
                         "joinToken", "joinTokenRequireOn", "lateralView", 
                         "fromSource", "tableSource", "subQuerySource", 
                         "valuesSource", "patternSource", "patternEvent", 
                         "timesExpr", "oneOrMoreExpr", "patternExpression", 
                         "eventOp", "patternTimewindow", "cepIntervalLiteral", 
                         "cepIntervalQualifiers", "tableBucketSample", "splitSample", 
                         "tableSample", "normfunction", "funcOp", "functionName", 
                         "windowFuncIgnoreNulls", "paramExpression", "castExpression", 
                         "existExpression", "widcardExpression", "inRightOp", 
                         "betweenRightOp", "likeanyRightOp", "likeallRightOp", 
                         "extractExpression", "substringExpression", "extractTarget", 
                         "seperatorFrom", "seperatorFor", "yearFuncExpression", 
                         "monthFuncExpression", "dayFuncExpression", "hourFuncExpression", 
                         "minuteFuncExpression", "secondFuncExpression", 
                         "caseExpression", "whenExpression", "condition", 
                         "resourceList", "resource", "resourceType", "graphPathStatement", 
                         "graphReference", "graphPattern", "graphEdge", 
                         "graphItem", "graphSelectClause", "graphSelectTable", 
                         "groupingSetExpression", "ordinaryGroupingSet", 
                         "groupByExpressionList", "groupByElements", "rollupClause", 
                         "cubeClause", "groupingSetsClause", "groupByClause", 
                         "groupByExpression", "hiveDataOpStatement", "loadStatement", 
                         "exportStatement", "importStatement", "createHyperbaseIndexStatement", 
                         "rebuildHolodeskGlobalIndexStatement", "fulltextColsList", 
                         "fulltextIndexAndProps", "fulltextIndexProps", 
                         "shardNumber", "dropHyperbaseIndexStatement", "hyperbaseColumnNameList", 
                         "indexWithLength", "segmentLength", "attachColumn", 
                         "mandarinStatement", "selectStatement", "subSelectStatement", 
                         "explicitInsertStatement", "batchInsertStatement", 
                         "withClause", "withClauseElement", "regular_body", 
                         "bulkCollect", "body", "insertClause", "whereClause", 
                         "qualifyClause", "havingClause", "havingCondition", 
                         "valuesClause", "valuesRow", "batchValuesRow", 
                         "batchValuesClause", "searchCondition", "hierarchicalQueryClause", 
                         "startWithCondition", "connectByCondition", "nocycle", 
                         "destination", "queryStatementExpression", "queryStatementExpressionPlus", 
                         "queryStatementMayInParenthese", "queryOperator", 
                         "queryStatement", "tableRangePartition", "intervalPartitionValue", 
                         "rangePartitionList", "rangePartition", "rangeValues", 
                         "tablePartitionDesc", "segmentAttributesClause", 
                         "segmentAttribute", "physicalAttributesClause", 
                         "physicalAttribute", "storageClause", "storageItem", 
                         "selectClauseParserStart", "selectClause", "selectList", 
                         "hintClause", "hintList", "hintItem", "stargateHintName", 
                         "stargateHintArgs", "stargateHintArgName", "hintName", 
                         "indexHintName", "mboHintName", "indexHintArgs", 
                         "mboHintArgs", "indexHintArgName", "mboHintArgName", 
                         "hintArgs", "hintArgName", "selectItem", "trfmClause", 
                         "selectExpression", "selectExpressionList", "rowFormat", 
                         "recordReader", "recordWriter", "selectTrfmClause", 
                         "sequenceOption", "sequenceOptionWithoutStart", 
                         "sequenceIncrement", "sequenceStartWith", "sequenceMaxValue", 
                         "sequenceMinValue", "sequenceCycle", "sequenceCache", 
                         "sequenceOrder", "orderByClause", "clusterByClause", 
                         "partitionByClause", "distributeByClause", "sortByClause", 
                         "limitClause", "partitioningSpec", "forUpdateClause", 
                         "window_clause", "window_defn", "window_specification", 
                         "window_frame", "window_range_expression", "window_value_expression", 
                         "window_timerange_expression", "window_frame_start_boundary", 
                         "window_frame_boundary", "window_time_frame_start_boundary", 
                         "window_time_frame_boundary", "window_time_frame_interval", 
                         "window_time_frame_resetinterval", "window_time_frame_cache_clause", 
                         "stream_window_clause", "stream_window_defn", "stream_window_specification", 
                         "stream_window_frame", "sessionwindow_expression", 
                         "sessionwindow_start_expression", "sessionwindow_stop_expression", 
                         "session_boundary_interval_expr", "sessionwindow_partition_expression", 
                         "sessionwindow_expire_expression", "sessionwindow_expire_operation_expression", 
                         "streamwindow_range_expression", "streamwindow_length", 
                         "streamwindow_slide_expression", "streamwindow_interval_expression", 
                         "streamwindow_separated_expression", "streamwindow_format_expression", 
                         "streamwindow_zerotime_expression", "streamIntervalLiteral", 
                         "streamIntervalQualifiers", "type", "primitiveType", 
                         "listType", "structType", "mapType", "unionType", 
                         "columnNameColonType", "colType", "colTypeList", 
                         "gotoStatement", "returnStatement", "continueStatement", 
                         "exitStatement", "dialectEndCase", "cursorParserStart", 
                         "cursorName", "cursorParamSpec", "cursorParamList", 
                         "cursorReturnSpec", "cursorBodySpec", "cursorDeclStatement", 
                         "openForOrOpenCursorStatement", "openForClause", 
                         "fetchCursorIntoStatement", "closeCursorStatement", 
                         "intoClause", "realParam", "parameters", "parameter", 
                         "parameter_attribute", "declareSpecItem", "declareVariable", 
                         "variable_name", "default_value", "return_type_spec", 
                         "size", "leftValue", "plFuncProcName", "declareException", 
                         "pragmaStatement", "pragmas", "pragmaExceptionInit", 
                         "pragmaAutonomousTransaction", "pragmaSeriallyReusable", 
                         "declare_pragma", "declare_record", "declare_table", 
                         "dynamicSqlParserStart", "executeImmediateStatement", 
                         "dynamicSqlStatement", "usingClause", "dynamicSqlBindArgs", 
                         "dynamicSqlBindArg", "assignStatement", "nullStatement", 
                         "exceptionParserStart", "raiseStatement", "exceptionHandlers", 
                         "exceptionHandler", "loopStatement", "forLoopBound", 
                         "rangeBound", "rangeBoundMin", "cursorBound", "forAllStatement", 
                         "saveExceptions", "forAllBound", "indicesBound", 
                         "attr", "attrs", "moleculeExpression", "ifStatement", 
                         "elsifStatement", "elseStatement", "dialectNonReserved", 
                         "dialectFunctionName", "nonSqlStatement", "statements", 
                         "sqlStatementEmpty", "sqlStatement", "plantStatement", 
                         "explainStatement", "execStatement", "pkgName", 
                         "createPackageStatement", "createPackageBodyStatement", 
                         "dropPackageStatement", "pkgDeclSpecItem", "pkgBodyDeclSpecItem", 
                         "declFunctionSpec", "declProcedureSpec", "anonExecStatement", 
                         "plBlockStatement", "plBlockBody", "atomExecStatement", 
                         "hintedStatement", "label", "labeledStatement", 
                         "dialectCreateOrReplaceStatement", "dialectDropStatement", 
                         "createSQL92FunctionStatement", "dropSQL92FunctionStatement", 
                         "createSQL92ProcedureStatement", "dropSQL92ProcedureStatement", 
                         "dialectLimitClause", "dialectCreateTemporaryTableStatement", 
                         "dialectCreateTableStatement", "dialectWithNoData", 
                         "dialectcolumnConstraint", "dialectTableDefinitionClause", 
                         "dialectPrimitiveType", "timeTypeLiteral", "dateLiteral", 
                         "timestampLiteral", "sysdateortimestampLiteral", 
                         "dateTimeExpression", "monthExpression", "intervalValue", 
                         "intervalLiteral", "intervalQualifiers", "typeParserStart", 
                         "datatype", "otherType", "scalarType", "scalarTypes", 
                         "typeDeclStatement", "recordTypeDef", "assocArrayOrNestedTableTypeDef", 
                         "indexType", "varrayTypeDef", "elementType", "refCursorTypeDef" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = InceptorOracleParser.ruleNames;
        this.literalNames = InceptorOracleParser.literalNames;
        this.symbolicNames = InceptorOracleParser.symbolicNames;

        /*  @Override
          public Object recoverFromMismatchedSet(IntStream input,
              RecognitionException re, BitSet follow) throws RecognitionException {
            throw re;
          }

          @Override
          public void displayRecognitionError(String[] tokenNames,
              RecognitionException e) {
            gParent.displayRecognitionError(tokenNames, e);
          }

          public void pushMsg(String msg, RecognizerSharedState state) {
            gParent.pushMsg(msg, state);
          }

          public void popMsg(RecognizerSharedState state) {
            gParent.popMsg(state);
          }

          public static String trimQuotes (String input) {
            if (input.length () > 1) {
              if ((input.charAt (0) == '"' && input.charAt (input.length () - 1) == '"')
                || (input.charAt (0) == '\'' && input.charAt (input.length () - 1) == '\'')) {
                return input.substring (1, input.length () - 1);
              }
            }
            return input;
          }
        */
          trimQuotes(input) {
            if (input.length > 1) {
              if ((input.charAt(0) == '"' && input.charAt(input.length - 1) == '"')
                || (input.charAt(0) == '\'' && input.charAt(input.length - 1) == '\'')) {
                return input.substring(1, input.length - 1);
              }
            }
            return input;
          }

    }

    get atn() {
        return atn;
    }



	aliasNonReserved() {
	    let localctx = new AliasNonReservedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, InceptorOracleParser.RULE_aliasNonReserved);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1448;
	        this.match(InceptorOracleParser.KW_AT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alias() {
	    let localctx = new AliasContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, InceptorOracleParser.RULE_alias);
	    try {
	        this.state = 1453;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case InceptorOracleParser.Identifier:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1450;
	            this.match(InceptorOracleParser.Identifier);
	            break;
	        case InceptorOracleParser.KW_AT:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1451;
	            this.aliasNonReserved();
	            break;
	        case InceptorOracleParser.StringLiteral:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1452;
	            localctx.value = this.match(InceptorOracleParser.StringLiteral);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifier() {
	    let localctx = new IdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, InceptorOracleParser.RULE_identifier);
	    try {
	        this.state = 1458;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case InceptorOracleParser.Identifier:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1455;
	            this.match(InceptorOracleParser.Identifier);
	            break;
	        case InceptorOracleParser.KW_TRUE:
	        case InceptorOracleParser.KW_FALSE:
	        case InceptorOracleParser.KW_ALL:
	        case InceptorOracleParser.KW_LIKE:
	        case InceptorOracleParser.KW_NO:
	        case InceptorOracleParser.KW_ANY:
	        case InceptorOracleParser.KW_EXISTS:
	        case InceptorOracleParser.KW_ASC:
	        case InceptorOracleParser.KW_DESC:
	        case InceptorOracleParser.KW_ORDER:
	        case InceptorOracleParser.KW_GROUP:
	        case InceptorOracleParser.KW_INCREMENT:
	        case InceptorOracleParser.KW_BY:
	        case InceptorOracleParser.KW_HASH:
	        case InceptorOracleParser.KW_INSERT:
	        case InceptorOracleParser.KW_OVERWRITE:
	        case InceptorOracleParser.KW_OUTER:
	        case InceptorOracleParser.KW_STREAMJOB:
	        case InceptorOracleParser.KW_STREAMJOBS:
	        case InceptorOracleParser.KW_AT:
	        case InceptorOracleParser.KW_LEFT:
	        case InceptorOracleParser.KW_RIGHT:
	        case InceptorOracleParser.KW_FULL:
	        case InceptorOracleParser.KW_PARTITION:
	        case InceptorOracleParser.KW_PARTITIONS:
	        case InceptorOracleParser.KW_PATTERN:
	        case InceptorOracleParser.KW_TABLE:
	        case InceptorOracleParser.KW_TABLES:
	        case InceptorOracleParser.KW_SEQUENCE:
	        case InceptorOracleParser.KW_SEQUENCES:
	        case InceptorOracleParser.KW_COLUMNS:
	        case InceptorOracleParser.KW_INDEX:
	        case InceptorOracleParser.KW_INDEXES:
	        case InceptorOracleParser.KW_REBUILD:
	        case InceptorOracleParser.KW_FUNCTIONS:
	        case InceptorOracleParser.KW_SHOW:
	        case InceptorOracleParser.KW_MSCK:
	        case InceptorOracleParser.KW_REPAIR:
	        case InceptorOracleParser.KW_DIRECTORY:
	        case InceptorOracleParser.KW_LOCAL:
	        case InceptorOracleParser.KW_GLOBAL:
	        case InceptorOracleParser.KW_USING:
	        case InceptorOracleParser.KW_CLUSTER:
	        case InceptorOracleParser.KW_DISTRIBUTE:
	        case InceptorOracleParser.KW_SORT:
	        case InceptorOracleParser.KW_UNION:
	        case InceptorOracleParser.KW_LOAD:
	        case InceptorOracleParser.KW_EXPORT:
	        case InceptorOracleParser.KW_IMPORT:
	        case InceptorOracleParser.KW_DATA:
	        case InceptorOracleParser.KW_INPATH:
	        case InceptorOracleParser.KW_IS:
	        case InceptorOracleParser.KW_NULLS:
	        case InceptorOracleParser.KW_CREATE:
	        case InceptorOracleParser.KW_EXTERNAL:
	        case InceptorOracleParser.KW_ALTER:
	        case InceptorOracleParser.KW_CHANGE:
	        case InceptorOracleParser.KW_FIRST:
	        case InceptorOracleParser.KW_LAST:
	        case InceptorOracleParser.KW_AFTER:
	        case InceptorOracleParser.KW_DESCRIBE:
	        case InceptorOracleParser.KW_DROP:
	        case InceptorOracleParser.KW_RENAME:
	        case InceptorOracleParser.KW_IGNORE:
	        case InceptorOracleParser.KW_RESPECT:
	        case InceptorOracleParser.KW_PROTECTION:
	        case InceptorOracleParser.KW_TO:
	        case InceptorOracleParser.KW_COMMENT:
	        case InceptorOracleParser.KW_PROMPT:
	        case InceptorOracleParser.KW_SPOOL:
	        case InceptorOracleParser.KW_BOOLEAN:
	        case InceptorOracleParser.KW_TINYINT:
	        case InceptorOracleParser.KW_BYTE:
	        case InceptorOracleParser.KW_SMALLINT:
	        case InceptorOracleParser.KW_INT:
	        case InceptorOracleParser.KW_BIGINT:
	        case InceptorOracleParser.KW_FLOAT:
	        case InceptorOracleParser.KW_DOUBLE:
	        case InceptorOracleParser.KW_DATE:
	        case InceptorOracleParser.KW_DATETIME:
	        case InceptorOracleParser.KW_TIMESTAMP:
	        case InceptorOracleParser.KW_TIME:
	        case InceptorOracleParser.KW_DECIMAL:
	        case InceptorOracleParser.KW_STRING:
	        case InceptorOracleParser.KW_GEO:
	        case InceptorOracleParser.KW_ARRAY:
	        case InceptorOracleParser.KW_STRUCT:
	        case InceptorOracleParser.KW_UNIONTYPE:
	        case InceptorOracleParser.KW_PARTITIONED:
	        case InceptorOracleParser.KW_ROUTED:
	        case InceptorOracleParser.KW_CLUSTERED:
	        case InceptorOracleParser.KW_SORTED:
	        case InceptorOracleParser.KW_NEXT:
	        case InceptorOracleParser.KW_NEXTVALUE:
	        case InceptorOracleParser.KW_BUCKETS:
	        case InceptorOracleParser.KW_ROW:
	        case InceptorOracleParser.KW_ROWS:
	        case InceptorOracleParser.KW_FORMAT:
	        case InceptorOracleParser.KW_DELIMITED:
	        case InceptorOracleParser.KW_FIELDS:
	        case InceptorOracleParser.KW_TERMINATED:
	        case InceptorOracleParser.KW_ESCAPED:
	        case InceptorOracleParser.KW_COLLECTION:
	        case InceptorOracleParser.KW_ITEMS:
	        case InceptorOracleParser.KW_KEYS:
	        case InceptorOracleParser.KW_KEY_TYPE:
	        case InceptorOracleParser.KW_LINES:
	        case InceptorOracleParser.KW_STORED:
	        case InceptorOracleParser.KW_FILEFORMAT:
	        case InceptorOracleParser.KW_SEQUENCEFILE:
	        case InceptorOracleParser.KW_TEXTFILE:
	        case InceptorOracleParser.KW_CSVFILE:
	        case InceptorOracleParser.KW_FWCFILE:
	        case InceptorOracleParser.KW_RCFILE:
	        case InceptorOracleParser.KW_ORCFILE:
	        case InceptorOracleParser.KW_HOLODESK:
	        case InceptorOracleParser.KW_STELLARDB:
	        case InceptorOracleParser.KW_ORCTRANSACTIONFILE:
	        case InceptorOracleParser.KW_PARQUET:
	        case InceptorOracleParser.KW_HYPERDRIVE:
	        case InceptorOracleParser.KW_ESDRIVE:
	        case InceptorOracleParser.KW_INPUTFORMAT:
	        case InceptorOracleParser.KW_OUTPUTFORMAT:
	        case InceptorOracleParser.KW_INPUTDRIVER:
	        case InceptorOracleParser.KW_OUTPUTDRIVER:
	        case InceptorOracleParser.KW_OFFLINE:
	        case InceptorOracleParser.KW_ENABLE:
	        case InceptorOracleParser.KW_DISABLE:
	        case InceptorOracleParser.KW_READONLY:
	        case InceptorOracleParser.KW_NO_DROP:
	        case InceptorOracleParser.KW_LOCATION:
	        case InceptorOracleParser.KW_BUCKET:
	        case InceptorOracleParser.KW_OUT:
	        case InceptorOracleParser.KW_OF:
	        case InceptorOracleParser.KW_PERCENT:
	        case InceptorOracleParser.KW_ADD:
	        case InceptorOracleParser.KW_REPLACE:
	        case InceptorOracleParser.KW_RLIKE:
	        case InceptorOracleParser.KW_REGEXP:
	        case InceptorOracleParser.KW_TEMPORARY:
	        case InceptorOracleParser.KW_RESOURCE:
	        case InceptorOracleParser.KW_RELOAD:
	        case InceptorOracleParser.KW_EXPLAIN:
	        case InceptorOracleParser.KW_FORMATTED:
	        case InceptorOracleParser.KW_PRETTY:
	        case InceptorOracleParser.KW_DEPENDENCY:
	        case InceptorOracleParser.KW_LOGICAL:
	        case InceptorOracleParser.KW_COST:
	        case InceptorOracleParser.KW_SERDE:
	        case InceptorOracleParser.KW_WITH:
	        case InceptorOracleParser.KW_WITHIN:
	        case InceptorOracleParser.KW_DEFERRED:
	        case InceptorOracleParser.KW_SERDEPROPERTIES:
	        case InceptorOracleParser.KW_DBPROPERTIES:
	        case InceptorOracleParser.KW_LIMIT:
	        case InceptorOracleParser.KW_UNSET:
	        case InceptorOracleParser.KW_TBLPROPERTIES:
	        case InceptorOracleParser.KW_IDXPROPERTIES:
	        case InceptorOracleParser.KW_VALUE_TYPE:
	        case InceptorOracleParser.KW_ELEM_TYPE:
	        case InceptorOracleParser.KW_PRIOR:
	        case InceptorOracleParser.KW_NOCYCLE:
	        case InceptorOracleParser.KW_MAPJOIN:
	        case InceptorOracleParser.KW_COMBINE:
	        case InceptorOracleParser.KW_COMBINE_STRUCT_INDEX:
	        case InceptorOracleParser.KW_GLKJOIN:
	        case InceptorOracleParser.KW_USE_INDEX:
	        case InceptorOracleParser.KW_STARGATE:
	        case InceptorOracleParser.KW_USE_BULKLOAD:
	        case InceptorOracleParser.KW_ADHOC:
	        case InceptorOracleParser.KW_PRECOMPILE:
	        case InceptorOracleParser.KW_STREAMTABLE:
	        case InceptorOracleParser.KW_STREAM:
	        case InceptorOracleParser.KW_RULEBASE:
	        case InceptorOracleParser.KW_RULEBASES:
	        case InceptorOracleParser.KW_RULE:
	        case InceptorOracleParser.KW_RULES:
	        case InceptorOracleParser.KW_MEET:
	        case InceptorOracleParser.KW_MUST:
	        case InceptorOracleParser.KW_MUSTNOT:
	        case InceptorOracleParser.KW_POLICY:
	        case InceptorOracleParser.KW_POLICIES:
	        case InceptorOracleParser.KW_REMOVE:
	        case InceptorOracleParser.KW_POLICYKEY:
	        case InceptorOracleParser.KW_POLICY_RULE:
	        case InceptorOracleParser.KW_LOOKUP:
	        case InceptorOracleParser.KW_RULE_FUNCTION:
	        case InceptorOracleParser.KW_RULE_FUNCTIONS:
	        case InceptorOracleParser.KW_RULE_FUNCTION_PROPERTIES:
	        case InceptorOracleParser.KW_HOLD_DDLTIME:
	        case InceptorOracleParser.KW_CLUSTERSTATUS:
	        case InceptorOracleParser.KW_UTC:
	        case InceptorOracleParser.KW_UTCTIMESTAMP:
	        case InceptorOracleParser.KW_LONG:
	        case InceptorOracleParser.KW_DELETE:
	        case InceptorOracleParser.KW_PLUS:
	        case InceptorOracleParser.KW_MINUS:
	        case InceptorOracleParser.KW_OP_CONCAT:
	        case InceptorOracleParser.KW_FETCH:
	        case InceptorOracleParser.KW_INTERSECT:
	        case InceptorOracleParser.KW_VIEW:
	        case InceptorOracleParser.KW_IN:
	        case InceptorOracleParser.KW_DATABASES:
	        case InceptorOracleParser.KW_MATERIALIZED:
	        case InceptorOracleParser.KW_SCHEMA:
	        case InceptorOracleParser.KW_SCHEMAS:
	        case InceptorOracleParser.KW_GRANT:
	        case InceptorOracleParser.KW_REVOKE:
	        case InceptorOracleParser.KW_SSL:
	        case InceptorOracleParser.KW_UNDO:
	        case InceptorOracleParser.KW_LOCK:
	        case InceptorOracleParser.KW_LOCKS:
	        case InceptorOracleParser.KW_UNLOCK:
	        case InceptorOracleParser.KW_SHARED:
	        case InceptorOracleParser.KW_EXCLUSIVE:
	        case InceptorOracleParser.KW_PROCEDURE:
	        case InceptorOracleParser.KW_UNSIGNED:
	        case InceptorOracleParser.KW_WHILE:
	        case InceptorOracleParser.KW_READ:
	        case InceptorOracleParser.KW_READS:
	        case InceptorOracleParser.KW_PURGE:
	        case InceptorOracleParser.KW_RANGE:
	        case InceptorOracleParser.KW_ANALYZE:
	        case InceptorOracleParser.KW_BEFORE:
	        case InceptorOracleParser.KW_BETWEEN:
	        case InceptorOracleParser.KW_BOTH:
	        case InceptorOracleParser.KW_BINARY:
	        case InceptorOracleParser.KW_DEFAULT:
	        case InceptorOracleParser.KW_TYPE:
	        case InceptorOracleParser.KW_TRIGGER:
	        case InceptorOracleParser.KW_RECORDREADER:
	        case InceptorOracleParser.KW_RECORDWRITER:
	        case InceptorOracleParser.KW_SEMI:
	        case InceptorOracleParser.KW_LATERAL:
	        case InceptorOracleParser.KW_TOUCH:
	        case InceptorOracleParser.KW_ARCHIVE:
	        case InceptorOracleParser.KW_UNARCHIVE:
	        case InceptorOracleParser.KW_COMPUTE:
	        case InceptorOracleParser.KW_STATISTICS:
	        case InceptorOracleParser.KW_USE:
	        case InceptorOracleParser.KW_OPTION:
	        case InceptorOracleParser.KW_CONCATENATE:
	        case InceptorOracleParser.KW_SHOW_DATABASE:
	        case InceptorOracleParser.KW_UPDATE:
	        case InceptorOracleParser.KW_RESTRICT:
	        case InceptorOracleParser.KW_CASCADE:
	        case InceptorOracleParser.KW_SKEWED:
	        case InceptorOracleParser.KW_DIRECTORIES:
	        case InceptorOracleParser.KW_WINDOWRESET:
	        case InceptorOracleParser.KW_SESSIONSTART:
	        case InceptorOracleParser.KW_SESSIONSTOP:
	        case InceptorOracleParser.KW_SESSIONEXPIRE:
	        case InceptorOracleParser.KW_SESSIONEXPIRE_DISCARD:
	        case InceptorOracleParser.KW_SESSIONEXPIRE_COMPLETE:
	        case InceptorOracleParser.KW_STREAMWINDOW:
	        case InceptorOracleParser.KW_STREAMWINDOWSLIDELENGTH:
	        case InceptorOracleParser.KW_STREAMWINDOWSEPARATED:
	        case InceptorOracleParser.KW_FOLLOWEDBY:
	        case InceptorOracleParser.KW_NOTFOLLOWEDBY:
	        case InceptorOracleParser.KW_NOTNEXT:
	        case InceptorOracleParser.KW_PATTERN_TIMES:
	        case InceptorOracleParser.KW_CURRVALUE:
	        case InceptorOracleParser.KW_GROUPING:
	        case InceptorOracleParser.KW_SETS:
	        case InceptorOracleParser.KW_TRUNCATE:
	        case InceptorOracleParser.KW_NOSCAN:
	        case InceptorOracleParser.KW_USER:
	        case InceptorOracleParser.KW_QUOTA:
	        case InceptorOracleParser.KW_PERMISSION:
	        case InceptorOracleParser.KW_ROLE:
	        case InceptorOracleParser.KW_ROLES:
	        case InceptorOracleParser.KW_INNER:
	        case InceptorOracleParser.KW_ADMIN:
	        case InceptorOracleParser.KW_OWNER:
	        case InceptorOracleParser.KW_PRINCIPALS:
	        case InceptorOracleParser.KW_CONSTANT:
	        case InceptorOracleParser.KW_CONSTRAINT:
	        case InceptorOracleParser.KW_YEAR:
	        case InceptorOracleParser.KW_MONTH:
	        case InceptorOracleParser.KW_DAY:
	        case InceptorOracleParser.KW_MINUTE:
	        case InceptorOracleParser.KW_HOUR:
	        case InceptorOracleParser.KW_SECOND:
	        case InceptorOracleParser.KW_INTERVAL:
	        case InceptorOracleParser.KW_NOMAXVALUE:
	        case InceptorOracleParser.KW_MINVALUE:
	        case InceptorOracleParser.KW_NOMINVALUE:
	        case InceptorOracleParser.KW_CYCLE:
	        case InceptorOracleParser.KW_CACHE:
	        case InceptorOracleParser.KW_CACHEDMETRIC:
	        case InceptorOracleParser.KW_CACHEDMETRICS:
	        case InceptorOracleParser.KW_NOCACHE:
	        case InceptorOracleParser.KW_NOORDER:
	        case InceptorOracleParser.KW_MERGE:
	        case InceptorOracleParser.KW_PLANT:
	        case InceptorOracleParser.KW_IMMEDIATE:
	        case InceptorOracleParser.KW_COMPACT:
	        case InceptorOracleParser.KW_STOP:
	        case InceptorOracleParser.KW_LIST:
	        case InceptorOracleParser.KW_TRANSACTION:
	        case InceptorOracleParser.KW_WORK:
	        case InceptorOracleParser.KW_SPACE:
	        case InceptorOracleParser.KW_CONF:
	        case InceptorOracleParser.KW_DEFINED:
	        case InceptorOracleParser.KW_INTEGER:
	        case InceptorOracleParser.KW_ONLY:
	        case InceptorOracleParser.KW_SERVER:
	        case InceptorOracleParser.KW_TRANSACTIONS:
	        case InceptorOracleParser.KW_URI:
	        case InceptorOracleParser.KW_WRITE:
	        case InceptorOracleParser.KW_FACL:
	        case InceptorOracleParser.KW_LEVEL:
	        case InceptorOracleParser.KW_PUBLIC:
	        case InceptorOracleParser.KW_LINKS:
	        case InceptorOracleParser.KW_CONNECT:
	        case InceptorOracleParser.KW_APPLICATION:
	        case InceptorOracleParser.KW_APPLICATIONS:
	        case InceptorOracleParser.KW_APP:
	        case InceptorOracleParser.KW_APPS:
	        case InceptorOracleParser.KW_INFINITE:
	        case InceptorOracleParser.KW_WAIT:
	        case InceptorOracleParser.KW_PRIMARY:
	        case InceptorOracleParser.KW_FOREIGN:
	        case InceptorOracleParser.KW_REFERENCES:
	        case InceptorOracleParser.KW_VALIDATE:
	        case InceptorOracleParser.KW_NOVALIDATE:
	        case InceptorOracleParser.KW_RELY:
	        case InceptorOracleParser.KW_NORELY:
	        case InceptorOracleParser.KW_KEY:
	        case InceptorOracleParser.KW_SEGMENT:
	        case InceptorOracleParser.KW_LENGTH:
	        case InceptorOracleParser.KW_ATTACH:
	        case InceptorOracleParser.KW_DETTACH:
	        case InceptorOracleParser.KW_SHARD:
	        case InceptorOracleParser.KW_NUM:
	        case InceptorOracleParser.KW_FULLTEXT:
	        case InceptorOracleParser.KW_TABLESIZE:
	        case InceptorOracleParser.KW_TABLET:
	        case InceptorOracleParser.KW_CAPACITY:
	        case InceptorOracleParser.KW_ANALYZER:
	        case InceptorOracleParser.KW_SYNC:
	        case InceptorOracleParser.KW_NO_INDEX:
	        case InceptorOracleParser.KW_LOG:
	        case InceptorOracleParser.KW_FILE:
	        case InceptorOracleParser.KW_JAR:
	        case InceptorOracleParser.KW_PERMANENT:
	        case InceptorOracleParser.KW_SCHEDULER:
	        case InceptorOracleParser.KW_MODE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1456;
	            this.commonNonReserved();
	            break;
	        case InceptorOracleParser.KW_SET:
	        case InceptorOracleParser.KW_VALUES:
	        case InceptorOracleParser.KW_SYSDATE:
	        case InceptorOracleParser.KW_FOUND:
	        case InceptorOracleParser.KW_NOCOPY:
	        case InceptorOracleParser.KW_VARRAY:
	        case InceptorOracleParser.KW_PACKAGE:
	        case InceptorOracleParser.KW_PACKAGES:
	        case InceptorOracleParser.KW_BODY:
	        case InceptorOracleParser.KW_ISOPEN:
	        case InceptorOracleParser.KW_NOTFOUND:
	        case InceptorOracleParser.KW_ROWCOUNT:
	        case InceptorOracleParser.KW_BULK_ROWCOUNT:
	        case InceptorOracleParser.KW_BULK_EXCEPTIONS:
	        case InceptorOracleParser.KW_REVERSE:
	        case InceptorOracleParser.KW_SAVE:
	        case InceptorOracleParser.KW_EXCEPTIONS:
	        case InceptorOracleParser.KW_INDICES:
	        case InceptorOracleParser.KW_REF:
	        case InceptorOracleParser.KW_YEARS:
	        case InceptorOracleParser.KW_MONTHS:
	        case InceptorOracleParser.KW_DAYS:
	        case InceptorOracleParser.KW_HOURS:
	        case InceptorOracleParser.KW_MINUTES:
	        case InceptorOracleParser.KW_SECONDS:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1457;
	            this.dialectNonReserved();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnAlias() {
	    let localctx = new ColumnAliasContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, InceptorOracleParser.RULE_columnAlias);
	    try {
	        this.state = 1462;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case InceptorOracleParser.KW_TRUE:
	        case InceptorOracleParser.KW_FALSE:
	        case InceptorOracleParser.KW_ALL:
	        case InceptorOracleParser.KW_LIKE:
	        case InceptorOracleParser.KW_NO:
	        case InceptorOracleParser.KW_ANY:
	        case InceptorOracleParser.KW_EXISTS:
	        case InceptorOracleParser.KW_ASC:
	        case InceptorOracleParser.KW_DESC:
	        case InceptorOracleParser.KW_ORDER:
	        case InceptorOracleParser.KW_GROUP:
	        case InceptorOracleParser.KW_INCREMENT:
	        case InceptorOracleParser.KW_BY:
	        case InceptorOracleParser.KW_HASH:
	        case InceptorOracleParser.KW_INSERT:
	        case InceptorOracleParser.KW_OVERWRITE:
	        case InceptorOracleParser.KW_OUTER:
	        case InceptorOracleParser.KW_STREAMJOB:
	        case InceptorOracleParser.KW_STREAMJOBS:
	        case InceptorOracleParser.KW_AT:
	        case InceptorOracleParser.KW_LEFT:
	        case InceptorOracleParser.KW_RIGHT:
	        case InceptorOracleParser.KW_FULL:
	        case InceptorOracleParser.KW_PARTITION:
	        case InceptorOracleParser.KW_PARTITIONS:
	        case InceptorOracleParser.KW_PATTERN:
	        case InceptorOracleParser.KW_TABLE:
	        case InceptorOracleParser.KW_TABLES:
	        case InceptorOracleParser.KW_SEQUENCE:
	        case InceptorOracleParser.KW_SEQUENCES:
	        case InceptorOracleParser.KW_COLUMNS:
	        case InceptorOracleParser.KW_INDEX:
	        case InceptorOracleParser.KW_INDEXES:
	        case InceptorOracleParser.KW_REBUILD:
	        case InceptorOracleParser.KW_FUNCTIONS:
	        case InceptorOracleParser.KW_SHOW:
	        case InceptorOracleParser.KW_MSCK:
	        case InceptorOracleParser.KW_REPAIR:
	        case InceptorOracleParser.KW_DIRECTORY:
	        case InceptorOracleParser.KW_LOCAL:
	        case InceptorOracleParser.KW_GLOBAL:
	        case InceptorOracleParser.KW_USING:
	        case InceptorOracleParser.KW_CLUSTER:
	        case InceptorOracleParser.KW_DISTRIBUTE:
	        case InceptorOracleParser.KW_SORT:
	        case InceptorOracleParser.KW_UNION:
	        case InceptorOracleParser.KW_LOAD:
	        case InceptorOracleParser.KW_EXPORT:
	        case InceptorOracleParser.KW_IMPORT:
	        case InceptorOracleParser.KW_DATA:
	        case InceptorOracleParser.KW_INPATH:
	        case InceptorOracleParser.KW_IS:
	        case InceptorOracleParser.KW_NULLS:
	        case InceptorOracleParser.KW_CREATE:
	        case InceptorOracleParser.KW_EXTERNAL:
	        case InceptorOracleParser.KW_ALTER:
	        case InceptorOracleParser.KW_CHANGE:
	        case InceptorOracleParser.KW_FIRST:
	        case InceptorOracleParser.KW_LAST:
	        case InceptorOracleParser.KW_AFTER:
	        case InceptorOracleParser.KW_DESCRIBE:
	        case InceptorOracleParser.KW_DROP:
	        case InceptorOracleParser.KW_RENAME:
	        case InceptorOracleParser.KW_IGNORE:
	        case InceptorOracleParser.KW_RESPECT:
	        case InceptorOracleParser.KW_PROTECTION:
	        case InceptorOracleParser.KW_TO:
	        case InceptorOracleParser.KW_COMMENT:
	        case InceptorOracleParser.KW_PROMPT:
	        case InceptorOracleParser.KW_SPOOL:
	        case InceptorOracleParser.KW_BOOLEAN:
	        case InceptorOracleParser.KW_TINYINT:
	        case InceptorOracleParser.KW_BYTE:
	        case InceptorOracleParser.KW_SMALLINT:
	        case InceptorOracleParser.KW_INT:
	        case InceptorOracleParser.KW_BIGINT:
	        case InceptorOracleParser.KW_FLOAT:
	        case InceptorOracleParser.KW_DOUBLE:
	        case InceptorOracleParser.KW_DATE:
	        case InceptorOracleParser.KW_DATETIME:
	        case InceptorOracleParser.KW_TIMESTAMP:
	        case InceptorOracleParser.KW_TIME:
	        case InceptorOracleParser.KW_DECIMAL:
	        case InceptorOracleParser.KW_STRING:
	        case InceptorOracleParser.KW_GEO:
	        case InceptorOracleParser.KW_ARRAY:
	        case InceptorOracleParser.KW_STRUCT:
	        case InceptorOracleParser.KW_UNIONTYPE:
	        case InceptorOracleParser.KW_PARTITIONED:
	        case InceptorOracleParser.KW_ROUTED:
	        case InceptorOracleParser.KW_CLUSTERED:
	        case InceptorOracleParser.KW_SORTED:
	        case InceptorOracleParser.KW_NEXT:
	        case InceptorOracleParser.KW_NEXTVALUE:
	        case InceptorOracleParser.KW_BUCKETS:
	        case InceptorOracleParser.KW_ROW:
	        case InceptorOracleParser.KW_ROWS:
	        case InceptorOracleParser.KW_FORMAT:
	        case InceptorOracleParser.KW_DELIMITED:
	        case InceptorOracleParser.KW_FIELDS:
	        case InceptorOracleParser.KW_TERMINATED:
	        case InceptorOracleParser.KW_ESCAPED:
	        case InceptorOracleParser.KW_COLLECTION:
	        case InceptorOracleParser.KW_ITEMS:
	        case InceptorOracleParser.KW_KEYS:
	        case InceptorOracleParser.KW_KEY_TYPE:
	        case InceptorOracleParser.KW_LINES:
	        case InceptorOracleParser.KW_STORED:
	        case InceptorOracleParser.KW_FILEFORMAT:
	        case InceptorOracleParser.KW_SEQUENCEFILE:
	        case InceptorOracleParser.KW_TEXTFILE:
	        case InceptorOracleParser.KW_CSVFILE:
	        case InceptorOracleParser.KW_FWCFILE:
	        case InceptorOracleParser.KW_RCFILE:
	        case InceptorOracleParser.KW_ORCFILE:
	        case InceptorOracleParser.KW_HOLODESK:
	        case InceptorOracleParser.KW_STELLARDB:
	        case InceptorOracleParser.KW_ORCTRANSACTIONFILE:
	        case InceptorOracleParser.KW_PARQUET:
	        case InceptorOracleParser.KW_HYPERDRIVE:
	        case InceptorOracleParser.KW_ESDRIVE:
	        case InceptorOracleParser.KW_INPUTFORMAT:
	        case InceptorOracleParser.KW_OUTPUTFORMAT:
	        case InceptorOracleParser.KW_INPUTDRIVER:
	        case InceptorOracleParser.KW_OUTPUTDRIVER:
	        case InceptorOracleParser.KW_OFFLINE:
	        case InceptorOracleParser.KW_ENABLE:
	        case InceptorOracleParser.KW_DISABLE:
	        case InceptorOracleParser.KW_READONLY:
	        case InceptorOracleParser.KW_NO_DROP:
	        case InceptorOracleParser.KW_LOCATION:
	        case InceptorOracleParser.KW_BUCKET:
	        case InceptorOracleParser.KW_OUT:
	        case InceptorOracleParser.KW_OF:
	        case InceptorOracleParser.KW_PERCENT:
	        case InceptorOracleParser.KW_ADD:
	        case InceptorOracleParser.KW_REPLACE:
	        case InceptorOracleParser.KW_RLIKE:
	        case InceptorOracleParser.KW_REGEXP:
	        case InceptorOracleParser.KW_TEMPORARY:
	        case InceptorOracleParser.KW_RESOURCE:
	        case InceptorOracleParser.KW_RELOAD:
	        case InceptorOracleParser.KW_EXPLAIN:
	        case InceptorOracleParser.KW_FORMATTED:
	        case InceptorOracleParser.KW_PRETTY:
	        case InceptorOracleParser.KW_DEPENDENCY:
	        case InceptorOracleParser.KW_LOGICAL:
	        case InceptorOracleParser.KW_COST:
	        case InceptorOracleParser.KW_SERDE:
	        case InceptorOracleParser.KW_WITH:
	        case InceptorOracleParser.KW_WITHIN:
	        case InceptorOracleParser.KW_DEFERRED:
	        case InceptorOracleParser.KW_SERDEPROPERTIES:
	        case InceptorOracleParser.KW_DBPROPERTIES:
	        case InceptorOracleParser.KW_LIMIT:
	        case InceptorOracleParser.KW_SET:
	        case InceptorOracleParser.KW_UNSET:
	        case InceptorOracleParser.KW_TBLPROPERTIES:
	        case InceptorOracleParser.KW_IDXPROPERTIES:
	        case InceptorOracleParser.KW_VALUE_TYPE:
	        case InceptorOracleParser.KW_ELEM_TYPE:
	        case InceptorOracleParser.KW_PRIOR:
	        case InceptorOracleParser.KW_NOCYCLE:
	        case InceptorOracleParser.KW_MAPJOIN:
	        case InceptorOracleParser.KW_COMBINE:
	        case InceptorOracleParser.KW_COMBINE_STRUCT_INDEX:
	        case InceptorOracleParser.KW_GLKJOIN:
	        case InceptorOracleParser.KW_USE_INDEX:
	        case InceptorOracleParser.KW_STARGATE:
	        case InceptorOracleParser.KW_USE_BULKLOAD:
	        case InceptorOracleParser.KW_ADHOC:
	        case InceptorOracleParser.KW_PRECOMPILE:
	        case InceptorOracleParser.KW_STREAMTABLE:
	        case InceptorOracleParser.KW_STREAM:
	        case InceptorOracleParser.KW_RULEBASE:
	        case InceptorOracleParser.KW_RULEBASES:
	        case InceptorOracleParser.KW_RULE:
	        case InceptorOracleParser.KW_RULES:
	        case InceptorOracleParser.KW_MEET:
	        case InceptorOracleParser.KW_MUST:
	        case InceptorOracleParser.KW_MUSTNOT:
	        case InceptorOracleParser.KW_POLICY:
	        case InceptorOracleParser.KW_POLICIES:
	        case InceptorOracleParser.KW_REMOVE:
	        case InceptorOracleParser.KW_POLICYKEY:
	        case InceptorOracleParser.KW_POLICY_RULE:
	        case InceptorOracleParser.KW_LOOKUP:
	        case InceptorOracleParser.KW_RULE_FUNCTION:
	        case InceptorOracleParser.KW_RULE_FUNCTIONS:
	        case InceptorOracleParser.KW_RULE_FUNCTION_PROPERTIES:
	        case InceptorOracleParser.KW_HOLD_DDLTIME:
	        case InceptorOracleParser.KW_CLUSTERSTATUS:
	        case InceptorOracleParser.KW_UTC:
	        case InceptorOracleParser.KW_UTCTIMESTAMP:
	        case InceptorOracleParser.KW_LONG:
	        case InceptorOracleParser.KW_DELETE:
	        case InceptorOracleParser.KW_PLUS:
	        case InceptorOracleParser.KW_MINUS:
	        case InceptorOracleParser.KW_OP_CONCAT:
	        case InceptorOracleParser.KW_FETCH:
	        case InceptorOracleParser.KW_INTERSECT:
	        case InceptorOracleParser.KW_VIEW:
	        case InceptorOracleParser.KW_IN:
	        case InceptorOracleParser.KW_DATABASES:
	        case InceptorOracleParser.KW_MATERIALIZED:
	        case InceptorOracleParser.KW_SCHEMA:
	        case InceptorOracleParser.KW_SCHEMAS:
	        case InceptorOracleParser.KW_GRANT:
	        case InceptorOracleParser.KW_REVOKE:
	        case InceptorOracleParser.KW_SSL:
	        case InceptorOracleParser.KW_UNDO:
	        case InceptorOracleParser.KW_LOCK:
	        case InceptorOracleParser.KW_LOCKS:
	        case InceptorOracleParser.KW_UNLOCK:
	        case InceptorOracleParser.KW_SHARED:
	        case InceptorOracleParser.KW_EXCLUSIVE:
	        case InceptorOracleParser.KW_PROCEDURE:
	        case InceptorOracleParser.KW_UNSIGNED:
	        case InceptorOracleParser.KW_WHILE:
	        case InceptorOracleParser.KW_READ:
	        case InceptorOracleParser.KW_READS:
	        case InceptorOracleParser.KW_PURGE:
	        case InceptorOracleParser.KW_RANGE:
	        case InceptorOracleParser.KW_ANALYZE:
	        case InceptorOracleParser.KW_BEFORE:
	        case InceptorOracleParser.KW_BETWEEN:
	        case InceptorOracleParser.KW_BOTH:
	        case InceptorOracleParser.KW_BINARY:
	        case InceptorOracleParser.KW_DEFAULT:
	        case InceptorOracleParser.KW_TYPE:
	        case InceptorOracleParser.KW_TRIGGER:
	        case InceptorOracleParser.KW_RECORDREADER:
	        case InceptorOracleParser.KW_RECORDWRITER:
	        case InceptorOracleParser.KW_SEMI:
	        case InceptorOracleParser.KW_LATERAL:
	        case InceptorOracleParser.KW_TOUCH:
	        case InceptorOracleParser.KW_ARCHIVE:
	        case InceptorOracleParser.KW_UNARCHIVE:
	        case InceptorOracleParser.KW_COMPUTE:
	        case InceptorOracleParser.KW_STATISTICS:
	        case InceptorOracleParser.KW_USE:
	        case InceptorOracleParser.KW_OPTION:
	        case InceptorOracleParser.KW_CONCATENATE:
	        case InceptorOracleParser.KW_SHOW_DATABASE:
	        case InceptorOracleParser.KW_UPDATE:
	        case InceptorOracleParser.KW_RESTRICT:
	        case InceptorOracleParser.KW_CASCADE:
	        case InceptorOracleParser.KW_SKEWED:
	        case InceptorOracleParser.KW_DIRECTORIES:
	        case InceptorOracleParser.KW_WINDOWRESET:
	        case InceptorOracleParser.KW_SESSIONSTART:
	        case InceptorOracleParser.KW_SESSIONSTOP:
	        case InceptorOracleParser.KW_SESSIONEXPIRE:
	        case InceptorOracleParser.KW_SESSIONEXPIRE_DISCARD:
	        case InceptorOracleParser.KW_SESSIONEXPIRE_COMPLETE:
	        case InceptorOracleParser.KW_STREAMWINDOW:
	        case InceptorOracleParser.KW_STREAMWINDOWSLIDELENGTH:
	        case InceptorOracleParser.KW_STREAMWINDOWSEPARATED:
	        case InceptorOracleParser.KW_FOLLOWEDBY:
	        case InceptorOracleParser.KW_NOTFOLLOWEDBY:
	        case InceptorOracleParser.KW_NOTNEXT:
	        case InceptorOracleParser.KW_PATTERN_TIMES:
	        case InceptorOracleParser.KW_CURRVALUE:
	        case InceptorOracleParser.KW_GROUPING:
	        case InceptorOracleParser.KW_SETS:
	        case InceptorOracleParser.KW_TRUNCATE:
	        case InceptorOracleParser.KW_NOSCAN:
	        case InceptorOracleParser.KW_USER:
	        case InceptorOracleParser.KW_QUOTA:
	        case InceptorOracleParser.KW_PERMISSION:
	        case InceptorOracleParser.KW_ROLE:
	        case InceptorOracleParser.KW_ROLES:
	        case InceptorOracleParser.KW_INNER:
	        case InceptorOracleParser.KW_ADMIN:
	        case InceptorOracleParser.KW_OWNER:
	        case InceptorOracleParser.KW_PRINCIPALS:
	        case InceptorOracleParser.KW_CONSTANT:
	        case InceptorOracleParser.KW_CONSTRAINT:
	        case InceptorOracleParser.KW_VALUES:
	        case InceptorOracleParser.KW_YEAR:
	        case InceptorOracleParser.KW_MONTH:
	        case InceptorOracleParser.KW_DAY:
	        case InceptorOracleParser.KW_MINUTE:
	        case InceptorOracleParser.KW_HOUR:
	        case InceptorOracleParser.KW_SECOND:
	        case InceptorOracleParser.KW_INTERVAL:
	        case InceptorOracleParser.KW_SYSDATE:
	        case InceptorOracleParser.KW_NOMAXVALUE:
	        case InceptorOracleParser.KW_MINVALUE:
	        case InceptorOracleParser.KW_NOMINVALUE:
	        case InceptorOracleParser.KW_CYCLE:
	        case InceptorOracleParser.KW_CACHE:
	        case InceptorOracleParser.KW_CACHEDMETRIC:
	        case InceptorOracleParser.KW_CACHEDMETRICS:
	        case InceptorOracleParser.KW_NOCACHE:
	        case InceptorOracleParser.KW_NOORDER:
	        case InceptorOracleParser.KW_MERGE:
	        case InceptorOracleParser.KW_PLANT:
	        case InceptorOracleParser.KW_IMMEDIATE:
	        case InceptorOracleParser.KW_COMPACT:
	        case InceptorOracleParser.KW_STOP:
	        case InceptorOracleParser.KW_LIST:
	        case InceptorOracleParser.KW_TRANSACTION:
	        case InceptorOracleParser.KW_WORK:
	        case InceptorOracleParser.KW_SPACE:
	        case InceptorOracleParser.KW_CONF:
	        case InceptorOracleParser.KW_DEFINED:
	        case InceptorOracleParser.KW_INTEGER:
	        case InceptorOracleParser.KW_ONLY:
	        case InceptorOracleParser.KW_SERVER:
	        case InceptorOracleParser.KW_TRANSACTIONS:
	        case InceptorOracleParser.KW_URI:
	        case InceptorOracleParser.KW_WRITE:
	        case InceptorOracleParser.KW_FACL:
	        case InceptorOracleParser.KW_FOUND:
	        case InceptorOracleParser.KW_LEVEL:
	        case InceptorOracleParser.KW_PUBLIC:
	        case InceptorOracleParser.KW_LINKS:
	        case InceptorOracleParser.KW_CONNECT:
	        case InceptorOracleParser.KW_APPLICATION:
	        case InceptorOracleParser.KW_APPLICATIONS:
	        case InceptorOracleParser.KW_APP:
	        case InceptorOracleParser.KW_APPS:
	        case InceptorOracleParser.KW_INFINITE:
	        case InceptorOracleParser.KW_WAIT:
	        case InceptorOracleParser.KW_PRIMARY:
	        case InceptorOracleParser.KW_FOREIGN:
	        case InceptorOracleParser.KW_REFERENCES:
	        case InceptorOracleParser.KW_VALIDATE:
	        case InceptorOracleParser.KW_NOVALIDATE:
	        case InceptorOracleParser.KW_RELY:
	        case InceptorOracleParser.KW_NORELY:
	        case InceptorOracleParser.KW_KEY:
	        case InceptorOracleParser.KW_SEGMENT:
	        case InceptorOracleParser.KW_LENGTH:
	        case InceptorOracleParser.KW_ATTACH:
	        case InceptorOracleParser.KW_DETTACH:
	        case InceptorOracleParser.KW_SHARD:
	        case InceptorOracleParser.KW_NUM:
	        case InceptorOracleParser.KW_FULLTEXT:
	        case InceptorOracleParser.KW_TABLESIZE:
	        case InceptorOracleParser.KW_TABLET:
	        case InceptorOracleParser.KW_CAPACITY:
	        case InceptorOracleParser.KW_ANALYZER:
	        case InceptorOracleParser.KW_SYNC:
	        case InceptorOracleParser.KW_NO_INDEX:
	        case InceptorOracleParser.KW_LOG:
	        case InceptorOracleParser.KW_FILE:
	        case InceptorOracleParser.KW_JAR:
	        case InceptorOracleParser.KW_PERMANENT:
	        case InceptorOracleParser.KW_SCHEDULER:
	        case InceptorOracleParser.KW_MODE:
	        case InceptorOracleParser.Identifier:
	        case InceptorOracleParser.KW_NOCOPY:
	        case InceptorOracleParser.KW_VARRAY:
	        case InceptorOracleParser.KW_PACKAGE:
	        case InceptorOracleParser.KW_PACKAGES:
	        case InceptorOracleParser.KW_BODY:
	        case InceptorOracleParser.KW_ISOPEN:
	        case InceptorOracleParser.KW_NOTFOUND:
	        case InceptorOracleParser.KW_ROWCOUNT:
	        case InceptorOracleParser.KW_BULK_ROWCOUNT:
	        case InceptorOracleParser.KW_BULK_EXCEPTIONS:
	        case InceptorOracleParser.KW_REVERSE:
	        case InceptorOracleParser.KW_SAVE:
	        case InceptorOracleParser.KW_EXCEPTIONS:
	        case InceptorOracleParser.KW_INDICES:
	        case InceptorOracleParser.KW_REF:
	        case InceptorOracleParser.KW_YEARS:
	        case InceptorOracleParser.KW_MONTHS:
	        case InceptorOracleParser.KW_DAYS:
	        case InceptorOracleParser.KW_HOURS:
	        case InceptorOracleParser.KW_MINUTES:
	        case InceptorOracleParser.KW_SECONDS:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1460;
	            this.identifier();
	            break;
	        case InceptorOracleParser.StringLiteral:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1461;
	            localctx.value = this.match(InceptorOracleParser.StringLiteral);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	commonNonReserved() {
	    let localctx = new CommonNonReservedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, InceptorOracleParser.RULE_commonNonReserved);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1464;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << InceptorOracleParser.KW_TRUE) | (1 << InceptorOracleParser.KW_FALSE) | (1 << InceptorOracleParser.KW_ALL) | (1 << InceptorOracleParser.KW_LIKE) | (1 << InceptorOracleParser.KW_NO) | (1 << InceptorOracleParser.KW_ANY) | (1 << InceptorOracleParser.KW_EXISTS) | (1 << InceptorOracleParser.KW_ASC) | (1 << InceptorOracleParser.KW_DESC) | (1 << InceptorOracleParser.KW_ORDER) | (1 << InceptorOracleParser.KW_GROUP) | (1 << InceptorOracleParser.KW_INCREMENT) | (1 << InceptorOracleParser.KW_BY) | (1 << InceptorOracleParser.KW_HASH) | (1 << InceptorOracleParser.KW_INSERT) | (1 << InceptorOracleParser.KW_OVERWRITE) | (1 << InceptorOracleParser.KW_OUTER))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (InceptorOracleParser.KW_STREAMJOB - 33)) | (1 << (InceptorOracleParser.KW_STREAMJOBS - 33)) | (1 << (InceptorOracleParser.KW_AT - 33)) | (1 << (InceptorOracleParser.KW_LEFT - 33)) | (1 << (InceptorOracleParser.KW_RIGHT - 33)) | (1 << (InceptorOracleParser.KW_FULL - 33)) | (1 << (InceptorOracleParser.KW_PARTITION - 33)) | (1 << (InceptorOracleParser.KW_PARTITIONS - 33)) | (1 << (InceptorOracleParser.KW_PATTERN - 33)) | (1 << (InceptorOracleParser.KW_TABLE - 33)) | (1 << (InceptorOracleParser.KW_TABLES - 33)) | (1 << (InceptorOracleParser.KW_SEQUENCE - 33)) | (1 << (InceptorOracleParser.KW_SEQUENCES - 33)) | (1 << (InceptorOracleParser.KW_COLUMNS - 33)) | (1 << (InceptorOracleParser.KW_INDEX - 33)) | (1 << (InceptorOracleParser.KW_INDEXES - 33)) | (1 << (InceptorOracleParser.KW_REBUILD - 33)) | (1 << (InceptorOracleParser.KW_FUNCTIONS - 33)) | (1 << (InceptorOracleParser.KW_SHOW - 33)) | (1 << (InceptorOracleParser.KW_MSCK - 33)) | (1 << (InceptorOracleParser.KW_REPAIR - 33)) | (1 << (InceptorOracleParser.KW_DIRECTORY - 33)) | (1 << (InceptorOracleParser.KW_LOCAL - 33)) | (1 << (InceptorOracleParser.KW_GLOBAL - 33)) | (1 << (InceptorOracleParser.KW_USING - 33)) | (1 << (InceptorOracleParser.KW_CLUSTER - 33)) | (1 << (InceptorOracleParser.KW_DISTRIBUTE - 33)) | (1 << (InceptorOracleParser.KW_SORT - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (InceptorOracleParser.KW_UNION - 65)) | (1 << (InceptorOracleParser.KW_LOAD - 65)) | (1 << (InceptorOracleParser.KW_EXPORT - 65)) | (1 << (InceptorOracleParser.KW_IMPORT - 65)) | (1 << (InceptorOracleParser.KW_DATA - 65)) | (1 << (InceptorOracleParser.KW_INPATH - 65)) | (1 << (InceptorOracleParser.KW_IS - 65)) | (1 << (InceptorOracleParser.KW_NULLS - 65)) | (1 << (InceptorOracleParser.KW_CREATE - 65)) | (1 << (InceptorOracleParser.KW_EXTERNAL - 65)) | (1 << (InceptorOracleParser.KW_ALTER - 65)) | (1 << (InceptorOracleParser.KW_CHANGE - 65)) | (1 << (InceptorOracleParser.KW_FIRST - 65)) | (1 << (InceptorOracleParser.KW_LAST - 65)) | (1 << (InceptorOracleParser.KW_AFTER - 65)) | (1 << (InceptorOracleParser.KW_DESCRIBE - 65)) | (1 << (InceptorOracleParser.KW_DROP - 65)) | (1 << (InceptorOracleParser.KW_RENAME - 65)) | (1 << (InceptorOracleParser.KW_IGNORE - 65)) | (1 << (InceptorOracleParser.KW_RESPECT - 65)) | (1 << (InceptorOracleParser.KW_PROTECTION - 65)) | (1 << (InceptorOracleParser.KW_TO - 65)) | (1 << (InceptorOracleParser.KW_COMMENT - 65)) | (1 << (InceptorOracleParser.KW_PROMPT - 65)) | (1 << (InceptorOracleParser.KW_SPOOL - 65)) | (1 << (InceptorOracleParser.KW_BOOLEAN - 65)) | (1 << (InceptorOracleParser.KW_TINYINT - 65)) | (1 << (InceptorOracleParser.KW_BYTE - 65)) | (1 << (InceptorOracleParser.KW_SMALLINT - 65)) | (1 << (InceptorOracleParser.KW_INT - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (InceptorOracleParser.KW_BIGINT - 97)) | (1 << (InceptorOracleParser.KW_FLOAT - 97)) | (1 << (InceptorOracleParser.KW_DOUBLE - 97)) | (1 << (InceptorOracleParser.KW_DATE - 97)) | (1 << (InceptorOracleParser.KW_DATETIME - 97)) | (1 << (InceptorOracleParser.KW_TIMESTAMP - 97)) | (1 << (InceptorOracleParser.KW_TIME - 97)) | (1 << (InceptorOracleParser.KW_DECIMAL - 97)) | (1 << (InceptorOracleParser.KW_STRING - 97)) | (1 << (InceptorOracleParser.KW_GEO - 97)) | (1 << (InceptorOracleParser.KW_ARRAY - 97)) | (1 << (InceptorOracleParser.KW_STRUCT - 97)) | (1 << (InceptorOracleParser.KW_UNIONTYPE - 97)) | (1 << (InceptorOracleParser.KW_PARTITIONED - 97)) | (1 << (InceptorOracleParser.KW_ROUTED - 97)) | (1 << (InceptorOracleParser.KW_CLUSTERED - 97)) | (1 << (InceptorOracleParser.KW_SORTED - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (InceptorOracleParser.KW_NEXT - 129)) | (1 << (InceptorOracleParser.KW_NEXTVALUE - 129)) | (1 << (InceptorOracleParser.KW_BUCKETS - 129)) | (1 << (InceptorOracleParser.KW_ROW - 129)) | (1 << (InceptorOracleParser.KW_ROWS - 129)) | (1 << (InceptorOracleParser.KW_FORMAT - 129)) | (1 << (InceptorOracleParser.KW_DELIMITED - 129)) | (1 << (InceptorOracleParser.KW_FIELDS - 129)) | (1 << (InceptorOracleParser.KW_TERMINATED - 129)) | (1 << (InceptorOracleParser.KW_ESCAPED - 129)) | (1 << (InceptorOracleParser.KW_COLLECTION - 129)) | (1 << (InceptorOracleParser.KW_ITEMS - 129)) | (1 << (InceptorOracleParser.KW_KEYS - 129)) | (1 << (InceptorOracleParser.KW_KEY_TYPE - 129)) | (1 << (InceptorOracleParser.KW_LINES - 129)) | (1 << (InceptorOracleParser.KW_STORED - 129)) | (1 << (InceptorOracleParser.KW_FILEFORMAT - 129)) | (1 << (InceptorOracleParser.KW_SEQUENCEFILE - 129)) | (1 << (InceptorOracleParser.KW_TEXTFILE - 129)) | (1 << (InceptorOracleParser.KW_CSVFILE - 129)) | (1 << (InceptorOracleParser.KW_FWCFILE - 129)) | (1 << (InceptorOracleParser.KW_RCFILE - 129)) | (1 << (InceptorOracleParser.KW_ORCFILE - 129)) | (1 << (InceptorOracleParser.KW_HOLODESK - 129)) | (1 << (InceptorOracleParser.KW_STELLARDB - 129)) | (1 << (InceptorOracleParser.KW_ORCTRANSACTIONFILE - 129)) | (1 << (InceptorOracleParser.KW_PARQUET - 129)))) !== 0) || ((((_la - 161)) & ~0x1f) == 0 && ((1 << (_la - 161)) & ((1 << (InceptorOracleParser.KW_HYPERDRIVE - 161)) | (1 << (InceptorOracleParser.KW_ESDRIVE - 161)) | (1 << (InceptorOracleParser.KW_INPUTFORMAT - 161)) | (1 << (InceptorOracleParser.KW_OUTPUTFORMAT - 161)) | (1 << (InceptorOracleParser.KW_INPUTDRIVER - 161)) | (1 << (InceptorOracleParser.KW_OUTPUTDRIVER - 161)) | (1 << (InceptorOracleParser.KW_OFFLINE - 161)) | (1 << (InceptorOracleParser.KW_ENABLE - 161)) | (1 << (InceptorOracleParser.KW_DISABLE - 161)) | (1 << (InceptorOracleParser.KW_READONLY - 161)) | (1 << (InceptorOracleParser.KW_NO_DROP - 161)) | (1 << (InceptorOracleParser.KW_LOCATION - 161)) | (1 << (InceptorOracleParser.KW_BUCKET - 161)) | (1 << (InceptorOracleParser.KW_OUT - 161)) | (1 << (InceptorOracleParser.KW_OF - 161)) | (1 << (InceptorOracleParser.KW_PERCENT - 161)) | (1 << (InceptorOracleParser.KW_ADD - 161)) | (1 << (InceptorOracleParser.KW_REPLACE - 161)) | (1 << (InceptorOracleParser.KW_RLIKE - 161)) | (1 << (InceptorOracleParser.KW_REGEXP - 161)) | (1 << (InceptorOracleParser.KW_TEMPORARY - 161)) | (1 << (InceptorOracleParser.KW_RESOURCE - 161)) | (1 << (InceptorOracleParser.KW_RELOAD - 161)) | (1 << (InceptorOracleParser.KW_EXPLAIN - 161)) | (1 << (InceptorOracleParser.KW_FORMATTED - 161)) | (1 << (InceptorOracleParser.KW_PRETTY - 161)) | (1 << (InceptorOracleParser.KW_DEPENDENCY - 161)))) !== 0) || ((((_la - 193)) & ~0x1f) == 0 && ((1 << (_la - 193)) & ((1 << (InceptorOracleParser.KW_LOGICAL - 193)) | (1 << (InceptorOracleParser.KW_COST - 193)) | (1 << (InceptorOracleParser.KW_SERDE - 193)) | (1 << (InceptorOracleParser.KW_WITH - 193)) | (1 << (InceptorOracleParser.KW_WITHIN - 193)) | (1 << (InceptorOracleParser.KW_DEFERRED - 193)) | (1 << (InceptorOracleParser.KW_SERDEPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_DBPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_LIMIT - 193)) | (1 << (InceptorOracleParser.KW_UNSET - 193)) | (1 << (InceptorOracleParser.KW_TBLPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_IDXPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_VALUE_TYPE - 193)) | (1 << (InceptorOracleParser.KW_ELEM_TYPE - 193)) | (1 << (InceptorOracleParser.KW_PRIOR - 193)) | (1 << (InceptorOracleParser.KW_NOCYCLE - 193)) | (1 << (InceptorOracleParser.KW_MAPJOIN - 193)) | (1 << (InceptorOracleParser.KW_COMBINE - 193)) | (1 << (InceptorOracleParser.KW_COMBINE_STRUCT_INDEX - 193)) | (1 << (InceptorOracleParser.KW_GLKJOIN - 193)) | (1 << (InceptorOracleParser.KW_USE_INDEX - 193)))) !== 0) || ((((_la - 225)) & ~0x1f) == 0 && ((1 << (_la - 225)) & ((1 << (InceptorOracleParser.KW_STARGATE - 225)) | (1 << (InceptorOracleParser.KW_USE_BULKLOAD - 225)) | (1 << (InceptorOracleParser.KW_ADHOC - 225)) | (1 << (InceptorOracleParser.KW_PRECOMPILE - 225)) | (1 << (InceptorOracleParser.KW_STREAMTABLE - 225)) | (1 << (InceptorOracleParser.KW_STREAM - 225)) | (1 << (InceptorOracleParser.KW_RULEBASE - 225)) | (1 << (InceptorOracleParser.KW_RULEBASES - 225)) | (1 << (InceptorOracleParser.KW_RULE - 225)) | (1 << (InceptorOracleParser.KW_RULES - 225)) | (1 << (InceptorOracleParser.KW_MEET - 225)) | (1 << (InceptorOracleParser.KW_MUST - 225)) | (1 << (InceptorOracleParser.KW_MUSTNOT - 225)) | (1 << (InceptorOracleParser.KW_POLICY - 225)) | (1 << (InceptorOracleParser.KW_POLICIES - 225)) | (1 << (InceptorOracleParser.KW_REMOVE - 225)) | (1 << (InceptorOracleParser.KW_POLICYKEY - 225)) | (1 << (InceptorOracleParser.KW_POLICY_RULE - 225)) | (1 << (InceptorOracleParser.KW_LOOKUP - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTION - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTIONS - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTION_PROPERTIES - 225)) | (1 << (InceptorOracleParser.KW_HOLD_DDLTIME - 225)) | (1 << (InceptorOracleParser.KW_CLUSTERSTATUS - 225)))) !== 0) || ((((_la - 257)) & ~0x1f) == 0 && ((1 << (_la - 257)) & ((1 << (InceptorOracleParser.KW_UTC - 257)) | (1 << (InceptorOracleParser.KW_UTCTIMESTAMP - 257)) | (1 << (InceptorOracleParser.KW_LONG - 257)) | (1 << (InceptorOracleParser.KW_DELETE - 257)) | (1 << (InceptorOracleParser.KW_PLUS - 257)) | (1 << (InceptorOracleParser.KW_MINUS - 257)) | (1 << (InceptorOracleParser.KW_OP_CONCAT - 257)) | (1 << (InceptorOracleParser.KW_FETCH - 257)) | (1 << (InceptorOracleParser.KW_INTERSECT - 257)) | (1 << (InceptorOracleParser.KW_VIEW - 257)) | (1 << (InceptorOracleParser.KW_IN - 257)) | (1 << (InceptorOracleParser.KW_DATABASES - 257)) | (1 << (InceptorOracleParser.KW_MATERIALIZED - 257)) | (1 << (InceptorOracleParser.KW_SCHEMA - 257)) | (1 << (InceptorOracleParser.KW_SCHEMAS - 257)) | (1 << (InceptorOracleParser.KW_GRANT - 257)) | (1 << (InceptorOracleParser.KW_REVOKE - 257)) | (1 << (InceptorOracleParser.KW_SSL - 257)) | (1 << (InceptorOracleParser.KW_UNDO - 257)) | (1 << (InceptorOracleParser.KW_LOCK - 257)) | (1 << (InceptorOracleParser.KW_LOCKS - 257)) | (1 << (InceptorOracleParser.KW_UNLOCK - 257)) | (1 << (InceptorOracleParser.KW_SHARED - 257)) | (1 << (InceptorOracleParser.KW_EXCLUSIVE - 257)) | (1 << (InceptorOracleParser.KW_PROCEDURE - 257)) | (1 << (InceptorOracleParser.KW_UNSIGNED - 257)) | (1 << (InceptorOracleParser.KW_WHILE - 257)) | (1 << (InceptorOracleParser.KW_READ - 257)) | (1 << (InceptorOracleParser.KW_READS - 257)))) !== 0) || ((((_la - 289)) & ~0x1f) == 0 && ((1 << (_la - 289)) & ((1 << (InceptorOracleParser.KW_PURGE - 289)) | (1 << (InceptorOracleParser.KW_RANGE - 289)) | (1 << (InceptorOracleParser.KW_ANALYZE - 289)) | (1 << (InceptorOracleParser.KW_BEFORE - 289)) | (1 << (InceptorOracleParser.KW_BETWEEN - 289)) | (1 << (InceptorOracleParser.KW_BOTH - 289)) | (1 << (InceptorOracleParser.KW_BINARY - 289)) | (1 << (InceptorOracleParser.KW_DEFAULT - 289)) | (1 << (InceptorOracleParser.KW_TYPE - 289)) | (1 << (InceptorOracleParser.KW_TRIGGER - 289)) | (1 << (InceptorOracleParser.KW_RECORDREADER - 289)) | (1 << (InceptorOracleParser.KW_RECORDWRITER - 289)) | (1 << (InceptorOracleParser.KW_SEMI - 289)) | (1 << (InceptorOracleParser.KW_LATERAL - 289)) | (1 << (InceptorOracleParser.KW_TOUCH - 289)) | (1 << (InceptorOracleParser.KW_ARCHIVE - 289)) | (1 << (InceptorOracleParser.KW_UNARCHIVE - 289)) | (1 << (InceptorOracleParser.KW_COMPUTE - 289)) | (1 << (InceptorOracleParser.KW_STATISTICS - 289)) | (1 << (InceptorOracleParser.KW_USE - 289)) | (1 << (InceptorOracleParser.KW_OPTION - 289)) | (1 << (InceptorOracleParser.KW_CONCATENATE - 289)) | (1 << (InceptorOracleParser.KW_SHOW_DATABASE - 289)) | (1 << (InceptorOracleParser.KW_UPDATE - 289)) | (1 << (InceptorOracleParser.KW_RESTRICT - 289)) | (1 << (InceptorOracleParser.KW_CASCADE - 289)) | (1 << (InceptorOracleParser.KW_SKEWED - 289)))) !== 0) || ((((_la - 323)) & ~0x1f) == 0 && ((1 << (_la - 323)) & ((1 << (InceptorOracleParser.KW_DIRECTORIES - 323)) | (1 << (InceptorOracleParser.KW_WINDOWRESET - 323)) | (1 << (InceptorOracleParser.KW_SESSIONSTART - 323)) | (1 << (InceptorOracleParser.KW_SESSIONSTOP - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE_DISCARD - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE_COMPLETE - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOW - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOWSLIDELENGTH - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOWSEPARATED - 323)) | (1 << (InceptorOracleParser.KW_FOLLOWEDBY - 323)) | (1 << (InceptorOracleParser.KW_NOTFOLLOWEDBY - 323)) | (1 << (InceptorOracleParser.KW_NOTNEXT - 323)) | (1 << (InceptorOracleParser.KW_PATTERN_TIMES - 323)) | (1 << (InceptorOracleParser.KW_CURRVALUE - 323)) | (1 << (InceptorOracleParser.KW_GROUPING - 323)) | (1 << (InceptorOracleParser.KW_SETS - 323)))) !== 0) || ((((_la - 355)) & ~0x1f) == 0 && ((1 << (_la - 355)) & ((1 << (InceptorOracleParser.KW_TRUNCATE - 355)) | (1 << (InceptorOracleParser.KW_NOSCAN - 355)) | (1 << (InceptorOracleParser.KW_USER - 355)) | (1 << (InceptorOracleParser.KW_QUOTA - 355)) | (1 << (InceptorOracleParser.KW_PERMISSION - 355)) | (1 << (InceptorOracleParser.KW_ROLE - 355)) | (1 << (InceptorOracleParser.KW_ROLES - 355)) | (1 << (InceptorOracleParser.KW_INNER - 355)) | (1 << (InceptorOracleParser.KW_ADMIN - 355)) | (1 << (InceptorOracleParser.KW_OWNER - 355)) | (1 << (InceptorOracleParser.KW_PRINCIPALS - 355)) | (1 << (InceptorOracleParser.KW_CONSTANT - 355)) | (1 << (InceptorOracleParser.KW_CONSTRAINT - 355)) | (1 << (InceptorOracleParser.KW_YEAR - 355)) | (1 << (InceptorOracleParser.KW_MONTH - 355)) | (1 << (InceptorOracleParser.KW_DAY - 355)) | (1 << (InceptorOracleParser.KW_MINUTE - 355)) | (1 << (InceptorOracleParser.KW_HOUR - 355)))) !== 0) || ((((_la - 387)) & ~0x1f) == 0 && ((1 << (_la - 387)) & ((1 << (InceptorOracleParser.KW_SECOND - 387)) | (1 << (InceptorOracleParser.KW_INTERVAL - 387)) | (1 << (InceptorOracleParser.KW_NOMAXVALUE - 387)) | (1 << (InceptorOracleParser.KW_MINVALUE - 387)) | (1 << (InceptorOracleParser.KW_NOMINVALUE - 387)) | (1 << (InceptorOracleParser.KW_CYCLE - 387)) | (1 << (InceptorOracleParser.KW_CACHE - 387)) | (1 << (InceptorOracleParser.KW_CACHEDMETRIC - 387)) | (1 << (InceptorOracleParser.KW_CACHEDMETRICS - 387)) | (1 << (InceptorOracleParser.KW_NOCACHE - 387)) | (1 << (InceptorOracleParser.KW_NOORDER - 387)) | (1 << (InceptorOracleParser.KW_MERGE - 387)) | (1 << (InceptorOracleParser.KW_PLANT - 387)) | (1 << (InceptorOracleParser.KW_IMMEDIATE - 387)) | (1 << (InceptorOracleParser.KW_COMPACT - 387)) | (1 << (InceptorOracleParser.KW_STOP - 387)) | (1 << (InceptorOracleParser.KW_LIST - 387)))) !== 0) || ((((_la - 419)) & ~0x1f) == 0 && ((1 << (_la - 419)) & ((1 << (InceptorOracleParser.KW_TRANSACTION - 419)) | (1 << (InceptorOracleParser.KW_WORK - 419)) | (1 << (InceptorOracleParser.KW_SPACE - 419)) | (1 << (InceptorOracleParser.KW_CONF - 419)) | (1 << (InceptorOracleParser.KW_DEFINED - 419)) | (1 << (InceptorOracleParser.KW_INTEGER - 419)) | (1 << (InceptorOracleParser.KW_ONLY - 419)) | (1 << (InceptorOracleParser.KW_SERVER - 419)) | (1 << (InceptorOracleParser.KW_TRANSACTIONS - 419)) | (1 << (InceptorOracleParser.KW_URI - 419)) | (1 << (InceptorOracleParser.KW_WRITE - 419)) | (1 << (InceptorOracleParser.KW_FACL - 419)) | (1 << (InceptorOracleParser.KW_LEVEL - 419)) | (1 << (InceptorOracleParser.KW_PUBLIC - 419)) | (1 << (InceptorOracleParser.KW_LINKS - 419)) | (1 << (InceptorOracleParser.KW_CONNECT - 419)) | (1 << (InceptorOracleParser.KW_APPLICATION - 419)) | (1 << (InceptorOracleParser.KW_APPLICATIONS - 419)) | (1 << (InceptorOracleParser.KW_APP - 419)) | (1 << (InceptorOracleParser.KW_APPS - 419)) | (1 << (InceptorOracleParser.KW_INFINITE - 419)))) !== 0) || ((((_la - 451)) & ~0x1f) == 0 && ((1 << (_la - 451)) & ((1 << (InceptorOracleParser.KW_WAIT - 451)) | (1 << (InceptorOracleParser.KW_PRIMARY - 451)) | (1 << (InceptorOracleParser.KW_FOREIGN - 451)) | (1 << (InceptorOracleParser.KW_REFERENCES - 451)) | (1 << (InceptorOracleParser.KW_VALIDATE - 451)) | (1 << (InceptorOracleParser.KW_NOVALIDATE - 451)) | (1 << (InceptorOracleParser.KW_RELY - 451)) | (1 << (InceptorOracleParser.KW_NORELY - 451)) | (1 << (InceptorOracleParser.KW_KEY - 451)) | (1 << (InceptorOracleParser.KW_SEGMENT - 451)) | (1 << (InceptorOracleParser.KW_LENGTH - 451)) | (1 << (InceptorOracleParser.KW_ATTACH - 451)) | (1 << (InceptorOracleParser.KW_DETTACH - 451)) | (1 << (InceptorOracleParser.KW_SHARD - 451)) | (1 << (InceptorOracleParser.KW_NUM - 451)) | (1 << (InceptorOracleParser.KW_FULLTEXT - 451)) | (1 << (InceptorOracleParser.KW_TABLESIZE - 451)) | (1 << (InceptorOracleParser.KW_TABLET - 451)) | (1 << (InceptorOracleParser.KW_CAPACITY - 451)) | (1 << (InceptorOracleParser.KW_ANALYZER - 451)) | (1 << (InceptorOracleParser.KW_SYNC - 451)) | (1 << (InceptorOracleParser.KW_NO_INDEX - 451)) | (1 << (InceptorOracleParser.KW_LOG - 451)) | (1 << (InceptorOracleParser.KW_FILE - 451)) | (1 << (InceptorOracleParser.KW_JAR - 451)) | (1 << (InceptorOracleParser.KW_PERMANENT - 451)))) !== 0) || _la===InceptorOracleParser.KW_SCHEDULER || _la===InceptorOracleParser.KW_MODE)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyValueProperty() {
	    let localctx = new KeyValuePropertyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, InceptorOracleParser.RULE_keyValueProperty);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1466;
	        localctx.key = this.match(InceptorOracleParser.StringLiteral);
	        this.state = 1467;
	        this.match(InceptorOracleParser.EQUAL);
	        this.state = 1468;
	        localctx.value = this.match(InceptorOracleParser.StringLiteral);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyProperty() {
	    let localctx = new KeyPropertyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, InceptorOracleParser.RULE_keyProperty);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1470;
	        localctx.key = this.match(InceptorOracleParser.StringLiteral);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableName() {
	    let localctx = new TableNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, InceptorOracleParser.RULE_tableName);
	    try {
	        this.state = 1484;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1472;
	            localctx.db = this.identifier();
	            this.state = 1473;
	            this.match(InceptorOracleParser.DOT);
	            this.state = 1474;
	            localctx.tab = this.identifier();
	            this.state = 1477;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,3,this._ctx);
	            if(la_===1) {
	                this.state = 1475;
	                localctx.at = this.match(InceptorOracleParser.AT);
	                this.state = 1476;
	                localctx.link = this.identifier();

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1479;
	            localctx.tab = this.identifier();
	            this.state = 1482;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,4,this._ctx);
	            if(la_===1) {
	                this.state = 1480;
	                localctx.at = this.match(InceptorOracleParser.AT);
	                this.state = 1481;
	                localctx.link = this.identifier();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	valuesName() {
	    let localctx = new ValuesNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, InceptorOracleParser.RULE_valuesName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1486;
	        localctx.tab = this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	viewName() {
	    let localctx = new ViewNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, InceptorOracleParser.RULE_viewName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1488;
	        this.tableName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableAlias() {
	    let localctx = new TableAliasContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, InceptorOracleParser.RULE_tableAlias);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1490;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sequenceName() {
	    let localctx = new SequenceNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, InceptorOracleParser.RULE_sequenceName);
	    try {
	        this.state = 1497;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,6,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1492;
	            localctx.db = this.identifier();
	            this.state = 1493;
	            this.match(InceptorOracleParser.DOT);
	            this.state = 1494;
	            localctx.seq = this.identifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1496;
	            localctx.seq = this.identifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partitionSpec() {
	    let localctx = new PartitionSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, InceptorOracleParser.RULE_partitionSpec);
	    var _la = 0; // Token type
	    try {
	        this.state = 1513;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,8,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1499;
	            this.match(InceptorOracleParser.KW_PARTITION);
	            this.state = 1500;
	            this.match(InceptorOracleParser.LPAREN);
	            this.state = 1501;
	            this.partitionVal();
	            this.state = 1506;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===InceptorOracleParser.COMMA) {
	                this.state = 1502;
	                this.match(InceptorOracleParser.COMMA);
	                this.state = 1503;
	                this.partitionVal();
	                this.state = 1508;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1509;
	            this.match(InceptorOracleParser.RPAREN);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1511;
	            this.match(InceptorOracleParser.KW_PARTITION);
	            this.state = 1512;
	            this.identifierList();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partitionVal() {
	    let localctx = new PartitionValContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, InceptorOracleParser.RULE_partitionVal);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1515;
	        this.identifier();
	        this.state = 1518;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.EQUAL) {
	            this.state = 1516;
	            this.match(InceptorOracleParser.EQUAL);
	            this.state = 1517;
	            this.constant();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	storedAsDirs() {
	    let localctx = new StoredAsDirsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, InceptorOracleParser.RULE_storedAsDirs);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1520;
	        this.match(InceptorOracleParser.KW_STORED);
	        this.state = 1521;
	        this.match(InceptorOracleParser.KW_AS);
	        this.state = 1522;
	        this.match(InceptorOracleParser.KW_DIRECTORIES);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orReplace() {
	    let localctx = new OrReplaceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, InceptorOracleParser.RULE_orReplace);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1524;
	        this.match(InceptorOracleParser.KW_OR);
	        this.state = 1525;
	        this.match(InceptorOracleParser.KW_REPLACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnList() {
	    let localctx = new ColumnListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, InceptorOracleParser.RULE_columnList);
	    try {
	        this.state = 1529;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,10,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1527;
	            this.columnNameTypeList();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1528;
	            this.columnNameList();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnNameTypeList() {
	    let localctx = new ColumnNameTypeListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, InceptorOracleParser.RULE_columnNameTypeList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1531;
	        this.columnNameType();
	        this.state = 1536;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===InceptorOracleParser.COMMA) {
	            this.state = 1532;
	            this.match(InceptorOracleParser.COMMA);
	            this.state = 1533;
	            this.columnNameType();
	            this.state = 1538;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnNameColonTypeList() {
	    let localctx = new ColumnNameColonTypeListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, InceptorOracleParser.RULE_columnNameColonTypeList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1539;
	        this.columnNameColonType();
	        this.state = 1544;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===InceptorOracleParser.COMMA) {
	            this.state = 1540;
	            this.match(InceptorOracleParser.COMMA);
	            this.state = 1541;
	            this.columnNameColonType();
	            this.state = 1546;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnNameOrderList() {
	    let localctx = new ColumnNameOrderListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, InceptorOracleParser.RULE_columnNameOrderList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1547;
	        this.columnNameOrder();
	        this.state = 1552;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===InceptorOracleParser.COMMA) {
	            this.state = 1548;
	            this.match(InceptorOracleParser.COMMA);
	            this.state = 1549;
	            this.columnNameOrder();
	            this.state = 1554;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnNameOrder() {
	    let localctx = new ColumnNameOrderContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, InceptorOracleParser.RULE_columnNameOrder);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1555;
	        this.identifier();
	        this.state = 1558;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case InceptorOracleParser.KW_ASC:
	        	this.state = 1556;
	        	localctx.asc = this.match(InceptorOracleParser.KW_ASC);
	        	break;
	        case InceptorOracleParser.KW_DESC:
	        	this.state = 1557;
	        	localctx.desc = this.match(InceptorOracleParser.KW_DESC);
	        	break;
	        case InceptorOracleParser.COMMA:
	        case InceptorOracleParser.RPAREN:
	        	break;
	        default:
	        	break;
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnNameCommentList() {
	    let localctx = new ColumnNameCommentListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, InceptorOracleParser.RULE_columnNameCommentList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1560;
	        this.columnNameComment();
	        this.state = 1565;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===InceptorOracleParser.COMMA) {
	            this.state = 1561;
	            this.match(InceptorOracleParser.COMMA);
	            this.state = 1562;
	            this.columnNameComment();
	            this.state = 1567;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnNameComment() {
	    let localctx = new ColumnNameCommentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, InceptorOracleParser.RULE_columnNameComment);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1568;
	        localctx.colName = this.identifier();
	        this.state = 1570;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_COMMENT) {
	            this.state = 1569;
	            localctx.comment = this.columnComment();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nullsOrder() {
	    let localctx = new NullsOrderContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, InceptorOracleParser.RULE_nullsOrder);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1572;
	        this.match(InceptorOracleParser.KW_NULLS);
	        this.state = 1573;
	        _la = this._input.LA(1);
	        if(!(_la===InceptorOracleParser.KW_FIRST || _la===InceptorOracleParser.KW_LAST)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnRefOrder() {
	    let localctx = new ColumnRefOrderContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, InceptorOracleParser.RULE_columnRefOrder);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1575;
	        this.expression();
	        this.state = 1578;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
	        if(la_===1) {
	            this.state = 1576;
	            localctx.asc = this.match(InceptorOracleParser.KW_ASC);

	        } else if(la_===2) {
	            this.state = 1577;
	            localctx.desc = this.match(InceptorOracleParser.KW_DESC);

	        }
	        this.state = 1581;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,18,this._ctx);
	        if(la_===1) {
	            this.state = 1580;
	            this.nullsOrder();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnNameType() {
	    let localctx = new ColumnNameTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, InceptorOracleParser.RULE_columnNameType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1583;
	        localctx.colName = this.identifier();
	        this.state = 1584;
	        this.colType();
	        this.state = 1586;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,19,this._ctx);
	        if(la_===1) {
	            this.state = 1585;
	            this.columnAnalyzer();

	        }
	        this.state = 1589;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,20,this._ctx);
	        if(la_===1) {
	            this.state = 1588;
	            this.defaultVauleOrColumnConstraint();

	        }
	        this.state = 1592;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,21,this._ctx);
	        if(la_===1) {
	            this.state = 1591;
	            this.columnComment();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnAnalyzer() {
	    let localctx = new ColumnAnalyzerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, InceptorOracleParser.RULE_columnAnalyzer);
	    try {
	        this.state = 1603;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case InceptorOracleParser.KW_WITH:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1594;
	            this.match(InceptorOracleParser.KW_WITH);
	            this.state = 1595;
	            this.match(InceptorOracleParser.KW_ANALYZER);
	            this.state = 1596;
	            localctx.p = this.match(InceptorOracleParser.StringLiteral);
	            this.state = 1597;
	            localctx.analyzer = this.match(InceptorOracleParser.StringLiteral);
	            break;
	        case InceptorOracleParser.KW_APPEND:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1598;
	            this.match(InceptorOracleParser.KW_APPEND);
	            this.state = 1599;
	            this.match(InceptorOracleParser.KW_ANALYZER);
	            this.state = 1600;
	            localctx.p = this.match(InceptorOracleParser.StringLiteral);
	            this.state = 1601;
	            localctx.analyzer = this.match(InceptorOracleParser.StringLiteral);
	            break;
	        case InceptorOracleParser.KW_NO_INDEX:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1602;
	            this.match(InceptorOracleParser.KW_NO_INDEX);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defaultValueNode() {
	    let localctx = new DefaultValueNodeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, InceptorOracleParser.RULE_defaultValueNode);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1605;
	        this.match(InceptorOracleParser.KW_DEFAULT);
	        this.state = 1606;
	        localctx.defaultVal = this.constantOrNull();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constantOrNull() {
	    let localctx = new ConstantOrNullContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, InceptorOracleParser.RULE_constantOrNull);
	    try {
	        this.state = 1610;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case InceptorOracleParser.KW_TRUE:
	        case InceptorOracleParser.KW_FALSE:
	        case InceptorOracleParser.KW_DATE:
	        case InceptorOracleParser.KW_TIMESTAMP:
	        case InceptorOracleParser.KW_UNLIMITED:
	        case InceptorOracleParser.KW_INTERVAL:
	        case InceptorOracleParser.KW_SYSDATE:
	        case InceptorOracleParser.KW_SYSTIMESTAMP:
	        case InceptorOracleParser.KW_SYSTIME:
	        case InceptorOracleParser.KW_MAXVALUE:
	        case InceptorOracleParser.MINUS:
	        case InceptorOracleParser.StringLiteral:
	        case InceptorOracleParser.CharSetLiteral:
	        case InceptorOracleParser.BigintLiteral:
	        case InceptorOracleParser.SmallintLiteral:
	        case InceptorOracleParser.TinyintLiteral:
	        case InceptorOracleParser.DecimalLiteral:
	        case InceptorOracleParser.Number:
	        case InceptorOracleParser.CharSetName:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1608;
	            this.defaultConstantValue();
	            break;
	        case InceptorOracleParser.KW_NULL:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1609;
	            this.match(InceptorOracleParser.KW_NULL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnComment() {
	    let localctx = new ColumnCommentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, InceptorOracleParser.RULE_columnComment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1612;
	        this.match(InceptorOracleParser.KW_COMMENT);
	        this.state = 1613;
	        localctx.comment = this.match(InceptorOracleParser.StringLiteral);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnNameList() {
	    let localctx = new ColumnNameListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, InceptorOracleParser.RULE_columnNameList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1615;
	        this.columnName();
	        this.state = 1620;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===InceptorOracleParser.COMMA) {
	            this.state = 1616;
	            this.match(InceptorOracleParser.COMMA);
	            this.state = 1617;
	            this.columnName();
	            this.state = 1622;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnName() {
	    let localctx = new ColumnNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, InceptorOracleParser.RULE_columnName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1623;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnOrtableDotColumnNameList() {
	    let localctx = new ColumnOrtableDotColumnNameListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, InceptorOracleParser.RULE_columnOrtableDotColumnNameList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1625;
	        this.columnOrtableDotColumnName();
	        this.state = 1630;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===InceptorOracleParser.COMMA) {
	            this.state = 1626;
	            this.match(InceptorOracleParser.COMMA);
	            this.state = 1627;
	            this.columnOrtableDotColumnName();
	            this.state = 1632;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnOrtableDotColumnName() {
	    let localctx = new ColumnOrtableDotColumnNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, InceptorOracleParser.RULE_columnOrtableDotColumnName);
	    try {
	        this.state = 1638;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,26,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1633;
	            this.identifier();
	            this.state = 1634;
	            this.match(InceptorOracleParser.DOT);
	            this.state = 1635;
	            this.columnName();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1637;
	            this.columnName();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnOrtableDotColumnWithDBNameList() {
	    let localctx = new ColumnOrtableDotColumnWithDBNameListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, InceptorOracleParser.RULE_columnOrtableDotColumnWithDBNameList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1640;
	        this.columnOrtableDotColumnWithDBName();
	        this.state = 1645;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===InceptorOracleParser.COMMA) {
	            this.state = 1641;
	            this.match(InceptorOracleParser.COMMA);
	            this.state = 1642;
	            this.columnOrtableDotColumnWithDBName();
	            this.state = 1647;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnOrtableDotColumnWithDBName() {
	    let localctx = new ColumnOrtableDotColumnWithDBNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, InceptorOracleParser.RULE_columnOrtableDotColumnWithDBName);
	    var _la = 0; // Token type
	    try {
	        this.state = 1656;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,29,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1648;
	            localctx.db = this.identifier();
	            this.state = 1649;
	            this.match(InceptorOracleParser.DOT);
	            this.state = 1650;
	            localctx.tab = this.identifier();
	            this.state = 1653;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.DOT) {
	                this.state = 1651;
	                localctx.secondDot = this.match(InceptorOracleParser.DOT);
	                this.state = 1652;
	                localctx.column = this.identifier();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1655;
	            this.columnName();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableOrPartition() {
	    let localctx = new TableOrPartitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, InceptorOracleParser.RULE_tableOrPartition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1658;
	        this.tableName();
	        this.state = 1660;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_PARTITION) {
	            this.state = 1659;
	            this.partitionSpec();
	        }

	        this.state = 1666;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
	        if(la_===1) {
	            this.state = 1662;
	            this.match(InceptorOracleParser.LPAREN);
	            this.state = 1663;
	            this.columnNameList();
	            this.state = 1664;
	            this.match(InceptorOracleParser.RPAREN);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableOrColumnAliasOfValues() {
	    let localctx = new TableOrColumnAliasOfValuesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, InceptorOracleParser.RULE_tableOrColumnAliasOfValues);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1668;
	        this.valuesName();
	        this.state = 1673;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
	        if(la_===1) {
	            this.state = 1669;
	            this.match(InceptorOracleParser.LPAREN);
	            this.state = 1670;
	            this.columnNameList();
	            this.state = 1671;
	            this.match(InceptorOracleParser.RPAREN);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partitionTableFunctionSource() {
	    let localctx = new PartitionTableFunctionSourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, InceptorOracleParser.RULE_partitionTableFunctionSource);
	    try {
	        this.state = 1678;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,33,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1675;
	            this.subQuerySource();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1676;
	            this.tableSource();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1677;
	            this.partitionedTableFunction();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partitionedTableFunction() {
	    let localctx = new PartitionedTableFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, InceptorOracleParser.RULE_partitionedTableFunction);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1680;
	        localctx.name = this.match(InceptorOracleParser.Identifier);
	        this.state = 1681;
	        this.match(InceptorOracleParser.LPAREN);
	        this.state = 1682;
	        this.match(InceptorOracleParser.KW_ON);
	        this.state = 1683;
	        localctx.ptfsrc = this.partitionTableFunctionSource();
	        this.state = 1685;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_PARTITION) {
	            this.state = 1684;
	            this.partitioningSpec();
	        }

	        this.state = 1702;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.Identifier) {
	            this.state = 1687;
	            this.match(InceptorOracleParser.Identifier);
	            this.state = 1688;
	            this.match(InceptorOracleParser.LPAREN);
	            this.state = 1689;
	            this.expression();
	            this.state = 1690;
	            this.match(InceptorOracleParser.RPAREN);
	            this.state = 1699;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===InceptorOracleParser.COMMA) {
	                this.state = 1691;
	                this.match(InceptorOracleParser.COMMA);
	                this.state = 1692;
	                this.match(InceptorOracleParser.Identifier);
	                this.state = 1693;
	                this.match(InceptorOracleParser.LPAREN);
	                this.state = 1694;
	                this.expression();
	                this.state = 1695;
	                this.match(InceptorOracleParser.RPAREN);
	                this.state = 1701;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 1704;
	        this.match(InceptorOracleParser.RPAREN);
	        this.state = 1706;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,37,this._ctx);
	        if(la_===1) {
	            this.state = 1705;
	            this.alias();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableAllColumns() {
	    let localctx = new TableAllColumnsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, InceptorOracleParser.RULE_tableAllColumns);
	    try {
	        this.state = 1713;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case InceptorOracleParser.STAR:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1708;
	            this.match(InceptorOracleParser.STAR);
	            break;
	        case InceptorOracleParser.KW_TRUE:
	        case InceptorOracleParser.KW_FALSE:
	        case InceptorOracleParser.KW_ALL:
	        case InceptorOracleParser.KW_LIKE:
	        case InceptorOracleParser.KW_NO:
	        case InceptorOracleParser.KW_ANY:
	        case InceptorOracleParser.KW_EXISTS:
	        case InceptorOracleParser.KW_ASC:
	        case InceptorOracleParser.KW_DESC:
	        case InceptorOracleParser.KW_ORDER:
	        case InceptorOracleParser.KW_GROUP:
	        case InceptorOracleParser.KW_INCREMENT:
	        case InceptorOracleParser.KW_BY:
	        case InceptorOracleParser.KW_HASH:
	        case InceptorOracleParser.KW_INSERT:
	        case InceptorOracleParser.KW_OVERWRITE:
	        case InceptorOracleParser.KW_OUTER:
	        case InceptorOracleParser.KW_STREAMJOB:
	        case InceptorOracleParser.KW_STREAMJOBS:
	        case InceptorOracleParser.KW_AT:
	        case InceptorOracleParser.KW_LEFT:
	        case InceptorOracleParser.KW_RIGHT:
	        case InceptorOracleParser.KW_FULL:
	        case InceptorOracleParser.KW_PARTITION:
	        case InceptorOracleParser.KW_PARTITIONS:
	        case InceptorOracleParser.KW_PATTERN:
	        case InceptorOracleParser.KW_TABLE:
	        case InceptorOracleParser.KW_TABLES:
	        case InceptorOracleParser.KW_SEQUENCE:
	        case InceptorOracleParser.KW_SEQUENCES:
	        case InceptorOracleParser.KW_COLUMNS:
	        case InceptorOracleParser.KW_INDEX:
	        case InceptorOracleParser.KW_INDEXES:
	        case InceptorOracleParser.KW_REBUILD:
	        case InceptorOracleParser.KW_FUNCTIONS:
	        case InceptorOracleParser.KW_SHOW:
	        case InceptorOracleParser.KW_MSCK:
	        case InceptorOracleParser.KW_REPAIR:
	        case InceptorOracleParser.KW_DIRECTORY:
	        case InceptorOracleParser.KW_LOCAL:
	        case InceptorOracleParser.KW_GLOBAL:
	        case InceptorOracleParser.KW_USING:
	        case InceptorOracleParser.KW_CLUSTER:
	        case InceptorOracleParser.KW_DISTRIBUTE:
	        case InceptorOracleParser.KW_SORT:
	        case InceptorOracleParser.KW_UNION:
	        case InceptorOracleParser.KW_LOAD:
	        case InceptorOracleParser.KW_EXPORT:
	        case InceptorOracleParser.KW_IMPORT:
	        case InceptorOracleParser.KW_DATA:
	        case InceptorOracleParser.KW_INPATH:
	        case InceptorOracleParser.KW_IS:
	        case InceptorOracleParser.KW_NULLS:
	        case InceptorOracleParser.KW_CREATE:
	        case InceptorOracleParser.KW_EXTERNAL:
	        case InceptorOracleParser.KW_ALTER:
	        case InceptorOracleParser.KW_CHANGE:
	        case InceptorOracleParser.KW_FIRST:
	        case InceptorOracleParser.KW_LAST:
	        case InceptorOracleParser.KW_AFTER:
	        case InceptorOracleParser.KW_DESCRIBE:
	        case InceptorOracleParser.KW_DROP:
	        case InceptorOracleParser.KW_RENAME:
	        case InceptorOracleParser.KW_IGNORE:
	        case InceptorOracleParser.KW_RESPECT:
	        case InceptorOracleParser.KW_PROTECTION:
	        case InceptorOracleParser.KW_TO:
	        case InceptorOracleParser.KW_COMMENT:
	        case InceptorOracleParser.KW_PROMPT:
	        case InceptorOracleParser.KW_SPOOL:
	        case InceptorOracleParser.KW_BOOLEAN:
	        case InceptorOracleParser.KW_TINYINT:
	        case InceptorOracleParser.KW_BYTE:
	        case InceptorOracleParser.KW_SMALLINT:
	        case InceptorOracleParser.KW_INT:
	        case InceptorOracleParser.KW_BIGINT:
	        case InceptorOracleParser.KW_FLOAT:
	        case InceptorOracleParser.KW_DOUBLE:
	        case InceptorOracleParser.KW_DATE:
	        case InceptorOracleParser.KW_DATETIME:
	        case InceptorOracleParser.KW_TIMESTAMP:
	        case InceptorOracleParser.KW_TIME:
	        case InceptorOracleParser.KW_DECIMAL:
	        case InceptorOracleParser.KW_STRING:
	        case InceptorOracleParser.KW_GEO:
	        case InceptorOracleParser.KW_ARRAY:
	        case InceptorOracleParser.KW_STRUCT:
	        case InceptorOracleParser.KW_UNIONTYPE:
	        case InceptorOracleParser.KW_PARTITIONED:
	        case InceptorOracleParser.KW_ROUTED:
	        case InceptorOracleParser.KW_CLUSTERED:
	        case InceptorOracleParser.KW_SORTED:
	        case InceptorOracleParser.KW_NEXT:
	        case InceptorOracleParser.KW_NEXTVALUE:
	        case InceptorOracleParser.KW_BUCKETS:
	        case InceptorOracleParser.KW_ROW:
	        case InceptorOracleParser.KW_ROWS:
	        case InceptorOracleParser.KW_FORMAT:
	        case InceptorOracleParser.KW_DELIMITED:
	        case InceptorOracleParser.KW_FIELDS:
	        case InceptorOracleParser.KW_TERMINATED:
	        case InceptorOracleParser.KW_ESCAPED:
	        case InceptorOracleParser.KW_COLLECTION:
	        case InceptorOracleParser.KW_ITEMS:
	        case InceptorOracleParser.KW_KEYS:
	        case InceptorOracleParser.KW_KEY_TYPE:
	        case InceptorOracleParser.KW_LINES:
	        case InceptorOracleParser.KW_STORED:
	        case InceptorOracleParser.KW_FILEFORMAT:
	        case InceptorOracleParser.KW_SEQUENCEFILE:
	        case InceptorOracleParser.KW_TEXTFILE:
	        case InceptorOracleParser.KW_CSVFILE:
	        case InceptorOracleParser.KW_FWCFILE:
	        case InceptorOracleParser.KW_RCFILE:
	        case InceptorOracleParser.KW_ORCFILE:
	        case InceptorOracleParser.KW_HOLODESK:
	        case InceptorOracleParser.KW_STELLARDB:
	        case InceptorOracleParser.KW_ORCTRANSACTIONFILE:
	        case InceptorOracleParser.KW_PARQUET:
	        case InceptorOracleParser.KW_HYPERDRIVE:
	        case InceptorOracleParser.KW_ESDRIVE:
	        case InceptorOracleParser.KW_INPUTFORMAT:
	        case InceptorOracleParser.KW_OUTPUTFORMAT:
	        case InceptorOracleParser.KW_INPUTDRIVER:
	        case InceptorOracleParser.KW_OUTPUTDRIVER:
	        case InceptorOracleParser.KW_OFFLINE:
	        case InceptorOracleParser.KW_ENABLE:
	        case InceptorOracleParser.KW_DISABLE:
	        case InceptorOracleParser.KW_READONLY:
	        case InceptorOracleParser.KW_NO_DROP:
	        case InceptorOracleParser.KW_LOCATION:
	        case InceptorOracleParser.KW_BUCKET:
	        case InceptorOracleParser.KW_OUT:
	        case InceptorOracleParser.KW_OF:
	        case InceptorOracleParser.KW_PERCENT:
	        case InceptorOracleParser.KW_ADD:
	        case InceptorOracleParser.KW_REPLACE:
	        case InceptorOracleParser.KW_RLIKE:
	        case InceptorOracleParser.KW_REGEXP:
	        case InceptorOracleParser.KW_TEMPORARY:
	        case InceptorOracleParser.KW_RESOURCE:
	        case InceptorOracleParser.KW_RELOAD:
	        case InceptorOracleParser.KW_EXPLAIN:
	        case InceptorOracleParser.KW_FORMATTED:
	        case InceptorOracleParser.KW_PRETTY:
	        case InceptorOracleParser.KW_DEPENDENCY:
	        case InceptorOracleParser.KW_LOGICAL:
	        case InceptorOracleParser.KW_COST:
	        case InceptorOracleParser.KW_SERDE:
	        case InceptorOracleParser.KW_WITH:
	        case InceptorOracleParser.KW_WITHIN:
	        case InceptorOracleParser.KW_DEFERRED:
	        case InceptorOracleParser.KW_SERDEPROPERTIES:
	        case InceptorOracleParser.KW_DBPROPERTIES:
	        case InceptorOracleParser.KW_LIMIT:
	        case InceptorOracleParser.KW_SET:
	        case InceptorOracleParser.KW_UNSET:
	        case InceptorOracleParser.KW_TBLPROPERTIES:
	        case InceptorOracleParser.KW_IDXPROPERTIES:
	        case InceptorOracleParser.KW_VALUE_TYPE:
	        case InceptorOracleParser.KW_ELEM_TYPE:
	        case InceptorOracleParser.KW_PRIOR:
	        case InceptorOracleParser.KW_NOCYCLE:
	        case InceptorOracleParser.KW_MAPJOIN:
	        case InceptorOracleParser.KW_COMBINE:
	        case InceptorOracleParser.KW_COMBINE_STRUCT_INDEX:
	        case InceptorOracleParser.KW_GLKJOIN:
	        case InceptorOracleParser.KW_USE_INDEX:
	        case InceptorOracleParser.KW_STARGATE:
	        case InceptorOracleParser.KW_USE_BULKLOAD:
	        case InceptorOracleParser.KW_ADHOC:
	        case InceptorOracleParser.KW_PRECOMPILE:
	        case InceptorOracleParser.KW_STREAMTABLE:
	        case InceptorOracleParser.KW_STREAM:
	        case InceptorOracleParser.KW_RULEBASE:
	        case InceptorOracleParser.KW_RULEBASES:
	        case InceptorOracleParser.KW_RULE:
	        case InceptorOracleParser.KW_RULES:
	        case InceptorOracleParser.KW_MEET:
	        case InceptorOracleParser.KW_MUST:
	        case InceptorOracleParser.KW_MUSTNOT:
	        case InceptorOracleParser.KW_POLICY:
	        case InceptorOracleParser.KW_POLICIES:
	        case InceptorOracleParser.KW_REMOVE:
	        case InceptorOracleParser.KW_POLICYKEY:
	        case InceptorOracleParser.KW_POLICY_RULE:
	        case InceptorOracleParser.KW_LOOKUP:
	        case InceptorOracleParser.KW_RULE_FUNCTION:
	        case InceptorOracleParser.KW_RULE_FUNCTIONS:
	        case InceptorOracleParser.KW_RULE_FUNCTION_PROPERTIES:
	        case InceptorOracleParser.KW_HOLD_DDLTIME:
	        case InceptorOracleParser.KW_CLUSTERSTATUS:
	        case InceptorOracleParser.KW_UTC:
	        case InceptorOracleParser.KW_UTCTIMESTAMP:
	        case InceptorOracleParser.KW_LONG:
	        case InceptorOracleParser.KW_DELETE:
	        case InceptorOracleParser.KW_PLUS:
	        case InceptorOracleParser.KW_MINUS:
	        case InceptorOracleParser.KW_OP_CONCAT:
	        case InceptorOracleParser.KW_FETCH:
	        case InceptorOracleParser.KW_INTERSECT:
	        case InceptorOracleParser.KW_VIEW:
	        case InceptorOracleParser.KW_IN:
	        case InceptorOracleParser.KW_DATABASES:
	        case InceptorOracleParser.KW_MATERIALIZED:
	        case InceptorOracleParser.KW_SCHEMA:
	        case InceptorOracleParser.KW_SCHEMAS:
	        case InceptorOracleParser.KW_GRANT:
	        case InceptorOracleParser.KW_REVOKE:
	        case InceptorOracleParser.KW_SSL:
	        case InceptorOracleParser.KW_UNDO:
	        case InceptorOracleParser.KW_LOCK:
	        case InceptorOracleParser.KW_LOCKS:
	        case InceptorOracleParser.KW_UNLOCK:
	        case InceptorOracleParser.KW_SHARED:
	        case InceptorOracleParser.KW_EXCLUSIVE:
	        case InceptorOracleParser.KW_PROCEDURE:
	        case InceptorOracleParser.KW_UNSIGNED:
	        case InceptorOracleParser.KW_WHILE:
	        case InceptorOracleParser.KW_READ:
	        case InceptorOracleParser.KW_READS:
	        case InceptorOracleParser.KW_PURGE:
	        case InceptorOracleParser.KW_RANGE:
	        case InceptorOracleParser.KW_ANALYZE:
	        case InceptorOracleParser.KW_BEFORE:
	        case InceptorOracleParser.KW_BETWEEN:
	        case InceptorOracleParser.KW_BOTH:
	        case InceptorOracleParser.KW_BINARY:
	        case InceptorOracleParser.KW_DEFAULT:
	        case InceptorOracleParser.KW_TYPE:
	        case InceptorOracleParser.KW_TRIGGER:
	        case InceptorOracleParser.KW_RECORDREADER:
	        case InceptorOracleParser.KW_RECORDWRITER:
	        case InceptorOracleParser.KW_SEMI:
	        case InceptorOracleParser.KW_LATERAL:
	        case InceptorOracleParser.KW_TOUCH:
	        case InceptorOracleParser.KW_ARCHIVE:
	        case InceptorOracleParser.KW_UNARCHIVE:
	        case InceptorOracleParser.KW_COMPUTE:
	        case InceptorOracleParser.KW_STATISTICS:
	        case InceptorOracleParser.KW_USE:
	        case InceptorOracleParser.KW_OPTION:
	        case InceptorOracleParser.KW_CONCATENATE:
	        case InceptorOracleParser.KW_SHOW_DATABASE:
	        case InceptorOracleParser.KW_UPDATE:
	        case InceptorOracleParser.KW_RESTRICT:
	        case InceptorOracleParser.KW_CASCADE:
	        case InceptorOracleParser.KW_SKEWED:
	        case InceptorOracleParser.KW_DIRECTORIES:
	        case InceptorOracleParser.KW_WINDOWRESET:
	        case InceptorOracleParser.KW_SESSIONSTART:
	        case InceptorOracleParser.KW_SESSIONSTOP:
	        case InceptorOracleParser.KW_SESSIONEXPIRE:
	        case InceptorOracleParser.KW_SESSIONEXPIRE_DISCARD:
	        case InceptorOracleParser.KW_SESSIONEXPIRE_COMPLETE:
	        case InceptorOracleParser.KW_STREAMWINDOW:
	        case InceptorOracleParser.KW_STREAMWINDOWSLIDELENGTH:
	        case InceptorOracleParser.KW_STREAMWINDOWSEPARATED:
	        case InceptorOracleParser.KW_FOLLOWEDBY:
	        case InceptorOracleParser.KW_NOTFOLLOWEDBY:
	        case InceptorOracleParser.KW_NOTNEXT:
	        case InceptorOracleParser.KW_PATTERN_TIMES:
	        case InceptorOracleParser.KW_CURRVALUE:
	        case InceptorOracleParser.KW_GROUPING:
	        case InceptorOracleParser.KW_SETS:
	        case InceptorOracleParser.KW_TRUNCATE:
	        case InceptorOracleParser.KW_NOSCAN:
	        case InceptorOracleParser.KW_USER:
	        case InceptorOracleParser.KW_QUOTA:
	        case InceptorOracleParser.KW_PERMISSION:
	        case InceptorOracleParser.KW_ROLE:
	        case InceptorOracleParser.KW_ROLES:
	        case InceptorOracleParser.KW_INNER:
	        case InceptorOracleParser.KW_ADMIN:
	        case InceptorOracleParser.KW_OWNER:
	        case InceptorOracleParser.KW_PRINCIPALS:
	        case InceptorOracleParser.KW_CONSTANT:
	        case InceptorOracleParser.KW_CONSTRAINT:
	        case InceptorOracleParser.KW_VALUES:
	        case InceptorOracleParser.KW_YEAR:
	        case InceptorOracleParser.KW_MONTH:
	        case InceptorOracleParser.KW_DAY:
	        case InceptorOracleParser.KW_MINUTE:
	        case InceptorOracleParser.KW_HOUR:
	        case InceptorOracleParser.KW_SECOND:
	        case InceptorOracleParser.KW_INTERVAL:
	        case InceptorOracleParser.KW_SYSDATE:
	        case InceptorOracleParser.KW_NOMAXVALUE:
	        case InceptorOracleParser.KW_MINVALUE:
	        case InceptorOracleParser.KW_NOMINVALUE:
	        case InceptorOracleParser.KW_CYCLE:
	        case InceptorOracleParser.KW_CACHE:
	        case InceptorOracleParser.KW_CACHEDMETRIC:
	        case InceptorOracleParser.KW_CACHEDMETRICS:
	        case InceptorOracleParser.KW_NOCACHE:
	        case InceptorOracleParser.KW_NOORDER:
	        case InceptorOracleParser.KW_MERGE:
	        case InceptorOracleParser.KW_PLANT:
	        case InceptorOracleParser.KW_IMMEDIATE:
	        case InceptorOracleParser.KW_COMPACT:
	        case InceptorOracleParser.KW_STOP:
	        case InceptorOracleParser.KW_LIST:
	        case InceptorOracleParser.KW_TRANSACTION:
	        case InceptorOracleParser.KW_WORK:
	        case InceptorOracleParser.KW_SPACE:
	        case InceptorOracleParser.KW_CONF:
	        case InceptorOracleParser.KW_DEFINED:
	        case InceptorOracleParser.KW_INTEGER:
	        case InceptorOracleParser.KW_ONLY:
	        case InceptorOracleParser.KW_SERVER:
	        case InceptorOracleParser.KW_TRANSACTIONS:
	        case InceptorOracleParser.KW_URI:
	        case InceptorOracleParser.KW_WRITE:
	        case InceptorOracleParser.KW_FACL:
	        case InceptorOracleParser.KW_FOUND:
	        case InceptorOracleParser.KW_LEVEL:
	        case InceptorOracleParser.KW_PUBLIC:
	        case InceptorOracleParser.KW_LINKS:
	        case InceptorOracleParser.KW_CONNECT:
	        case InceptorOracleParser.KW_APPLICATION:
	        case InceptorOracleParser.KW_APPLICATIONS:
	        case InceptorOracleParser.KW_APP:
	        case InceptorOracleParser.KW_APPS:
	        case InceptorOracleParser.KW_INFINITE:
	        case InceptorOracleParser.KW_WAIT:
	        case InceptorOracleParser.KW_PRIMARY:
	        case InceptorOracleParser.KW_FOREIGN:
	        case InceptorOracleParser.KW_REFERENCES:
	        case InceptorOracleParser.KW_VALIDATE:
	        case InceptorOracleParser.KW_NOVALIDATE:
	        case InceptorOracleParser.KW_RELY:
	        case InceptorOracleParser.KW_NORELY:
	        case InceptorOracleParser.KW_KEY:
	        case InceptorOracleParser.KW_SEGMENT:
	        case InceptorOracleParser.KW_LENGTH:
	        case InceptorOracleParser.KW_ATTACH:
	        case InceptorOracleParser.KW_DETTACH:
	        case InceptorOracleParser.KW_SHARD:
	        case InceptorOracleParser.KW_NUM:
	        case InceptorOracleParser.KW_FULLTEXT:
	        case InceptorOracleParser.KW_TABLESIZE:
	        case InceptorOracleParser.KW_TABLET:
	        case InceptorOracleParser.KW_CAPACITY:
	        case InceptorOracleParser.KW_ANALYZER:
	        case InceptorOracleParser.KW_SYNC:
	        case InceptorOracleParser.KW_NO_INDEX:
	        case InceptorOracleParser.KW_LOG:
	        case InceptorOracleParser.KW_FILE:
	        case InceptorOracleParser.KW_JAR:
	        case InceptorOracleParser.KW_PERMANENT:
	        case InceptorOracleParser.KW_SCHEDULER:
	        case InceptorOracleParser.KW_MODE:
	        case InceptorOracleParser.Identifier:
	        case InceptorOracleParser.KW_NOCOPY:
	        case InceptorOracleParser.KW_VARRAY:
	        case InceptorOracleParser.KW_PACKAGE:
	        case InceptorOracleParser.KW_PACKAGES:
	        case InceptorOracleParser.KW_BODY:
	        case InceptorOracleParser.KW_ISOPEN:
	        case InceptorOracleParser.KW_NOTFOUND:
	        case InceptorOracleParser.KW_ROWCOUNT:
	        case InceptorOracleParser.KW_BULK_ROWCOUNT:
	        case InceptorOracleParser.KW_BULK_EXCEPTIONS:
	        case InceptorOracleParser.KW_REVERSE:
	        case InceptorOracleParser.KW_SAVE:
	        case InceptorOracleParser.KW_EXCEPTIONS:
	        case InceptorOracleParser.KW_INDICES:
	        case InceptorOracleParser.KW_REF:
	        case InceptorOracleParser.KW_YEARS:
	        case InceptorOracleParser.KW_MONTHS:
	        case InceptorOracleParser.KW_DAYS:
	        case InceptorOracleParser.KW_HOURS:
	        case InceptorOracleParser.KW_MINUTES:
	        case InceptorOracleParser.KW_SECONDS:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1709;
	            this.tableName();
	            this.state = 1710;
	            this.match(InceptorOracleParser.DOT);
	            this.state = 1711;
	            this.match(InceptorOracleParser.STAR);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableOrColumn() {
	    let localctx = new TableOrColumnContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, InceptorOracleParser.RULE_tableOrColumn);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1715;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aliasList() {
	    let localctx = new AliasListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, InceptorOracleParser.RULE_aliasList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1717;
	        this.identifierList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	capIdentifierList() {
	    let localctx = new CapIdentifierListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, InceptorOracleParser.RULE_capIdentifierList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1719;
	        this.match(InceptorOracleParser.Identifier);
	        this.state = 1724;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===InceptorOracleParser.COMMA) {
	            this.state = 1720;
	            this.match(InceptorOracleParser.COMMA);
	            this.state = 1721;
	            this.match(InceptorOracleParser.Identifier);
	            this.state = 1726;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifierList() {
	    let localctx = new IdentifierListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, InceptorOracleParser.RULE_identifierList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1727;
	        this.identifier();
	        this.state = 1732;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,40,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1728;
	                this.match(InceptorOracleParser.COMMA);
	                this.state = 1729;
	                this.identifier(); 
	            }
	            this.state = 1734;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,40,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterStatement() {
	    let localctx = new AlterStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, InceptorOracleParser.RULE_alterStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1735;
	        this.match(InceptorOracleParser.KW_ALTER);
	        this.state = 1766;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,41,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1736;
	            this.match(InceptorOracleParser.KW_TABLE);
	            this.state = 1737;
	            this.alterTableStatementSuffix();
	            break;

	        case 2:
	            this.state = 1738;
	            this.match(InceptorOracleParser.KW_STREAM);
	            this.state = 1739;
	            this.alterTableStatementSuffix();
	            break;

	        case 3:
	            this.state = 1740;
	            this.match(InceptorOracleParser.KW_VIEW);
	            this.state = 1741;
	            this.alterViewStatementSuffix(false);
	            break;

	        case 4:
	            this.state = 1742;
	            this.match(InceptorOracleParser.KW_MATERIALIZED);
	            this.state = 1743;
	            this.match(InceptorOracleParser.KW_VIEW);
	            this.state = 1744;
	            this.alterViewStatementSuffix(true);
	            break;

	        case 5:
	            this.state = 1745;
	            this.match(InceptorOracleParser.KW_INDEX);
	            this.state = 1746;
	            this.alterIndexStatementSuffix();
	            break;

	        case 6:
	            this.state = 1747;
	            this.match(InceptorOracleParser.KW_DATABASE);
	            this.state = 1748;
	            this.alterDatabaseStatementSuffix();
	            break;

	        case 7:
	            this.state = 1749;
	            _la = this._input.LA(1);
	            if(!(_la===InceptorOracleParser.KW_APPLICATION || _la===InceptorOracleParser.KW_APP)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1750;
	            this.alterApplicationStatementSuffix();
	            break;

	        case 8:
	            this.state = 1751;
	            this.match(InceptorOracleParser.KW_STREAMJOB);
	            this.state = 1752;
	            this.alterJobStatementSuffix();
	            break;

	        case 9:
	            this.state = 1753;
	            this.match(InceptorOracleParser.KW_POLICY);
	            this.state = 1754;
	            this.alterPolicyStatementSuffix();
	            break;

	        case 10:
	            this.state = 1755;
	            this.match(InceptorOracleParser.KW_RULE);
	            this.state = 1756;
	            this.match(InceptorOracleParser.KW_GROUP);
	            this.state = 1757;
	            this.alterPolicyRuleGroupSuffix();
	            break;

	        case 11:
	            this.state = 1758;
	            this.match(InceptorOracleParser.KW_RULE);
	            this.state = 1759;
	            this.alterRuleStatementSuffix();
	            break;

	        case 12:
	            this.state = 1760;
	            this.match(InceptorOracleParser.KW_SEQUENCE);
	            this.state = 1761;
	            this.alterSequenceStatementSuffix();
	            break;

	        case 13:
	            this.state = 1762;
	            this.match(InceptorOracleParser.KW_BLACKLIST);
	            this.state = 1763;
	            this.alterBlacklistStatementSuffix();
	            break;

	        case 14:
	            this.state = 1764;
	            this.match(InceptorOracleParser.KW_RULE_FUNCTION);
	            this.state = 1765;
	            this.alterRuleFunctionStatementSuffix();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterSequenceStatementSuffix() {
	    let localctx = new AlterSequenceStatementSuffixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, InceptorOracleParser.RULE_alterSequenceStatementSuffix);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1768;
	        localctx.name = this.sequenceName();
	        this.state = 1770; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1769;
	            this.sequenceOptionWithoutStart();
	            this.state = 1772; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===InceptorOracleParser.KW_ORDER || _la===InceptorOracleParser.KW_INCREMENT || _la===InceptorOracleParser.KW_NOCYCLE || ((((_la - 396)) & ~0x1f) == 0 && ((1 << (_la - 396)) & ((1 << (InceptorOracleParser.KW_MAXVALUE - 396)) | (1 << (InceptorOracleParser.KW_NOMAXVALUE - 396)) | (1 << (InceptorOracleParser.KW_MINVALUE - 396)) | (1 << (InceptorOracleParser.KW_NOMINVALUE - 396)) | (1 << (InceptorOracleParser.KW_CYCLE - 396)) | (1 << (InceptorOracleParser.KW_CACHE - 396)) | (1 << (InceptorOracleParser.KW_NOCACHE - 396)) | (1 << (InceptorOracleParser.KW_NOORDER - 396)))) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterTableStatementSuffix() {
	    let localctx = new AlterTableStatementSuffixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, InceptorOracleParser.RULE_alterTableStatementSuffix);
	    try {
	        this.state = 1791;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,43,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1774;
	            this.alterStatementSuffixRename();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1775;
	            this.alterStatementSuffixAddCol();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1776;
	            this.alterStatementSuffixRenameCol();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1777;
	            this.alterStatementSuffixDropPartitions();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1778;
	            this.alterStatementSuffixAddPartitions();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1779;
	            this.alterStatementSuffixTouch();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1780;
	            this.alterStatementSuffixArchive();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1781;
	            this.alterStatementSuffixUnArchive();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1782;
	            this.alterStatementSuffixProperties();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1783;
	            this.alterTblPartitionStatement();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1784;
	            this.alterStatementSuffixSkewedby();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 1785;
	            this.alterStatementSuffixExchangePartition();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 1786;
	            this.alterStatementPartitionKeyType();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 1787;
	            this.alterStatementErrorLogSetting();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 1788;
	            this.alterStatementSuffixDropConstraint();
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 1789;
	            this.alterStatementSuffixAddConstraint();
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 1790;
	            this.alterStatementIntervalValue();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterStatementPartitionKeyType() {
	    let localctx = new AlterStatementPartitionKeyTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, InceptorOracleParser.RULE_alterStatementPartitionKeyType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1793;
	        this.tableName();
	        this.state = 1794;
	        this.match(InceptorOracleParser.KW_PARTITION);
	        this.state = 1795;
	        this.match(InceptorOracleParser.KW_COLUMN);
	        this.state = 1796;
	        this.match(InceptorOracleParser.LPAREN);
	        this.state = 1797;
	        this.columnNameType();
	        this.state = 1798;
	        this.match(InceptorOracleParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterViewStatementSuffix(materialized) {
	    let localctx = new AlterViewStatementSuffixContext(this, this._ctx, this.state, materialized);
	    this.enterRule(localctx, 98, InceptorOracleParser.RULE_alterViewStatementSuffix);
	    try {
	        this.state = 1820;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,44,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1800;
	            this.alterViewSuffixProperties(materialized);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1801;
	            this.alterStatementSuffixRename();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1802;
	            this.alterStatementSuffixRenameCol();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1803;
	            this.alterStatementSuffixAddPartitions();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1804;
	            this.alterStatementSuffixDropPartitions();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1805;
	            localctx.name = this.tableName();
	            this.state = 1806;
	            this.match(InceptorOracleParser.KW_AS);
	            this.state = 1807;
	            this.selectStatement();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1809;
	            localctx.name = this.tableName();
	            this.state = 1810;
	            this.match(InceptorOracleParser.KW_ENABLE);
	            this.state = 1811;
	            this.match(InceptorOracleParser.KW_REWRITE);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1813;
	            localctx.name = this.tableName();
	            this.state = 1814;
	            this.match(InceptorOracleParser.KW_DISABLE);
	            this.state = 1815;
	            this.match(InceptorOracleParser.KW_REWRITE);
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1817;
	            localctx.name = this.tableName();
	            this.state = 1818;
	            this.match(InceptorOracleParser.KW_REBUILD);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterIndexStatementSuffix() {
	    let localctx = new AlterIndexStatementSuffixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, InceptorOracleParser.RULE_alterIndexStatementSuffix);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1822;
	        localctx.indexName = this.identifier();

	        this.state = 1823;
	        this.match(InceptorOracleParser.KW_ON);
	        this.state = 1824;
	        localctx.tableNameId = this.identifier();
	        this.state = 1827;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_PARTITION) {
	            this.state = 1826;
	            this.partitionSpec();
	        }

	        this.state = 1844;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case InceptorOracleParser.KW_REBUILD:
	            this.state = 1829;
	            this.match(InceptorOracleParser.KW_REBUILD);
	            break;
	        case InceptorOracleParser.KW_SET:
	            this.state = 1830;
	            this.match(InceptorOracleParser.KW_SET);
	            this.state = 1831;
	            localctx.key = this.identifier();
	            this.state = 1832;
	            this.match(InceptorOracleParser.EQUAL);
	            this.state = 1833;
	            localctx.value = this.match(InceptorOracleParser.StringLiteral);
	            break;
	        case InceptorOracleParser.KW_UPDATE:
	            this.state = 1835;
	            this.match(InceptorOracleParser.KW_UPDATE);
	            this.state = 1836;
	            localctx.key = this.identifier();
	            this.state = 1837;
	            this.match(InceptorOracleParser.EQUAL);
	            this.state = 1838;
	            localctx.value = this.match(InceptorOracleParser.StringLiteral);
	            break;
	        case InceptorOracleParser.KW_ATTACH:
	            this.state = 1840;
	            this.match(InceptorOracleParser.KW_ATTACH);
	            this.state = 1841;
	            this.columnNameList();
	            break;
	        case InceptorOracleParser.KW_DETTACH:
	            this.state = 1842;
	            this.match(InceptorOracleParser.KW_DETTACH);
	            this.state = 1843;
	            this.columnNameList();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterApplicationStatementSuffix() {
	    let localctx = new AlterApplicationStatementSuffixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, InceptorOracleParser.RULE_alterApplicationStatementSuffix);
	    try {
	        this.state = 1848;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,47,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1846;
	            this.alterApplicationSuffixProperties();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1847;
	            this.alterApplicationSuffixSetOwner();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterJobStatementSuffix() {
	    let localctx = new AlterJobStatementSuffixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, InceptorOracleParser.RULE_alterJobStatementSuffix);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1850;
	        this.alterJobSuffixProperties();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterJobSuffixProperties() {
	    let localctx = new AlterJobSuffixPropertiesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, InceptorOracleParser.RULE_alterJobSuffixProperties);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1852;
	        localctx.name = this.identifier();
	        this.state = 1853;
	        this.match(InceptorOracleParser.KW_SET);
	        this.state = 1854;
	        this.match(InceptorOracleParser.KW_JOBPROPERTIES);
	        this.state = 1855;
	        this.dbProperties();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterApplicationSuffixProperties() {
	    let localctx = new AlterApplicationSuffixPropertiesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, InceptorOracleParser.RULE_alterApplicationSuffixProperties);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1857;
	        localctx.name = this.identifier();
	        this.state = 1858;
	        this.match(InceptorOracleParser.KW_SET);
	        this.state = 1859;
	        this.match(InceptorOracleParser.KW_APPPROPERTIES);
	        this.state = 1860;
	        this.dbProperties();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterApplicationSuffixSetOwner() {
	    let localctx = new AlterApplicationSuffixSetOwnerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, InceptorOracleParser.RULE_alterApplicationSuffixSetOwner);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1862;
	        localctx.name = this.identifier();
	        this.state = 1863;
	        this.match(InceptorOracleParser.KW_SET);
	        this.state = 1864;
	        this.match(InceptorOracleParser.KW_OWNER);
	        this.state = 1865;
	        this.principalName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterPolicyStatementSuffix() {
	    let localctx = new AlterPolicyStatementSuffixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, InceptorOracleParser.RULE_alterPolicyStatementSuffix);
	    try {
	        this.state = 1869;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,48,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1867;
	            this.alterPolicySuffixProperties();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1868;
	            this.alterPolicySuffixRootGroupType();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterPolicySuffixProperties() {
	    let localctx = new AlterPolicySuffixPropertiesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, InceptorOracleParser.RULE_alterPolicySuffixProperties);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1871;
	        localctx.name = this.identifier();
	        this.state = 1872;
	        this.match(InceptorOracleParser.KW_SET);
	        this.state = 1873;
	        this.match(InceptorOracleParser.KW_POLICYPROPERTIES);
	        this.state = 1874;
	        this.dbProperties();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterPolicySuffixRootGroupType() {
	    let localctx = new AlterPolicySuffixRootGroupTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, InceptorOracleParser.RULE_alterPolicySuffixRootGroupType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1876;
	        localctx.name = this.identifier();
	        this.state = 1877;
	        this.match(InceptorOracleParser.KW_WITH);
	        this.state = 1878;
	        this.match(InceptorOracleParser.KW_RULES);
	        this.state = 1879;
	        this.match(InceptorOracleParser.KW_MEET);
	        this.state = 1880;
	        this.ruleGroupType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterPolicyRuleGroupSuffix() {
	    let localctx = new AlterPolicyRuleGroupSuffixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, InceptorOracleParser.RULE_alterPolicyRuleGroupSuffix);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1882;
	        localctx.name = this.identifier();
	        this.state = 1883;
	        this.match(InceptorOracleParser.KW_WITH);
	        this.state = 1884;
	        this.match(InceptorOracleParser.KW_RULES);
	        this.state = 1885;
	        this.match(InceptorOracleParser.KW_MEET);
	        this.state = 1886;
	        this.ruleGroupType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterRuleStatementSuffix() {
	    let localctx = new AlterRuleStatementSuffixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, InceptorOracleParser.RULE_alterRuleStatementSuffix);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1888;
	        this.alterRuleSuffixProperties();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterRuleSuffixProperties() {
	    let localctx = new AlterRuleSuffixPropertiesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, InceptorOracleParser.RULE_alterRuleSuffixProperties);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1890;
	        localctx.name = this.identifier();
	        this.state = 1891;
	        this.match(InceptorOracleParser.KW_SET);
	        this.state = 1892;
	        this.match(InceptorOracleParser.KW_RULEPROPERTIES);
	        this.state = 1893;
	        this.dbProperties();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterRuleFunctionStatementSuffix() {
	    let localctx = new AlterRuleFunctionStatementSuffixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, InceptorOracleParser.RULE_alterRuleFunctionStatementSuffix);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1895;
	        this.alterRuleFunctionSuffixProperties();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterRuleFunctionSuffixProperties() {
	    let localctx = new AlterRuleFunctionSuffixPropertiesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, InceptorOracleParser.RULE_alterRuleFunctionSuffixProperties);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1897;
	        localctx.name = this.identifier();
	        this.state = 1898;
	        this.match(InceptorOracleParser.KW_SET);
	        this.state = 1899;
	        this.match(InceptorOracleParser.KW_RULE_FUNCTION_PROPERTIES);
	        this.state = 1900;
	        this.dbProperties();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterDatabaseStatementSuffix() {
	    let localctx = new AlterDatabaseStatementSuffixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, InceptorOracleParser.RULE_alterDatabaseStatementSuffix);
	    try {
	        this.state = 1904;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,49,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1902;
	            this.alterDatabaseSuffixProperties();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1903;
	            this.alterDatabaseSuffixSetOwner();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterDatabaseSuffixProperties() {
	    let localctx = new AlterDatabaseSuffixPropertiesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, InceptorOracleParser.RULE_alterDatabaseSuffixProperties);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1906;
	        localctx.name = this.identifier();
	        this.state = 1907;
	        this.match(InceptorOracleParser.KW_SET);
	        this.state = 1908;
	        this.match(InceptorOracleParser.KW_DBPROPERTIES);
	        this.state = 1909;
	        this.dbProperties();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterDatabaseSuffixSetOwner() {
	    let localctx = new AlterDatabaseSuffixSetOwnerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, InceptorOracleParser.RULE_alterDatabaseSuffixSetOwner);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1911;
	        localctx.dbName = this.identifier();
	        this.state = 1912;
	        this.match(InceptorOracleParser.KW_SET);
	        this.state = 1913;
	        this.match(InceptorOracleParser.KW_OWNER);
	        this.state = 1914;
	        this.principalName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterStatementSuffixRename() {
	    let localctx = new AlterStatementSuffixRenameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, InceptorOracleParser.RULE_alterStatementSuffixRename);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1916;
	        localctx.oldName = this.tableName();
	        this.state = 1917;
	        this.match(InceptorOracleParser.KW_RENAME);
	        this.state = 1918;
	        this.match(InceptorOracleParser.KW_TO);
	        this.state = 1919;
	        localctx.newName = this.tableName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterStatementErrorLogSetting() {
	    let localctx = new AlterStatementErrorLogSettingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, InceptorOracleParser.RULE_alterStatementErrorLogSetting);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1921;
	        this.tableName();
	        this.state = 1922;
	        this.match(InceptorOracleParser.KW_SET);
	        this.state = 1923;
	        this.match(InceptorOracleParser.KW_ERRORS);
	        this.state = 1924;
	        this.match(InceptorOracleParser.KW_LOG);
	        this.state = 1926;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_ON || _la===InceptorOracleParser.KW_OFF) {
	            this.state = 1925;
	            this.onOffOpt();
	        }

	        this.state = 1929;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_INTO) {
	            this.state = 1928;
	            this.errorIntoTableOpt();
	        }

	        this.state = 1932;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_OVERWRITE) {
	            this.state = 1931;
	            this.errorOverwriteOpt();
	        }

	        this.state = 1935;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_REJECT) {
	            this.state = 1934;
	            this.errorRejectOpt();
	        }

	        this.state = 1938;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_LIMIT) {
	            this.state = 1937;
	            this.errorLimitOpt();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	onOffOpt() {
	    let localctx = new OnOffOptContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, InceptorOracleParser.RULE_onOffOpt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1940;
	        _la = this._input.LA(1);
	        if(!(_la===InceptorOracleParser.KW_ON || _la===InceptorOracleParser.KW_OFF)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	errorIntoTableOpt() {
	    let localctx = new ErrorIntoTableOptContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, InceptorOracleParser.RULE_errorIntoTableOpt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1942;
	        this.match(InceptorOracleParser.KW_INTO);
	        this.state = 1943;
	        this.tableName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	errorOverwriteOpt() {
	    let localctx = new ErrorOverwriteOptContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, InceptorOracleParser.RULE_errorOverwriteOpt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1945;
	        this.match(InceptorOracleParser.KW_OVERWRITE);
	        this.state = 1946;
	        this.onOffOpt();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	errorRejectOpt() {
	    let localctx = new ErrorRejectOptContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, InceptorOracleParser.RULE_errorRejectOpt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1948;
	        this.match(InceptorOracleParser.KW_REJECT);
	        this.state = 1949;
	        this.onOffOpt();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	errorLimitOpt() {
	    let localctx = new ErrorLimitOptContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, InceptorOracleParser.RULE_errorLimitOpt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1951;
	        this.match(InceptorOracleParser.KW_LIMIT);
	        this.state = 1952;
	        this.match(InceptorOracleParser.Number);
	        this.state = 1955;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case InceptorOracleParser.KW_ROWS:
	            this.state = 1953;
	            localctx.ways = this.match(InceptorOracleParser.KW_ROWS);
	            break;
	        case InceptorOracleParser.KW_PERCENT:
	            this.state = 1954;
	            localctx.ways = this.match(InceptorOracleParser.KW_PERCENT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterStatementSuffixAddCol() {
	    let localctx = new AlterStatementSuffixAddColContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, InceptorOracleParser.RULE_alterStatementSuffixAddCol);
	    var _la = 0; // Token type
	    try {
	        this.state = 1978;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,59,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1957;
	            this.tableName();
	            this.state = 1960;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case InceptorOracleParser.KW_ADD:
	                this.state = 1958;
	                localctx.add = this.match(InceptorOracleParser.KW_ADD);
	                break;
	            case InceptorOracleParser.KW_REPLACE:
	                this.state = 1959;
	                localctx.replace = this.match(InceptorOracleParser.KW_REPLACE);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 1962;
	            this.match(InceptorOracleParser.KW_COLUMNS);
	            this.state = 1963;
	            this.match(InceptorOracleParser.LPAREN);
	            this.state = 1964;
	            this.columnNameTypeList();
	            this.state = 1965;
	            this.match(InceptorOracleParser.RPAREN);
	            this.state = 1967;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_RESTRICT || _la===InceptorOracleParser.KW_CASCADE) {
	                this.state = 1966;
	                this.restrictOrCascade();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1969;
	            this.tableName();
	            this.state = 1970;
	            this.match(InceptorOracleParser.KW_DELETE);
	            this.state = 1971;
	            this.match(InceptorOracleParser.KW_COLUMNS);
	            this.state = 1972;
	            this.match(InceptorOracleParser.LPAREN);
	            this.state = 1973;
	            this.identifierList();
	            this.state = 1974;
	            this.match(InceptorOracleParser.RPAREN);
	            this.state = 1976;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_RESTRICT || _la===InceptorOracleParser.KW_CASCADE) {
	                this.state = 1975;
	                this.restrictOrCascade();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterStatementSuffixRenameCol() {
	    let localctx = new AlterStatementSuffixRenameColContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, InceptorOracleParser.RULE_alterStatementSuffixRenameCol);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1980;
	        this.tableName();
	        this.state = 1981;
	        this.match(InceptorOracleParser.KW_CHANGE);
	        this.state = 1983;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_COLUMN) {
	            this.state = 1982;
	            this.match(InceptorOracleParser.KW_COLUMN);
	        }

	        this.state = 1985;
	        localctx.oldName = this.identifier();
	        this.state = 1986;
	        localctx.newName = this.identifier();
	        this.state = 1987;
	        this.colType();
	        this.state = 1989;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,61,this._ctx);
	        if(la_===1) {
	            this.state = 1988;
	            this.defaultVauleOrColumnConstraint();

	        }
	        this.state = 1993;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_COMMENT) {
	            this.state = 1991;
	            this.match(InceptorOracleParser.KW_COMMENT);
	            this.state = 1992;
	            localctx.comment = this.match(InceptorOracleParser.StringLiteral);
	        }

	        this.state = 1996;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_FIRST || _la===InceptorOracleParser.KW_AFTER) {
	            this.state = 1995;
	            this.alterStatementChangeColPosition();
	        }

	        this.state = 1999;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_RESTRICT || _la===InceptorOracleParser.KW_CASCADE) {
	            this.state = 1998;
	            this.restrictOrCascade();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	blocking() {
	    let localctx = new BlockingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, InceptorOracleParser.RULE_blocking);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2001;
	        this.match(InceptorOracleParser.KW_AND);
	        this.state = 2002;
	        this.match(InceptorOracleParser.KW_WAIT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterStatementSuffixCompact() {
	    let localctx = new AlterStatementSuffixCompactContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, InceptorOracleParser.RULE_alterStatementSuffixCompact);
	    var _la = 0; // Token type
	    try {
	        this.state = 2017;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case InceptorOracleParser.KW_COMPACT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2004;
	            this.match(InceptorOracleParser.KW_COMPACT);
	            this.state = 2005;
	            localctx.compactType = this.match(InceptorOracleParser.StringLiteral);
	            this.state = 2007;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_AND) {
	                this.state = 2006;
	                this.blocking();
	            }

	            break;
	        case InceptorOracleParser.KW_ENABLE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2009;
	            this.match(InceptorOracleParser.KW_ENABLE);
	            this.state = 2010;
	            this.match(InceptorOracleParser.KW_COMPACT);
	            break;
	        case InceptorOracleParser.KW_DISABLE:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2011;
	            this.match(InceptorOracleParser.KW_DISABLE);
	            this.state = 2012;
	            this.match(InceptorOracleParser.KW_COMPACT);
	            this.state = 2015;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_FOR) {
	                this.state = 2013;
	                this.match(InceptorOracleParser.KW_FOR);
	                this.state = 2014;
	                localctx.reason = this.match(InceptorOracleParser.StringLiteral);
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterStatementSuffixUpdateStatsCol() {
	    let localctx = new AlterStatementSuffixUpdateStatsColContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, InceptorOracleParser.RULE_alterStatementSuffixUpdateStatsCol);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2019;
	        this.match(InceptorOracleParser.KW_UPDATE);
	        this.state = 2020;
	        this.match(InceptorOracleParser.KW_STATISTICS);
	        this.state = 2021;
	        this.match(InceptorOracleParser.KW_FOR);
	        this.state = 2023;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_COLUMN) {
	            this.state = 2022;
	            this.match(InceptorOracleParser.KW_COLUMN);
	        }

	        this.state = 2025;
	        localctx.colName = this.identifier();
	        this.state = 2026;
	        this.match(InceptorOracleParser.KW_SET);
	        this.state = 2027;
	        this.tableProperties();
	        this.state = 2030;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_COMMENT) {
	            this.state = 2028;
	            this.match(InceptorOracleParser.KW_COMMENT);
	            this.state = 2029;
	            localctx.comment = this.match(InceptorOracleParser.StringLiteral);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterStatementChangeColPosition() {
	    let localctx = new AlterStatementChangeColPositionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, InceptorOracleParser.RULE_alterStatementChangeColPosition);
	    try {
	        this.state = 2035;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case InceptorOracleParser.KW_FIRST:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2032;
	            localctx.first = this.match(InceptorOracleParser.KW_FIRST);
	            break;
	        case InceptorOracleParser.KW_AFTER:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2033;
	            this.match(InceptorOracleParser.KW_AFTER);
	            this.state = 2034;
	            localctx.afterCol = this.identifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterStatementSuffixAddPartitions() {
	    let localctx = new AlterStatementSuffixAddPartitionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, InceptorOracleParser.RULE_alterStatementSuffixAddPartitions);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2037;
	        this.tableName();
	        this.state = 2038;
	        this.match(InceptorOracleParser.KW_ADD);
	        this.state = 2040;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_IF) {
	            this.state = 2039;
	            this.ifNotExists();
	        }

	        this.state = 2052;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,74,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 2043; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 2042;
	                this.alterStatementSuffixAddPartitionsElement();
	                this.state = 2045; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===InceptorOracleParser.KW_PARTITION);
	            break;

	        case 2:
	            this.state = 2048; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 2047;
	                this.alterStatementSuffixAddRangePartitionsElement();
	                this.state = 2050; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===InceptorOracleParser.KW_PARTITION);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterStatementSuffixAddPartitionsElement() {
	    let localctx = new AlterStatementSuffixAddPartitionsElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, InceptorOracleParser.RULE_alterStatementSuffixAddPartitionsElement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2054;
	        this.partitionSpec();
	        this.state = 2056;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_LOCATION) {
	            this.state = 2055;
	            this.partitionLocation();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterStatementSuffixAddRangePartitionsElement() {
	    let localctx = new AlterStatementSuffixAddRangePartitionsElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, InceptorOracleParser.RULE_alterStatementSuffixAddRangePartitionsElement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2058;
	        this.rangePartition();
	        this.state = 2060;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_LOCATION) {
	            this.state = 2059;
	            this.partitionLocation();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterStatementSuffixTouch() {
	    let localctx = new AlterStatementSuffixTouchContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, InceptorOracleParser.RULE_alterStatementSuffixTouch);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2062;
	        this.tableName();
	        this.state = 2063;
	        this.match(InceptorOracleParser.KW_TOUCH);
	        this.state = 2067;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===InceptorOracleParser.KW_PARTITION) {
	            this.state = 2064;
	            this.partitionSpec();
	            this.state = 2069;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterStatementSuffixArchive() {
	    let localctx = new AlterStatementSuffixArchiveContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, InceptorOracleParser.RULE_alterStatementSuffixArchive);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2070;
	        this.tableName();
	        this.state = 2071;
	        this.match(InceptorOracleParser.KW_ARCHIVE);
	        this.state = 2075;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===InceptorOracleParser.KW_PARTITION) {
	            this.state = 2072;
	            this.partitionSpec();
	            this.state = 2077;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterStatementSuffixUnArchive() {
	    let localctx = new AlterStatementSuffixUnArchiveContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, InceptorOracleParser.RULE_alterStatementSuffixUnArchive);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2078;
	        this.tableName();
	        this.state = 2079;
	        this.match(InceptorOracleParser.KW_UNARCHIVE);
	        this.state = 2083;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===InceptorOracleParser.KW_PARTITION) {
	            this.state = 2080;
	            this.partitionSpec();
	            this.state = 2085;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partitionLocation() {
	    let localctx = new PartitionLocationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, InceptorOracleParser.RULE_partitionLocation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2086;
	        this.match(InceptorOracleParser.KW_LOCATION);
	        this.state = 2087;
	        localctx.locn = this.match(InceptorOracleParser.StringLiteral);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterStatementSuffixDropPartitions() {
	    let localctx = new AlterStatementSuffixDropPartitionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, InceptorOracleParser.RULE_alterStatementSuffixDropPartitions);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2089;
	        this.tableName();
	        this.state = 2090;
	        this.match(InceptorOracleParser.KW_DROP);
	        this.state = 2092;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_IF) {
	            this.state = 2091;
	            this.ifExists();
	        }

	        this.state = 2094;
	        this.dropPartitionSpec();
	        this.state = 2099;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===InceptorOracleParser.COMMA) {
	            this.state = 2095;
	            this.match(InceptorOracleParser.COMMA);
	            this.state = 2096;
	            this.dropPartitionSpec();
	            this.state = 2101;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2103;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_IGNORE) {
	            this.state = 2102;
	            this.ignoreProtection();
	        }

	        this.state = 2106;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_PURGE) {
	            this.state = 2105;
	            this.match(InceptorOracleParser.KW_PURGE);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterStatementSuffixProperties() {
	    let localctx = new AlterStatementSuffixPropertiesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, InceptorOracleParser.RULE_alterStatementSuffixProperties);
	    var _la = 0; // Token type
	    try {
	        this.state = 2121;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,85,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2108;
	            this.tableName();
	            this.state = 2109;
	            this.match(InceptorOracleParser.KW_SET);
	            this.state = 2110;
	            this.match(InceptorOracleParser.KW_TBLPROPERTIES);
	            this.state = 2111;
	            this.tableProperties();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2113;
	            this.tableName();
	            this.state = 2114;
	            this.match(InceptorOracleParser.KW_UNSET);
	            this.state = 2115;
	            this.match(InceptorOracleParser.KW_TBLPROPERTIES);
	            this.state = 2117;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_IF) {
	                this.state = 2116;
	                this.ifExists();
	            }

	            this.state = 2119;
	            this.tableProperties();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterViewSuffixProperties(materialized) {
	    let localctx = new AlterViewSuffixPropertiesContext(this, this._ctx, this.state, materialized);
	    this.enterRule(localctx, 178, InceptorOracleParser.RULE_alterViewSuffixProperties);
	    var _la = 0; // Token type
	    try {
	        this.state = 2136;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,87,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2123;
	            this.tableName();
	            this.state = 2124;
	            this.match(InceptorOracleParser.KW_SET);
	            this.state = 2125;
	            this.match(InceptorOracleParser.KW_TBLPROPERTIES);
	            this.state = 2126;
	            this.tableProperties();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2128;
	            this.tableName();
	            this.state = 2129;
	            this.match(InceptorOracleParser.KW_UNSET);
	            this.state = 2130;
	            this.match(InceptorOracleParser.KW_TBLPROPERTIES);
	            this.state = 2132;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_IF) {
	                this.state = 2131;
	                this.ifExists();
	            }

	            this.state = 2134;
	            this.tableProperties();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterStatementSuffixSerdeProperties() {
	    let localctx = new AlterStatementSuffixSerdePropertiesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, InceptorOracleParser.RULE_alterStatementSuffixSerdeProperties);
	    var _la = 0; // Token type
	    try {
	        this.state = 2149;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,89,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2138;
	            this.match(InceptorOracleParser.KW_SET);
	            this.state = 2139;
	            this.match(InceptorOracleParser.KW_SERDE);
	            this.state = 2140;
	            localctx.serdeName = this.match(InceptorOracleParser.StringLiteral);
	            this.state = 2144;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_WITH) {
	                this.state = 2141;
	                this.match(InceptorOracleParser.KW_WITH);
	                this.state = 2142;
	                this.match(InceptorOracleParser.KW_SERDEPROPERTIES);
	                this.state = 2143;
	                this.tableProperties();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2146;
	            this.match(InceptorOracleParser.KW_SET);
	            this.state = 2147;
	            this.match(InceptorOracleParser.KW_SERDEPROPERTIES);
	            this.state = 2148;
	            this.tableProperties();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterTblPartitionStatement() {
	    let localctx = new AlterTblPartitionStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, InceptorOracleParser.RULE_alterTblPartitionStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2151;
	        this.tablePartitionPrefix();
	        this.state = 2152;
	        this.alterTblPartitionStatementSuffix();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterTblPartitionStatementSuffix() {
	    let localctx = new AlterTblPartitionStatementSuffixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, InceptorOracleParser.RULE_alterTblPartitionStatementSuffix);
	    try {
	        this.state = 2167;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,90,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2154;
	            this.alterStatementSuffixFileFormat();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2155;
	            this.alterStatementSuffixLocation();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2156;
	            this.alterStatementSuffixProtectMode();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2157;
	            this.alterStatementSuffixMergeFiles();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2158;
	            this.alterStatementSuffixSerdeProperties();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2159;
	            this.alterStatementSuffixRenamePart();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2160;
	            this.alterStatementSuffixBucketNum();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 2161;
	            this.alterTblPartitionStatementSuffixSkewedLocation();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 2162;
	            this.alterStatementSuffixClusterbySortby();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 2163;
	            this.alterStatementSuffixCompact();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 2164;
	            this.alterStatementSuffixUpdateStatsCol();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 2165;
	            this.alterStatementSuffixRenameCol();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 2166;
	            this.alterStatementSuffixAddCol();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterStatementSuffixFileFormat() {
	    let localctx = new AlterStatementSuffixFileFormatContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, InceptorOracleParser.RULE_alterStatementSuffixFileFormat);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2169;
	        this.match(InceptorOracleParser.KW_SET);
	        this.state = 2170;
	        this.match(InceptorOracleParser.KW_FILEFORMAT);
	        this.state = 2171;
	        this.fileFormat();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterStatementSuffixClusterbySortby() {
	    let localctx = new AlterStatementSuffixClusterbySortbyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, InceptorOracleParser.RULE_alterStatementSuffixClusterbySortby);
	    try {
	        this.state = 2178;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,91,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2173;
	            this.match(InceptorOracleParser.KW_NOT);
	            this.state = 2174;
	            this.match(InceptorOracleParser.KW_CLUSTERED);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2175;
	            this.match(InceptorOracleParser.KW_NOT);
	            this.state = 2176;
	            this.match(InceptorOracleParser.KW_SORTED);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2177;
	            this.tableBuckets();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterTblPartitionStatementSuffixSkewedLocation() {
	    let localctx = new AlterTblPartitionStatementSuffixSkewedLocationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, InceptorOracleParser.RULE_alterTblPartitionStatementSuffixSkewedLocation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2180;
	        this.match(InceptorOracleParser.KW_SET);
	        this.state = 2181;
	        this.match(InceptorOracleParser.KW_SKEWED);
	        this.state = 2182;
	        this.match(InceptorOracleParser.KW_LOCATION);
	        this.state = 2183;
	        this.skewedLocations();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	skewedLocations() {
	    let localctx = new SkewedLocationsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, InceptorOracleParser.RULE_skewedLocations);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2185;
	        this.match(InceptorOracleParser.LPAREN);
	        this.state = 2186;
	        this.skewedLocationsList();
	        this.state = 2187;
	        this.match(InceptorOracleParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	skewedLocationsList() {
	    let localctx = new SkewedLocationsListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, InceptorOracleParser.RULE_skewedLocationsList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2189;
	        this.skewedLocationMap();
	        this.state = 2194;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===InceptorOracleParser.COMMA) {
	            this.state = 2190;
	            this.match(InceptorOracleParser.COMMA);
	            this.state = 2191;
	            this.skewedLocationMap();
	            this.state = 2196;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	skewedLocationMap() {
	    let localctx = new SkewedLocationMapContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, InceptorOracleParser.RULE_skewedLocationMap);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2197;
	        localctx.key = this.skewedValueLocationElement();
	        this.state = 2198;
	        this.match(InceptorOracleParser.EQUAL);
	        this.state = 2199;
	        localctx.value = this.match(InceptorOracleParser.StringLiteral);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterStatementSuffixLocation() {
	    let localctx = new AlterStatementSuffixLocationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, InceptorOracleParser.RULE_alterStatementSuffixLocation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2201;
	        this.match(InceptorOracleParser.KW_SET);
	        this.state = 2202;
	        this.match(InceptorOracleParser.KW_LOCATION);
	        this.state = 2203;
	        localctx.newLoc = this.match(InceptorOracleParser.StringLiteral);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterStatementSuffixSkewedby() {
	    let localctx = new AlterStatementSuffixSkewedbyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 200, InceptorOracleParser.RULE_alterStatementSuffixSkewedby);
	    try {
	        this.state = 2216;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,93,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2205;
	            this.tableName();
	            this.state = 2206;
	            this.tableSkewed();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2208;
	            this.tableName();
	            this.state = 2209;
	            this.match(InceptorOracleParser.KW_NOT);
	            this.state = 2210;
	            this.match(InceptorOracleParser.KW_SKEWED);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2212;
	            this.tableName();
	            this.state = 2213;
	            this.match(InceptorOracleParser.KW_NOT);
	            this.state = 2214;
	            this.storedAsDirs();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterStatementSuffixExchangePartition() {
	    let localctx = new AlterStatementSuffixExchangePartitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 202, InceptorOracleParser.RULE_alterStatementSuffixExchangePartition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2218;
	        localctx.name = this.tableName();
	        this.state = 2219;
	        this.match(InceptorOracleParser.KW_EXCHANGE);
	        this.state = 2220;
	        this.partitionSpec();
	        this.state = 2221;
	        this.match(InceptorOracleParser.KW_WITH);
	        this.state = 2222;
	        this.match(InceptorOracleParser.KW_TABLE);
	        this.state = 2223;
	        localctx.exchangename = this.tableName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterStatementSuffixProtectMode() {
	    let localctx = new AlterStatementSuffixProtectModeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 204, InceptorOracleParser.RULE_alterStatementSuffixProtectMode);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2225;
	        this.alterProtectMode();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterStatementSuffixRenamePart() {
	    let localctx = new AlterStatementSuffixRenamePartContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 206, InceptorOracleParser.RULE_alterStatementSuffixRenamePart);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2227;
	        this.match(InceptorOracleParser.KW_RENAME);
	        this.state = 2228;
	        this.match(InceptorOracleParser.KW_TO);
	        this.state = 2229;
	        this.partitionSpec();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterStatementSuffixMergeFiles() {
	    let localctx = new AlterStatementSuffixMergeFilesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 208, InceptorOracleParser.RULE_alterStatementSuffixMergeFiles);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2231;
	        this.match(InceptorOracleParser.KW_CONCATENATE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterProtectMode() {
	    let localctx = new AlterProtectModeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 210, InceptorOracleParser.RULE_alterProtectMode);
	    try {
	        this.state = 2237;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case InceptorOracleParser.KW_ENABLE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2233;
	            this.match(InceptorOracleParser.KW_ENABLE);
	            this.state = 2234;
	            this.alterProtectModeMode();
	            break;
	        case InceptorOracleParser.KW_DISABLE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2235;
	            this.match(InceptorOracleParser.KW_DISABLE);
	            this.state = 2236;
	            this.alterProtectModeMode();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterProtectModeMode() {
	    let localctx = new AlterProtectModeModeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 212, InceptorOracleParser.RULE_alterProtectModeMode);
	    var _la = 0; // Token type
	    try {
	        this.state = 2245;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case InceptorOracleParser.KW_OFFLINE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2239;
	            this.match(InceptorOracleParser.KW_OFFLINE);
	            break;
	        case InceptorOracleParser.KW_NO_DROP:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2240;
	            this.match(InceptorOracleParser.KW_NO_DROP);
	            this.state = 2242;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_CASCADE) {
	                this.state = 2241;
	                this.match(InceptorOracleParser.KW_CASCADE);
	            }

	            break;
	        case InceptorOracleParser.KW_READONLY:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2244;
	            this.match(InceptorOracleParser.KW_READONLY);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterStatementSuffixBucketNum() {
	    let localctx = new AlterStatementSuffixBucketNumContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 214, InceptorOracleParser.RULE_alterStatementSuffixBucketNum);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2247;
	        this.match(InceptorOracleParser.KW_INTO);
	        this.state = 2248;
	        localctx.num = this.match(InceptorOracleParser.Number);
	        this.state = 2249;
	        this.match(InceptorOracleParser.KW_BUCKETS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fileFormat() {
	    let localctx = new FileFormatContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 216, InceptorOracleParser.RULE_fileFormat);
	    var _la = 0; // Token type
	    try {
	        this.state = 2269;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,98,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2251;
	            this.match(InceptorOracleParser.KW_SEQUENCEFILE);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2252;
	            this.match(InceptorOracleParser.KW_TEXTFILE);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2253;
	            this.match(InceptorOracleParser.KW_RCFILE);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2254;
	            this.match(InceptorOracleParser.KW_ORCFILE);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2255;
	            this.match(InceptorOracleParser.KW_ORCTRANSACTIONFILE);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2256;
	            this.match(InceptorOracleParser.KW_PARQUET);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2257;
	            this.match(InceptorOracleParser.KW_HYPERDRIVE);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 2258;
	            this.match(InceptorOracleParser.KW_INPUTFORMAT);
	            this.state = 2259;
	            localctx.inFmt = this.match(InceptorOracleParser.StringLiteral);
	            this.state = 2260;
	            this.match(InceptorOracleParser.KW_OUTPUTFORMAT);
	            this.state = 2261;
	            localctx.outFmt = this.match(InceptorOracleParser.StringLiteral);
	            this.state = 2266;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_INPUTDRIVER) {
	                this.state = 2262;
	                this.match(InceptorOracleParser.KW_INPUTDRIVER);
	                this.state = 2263;
	                localctx.inDriver = this.match(InceptorOracleParser.StringLiteral);
	                this.state = 2264;
	                this.match(InceptorOracleParser.KW_OUTPUTDRIVER);
	                this.state = 2265;
	                localctx.outDriver = this.match(InceptorOracleParser.StringLiteral);
	            }

	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 2268;
	            localctx.genericSpec = this.identifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ignoreProtection() {
	    let localctx = new IgnoreProtectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 218, InceptorOracleParser.RULE_ignoreProtection);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2271;
	        this.match(InceptorOracleParser.KW_IGNORE);
	        this.state = 2272;
	        this.match(InceptorOracleParser.KW_PROTECTION);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropPartitionSpec() {
	    let localctx = new DropPartitionSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 220, InceptorOracleParser.RULE_dropPartitionSpec);
	    var _la = 0; // Token type
	    try {
	        this.state = 2288;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,100,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2274;
	            this.match(InceptorOracleParser.KW_PARTITION);
	            this.state = 2275;
	            this.match(InceptorOracleParser.LPAREN);
	            this.state = 2276;
	            this.dropPartitionVal();
	            this.state = 2281;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===InceptorOracleParser.COMMA) {
	                this.state = 2277;
	                this.match(InceptorOracleParser.COMMA);
	                this.state = 2278;
	                this.dropPartitionVal();
	                this.state = 2283;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2284;
	            this.match(InceptorOracleParser.RPAREN);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2286;
	            this.match(InceptorOracleParser.KW_PARTITION);
	            this.state = 2287;
	            this.identifierList();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropPartitionVal() {
	    let localctx = new DropPartitionValContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 222, InceptorOracleParser.RULE_dropPartitionVal);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2290;
	        this.identifier();
	        this.state = 2291;
	        this.dropPartitionOperator();
	        this.state = 2292;
	        this.constant();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropPartitionOperator() {
	    let localctx = new DropPartitionOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 224, InceptorOracleParser.RULE_dropPartitionOperator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2294;
	        _la = this._input.LA(1);
	        if(!(((((_la - 500)) & ~0x1f) == 0 && ((1 << (_la - 500)) & ((1 << (InceptorOracleParser.EQUAL - 500)) | (1 << (InceptorOracleParser.NOTEQUAL - 500)) | (1 << (InceptorOracleParser.LESSTHANOREQUALTO - 500)) | (1 << (InceptorOracleParser.LESSTHAN - 500)) | (1 << (InceptorOracleParser.GREATERTHANOREQUALTO - 500)) | (1 << (InceptorOracleParser.GREATERTHAN - 500)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterBlacklistStatementSuffix() {
	    let localctx = new AlterBlacklistStatementSuffixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 226, InceptorOracleParser.RULE_alterBlacklistStatementSuffix);
	    try {
	        this.state = 2304;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,101,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2296;
	            this.match(InceptorOracleParser.KW_ADD);
	            this.state = 2297;
	            this.match(InceptorOracleParser.KW_USER);
	            this.state = 2298;
	            this.identifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2299;
	            this.match(InceptorOracleParser.KW_DELETE);
	            this.state = 2300;
	            this.match(InceptorOracleParser.KW_USER);
	            this.state = 2301;
	            this.identifier();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2302;
	            this.match(InceptorOracleParser.KW_DELETE);
	            this.state = 2303;
	            this.match(InceptorOracleParser.KW_ALL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterStatementSuffixDropConstraint() {
	    let localctx = new AlterStatementSuffixDropConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 228, InceptorOracleParser.RULE_alterStatementSuffixDropConstraint);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2306;
	        this.tableName();
	        this.state = 2307;
	        this.match(InceptorOracleParser.KW_DROP);
	        this.state = 2308;
	        this.match(InceptorOracleParser.KW_CONSTRAINT);
	        this.state = 2309;
	        localctx.cName = this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterStatementSuffixAddConstraint() {
	    let localctx = new AlterStatementSuffixAddConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 230, InceptorOracleParser.RULE_alterStatementSuffixAddConstraint);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2311;
	        this.tableName();
	        this.state = 2312;
	        this.match(InceptorOracleParser.KW_ADD);
	        this.state = 2315;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,102,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 2313;
	            localctx.fk = this.alterForeignKeyWithName();
	            break;

	        case 2:
	            this.state = 2314;
	            this.alterConstraintWithName();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterConstraintWithName() {
	    let localctx = new AlterConstraintWithNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 232, InceptorOracleParser.RULE_alterConstraintWithName);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2317;
	        this.match(InceptorOracleParser.KW_CONSTRAINT);
	        this.state = 2318;
	        localctx.constraintName = this.identifier();
	        this.state = 2319;
	        this.tableConstraintType();
	        this.state = 2320;
	        localctx.pkCols = this.parenColumnNameList();
	        this.state = 2322;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_ENABLE || _la===InceptorOracleParser.KW_DISABLE || ((((_la - 455)) & ~0x1f) == 0 && ((1 << (_la - 455)) & ((1 << (InceptorOracleParser.KW_VALIDATE - 455)) | (1 << (InceptorOracleParser.KW_NOVALIDATE - 455)) | (1 << (InceptorOracleParser.KW_RELY - 455)) | (1 << (InceptorOracleParser.KW_NORELY - 455)))) !== 0)) {
	            this.state = 2321;
	            this.constraintOpts();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterForeignKeyWithName() {
	    let localctx = new AlterForeignKeyWithNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 234, InceptorOracleParser.RULE_alterForeignKeyWithName);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2324;
	        this.match(InceptorOracleParser.KW_CONSTRAINT);
	        this.state = 2325;
	        localctx.constraintName = this.identifier();
	        this.state = 2326;
	        this.match(InceptorOracleParser.KW_FOREIGN);
	        this.state = 2327;
	        this.match(InceptorOracleParser.KW_KEY);
	        this.state = 2328;
	        localctx.fkCols = this.parenColumnNameList();
	        this.state = 2329;
	        this.match(InceptorOracleParser.KW_REFERENCES);
	        this.state = 2330;
	        localctx.tabName = this.tableName();
	        this.state = 2331;
	        localctx.parCols = this.parenColumnNameList();
	        this.state = 2333;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_ENABLE || _la===InceptorOracleParser.KW_DISABLE || ((((_la - 455)) & ~0x1f) == 0 && ((1 << (_la - 455)) & ((1 << (InceptorOracleParser.KW_VALIDATE - 455)) | (1 << (InceptorOracleParser.KW_NOVALIDATE - 455)) | (1 << (InceptorOracleParser.KW_RELY - 455)) | (1 << (InceptorOracleParser.KW_NORELY - 455)))) !== 0)) {
	            this.state = 2332;
	            this.constraintOpts();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterStatementIntervalValue() {
	    let localctx = new AlterStatementIntervalValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 236, InceptorOracleParser.RULE_alterStatementIntervalValue);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2335;
	        this.tableName();
	        this.state = 2336;
	        this.match(InceptorOracleParser.KW_SET);
	        this.state = 2337;
	        this.match(InceptorOracleParser.KW_INTERVAL);
	        this.state = 2338;
	        this.match(InceptorOracleParser.LPAREN);
	        this.state = 2341;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,105,this._ctx);
	        if(la_===1) {
	            this.state = 2339;
	            localctx.intervalConst = this.constant();

	        } else if(la_===2) {
	            this.state = 2340;
	            localctx.intervalFunction = this.normfunction();

	        }
	        this.state = 2343;
	        this.match(InceptorOracleParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	atomExpression() {
	    let localctx = new AtomExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 238, InceptorOracleParser.RULE_atomExpression);
	    try {
	        this.state = 2360;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,106,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2345;
	            this.match(InceptorOracleParser.KW_NULL);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2346;
	            this.constant();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2347;
	            this.widcardExpression();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2348;
	            this.existExpression();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2349;
	            this.castExpression();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2350;
	            this.caseExpression();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2351;
	            this.whenExpression();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 2352;
	            this.extractExpression();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 2353;
	            this.substringExpression();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 2354;
	            this.tableOrColumn();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 2355;
	            this.expressionsInParenthesis();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 2356;
	            this.match(InceptorOracleParser.LPAREN);
	            this.state = 2357;
	            this.selectStatement();
	            this.state = 2358;
	            this.match(InceptorOracleParser.RPAREN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sqlCallStatement() {
	    let localctx = new SqlCallStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 240, InceptorOracleParser.RULE_sqlCallStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2362;
	        this.match(InceptorOracleParser.KW_CALL);
	        this.state = 2363;
	        this.leftValue();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constant() {
	    let localctx = new ConstantContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 242, InceptorOracleParser.RULE_constant);
	    try {
	        this.state = 2377;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,107,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2365;
	            this.timeTypeLiteral();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2366;
	            this.match(InceptorOracleParser.Number);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2367;
	            this.match(InceptorOracleParser.StringLiteral);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2368;
	            this.match(InceptorOracleParser.BigintLiteral);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2369;
	            this.match(InceptorOracleParser.SmallintLiteral);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2370;
	            this.match(InceptorOracleParser.TinyintLiteral);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2371;
	            this.match(InceptorOracleParser.DecimalLiteral);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 2372;
	            this.match(InceptorOracleParser.CharSetLiteral);
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 2373;
	            this.charSetStringLiteral();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 2374;
	            this.booleanValue();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 2375;
	            this.match(InceptorOracleParser.KW_MAXVALUE);
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 2376;
	            this.match(InceptorOracleParser.KW_UNLIMITED);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defaultConstantValue() {
	    let localctx = new DefaultConstantValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 244, InceptorOracleParser.RULE_defaultConstantValue);
	    try {
	        this.state = 2389;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,108,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2379;
	            this.timeTypeLiteral();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2380;
	            this.match(InceptorOracleParser.MINUS);
	            this.state = 2381;
	            this.nonNegativeDigitValue();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2382;
	            this.nonNegativeDigitValue();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2383;
	            this.match(InceptorOracleParser.StringLiteral);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2384;
	            this.match(InceptorOracleParser.CharSetLiteral);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2385;
	            this.charSetStringLiteral();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2386;
	            this.booleanValue();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 2387;
	            this.match(InceptorOracleParser.KW_MAXVALUE);
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 2388;
	            this.match(InceptorOracleParser.KW_UNLIMITED);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nonNegativeDigitValue() {
	    let localctx = new NonNegativeDigitValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 246, InceptorOracleParser.RULE_nonNegativeDigitValue);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2391;
	        _la = this._input.LA(1);
	        if(!(((((_la - 530)) & ~0x1f) == 0 && ((1 << (_la - 530)) & ((1 << (InceptorOracleParser.BigintLiteral - 530)) | (1 << (InceptorOracleParser.SmallintLiteral - 530)) | (1 << (InceptorOracleParser.TinyintLiteral - 530)) | (1 << (InceptorOracleParser.DecimalLiteral - 530)) | (1 << (InceptorOracleParser.Number - 530)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringLiteralSequence() {
	    let localctx = new StringLiteralSequenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 248, InceptorOracleParser.RULE_stringLiteralSequence);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2393;
	        this.match(InceptorOracleParser.StringLiteral);
	        this.state = 2395; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 2394;
	            this.match(InceptorOracleParser.StringLiteral);
	            this.state = 2397; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===InceptorOracleParser.StringLiteral);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	charSetStringLiteral() {
	    let localctx = new CharSetStringLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 250, InceptorOracleParser.RULE_charSetStringLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2399;
	        localctx.csName = this.match(InceptorOracleParser.CharSetName);
	        this.state = 2400;
	        localctx.csLiteral = this.match(InceptorOracleParser.CharSetLiteral);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	booleanValue() {
	    let localctx = new BooleanValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 252, InceptorOracleParser.RULE_booleanValue);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2402;
	        _la = this._input.LA(1);
	        if(!(_la===InceptorOracleParser.KW_TRUE || _la===InceptorOracleParser.KW_FALSE)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnNameTypeOrConstraintList() {
	    let localctx = new ColumnNameTypeOrConstraintListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 254, InceptorOracleParser.RULE_columnNameTypeOrConstraintList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2404;
	        this.columnNameTypeOrConstraint();
	        this.state = 2409;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===InceptorOracleParser.COMMA) {
	            this.state = 2405;
	            this.match(InceptorOracleParser.COMMA);
	            this.state = 2406;
	            this.columnNameTypeOrConstraint();
	            this.state = 2411;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnNameTypeOrConstraint() {
	    let localctx = new ColumnNameTypeOrConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 256, InceptorOracleParser.RULE_columnNameTypeOrConstraint);
	    try {
	        this.state = 2414;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,111,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2412;
	            this.tableConstraint();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2413;
	            this.columnNameType();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableConstraint() {
	    let localctx = new TableConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 258, InceptorOracleParser.RULE_tableConstraint);
	    try {
	        this.state = 2418;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,112,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2416;
	            this.createForeignKey();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2417;
	            this.createConstraint();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createForeignKey() {
	    let localctx = new CreateForeignKeyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 260, InceptorOracleParser.RULE_createForeignKey);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2422;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_CONSTRAINT) {
	            this.state = 2420;
	            this.match(InceptorOracleParser.KW_CONSTRAINT);
	            this.state = 2421;
	            localctx.constraintName = this.identifier();
	        }

	        this.state = 2424;
	        this.match(InceptorOracleParser.KW_FOREIGN);
	        this.state = 2425;
	        this.match(InceptorOracleParser.KW_KEY);
	        this.state = 2426;
	        localctx.fkCols = this.parenColumnNameList();
	        this.state = 2427;
	        this.match(InceptorOracleParser.KW_REFERENCES);
	        this.state = 2428;
	        localctx.tabName = this.tableName();
	        this.state = 2429;
	        localctx.parCols = this.parenColumnNameList();
	        this.state = 2431;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_ENABLE || _la===InceptorOracleParser.KW_DISABLE || ((((_la - 455)) & ~0x1f) == 0 && ((1 << (_la - 455)) & ((1 << (InceptorOracleParser.KW_VALIDATE - 455)) | (1 << (InceptorOracleParser.KW_NOVALIDATE - 455)) | (1 << (InceptorOracleParser.KW_RELY - 455)) | (1 << (InceptorOracleParser.KW_NORELY - 455)))) !== 0)) {
	            this.state = 2430;
	            this.constraintOpts();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createConstraint() {
	    let localctx = new CreateConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 262, InceptorOracleParser.RULE_createConstraint);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2435;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_CONSTRAINT) {
	            this.state = 2433;
	            this.match(InceptorOracleParser.KW_CONSTRAINT);
	            this.state = 2434;
	            localctx.constraintName = this.identifier();
	        }

	        this.state = 2437;
	        this.tableConstraintType();
	        this.state = 2438;
	        localctx.pkCols = this.parenColumnNameList();
	        this.state = 2440;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_ENABLE || _la===InceptorOracleParser.KW_DISABLE || ((((_la - 455)) & ~0x1f) == 0 && ((1 << (_la - 455)) & ((1 << (InceptorOracleParser.KW_VALIDATE - 455)) | (1 << (InceptorOracleParser.KW_NOVALIDATE - 455)) | (1 << (InceptorOracleParser.KW_RELY - 455)) | (1 << (InceptorOracleParser.KW_NORELY - 455)))) !== 0)) {
	            this.state = 2439;
	            this.constraintOpts();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableConstraintType() {
	    let localctx = new TableConstraintTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 264, InceptorOracleParser.RULE_tableConstraintType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2442;
	        this.match(InceptorOracleParser.KW_PRIMARY);
	        this.state = 2443;
	        this.match(InceptorOracleParser.KW_KEY);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constraintOpts() {
	    let localctx = new ConstraintOptsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 266, InceptorOracleParser.RULE_constraintOpts);
	    try {
	        this.state = 2461;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,117,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2445;
	            this.enableSpecification();
	            this.state = 2446;
	            this.validateSpecification();
	            this.state = 2447;
	            this.relySpecification();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2449;
	            this.validateSpecification();
	            this.state = 2450;
	            this.relySpecification();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2452;
	            this.enableSpecification();
	            this.state = 2453;
	            this.validateSpecification();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2455;
	            this.enableSpecification();
	            this.state = 2456;
	            this.relySpecification();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2458;
	            this.relySpecification();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2459;
	            this.validateSpecification();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2460;
	            this.enableSpecification();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enableSpecification() {
	    let localctx = new EnableSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 268, InceptorOracleParser.RULE_enableSpecification);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2463;
	        _la = this._input.LA(1);
	        if(!(_la===InceptorOracleParser.KW_ENABLE || _la===InceptorOracleParser.KW_DISABLE)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	validateSpecification() {
	    let localctx = new ValidateSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 270, InceptorOracleParser.RULE_validateSpecification);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2465;
	        _la = this._input.LA(1);
	        if(!(_la===InceptorOracleParser.KW_VALIDATE || _la===InceptorOracleParser.KW_NOVALIDATE)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relySpecification() {
	    let localctx = new RelySpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 272, InceptorOracleParser.RULE_relySpecification);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2467;
	        _la = this._input.LA(1);
	        if(!(_la===InceptorOracleParser.KW_RELY || _la===InceptorOracleParser.KW_NORELY)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnConstraint() {
	    let localctx = new ColumnConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 274, InceptorOracleParser.RULE_columnConstraint);
	    try {
	        this.state = 2471;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,118,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2469;
	            this.colPKConstraint();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2470;
	            this.colFKConstraint();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	colPKConstraint() {
	    let localctx = new ColPKConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 276, InceptorOracleParser.RULE_colPKConstraint);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2475;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_CONSTRAINT) {
	            this.state = 2473;
	            this.match(InceptorOracleParser.KW_CONSTRAINT);
	            this.state = 2474;
	            localctx.constraintName = this.identifier();
	        }

	        this.state = 2477;
	        this.match(InceptorOracleParser.KW_PRIMARY);
	        this.state = 2478;
	        this.match(InceptorOracleParser.KW_KEY);
	        this.state = 2480;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,120,this._ctx);
	        if(la_===1) {
	            this.state = 2479;
	            this.constraintOpts();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	colFKConstraint() {
	    let localctx = new ColFKConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 278, InceptorOracleParser.RULE_colFKConstraint);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2484;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_CONSTRAINT) {
	            this.state = 2482;
	            this.match(InceptorOracleParser.KW_CONSTRAINT);
	            this.state = 2483;
	            localctx.constraintName = this.identifier();
	        }

	        this.state = 2486;
	        this.match(InceptorOracleParser.KW_REFERENCES);
	        this.state = 2487;
	        localctx.tabName = this.tableName();
	        this.state = 2488;
	        this.match(InceptorOracleParser.LPAREN);
	        this.state = 2489;
	        localctx.colName = this.columnName();
	        this.state = 2490;
	        this.match(InceptorOracleParser.RPAREN);
	        this.state = 2492;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,122,this._ctx);
	        if(la_===1) {
	            this.state = 2491;
	            this.constraintOpts();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parenColumnNameList() {
	    let localctx = new ParenColumnNameListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 280, InceptorOracleParser.RULE_parenColumnNameList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2494;
	        this.match(InceptorOracleParser.LPAREN);
	        this.state = 2495;
	        this.columnNameList();
	        this.state = 2496;
	        this.match(InceptorOracleParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defaultVauleOrColumnConstraint() {
	    let localctx = new DefaultVauleOrColumnConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 282, InceptorOracleParser.RULE_defaultVauleOrColumnConstraint);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2499; 
	        this._errHandler.sync(this);
	        let _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 2498;
	        		this.columnAttribute();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 2501; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,123, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnAttribute() {
	    let localctx = new ColumnAttributeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 284, InceptorOracleParser.RULE_columnAttribute);
	    try {
	        this.state = 2507;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case InceptorOracleParser.KW_NOT:
	        case InceptorOracleParser.KW_UNIQUE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2503;
	            this.dialectcolumnConstraint();
	            break;
	        case InceptorOracleParser.KW_CONSTRAINT:
	        case InceptorOracleParser.KW_PRIMARY:
	        case InceptorOracleParser.KW_REFERENCES:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2504;
	            this.columnConstraint();
	            break;
	        case InceptorOracleParser.KW_COMMENT:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2505;
	            this.columnComment();
	            break;
	        case InceptorOracleParser.KW_DEFAULT:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2506;
	            this.defaultValueNode();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	crudStatement() {
	    let localctx = new CrudStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 286, InceptorOracleParser.RULE_crudStatement);
	    try {
	        this.state = 2513;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case InceptorOracleParser.KW_UPDATE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2509;
	            this.updateStatement();
	            break;
	        case InceptorOracleParser.KW_BATCHUPDATE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2510;
	            this.batchUpdateStatement();
	            break;
	        case InceptorOracleParser.KW_DELETE:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2511;
	            this.deleteStatement();
	            break;
	        case InceptorOracleParser.KW_MERGE:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2512;
	            this.mergeStatement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mergeStatement() {
	    let localctx = new MergeStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 288, InceptorOracleParser.RULE_mergeStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2515;
	        this.match(InceptorOracleParser.KW_MERGE);
	        this.state = 2516;
	        this.match(InceptorOracleParser.KW_INTO);
	        this.state = 2517;
	        this.crudTargetStatement();
	        this.state = 2518;
	        this.match(InceptorOracleParser.KW_USING);
	        this.state = 2519;
	        this.fromSource();
	        this.state = 2520;
	        this.match(InceptorOracleParser.KW_ON);
	        this.state = 2526;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,126,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 2521;
	            this.match(InceptorOracleParser.LPAREN);
	            this.state = 2522;
	            this.expression();
	            this.state = 2523;
	            this.match(InceptorOracleParser.RPAREN);
	            break;

	        case 2:
	            this.state = 2525;
	            this.expression();
	            break;

	        }
	        this.state = 2529;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,127,this._ctx);
	        if(la_===1) {
	            this.state = 2528;
	            this.mergeUpdateClause();

	        }
	        this.state = 2532;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,128,this._ctx);
	        if(la_===1) {
	            this.state = 2531;
	            this.mergeInsertClause();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mergeUpdateClause() {
	    let localctx = new MergeUpdateClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 290, InceptorOracleParser.RULE_mergeUpdateClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2534;
	        this.match(InceptorOracleParser.KW_WHEN);
	        this.state = 2535;
	        this.match(InceptorOracleParser.KW_MATCHED);
	        this.state = 2536;
	        this.match(InceptorOracleParser.KW_THEN);
	        this.state = 2537;
	        this.match(InceptorOracleParser.KW_UPDATE);
	        this.state = 2538;
	        this.match(InceptorOracleParser.KW_SET);
	        this.state = 2539;
	        this.update_set_elements();
	        this.state = 2541;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_WHERE) {
	            this.state = 2540;
	            this.whereClause();
	        }

	        this.state = 2544;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,130,this._ctx);
	        if(la_===1) {
	            this.state = 2543;
	            this.mergeDeleteClause();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mergeDeleteClause() {
	    let localctx = new MergeDeleteClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 292, InceptorOracleParser.RULE_mergeDeleteClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2546;
	        this.match(InceptorOracleParser.KW_DELETE);
	        this.state = 2547;
	        this.whereClause();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mergeInsertClause() {
	    let localctx = new MergeInsertClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 294, InceptorOracleParser.RULE_mergeInsertClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2549;
	        this.match(InceptorOracleParser.KW_WHEN);
	        this.state = 2550;
	        this.match(InceptorOracleParser.KW_NOT);
	        this.state = 2551;
	        this.match(InceptorOracleParser.KW_MATCHED);
	        this.state = 2552;
	        this.match(InceptorOracleParser.KW_THEN);
	        this.state = 2553;
	        this.match(InceptorOracleParser.KW_INSERT);
	        this.state = 2558;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.LPAREN) {
	            this.state = 2554;
	            this.match(InceptorOracleParser.LPAREN);
	            this.state = 2555;
	            this.columnOrtableDotColumnNameList();
	            this.state = 2556;
	            this.match(InceptorOracleParser.RPAREN);
	        }

	        this.state = 2560;
	        this.valuesClause();
	        this.state = 2562;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_WHERE) {
	            this.state = 2561;
	            this.whereClause();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	implicitInsertStatement() {
	    let localctx = new ImplicitInsertStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 296, InceptorOracleParser.RULE_implicitInsertStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2564;
	        this.selectClause();
	        this.state = 2565;
	        this.match(InceptorOracleParser.KW_INTO);
	        this.state = 2566;
	        this.identifier();
	        this.state = 2567;
	        this.fromClause();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	updateStatement() {
	    let localctx = new UpdateStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 298, InceptorOracleParser.RULE_updateStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2569;
	        this.match(InceptorOracleParser.KW_UPDATE);
	        this.state = 2570;
	        this.crudTargetStatement();
	        this.state = 2571;
	        this.match(InceptorOracleParser.KW_SET);
	        this.state = 2572;
	        this.update_set_clause_suffix();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	batchUpdateStatement() {
	    let localctx = new BatchUpdateStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 300, InceptorOracleParser.RULE_batchUpdateStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2574;
	        this.match(InceptorOracleParser.KW_BATCHUPDATE);
	        this.state = 2576;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,133,this._ctx);
	        if(la_===1) {
	            this.state = 2575;
	            this.match(InceptorOracleParser.KW_TABLE);

	        }
	        this.state = 2578;
	        this.tableOrPartition();
	        this.state = 2580;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_AT || _la===InceptorOracleParser.StringLiteral || _la===InceptorOracleParser.Identifier) {
	            this.state = 2579;
	            this.alias();
	        }

	        this.state = 2582;
	        this.batchUpdate_set_clause();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	batchUpdate_set_clause() {
	    let localctx = new BatchUpdate_set_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 302, InceptorOracleParser.RULE_batchUpdate_set_clause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2584;
	        this.match(InceptorOracleParser.KW_SET);
	        this.state = 2585;
	        this.match(InceptorOracleParser.LPAREN);
	        this.state = 2586;
	        this.columnOrtableDotColumnNameList();
	        this.state = 2587;
	        this.match(InceptorOracleParser.RPAREN);
	        this.state = 2588;
	        this.match(InceptorOracleParser.EQUAL);
	        this.state = 2589;
	        this.batchValuesClause();
	        this.state = 2590;
	        this.match(InceptorOracleParser.KW_WHERE);
	        this.state = 2591;
	        this.match(InceptorOracleParser.LPAREN);
	        this.state = 2592;
	        this.columnOrtableDotColumnNameList();
	        this.state = 2593;
	        this.match(InceptorOracleParser.RPAREN);
	        this.state = 2594;
	        this.match(InceptorOracleParser.KW_IN);
	        this.state = 2595;
	        this.batchValuesClause();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	update_set_clause_suffix() {
	    let localctx = new Update_set_clause_suffixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 304, InceptorOracleParser.RULE_update_set_clause_suffix);
	    var _la = 0; // Token type
	    try {
	        this.state = 2611;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case InceptorOracleParser.LPAREN:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2597;
	            this.match(InceptorOracleParser.LPAREN);
	            this.state = 2598;
	            this.columnOrtableDotColumnNameList();
	            this.state = 2599;
	            this.match(InceptorOracleParser.RPAREN);
	            this.state = 2600;
	            this.match(InceptorOracleParser.EQUAL);
	            this.state = 2601;
	            this.match(InceptorOracleParser.LPAREN);
	            this.state = 2602;
	            this.selectStatement();
	            this.state = 2603;
	            this.match(InceptorOracleParser.RPAREN);
	            this.state = 2605;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_WHERE) {
	                this.state = 2604;
	                this.whereClause();
	            }

	            break;
	        case InceptorOracleParser.KW_TRUE:
	        case InceptorOracleParser.KW_FALSE:
	        case InceptorOracleParser.KW_ALL:
	        case InceptorOracleParser.KW_LIKE:
	        case InceptorOracleParser.KW_NO:
	        case InceptorOracleParser.KW_ANY:
	        case InceptorOracleParser.KW_EXISTS:
	        case InceptorOracleParser.KW_ASC:
	        case InceptorOracleParser.KW_DESC:
	        case InceptorOracleParser.KW_ORDER:
	        case InceptorOracleParser.KW_GROUP:
	        case InceptorOracleParser.KW_INCREMENT:
	        case InceptorOracleParser.KW_BY:
	        case InceptorOracleParser.KW_HASH:
	        case InceptorOracleParser.KW_INSERT:
	        case InceptorOracleParser.KW_OVERWRITE:
	        case InceptorOracleParser.KW_OUTER:
	        case InceptorOracleParser.KW_STREAMJOB:
	        case InceptorOracleParser.KW_STREAMJOBS:
	        case InceptorOracleParser.KW_AT:
	        case InceptorOracleParser.KW_LEFT:
	        case InceptorOracleParser.KW_RIGHT:
	        case InceptorOracleParser.KW_FULL:
	        case InceptorOracleParser.KW_PARTITION:
	        case InceptorOracleParser.KW_PARTITIONS:
	        case InceptorOracleParser.KW_PATTERN:
	        case InceptorOracleParser.KW_TABLE:
	        case InceptorOracleParser.KW_TABLES:
	        case InceptorOracleParser.KW_SEQUENCE:
	        case InceptorOracleParser.KW_SEQUENCES:
	        case InceptorOracleParser.KW_COLUMNS:
	        case InceptorOracleParser.KW_INDEX:
	        case InceptorOracleParser.KW_INDEXES:
	        case InceptorOracleParser.KW_REBUILD:
	        case InceptorOracleParser.KW_FUNCTIONS:
	        case InceptorOracleParser.KW_SHOW:
	        case InceptorOracleParser.KW_MSCK:
	        case InceptorOracleParser.KW_REPAIR:
	        case InceptorOracleParser.KW_DIRECTORY:
	        case InceptorOracleParser.KW_LOCAL:
	        case InceptorOracleParser.KW_GLOBAL:
	        case InceptorOracleParser.KW_USING:
	        case InceptorOracleParser.KW_CLUSTER:
	        case InceptorOracleParser.KW_DISTRIBUTE:
	        case InceptorOracleParser.KW_SORT:
	        case InceptorOracleParser.KW_UNION:
	        case InceptorOracleParser.KW_LOAD:
	        case InceptorOracleParser.KW_EXPORT:
	        case InceptorOracleParser.KW_IMPORT:
	        case InceptorOracleParser.KW_DATA:
	        case InceptorOracleParser.KW_INPATH:
	        case InceptorOracleParser.KW_IS:
	        case InceptorOracleParser.KW_NULLS:
	        case InceptorOracleParser.KW_CREATE:
	        case InceptorOracleParser.KW_EXTERNAL:
	        case InceptorOracleParser.KW_ALTER:
	        case InceptorOracleParser.KW_CHANGE:
	        case InceptorOracleParser.KW_FIRST:
	        case InceptorOracleParser.KW_LAST:
	        case InceptorOracleParser.KW_AFTER:
	        case InceptorOracleParser.KW_DESCRIBE:
	        case InceptorOracleParser.KW_DROP:
	        case InceptorOracleParser.KW_RENAME:
	        case InceptorOracleParser.KW_IGNORE:
	        case InceptorOracleParser.KW_RESPECT:
	        case InceptorOracleParser.KW_PROTECTION:
	        case InceptorOracleParser.KW_TO:
	        case InceptorOracleParser.KW_COMMENT:
	        case InceptorOracleParser.KW_PROMPT:
	        case InceptorOracleParser.KW_SPOOL:
	        case InceptorOracleParser.KW_BOOLEAN:
	        case InceptorOracleParser.KW_TINYINT:
	        case InceptorOracleParser.KW_BYTE:
	        case InceptorOracleParser.KW_SMALLINT:
	        case InceptorOracleParser.KW_INT:
	        case InceptorOracleParser.KW_BIGINT:
	        case InceptorOracleParser.KW_FLOAT:
	        case InceptorOracleParser.KW_DOUBLE:
	        case InceptorOracleParser.KW_DATE:
	        case InceptorOracleParser.KW_DATETIME:
	        case InceptorOracleParser.KW_TIMESTAMP:
	        case InceptorOracleParser.KW_TIME:
	        case InceptorOracleParser.KW_DECIMAL:
	        case InceptorOracleParser.KW_STRING:
	        case InceptorOracleParser.KW_GEO:
	        case InceptorOracleParser.KW_ARRAY:
	        case InceptorOracleParser.KW_STRUCT:
	        case InceptorOracleParser.KW_UNIONTYPE:
	        case InceptorOracleParser.KW_PARTITIONED:
	        case InceptorOracleParser.KW_ROUTED:
	        case InceptorOracleParser.KW_CLUSTERED:
	        case InceptorOracleParser.KW_SORTED:
	        case InceptorOracleParser.KW_NEXT:
	        case InceptorOracleParser.KW_NEXTVALUE:
	        case InceptorOracleParser.KW_BUCKETS:
	        case InceptorOracleParser.KW_ROW:
	        case InceptorOracleParser.KW_ROWS:
	        case InceptorOracleParser.KW_FORMAT:
	        case InceptorOracleParser.KW_DELIMITED:
	        case InceptorOracleParser.KW_FIELDS:
	        case InceptorOracleParser.KW_TERMINATED:
	        case InceptorOracleParser.KW_ESCAPED:
	        case InceptorOracleParser.KW_COLLECTION:
	        case InceptorOracleParser.KW_ITEMS:
	        case InceptorOracleParser.KW_KEYS:
	        case InceptorOracleParser.KW_KEY_TYPE:
	        case InceptorOracleParser.KW_LINES:
	        case InceptorOracleParser.KW_STORED:
	        case InceptorOracleParser.KW_FILEFORMAT:
	        case InceptorOracleParser.KW_SEQUENCEFILE:
	        case InceptorOracleParser.KW_TEXTFILE:
	        case InceptorOracleParser.KW_CSVFILE:
	        case InceptorOracleParser.KW_FWCFILE:
	        case InceptorOracleParser.KW_RCFILE:
	        case InceptorOracleParser.KW_ORCFILE:
	        case InceptorOracleParser.KW_HOLODESK:
	        case InceptorOracleParser.KW_STELLARDB:
	        case InceptorOracleParser.KW_ORCTRANSACTIONFILE:
	        case InceptorOracleParser.KW_PARQUET:
	        case InceptorOracleParser.KW_HYPERDRIVE:
	        case InceptorOracleParser.KW_ESDRIVE:
	        case InceptorOracleParser.KW_INPUTFORMAT:
	        case InceptorOracleParser.KW_OUTPUTFORMAT:
	        case InceptorOracleParser.KW_INPUTDRIVER:
	        case InceptorOracleParser.KW_OUTPUTDRIVER:
	        case InceptorOracleParser.KW_OFFLINE:
	        case InceptorOracleParser.KW_ENABLE:
	        case InceptorOracleParser.KW_DISABLE:
	        case InceptorOracleParser.KW_READONLY:
	        case InceptorOracleParser.KW_NO_DROP:
	        case InceptorOracleParser.KW_LOCATION:
	        case InceptorOracleParser.KW_BUCKET:
	        case InceptorOracleParser.KW_OUT:
	        case InceptorOracleParser.KW_OF:
	        case InceptorOracleParser.KW_PERCENT:
	        case InceptorOracleParser.KW_ADD:
	        case InceptorOracleParser.KW_REPLACE:
	        case InceptorOracleParser.KW_RLIKE:
	        case InceptorOracleParser.KW_REGEXP:
	        case InceptorOracleParser.KW_TEMPORARY:
	        case InceptorOracleParser.KW_RESOURCE:
	        case InceptorOracleParser.KW_RELOAD:
	        case InceptorOracleParser.KW_EXPLAIN:
	        case InceptorOracleParser.KW_FORMATTED:
	        case InceptorOracleParser.KW_PRETTY:
	        case InceptorOracleParser.KW_DEPENDENCY:
	        case InceptorOracleParser.KW_LOGICAL:
	        case InceptorOracleParser.KW_COST:
	        case InceptorOracleParser.KW_SERDE:
	        case InceptorOracleParser.KW_WITH:
	        case InceptorOracleParser.KW_WITHIN:
	        case InceptorOracleParser.KW_DEFERRED:
	        case InceptorOracleParser.KW_SERDEPROPERTIES:
	        case InceptorOracleParser.KW_DBPROPERTIES:
	        case InceptorOracleParser.KW_LIMIT:
	        case InceptorOracleParser.KW_SET:
	        case InceptorOracleParser.KW_UNSET:
	        case InceptorOracleParser.KW_TBLPROPERTIES:
	        case InceptorOracleParser.KW_IDXPROPERTIES:
	        case InceptorOracleParser.KW_VALUE_TYPE:
	        case InceptorOracleParser.KW_ELEM_TYPE:
	        case InceptorOracleParser.KW_PRIOR:
	        case InceptorOracleParser.KW_NOCYCLE:
	        case InceptorOracleParser.KW_MAPJOIN:
	        case InceptorOracleParser.KW_COMBINE:
	        case InceptorOracleParser.KW_COMBINE_STRUCT_INDEX:
	        case InceptorOracleParser.KW_GLKJOIN:
	        case InceptorOracleParser.KW_USE_INDEX:
	        case InceptorOracleParser.KW_STARGATE:
	        case InceptorOracleParser.KW_USE_BULKLOAD:
	        case InceptorOracleParser.KW_ADHOC:
	        case InceptorOracleParser.KW_PRECOMPILE:
	        case InceptorOracleParser.KW_STREAMTABLE:
	        case InceptorOracleParser.KW_STREAM:
	        case InceptorOracleParser.KW_RULEBASE:
	        case InceptorOracleParser.KW_RULEBASES:
	        case InceptorOracleParser.KW_RULE:
	        case InceptorOracleParser.KW_RULES:
	        case InceptorOracleParser.KW_MEET:
	        case InceptorOracleParser.KW_MUST:
	        case InceptorOracleParser.KW_MUSTNOT:
	        case InceptorOracleParser.KW_POLICY:
	        case InceptorOracleParser.KW_POLICIES:
	        case InceptorOracleParser.KW_REMOVE:
	        case InceptorOracleParser.KW_POLICYKEY:
	        case InceptorOracleParser.KW_POLICY_RULE:
	        case InceptorOracleParser.KW_LOOKUP:
	        case InceptorOracleParser.KW_RULE_FUNCTION:
	        case InceptorOracleParser.KW_RULE_FUNCTIONS:
	        case InceptorOracleParser.KW_RULE_FUNCTION_PROPERTIES:
	        case InceptorOracleParser.KW_HOLD_DDLTIME:
	        case InceptorOracleParser.KW_CLUSTERSTATUS:
	        case InceptorOracleParser.KW_UTC:
	        case InceptorOracleParser.KW_UTCTIMESTAMP:
	        case InceptorOracleParser.KW_LONG:
	        case InceptorOracleParser.KW_DELETE:
	        case InceptorOracleParser.KW_PLUS:
	        case InceptorOracleParser.KW_MINUS:
	        case InceptorOracleParser.KW_OP_CONCAT:
	        case InceptorOracleParser.KW_FETCH:
	        case InceptorOracleParser.KW_INTERSECT:
	        case InceptorOracleParser.KW_VIEW:
	        case InceptorOracleParser.KW_IN:
	        case InceptorOracleParser.KW_DATABASES:
	        case InceptorOracleParser.KW_MATERIALIZED:
	        case InceptorOracleParser.KW_SCHEMA:
	        case InceptorOracleParser.KW_SCHEMAS:
	        case InceptorOracleParser.KW_GRANT:
	        case InceptorOracleParser.KW_REVOKE:
	        case InceptorOracleParser.KW_SSL:
	        case InceptorOracleParser.KW_UNDO:
	        case InceptorOracleParser.KW_LOCK:
	        case InceptorOracleParser.KW_LOCKS:
	        case InceptorOracleParser.KW_UNLOCK:
	        case InceptorOracleParser.KW_SHARED:
	        case InceptorOracleParser.KW_EXCLUSIVE:
	        case InceptorOracleParser.KW_PROCEDURE:
	        case InceptorOracleParser.KW_UNSIGNED:
	        case InceptorOracleParser.KW_WHILE:
	        case InceptorOracleParser.KW_READ:
	        case InceptorOracleParser.KW_READS:
	        case InceptorOracleParser.KW_PURGE:
	        case InceptorOracleParser.KW_RANGE:
	        case InceptorOracleParser.KW_ANALYZE:
	        case InceptorOracleParser.KW_BEFORE:
	        case InceptorOracleParser.KW_BETWEEN:
	        case InceptorOracleParser.KW_BOTH:
	        case InceptorOracleParser.KW_BINARY:
	        case InceptorOracleParser.KW_DEFAULT:
	        case InceptorOracleParser.KW_TYPE:
	        case InceptorOracleParser.KW_TRIGGER:
	        case InceptorOracleParser.KW_RECORDREADER:
	        case InceptorOracleParser.KW_RECORDWRITER:
	        case InceptorOracleParser.KW_SEMI:
	        case InceptorOracleParser.KW_LATERAL:
	        case InceptorOracleParser.KW_TOUCH:
	        case InceptorOracleParser.KW_ARCHIVE:
	        case InceptorOracleParser.KW_UNARCHIVE:
	        case InceptorOracleParser.KW_COMPUTE:
	        case InceptorOracleParser.KW_STATISTICS:
	        case InceptorOracleParser.KW_USE:
	        case InceptorOracleParser.KW_OPTION:
	        case InceptorOracleParser.KW_CONCATENATE:
	        case InceptorOracleParser.KW_SHOW_DATABASE:
	        case InceptorOracleParser.KW_UPDATE:
	        case InceptorOracleParser.KW_RESTRICT:
	        case InceptorOracleParser.KW_CASCADE:
	        case InceptorOracleParser.KW_SKEWED:
	        case InceptorOracleParser.KW_DIRECTORIES:
	        case InceptorOracleParser.KW_WINDOWRESET:
	        case InceptorOracleParser.KW_SESSIONSTART:
	        case InceptorOracleParser.KW_SESSIONSTOP:
	        case InceptorOracleParser.KW_SESSIONEXPIRE:
	        case InceptorOracleParser.KW_SESSIONEXPIRE_DISCARD:
	        case InceptorOracleParser.KW_SESSIONEXPIRE_COMPLETE:
	        case InceptorOracleParser.KW_STREAMWINDOW:
	        case InceptorOracleParser.KW_STREAMWINDOWSLIDELENGTH:
	        case InceptorOracleParser.KW_STREAMWINDOWSEPARATED:
	        case InceptorOracleParser.KW_FOLLOWEDBY:
	        case InceptorOracleParser.KW_NOTFOLLOWEDBY:
	        case InceptorOracleParser.KW_NOTNEXT:
	        case InceptorOracleParser.KW_PATTERN_TIMES:
	        case InceptorOracleParser.KW_CURRVALUE:
	        case InceptorOracleParser.KW_GROUPING:
	        case InceptorOracleParser.KW_SETS:
	        case InceptorOracleParser.KW_TRUNCATE:
	        case InceptorOracleParser.KW_NOSCAN:
	        case InceptorOracleParser.KW_USER:
	        case InceptorOracleParser.KW_QUOTA:
	        case InceptorOracleParser.KW_PERMISSION:
	        case InceptorOracleParser.KW_ROLE:
	        case InceptorOracleParser.KW_ROLES:
	        case InceptorOracleParser.KW_INNER:
	        case InceptorOracleParser.KW_ADMIN:
	        case InceptorOracleParser.KW_OWNER:
	        case InceptorOracleParser.KW_PRINCIPALS:
	        case InceptorOracleParser.KW_CONSTANT:
	        case InceptorOracleParser.KW_CONSTRAINT:
	        case InceptorOracleParser.KW_VALUES:
	        case InceptorOracleParser.KW_YEAR:
	        case InceptorOracleParser.KW_MONTH:
	        case InceptorOracleParser.KW_DAY:
	        case InceptorOracleParser.KW_MINUTE:
	        case InceptorOracleParser.KW_HOUR:
	        case InceptorOracleParser.KW_SECOND:
	        case InceptorOracleParser.KW_INTERVAL:
	        case InceptorOracleParser.KW_SYSDATE:
	        case InceptorOracleParser.KW_NOMAXVALUE:
	        case InceptorOracleParser.KW_MINVALUE:
	        case InceptorOracleParser.KW_NOMINVALUE:
	        case InceptorOracleParser.KW_CYCLE:
	        case InceptorOracleParser.KW_CACHE:
	        case InceptorOracleParser.KW_CACHEDMETRIC:
	        case InceptorOracleParser.KW_CACHEDMETRICS:
	        case InceptorOracleParser.KW_NOCACHE:
	        case InceptorOracleParser.KW_NOORDER:
	        case InceptorOracleParser.KW_MERGE:
	        case InceptorOracleParser.KW_PLANT:
	        case InceptorOracleParser.KW_IMMEDIATE:
	        case InceptorOracleParser.KW_COMPACT:
	        case InceptorOracleParser.KW_STOP:
	        case InceptorOracleParser.KW_LIST:
	        case InceptorOracleParser.KW_TRANSACTION:
	        case InceptorOracleParser.KW_WORK:
	        case InceptorOracleParser.KW_SPACE:
	        case InceptorOracleParser.KW_CONF:
	        case InceptorOracleParser.KW_DEFINED:
	        case InceptorOracleParser.KW_INTEGER:
	        case InceptorOracleParser.KW_ONLY:
	        case InceptorOracleParser.KW_SERVER:
	        case InceptorOracleParser.KW_TRANSACTIONS:
	        case InceptorOracleParser.KW_URI:
	        case InceptorOracleParser.KW_WRITE:
	        case InceptorOracleParser.KW_FACL:
	        case InceptorOracleParser.KW_FOUND:
	        case InceptorOracleParser.KW_LEVEL:
	        case InceptorOracleParser.KW_PUBLIC:
	        case InceptorOracleParser.KW_LINKS:
	        case InceptorOracleParser.KW_CONNECT:
	        case InceptorOracleParser.KW_APPLICATION:
	        case InceptorOracleParser.KW_APPLICATIONS:
	        case InceptorOracleParser.KW_APP:
	        case InceptorOracleParser.KW_APPS:
	        case InceptorOracleParser.KW_INFINITE:
	        case InceptorOracleParser.KW_WAIT:
	        case InceptorOracleParser.KW_PRIMARY:
	        case InceptorOracleParser.KW_FOREIGN:
	        case InceptorOracleParser.KW_REFERENCES:
	        case InceptorOracleParser.KW_VALIDATE:
	        case InceptorOracleParser.KW_NOVALIDATE:
	        case InceptorOracleParser.KW_RELY:
	        case InceptorOracleParser.KW_NORELY:
	        case InceptorOracleParser.KW_KEY:
	        case InceptorOracleParser.KW_SEGMENT:
	        case InceptorOracleParser.KW_LENGTH:
	        case InceptorOracleParser.KW_ATTACH:
	        case InceptorOracleParser.KW_DETTACH:
	        case InceptorOracleParser.KW_SHARD:
	        case InceptorOracleParser.KW_NUM:
	        case InceptorOracleParser.KW_FULLTEXT:
	        case InceptorOracleParser.KW_TABLESIZE:
	        case InceptorOracleParser.KW_TABLET:
	        case InceptorOracleParser.KW_CAPACITY:
	        case InceptorOracleParser.KW_ANALYZER:
	        case InceptorOracleParser.KW_SYNC:
	        case InceptorOracleParser.KW_NO_INDEX:
	        case InceptorOracleParser.KW_LOG:
	        case InceptorOracleParser.KW_FILE:
	        case InceptorOracleParser.KW_JAR:
	        case InceptorOracleParser.KW_PERMANENT:
	        case InceptorOracleParser.KW_SCHEDULER:
	        case InceptorOracleParser.KW_MODE:
	        case InceptorOracleParser.Identifier:
	        case InceptorOracleParser.KW_NOCOPY:
	        case InceptorOracleParser.KW_VARRAY:
	        case InceptorOracleParser.KW_PACKAGE:
	        case InceptorOracleParser.KW_PACKAGES:
	        case InceptorOracleParser.KW_BODY:
	        case InceptorOracleParser.KW_ISOPEN:
	        case InceptorOracleParser.KW_NOTFOUND:
	        case InceptorOracleParser.KW_ROWCOUNT:
	        case InceptorOracleParser.KW_BULK_ROWCOUNT:
	        case InceptorOracleParser.KW_BULK_EXCEPTIONS:
	        case InceptorOracleParser.KW_REVERSE:
	        case InceptorOracleParser.KW_SAVE:
	        case InceptorOracleParser.KW_EXCEPTIONS:
	        case InceptorOracleParser.KW_INDICES:
	        case InceptorOracleParser.KW_REF:
	        case InceptorOracleParser.KW_YEARS:
	        case InceptorOracleParser.KW_MONTHS:
	        case InceptorOracleParser.KW_DAYS:
	        case InceptorOracleParser.KW_HOURS:
	        case InceptorOracleParser.KW_MINUTES:
	        case InceptorOracleParser.KW_SECONDS:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2607;
	            this.update_set_clause_elements();
	            this.state = 2609;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_WHERE) {
	                this.state = 2608;
	                this.whereClause();
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	update_set_clause_elements() {
	    let localctx = new Update_set_clause_elementsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 306, InceptorOracleParser.RULE_update_set_clause_elements);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2613;
	        this.update_set_clause_element();
	        this.state = 2618;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===InceptorOracleParser.COMMA) {
	            this.state = 2614;
	            this.match(InceptorOracleParser.COMMA);
	            this.state = 2615;
	            this.update_set_clause_element();
	            this.state = 2620;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	update_set_clause_element() {
	    let localctx = new Update_set_clause_elementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 308, InceptorOracleParser.RULE_update_set_clause_element);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2621;
	        this.columnOrtableDotColumnName();
	        this.state = 2622;
	        this.match(InceptorOracleParser.EQUAL);
	        this.state = 2623;
	        localctx.part = this.update_set_clause_element_part();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	update_set_clause_element_part() {
	    let localctx = new Update_set_clause_element_partContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 310, InceptorOracleParser.RULE_update_set_clause_element_part);
	    try {
	        this.state = 2630;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,139,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2625;
	            this.match(InceptorOracleParser.LPAREN);
	            this.state = 2626;
	            this.selectStatement();
	            this.state = 2627;
	            this.match(InceptorOracleParser.RPAREN);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2629;
	            localctx.srcValue = this.expression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	update_set_elements() {
	    let localctx = new Update_set_elementsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 312, InceptorOracleParser.RULE_update_set_elements);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2632;
	        this.update_set_element();
	        this.state = 2637;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===InceptorOracleParser.COMMA) {
	            this.state = 2633;
	            this.match(InceptorOracleParser.COMMA);
	            this.state = 2634;
	            this.update_set_element();
	            this.state = 2639;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	update_set_element() {
	    let localctx = new Update_set_elementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 314, InceptorOracleParser.RULE_update_set_element);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2640;
	        this.columnOrtableDotColumnName();
	        this.state = 2641;
	        this.match(InceptorOracleParser.EQUAL);

	        this.state = 2642;
	        localctx.srcValue = this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	deleteStatement() {
	    let localctx = new DeleteStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 316, InceptorOracleParser.RULE_deleteStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2644;
	        this.match(InceptorOracleParser.KW_DELETE);
	        this.state = 2646;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_FROM) {
	            this.state = 2645;
	            this.match(InceptorOracleParser.KW_FROM);
	        }

	        this.state = 2648;
	        this.crudTargetStatement();
	        this.state = 2650;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_WHERE) {
	            this.state = 2649;
	            this.whereClause();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	crudTargetStatement() {
	    let localctx = new CrudTargetStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 318, InceptorOracleParser.RULE_crudTargetStatement);
	    var _la = 0; // Token type
	    try {
	        this.state = 2666;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case InceptorOracleParser.KW_TRUE:
	        case InceptorOracleParser.KW_FALSE:
	        case InceptorOracleParser.KW_ALL:
	        case InceptorOracleParser.KW_LIKE:
	        case InceptorOracleParser.KW_NO:
	        case InceptorOracleParser.KW_ANY:
	        case InceptorOracleParser.KW_EXISTS:
	        case InceptorOracleParser.KW_ASC:
	        case InceptorOracleParser.KW_DESC:
	        case InceptorOracleParser.KW_ORDER:
	        case InceptorOracleParser.KW_GROUP:
	        case InceptorOracleParser.KW_INCREMENT:
	        case InceptorOracleParser.KW_BY:
	        case InceptorOracleParser.KW_HASH:
	        case InceptorOracleParser.KW_INSERT:
	        case InceptorOracleParser.KW_OVERWRITE:
	        case InceptorOracleParser.KW_OUTER:
	        case InceptorOracleParser.KW_STREAMJOB:
	        case InceptorOracleParser.KW_STREAMJOBS:
	        case InceptorOracleParser.KW_AT:
	        case InceptorOracleParser.KW_LEFT:
	        case InceptorOracleParser.KW_RIGHT:
	        case InceptorOracleParser.KW_FULL:
	        case InceptorOracleParser.KW_PARTITION:
	        case InceptorOracleParser.KW_PARTITIONS:
	        case InceptorOracleParser.KW_PATTERN:
	        case InceptorOracleParser.KW_TABLE:
	        case InceptorOracleParser.KW_TABLES:
	        case InceptorOracleParser.KW_SEQUENCE:
	        case InceptorOracleParser.KW_SEQUENCES:
	        case InceptorOracleParser.KW_COLUMNS:
	        case InceptorOracleParser.KW_INDEX:
	        case InceptorOracleParser.KW_INDEXES:
	        case InceptorOracleParser.KW_REBUILD:
	        case InceptorOracleParser.KW_FUNCTIONS:
	        case InceptorOracleParser.KW_SHOW:
	        case InceptorOracleParser.KW_MSCK:
	        case InceptorOracleParser.KW_REPAIR:
	        case InceptorOracleParser.KW_DIRECTORY:
	        case InceptorOracleParser.KW_LOCAL:
	        case InceptorOracleParser.KW_GLOBAL:
	        case InceptorOracleParser.KW_USING:
	        case InceptorOracleParser.KW_CLUSTER:
	        case InceptorOracleParser.KW_DISTRIBUTE:
	        case InceptorOracleParser.KW_SORT:
	        case InceptorOracleParser.KW_UNION:
	        case InceptorOracleParser.KW_LOAD:
	        case InceptorOracleParser.KW_EXPORT:
	        case InceptorOracleParser.KW_IMPORT:
	        case InceptorOracleParser.KW_DATA:
	        case InceptorOracleParser.KW_INPATH:
	        case InceptorOracleParser.KW_IS:
	        case InceptorOracleParser.KW_NULLS:
	        case InceptorOracleParser.KW_CREATE:
	        case InceptorOracleParser.KW_EXTERNAL:
	        case InceptorOracleParser.KW_ALTER:
	        case InceptorOracleParser.KW_CHANGE:
	        case InceptorOracleParser.KW_FIRST:
	        case InceptorOracleParser.KW_LAST:
	        case InceptorOracleParser.KW_AFTER:
	        case InceptorOracleParser.KW_DESCRIBE:
	        case InceptorOracleParser.KW_DROP:
	        case InceptorOracleParser.KW_RENAME:
	        case InceptorOracleParser.KW_IGNORE:
	        case InceptorOracleParser.KW_RESPECT:
	        case InceptorOracleParser.KW_PROTECTION:
	        case InceptorOracleParser.KW_TO:
	        case InceptorOracleParser.KW_COMMENT:
	        case InceptorOracleParser.KW_PROMPT:
	        case InceptorOracleParser.KW_SPOOL:
	        case InceptorOracleParser.KW_BOOLEAN:
	        case InceptorOracleParser.KW_TINYINT:
	        case InceptorOracleParser.KW_BYTE:
	        case InceptorOracleParser.KW_SMALLINT:
	        case InceptorOracleParser.KW_INT:
	        case InceptorOracleParser.KW_BIGINT:
	        case InceptorOracleParser.KW_FLOAT:
	        case InceptorOracleParser.KW_DOUBLE:
	        case InceptorOracleParser.KW_DATE:
	        case InceptorOracleParser.KW_DATETIME:
	        case InceptorOracleParser.KW_TIMESTAMP:
	        case InceptorOracleParser.KW_TIME:
	        case InceptorOracleParser.KW_DECIMAL:
	        case InceptorOracleParser.KW_STRING:
	        case InceptorOracleParser.KW_GEO:
	        case InceptorOracleParser.KW_ARRAY:
	        case InceptorOracleParser.KW_STRUCT:
	        case InceptorOracleParser.KW_UNIONTYPE:
	        case InceptorOracleParser.KW_PARTITIONED:
	        case InceptorOracleParser.KW_ROUTED:
	        case InceptorOracleParser.KW_CLUSTERED:
	        case InceptorOracleParser.KW_SORTED:
	        case InceptorOracleParser.KW_NEXT:
	        case InceptorOracleParser.KW_NEXTVALUE:
	        case InceptorOracleParser.KW_BUCKETS:
	        case InceptorOracleParser.KW_ROW:
	        case InceptorOracleParser.KW_ROWS:
	        case InceptorOracleParser.KW_FORMAT:
	        case InceptorOracleParser.KW_DELIMITED:
	        case InceptorOracleParser.KW_FIELDS:
	        case InceptorOracleParser.KW_TERMINATED:
	        case InceptorOracleParser.KW_ESCAPED:
	        case InceptorOracleParser.KW_COLLECTION:
	        case InceptorOracleParser.KW_ITEMS:
	        case InceptorOracleParser.KW_KEYS:
	        case InceptorOracleParser.KW_KEY_TYPE:
	        case InceptorOracleParser.KW_LINES:
	        case InceptorOracleParser.KW_STORED:
	        case InceptorOracleParser.KW_FILEFORMAT:
	        case InceptorOracleParser.KW_SEQUENCEFILE:
	        case InceptorOracleParser.KW_TEXTFILE:
	        case InceptorOracleParser.KW_CSVFILE:
	        case InceptorOracleParser.KW_FWCFILE:
	        case InceptorOracleParser.KW_RCFILE:
	        case InceptorOracleParser.KW_ORCFILE:
	        case InceptorOracleParser.KW_HOLODESK:
	        case InceptorOracleParser.KW_STELLARDB:
	        case InceptorOracleParser.KW_ORCTRANSACTIONFILE:
	        case InceptorOracleParser.KW_PARQUET:
	        case InceptorOracleParser.KW_HYPERDRIVE:
	        case InceptorOracleParser.KW_ESDRIVE:
	        case InceptorOracleParser.KW_INPUTFORMAT:
	        case InceptorOracleParser.KW_OUTPUTFORMAT:
	        case InceptorOracleParser.KW_INPUTDRIVER:
	        case InceptorOracleParser.KW_OUTPUTDRIVER:
	        case InceptorOracleParser.KW_OFFLINE:
	        case InceptorOracleParser.KW_ENABLE:
	        case InceptorOracleParser.KW_DISABLE:
	        case InceptorOracleParser.KW_READONLY:
	        case InceptorOracleParser.KW_NO_DROP:
	        case InceptorOracleParser.KW_LOCATION:
	        case InceptorOracleParser.KW_BUCKET:
	        case InceptorOracleParser.KW_OUT:
	        case InceptorOracleParser.KW_OF:
	        case InceptorOracleParser.KW_PERCENT:
	        case InceptorOracleParser.KW_ADD:
	        case InceptorOracleParser.KW_REPLACE:
	        case InceptorOracleParser.KW_RLIKE:
	        case InceptorOracleParser.KW_REGEXP:
	        case InceptorOracleParser.KW_TEMPORARY:
	        case InceptorOracleParser.KW_RESOURCE:
	        case InceptorOracleParser.KW_RELOAD:
	        case InceptorOracleParser.KW_EXPLAIN:
	        case InceptorOracleParser.KW_FORMATTED:
	        case InceptorOracleParser.KW_PRETTY:
	        case InceptorOracleParser.KW_DEPENDENCY:
	        case InceptorOracleParser.KW_LOGICAL:
	        case InceptorOracleParser.KW_COST:
	        case InceptorOracleParser.KW_SERDE:
	        case InceptorOracleParser.KW_WITH:
	        case InceptorOracleParser.KW_WITHIN:
	        case InceptorOracleParser.KW_DEFERRED:
	        case InceptorOracleParser.KW_SERDEPROPERTIES:
	        case InceptorOracleParser.KW_DBPROPERTIES:
	        case InceptorOracleParser.KW_LIMIT:
	        case InceptorOracleParser.KW_SET:
	        case InceptorOracleParser.KW_UNSET:
	        case InceptorOracleParser.KW_TBLPROPERTIES:
	        case InceptorOracleParser.KW_IDXPROPERTIES:
	        case InceptorOracleParser.KW_VALUE_TYPE:
	        case InceptorOracleParser.KW_ELEM_TYPE:
	        case InceptorOracleParser.KW_PRIOR:
	        case InceptorOracleParser.KW_NOCYCLE:
	        case InceptorOracleParser.KW_MAPJOIN:
	        case InceptorOracleParser.KW_COMBINE:
	        case InceptorOracleParser.KW_COMBINE_STRUCT_INDEX:
	        case InceptorOracleParser.KW_GLKJOIN:
	        case InceptorOracleParser.KW_USE_INDEX:
	        case InceptorOracleParser.KW_STARGATE:
	        case InceptorOracleParser.KW_USE_BULKLOAD:
	        case InceptorOracleParser.KW_ADHOC:
	        case InceptorOracleParser.KW_PRECOMPILE:
	        case InceptorOracleParser.KW_STREAMTABLE:
	        case InceptorOracleParser.KW_STREAM:
	        case InceptorOracleParser.KW_RULEBASE:
	        case InceptorOracleParser.KW_RULEBASES:
	        case InceptorOracleParser.KW_RULE:
	        case InceptorOracleParser.KW_RULES:
	        case InceptorOracleParser.KW_MEET:
	        case InceptorOracleParser.KW_MUST:
	        case InceptorOracleParser.KW_MUSTNOT:
	        case InceptorOracleParser.KW_POLICY:
	        case InceptorOracleParser.KW_POLICIES:
	        case InceptorOracleParser.KW_REMOVE:
	        case InceptorOracleParser.KW_POLICYKEY:
	        case InceptorOracleParser.KW_POLICY_RULE:
	        case InceptorOracleParser.KW_LOOKUP:
	        case InceptorOracleParser.KW_RULE_FUNCTION:
	        case InceptorOracleParser.KW_RULE_FUNCTIONS:
	        case InceptorOracleParser.KW_RULE_FUNCTION_PROPERTIES:
	        case InceptorOracleParser.KW_HOLD_DDLTIME:
	        case InceptorOracleParser.KW_CLUSTERSTATUS:
	        case InceptorOracleParser.KW_UTC:
	        case InceptorOracleParser.KW_UTCTIMESTAMP:
	        case InceptorOracleParser.KW_LONG:
	        case InceptorOracleParser.KW_DELETE:
	        case InceptorOracleParser.KW_PLUS:
	        case InceptorOracleParser.KW_MINUS:
	        case InceptorOracleParser.KW_OP_CONCAT:
	        case InceptorOracleParser.KW_FETCH:
	        case InceptorOracleParser.KW_INTERSECT:
	        case InceptorOracleParser.KW_VIEW:
	        case InceptorOracleParser.KW_IN:
	        case InceptorOracleParser.KW_DATABASES:
	        case InceptorOracleParser.KW_MATERIALIZED:
	        case InceptorOracleParser.KW_SCHEMA:
	        case InceptorOracleParser.KW_SCHEMAS:
	        case InceptorOracleParser.KW_GRANT:
	        case InceptorOracleParser.KW_REVOKE:
	        case InceptorOracleParser.KW_SSL:
	        case InceptorOracleParser.KW_UNDO:
	        case InceptorOracleParser.KW_LOCK:
	        case InceptorOracleParser.KW_LOCKS:
	        case InceptorOracleParser.KW_UNLOCK:
	        case InceptorOracleParser.KW_SHARED:
	        case InceptorOracleParser.KW_EXCLUSIVE:
	        case InceptorOracleParser.KW_PROCEDURE:
	        case InceptorOracleParser.KW_UNSIGNED:
	        case InceptorOracleParser.KW_WHILE:
	        case InceptorOracleParser.KW_READ:
	        case InceptorOracleParser.KW_READS:
	        case InceptorOracleParser.KW_PURGE:
	        case InceptorOracleParser.KW_RANGE:
	        case InceptorOracleParser.KW_ANALYZE:
	        case InceptorOracleParser.KW_BEFORE:
	        case InceptorOracleParser.KW_BETWEEN:
	        case InceptorOracleParser.KW_BOTH:
	        case InceptorOracleParser.KW_BINARY:
	        case InceptorOracleParser.KW_DEFAULT:
	        case InceptorOracleParser.KW_TYPE:
	        case InceptorOracleParser.KW_TRIGGER:
	        case InceptorOracleParser.KW_RECORDREADER:
	        case InceptorOracleParser.KW_RECORDWRITER:
	        case InceptorOracleParser.KW_SEMI:
	        case InceptorOracleParser.KW_LATERAL:
	        case InceptorOracleParser.KW_TOUCH:
	        case InceptorOracleParser.KW_ARCHIVE:
	        case InceptorOracleParser.KW_UNARCHIVE:
	        case InceptorOracleParser.KW_COMPUTE:
	        case InceptorOracleParser.KW_STATISTICS:
	        case InceptorOracleParser.KW_USE:
	        case InceptorOracleParser.KW_OPTION:
	        case InceptorOracleParser.KW_CONCATENATE:
	        case InceptorOracleParser.KW_SHOW_DATABASE:
	        case InceptorOracleParser.KW_UPDATE:
	        case InceptorOracleParser.KW_RESTRICT:
	        case InceptorOracleParser.KW_CASCADE:
	        case InceptorOracleParser.KW_SKEWED:
	        case InceptorOracleParser.KW_DIRECTORIES:
	        case InceptorOracleParser.KW_WINDOWRESET:
	        case InceptorOracleParser.KW_SESSIONSTART:
	        case InceptorOracleParser.KW_SESSIONSTOP:
	        case InceptorOracleParser.KW_SESSIONEXPIRE:
	        case InceptorOracleParser.KW_SESSIONEXPIRE_DISCARD:
	        case InceptorOracleParser.KW_SESSIONEXPIRE_COMPLETE:
	        case InceptorOracleParser.KW_STREAMWINDOW:
	        case InceptorOracleParser.KW_STREAMWINDOWSLIDELENGTH:
	        case InceptorOracleParser.KW_STREAMWINDOWSEPARATED:
	        case InceptorOracleParser.KW_FOLLOWEDBY:
	        case InceptorOracleParser.KW_NOTFOLLOWEDBY:
	        case InceptorOracleParser.KW_NOTNEXT:
	        case InceptorOracleParser.KW_PATTERN_TIMES:
	        case InceptorOracleParser.KW_CURRVALUE:
	        case InceptorOracleParser.KW_GROUPING:
	        case InceptorOracleParser.KW_SETS:
	        case InceptorOracleParser.KW_TRUNCATE:
	        case InceptorOracleParser.KW_NOSCAN:
	        case InceptorOracleParser.KW_USER:
	        case InceptorOracleParser.KW_QUOTA:
	        case InceptorOracleParser.KW_PERMISSION:
	        case InceptorOracleParser.KW_ROLE:
	        case InceptorOracleParser.KW_ROLES:
	        case InceptorOracleParser.KW_INNER:
	        case InceptorOracleParser.KW_ADMIN:
	        case InceptorOracleParser.KW_OWNER:
	        case InceptorOracleParser.KW_PRINCIPALS:
	        case InceptorOracleParser.KW_CONSTANT:
	        case InceptorOracleParser.KW_CONSTRAINT:
	        case InceptorOracleParser.KW_VALUES:
	        case InceptorOracleParser.KW_YEAR:
	        case InceptorOracleParser.KW_MONTH:
	        case InceptorOracleParser.KW_DAY:
	        case InceptorOracleParser.KW_MINUTE:
	        case InceptorOracleParser.KW_HOUR:
	        case InceptorOracleParser.KW_SECOND:
	        case InceptorOracleParser.KW_INTERVAL:
	        case InceptorOracleParser.KW_SYSDATE:
	        case InceptorOracleParser.KW_NOMAXVALUE:
	        case InceptorOracleParser.KW_MINVALUE:
	        case InceptorOracleParser.KW_NOMINVALUE:
	        case InceptorOracleParser.KW_CYCLE:
	        case InceptorOracleParser.KW_CACHE:
	        case InceptorOracleParser.KW_CACHEDMETRIC:
	        case InceptorOracleParser.KW_CACHEDMETRICS:
	        case InceptorOracleParser.KW_NOCACHE:
	        case InceptorOracleParser.KW_NOORDER:
	        case InceptorOracleParser.KW_MERGE:
	        case InceptorOracleParser.KW_PLANT:
	        case InceptorOracleParser.KW_IMMEDIATE:
	        case InceptorOracleParser.KW_COMPACT:
	        case InceptorOracleParser.KW_STOP:
	        case InceptorOracleParser.KW_LIST:
	        case InceptorOracleParser.KW_TRANSACTION:
	        case InceptorOracleParser.KW_WORK:
	        case InceptorOracleParser.KW_SPACE:
	        case InceptorOracleParser.KW_CONF:
	        case InceptorOracleParser.KW_DEFINED:
	        case InceptorOracleParser.KW_INTEGER:
	        case InceptorOracleParser.KW_ONLY:
	        case InceptorOracleParser.KW_SERVER:
	        case InceptorOracleParser.KW_TRANSACTIONS:
	        case InceptorOracleParser.KW_URI:
	        case InceptorOracleParser.KW_WRITE:
	        case InceptorOracleParser.KW_FACL:
	        case InceptorOracleParser.KW_FOUND:
	        case InceptorOracleParser.KW_LEVEL:
	        case InceptorOracleParser.KW_PUBLIC:
	        case InceptorOracleParser.KW_LINKS:
	        case InceptorOracleParser.KW_CONNECT:
	        case InceptorOracleParser.KW_APPLICATION:
	        case InceptorOracleParser.KW_APPLICATIONS:
	        case InceptorOracleParser.KW_APP:
	        case InceptorOracleParser.KW_APPS:
	        case InceptorOracleParser.KW_INFINITE:
	        case InceptorOracleParser.KW_WAIT:
	        case InceptorOracleParser.KW_PRIMARY:
	        case InceptorOracleParser.KW_FOREIGN:
	        case InceptorOracleParser.KW_REFERENCES:
	        case InceptorOracleParser.KW_VALIDATE:
	        case InceptorOracleParser.KW_NOVALIDATE:
	        case InceptorOracleParser.KW_RELY:
	        case InceptorOracleParser.KW_NORELY:
	        case InceptorOracleParser.KW_KEY:
	        case InceptorOracleParser.KW_SEGMENT:
	        case InceptorOracleParser.KW_LENGTH:
	        case InceptorOracleParser.KW_ATTACH:
	        case InceptorOracleParser.KW_DETTACH:
	        case InceptorOracleParser.KW_SHARD:
	        case InceptorOracleParser.KW_NUM:
	        case InceptorOracleParser.KW_FULLTEXT:
	        case InceptorOracleParser.KW_TABLESIZE:
	        case InceptorOracleParser.KW_TABLET:
	        case InceptorOracleParser.KW_CAPACITY:
	        case InceptorOracleParser.KW_ANALYZER:
	        case InceptorOracleParser.KW_SYNC:
	        case InceptorOracleParser.KW_NO_INDEX:
	        case InceptorOracleParser.KW_LOG:
	        case InceptorOracleParser.KW_FILE:
	        case InceptorOracleParser.KW_JAR:
	        case InceptorOracleParser.KW_PERMANENT:
	        case InceptorOracleParser.KW_SCHEDULER:
	        case InceptorOracleParser.KW_MODE:
	        case InceptorOracleParser.Identifier:
	        case InceptorOracleParser.KW_NOCOPY:
	        case InceptorOracleParser.KW_VARRAY:
	        case InceptorOracleParser.KW_PACKAGE:
	        case InceptorOracleParser.KW_PACKAGES:
	        case InceptorOracleParser.KW_BODY:
	        case InceptorOracleParser.KW_ISOPEN:
	        case InceptorOracleParser.KW_NOTFOUND:
	        case InceptorOracleParser.KW_ROWCOUNT:
	        case InceptorOracleParser.KW_BULK_ROWCOUNT:
	        case InceptorOracleParser.KW_BULK_EXCEPTIONS:
	        case InceptorOracleParser.KW_REVERSE:
	        case InceptorOracleParser.KW_SAVE:
	        case InceptorOracleParser.KW_EXCEPTIONS:
	        case InceptorOracleParser.KW_INDICES:
	        case InceptorOracleParser.KW_REF:
	        case InceptorOracleParser.KW_YEARS:
	        case InceptorOracleParser.KW_MONTHS:
	        case InceptorOracleParser.KW_DAYS:
	        case InceptorOracleParser.KW_HOURS:
	        case InceptorOracleParser.KW_MINUTES:
	        case InceptorOracleParser.KW_SECONDS:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2653;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,143,this._ctx);
	            if(la_===1) {
	                this.state = 2652;
	                this.match(InceptorOracleParser.KW_TABLE);

	            }
	            this.state = 2655;
	            this.tableName();
	            this.state = 2657;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,144,this._ctx);
	            if(la_===1) {
	                this.state = 2656;
	                this.partitionSpec();

	            }
	            this.state = 2663;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,146,this._ctx);
	            if(la_===1) {
	                this.state = 2660;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===InceptorOracleParser.KW_AS) {
	                    this.state = 2659;
	                    this.match(InceptorOracleParser.KW_AS);
	                }

	                this.state = 2662;
	                this.alias();

	            }
	            break;
	        case InceptorOracleParser.LPAREN:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2665;
	            this.subQuerySource();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dclStatement() {
	    let localctx = new DclStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 320, InceptorOracleParser.RULE_dclStatement);
	    try {
	        this.state = 2672;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case InceptorOracleParser.KW_BEGIN:
	        case InceptorOracleParser.KW_START:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2668;
	            this.beginTransactionStatement();
	            break;
	        case InceptorOracleParser.KW_COMMIT:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2669;
	            this.commitTransactionStatement();
	            break;
	        case InceptorOracleParser.KW_ROLLBACK:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2670;
	            this.rollbackTransactionStatement();
	            break;
	        case InceptorOracleParser.KW_SET:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2671;
	            this.transactionSettingStatement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	beginTransactionStatement() {
	    let localctx = new BeginTransactionStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 322, InceptorOracleParser.RULE_beginTransactionStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2674;
	        _la = this._input.LA(1);
	        if(!(_la===InceptorOracleParser.KW_BEGIN || _la===InceptorOracleParser.KW_START)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 2675;
	        _la = this._input.LA(1);
	        if(!(_la===InceptorOracleParser.KW_TRANSACTION || _la===InceptorOracleParser.KW_WORK)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	commitTransactionStatement() {
	    let localctx = new CommitTransactionStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 324, InceptorOracleParser.RULE_commitTransactionStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2677;
	        this.match(InceptorOracleParser.KW_COMMIT);
	        this.state = 2679;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,149,this._ctx);
	        if(la_===1) {
	            this.state = 2678;
	            this.match(InceptorOracleParser.KW_WORK);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rollbackTransactionStatement() {
	    let localctx = new RollbackTransactionStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 326, InceptorOracleParser.RULE_rollbackTransactionStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2681;
	        this.match(InceptorOracleParser.KW_ROLLBACK);
	        this.state = 2683;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,150,this._ctx);
	        if(la_===1) {
	            this.state = 2682;
	            this.match(InceptorOracleParser.KW_WORK);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transactionSettingStatement() {
	    let localctx = new TransactionSettingStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 328, InceptorOracleParser.RULE_transactionSettingStatement);
	    try {
	        this.state = 2701;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,153,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2685;
	            this.match(InceptorOracleParser.KW_SET);
	            this.state = 2686;
	            this.match(InceptorOracleParser.KW_TRANSACTION);
	            this.state = 2687;
	            this.match(InceptorOracleParser.KW_READ);
	            this.state = 2690;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case InceptorOracleParser.KW_ONLY:
	                this.state = 2688;
	                localctx.readMode = this.match(InceptorOracleParser.KW_ONLY);
	                break;
	            case InceptorOracleParser.KW_WRITE:
	                this.state = 2689;
	                localctx.readMode = this.match(InceptorOracleParser.KW_WRITE);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2692;
	            this.match(InceptorOracleParser.KW_SET);
	            this.state = 2693;
	            this.match(InceptorOracleParser.KW_TRANSACTION);
	            this.state = 2694;
	            this.match(InceptorOracleParser.KW_ISOLATION);
	            this.state = 2695;
	            this.match(InceptorOracleParser.KW_LEVEL);
	            this.state = 2699;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case InceptorOracleParser.KW_READ:
	                this.state = 2696;
	                this.match(InceptorOracleParser.KW_READ);
	                this.state = 2697;
	                this.match(InceptorOracleParser.KW_COMMITTED);
	                break;
	            case InceptorOracleParser.KW_SERIALIZABLE:
	                this.state = 2698;
	                this.match(InceptorOracleParser.KW_SERIALIZABLE);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ddlAStatement() {
	    let localctx = new DdlAStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 330, InceptorOracleParser.RULE_ddlAStatement);
	    try {
	        this.state = 2738;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,154,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2703;
	            this.createDatabaseStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2704;
	            this.switchDatabaseStatement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2705;
	            this.switchApplicationStatement();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2706;
	            this.dropDatabaseStatement();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2707;
	            this.createDbLinkStatement();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2708;
	            this.dropDbLinkStatement();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2709;
	            this.createTableStatement();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 2710;
	            this.createTemporaryTableStatement();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 2711;
	            this.createStreamStatement();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 2712;
	            this.createMetricStatement();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 2713;
	            this.createApplicationStatement();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 2714;
	            this.createJobStatement();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 2715;
	            this.createRuleStatement();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 2716;
	            this.dropRuleStatement();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 2717;
	            this.createRuleBaseStatement();
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 2718;
	            this.switchRuleBaseStatement();
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 2719;
	            this.dropRuleBaseStatement();
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 2720;
	            this.createPolicyStatement();
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 2721;
	            this.switchPolicyStatement();
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 2722;
	            this.createRuleGroupStatement();
	            break;

	        case 21:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 2723;
	            this.createPolicyRuleStatement();
	            break;

	        case 22:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 2724;
	            this.dropPolicyStatement();
	            break;

	        case 23:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 2725;
	            this.dropPolicyRuleStatement();
	            break;

	        case 24:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 2726;
	            this.dropTableStatement();
	            break;

	        case 25:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 2727;
	            this.dropStreamStatement();
	            break;

	        case 26:
	            this.enterOuterAlt(localctx, 26);
	            this.state = 2728;
	            this.dropMetricStatement();
	            break;

	        case 27:
	            this.enterOuterAlt(localctx, 27);
	            this.state = 2729;
	            this.dropApplicationStatement();
	            break;

	        case 28:
	            this.enterOuterAlt(localctx, 28);
	            this.state = 2730;
	            this.dropJobStatement();
	            break;

	        case 29:
	            this.enterOuterAlt(localctx, 29);
	            this.state = 2731;
	            this.dropCachedMetricStatement();
	            break;

	        case 30:
	            this.enterOuterAlt(localctx, 30);
	            this.state = 2732;
	            this.truncateCachedMetricStatement();
	            break;

	        case 31:
	            this.enterOuterAlt(localctx, 31);
	            this.state = 2733;
	            this.truncateTableStatement();
	            break;

	        case 32:
	            this.enterOuterAlt(localctx, 32);
	            this.state = 2734;
	            this.createSequenceStatement();
	            break;

	        case 33:
	            this.enterOuterAlt(localctx, 33);
	            this.state = 2735;
	            this.dropSequenceStatement();
	            break;

	        case 34:
	            this.enterOuterAlt(localctx, 34);
	            this.state = 2736;
	            this.createRuleFunctionStatement();
	            break;

	        case 35:
	            this.enterOuterAlt(localctx, 35);
	            this.state = 2737;
	            this.dropRuleFunctionStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createDatabaseStatement() {
	    let localctx = new CreateDatabaseStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 332, InceptorOracleParser.RULE_createDatabaseStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2740;
	        this.match(InceptorOracleParser.KW_CREATE);
	        this.state = 2741;
	        _la = this._input.LA(1);
	        if(!(_la===InceptorOracleParser.KW_DATABASE || _la===InceptorOracleParser.KW_SCHEMA)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 2743;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_IF) {
	            this.state = 2742;
	            this.ifNotExists();
	        }

	        this.state = 2745;
	        localctx.name = this.identifier();
	        this.state = 2747;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_COMMENT) {
	            this.state = 2746;
	            this.databaseComment();
	        }

	        this.state = 2750;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_LOCATION) {
	            this.state = 2749;
	            this.dbLocation();
	        }

	        this.state = 2755;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_WITH) {
	            this.state = 2752;
	            this.match(InceptorOracleParser.KW_WITH);
	            this.state = 2753;
	            this.match(InceptorOracleParser.KW_DBPROPERTIES);
	            this.state = 2754;
	            localctx.dbprops = this.dbProperties();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switchDatabaseStatement() {
	    let localctx = new SwitchDatabaseStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 334, InceptorOracleParser.RULE_switchDatabaseStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2757;
	        this.match(InceptorOracleParser.KW_USE);
	        this.state = 2758;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switchApplicationStatement() {
	    let localctx = new SwitchApplicationStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 336, InceptorOracleParser.RULE_switchApplicationStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2760;
	        this.match(InceptorOracleParser.KW_USE);
	        this.state = 2761;
	        _la = this._input.LA(1);
	        if(!(_la===InceptorOracleParser.KW_APPLICATION || _la===InceptorOracleParser.KW_APP)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 2762;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropDatabaseStatement() {
	    let localctx = new DropDatabaseStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 338, InceptorOracleParser.RULE_dropDatabaseStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2764;
	        this.match(InceptorOracleParser.KW_DROP);
	        this.state = 2765;
	        _la = this._input.LA(1);
	        if(!(_la===InceptorOracleParser.KW_DATABASE || _la===InceptorOracleParser.KW_SCHEMA)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 2767;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_IF) {
	            this.state = 2766;
	            this.ifExists();
	        }

	        this.state = 2769;
	        this.identifier();
	        this.state = 2771;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_RESTRICT || _la===InceptorOracleParser.KW_CASCADE) {
	            this.state = 2770;
	            this.restrictOrCascade();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createDbLinkStatement() {
	    let localctx = new CreateDbLinkStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 340, InceptorOracleParser.RULE_createDbLinkStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2773;
	        this.match(InceptorOracleParser.KW_CREATE);
	        this.state = 2775;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_SHARED) {
	            this.state = 2774;
	            this.match(InceptorOracleParser.KW_SHARED);
	        }

	        this.state = 2778;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_PUBLIC) {
	            this.state = 2777;
	            this.match(InceptorOracleParser.KW_PUBLIC);
	        }

	        this.state = 2780;
	        this.match(InceptorOracleParser.KW_DATABASE);
	        this.state = 2781;
	        this.match(InceptorOracleParser.KW_LINK);
	        this.state = 2782;
	        this.dblink();
	        this.state = 2790;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_CONNECT) {
	            this.state = 2783;
	            this.match(InceptorOracleParser.KW_CONNECT);
	            this.state = 2784;
	            this.match(InceptorOracleParser.KW_TO);
	            this.state = 2785;
	            this.dblinkUser();
	            this.state = 2786;
	            this.match(InceptorOracleParser.KW_IDENTIFIED);
	            this.state = 2787;
	            this.match(InceptorOracleParser.KW_BY);
	            this.state = 2788;
	            this.dblinkPwd();
	        }

	        this.state = 2792;
	        this.match(InceptorOracleParser.KW_USING);
	        this.state = 2793;
	        this.dblinkService();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropDbLinkStatement() {
	    let localctx = new DropDbLinkStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 342, InceptorOracleParser.RULE_dropDbLinkStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2795;
	        this.match(InceptorOracleParser.KW_DROP);
	        this.state = 2797;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_PUBLIC) {
	            this.state = 2796;
	            this.match(InceptorOracleParser.KW_PUBLIC);
	        }

	        this.state = 2799;
	        this.match(InceptorOracleParser.KW_DATABASE);
	        this.state = 2800;
	        this.match(InceptorOracleParser.KW_LINK);
	        this.state = 2802;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_IF) {
	            this.state = 2801;
	            this.ifExists();
	        }

	        this.state = 2804;
	        this.dblink();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dblink() {
	    let localctx = new DblinkContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 344, InceptorOracleParser.RULE_dblink);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2806;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dblinkUser() {
	    let localctx = new DblinkUserContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 346, InceptorOracleParser.RULE_dblinkUser);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2808;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dblinkPwd() {
	    let localctx = new DblinkPwdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 348, InceptorOracleParser.RULE_dblinkPwd);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2810;
	        this.match(InceptorOracleParser.StringLiteral);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dblinkService() {
	    let localctx = new DblinkServiceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 350, InceptorOracleParser.RULE_dblinkService);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2812;
	        this.match(InceptorOracleParser.StringLiteral);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createTableStatement() {
	    let localctx = new CreateTableStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 352, InceptorOracleParser.RULE_createTableStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2814;
	        this.dialectCreateTableStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createTemporaryTableStatement() {
	    let localctx = new CreateTemporaryTableStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 354, InceptorOracleParser.RULE_createTemporaryTableStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2816;
	        this.dialectCreateTemporaryTableStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableDefinitionClause() {
	    let localctx = new TableDefinitionClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 356, InceptorOracleParser.RULE_tableDefinitionClause);
	    var _la = 0; // Token type
	    try {
	        this.state = 2827;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,168,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2818;
	            localctx.like = this.match(InceptorOracleParser.KW_LIKE);
	            this.state = 2819;
	            localctx.likeName = this.tableName();
	            this.state = 2821;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_LOCATION) {
	                this.state = 2820;
	                this.tableLocation();
	            }

	            this.state = 2824;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_TBLPROPERTIES) {
	                this.state = 2823;
	                this.tablePropertiesPrefixed();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2826;
	            this.dialectTableDefinitionClause();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	noDataCopyQuery() {
	    let localctx = new NoDataCopyQueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 358, InceptorOracleParser.RULE_noDataCopyQuery);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2829;
	        this.dialectWithNoData();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createStreamStatement() {
	    let localctx = new CreateStreamStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 360, InceptorOracleParser.RULE_createStreamStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2831;
	        this.match(InceptorOracleParser.KW_CREATE);
	        this.state = 2833;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_TEMPORARY) {
	            this.state = 2832;
	            localctx.temp = this.match(InceptorOracleParser.KW_TEMPORARY);
	        }

	        this.state = 2836;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_EXTERNAL) {
	            this.state = 2835;
	            localctx.ext = this.match(InceptorOracleParser.KW_EXTERNAL);
	        }

	        this.state = 2838;
	        this.match(InceptorOracleParser.KW_STREAM);
	        this.state = 2840;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_IF) {
	            this.state = 2839;
	            this.ifNotExists();
	        }

	        this.state = 2842;
	        localctx.name = this.tableName();
	        this.state = 2888;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case InceptorOracleParser.KW_LIKE:
	            this.state = 2843;
	            localctx.like = this.match(InceptorOracleParser.KW_LIKE);
	            this.state = 2844;
	            localctx.likeName = this.tableName();
	            this.state = 2846;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_LOCATION) {
	                this.state = 2845;
	                this.tableLocation();
	            }

	            this.state = 2849;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_TBLPROPERTIES) {
	                this.state = 2848;
	                this.tablePropertiesPrefixed();
	            }

	            break;
	        case InceptorOracleParser.EOF:
	        case InceptorOracleParser.KW_AS:
	        case InceptorOracleParser.KW_COMMENT:
	        case InceptorOracleParser.KW_PARTITIONED:
	        case InceptorOracleParser.KW_CLUSTERED:
	        case InceptorOracleParser.KW_ROW:
	        case InceptorOracleParser.KW_STORED:
	        case InceptorOracleParser.KW_LOCATION:
	        case InceptorOracleParser.KW_TBLPROPERTIES:
	        case InceptorOracleParser.KW_SKEWED:
	        case InceptorOracleParser.KW_LOG:
	        case InceptorOracleParser.SEMICOLON:
	        case InceptorOracleParser.LPAREN:
	            this.state = 2855;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.LPAREN) {
	                this.state = 2851;
	                this.match(InceptorOracleParser.LPAREN);
	                this.state = 2852;
	                this.columnNameTypeList();
	                this.state = 2853;
	                this.match(InceptorOracleParser.RPAREN);
	            }

	            this.state = 2858;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_COMMENT) {
	                this.state = 2857;
	                this.tableComment();
	            }

	            this.state = 2861;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_PARTITIONED) {
	                this.state = 2860;
	                this.tablePartition();
	            }

	            this.state = 2864;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_CLUSTERED) {
	                this.state = 2863;
	                this.tableBuckets();
	            }

	            this.state = 2867;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_SKEWED) {
	                this.state = 2866;
	                this.tableSkewed();
	            }

	            this.state = 2870;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_ROW) {
	                this.state = 2869;
	                this.tableRowFormat();
	            }

	            this.state = 2873;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_STORED) {
	                this.state = 2872;
	                this.tableFileFormat();
	            }

	            this.state = 2876;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_LOCATION) {
	                this.state = 2875;
	                this.tableLocation();
	            }

	            this.state = 2879;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_TBLPROPERTIES) {
	                this.state = 2878;
	                this.tablePropertiesPrefixed();
	            }

	            this.state = 2883;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_AS) {
	                this.state = 2881;
	                this.match(InceptorOracleParser.KW_AS);
	                this.state = 2882;
	                this.ctasTargetStatement();
	            }

	            this.state = 2886;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_LOG) {
	                this.state = 2885;
	                this.erroLogTableSpec();
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createMetricStatement() {
	    let localctx = new CreateMetricStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 362, InceptorOracleParser.RULE_createMetricStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2890;
	        this.match(InceptorOracleParser.KW_CREATE);
	        this.state = 2892;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_TEMPORARY) {
	            this.state = 2891;
	            localctx.temp = this.match(InceptorOracleParser.KW_TEMPORARY);
	        }

	        this.state = 2895;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_EXTERNAL) {
	            this.state = 2894;
	            localctx.ext = this.match(InceptorOracleParser.KW_EXTERNAL);
	        }

	        this.state = 2897;
	        this.match(InceptorOracleParser.KW_METRIC);
	        this.state = 2899;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_IF) {
	            this.state = 2898;
	            this.ifNotExists();
	        }

	        this.state = 2901;
	        localctx.name = this.tableName();
	        this.state = 2947;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case InceptorOracleParser.KW_LIKE:
	            this.state = 2902;
	            localctx.like = this.match(InceptorOracleParser.KW_LIKE);
	            this.state = 2903;
	            localctx.likeName = this.tableName();
	            this.state = 2905;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_LOCATION) {
	                this.state = 2904;
	                this.tableLocation();
	            }

	            this.state = 2908;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_TBLPROPERTIES) {
	                this.state = 2907;
	                this.tablePropertiesPrefixed();
	            }

	            break;
	        case InceptorOracleParser.EOF:
	        case InceptorOracleParser.KW_AS:
	        case InceptorOracleParser.KW_COMMENT:
	        case InceptorOracleParser.KW_PARTITIONED:
	        case InceptorOracleParser.KW_CLUSTERED:
	        case InceptorOracleParser.KW_ROW:
	        case InceptorOracleParser.KW_STORED:
	        case InceptorOracleParser.KW_LOCATION:
	        case InceptorOracleParser.KW_TBLPROPERTIES:
	        case InceptorOracleParser.KW_SKEWED:
	        case InceptorOracleParser.KW_LOG:
	        case InceptorOracleParser.SEMICOLON:
	        case InceptorOracleParser.LPAREN:
	            this.state = 2914;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.LPAREN) {
	                this.state = 2910;
	                this.match(InceptorOracleParser.LPAREN);
	                this.state = 2911;
	                this.columnNameTypeList();
	                this.state = 2912;
	                this.match(InceptorOracleParser.RPAREN);
	            }

	            this.state = 2917;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_COMMENT) {
	                this.state = 2916;
	                this.tableComment();
	            }

	            this.state = 2920;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_PARTITIONED) {
	                this.state = 2919;
	                this.tablePartition();
	            }

	            this.state = 2923;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_CLUSTERED) {
	                this.state = 2922;
	                this.tableBuckets();
	            }

	            this.state = 2926;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_SKEWED) {
	                this.state = 2925;
	                this.tableSkewed();
	            }

	            this.state = 2929;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_ROW) {
	                this.state = 2928;
	                this.tableRowFormat();
	            }

	            this.state = 2932;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_STORED) {
	                this.state = 2931;
	                this.tableFileFormat();
	            }

	            this.state = 2935;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_LOCATION) {
	                this.state = 2934;
	                this.tableLocation();
	            }

	            this.state = 2938;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_TBLPROPERTIES) {
	                this.state = 2937;
	                this.tablePropertiesPrefixed();
	            }

	            this.state = 2942;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_AS) {
	                this.state = 2940;
	                this.match(InceptorOracleParser.KW_AS);
	                this.state = 2941;
	                this.ctasTargetStatement();
	            }

	            this.state = 2945;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_LOG) {
	                this.state = 2944;
	                this.erroLogTableSpec();
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	streamJob() {
	    let localctx = new StreamJobContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 364, InceptorOracleParser.RULE_streamJob);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2949;
	        this.match(InceptorOracleParser.LPAREN);
	        this.state = 2950;
	        localctx.sql = this.match(InceptorOracleParser.StringLiteral);
	        this.state = 2951;
	        this.match(InceptorOracleParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createJobStatement() {
	    let localctx = new CreateJobStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 366, InceptorOracleParser.RULE_createJobStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2953;
	        this.match(InceptorOracleParser.KW_CREATE);
	        this.state = 2954;
	        this.match(InceptorOracleParser.KW_STREAMJOB);
	        this.state = 2956;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_IF) {
	            this.state = 2955;
	            this.ifNotExists();
	        }

	        this.state = 2958;
	        localctx.name = this.tableName();
	        this.state = 2959;
	        this.match(InceptorOracleParser.KW_AS);
	        this.state = 2960;
	        localctx.job = this.streamJob();
	        this.state = 2963;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_JOBPROPERTIES) {
	            this.state = 2961;
	            this.match(InceptorOracleParser.KW_JOBPROPERTIES);
	            this.state = 2962;
	            localctx.dbprops = this.dbProperties();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	streamRule() {
	    let localctx = new StreamRuleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 368, InceptorOracleParser.RULE_streamRule);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2965;
	        this.match(InceptorOracleParser.LPAREN);
	        this.state = 2966;
	        localctx.sql = this.match(InceptorOracleParser.StringLiteral);
	        this.state = 2967;
	        this.match(InceptorOracleParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createRuleStatement() {
	    let localctx = new CreateRuleStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 370, InceptorOracleParser.RULE_createRuleStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2969;
	        this.match(InceptorOracleParser.KW_RULE);
	        this.state = 2971;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_IF) {
	            this.state = 2970;
	            this.ifNotExists();
	        }

	        this.state = 2973;
	        localctx.name = this.tableName();
	        this.state = 2974;
	        this.match(InceptorOracleParser.KW_AS);
	        this.state = 2975;
	        this.streamRule();
	        this.state = 2978;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_RULEPROPERTIES) {
	            this.state = 2976;
	            this.match(InceptorOracleParser.KW_RULEPROPERTIES);
	            this.state = 2977;
	            localctx.dbprops = this.dbProperties();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropRuleStatement() {
	    let localctx = new DropRuleStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 372, InceptorOracleParser.RULE_dropRuleStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2980;
	        this.match(InceptorOracleParser.KW_DROP);
	        this.state = 2981;
	        this.match(InceptorOracleParser.KW_RULE);
	        this.state = 2983;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_IF) {
	            this.state = 2982;
	            this.ifExists();
	        }

	        this.state = 2985;
	        this.tableName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createRuleBaseStatement() {
	    let localctx = new CreateRuleBaseStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 374, InceptorOracleParser.RULE_createRuleBaseStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2987;
	        this.match(InceptorOracleParser.KW_CREATE);
	        this.state = 2988;
	        this.match(InceptorOracleParser.KW_RULEBASE);
	        this.state = 2990;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_IF) {
	            this.state = 2989;
	            this.ifNotExists();
	        }

	        this.state = 2992;
	        localctx.name = this.identifier();
	        this.state = 2994;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_COMMENT) {
	            this.state = 2993;
	            this.databaseComment();
	        }

	        this.state = 2999;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_WITH) {
	            this.state = 2996;
	            this.match(InceptorOracleParser.KW_WITH);
	            this.state = 2997;
	            this.match(InceptorOracleParser.KW_DBPROPERTIES);
	            this.state = 2998;
	            localctx.dbprops = this.dbProperties();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switchRuleBaseStatement() {
	    let localctx = new SwitchRuleBaseStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 376, InceptorOracleParser.RULE_switchRuleBaseStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3001;
	        this.match(InceptorOracleParser.KW_USE);

	        this.state = 3002;
	        this.match(InceptorOracleParser.KW_RULEBASE);
	        this.state = 3003;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropRuleBaseStatement() {
	    let localctx = new DropRuleBaseStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 378, InceptorOracleParser.RULE_dropRuleBaseStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3005;
	        this.match(InceptorOracleParser.KW_DROP);
	        this.state = 3006;
	        this.match(InceptorOracleParser.KW_RULEBASE);
	        this.state = 3008;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_IF) {
	            this.state = 3007;
	            this.ifExists();
	        }

	        this.state = 3010;
	        this.identifier();
	        this.state = 3012;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_RESTRICT || _la===InceptorOracleParser.KW_CASCADE) {
	            this.state = 3011;
	            this.restrictOrCascade();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ruleGroupType() {
	    let localctx = new RuleGroupTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 380, InceptorOracleParser.RULE_ruleGroupType);
	    try {
	        this.state = 3020;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case InceptorOracleParser.KW_ANY:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3014;
	            this.match(InceptorOracleParser.KW_ANY);
	            break;
	        case InceptorOracleParser.KW_ALL:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3015;
	            this.match(InceptorOracleParser.KW_ALL);
	            break;
	        case InceptorOracleParser.KW_PERCENT:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3016;
	            this.match(InceptorOracleParser.KW_PERCENT);
	            this.state = 3017;
	            this.match(InceptorOracleParser.LPAREN);
	            this.state = 3018;
	            localctx.percent = this.match(InceptorOracleParser.Number);
	            this.state = 3019;
	            this.match(InceptorOracleParser.RPAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createPolicyStatement() {
	    let localctx = new CreatePolicyStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 382, InceptorOracleParser.RULE_createPolicyStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3022;
	        this.match(InceptorOracleParser.KW_POLICY);
	        this.state = 3024;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_IF) {
	            this.state = 3023;
	            this.ifNotExists();
	        }

	        this.state = 3026;
	        localctx.name = this.tableName();
	        this.state = 3031;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_WITH) {
	            this.state = 3027;
	            this.match(InceptorOracleParser.KW_WITH);
	            this.state = 3028;
	            this.match(InceptorOracleParser.KW_RULES);
	            this.state = 3029;
	            this.match(InceptorOracleParser.KW_MEET);
	            this.state = 3030;
	            this.ruleGroupType();
	        }

	        this.state = 3035;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_POLICYPROPERTIES) {
	            this.state = 3033;
	            this.match(InceptorOracleParser.KW_POLICYPROPERTIES);
	            this.state = 3034;
	            localctx.dbprops = this.dbProperties();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createRuleGroupStatement() {
	    let localctx = new CreateRuleGroupStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 384, InceptorOracleParser.RULE_createRuleGroupStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3037;
	        this.match(InceptorOracleParser.KW_ADD);
	        this.state = 3038;
	        this.match(InceptorOracleParser.KW_RULE);
	        this.state = 3039;
	        this.match(InceptorOracleParser.KW_GROUP);
	        this.state = 3041;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_IF) {
	            this.state = 3040;
	            this.ifNotExists();
	        }

	        this.state = 3043;
	        localctx.name = this.tableName();
	        this.state = 3044;
	        this.match(InceptorOracleParser.KW_WITH);
	        this.state = 3045;
	        this.match(InceptorOracleParser.KW_RULES);
	        this.state = 3046;
	        this.match(InceptorOracleParser.KW_MEET);
	        this.state = 3047;
	        this.ruleGroupType();
	        this.state = 3049;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_INTO) {
	            this.state = 3048;
	            this.intoRuleGroupStatement();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	intoRuleGroupStatement() {
	    let localctx = new IntoRuleGroupStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 386, InceptorOracleParser.RULE_intoRuleGroupStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3051;
	        this.match(InceptorOracleParser.KW_INTO);
	        this.state = 3052;
	        this.match(InceptorOracleParser.KW_GROUP);
	        this.state = 3053;
	        localctx.ruleGroup = this.tableName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ruleConstraintType() {
	    let localctx = new RuleConstraintTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 388, InceptorOracleParser.RULE_ruleConstraintType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3055;
	        _la = this._input.LA(1);
	        if(!(((((_la - 240)) & ~0x1f) == 0 && ((1 << (_la - 240)) & ((1 << (InceptorOracleParser.KW_MUST - 240)) | (1 << (InceptorOracleParser.KW_MUSTNOT - 240)) | (1 << (InceptorOracleParser.KW_NONE - 240)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	policyKey() {
	    let localctx = new PolicyKeyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 390, InceptorOracleParser.RULE_policyKey);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3057;
	        this.match(InceptorOracleParser.KW_WITH);
	        this.state = 3058;
	        this.match(InceptorOracleParser.KW_POLICYKEY);
	        this.state = 3059;
	        localctx.key = this.match(InceptorOracleParser.StringLiteral);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createPolicyRuleStatement() {
	    let localctx = new CreatePolicyRuleStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 392, InceptorOracleParser.RULE_createPolicyRuleStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3061;
	        this.match(InceptorOracleParser.KW_ADD);
	        this.state = 3062;
	        this.match(InceptorOracleParser.KW_RULE);
	        this.state = 3063;
	        localctx.name = this.tableName();
	        this.state = 3067;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,219,this._ctx);
	        if(la_===1) {
	            this.state = 3064;
	            this.match(InceptorOracleParser.KW_WITH);
	            this.state = 3065;
	            this.match(InceptorOracleParser.KW_CONSTRAINT);
	            this.state = 3066;
	            this.ruleConstraintType();

	        }
	        this.state = 3070;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_WITH) {
	            this.state = 3069;
	            this.policyKey();
	        }

	        this.state = 3073;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_INTO) {
	            this.state = 3072;
	            this.intoRuleGroupStatement();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropPolicyStatement() {
	    let localctx = new DropPolicyStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 394, InceptorOracleParser.RULE_dropPolicyStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3075;
	        this.match(InceptorOracleParser.KW_DROP);
	        this.state = 3076;
	        this.match(InceptorOracleParser.KW_POLICY);
	        this.state = 3078;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_IF) {
	            this.state = 3077;
	            this.ifExists();
	        }

	        this.state = 3080;
	        this.tableName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switchPolicyStatement() {
	    let localctx = new SwitchPolicyStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 396, InceptorOracleParser.RULE_switchPolicyStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3082;
	        this.match(InceptorOracleParser.KW_USE);
	        this.state = 3083;
	        this.match(InceptorOracleParser.KW_POLICY);
	        this.state = 3084;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropPolicyRuleStatement() {
	    let localctx = new DropPolicyRuleStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 398, InceptorOracleParser.RULE_dropPolicyRuleStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3086;
	        this.match(InceptorOracleParser.KW_REMOVE);
	        this.state = 3087;
	        this.match(InceptorOracleParser.KW_RULE);
	        this.state = 3089;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,223,this._ctx);
	        if(la_===1) {
	            this.state = 3088;
	            this.match(InceptorOracleParser.KW_GROUP);

	        }
	        this.state = 3092;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_IF) {
	            this.state = 3091;
	            this.ifExists();
	        }

	        this.state = 3094;
	        this.tableName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createApplicationStatement() {
	    let localctx = new CreateApplicationStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 400, InceptorOracleParser.RULE_createApplicationStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3096;
	        this.match(InceptorOracleParser.KW_CREATE);
	        this.state = 3097;
	        _la = this._input.LA(1);
	        if(!(_la===InceptorOracleParser.KW_APPLICATION || _la===InceptorOracleParser.KW_APP)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 3099;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_IF) {
	            this.state = 3098;
	            this.ifNotExists();
	        }

	        this.state = 3101;
	        localctx.name = this.identifier();
	        this.state = 3107;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_WITH || _la===InceptorOracleParser.KW_APPPROPERTIES) {
	            this.state = 3103;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_WITH) {
	                this.state = 3102;
	                this.match(InceptorOracleParser.KW_WITH);
	            }

	            this.state = 3105;
	            this.match(InceptorOracleParser.KW_APPPROPERTIES);
	            this.state = 3106;
	            localctx.dbprops = this.dbProperties();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropApplicationStatement() {
	    let localctx = new DropApplicationStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 402, InceptorOracleParser.RULE_dropApplicationStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3109;
	        this.match(InceptorOracleParser.KW_DROP);
	        this.state = 3110;
	        _la = this._input.LA(1);
	        if(!(_la===InceptorOracleParser.KW_APPLICATION || _la===InceptorOracleParser.KW_APP)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 3112;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_IF) {
	            this.state = 3111;
	            this.ifExists();
	        }

	        this.state = 3114;
	        this.identifier();
	        this.state = 3116;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_RESTRICT || _la===InceptorOracleParser.KW_CASCADE) {
	            this.state = 3115;
	            this.restrictOrCascade();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropTableStatement() {
	    let localctx = new DropTableStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 404, InceptorOracleParser.RULE_dropTableStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3118;
	        this.match(InceptorOracleParser.KW_DROP);
	        this.state = 3119;
	        this.match(InceptorOracleParser.KW_TABLE);
	        this.state = 3121;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_IF) {
	            this.state = 3120;
	            this.ifExists();
	        }

	        this.state = 3123;
	        this.tableName();
	        this.state = 3125;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_PURGE) {
	            this.state = 3124;
	            this.match(InceptorOracleParser.KW_PURGE);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropStreamStatement() {
	    let localctx = new DropStreamStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 406, InceptorOracleParser.RULE_dropStreamStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3127;
	        this.match(InceptorOracleParser.KW_DROP);
	        this.state = 3128;
	        this.match(InceptorOracleParser.KW_STREAM);
	        this.state = 3130;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_IF) {
	            this.state = 3129;
	            this.ifExists();
	        }

	        this.state = 3132;
	        this.tableName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropMetricStatement() {
	    let localctx = new DropMetricStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 408, InceptorOracleParser.RULE_dropMetricStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3134;
	        this.match(InceptorOracleParser.KW_DROP);
	        this.state = 3135;
	        this.match(InceptorOracleParser.KW_METRIC);
	        this.state = 3137;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_IF) {
	            this.state = 3136;
	            this.ifExists();
	        }

	        this.state = 3139;
	        this.tableName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropJobStatement() {
	    let localctx = new DropJobStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 410, InceptorOracleParser.RULE_dropJobStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3141;
	        this.match(InceptorOracleParser.KW_DROP);
	        this.state = 3142;
	        this.match(InceptorOracleParser.KW_STREAMJOB);
	        this.state = 3144;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_IF) {
	            this.state = 3143;
	            this.ifExists();
	        }

	        this.state = 3146;
	        this.tableName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createRuleFunctionStatement() {
	    let localctx = new CreateRuleFunctionStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 412, InceptorOracleParser.RULE_createRuleFunctionStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3148;
	        this.match(InceptorOracleParser.KW_CREATE);
	        this.state = 3149;
	        this.match(InceptorOracleParser.KW_RULE_FUNCTION);
	        this.state = 3151;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_IF) {
	            this.state = 3150;
	            this.ifNotExists();
	        }

	        this.state = 3153;
	        localctx.name = this.identifier();
	        this.state = 3159;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_WITH || _la===InceptorOracleParser.KW_RULE_FUNCTION_PROPERTIES) {
	            this.state = 3155;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_WITH) {
	                this.state = 3154;
	                this.match(InceptorOracleParser.KW_WITH);
	            }

	            this.state = 3157;
	            this.match(InceptorOracleParser.KW_RULE_FUNCTION_PROPERTIES);
	            this.state = 3158;
	            localctx.dbprops = this.dbProperties();
	        }

	        this.state = 3163;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_USING) {
	            this.state = 3161;
	            this.match(InceptorOracleParser.KW_USING);
	            this.state = 3162;
	            localctx.rList = this.resourceList();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropRuleFunctionStatement() {
	    let localctx = new DropRuleFunctionStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 414, InceptorOracleParser.RULE_dropRuleFunctionStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3165;
	        this.match(InceptorOracleParser.KW_DROP);
	        this.state = 3166;
	        this.match(InceptorOracleParser.KW_RULE_FUNCTION);
	        this.state = 3168;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_IF) {
	            this.state = 3167;
	            this.ifExists();
	        }

	        this.state = 3170;
	        localctx.metricName = this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropCachedMetricStatement() {
	    let localctx = new DropCachedMetricStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 416, InceptorOracleParser.RULE_dropCachedMetricStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3172;
	        this.match(InceptorOracleParser.KW_DROP);
	        this.state = 3173;
	        this.match(InceptorOracleParser.KW_CACHEDMETRIC);
	        this.state = 3175;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_IF) {
	            this.state = 3174;
	            this.ifExists();
	        }

	        this.state = 3177;
	        localctx.metricName = this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	truncateCachedMetricStatement() {
	    let localctx = new TruncateCachedMetricStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 418, InceptorOracleParser.RULE_truncateCachedMetricStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3179;
	        this.match(InceptorOracleParser.KW_TRUNCATE);
	        this.state = 3180;
	        this.match(InceptorOracleParser.KW_CACHEDMETRIC);
	        this.state = 3181;
	        localctx.metricName = this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	truncateTableStatement() {
	    let localctx = new TruncateTableStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 420, InceptorOracleParser.RULE_truncateTableStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3183;
	        this.match(InceptorOracleParser.KW_TRUNCATE);
	        this.state = 3184;
	        this.match(InceptorOracleParser.KW_TABLE);
	        this.state = 3185;
	        this.tablePartitionPrefix();
	        this.state = 3191;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_COLUMNS) {
	            this.state = 3186;
	            this.match(InceptorOracleParser.KW_COLUMNS);
	            this.state = 3187;
	            this.match(InceptorOracleParser.LPAREN);
	            this.state = 3188;
	            this.columnNameList();
	            this.state = 3189;
	            this.match(InceptorOracleParser.RPAREN);
	        }

	        this.state = 3194;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_IMMEDIATE) {
	            this.state = 3193;
	            this.match(InceptorOracleParser.KW_IMMEDIATE);
	        }

	        this.state = 3197;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_PURGE) {
	            this.state = 3196;
	            this.match(InceptorOracleParser.KW_PURGE);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tablePartitionPrefix() {
	    let localctx = new TablePartitionPrefixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 422, InceptorOracleParser.RULE_tablePartitionPrefix);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3199;
	        this.tableName();
	        this.state = 3201;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,244,this._ctx);
	        if(la_===1) {
	            this.state = 3200;
	            this.partitionSpec();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ctasTargetStatement() {
	    let localctx = new CtasTargetStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 424, InceptorOracleParser.RULE_ctasTargetStatement);
	    try {
	        this.state = 3208;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,245,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3203;
	            this.match(InceptorOracleParser.LPAREN);
	            this.state = 3204;
	            this.queryStatementExpression();
	            this.state = 3205;
	            this.match(InceptorOracleParser.RPAREN);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3207;
	            this.queryStatementExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableRowNullFormat() {
	    let localctx = new TableRowNullFormatContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 426, InceptorOracleParser.RULE_tableRowNullFormat);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3210;
	        this.match(InceptorOracleParser.KW_NULL);
	        this.state = 3211;
	        this.match(InceptorOracleParser.KW_DEFINED);
	        this.state = 3212;
	        this.match(InceptorOracleParser.KW_AS);
	        this.state = 3213;
	        localctx.nullIdnt = this.match(InceptorOracleParser.StringLiteral);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rowFormatSerde() {
	    let localctx = new RowFormatSerdeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 428, InceptorOracleParser.RULE_rowFormatSerde);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3215;
	        this.match(InceptorOracleParser.KW_ROW);
	        this.state = 3216;
	        this.match(InceptorOracleParser.KW_FORMAT);
	        this.state = 3217;
	        this.match(InceptorOracleParser.KW_SERDE);
	        this.state = 3218;
	        localctx.name = this.match(InceptorOracleParser.StringLiteral);
	        this.state = 3222;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,246,this._ctx);
	        if(la_===1) {
	            this.state = 3219;
	            this.match(InceptorOracleParser.KW_WITH);
	            this.state = 3220;
	            this.match(InceptorOracleParser.KW_SERDEPROPERTIES);
	            this.state = 3221;
	            localctx.serdeprops = this.tableProperties();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rowFormatDelimited() {
	    let localctx = new RowFormatDelimitedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 430, InceptorOracleParser.RULE_rowFormatDelimited);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3224;
	        this.match(InceptorOracleParser.KW_ROW);
	        this.state = 3225;
	        this.match(InceptorOracleParser.KW_FORMAT);
	        this.state = 3226;
	        this.match(InceptorOracleParser.KW_DELIMITED);
	        this.state = 3228;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,247,this._ctx);
	        if(la_===1) {
	            this.state = 3227;
	            this.tableRowFormatFieldIdentifier();

	        }
	        this.state = 3231;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,248,this._ctx);
	        if(la_===1) {
	            this.state = 3230;
	            this.tableRowFormatCollItemsIdentifier();

	        }
	        this.state = 3234;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,249,this._ctx);
	        if(la_===1) {
	            this.state = 3233;
	            this.tableRowFormatMapKeysIdentifier();

	        }
	        this.state = 3237;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,250,this._ctx);
	        if(la_===1) {
	            this.state = 3236;
	            this.tableRowFormatLinesIdentifier();

	        }
	        this.state = 3240;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,251,this._ctx);
	        if(la_===1) {
	            this.state = 3239;
	            this.tableRowNullFormat();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableRowFormat() {
	    let localctx = new TableRowFormatContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 432, InceptorOracleParser.RULE_tableRowFormat);
	    try {
	        this.state = 3244;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,252,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3242;
	            this.rowFormatDelimited();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3243;
	            this.rowFormatSerde();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableComment() {
	    let localctx = new TableCommentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 434, InceptorOracleParser.RULE_tableComment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3246;
	        this.match(InceptorOracleParser.KW_COMMENT);
	        this.state = 3247;
	        localctx.comment = this.match(InceptorOracleParser.StringLiteral);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tablePartition() {
	    let localctx = new TablePartitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 436, InceptorOracleParser.RULE_tablePartition);
	    try {
	        this.state = 3256;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,253,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3249;
	            this.match(InceptorOracleParser.KW_PARTITIONED);
	            this.state = 3250;
	            this.match(InceptorOracleParser.KW_BY);
	            this.state = 3251;
	            this.match(InceptorOracleParser.LPAREN);
	            this.state = 3252;
	            this.columnNameTypeList();
	            this.state = 3253;
	            this.match(InceptorOracleParser.RPAREN);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3255;
	            this.tableRangePartition();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableRoute() {
	    let localctx = new TableRouteContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 438, InceptorOracleParser.RULE_tableRoute);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3258;
	        this.match(InceptorOracleParser.KW_ROUTED);
	        this.state = 3259;
	        this.match(InceptorOracleParser.KW_BY);
	        this.state = 3260;
	        this.tableRouteSpec();
	        this.state = 3265;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===InceptorOracleParser.COMMA) {
	            this.state = 3261;
	            this.match(InceptorOracleParser.COMMA);
	            this.state = 3262;
	            this.tableRouteSpec();
	            this.state = 3267;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableRouteSpec() {
	    let localctx = new TableRouteSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 440, InceptorOracleParser.RULE_tableRouteSpec);
	    try {
	        this.state = 3270;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case InceptorOracleParser.KW_RANGE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3268;
	            this.tableRangeRoute();
	            break;
	        case InceptorOracleParser.KW_HASH:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3269;
	            this.tableHashRoute();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableRangeRoute() {
	    let localctx = new TableRangeRouteContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 442, InceptorOracleParser.RULE_tableRangeRoute);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3272;
	        this.match(InceptorOracleParser.KW_RANGE);
	        this.state = 3273;
	        this.match(InceptorOracleParser.LPAREN);
	        this.state = 3274;
	        localctx.rangeRouteCol = this.columnName();
	        this.state = 3275;
	        this.match(InceptorOracleParser.RPAREN);
	        this.state = 3276;
	        this.match(InceptorOracleParser.LPAREN);
	        this.state = 3277;
	        this.rangeRouteValues();
	        this.state = 3278;
	        this.match(InceptorOracleParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rangeRouteValues() {
	    let localctx = new RangeRouteValuesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 444, InceptorOracleParser.RULE_rangeRouteValues);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3280;
	        this.constant();
	        this.state = 3285;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===InceptorOracleParser.COMMA) {
	            this.state = 3281;
	            this.match(InceptorOracleParser.COMMA);
	            this.state = 3282;
	            this.constant();
	            this.state = 3287;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableHashRoute() {
	    let localctx = new TableHashRouteContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 446, InceptorOracleParser.RULE_tableHashRoute);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3288;
	        this.match(InceptorOracleParser.KW_HASH);
	        this.state = 3289;
	        this.match(InceptorOracleParser.LPAREN);
	        this.state = 3290;
	        localctx.hashRouteCol = this.columnName();
	        this.state = 3291;
	        this.match(InceptorOracleParser.RPAREN);
	        this.state = 3292;
	        this.match(InceptorOracleParser.KW_BUCKET);
	        this.state = 3293;
	        localctx.num = this.match(InceptorOracleParser.Number);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableBuckets() {
	    let localctx = new TableBucketsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 448, InceptorOracleParser.RULE_tableBuckets);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3295;
	        this.match(InceptorOracleParser.KW_CLUSTERED);
	        this.state = 3296;
	        this.match(InceptorOracleParser.KW_BY);
	        this.state = 3297;
	        this.match(InceptorOracleParser.LPAREN);
	        this.state = 3298;
	        localctx.bucketCols = this.columnNameList();
	        this.state = 3299;
	        this.match(InceptorOracleParser.RPAREN);
	        this.state = 3306;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_SORTED) {
	            this.state = 3300;
	            this.match(InceptorOracleParser.KW_SORTED);
	            this.state = 3301;
	            this.match(InceptorOracleParser.KW_BY);
	            this.state = 3302;
	            this.match(InceptorOracleParser.LPAREN);
	            this.state = 3303;
	            localctx.sortCols = this.columnNameOrderList();
	            this.state = 3304;
	            this.match(InceptorOracleParser.RPAREN);
	        }

	        this.state = 3308;
	        this.match(InceptorOracleParser.KW_INTO);
	        this.state = 3309;
	        localctx.num = this.match(InceptorOracleParser.Number);
	        this.state = 3310;
	        this.match(InceptorOracleParser.KW_BUCKETS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableSkewed() {
	    let localctx = new TableSkewedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 450, InceptorOracleParser.RULE_tableSkewed);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3312;
	        this.match(InceptorOracleParser.KW_SKEWED);
	        this.state = 3313;
	        this.match(InceptorOracleParser.KW_BY);
	        this.state = 3314;
	        this.match(InceptorOracleParser.LPAREN);
	        this.state = 3315;
	        localctx.skewedCols = this.columnNameList();
	        this.state = 3316;
	        this.match(InceptorOracleParser.RPAREN);
	        this.state = 3317;
	        this.match(InceptorOracleParser.KW_ON);
	        this.state = 3318;
	        this.match(InceptorOracleParser.LPAREN);

	        this.state = 3319;
	        localctx.skewedValues = this.skewedValueElement();
	        this.state = 3320;
	        this.match(InceptorOracleParser.RPAREN);
	        this.state = 3322;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,258,this._ctx);
	        if(la_===1) {
	            this.state = 3321;
	            this.storedAsDirs();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	skewedValueElement() {
	    let localctx = new SkewedValueElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 452, InceptorOracleParser.RULE_skewedValueElement);
	    try {
	        this.state = 3326;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case InceptorOracleParser.KW_TRUE:
	        case InceptorOracleParser.KW_FALSE:
	        case InceptorOracleParser.KW_DATE:
	        case InceptorOracleParser.KW_TIMESTAMP:
	        case InceptorOracleParser.KW_UNLIMITED:
	        case InceptorOracleParser.KW_INTERVAL:
	        case InceptorOracleParser.KW_SYSDATE:
	        case InceptorOracleParser.KW_SYSTIMESTAMP:
	        case InceptorOracleParser.KW_SYSTIME:
	        case InceptorOracleParser.KW_MAXVALUE:
	        case InceptorOracleParser.StringLiteral:
	        case InceptorOracleParser.CharSetLiteral:
	        case InceptorOracleParser.BigintLiteral:
	        case InceptorOracleParser.SmallintLiteral:
	        case InceptorOracleParser.TinyintLiteral:
	        case InceptorOracleParser.DecimalLiteral:
	        case InceptorOracleParser.Number:
	        case InceptorOracleParser.CharSetName:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3324;
	            this.skewedColumnValues();
	            break;
	        case InceptorOracleParser.LPAREN:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3325;
	            this.skewedColumnValuePairList();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	skewedColumnValuePairList() {
	    let localctx = new SkewedColumnValuePairListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 454, InceptorOracleParser.RULE_skewedColumnValuePairList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3328;
	        this.skewedColumnValuePair();
	        this.state = 3333;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===InceptorOracleParser.COMMA) {
	            this.state = 3329;
	            this.match(InceptorOracleParser.COMMA);
	            this.state = 3330;
	            this.skewedColumnValuePair();
	            this.state = 3335;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	skewedColumnValuePair() {
	    let localctx = new SkewedColumnValuePairContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 456, InceptorOracleParser.RULE_skewedColumnValuePair);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3336;
	        this.match(InceptorOracleParser.LPAREN);
	        this.state = 3337;
	        localctx.colValues = this.skewedColumnValues();
	        this.state = 3338;
	        this.match(InceptorOracleParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	skewedColumnValues() {
	    let localctx = new SkewedColumnValuesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 458, InceptorOracleParser.RULE_skewedColumnValues);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3340;
	        this.skewedColumnValue();
	        this.state = 3345;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===InceptorOracleParser.COMMA) {
	            this.state = 3341;
	            this.match(InceptorOracleParser.COMMA);
	            this.state = 3342;
	            this.skewedColumnValue();
	            this.state = 3347;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	skewedColumnValue() {
	    let localctx = new SkewedColumnValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 460, InceptorOracleParser.RULE_skewedColumnValue);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3348;
	        this.constant();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	skewedValueLocationElement() {
	    let localctx = new SkewedValueLocationElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 462, InceptorOracleParser.RULE_skewedValueLocationElement);
	    try {
	        this.state = 3352;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case InceptorOracleParser.KW_TRUE:
	        case InceptorOracleParser.KW_FALSE:
	        case InceptorOracleParser.KW_DATE:
	        case InceptorOracleParser.KW_TIMESTAMP:
	        case InceptorOracleParser.KW_UNLIMITED:
	        case InceptorOracleParser.KW_INTERVAL:
	        case InceptorOracleParser.KW_SYSDATE:
	        case InceptorOracleParser.KW_SYSTIMESTAMP:
	        case InceptorOracleParser.KW_SYSTIME:
	        case InceptorOracleParser.KW_MAXVALUE:
	        case InceptorOracleParser.StringLiteral:
	        case InceptorOracleParser.CharSetLiteral:
	        case InceptorOracleParser.BigintLiteral:
	        case InceptorOracleParser.SmallintLiteral:
	        case InceptorOracleParser.TinyintLiteral:
	        case InceptorOracleParser.DecimalLiteral:
	        case InceptorOracleParser.Number:
	        case InceptorOracleParser.CharSetName:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3350;
	            this.skewedColumnValue();
	            break;
	        case InceptorOracleParser.LPAREN:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3351;
	            this.skewedColumnValuePair();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tablePropertiesPrefixed() {
	    let localctx = new TablePropertiesPrefixedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 464, InceptorOracleParser.RULE_tablePropertiesPrefixed);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3354;
	        this.match(InceptorOracleParser.KW_TBLPROPERTIES);
	        this.state = 3355;
	        this.tableProperties();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	erroLogTableSpec() {
	    let localctx = new ErroLogTableSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 466, InceptorOracleParser.RULE_erroLogTableSpec);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3357;
	        this.match(InceptorOracleParser.KW_LOG);
	        this.state = 3358;
	        this.match(InceptorOracleParser.KW_ERRORS);
	        this.state = 3359;
	        this.match(InceptorOracleParser.KW_INTO);
	        this.state = 3360;
	        this.tableName();
	        this.state = 3362;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_OVERWRITE) {
	            this.state = 3361;
	            localctx.isoverwrite = this.match(InceptorOracleParser.KW_OVERWRITE);
	        }

	        this.state = 3365;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_SEGMENT) {
	            this.state = 3364;
	            this.errorRejectSpec();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	errorRejectSpec() {
	    let localctx = new ErrorRejectSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 468, InceptorOracleParser.RULE_errorRejectSpec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3367;
	        this.match(InceptorOracleParser.KW_SEGMENT);
	        this.state = 3368;
	        this.match(InceptorOracleParser.KW_REJECT);
	        this.state = 3369;
	        this.match(InceptorOracleParser.KW_LIMIT);
	        this.state = 3370;
	        this.match(InceptorOracleParser.Number);
	        this.state = 3373;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case InceptorOracleParser.KW_ROWS:
	            this.state = 3371;
	            localctx.ways = this.match(InceptorOracleParser.KW_ROWS);
	            break;
	        case InceptorOracleParser.KW_PERCENT:
	            this.state = 3372;
	            localctx.ways = this.match(InceptorOracleParser.KW_PERCENT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableProperties() {
	    let localctx = new TablePropertiesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 470, InceptorOracleParser.RULE_tableProperties);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3375;
	        this.match(InceptorOracleParser.LPAREN);
	        this.state = 3376;
	        this.tablePropertiesList();
	        this.state = 3377;
	        this.match(InceptorOracleParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tablePropertiesList() {
	    let localctx = new TablePropertiesListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 472, InceptorOracleParser.RULE_tablePropertiesList);
	    var _la = 0; // Token type
	    try {
	        this.state = 3395;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,268,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3379;
	            this.keyValueProperty();
	            this.state = 3384;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===InceptorOracleParser.COMMA) {
	                this.state = 3380;
	                this.match(InceptorOracleParser.COMMA);
	                this.state = 3381;
	                this.keyValueProperty();
	                this.state = 3386;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3387;
	            this.keyProperty();
	            this.state = 3392;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===InceptorOracleParser.COMMA) {
	                this.state = 3388;
	                this.match(InceptorOracleParser.COMMA);
	                this.state = 3389;
	                this.keyProperty();
	                this.state = 3394;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableRowFormatFieldIdentifier() {
	    let localctx = new TableRowFormatFieldIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 474, InceptorOracleParser.RULE_tableRowFormatFieldIdentifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3397;
	        this.match(InceptorOracleParser.KW_FIELDS);
	        this.state = 3398;
	        this.match(InceptorOracleParser.KW_TERMINATED);
	        this.state = 3399;
	        this.match(InceptorOracleParser.KW_BY);
	        this.state = 3400;
	        localctx.fldIdnt = this.match(InceptorOracleParser.StringLiteral);
	        this.state = 3404;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,269,this._ctx);
	        if(la_===1) {
	            this.state = 3401;
	            this.match(InceptorOracleParser.KW_ESCAPED);
	            this.state = 3402;
	            this.match(InceptorOracleParser.KW_BY);
	            this.state = 3403;
	            localctx.fldEscape = this.match(InceptorOracleParser.StringLiteral);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableRowFormatCollItemsIdentifier() {
	    let localctx = new TableRowFormatCollItemsIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 476, InceptorOracleParser.RULE_tableRowFormatCollItemsIdentifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3406;
	        this.match(InceptorOracleParser.KW_COLLECTION);
	        this.state = 3407;
	        this.match(InceptorOracleParser.KW_ITEMS);
	        this.state = 3408;
	        this.match(InceptorOracleParser.KW_TERMINATED);
	        this.state = 3409;
	        this.match(InceptorOracleParser.KW_BY);
	        this.state = 3410;
	        localctx.collIdnt = this.match(InceptorOracleParser.StringLiteral);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableRowFormatMapKeysIdentifier() {
	    let localctx = new TableRowFormatMapKeysIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 478, InceptorOracleParser.RULE_tableRowFormatMapKeysIdentifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3412;
	        this.match(InceptorOracleParser.KW_MAP);
	        this.state = 3413;
	        this.match(InceptorOracleParser.KW_KEYS);
	        this.state = 3414;
	        this.match(InceptorOracleParser.KW_TERMINATED);
	        this.state = 3415;
	        this.match(InceptorOracleParser.KW_BY);
	        this.state = 3416;
	        localctx.mapKeysIdnt = this.match(InceptorOracleParser.StringLiteral);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableRowFormatLinesIdentifier() {
	    let localctx = new TableRowFormatLinesIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 480, InceptorOracleParser.RULE_tableRowFormatLinesIdentifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3418;
	        this.match(InceptorOracleParser.KW_LINES);
	        this.state = 3419;
	        this.match(InceptorOracleParser.KW_TERMINATED);
	        this.state = 3420;
	        this.match(InceptorOracleParser.KW_BY);
	        this.state = 3421;
	        localctx.linesIdnt = this.match(InceptorOracleParser.StringLiteral);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	esProps() {
	    let localctx = new EsPropsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 482, InceptorOracleParser.RULE_esProps);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3423;
	        this.match(InceptorOracleParser.KW_WITH);
	        this.state = 3424;
	        this.match(InceptorOracleParser.KW_SHARD);
	        this.state = 3425;
	        this.match(InceptorOracleParser.KW_NUMBER);
	        this.state = 3426;
	        localctx.shard = this.match(InceptorOracleParser.Number);
	        this.state = 3427;
	        this.match(InceptorOracleParser.KW_REPLICATION);
	        this.state = 3428;
	        localctx.replica = this.match(InceptorOracleParser.Number);
	        this.state = 3434;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_ENABLE || _la===InceptorOracleParser.KW_DISABLE) {
	            this.state = 3431;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case InceptorOracleParser.KW_DISABLE:
	                this.state = 3429;
	                this.match(InceptorOracleParser.KW_DISABLE);
	                break;
	            case InceptorOracleParser.KW_ENABLE:
	                this.state = 3430;
	                localctx.p = this.match(InceptorOracleParser.KW_ENABLE);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 3433;
	            this.match(InceptorOracleParser.KW_ALL);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	holoProps() {
	    let localctx = new HoloPropsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 484, InceptorOracleParser.RULE_holoProps);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3436;
	        this.match(InceptorOracleParser.KW_WITH);
	        this.state = 3437;
	        this.match(InceptorOracleParser.KW_TABLET);
	        this.state = 3438;
	        this.match(InceptorOracleParser.KW_NUMBER);
	        this.state = 3439;
	        localctx.tablet = this.match(InceptorOracleParser.Number);
	        this.state = 3440;
	        this.match(InceptorOracleParser.KW_CAPACITY);
	        this.state = 3441;
	        this.match(InceptorOracleParser.KW_NUMBER);
	        this.state = 3442;
	        localctx.capacity = this.match(InceptorOracleParser.Number);
	        this.state = 3443;
	        this.match(InceptorOracleParser.KW_REPLICATION);
	        this.state = 3444;
	        localctx.replica = this.match(InceptorOracleParser.Number);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	holoTableSize() {
	    let localctx = new HoloTableSizeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 486, InceptorOracleParser.RULE_holoTableSize);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3446;
	        this.match(InceptorOracleParser.KW_WITH);
	        this.state = 3447;
	        this.match(InceptorOracleParser.KW_TABLESIZE);
	        this.state = 3448;
	        localctx.value = this.identifier();
	        this.state = 3451;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_REPLICATION) {
	            this.state = 3449;
	            this.match(InceptorOracleParser.KW_REPLICATION);
	            this.state = 3450;
	            localctx.replica = this.match(InceptorOracleParser.Number);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableFileFormat() {
	    let localctx = new TableFileFormatContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 488, InceptorOracleParser.RULE_tableFileFormat);
	    var _la = 0; // Token type
	    try {
	        this.state = 3519;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,276,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3453;
	            this.match(InceptorOracleParser.KW_STORED);
	            this.state = 3454;
	            this.match(InceptorOracleParser.KW_AS);
	            this.state = 3455;
	            this.match(InceptorOracleParser.KW_SEQUENCEFILE);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3456;
	            this.match(InceptorOracleParser.KW_STORED);
	            this.state = 3457;
	            this.match(InceptorOracleParser.KW_AS);
	            this.state = 3458;
	            this.match(InceptorOracleParser.KW_TEXTFILE);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3459;
	            this.match(InceptorOracleParser.KW_STORED);
	            this.state = 3460;
	            this.match(InceptorOracleParser.KW_AS);
	            this.state = 3461;
	            this.match(InceptorOracleParser.KW_CSVFILE);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3462;
	            this.match(InceptorOracleParser.KW_STORED);
	            this.state = 3463;
	            this.match(InceptorOracleParser.KW_AS);
	            this.state = 3464;
	            this.match(InceptorOracleParser.KW_FWCFILE);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3465;
	            this.match(InceptorOracleParser.KW_STORED);
	            this.state = 3466;
	            this.match(InceptorOracleParser.KW_AS);
	            this.state = 3467;
	            this.match(InceptorOracleParser.KW_RCFILE);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 3468;
	            this.match(InceptorOracleParser.KW_STORED);
	            this.state = 3469;
	            this.match(InceptorOracleParser.KW_AS);
	            this.state = 3470;
	            this.match(InceptorOracleParser.KW_ORCFILE);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 3471;
	            this.stargateIdentifier();
	            this.state = 3476;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,273,this._ctx);
	            if(la_===1) {
	                this.state = 3472;
	                this.match(InceptorOracleParser.LPAREN);
	                this.state = 3473;
	                this.storeArgs();
	                this.state = 3474;
	                this.match(InceptorOracleParser.RPAREN);

	            }
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 3478;
	            this.match(InceptorOracleParser.KW_STORED);
	            this.state = 3479;
	            this.match(InceptorOracleParser.KW_AS);
	            this.state = 3480;
	            this.match(InceptorOracleParser.KW_HOLODESK);
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 3481;
	            this.match(InceptorOracleParser.KW_STORED);
	            this.state = 3482;
	            this.match(InceptorOracleParser.KW_AS);
	            this.state = 3483;
	            this.match(InceptorOracleParser.KW_STELLARDB);
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 3484;
	            this.match(InceptorOracleParser.KW_STORED);
	            this.state = 3485;
	            this.match(InceptorOracleParser.KW_AS);
	            this.state = 3486;
	            this.match(InceptorOracleParser.KW_ORCTRANSACTIONFILE);
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 3487;
	            this.match(InceptorOracleParser.KW_STORED);
	            this.state = 3488;
	            this.match(InceptorOracleParser.KW_AS);
	            this.state = 3489;
	            this.match(InceptorOracleParser.KW_PARQUET);
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 3490;
	            this.match(InceptorOracleParser.KW_STORED);
	            this.state = 3491;
	            this.match(InceptorOracleParser.KW_AS);
	            this.state = 3492;
	            this.match(InceptorOracleParser.KW_HYPERDRIVE);
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 3493;
	            this.match(InceptorOracleParser.KW_STORED);
	            this.state = 3494;
	            this.match(InceptorOracleParser.KW_AS);
	            this.state = 3495;
	            this.match(InceptorOracleParser.KW_ESDRIVE);
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 3496;
	            this.match(InceptorOracleParser.KW_STORED);
	            this.state = 3497;
	            this.match(InceptorOracleParser.KW_AS);
	            this.state = 3498;
	            this.match(InceptorOracleParser.KW_INPUTFORMAT);
	            this.state = 3499;
	            localctx.inFmt = this.match(InceptorOracleParser.StringLiteral);
	            this.state = 3500;
	            this.match(InceptorOracleParser.KW_OUTPUTFORMAT);
	            this.state = 3501;
	            localctx.outFmt = this.match(InceptorOracleParser.StringLiteral);
	            this.state = 3506;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_INPUTDRIVER) {
	                this.state = 3502;
	                this.match(InceptorOracleParser.KW_INPUTDRIVER);
	                this.state = 3503;
	                localctx.inDriver = this.match(InceptorOracleParser.StringLiteral);
	                this.state = 3504;
	                this.match(InceptorOracleParser.KW_OUTPUTDRIVER);
	                this.state = 3505;
	                localctx.outDriver = this.match(InceptorOracleParser.StringLiteral);
	            }

	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 3508;
	            this.match(InceptorOracleParser.KW_STORED);
	            this.state = 3509;
	            this.match(InceptorOracleParser.KW_BY);
	            this.state = 3510;
	            localctx.storageHandler = this.match(InceptorOracleParser.StringLiteral);
	            this.state = 3514;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,275,this._ctx);
	            if(la_===1) {
	                this.state = 3511;
	                this.match(InceptorOracleParser.KW_WITH);
	                this.state = 3512;
	                this.match(InceptorOracleParser.KW_SERDEPROPERTIES);
	                this.state = 3513;
	                localctx.serdeprops = this.tableProperties();

	            }
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 3516;
	            this.match(InceptorOracleParser.KW_STORED);
	            this.state = 3517;
	            this.match(InceptorOracleParser.KW_AS);
	            this.state = 3518;
	            localctx.genericSpec = this.identifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stargateIdentifier() {
	    let localctx = new StargateIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 490, InceptorOracleParser.RULE_stargateIdentifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3521;
	        this.match(InceptorOracleParser.KW_STORED);
	        this.state = 3522;
	        this.match(InceptorOracleParser.KW_AS);
	        this.state = 3523;
	        this.match(InceptorOracleParser.KW_STARGATE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	storeArgs() {
	    let localctx = new StoreArgsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 492, InceptorOracleParser.RULE_storeArgs);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3525;
	        this.storeArgName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	storeArgName() {
	    let localctx = new StoreArgNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 494, InceptorOracleParser.RULE_storeArgName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3527;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableLocation() {
	    let localctx = new TableLocationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 496, InceptorOracleParser.RULE_tableLocation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3529;
	        this.match(InceptorOracleParser.KW_LOCATION);
	        this.state = 3530;
	        localctx.locn = this.match(InceptorOracleParser.StringLiteral);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	restrictOrCascade() {
	    let localctx = new RestrictOrCascadeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 498, InceptorOracleParser.RULE_restrictOrCascade);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3532;
	        _la = this._input.LA(1);
	        if(!(_la===InceptorOracleParser.KW_RESTRICT || _la===InceptorOracleParser.KW_CASCADE)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	databaseComment() {
	    let localctx = new DatabaseCommentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 500, InceptorOracleParser.RULE_databaseComment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3534;
	        this.match(InceptorOracleParser.KW_COMMENT);
	        this.state = 3535;
	        localctx.comment = this.match(InceptorOracleParser.StringLiteral);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dbLocation() {
	    let localctx = new DbLocationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 502, InceptorOracleParser.RULE_dbLocation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3537;
	        this.match(InceptorOracleParser.KW_LOCATION);
	        this.state = 3538;
	        localctx.locn = this.match(InceptorOracleParser.StringLiteral);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dbProperties() {
	    let localctx = new DbPropertiesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 504, InceptorOracleParser.RULE_dbProperties);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3540;
	        this.match(InceptorOracleParser.LPAREN);
	        this.state = 3541;
	        this.dbPropertiesList();
	        this.state = 3542;
	        this.match(InceptorOracleParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dbPropertiesList() {
	    let localctx = new DbPropertiesListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 506, InceptorOracleParser.RULE_dbPropertiesList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3544;
	        this.keyValueProperty();
	        this.state = 3549;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===InceptorOracleParser.COMMA) {
	            this.state = 3545;
	            this.match(InceptorOracleParser.COMMA);
	            this.state = 3546;
	            this.keyValueProperty();
	            this.state = 3551;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifExists() {
	    let localctx = new IfExistsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 508, InceptorOracleParser.RULE_ifExists);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3552;
	        this.match(InceptorOracleParser.KW_IF);
	        this.state = 3553;
	        this.match(InceptorOracleParser.KW_EXISTS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifNotExists() {
	    let localctx = new IfNotExistsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 510, InceptorOracleParser.RULE_ifNotExists);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3555;
	        this.match(InceptorOracleParser.KW_IF);
	        this.state = 3556;
	        this.match(InceptorOracleParser.KW_NOT);
	        this.state = 3557;
	        this.match(InceptorOracleParser.KW_EXISTS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createSequenceStatement() {
	    let localctx = new CreateSequenceStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 512, InceptorOracleParser.RULE_createSequenceStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3559;
	        this.match(InceptorOracleParser.KW_CREATE);
	        this.state = 3560;
	        this.match(InceptorOracleParser.KW_SEQUENCE);
	        this.state = 3561;
	        localctx.name = this.sequenceName();
	        this.state = 3565;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===InceptorOracleParser.KW_ORDER || _la===InceptorOracleParser.KW_INCREMENT || _la===InceptorOracleParser.KW_NOCYCLE || ((((_la - 396)) & ~0x1f) == 0 && ((1 << (_la - 396)) & ((1 << (InceptorOracleParser.KW_MAXVALUE - 396)) | (1 << (InceptorOracleParser.KW_NOMAXVALUE - 396)) | (1 << (InceptorOracleParser.KW_MINVALUE - 396)) | (1 << (InceptorOracleParser.KW_NOMINVALUE - 396)) | (1 << (InceptorOracleParser.KW_CYCLE - 396)) | (1 << (InceptorOracleParser.KW_CACHE - 396)) | (1 << (InceptorOracleParser.KW_NOCACHE - 396)) | (1 << (InceptorOracleParser.KW_NOORDER - 396)) | (1 << (InceptorOracleParser.KW_START - 396)))) !== 0)) {
	            this.state = 3562;
	            this.sequenceOption();
	            this.state = 3567;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropSequenceStatement() {
	    let localctx = new DropSequenceStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 514, InceptorOracleParser.RULE_dropSequenceStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3568;
	        this.match(InceptorOracleParser.KW_DROP);
	        this.state = 3569;
	        this.match(InceptorOracleParser.KW_SEQUENCE);
	        this.state = 3571;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_IF) {
	            this.state = 3570;
	            this.ifExists();
	        }

	        this.state = 3573;
	        this.sequenceName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ddlBStatement() {
	    let localctx = new DdlBStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 516, InceptorOracleParser.RULE_ddlBStatement);
	    try {
	        this.state = 3616;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,280,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3575;
	            this.descStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3576;
	            this.showStatement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3577;
	            this.metastoreCheck();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3578;
	            this.dropViewStatement();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3579;
	            this.dropMaterializedViewStatement();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 3580;
	            this.createMacroStatement();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 3581;
	            this.createIndexStatement();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 3582;
	            this.createHyperbaseIndexStatement();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 3583;
	            this.rebuildHolodeskGlobalIndexStatement();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 3584;
	            this.dropIndexStatement();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 3585;
	            this.dropFunctionStatement();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 3586;
	            this.reloadFunctionStatement();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 3587;
	            this.dropMacroStatement();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 3588;
	            this.analyzeStatement();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 3589;
	            this.lockStatement();
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 3590;
	            this.unlockStatement();
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 3591;
	            this.lockDatabase();
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 3592;
	            this.unlockDatabase();
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 3593;
	            this.createRoleStatement();
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 3594;
	            this.dropRoleStatement();
	            break;

	        case 21:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 3595;
	            this.grantPrivileges();
	            break;

	        case 22:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 3596;
	            this.revokePrivileges();
	            break;

	        case 23:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 3597;
	            this.showQuota();
	            break;

	        case 24:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 3598;
	            this.showGrants();
	            break;

	        case 25:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 3599;
	            this.showFacl();
	            break;

	        case 26:
	            this.enterOuterAlt(localctx, 26);
	            this.state = 3600;
	            this.showRoleGrants();
	            break;

	        case 27:
	            this.enterOuterAlt(localctx, 27);
	            this.state = 3601;
	            this.showRolePrincipals();
	            break;

	        case 28:
	            this.enterOuterAlt(localctx, 28);
	            this.state = 3602;
	            this.showRoles();
	            break;

	        case 29:
	            this.enterOuterAlt(localctx, 29);
	            this.state = 3603;
	            this.showBlacklist();
	            break;

	        case 30:
	            this.enterOuterAlt(localctx, 30);
	            this.state = 3604;
	            this.showSchedulerMode();
	            break;

	        case 31:
	            this.enterOuterAlt(localctx, 31);
	            this.state = 3605;
	            this.grantQuota();
	            break;

	        case 32:
	            this.enterOuterAlt(localctx, 32);
	            this.state = 3606;
	            this.revokeQuota();
	            break;

	        case 33:
	            this.enterOuterAlt(localctx, 33);
	            this.state = 3607;
	            this.grantFacl();
	            break;

	        case 34:
	            this.enterOuterAlt(localctx, 34);
	            this.state = 3608;
	            this.revokeFacl();
	            break;

	        case 35:
	            this.enterOuterAlt(localctx, 35);
	            this.state = 3609;
	            this.grantRole();
	            break;

	        case 36:
	            this.enterOuterAlt(localctx, 36);
	            this.state = 3610;
	            this.revokeRole();
	            break;

	        case 37:
	            this.enterOuterAlt(localctx, 37);
	            this.state = 3611;
	            this.setRole();
	            break;

	        case 38:
	            this.enterOuterAlt(localctx, 38);
	            this.state = 3612;
	            this.showCurrentRole();
	            break;

	        case 39:
	            this.enterOuterAlt(localctx, 39);
	            this.state = 3613;
	            this.syncIndex();
	            break;

	        case 40:
	            this.enterOuterAlt(localctx, 40);
	            this.state = 3614;
	            this.syncRule();
	            break;

	        case 41:
	            this.enterOuterAlt(localctx, 41);
	            this.state = 3615;
	            this.syncPolicy();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	descStatement() {
	    let localctx = new DescStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 518, InceptorOracleParser.RULE_descStatement);
	    var _la = 0; // Token type
	    try {
	        this.state = 3682;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,287,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3618;
	            _la = this._input.LA(1);
	            if(!(_la===InceptorOracleParser.KW_DESC || _la===InceptorOracleParser.KW_DESCRIBE)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 3619;
	            this.match(InceptorOracleParser.KW_INDEX);
	            this.state = 3621;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,281,this._ctx);
	            if(la_===1) {
	                this.state = 3620;
	                localctx.descOptions = this.match(InceptorOracleParser.KW_FORMATTED);

	            }

	            this.state = 3623;
	            localctx.indexName = this.identifier();
	            this.state = 3624;
	            this.match(InceptorOracleParser.KW_ON);
	            this.state = 3625;
	            this.tableName();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3627;
	            _la = this._input.LA(1);
	            if(!(_la===InceptorOracleParser.KW_DESC || _la===InceptorOracleParser.KW_DESCRIBE)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 3628;
	            _la = this._input.LA(1);
	            if(!(_la===InceptorOracleParser.KW_APPLICATION || _la===InceptorOracleParser.KW_APP)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 3629;
	            localctx.appName = this.identifier();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3630;
	            _la = this._input.LA(1);
	            if(!(_la===InceptorOracleParser.KW_DESC || _la===InceptorOracleParser.KW_DESCRIBE)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 3631;
	            this.match(InceptorOracleParser.KW_STREAMJOB);
	            this.state = 3632;
	            localctx.jobName = this.identifier();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3633;
	            _la = this._input.LA(1);
	            if(!(_la===InceptorOracleParser.KW_DESC || _la===InceptorOracleParser.KW_DESCRIBE)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 3634;
	            this.match(InceptorOracleParser.KW_RULE);
	            this.state = 3635;
	            localctx.ruleName = this.identifier();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3636;
	            _la = this._input.LA(1);
	            if(!(_la===InceptorOracleParser.KW_DESC || _la===InceptorOracleParser.KW_DESCRIBE)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 3637;
	            this.match(InceptorOracleParser.KW_POLICY);
	            this.state = 3638;
	            localctx.policyName = this.identifier();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 3639;
	            _la = this._input.LA(1);
	            if(!(_la===InceptorOracleParser.KW_DESC || _la===InceptorOracleParser.KW_DESCRIBE)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 3640;
	            this.match(InceptorOracleParser.KW_RULE_FUNCTION);
	            this.state = 3641;
	            localctx.rulefunction = this.identifier();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 3642;
	            _la = this._input.LA(1);
	            if(!(_la===InceptorOracleParser.KW_DESC || _la===InceptorOracleParser.KW_DESCRIBE)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 3643;
	            this.match(InceptorOracleParser.KW_CACHEDMETRIC);
	            this.state = 3644;
	            localctx.cachedMetric = this.identifier();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 3645;
	            _la = this._input.LA(1);
	            if(!(_la===InceptorOracleParser.KW_DESC || _la===InceptorOracleParser.KW_DESCRIBE)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 3649;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,282,this._ctx);
	            if(la_===1) {
	                this.state = 3646;
	                localctx.descOptions = this.match(InceptorOracleParser.KW_EXTENDED);

	            } else if(la_===2) {
	                this.state = 3647;
	                localctx.descOptions = this.match(InceptorOracleParser.KW_FORMATTED);

	            } else if(la_===3) {
	                this.state = 3648;
	                localctx.descOptions = this.match(InceptorOracleParser.KW_PRETTY);

	            }

	            this.state = 3651;
	            localctx.parttype = this.descPartTypeExpr();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 3652;
	            _la = this._input.LA(1);
	            if(!(_la===InceptorOracleParser.KW_DESC || _la===InceptorOracleParser.KW_DESCRIBE)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 3653;
	            this.match(InceptorOracleParser.KW_FUNCTION);
	            this.state = 3655;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_EXTENDED) {
	                this.state = 3654;
	                this.match(InceptorOracleParser.KW_EXTENDED);
	            }

	            this.state = 3657;
	            localctx.name = this.descFuncNames();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 3658;
	            _la = this._input.LA(1);
	            if(!(_la===InceptorOracleParser.KW_DESC || _la===InceptorOracleParser.KW_DESCRIBE)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 3659;
	            this.match(InceptorOracleParser.KW_PLSQL);
	            this.state = 3660;
	            this.match(InceptorOracleParser.KW_FUNCTION);
	            this.state = 3662;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_EXTENDED) {
	                this.state = 3661;
	                this.match(InceptorOracleParser.KW_EXTENDED);
	            }

	            this.state = 3664;
	            localctx.plname = this.plFuncProcName();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 3665;
	            _la = this._input.LA(1);
	            if(!(_la===InceptorOracleParser.KW_DESC || _la===InceptorOracleParser.KW_DESCRIBE)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 3666;
	            this.match(InceptorOracleParser.KW_PLSQL);
	            this.state = 3667;
	            this.match(InceptorOracleParser.KW_PACKAGE);
	            this.state = 3669;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_EXTENDED) {
	                this.state = 3668;
	                this.match(InceptorOracleParser.KW_EXTENDED);
	            }

	            this.state = 3671;
	            localctx.plname = this.plFuncProcName();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 3672;
	            _la = this._input.LA(1);
	            if(!(_la===InceptorOracleParser.KW_DESC || _la===InceptorOracleParser.KW_DESCRIBE)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 3673;
	            this.match(InceptorOracleParser.KW_DATABASE);
	            this.state = 3675;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_EXTENDED) {
	                this.state = 3674;
	                this.match(InceptorOracleParser.KW_EXTENDED);
	            }

	            this.state = 3677;
	            localctx.dbName = this.identifier();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 3678;
	            _la = this._input.LA(1);
	            if(!(_la===InceptorOracleParser.KW_DESC || _la===InceptorOracleParser.KW_DESCRIBE)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 3679;
	            this.match(InceptorOracleParser.KW_DATABASE);
	            this.state = 3680;
	            this.match(InceptorOracleParser.KW_LINK);
	            this.state = 3681;
	            this.dblink();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showStatement() {
	    let localctx = new ShowStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 520, InceptorOracleParser.RULE_showStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3684;
	        this.match(InceptorOracleParser.KW_SHOW);
	        this.state = 3688;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case InceptorOracleParser.KW_STREAMJOBS:
	        case InceptorOracleParser.KW_TABLES:
	        case InceptorOracleParser.KW_SEQUENCES:
	        case InceptorOracleParser.KW_COLUMNS:
	        case InceptorOracleParser.KW_STREAMS:
	        case InceptorOracleParser.KW_METRICS:
	        case InceptorOracleParser.KW_RULEBASES:
	        case InceptorOracleParser.KW_RULES:
	        case InceptorOracleParser.KW_POLICIES:
	        case InceptorOracleParser.KW_RULE_FUNCTIONS:
	        case InceptorOracleParser.KW_DATABASES:
	        case InceptorOracleParser.KW_MATERIALIZED:
	        case InceptorOracleParser.KW_SCHEMAS:
	        case InceptorOracleParser.KW_CURRENT:
	        case InceptorOracleParser.KW_CACHEDMETRICS:
	        case InceptorOracleParser.KW_APPLICATIONS:
	        case InceptorOracleParser.KW_APPS:
	        case InceptorOracleParser.KW_POLICYBASES:
	            this.state = 3685;
	            this.showStatementPartA();
	            break;
	        case InceptorOracleParser.KW_PARTITIONS:
	        case InceptorOracleParser.KW_TABLE:
	        case InceptorOracleParser.KW_FUNCTIONS:
	        case InceptorOracleParser.KW_PLSQL:
	        case InceptorOracleParser.KW_CREATE:
	            this.state = 3686;
	            this.showStatementPartB();
	            break;
	        case InceptorOracleParser.KW_INDEX:
	        case InceptorOracleParser.KW_INDEXES:
	        case InceptorOracleParser.KW_FORMATTED:
	        case InceptorOracleParser.KW_TBLPROPERTIES:
	        case InceptorOracleParser.KW_DATABASE:
	        case InceptorOracleParser.KW_LOCKS:
	        case InceptorOracleParser.KW_COMPACT:
	        case InceptorOracleParser.KW_COMPACTIONS:
	        case InceptorOracleParser.KW_CONF:
	        case InceptorOracleParser.KW_TRANSACTIONS:
	            this.state = 3687;
	            this.showStatementPartC();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showStatementPartA() {
	    let localctx = new ShowStatementPartAContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 522, InceptorOracleParser.RULE_showStatementPartA);
	    var _la = 0; // Token type
	    try {
	        this.state = 3799;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,309,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3690;
	            _la = this._input.LA(1);
	            if(!(_la===InceptorOracleParser.KW_DATABASES || _la===InceptorOracleParser.KW_SCHEMAS)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 3693;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_LIKE) {
	                this.state = 3691;
	                this.match(InceptorOracleParser.KW_LIKE);
	                this.state = 3692;
	                this.showStmtIdentifier();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3695;
	            this.match(InceptorOracleParser.KW_TABLES);
	            this.state = 3698;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,290,this._ctx);
	            if(la_===1) {
	                this.state = 3696;
	                _la = this._input.LA(1);
	                if(!(_la===InceptorOracleParser.KW_FROM || _la===InceptorOracleParser.KW_IN)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 3697;
	                localctx.db_name = this.identifier();

	            }
	            this.state = 3703;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,291,this._ctx);
	            if(la_===1) {
	                this.state = 3700;
	                this.match(InceptorOracleParser.KW_LIKE);
	                this.state = 3701;
	                this.showStmtIdentifier();

	            } else if(la_===2) {
	                this.state = 3702;
	                this.showStmtIdentifier();

	            }
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3705;
	            this.match(InceptorOracleParser.KW_MATERIALIZED);
	            this.state = 3706;
	            this.match(InceptorOracleParser.KW_VIEWS);
	            this.state = 3709;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,292,this._ctx);
	            if(la_===1) {
	                this.state = 3707;
	                _la = this._input.LA(1);
	                if(!(_la===InceptorOracleParser.KW_FROM || _la===InceptorOracleParser.KW_IN)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 3708;
	                localctx.db_name = this.identifier();

	            }
	            this.state = 3714;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,293,this._ctx);
	            if(la_===1) {
	                this.state = 3711;
	                this.match(InceptorOracleParser.KW_LIKE);
	                this.state = 3712;
	                this.showStmtIdentifier();

	            } else if(la_===2) {
	                this.state = 3713;
	                this.showStmtIdentifier();

	            }
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3716;
	            this.match(InceptorOracleParser.KW_SEQUENCES);
	            this.state = 3719;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,294,this._ctx);
	            if(la_===1) {
	                this.state = 3717;
	                _la = this._input.LA(1);
	                if(!(_la===InceptorOracleParser.KW_FROM || _la===InceptorOracleParser.KW_IN)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 3718;
	                localctx.db_name = this.identifier();

	            }
	            this.state = 3724;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,295,this._ctx);
	            if(la_===1) {
	                this.state = 3721;
	                this.match(InceptorOracleParser.KW_LIKE);
	                this.state = 3722;
	                this.showStmtIdentifier();

	            } else if(la_===2) {
	                this.state = 3723;
	                this.showStmtIdentifier();

	            }
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3726;
	            this.match(InceptorOracleParser.KW_STREAMS);
	            this.state = 3729;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,296,this._ctx);
	            if(la_===1) {
	                this.state = 3727;
	                _la = this._input.LA(1);
	                if(!(_la===InceptorOracleParser.KW_FROM || _la===InceptorOracleParser.KW_IN)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 3728;
	                localctx.db_name = this.identifier();

	            }
	            this.state = 3734;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,297,this._ctx);
	            if(la_===1) {
	                this.state = 3731;
	                this.match(InceptorOracleParser.KW_LIKE);
	                this.state = 3732;
	                this.showStmtIdentifier();

	            } else if(la_===2) {
	                this.state = 3733;
	                this.showStmtIdentifier();

	            }
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 3736;
	            this.match(InceptorOracleParser.KW_METRICS);
	            this.state = 3739;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,298,this._ctx);
	            if(la_===1) {
	                this.state = 3737;
	                _la = this._input.LA(1);
	                if(!(_la===InceptorOracleParser.KW_FROM || _la===InceptorOracleParser.KW_IN)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 3738;
	                localctx.db_name = this.identifier();

	            }
	            this.state = 3744;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,299,this._ctx);
	            if(la_===1) {
	                this.state = 3741;
	                this.match(InceptorOracleParser.KW_LIKE);
	                this.state = 3742;
	                this.showStmtIdentifier();

	            } else if(la_===2) {
	                this.state = 3743;
	                this.showStmtIdentifier();

	            }
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 3746;
	            _la = this._input.LA(1);
	            if(!(_la===InceptorOracleParser.KW_APPLICATIONS || _la===InceptorOracleParser.KW_APPS)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 3749;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_LIKE) {
	                this.state = 3747;
	                this.match(InceptorOracleParser.KW_LIKE);
	                this.state = 3748;
	                this.showStmtIdentifier();
	            }

	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 3751;
	            this.match(InceptorOracleParser.KW_CURRENT);
	            this.state = 3752;
	            _la = this._input.LA(1);
	            if(!(_la===InceptorOracleParser.KW_APPLICATION || _la===InceptorOracleParser.KW_APP)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 3753;
	            this.match(InceptorOracleParser.KW_CURRENT);

	            this.state = 3754;
	            this.match(InceptorOracleParser.KW_POLICY);
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 3755;
	            this.match(InceptorOracleParser.KW_CURRENT);

	            this.state = 3756;
	            this.match(InceptorOracleParser.KW_RULEBASE);
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 3757;
	            this.match(InceptorOracleParser.KW_STREAMJOBS);
	            this.state = 3760;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_LIKE) {
	                this.state = 3758;
	                this.match(InceptorOracleParser.KW_LIKE);
	                this.state = 3759;
	                this.showStmtIdentifier();
	            }

	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 3762;
	            this.match(InceptorOracleParser.KW_RULES);
	            this.state = 3765;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_LIKE) {
	                this.state = 3763;
	                this.match(InceptorOracleParser.KW_LIKE);
	                this.state = 3764;
	                this.showStmtIdentifier();
	            }

	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 3767;
	            this.match(InceptorOracleParser.KW_RULEBASES);
	            this.state = 3770;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_LIKE) {
	                this.state = 3768;
	                this.match(InceptorOracleParser.KW_LIKE);
	                this.state = 3769;
	                this.showStmtIdentifier();
	            }

	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 3772;
	            this.match(InceptorOracleParser.KW_POLICIES);
	            this.state = 3775;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_LIKE) {
	                this.state = 3773;
	                this.match(InceptorOracleParser.KW_LIKE);
	                this.state = 3774;
	                this.showStmtIdentifier();
	            }

	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 3777;
	            this.match(InceptorOracleParser.KW_POLICYBASES);
	            this.state = 3780;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_LIKE) {
	                this.state = 3778;
	                this.match(InceptorOracleParser.KW_LIKE);
	                this.state = 3779;
	                this.showStmtIdentifier();
	            }

	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 3782;
	            this.match(InceptorOracleParser.KW_RULE_FUNCTIONS);
	            this.state = 3785;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_LIKE) {
	                this.state = 3783;
	                this.match(InceptorOracleParser.KW_LIKE);
	                this.state = 3784;
	                this.showStmtIdentifier();
	            }

	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 3787;
	            this.match(InceptorOracleParser.KW_CACHEDMETRICS);
	            this.state = 3790;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_LIKE) {
	                this.state = 3788;
	                this.match(InceptorOracleParser.KW_LIKE);
	                this.state = 3789;
	                this.showStmtIdentifier();
	            }

	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 3792;
	            this.match(InceptorOracleParser.KW_COLUMNS);
	            this.state = 3793;
	            _la = this._input.LA(1);
	            if(!(_la===InceptorOracleParser.KW_FROM || _la===InceptorOracleParser.KW_IN)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 3794;
	            localctx.tabname = this.tableName();
	            this.state = 3797;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_FROM || _la===InceptorOracleParser.KW_IN) {
	                this.state = 3795;
	                _la = this._input.LA(1);
	                if(!(_la===InceptorOracleParser.KW_FROM || _la===InceptorOracleParser.KW_IN)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 3796;
	                localctx.db_name = this.identifier();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showStatementPartB() {
	    let localctx = new ShowStatementPartBContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 524, InceptorOracleParser.RULE_showStatementPartB);
	    var _la = 0; // Token type
	    try {
	        this.state = 3834;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,316,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3801;
	            this.match(InceptorOracleParser.KW_FUNCTIONS);
	            this.state = 3803;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << InceptorOracleParser.KW_TRUE) | (1 << InceptorOracleParser.KW_FALSE) | (1 << InceptorOracleParser.KW_ALL) | (1 << InceptorOracleParser.KW_LIKE) | (1 << InceptorOracleParser.KW_NO) | (1 << InceptorOracleParser.KW_ANY) | (1 << InceptorOracleParser.KW_EXISTS) | (1 << InceptorOracleParser.KW_ASC) | (1 << InceptorOracleParser.KW_DESC) | (1 << InceptorOracleParser.KW_ORDER) | (1 << InceptorOracleParser.KW_GROUP) | (1 << InceptorOracleParser.KW_INCREMENT) | (1 << InceptorOracleParser.KW_BY) | (1 << InceptorOracleParser.KW_HASH) | (1 << InceptorOracleParser.KW_INSERT) | (1 << InceptorOracleParser.KW_OVERWRITE) | (1 << InceptorOracleParser.KW_OUTER))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (InceptorOracleParser.KW_STREAMJOB - 33)) | (1 << (InceptorOracleParser.KW_STREAMJOBS - 33)) | (1 << (InceptorOracleParser.KW_AT - 33)) | (1 << (InceptorOracleParser.KW_LEFT - 33)) | (1 << (InceptorOracleParser.KW_RIGHT - 33)) | (1 << (InceptorOracleParser.KW_FULL - 33)) | (1 << (InceptorOracleParser.KW_PARTITION - 33)) | (1 << (InceptorOracleParser.KW_PARTITIONS - 33)) | (1 << (InceptorOracleParser.KW_PATTERN - 33)) | (1 << (InceptorOracleParser.KW_TABLE - 33)) | (1 << (InceptorOracleParser.KW_TABLES - 33)) | (1 << (InceptorOracleParser.KW_SEQUENCE - 33)) | (1 << (InceptorOracleParser.KW_SEQUENCES - 33)) | (1 << (InceptorOracleParser.KW_COLUMNS - 33)) | (1 << (InceptorOracleParser.KW_INDEX - 33)) | (1 << (InceptorOracleParser.KW_INDEXES - 33)) | (1 << (InceptorOracleParser.KW_REBUILD - 33)) | (1 << (InceptorOracleParser.KW_FUNCTIONS - 33)) | (1 << (InceptorOracleParser.KW_SHOW - 33)) | (1 << (InceptorOracleParser.KW_MSCK - 33)) | (1 << (InceptorOracleParser.KW_REPAIR - 33)) | (1 << (InceptorOracleParser.KW_DIRECTORY - 33)) | (1 << (InceptorOracleParser.KW_LOCAL - 33)) | (1 << (InceptorOracleParser.KW_GLOBAL - 33)) | (1 << (InceptorOracleParser.KW_USING - 33)) | (1 << (InceptorOracleParser.KW_CLUSTER - 33)) | (1 << (InceptorOracleParser.KW_DISTRIBUTE - 33)) | (1 << (InceptorOracleParser.KW_SORT - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (InceptorOracleParser.KW_UNION - 65)) | (1 << (InceptorOracleParser.KW_LOAD - 65)) | (1 << (InceptorOracleParser.KW_EXPORT - 65)) | (1 << (InceptorOracleParser.KW_IMPORT - 65)) | (1 << (InceptorOracleParser.KW_DATA - 65)) | (1 << (InceptorOracleParser.KW_INPATH - 65)) | (1 << (InceptorOracleParser.KW_IS - 65)) | (1 << (InceptorOracleParser.KW_NULLS - 65)) | (1 << (InceptorOracleParser.KW_CREATE - 65)) | (1 << (InceptorOracleParser.KW_EXTERNAL - 65)) | (1 << (InceptorOracleParser.KW_ALTER - 65)) | (1 << (InceptorOracleParser.KW_CHANGE - 65)) | (1 << (InceptorOracleParser.KW_FIRST - 65)) | (1 << (InceptorOracleParser.KW_LAST - 65)) | (1 << (InceptorOracleParser.KW_AFTER - 65)) | (1 << (InceptorOracleParser.KW_DESCRIBE - 65)) | (1 << (InceptorOracleParser.KW_DROP - 65)) | (1 << (InceptorOracleParser.KW_RENAME - 65)) | (1 << (InceptorOracleParser.KW_IGNORE - 65)) | (1 << (InceptorOracleParser.KW_RESPECT - 65)) | (1 << (InceptorOracleParser.KW_PROTECTION - 65)) | (1 << (InceptorOracleParser.KW_TO - 65)) | (1 << (InceptorOracleParser.KW_COMMENT - 65)) | (1 << (InceptorOracleParser.KW_PROMPT - 65)) | (1 << (InceptorOracleParser.KW_SPOOL - 65)) | (1 << (InceptorOracleParser.KW_BOOLEAN - 65)) | (1 << (InceptorOracleParser.KW_TINYINT - 65)) | (1 << (InceptorOracleParser.KW_BYTE - 65)) | (1 << (InceptorOracleParser.KW_SMALLINT - 65)) | (1 << (InceptorOracleParser.KW_INT - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (InceptorOracleParser.KW_BIGINT - 97)) | (1 << (InceptorOracleParser.KW_FLOAT - 97)) | (1 << (InceptorOracleParser.KW_DOUBLE - 97)) | (1 << (InceptorOracleParser.KW_DATE - 97)) | (1 << (InceptorOracleParser.KW_DATETIME - 97)) | (1 << (InceptorOracleParser.KW_TIMESTAMP - 97)) | (1 << (InceptorOracleParser.KW_TIME - 97)) | (1 << (InceptorOracleParser.KW_DECIMAL - 97)) | (1 << (InceptorOracleParser.KW_STRING - 97)) | (1 << (InceptorOracleParser.KW_GEO - 97)) | (1 << (InceptorOracleParser.KW_ARRAY - 97)) | (1 << (InceptorOracleParser.KW_STRUCT - 97)) | (1 << (InceptorOracleParser.KW_UNIONTYPE - 97)) | (1 << (InceptorOracleParser.KW_PARTITIONED - 97)) | (1 << (InceptorOracleParser.KW_ROUTED - 97)) | (1 << (InceptorOracleParser.KW_CLUSTERED - 97)) | (1 << (InceptorOracleParser.KW_SORTED - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (InceptorOracleParser.KW_NEXT - 129)) | (1 << (InceptorOracleParser.KW_NEXTVALUE - 129)) | (1 << (InceptorOracleParser.KW_BUCKETS - 129)) | (1 << (InceptorOracleParser.KW_ROW - 129)) | (1 << (InceptorOracleParser.KW_ROWS - 129)) | (1 << (InceptorOracleParser.KW_FORMAT - 129)) | (1 << (InceptorOracleParser.KW_DELIMITED - 129)) | (1 << (InceptorOracleParser.KW_FIELDS - 129)) | (1 << (InceptorOracleParser.KW_TERMINATED - 129)) | (1 << (InceptorOracleParser.KW_ESCAPED - 129)) | (1 << (InceptorOracleParser.KW_COLLECTION - 129)) | (1 << (InceptorOracleParser.KW_ITEMS - 129)) | (1 << (InceptorOracleParser.KW_KEYS - 129)) | (1 << (InceptorOracleParser.KW_KEY_TYPE - 129)) | (1 << (InceptorOracleParser.KW_LINES - 129)) | (1 << (InceptorOracleParser.KW_STORED - 129)) | (1 << (InceptorOracleParser.KW_FILEFORMAT - 129)) | (1 << (InceptorOracleParser.KW_SEQUENCEFILE - 129)) | (1 << (InceptorOracleParser.KW_TEXTFILE - 129)) | (1 << (InceptorOracleParser.KW_CSVFILE - 129)) | (1 << (InceptorOracleParser.KW_FWCFILE - 129)) | (1 << (InceptorOracleParser.KW_RCFILE - 129)) | (1 << (InceptorOracleParser.KW_ORCFILE - 129)) | (1 << (InceptorOracleParser.KW_HOLODESK - 129)) | (1 << (InceptorOracleParser.KW_STELLARDB - 129)) | (1 << (InceptorOracleParser.KW_ORCTRANSACTIONFILE - 129)) | (1 << (InceptorOracleParser.KW_PARQUET - 129)))) !== 0) || ((((_la - 161)) & ~0x1f) == 0 && ((1 << (_la - 161)) & ((1 << (InceptorOracleParser.KW_HYPERDRIVE - 161)) | (1 << (InceptorOracleParser.KW_ESDRIVE - 161)) | (1 << (InceptorOracleParser.KW_INPUTFORMAT - 161)) | (1 << (InceptorOracleParser.KW_OUTPUTFORMAT - 161)) | (1 << (InceptorOracleParser.KW_INPUTDRIVER - 161)) | (1 << (InceptorOracleParser.KW_OUTPUTDRIVER - 161)) | (1 << (InceptorOracleParser.KW_OFFLINE - 161)) | (1 << (InceptorOracleParser.KW_ENABLE - 161)) | (1 << (InceptorOracleParser.KW_DISABLE - 161)) | (1 << (InceptorOracleParser.KW_READONLY - 161)) | (1 << (InceptorOracleParser.KW_NO_DROP - 161)) | (1 << (InceptorOracleParser.KW_LOCATION - 161)) | (1 << (InceptorOracleParser.KW_BUCKET - 161)) | (1 << (InceptorOracleParser.KW_OUT - 161)) | (1 << (InceptorOracleParser.KW_OF - 161)) | (1 << (InceptorOracleParser.KW_PERCENT - 161)) | (1 << (InceptorOracleParser.KW_ADD - 161)) | (1 << (InceptorOracleParser.KW_REPLACE - 161)) | (1 << (InceptorOracleParser.KW_RLIKE - 161)) | (1 << (InceptorOracleParser.KW_REGEXP - 161)) | (1 << (InceptorOracleParser.KW_TEMPORARY - 161)) | (1 << (InceptorOracleParser.KW_RESOURCE - 161)) | (1 << (InceptorOracleParser.KW_RELOAD - 161)) | (1 << (InceptorOracleParser.KW_EXPLAIN - 161)) | (1 << (InceptorOracleParser.KW_FORMATTED - 161)) | (1 << (InceptorOracleParser.KW_PRETTY - 161)) | (1 << (InceptorOracleParser.KW_DEPENDENCY - 161)))) !== 0) || ((((_la - 193)) & ~0x1f) == 0 && ((1 << (_la - 193)) & ((1 << (InceptorOracleParser.KW_LOGICAL - 193)) | (1 << (InceptorOracleParser.KW_COST - 193)) | (1 << (InceptorOracleParser.KW_SERDE - 193)) | (1 << (InceptorOracleParser.KW_WITH - 193)) | (1 << (InceptorOracleParser.KW_WITHIN - 193)) | (1 << (InceptorOracleParser.KW_DEFERRED - 193)) | (1 << (InceptorOracleParser.KW_SERDEPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_DBPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_LIMIT - 193)) | (1 << (InceptorOracleParser.KW_SET - 193)) | (1 << (InceptorOracleParser.KW_UNSET - 193)) | (1 << (InceptorOracleParser.KW_TBLPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_IDXPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_VALUE_TYPE - 193)) | (1 << (InceptorOracleParser.KW_ELEM_TYPE - 193)) | (1 << (InceptorOracleParser.KW_PRIOR - 193)) | (1 << (InceptorOracleParser.KW_NOCYCLE - 193)) | (1 << (InceptorOracleParser.KW_MAPJOIN - 193)) | (1 << (InceptorOracleParser.KW_COMBINE - 193)) | (1 << (InceptorOracleParser.KW_COMBINE_STRUCT_INDEX - 193)) | (1 << (InceptorOracleParser.KW_GLKJOIN - 193)) | (1 << (InceptorOracleParser.KW_USE_INDEX - 193)))) !== 0) || ((((_la - 225)) & ~0x1f) == 0 && ((1 << (_la - 225)) & ((1 << (InceptorOracleParser.KW_STARGATE - 225)) | (1 << (InceptorOracleParser.KW_USE_BULKLOAD - 225)) | (1 << (InceptorOracleParser.KW_ADHOC - 225)) | (1 << (InceptorOracleParser.KW_PRECOMPILE - 225)) | (1 << (InceptorOracleParser.KW_STREAMTABLE - 225)) | (1 << (InceptorOracleParser.KW_STREAM - 225)) | (1 << (InceptorOracleParser.KW_RULEBASE - 225)) | (1 << (InceptorOracleParser.KW_RULEBASES - 225)) | (1 << (InceptorOracleParser.KW_RULE - 225)) | (1 << (InceptorOracleParser.KW_RULES - 225)) | (1 << (InceptorOracleParser.KW_MEET - 225)) | (1 << (InceptorOracleParser.KW_MUST - 225)) | (1 << (InceptorOracleParser.KW_MUSTNOT - 225)) | (1 << (InceptorOracleParser.KW_POLICY - 225)) | (1 << (InceptorOracleParser.KW_POLICIES - 225)) | (1 << (InceptorOracleParser.KW_REMOVE - 225)) | (1 << (InceptorOracleParser.KW_POLICYKEY - 225)) | (1 << (InceptorOracleParser.KW_POLICY_RULE - 225)) | (1 << (InceptorOracleParser.KW_LOOKUP - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTION - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTIONS - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTION_PROPERTIES - 225)) | (1 << (InceptorOracleParser.KW_HOLD_DDLTIME - 225)) | (1 << (InceptorOracleParser.KW_CLUSTERSTATUS - 225)))) !== 0) || ((((_la - 257)) & ~0x1f) == 0 && ((1 << (_la - 257)) & ((1 << (InceptorOracleParser.KW_UTC - 257)) | (1 << (InceptorOracleParser.KW_UTCTIMESTAMP - 257)) | (1 << (InceptorOracleParser.KW_LONG - 257)) | (1 << (InceptorOracleParser.KW_DELETE - 257)) | (1 << (InceptorOracleParser.KW_PLUS - 257)) | (1 << (InceptorOracleParser.KW_MINUS - 257)) | (1 << (InceptorOracleParser.KW_OP_CONCAT - 257)) | (1 << (InceptorOracleParser.KW_FETCH - 257)) | (1 << (InceptorOracleParser.KW_INTERSECT - 257)) | (1 << (InceptorOracleParser.KW_VIEW - 257)) | (1 << (InceptorOracleParser.KW_IN - 257)) | (1 << (InceptorOracleParser.KW_DATABASES - 257)) | (1 << (InceptorOracleParser.KW_MATERIALIZED - 257)) | (1 << (InceptorOracleParser.KW_SCHEMA - 257)) | (1 << (InceptorOracleParser.KW_SCHEMAS - 257)) | (1 << (InceptorOracleParser.KW_GRANT - 257)) | (1 << (InceptorOracleParser.KW_REVOKE - 257)) | (1 << (InceptorOracleParser.KW_SSL - 257)) | (1 << (InceptorOracleParser.KW_UNDO - 257)) | (1 << (InceptorOracleParser.KW_LOCK - 257)) | (1 << (InceptorOracleParser.KW_LOCKS - 257)) | (1 << (InceptorOracleParser.KW_UNLOCK - 257)) | (1 << (InceptorOracleParser.KW_SHARED - 257)) | (1 << (InceptorOracleParser.KW_EXCLUSIVE - 257)) | (1 << (InceptorOracleParser.KW_PROCEDURE - 257)) | (1 << (InceptorOracleParser.KW_UNSIGNED - 257)) | (1 << (InceptorOracleParser.KW_WHILE - 257)) | (1 << (InceptorOracleParser.KW_READ - 257)) | (1 << (InceptorOracleParser.KW_READS - 257)))) !== 0) || ((((_la - 289)) & ~0x1f) == 0 && ((1 << (_la - 289)) & ((1 << (InceptorOracleParser.KW_PURGE - 289)) | (1 << (InceptorOracleParser.KW_RANGE - 289)) | (1 << (InceptorOracleParser.KW_ANALYZE - 289)) | (1 << (InceptorOracleParser.KW_BEFORE - 289)) | (1 << (InceptorOracleParser.KW_BETWEEN - 289)) | (1 << (InceptorOracleParser.KW_BOTH - 289)) | (1 << (InceptorOracleParser.KW_BINARY - 289)) | (1 << (InceptorOracleParser.KW_DEFAULT - 289)) | (1 << (InceptorOracleParser.KW_TYPE - 289)) | (1 << (InceptorOracleParser.KW_TRIGGER - 289)) | (1 << (InceptorOracleParser.KW_RECORDREADER - 289)) | (1 << (InceptorOracleParser.KW_RECORDWRITER - 289)) | (1 << (InceptorOracleParser.KW_SEMI - 289)) | (1 << (InceptorOracleParser.KW_LATERAL - 289)) | (1 << (InceptorOracleParser.KW_TOUCH - 289)) | (1 << (InceptorOracleParser.KW_ARCHIVE - 289)) | (1 << (InceptorOracleParser.KW_UNARCHIVE - 289)) | (1 << (InceptorOracleParser.KW_COMPUTE - 289)) | (1 << (InceptorOracleParser.KW_STATISTICS - 289)) | (1 << (InceptorOracleParser.KW_USE - 289)) | (1 << (InceptorOracleParser.KW_OPTION - 289)) | (1 << (InceptorOracleParser.KW_CONCATENATE - 289)) | (1 << (InceptorOracleParser.KW_SHOW_DATABASE - 289)) | (1 << (InceptorOracleParser.KW_UPDATE - 289)) | (1 << (InceptorOracleParser.KW_RESTRICT - 289)) | (1 << (InceptorOracleParser.KW_CASCADE - 289)) | (1 << (InceptorOracleParser.KW_SKEWED - 289)))) !== 0) || ((((_la - 323)) & ~0x1f) == 0 && ((1 << (_la - 323)) & ((1 << (InceptorOracleParser.KW_DIRECTORIES - 323)) | (1 << (InceptorOracleParser.KW_WINDOWRESET - 323)) | (1 << (InceptorOracleParser.KW_SESSIONSTART - 323)) | (1 << (InceptorOracleParser.KW_SESSIONSTOP - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE_DISCARD - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE_COMPLETE - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOW - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOWSLIDELENGTH - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOWSEPARATED - 323)) | (1 << (InceptorOracleParser.KW_FOLLOWEDBY - 323)) | (1 << (InceptorOracleParser.KW_NOTFOLLOWEDBY - 323)) | (1 << (InceptorOracleParser.KW_NOTNEXT - 323)) | (1 << (InceptorOracleParser.KW_PATTERN_TIMES - 323)) | (1 << (InceptorOracleParser.KW_CURRVALUE - 323)) | (1 << (InceptorOracleParser.KW_GROUPING - 323)) | (1 << (InceptorOracleParser.KW_SETS - 323)))) !== 0) || ((((_la - 355)) & ~0x1f) == 0 && ((1 << (_la - 355)) & ((1 << (InceptorOracleParser.KW_TRUNCATE - 355)) | (1 << (InceptorOracleParser.KW_NOSCAN - 355)) | (1 << (InceptorOracleParser.KW_USER - 355)) | (1 << (InceptorOracleParser.KW_QUOTA - 355)) | (1 << (InceptorOracleParser.KW_PERMISSION - 355)) | (1 << (InceptorOracleParser.KW_ROLE - 355)) | (1 << (InceptorOracleParser.KW_ROLES - 355)) | (1 << (InceptorOracleParser.KW_INNER - 355)) | (1 << (InceptorOracleParser.KW_ADMIN - 355)) | (1 << (InceptorOracleParser.KW_OWNER - 355)) | (1 << (InceptorOracleParser.KW_PRINCIPALS - 355)) | (1 << (InceptorOracleParser.KW_CONSTANT - 355)) | (1 << (InceptorOracleParser.KW_CONSTRAINT - 355)) | (1 << (InceptorOracleParser.KW_VALUES - 355)) | (1 << (InceptorOracleParser.KW_YEAR - 355)) | (1 << (InceptorOracleParser.KW_MONTH - 355)) | (1 << (InceptorOracleParser.KW_DAY - 355)) | (1 << (InceptorOracleParser.KW_MINUTE - 355)) | (1 << (InceptorOracleParser.KW_HOUR - 355)))) !== 0) || ((((_la - 387)) & ~0x1f) == 0 && ((1 << (_la - 387)) & ((1 << (InceptorOracleParser.KW_SECOND - 387)) | (1 << (InceptorOracleParser.KW_INTERVAL - 387)) | (1 << (InceptorOracleParser.KW_SYSDATE - 387)) | (1 << (InceptorOracleParser.KW_NOMAXVALUE - 387)) | (1 << (InceptorOracleParser.KW_MINVALUE - 387)) | (1 << (InceptorOracleParser.KW_NOMINVALUE - 387)) | (1 << (InceptorOracleParser.KW_CYCLE - 387)) | (1 << (InceptorOracleParser.KW_CACHE - 387)) | (1 << (InceptorOracleParser.KW_CACHEDMETRIC - 387)) | (1 << (InceptorOracleParser.KW_CACHEDMETRICS - 387)) | (1 << (InceptorOracleParser.KW_NOCACHE - 387)) | (1 << (InceptorOracleParser.KW_NOORDER - 387)) | (1 << (InceptorOracleParser.KW_MERGE - 387)) | (1 << (InceptorOracleParser.KW_PLANT - 387)) | (1 << (InceptorOracleParser.KW_IMMEDIATE - 387)) | (1 << (InceptorOracleParser.KW_COMPACT - 387)) | (1 << (InceptorOracleParser.KW_STOP - 387)) | (1 << (InceptorOracleParser.KW_LIST - 387)))) !== 0) || ((((_la - 419)) & ~0x1f) == 0 && ((1 << (_la - 419)) & ((1 << (InceptorOracleParser.KW_TRANSACTION - 419)) | (1 << (InceptorOracleParser.KW_WORK - 419)) | (1 << (InceptorOracleParser.KW_SPACE - 419)) | (1 << (InceptorOracleParser.KW_CONF - 419)) | (1 << (InceptorOracleParser.KW_DEFINED - 419)) | (1 << (InceptorOracleParser.KW_INTEGER - 419)) | (1 << (InceptorOracleParser.KW_ONLY - 419)) | (1 << (InceptorOracleParser.KW_SERVER - 419)) | (1 << (InceptorOracleParser.KW_TRANSACTIONS - 419)) | (1 << (InceptorOracleParser.KW_URI - 419)) | (1 << (InceptorOracleParser.KW_WRITE - 419)) | (1 << (InceptorOracleParser.KW_FACL - 419)) | (1 << (InceptorOracleParser.KW_FOUND - 419)) | (1 << (InceptorOracleParser.KW_LEVEL - 419)) | (1 << (InceptorOracleParser.KW_PUBLIC - 419)) | (1 << (InceptorOracleParser.KW_LINKS - 419)) | (1 << (InceptorOracleParser.KW_CONNECT - 419)) | (1 << (InceptorOracleParser.KW_APPLICATION - 419)) | (1 << (InceptorOracleParser.KW_APPLICATIONS - 419)) | (1 << (InceptorOracleParser.KW_APP - 419)) | (1 << (InceptorOracleParser.KW_APPS - 419)) | (1 << (InceptorOracleParser.KW_INFINITE - 419)))) !== 0) || ((((_la - 451)) & ~0x1f) == 0 && ((1 << (_la - 451)) & ((1 << (InceptorOracleParser.KW_WAIT - 451)) | (1 << (InceptorOracleParser.KW_PRIMARY - 451)) | (1 << (InceptorOracleParser.KW_FOREIGN - 451)) | (1 << (InceptorOracleParser.KW_REFERENCES - 451)) | (1 << (InceptorOracleParser.KW_VALIDATE - 451)) | (1 << (InceptorOracleParser.KW_NOVALIDATE - 451)) | (1 << (InceptorOracleParser.KW_RELY - 451)) | (1 << (InceptorOracleParser.KW_NORELY - 451)) | (1 << (InceptorOracleParser.KW_KEY - 451)) | (1 << (InceptorOracleParser.KW_SEGMENT - 451)) | (1 << (InceptorOracleParser.KW_LENGTH - 451)) | (1 << (InceptorOracleParser.KW_ATTACH - 451)) | (1 << (InceptorOracleParser.KW_DETTACH - 451)) | (1 << (InceptorOracleParser.KW_SHARD - 451)) | (1 << (InceptorOracleParser.KW_NUM - 451)) | (1 << (InceptorOracleParser.KW_FULLTEXT - 451)) | (1 << (InceptorOracleParser.KW_TABLESIZE - 451)) | (1 << (InceptorOracleParser.KW_TABLET - 451)) | (1 << (InceptorOracleParser.KW_CAPACITY - 451)) | (1 << (InceptorOracleParser.KW_ANALYZER - 451)) | (1 << (InceptorOracleParser.KW_SYNC - 451)) | (1 << (InceptorOracleParser.KW_NO_INDEX - 451)) | (1 << (InceptorOracleParser.KW_LOG - 451)) | (1 << (InceptorOracleParser.KW_FILE - 451)) | (1 << (InceptorOracleParser.KW_JAR - 451)) | (1 << (InceptorOracleParser.KW_PERMANENT - 451)))) !== 0) || _la===InceptorOracleParser.KW_SCHEDULER || _la===InceptorOracleParser.KW_MODE || ((((_la - 528)) & ~0x1f) == 0 && ((1 << (_la - 528)) & ((1 << (InceptorOracleParser.StringLiteral - 528)) | (1 << (InceptorOracleParser.Identifier - 528)) | (1 << (InceptorOracleParser.KW_NOCOPY - 528)) | (1 << (InceptorOracleParser.KW_VARRAY - 528)) | (1 << (InceptorOracleParser.KW_PACKAGE - 528)) | (1 << (InceptorOracleParser.KW_PACKAGES - 528)) | (1 << (InceptorOracleParser.KW_BODY - 528)) | (1 << (InceptorOracleParser.KW_ISOPEN - 528)) | (1 << (InceptorOracleParser.KW_NOTFOUND - 528)) | (1 << (InceptorOracleParser.KW_ROWCOUNT - 528)) | (1 << (InceptorOracleParser.KW_BULK_ROWCOUNT - 528)) | (1 << (InceptorOracleParser.KW_BULK_EXCEPTIONS - 528)) | (1 << (InceptorOracleParser.KW_REVERSE - 528)) | (1 << (InceptorOracleParser.KW_SAVE - 528)) | (1 << (InceptorOracleParser.KW_EXCEPTIONS - 528)))) !== 0) || ((((_la - 560)) & ~0x1f) == 0 && ((1 << (_la - 560)) & ((1 << (InceptorOracleParser.KW_INDICES - 560)) | (1 << (InceptorOracleParser.KW_REF - 560)) | (1 << (InceptorOracleParser.KW_YEARS - 560)) | (1 << (InceptorOracleParser.KW_MONTHS - 560)) | (1 << (InceptorOracleParser.KW_DAYS - 560)) | (1 << (InceptorOracleParser.KW_HOURS - 560)) | (1 << (InceptorOracleParser.KW_MINUTES - 560)) | (1 << (InceptorOracleParser.KW_SECONDS - 560)))) !== 0)) {
	                this.state = 3802;
	                this.showStmtIdentifier();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3805;
	            this.match(InceptorOracleParser.KW_PLSQL);
	            this.state = 3806;
	            this.match(InceptorOracleParser.KW_FUNCTIONS);
	            this.state = 3808;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << InceptorOracleParser.KW_TRUE) | (1 << InceptorOracleParser.KW_FALSE) | (1 << InceptorOracleParser.KW_ALL) | (1 << InceptorOracleParser.KW_LIKE) | (1 << InceptorOracleParser.KW_NO) | (1 << InceptorOracleParser.KW_ANY) | (1 << InceptorOracleParser.KW_EXISTS) | (1 << InceptorOracleParser.KW_ASC) | (1 << InceptorOracleParser.KW_DESC) | (1 << InceptorOracleParser.KW_ORDER) | (1 << InceptorOracleParser.KW_GROUP) | (1 << InceptorOracleParser.KW_INCREMENT) | (1 << InceptorOracleParser.KW_BY) | (1 << InceptorOracleParser.KW_HASH) | (1 << InceptorOracleParser.KW_INSERT) | (1 << InceptorOracleParser.KW_OVERWRITE) | (1 << InceptorOracleParser.KW_OUTER))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (InceptorOracleParser.KW_STREAMJOB - 33)) | (1 << (InceptorOracleParser.KW_STREAMJOBS - 33)) | (1 << (InceptorOracleParser.KW_AT - 33)) | (1 << (InceptorOracleParser.KW_LEFT - 33)) | (1 << (InceptorOracleParser.KW_RIGHT - 33)) | (1 << (InceptorOracleParser.KW_FULL - 33)) | (1 << (InceptorOracleParser.KW_PARTITION - 33)) | (1 << (InceptorOracleParser.KW_PARTITIONS - 33)) | (1 << (InceptorOracleParser.KW_PATTERN - 33)) | (1 << (InceptorOracleParser.KW_TABLE - 33)) | (1 << (InceptorOracleParser.KW_TABLES - 33)) | (1 << (InceptorOracleParser.KW_SEQUENCE - 33)) | (1 << (InceptorOracleParser.KW_SEQUENCES - 33)) | (1 << (InceptorOracleParser.KW_COLUMNS - 33)) | (1 << (InceptorOracleParser.KW_INDEX - 33)) | (1 << (InceptorOracleParser.KW_INDEXES - 33)) | (1 << (InceptorOracleParser.KW_REBUILD - 33)) | (1 << (InceptorOracleParser.KW_FUNCTIONS - 33)) | (1 << (InceptorOracleParser.KW_SHOW - 33)) | (1 << (InceptorOracleParser.KW_MSCK - 33)) | (1 << (InceptorOracleParser.KW_REPAIR - 33)) | (1 << (InceptorOracleParser.KW_DIRECTORY - 33)) | (1 << (InceptorOracleParser.KW_LOCAL - 33)) | (1 << (InceptorOracleParser.KW_GLOBAL - 33)) | (1 << (InceptorOracleParser.KW_USING - 33)) | (1 << (InceptorOracleParser.KW_CLUSTER - 33)) | (1 << (InceptorOracleParser.KW_DISTRIBUTE - 33)) | (1 << (InceptorOracleParser.KW_SORT - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (InceptorOracleParser.KW_UNION - 65)) | (1 << (InceptorOracleParser.KW_LOAD - 65)) | (1 << (InceptorOracleParser.KW_EXPORT - 65)) | (1 << (InceptorOracleParser.KW_IMPORT - 65)) | (1 << (InceptorOracleParser.KW_DATA - 65)) | (1 << (InceptorOracleParser.KW_INPATH - 65)) | (1 << (InceptorOracleParser.KW_IS - 65)) | (1 << (InceptorOracleParser.KW_NULLS - 65)) | (1 << (InceptorOracleParser.KW_CREATE - 65)) | (1 << (InceptorOracleParser.KW_EXTERNAL - 65)) | (1 << (InceptorOracleParser.KW_ALTER - 65)) | (1 << (InceptorOracleParser.KW_CHANGE - 65)) | (1 << (InceptorOracleParser.KW_FIRST - 65)) | (1 << (InceptorOracleParser.KW_LAST - 65)) | (1 << (InceptorOracleParser.KW_AFTER - 65)) | (1 << (InceptorOracleParser.KW_DESCRIBE - 65)) | (1 << (InceptorOracleParser.KW_DROP - 65)) | (1 << (InceptorOracleParser.KW_RENAME - 65)) | (1 << (InceptorOracleParser.KW_IGNORE - 65)) | (1 << (InceptorOracleParser.KW_RESPECT - 65)) | (1 << (InceptorOracleParser.KW_PROTECTION - 65)) | (1 << (InceptorOracleParser.KW_TO - 65)) | (1 << (InceptorOracleParser.KW_COMMENT - 65)) | (1 << (InceptorOracleParser.KW_PROMPT - 65)) | (1 << (InceptorOracleParser.KW_SPOOL - 65)) | (1 << (InceptorOracleParser.KW_BOOLEAN - 65)) | (1 << (InceptorOracleParser.KW_TINYINT - 65)) | (1 << (InceptorOracleParser.KW_BYTE - 65)) | (1 << (InceptorOracleParser.KW_SMALLINT - 65)) | (1 << (InceptorOracleParser.KW_INT - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (InceptorOracleParser.KW_BIGINT - 97)) | (1 << (InceptorOracleParser.KW_FLOAT - 97)) | (1 << (InceptorOracleParser.KW_DOUBLE - 97)) | (1 << (InceptorOracleParser.KW_DATE - 97)) | (1 << (InceptorOracleParser.KW_DATETIME - 97)) | (1 << (InceptorOracleParser.KW_TIMESTAMP - 97)) | (1 << (InceptorOracleParser.KW_TIME - 97)) | (1 << (InceptorOracleParser.KW_DECIMAL - 97)) | (1 << (InceptorOracleParser.KW_STRING - 97)) | (1 << (InceptorOracleParser.KW_GEO - 97)) | (1 << (InceptorOracleParser.KW_ARRAY - 97)) | (1 << (InceptorOracleParser.KW_STRUCT - 97)) | (1 << (InceptorOracleParser.KW_UNIONTYPE - 97)) | (1 << (InceptorOracleParser.KW_PARTITIONED - 97)) | (1 << (InceptorOracleParser.KW_ROUTED - 97)) | (1 << (InceptorOracleParser.KW_CLUSTERED - 97)) | (1 << (InceptorOracleParser.KW_SORTED - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (InceptorOracleParser.KW_NEXT - 129)) | (1 << (InceptorOracleParser.KW_NEXTVALUE - 129)) | (1 << (InceptorOracleParser.KW_BUCKETS - 129)) | (1 << (InceptorOracleParser.KW_ROW - 129)) | (1 << (InceptorOracleParser.KW_ROWS - 129)) | (1 << (InceptorOracleParser.KW_FORMAT - 129)) | (1 << (InceptorOracleParser.KW_DELIMITED - 129)) | (1 << (InceptorOracleParser.KW_FIELDS - 129)) | (1 << (InceptorOracleParser.KW_TERMINATED - 129)) | (1 << (InceptorOracleParser.KW_ESCAPED - 129)) | (1 << (InceptorOracleParser.KW_COLLECTION - 129)) | (1 << (InceptorOracleParser.KW_ITEMS - 129)) | (1 << (InceptorOracleParser.KW_KEYS - 129)) | (1 << (InceptorOracleParser.KW_KEY_TYPE - 129)) | (1 << (InceptorOracleParser.KW_LINES - 129)) | (1 << (InceptorOracleParser.KW_STORED - 129)) | (1 << (InceptorOracleParser.KW_FILEFORMAT - 129)) | (1 << (InceptorOracleParser.KW_SEQUENCEFILE - 129)) | (1 << (InceptorOracleParser.KW_TEXTFILE - 129)) | (1 << (InceptorOracleParser.KW_CSVFILE - 129)) | (1 << (InceptorOracleParser.KW_FWCFILE - 129)) | (1 << (InceptorOracleParser.KW_RCFILE - 129)) | (1 << (InceptorOracleParser.KW_ORCFILE - 129)) | (1 << (InceptorOracleParser.KW_HOLODESK - 129)) | (1 << (InceptorOracleParser.KW_STELLARDB - 129)) | (1 << (InceptorOracleParser.KW_ORCTRANSACTIONFILE - 129)) | (1 << (InceptorOracleParser.KW_PARQUET - 129)))) !== 0) || ((((_la - 161)) & ~0x1f) == 0 && ((1 << (_la - 161)) & ((1 << (InceptorOracleParser.KW_HYPERDRIVE - 161)) | (1 << (InceptorOracleParser.KW_ESDRIVE - 161)) | (1 << (InceptorOracleParser.KW_INPUTFORMAT - 161)) | (1 << (InceptorOracleParser.KW_OUTPUTFORMAT - 161)) | (1 << (InceptorOracleParser.KW_INPUTDRIVER - 161)) | (1 << (InceptorOracleParser.KW_OUTPUTDRIVER - 161)) | (1 << (InceptorOracleParser.KW_OFFLINE - 161)) | (1 << (InceptorOracleParser.KW_ENABLE - 161)) | (1 << (InceptorOracleParser.KW_DISABLE - 161)) | (1 << (InceptorOracleParser.KW_READONLY - 161)) | (1 << (InceptorOracleParser.KW_NO_DROP - 161)) | (1 << (InceptorOracleParser.KW_LOCATION - 161)) | (1 << (InceptorOracleParser.KW_BUCKET - 161)) | (1 << (InceptorOracleParser.KW_OUT - 161)) | (1 << (InceptorOracleParser.KW_OF - 161)) | (1 << (InceptorOracleParser.KW_PERCENT - 161)) | (1 << (InceptorOracleParser.KW_ADD - 161)) | (1 << (InceptorOracleParser.KW_REPLACE - 161)) | (1 << (InceptorOracleParser.KW_RLIKE - 161)) | (1 << (InceptorOracleParser.KW_REGEXP - 161)) | (1 << (InceptorOracleParser.KW_TEMPORARY - 161)) | (1 << (InceptorOracleParser.KW_RESOURCE - 161)) | (1 << (InceptorOracleParser.KW_RELOAD - 161)) | (1 << (InceptorOracleParser.KW_EXPLAIN - 161)) | (1 << (InceptorOracleParser.KW_FORMATTED - 161)) | (1 << (InceptorOracleParser.KW_PRETTY - 161)) | (1 << (InceptorOracleParser.KW_DEPENDENCY - 161)))) !== 0) || ((((_la - 193)) & ~0x1f) == 0 && ((1 << (_la - 193)) & ((1 << (InceptorOracleParser.KW_LOGICAL - 193)) | (1 << (InceptorOracleParser.KW_COST - 193)) | (1 << (InceptorOracleParser.KW_SERDE - 193)) | (1 << (InceptorOracleParser.KW_WITH - 193)) | (1 << (InceptorOracleParser.KW_WITHIN - 193)) | (1 << (InceptorOracleParser.KW_DEFERRED - 193)) | (1 << (InceptorOracleParser.KW_SERDEPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_DBPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_LIMIT - 193)) | (1 << (InceptorOracleParser.KW_SET - 193)) | (1 << (InceptorOracleParser.KW_UNSET - 193)) | (1 << (InceptorOracleParser.KW_TBLPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_IDXPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_VALUE_TYPE - 193)) | (1 << (InceptorOracleParser.KW_ELEM_TYPE - 193)) | (1 << (InceptorOracleParser.KW_PRIOR - 193)) | (1 << (InceptorOracleParser.KW_NOCYCLE - 193)) | (1 << (InceptorOracleParser.KW_MAPJOIN - 193)) | (1 << (InceptorOracleParser.KW_COMBINE - 193)) | (1 << (InceptorOracleParser.KW_COMBINE_STRUCT_INDEX - 193)) | (1 << (InceptorOracleParser.KW_GLKJOIN - 193)) | (1 << (InceptorOracleParser.KW_USE_INDEX - 193)))) !== 0) || ((((_la - 225)) & ~0x1f) == 0 && ((1 << (_la - 225)) & ((1 << (InceptorOracleParser.KW_STARGATE - 225)) | (1 << (InceptorOracleParser.KW_USE_BULKLOAD - 225)) | (1 << (InceptorOracleParser.KW_ADHOC - 225)) | (1 << (InceptorOracleParser.KW_PRECOMPILE - 225)) | (1 << (InceptorOracleParser.KW_STREAMTABLE - 225)) | (1 << (InceptorOracleParser.KW_STREAM - 225)) | (1 << (InceptorOracleParser.KW_RULEBASE - 225)) | (1 << (InceptorOracleParser.KW_RULEBASES - 225)) | (1 << (InceptorOracleParser.KW_RULE - 225)) | (1 << (InceptorOracleParser.KW_RULES - 225)) | (1 << (InceptorOracleParser.KW_MEET - 225)) | (1 << (InceptorOracleParser.KW_MUST - 225)) | (1 << (InceptorOracleParser.KW_MUSTNOT - 225)) | (1 << (InceptorOracleParser.KW_POLICY - 225)) | (1 << (InceptorOracleParser.KW_POLICIES - 225)) | (1 << (InceptorOracleParser.KW_REMOVE - 225)) | (1 << (InceptorOracleParser.KW_POLICYKEY - 225)) | (1 << (InceptorOracleParser.KW_POLICY_RULE - 225)) | (1 << (InceptorOracleParser.KW_LOOKUP - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTION - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTIONS - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTION_PROPERTIES - 225)) | (1 << (InceptorOracleParser.KW_HOLD_DDLTIME - 225)) | (1 << (InceptorOracleParser.KW_CLUSTERSTATUS - 225)))) !== 0) || ((((_la - 257)) & ~0x1f) == 0 && ((1 << (_la - 257)) & ((1 << (InceptorOracleParser.KW_UTC - 257)) | (1 << (InceptorOracleParser.KW_UTCTIMESTAMP - 257)) | (1 << (InceptorOracleParser.KW_LONG - 257)) | (1 << (InceptorOracleParser.KW_DELETE - 257)) | (1 << (InceptorOracleParser.KW_PLUS - 257)) | (1 << (InceptorOracleParser.KW_MINUS - 257)) | (1 << (InceptorOracleParser.KW_OP_CONCAT - 257)) | (1 << (InceptorOracleParser.KW_FETCH - 257)) | (1 << (InceptorOracleParser.KW_INTERSECT - 257)) | (1 << (InceptorOracleParser.KW_VIEW - 257)) | (1 << (InceptorOracleParser.KW_IN - 257)) | (1 << (InceptorOracleParser.KW_DATABASES - 257)) | (1 << (InceptorOracleParser.KW_MATERIALIZED - 257)) | (1 << (InceptorOracleParser.KW_SCHEMA - 257)) | (1 << (InceptorOracleParser.KW_SCHEMAS - 257)) | (1 << (InceptorOracleParser.KW_GRANT - 257)) | (1 << (InceptorOracleParser.KW_REVOKE - 257)) | (1 << (InceptorOracleParser.KW_SSL - 257)) | (1 << (InceptorOracleParser.KW_UNDO - 257)) | (1 << (InceptorOracleParser.KW_LOCK - 257)) | (1 << (InceptorOracleParser.KW_LOCKS - 257)) | (1 << (InceptorOracleParser.KW_UNLOCK - 257)) | (1 << (InceptorOracleParser.KW_SHARED - 257)) | (1 << (InceptorOracleParser.KW_EXCLUSIVE - 257)) | (1 << (InceptorOracleParser.KW_PROCEDURE - 257)) | (1 << (InceptorOracleParser.KW_UNSIGNED - 257)) | (1 << (InceptorOracleParser.KW_WHILE - 257)) | (1 << (InceptorOracleParser.KW_READ - 257)) | (1 << (InceptorOracleParser.KW_READS - 257)))) !== 0) || ((((_la - 289)) & ~0x1f) == 0 && ((1 << (_la - 289)) & ((1 << (InceptorOracleParser.KW_PURGE - 289)) | (1 << (InceptorOracleParser.KW_RANGE - 289)) | (1 << (InceptorOracleParser.KW_ANALYZE - 289)) | (1 << (InceptorOracleParser.KW_BEFORE - 289)) | (1 << (InceptorOracleParser.KW_BETWEEN - 289)) | (1 << (InceptorOracleParser.KW_BOTH - 289)) | (1 << (InceptorOracleParser.KW_BINARY - 289)) | (1 << (InceptorOracleParser.KW_DEFAULT - 289)) | (1 << (InceptorOracleParser.KW_TYPE - 289)) | (1 << (InceptorOracleParser.KW_TRIGGER - 289)) | (1 << (InceptorOracleParser.KW_RECORDREADER - 289)) | (1 << (InceptorOracleParser.KW_RECORDWRITER - 289)) | (1 << (InceptorOracleParser.KW_SEMI - 289)) | (1 << (InceptorOracleParser.KW_LATERAL - 289)) | (1 << (InceptorOracleParser.KW_TOUCH - 289)) | (1 << (InceptorOracleParser.KW_ARCHIVE - 289)) | (1 << (InceptorOracleParser.KW_UNARCHIVE - 289)) | (1 << (InceptorOracleParser.KW_COMPUTE - 289)) | (1 << (InceptorOracleParser.KW_STATISTICS - 289)) | (1 << (InceptorOracleParser.KW_USE - 289)) | (1 << (InceptorOracleParser.KW_OPTION - 289)) | (1 << (InceptorOracleParser.KW_CONCATENATE - 289)) | (1 << (InceptorOracleParser.KW_SHOW_DATABASE - 289)) | (1 << (InceptorOracleParser.KW_UPDATE - 289)) | (1 << (InceptorOracleParser.KW_RESTRICT - 289)) | (1 << (InceptorOracleParser.KW_CASCADE - 289)) | (1 << (InceptorOracleParser.KW_SKEWED - 289)))) !== 0) || ((((_la - 323)) & ~0x1f) == 0 && ((1 << (_la - 323)) & ((1 << (InceptorOracleParser.KW_DIRECTORIES - 323)) | (1 << (InceptorOracleParser.KW_WINDOWRESET - 323)) | (1 << (InceptorOracleParser.KW_SESSIONSTART - 323)) | (1 << (InceptorOracleParser.KW_SESSIONSTOP - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE_DISCARD - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE_COMPLETE - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOW - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOWSLIDELENGTH - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOWSEPARATED - 323)) | (1 << (InceptorOracleParser.KW_FOLLOWEDBY - 323)) | (1 << (InceptorOracleParser.KW_NOTFOLLOWEDBY - 323)) | (1 << (InceptorOracleParser.KW_NOTNEXT - 323)) | (1 << (InceptorOracleParser.KW_PATTERN_TIMES - 323)) | (1 << (InceptorOracleParser.KW_CURRVALUE - 323)) | (1 << (InceptorOracleParser.KW_GROUPING - 323)) | (1 << (InceptorOracleParser.KW_SETS - 323)))) !== 0) || ((((_la - 355)) & ~0x1f) == 0 && ((1 << (_la - 355)) & ((1 << (InceptorOracleParser.KW_TRUNCATE - 355)) | (1 << (InceptorOracleParser.KW_NOSCAN - 355)) | (1 << (InceptorOracleParser.KW_USER - 355)) | (1 << (InceptorOracleParser.KW_QUOTA - 355)) | (1 << (InceptorOracleParser.KW_PERMISSION - 355)) | (1 << (InceptorOracleParser.KW_ROLE - 355)) | (1 << (InceptorOracleParser.KW_ROLES - 355)) | (1 << (InceptorOracleParser.KW_INNER - 355)) | (1 << (InceptorOracleParser.KW_ADMIN - 355)) | (1 << (InceptorOracleParser.KW_OWNER - 355)) | (1 << (InceptorOracleParser.KW_PRINCIPALS - 355)) | (1 << (InceptorOracleParser.KW_CONSTANT - 355)) | (1 << (InceptorOracleParser.KW_CONSTRAINT - 355)) | (1 << (InceptorOracleParser.KW_VALUES - 355)) | (1 << (InceptorOracleParser.KW_YEAR - 355)) | (1 << (InceptorOracleParser.KW_MONTH - 355)) | (1 << (InceptorOracleParser.KW_DAY - 355)) | (1 << (InceptorOracleParser.KW_MINUTE - 355)) | (1 << (InceptorOracleParser.KW_HOUR - 355)))) !== 0) || ((((_la - 387)) & ~0x1f) == 0 && ((1 << (_la - 387)) & ((1 << (InceptorOracleParser.KW_SECOND - 387)) | (1 << (InceptorOracleParser.KW_INTERVAL - 387)) | (1 << (InceptorOracleParser.KW_SYSDATE - 387)) | (1 << (InceptorOracleParser.KW_NOMAXVALUE - 387)) | (1 << (InceptorOracleParser.KW_MINVALUE - 387)) | (1 << (InceptorOracleParser.KW_NOMINVALUE - 387)) | (1 << (InceptorOracleParser.KW_CYCLE - 387)) | (1 << (InceptorOracleParser.KW_CACHE - 387)) | (1 << (InceptorOracleParser.KW_CACHEDMETRIC - 387)) | (1 << (InceptorOracleParser.KW_CACHEDMETRICS - 387)) | (1 << (InceptorOracleParser.KW_NOCACHE - 387)) | (1 << (InceptorOracleParser.KW_NOORDER - 387)) | (1 << (InceptorOracleParser.KW_MERGE - 387)) | (1 << (InceptorOracleParser.KW_PLANT - 387)) | (1 << (InceptorOracleParser.KW_IMMEDIATE - 387)) | (1 << (InceptorOracleParser.KW_COMPACT - 387)) | (1 << (InceptorOracleParser.KW_STOP - 387)) | (1 << (InceptorOracleParser.KW_LIST - 387)))) !== 0) || ((((_la - 419)) & ~0x1f) == 0 && ((1 << (_la - 419)) & ((1 << (InceptorOracleParser.KW_TRANSACTION - 419)) | (1 << (InceptorOracleParser.KW_WORK - 419)) | (1 << (InceptorOracleParser.KW_SPACE - 419)) | (1 << (InceptorOracleParser.KW_CONF - 419)) | (1 << (InceptorOracleParser.KW_DEFINED - 419)) | (1 << (InceptorOracleParser.KW_INTEGER - 419)) | (1 << (InceptorOracleParser.KW_ONLY - 419)) | (1 << (InceptorOracleParser.KW_SERVER - 419)) | (1 << (InceptorOracleParser.KW_TRANSACTIONS - 419)) | (1 << (InceptorOracleParser.KW_URI - 419)) | (1 << (InceptorOracleParser.KW_WRITE - 419)) | (1 << (InceptorOracleParser.KW_FACL - 419)) | (1 << (InceptorOracleParser.KW_FOUND - 419)) | (1 << (InceptorOracleParser.KW_LEVEL - 419)) | (1 << (InceptorOracleParser.KW_PUBLIC - 419)) | (1 << (InceptorOracleParser.KW_LINKS - 419)) | (1 << (InceptorOracleParser.KW_CONNECT - 419)) | (1 << (InceptorOracleParser.KW_APPLICATION - 419)) | (1 << (InceptorOracleParser.KW_APPLICATIONS - 419)) | (1 << (InceptorOracleParser.KW_APP - 419)) | (1 << (InceptorOracleParser.KW_APPS - 419)) | (1 << (InceptorOracleParser.KW_INFINITE - 419)))) !== 0) || ((((_la - 451)) & ~0x1f) == 0 && ((1 << (_la - 451)) & ((1 << (InceptorOracleParser.KW_WAIT - 451)) | (1 << (InceptorOracleParser.KW_PRIMARY - 451)) | (1 << (InceptorOracleParser.KW_FOREIGN - 451)) | (1 << (InceptorOracleParser.KW_REFERENCES - 451)) | (1 << (InceptorOracleParser.KW_VALIDATE - 451)) | (1 << (InceptorOracleParser.KW_NOVALIDATE - 451)) | (1 << (InceptorOracleParser.KW_RELY - 451)) | (1 << (InceptorOracleParser.KW_NORELY - 451)) | (1 << (InceptorOracleParser.KW_KEY - 451)) | (1 << (InceptorOracleParser.KW_SEGMENT - 451)) | (1 << (InceptorOracleParser.KW_LENGTH - 451)) | (1 << (InceptorOracleParser.KW_ATTACH - 451)) | (1 << (InceptorOracleParser.KW_DETTACH - 451)) | (1 << (InceptorOracleParser.KW_SHARD - 451)) | (1 << (InceptorOracleParser.KW_NUM - 451)) | (1 << (InceptorOracleParser.KW_FULLTEXT - 451)) | (1 << (InceptorOracleParser.KW_TABLESIZE - 451)) | (1 << (InceptorOracleParser.KW_TABLET - 451)) | (1 << (InceptorOracleParser.KW_CAPACITY - 451)) | (1 << (InceptorOracleParser.KW_ANALYZER - 451)) | (1 << (InceptorOracleParser.KW_SYNC - 451)) | (1 << (InceptorOracleParser.KW_NO_INDEX - 451)) | (1 << (InceptorOracleParser.KW_LOG - 451)) | (1 << (InceptorOracleParser.KW_FILE - 451)) | (1 << (InceptorOracleParser.KW_JAR - 451)) | (1 << (InceptorOracleParser.KW_PERMANENT - 451)))) !== 0) || _la===InceptorOracleParser.KW_SCHEDULER || _la===InceptorOracleParser.KW_MODE || ((((_la - 528)) & ~0x1f) == 0 && ((1 << (_la - 528)) & ((1 << (InceptorOracleParser.StringLiteral - 528)) | (1 << (InceptorOracleParser.Identifier - 528)) | (1 << (InceptorOracleParser.KW_NOCOPY - 528)) | (1 << (InceptorOracleParser.KW_VARRAY - 528)) | (1 << (InceptorOracleParser.KW_PACKAGE - 528)) | (1 << (InceptorOracleParser.KW_PACKAGES - 528)) | (1 << (InceptorOracleParser.KW_BODY - 528)) | (1 << (InceptorOracleParser.KW_ISOPEN - 528)) | (1 << (InceptorOracleParser.KW_NOTFOUND - 528)) | (1 << (InceptorOracleParser.KW_ROWCOUNT - 528)) | (1 << (InceptorOracleParser.KW_BULK_ROWCOUNT - 528)) | (1 << (InceptorOracleParser.KW_BULK_EXCEPTIONS - 528)) | (1 << (InceptorOracleParser.KW_REVERSE - 528)) | (1 << (InceptorOracleParser.KW_SAVE - 528)) | (1 << (InceptorOracleParser.KW_EXCEPTIONS - 528)))) !== 0) || ((((_la - 560)) & ~0x1f) == 0 && ((1 << (_la - 560)) & ((1 << (InceptorOracleParser.KW_INDICES - 560)) | (1 << (InceptorOracleParser.KW_REF - 560)) | (1 << (InceptorOracleParser.KW_YEARS - 560)) | (1 << (InceptorOracleParser.KW_MONTHS - 560)) | (1 << (InceptorOracleParser.KW_DAYS - 560)) | (1 << (InceptorOracleParser.KW_HOURS - 560)) | (1 << (InceptorOracleParser.KW_MINUTES - 560)) | (1 << (InceptorOracleParser.KW_SECONDS - 560)))) !== 0)) {
	                this.state = 3807;
	                this.showStmtIdentifier();
	            }

	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3810;
	            this.match(InceptorOracleParser.KW_PLSQL);
	            this.state = 3811;
	            this.match(InceptorOracleParser.KW_PACKAGES);
	            this.state = 3813;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << InceptorOracleParser.KW_TRUE) | (1 << InceptorOracleParser.KW_FALSE) | (1 << InceptorOracleParser.KW_ALL) | (1 << InceptorOracleParser.KW_LIKE) | (1 << InceptorOracleParser.KW_NO) | (1 << InceptorOracleParser.KW_ANY) | (1 << InceptorOracleParser.KW_EXISTS) | (1 << InceptorOracleParser.KW_ASC) | (1 << InceptorOracleParser.KW_DESC) | (1 << InceptorOracleParser.KW_ORDER) | (1 << InceptorOracleParser.KW_GROUP) | (1 << InceptorOracleParser.KW_INCREMENT) | (1 << InceptorOracleParser.KW_BY) | (1 << InceptorOracleParser.KW_HASH) | (1 << InceptorOracleParser.KW_INSERT) | (1 << InceptorOracleParser.KW_OVERWRITE) | (1 << InceptorOracleParser.KW_OUTER))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (InceptorOracleParser.KW_STREAMJOB - 33)) | (1 << (InceptorOracleParser.KW_STREAMJOBS - 33)) | (1 << (InceptorOracleParser.KW_AT - 33)) | (1 << (InceptorOracleParser.KW_LEFT - 33)) | (1 << (InceptorOracleParser.KW_RIGHT - 33)) | (1 << (InceptorOracleParser.KW_FULL - 33)) | (1 << (InceptorOracleParser.KW_PARTITION - 33)) | (1 << (InceptorOracleParser.KW_PARTITIONS - 33)) | (1 << (InceptorOracleParser.KW_PATTERN - 33)) | (1 << (InceptorOracleParser.KW_TABLE - 33)) | (1 << (InceptorOracleParser.KW_TABLES - 33)) | (1 << (InceptorOracleParser.KW_SEQUENCE - 33)) | (1 << (InceptorOracleParser.KW_SEQUENCES - 33)) | (1 << (InceptorOracleParser.KW_COLUMNS - 33)) | (1 << (InceptorOracleParser.KW_INDEX - 33)) | (1 << (InceptorOracleParser.KW_INDEXES - 33)) | (1 << (InceptorOracleParser.KW_REBUILD - 33)) | (1 << (InceptorOracleParser.KW_FUNCTIONS - 33)) | (1 << (InceptorOracleParser.KW_SHOW - 33)) | (1 << (InceptorOracleParser.KW_MSCK - 33)) | (1 << (InceptorOracleParser.KW_REPAIR - 33)) | (1 << (InceptorOracleParser.KW_DIRECTORY - 33)) | (1 << (InceptorOracleParser.KW_LOCAL - 33)) | (1 << (InceptorOracleParser.KW_GLOBAL - 33)) | (1 << (InceptorOracleParser.KW_USING - 33)) | (1 << (InceptorOracleParser.KW_CLUSTER - 33)) | (1 << (InceptorOracleParser.KW_DISTRIBUTE - 33)) | (1 << (InceptorOracleParser.KW_SORT - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (InceptorOracleParser.KW_UNION - 65)) | (1 << (InceptorOracleParser.KW_LOAD - 65)) | (1 << (InceptorOracleParser.KW_EXPORT - 65)) | (1 << (InceptorOracleParser.KW_IMPORT - 65)) | (1 << (InceptorOracleParser.KW_DATA - 65)) | (1 << (InceptorOracleParser.KW_INPATH - 65)) | (1 << (InceptorOracleParser.KW_IS - 65)) | (1 << (InceptorOracleParser.KW_NULLS - 65)) | (1 << (InceptorOracleParser.KW_CREATE - 65)) | (1 << (InceptorOracleParser.KW_EXTERNAL - 65)) | (1 << (InceptorOracleParser.KW_ALTER - 65)) | (1 << (InceptorOracleParser.KW_CHANGE - 65)) | (1 << (InceptorOracleParser.KW_FIRST - 65)) | (1 << (InceptorOracleParser.KW_LAST - 65)) | (1 << (InceptorOracleParser.KW_AFTER - 65)) | (1 << (InceptorOracleParser.KW_DESCRIBE - 65)) | (1 << (InceptorOracleParser.KW_DROP - 65)) | (1 << (InceptorOracleParser.KW_RENAME - 65)) | (1 << (InceptorOracleParser.KW_IGNORE - 65)) | (1 << (InceptorOracleParser.KW_RESPECT - 65)) | (1 << (InceptorOracleParser.KW_PROTECTION - 65)) | (1 << (InceptorOracleParser.KW_TO - 65)) | (1 << (InceptorOracleParser.KW_COMMENT - 65)) | (1 << (InceptorOracleParser.KW_PROMPT - 65)) | (1 << (InceptorOracleParser.KW_SPOOL - 65)) | (1 << (InceptorOracleParser.KW_BOOLEAN - 65)) | (1 << (InceptorOracleParser.KW_TINYINT - 65)) | (1 << (InceptorOracleParser.KW_BYTE - 65)) | (1 << (InceptorOracleParser.KW_SMALLINT - 65)) | (1 << (InceptorOracleParser.KW_INT - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (InceptorOracleParser.KW_BIGINT - 97)) | (1 << (InceptorOracleParser.KW_FLOAT - 97)) | (1 << (InceptorOracleParser.KW_DOUBLE - 97)) | (1 << (InceptorOracleParser.KW_DATE - 97)) | (1 << (InceptorOracleParser.KW_DATETIME - 97)) | (1 << (InceptorOracleParser.KW_TIMESTAMP - 97)) | (1 << (InceptorOracleParser.KW_TIME - 97)) | (1 << (InceptorOracleParser.KW_DECIMAL - 97)) | (1 << (InceptorOracleParser.KW_STRING - 97)) | (1 << (InceptorOracleParser.KW_GEO - 97)) | (1 << (InceptorOracleParser.KW_ARRAY - 97)) | (1 << (InceptorOracleParser.KW_STRUCT - 97)) | (1 << (InceptorOracleParser.KW_UNIONTYPE - 97)) | (1 << (InceptorOracleParser.KW_PARTITIONED - 97)) | (1 << (InceptorOracleParser.KW_ROUTED - 97)) | (1 << (InceptorOracleParser.KW_CLUSTERED - 97)) | (1 << (InceptorOracleParser.KW_SORTED - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (InceptorOracleParser.KW_NEXT - 129)) | (1 << (InceptorOracleParser.KW_NEXTVALUE - 129)) | (1 << (InceptorOracleParser.KW_BUCKETS - 129)) | (1 << (InceptorOracleParser.KW_ROW - 129)) | (1 << (InceptorOracleParser.KW_ROWS - 129)) | (1 << (InceptorOracleParser.KW_FORMAT - 129)) | (1 << (InceptorOracleParser.KW_DELIMITED - 129)) | (1 << (InceptorOracleParser.KW_FIELDS - 129)) | (1 << (InceptorOracleParser.KW_TERMINATED - 129)) | (1 << (InceptorOracleParser.KW_ESCAPED - 129)) | (1 << (InceptorOracleParser.KW_COLLECTION - 129)) | (1 << (InceptorOracleParser.KW_ITEMS - 129)) | (1 << (InceptorOracleParser.KW_KEYS - 129)) | (1 << (InceptorOracleParser.KW_KEY_TYPE - 129)) | (1 << (InceptorOracleParser.KW_LINES - 129)) | (1 << (InceptorOracleParser.KW_STORED - 129)) | (1 << (InceptorOracleParser.KW_FILEFORMAT - 129)) | (1 << (InceptorOracleParser.KW_SEQUENCEFILE - 129)) | (1 << (InceptorOracleParser.KW_TEXTFILE - 129)) | (1 << (InceptorOracleParser.KW_CSVFILE - 129)) | (1 << (InceptorOracleParser.KW_FWCFILE - 129)) | (1 << (InceptorOracleParser.KW_RCFILE - 129)) | (1 << (InceptorOracleParser.KW_ORCFILE - 129)) | (1 << (InceptorOracleParser.KW_HOLODESK - 129)) | (1 << (InceptorOracleParser.KW_STELLARDB - 129)) | (1 << (InceptorOracleParser.KW_ORCTRANSACTIONFILE - 129)) | (1 << (InceptorOracleParser.KW_PARQUET - 129)))) !== 0) || ((((_la - 161)) & ~0x1f) == 0 && ((1 << (_la - 161)) & ((1 << (InceptorOracleParser.KW_HYPERDRIVE - 161)) | (1 << (InceptorOracleParser.KW_ESDRIVE - 161)) | (1 << (InceptorOracleParser.KW_INPUTFORMAT - 161)) | (1 << (InceptorOracleParser.KW_OUTPUTFORMAT - 161)) | (1 << (InceptorOracleParser.KW_INPUTDRIVER - 161)) | (1 << (InceptorOracleParser.KW_OUTPUTDRIVER - 161)) | (1 << (InceptorOracleParser.KW_OFFLINE - 161)) | (1 << (InceptorOracleParser.KW_ENABLE - 161)) | (1 << (InceptorOracleParser.KW_DISABLE - 161)) | (1 << (InceptorOracleParser.KW_READONLY - 161)) | (1 << (InceptorOracleParser.KW_NO_DROP - 161)) | (1 << (InceptorOracleParser.KW_LOCATION - 161)) | (1 << (InceptorOracleParser.KW_BUCKET - 161)) | (1 << (InceptorOracleParser.KW_OUT - 161)) | (1 << (InceptorOracleParser.KW_OF - 161)) | (1 << (InceptorOracleParser.KW_PERCENT - 161)) | (1 << (InceptorOracleParser.KW_ADD - 161)) | (1 << (InceptorOracleParser.KW_REPLACE - 161)) | (1 << (InceptorOracleParser.KW_RLIKE - 161)) | (1 << (InceptorOracleParser.KW_REGEXP - 161)) | (1 << (InceptorOracleParser.KW_TEMPORARY - 161)) | (1 << (InceptorOracleParser.KW_RESOURCE - 161)) | (1 << (InceptorOracleParser.KW_RELOAD - 161)) | (1 << (InceptorOracleParser.KW_EXPLAIN - 161)) | (1 << (InceptorOracleParser.KW_FORMATTED - 161)) | (1 << (InceptorOracleParser.KW_PRETTY - 161)) | (1 << (InceptorOracleParser.KW_DEPENDENCY - 161)))) !== 0) || ((((_la - 193)) & ~0x1f) == 0 && ((1 << (_la - 193)) & ((1 << (InceptorOracleParser.KW_LOGICAL - 193)) | (1 << (InceptorOracleParser.KW_COST - 193)) | (1 << (InceptorOracleParser.KW_SERDE - 193)) | (1 << (InceptorOracleParser.KW_WITH - 193)) | (1 << (InceptorOracleParser.KW_WITHIN - 193)) | (1 << (InceptorOracleParser.KW_DEFERRED - 193)) | (1 << (InceptorOracleParser.KW_SERDEPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_DBPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_LIMIT - 193)) | (1 << (InceptorOracleParser.KW_SET - 193)) | (1 << (InceptorOracleParser.KW_UNSET - 193)) | (1 << (InceptorOracleParser.KW_TBLPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_IDXPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_VALUE_TYPE - 193)) | (1 << (InceptorOracleParser.KW_ELEM_TYPE - 193)) | (1 << (InceptorOracleParser.KW_PRIOR - 193)) | (1 << (InceptorOracleParser.KW_NOCYCLE - 193)) | (1 << (InceptorOracleParser.KW_MAPJOIN - 193)) | (1 << (InceptorOracleParser.KW_COMBINE - 193)) | (1 << (InceptorOracleParser.KW_COMBINE_STRUCT_INDEX - 193)) | (1 << (InceptorOracleParser.KW_GLKJOIN - 193)) | (1 << (InceptorOracleParser.KW_USE_INDEX - 193)))) !== 0) || ((((_la - 225)) & ~0x1f) == 0 && ((1 << (_la - 225)) & ((1 << (InceptorOracleParser.KW_STARGATE - 225)) | (1 << (InceptorOracleParser.KW_USE_BULKLOAD - 225)) | (1 << (InceptorOracleParser.KW_ADHOC - 225)) | (1 << (InceptorOracleParser.KW_PRECOMPILE - 225)) | (1 << (InceptorOracleParser.KW_STREAMTABLE - 225)) | (1 << (InceptorOracleParser.KW_STREAM - 225)) | (1 << (InceptorOracleParser.KW_RULEBASE - 225)) | (1 << (InceptorOracleParser.KW_RULEBASES - 225)) | (1 << (InceptorOracleParser.KW_RULE - 225)) | (1 << (InceptorOracleParser.KW_RULES - 225)) | (1 << (InceptorOracleParser.KW_MEET - 225)) | (1 << (InceptorOracleParser.KW_MUST - 225)) | (1 << (InceptorOracleParser.KW_MUSTNOT - 225)) | (1 << (InceptorOracleParser.KW_POLICY - 225)) | (1 << (InceptorOracleParser.KW_POLICIES - 225)) | (1 << (InceptorOracleParser.KW_REMOVE - 225)) | (1 << (InceptorOracleParser.KW_POLICYKEY - 225)) | (1 << (InceptorOracleParser.KW_POLICY_RULE - 225)) | (1 << (InceptorOracleParser.KW_LOOKUP - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTION - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTIONS - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTION_PROPERTIES - 225)) | (1 << (InceptorOracleParser.KW_HOLD_DDLTIME - 225)) | (1 << (InceptorOracleParser.KW_CLUSTERSTATUS - 225)))) !== 0) || ((((_la - 257)) & ~0x1f) == 0 && ((1 << (_la - 257)) & ((1 << (InceptorOracleParser.KW_UTC - 257)) | (1 << (InceptorOracleParser.KW_UTCTIMESTAMP - 257)) | (1 << (InceptorOracleParser.KW_LONG - 257)) | (1 << (InceptorOracleParser.KW_DELETE - 257)) | (1 << (InceptorOracleParser.KW_PLUS - 257)) | (1 << (InceptorOracleParser.KW_MINUS - 257)) | (1 << (InceptorOracleParser.KW_OP_CONCAT - 257)) | (1 << (InceptorOracleParser.KW_FETCH - 257)) | (1 << (InceptorOracleParser.KW_INTERSECT - 257)) | (1 << (InceptorOracleParser.KW_VIEW - 257)) | (1 << (InceptorOracleParser.KW_IN - 257)) | (1 << (InceptorOracleParser.KW_DATABASES - 257)) | (1 << (InceptorOracleParser.KW_MATERIALIZED - 257)) | (1 << (InceptorOracleParser.KW_SCHEMA - 257)) | (1 << (InceptorOracleParser.KW_SCHEMAS - 257)) | (1 << (InceptorOracleParser.KW_GRANT - 257)) | (1 << (InceptorOracleParser.KW_REVOKE - 257)) | (1 << (InceptorOracleParser.KW_SSL - 257)) | (1 << (InceptorOracleParser.KW_UNDO - 257)) | (1 << (InceptorOracleParser.KW_LOCK - 257)) | (1 << (InceptorOracleParser.KW_LOCKS - 257)) | (1 << (InceptorOracleParser.KW_UNLOCK - 257)) | (1 << (InceptorOracleParser.KW_SHARED - 257)) | (1 << (InceptorOracleParser.KW_EXCLUSIVE - 257)) | (1 << (InceptorOracleParser.KW_PROCEDURE - 257)) | (1 << (InceptorOracleParser.KW_UNSIGNED - 257)) | (1 << (InceptorOracleParser.KW_WHILE - 257)) | (1 << (InceptorOracleParser.KW_READ - 257)) | (1 << (InceptorOracleParser.KW_READS - 257)))) !== 0) || ((((_la - 289)) & ~0x1f) == 0 && ((1 << (_la - 289)) & ((1 << (InceptorOracleParser.KW_PURGE - 289)) | (1 << (InceptorOracleParser.KW_RANGE - 289)) | (1 << (InceptorOracleParser.KW_ANALYZE - 289)) | (1 << (InceptorOracleParser.KW_BEFORE - 289)) | (1 << (InceptorOracleParser.KW_BETWEEN - 289)) | (1 << (InceptorOracleParser.KW_BOTH - 289)) | (1 << (InceptorOracleParser.KW_BINARY - 289)) | (1 << (InceptorOracleParser.KW_DEFAULT - 289)) | (1 << (InceptorOracleParser.KW_TYPE - 289)) | (1 << (InceptorOracleParser.KW_TRIGGER - 289)) | (1 << (InceptorOracleParser.KW_RECORDREADER - 289)) | (1 << (InceptorOracleParser.KW_RECORDWRITER - 289)) | (1 << (InceptorOracleParser.KW_SEMI - 289)) | (1 << (InceptorOracleParser.KW_LATERAL - 289)) | (1 << (InceptorOracleParser.KW_TOUCH - 289)) | (1 << (InceptorOracleParser.KW_ARCHIVE - 289)) | (1 << (InceptorOracleParser.KW_UNARCHIVE - 289)) | (1 << (InceptorOracleParser.KW_COMPUTE - 289)) | (1 << (InceptorOracleParser.KW_STATISTICS - 289)) | (1 << (InceptorOracleParser.KW_USE - 289)) | (1 << (InceptorOracleParser.KW_OPTION - 289)) | (1 << (InceptorOracleParser.KW_CONCATENATE - 289)) | (1 << (InceptorOracleParser.KW_SHOW_DATABASE - 289)) | (1 << (InceptorOracleParser.KW_UPDATE - 289)) | (1 << (InceptorOracleParser.KW_RESTRICT - 289)) | (1 << (InceptorOracleParser.KW_CASCADE - 289)) | (1 << (InceptorOracleParser.KW_SKEWED - 289)))) !== 0) || ((((_la - 323)) & ~0x1f) == 0 && ((1 << (_la - 323)) & ((1 << (InceptorOracleParser.KW_DIRECTORIES - 323)) | (1 << (InceptorOracleParser.KW_WINDOWRESET - 323)) | (1 << (InceptorOracleParser.KW_SESSIONSTART - 323)) | (1 << (InceptorOracleParser.KW_SESSIONSTOP - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE_DISCARD - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE_COMPLETE - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOW - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOWSLIDELENGTH - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOWSEPARATED - 323)) | (1 << (InceptorOracleParser.KW_FOLLOWEDBY - 323)) | (1 << (InceptorOracleParser.KW_NOTFOLLOWEDBY - 323)) | (1 << (InceptorOracleParser.KW_NOTNEXT - 323)) | (1 << (InceptorOracleParser.KW_PATTERN_TIMES - 323)) | (1 << (InceptorOracleParser.KW_CURRVALUE - 323)) | (1 << (InceptorOracleParser.KW_GROUPING - 323)) | (1 << (InceptorOracleParser.KW_SETS - 323)))) !== 0) || ((((_la - 355)) & ~0x1f) == 0 && ((1 << (_la - 355)) & ((1 << (InceptorOracleParser.KW_TRUNCATE - 355)) | (1 << (InceptorOracleParser.KW_NOSCAN - 355)) | (1 << (InceptorOracleParser.KW_USER - 355)) | (1 << (InceptorOracleParser.KW_QUOTA - 355)) | (1 << (InceptorOracleParser.KW_PERMISSION - 355)) | (1 << (InceptorOracleParser.KW_ROLE - 355)) | (1 << (InceptorOracleParser.KW_ROLES - 355)) | (1 << (InceptorOracleParser.KW_INNER - 355)) | (1 << (InceptorOracleParser.KW_ADMIN - 355)) | (1 << (InceptorOracleParser.KW_OWNER - 355)) | (1 << (InceptorOracleParser.KW_PRINCIPALS - 355)) | (1 << (InceptorOracleParser.KW_CONSTANT - 355)) | (1 << (InceptorOracleParser.KW_CONSTRAINT - 355)) | (1 << (InceptorOracleParser.KW_VALUES - 355)) | (1 << (InceptorOracleParser.KW_YEAR - 355)) | (1 << (InceptorOracleParser.KW_MONTH - 355)) | (1 << (InceptorOracleParser.KW_DAY - 355)) | (1 << (InceptorOracleParser.KW_MINUTE - 355)) | (1 << (InceptorOracleParser.KW_HOUR - 355)))) !== 0) || ((((_la - 387)) & ~0x1f) == 0 && ((1 << (_la - 387)) & ((1 << (InceptorOracleParser.KW_SECOND - 387)) | (1 << (InceptorOracleParser.KW_INTERVAL - 387)) | (1 << (InceptorOracleParser.KW_SYSDATE - 387)) | (1 << (InceptorOracleParser.KW_NOMAXVALUE - 387)) | (1 << (InceptorOracleParser.KW_MINVALUE - 387)) | (1 << (InceptorOracleParser.KW_NOMINVALUE - 387)) | (1 << (InceptorOracleParser.KW_CYCLE - 387)) | (1 << (InceptorOracleParser.KW_CACHE - 387)) | (1 << (InceptorOracleParser.KW_CACHEDMETRIC - 387)) | (1 << (InceptorOracleParser.KW_CACHEDMETRICS - 387)) | (1 << (InceptorOracleParser.KW_NOCACHE - 387)) | (1 << (InceptorOracleParser.KW_NOORDER - 387)) | (1 << (InceptorOracleParser.KW_MERGE - 387)) | (1 << (InceptorOracleParser.KW_PLANT - 387)) | (1 << (InceptorOracleParser.KW_IMMEDIATE - 387)) | (1 << (InceptorOracleParser.KW_COMPACT - 387)) | (1 << (InceptorOracleParser.KW_STOP - 387)) | (1 << (InceptorOracleParser.KW_LIST - 387)))) !== 0) || ((((_la - 419)) & ~0x1f) == 0 && ((1 << (_la - 419)) & ((1 << (InceptorOracleParser.KW_TRANSACTION - 419)) | (1 << (InceptorOracleParser.KW_WORK - 419)) | (1 << (InceptorOracleParser.KW_SPACE - 419)) | (1 << (InceptorOracleParser.KW_CONF - 419)) | (1 << (InceptorOracleParser.KW_DEFINED - 419)) | (1 << (InceptorOracleParser.KW_INTEGER - 419)) | (1 << (InceptorOracleParser.KW_ONLY - 419)) | (1 << (InceptorOracleParser.KW_SERVER - 419)) | (1 << (InceptorOracleParser.KW_TRANSACTIONS - 419)) | (1 << (InceptorOracleParser.KW_URI - 419)) | (1 << (InceptorOracleParser.KW_WRITE - 419)) | (1 << (InceptorOracleParser.KW_FACL - 419)) | (1 << (InceptorOracleParser.KW_FOUND - 419)) | (1 << (InceptorOracleParser.KW_LEVEL - 419)) | (1 << (InceptorOracleParser.KW_PUBLIC - 419)) | (1 << (InceptorOracleParser.KW_LINKS - 419)) | (1 << (InceptorOracleParser.KW_CONNECT - 419)) | (1 << (InceptorOracleParser.KW_APPLICATION - 419)) | (1 << (InceptorOracleParser.KW_APPLICATIONS - 419)) | (1 << (InceptorOracleParser.KW_APP - 419)) | (1 << (InceptorOracleParser.KW_APPS - 419)) | (1 << (InceptorOracleParser.KW_INFINITE - 419)))) !== 0) || ((((_la - 451)) & ~0x1f) == 0 && ((1 << (_la - 451)) & ((1 << (InceptorOracleParser.KW_WAIT - 451)) | (1 << (InceptorOracleParser.KW_PRIMARY - 451)) | (1 << (InceptorOracleParser.KW_FOREIGN - 451)) | (1 << (InceptorOracleParser.KW_REFERENCES - 451)) | (1 << (InceptorOracleParser.KW_VALIDATE - 451)) | (1 << (InceptorOracleParser.KW_NOVALIDATE - 451)) | (1 << (InceptorOracleParser.KW_RELY - 451)) | (1 << (InceptorOracleParser.KW_NORELY - 451)) | (1 << (InceptorOracleParser.KW_KEY - 451)) | (1 << (InceptorOracleParser.KW_SEGMENT - 451)) | (1 << (InceptorOracleParser.KW_LENGTH - 451)) | (1 << (InceptorOracleParser.KW_ATTACH - 451)) | (1 << (InceptorOracleParser.KW_DETTACH - 451)) | (1 << (InceptorOracleParser.KW_SHARD - 451)) | (1 << (InceptorOracleParser.KW_NUM - 451)) | (1 << (InceptorOracleParser.KW_FULLTEXT - 451)) | (1 << (InceptorOracleParser.KW_TABLESIZE - 451)) | (1 << (InceptorOracleParser.KW_TABLET - 451)) | (1 << (InceptorOracleParser.KW_CAPACITY - 451)) | (1 << (InceptorOracleParser.KW_ANALYZER - 451)) | (1 << (InceptorOracleParser.KW_SYNC - 451)) | (1 << (InceptorOracleParser.KW_NO_INDEX - 451)) | (1 << (InceptorOracleParser.KW_LOG - 451)) | (1 << (InceptorOracleParser.KW_FILE - 451)) | (1 << (InceptorOracleParser.KW_JAR - 451)) | (1 << (InceptorOracleParser.KW_PERMANENT - 451)))) !== 0) || _la===InceptorOracleParser.KW_SCHEDULER || _la===InceptorOracleParser.KW_MODE || ((((_la - 528)) & ~0x1f) == 0 && ((1 << (_la - 528)) & ((1 << (InceptorOracleParser.StringLiteral - 528)) | (1 << (InceptorOracleParser.Identifier - 528)) | (1 << (InceptorOracleParser.KW_NOCOPY - 528)) | (1 << (InceptorOracleParser.KW_VARRAY - 528)) | (1 << (InceptorOracleParser.KW_PACKAGE - 528)) | (1 << (InceptorOracleParser.KW_PACKAGES - 528)) | (1 << (InceptorOracleParser.KW_BODY - 528)) | (1 << (InceptorOracleParser.KW_ISOPEN - 528)) | (1 << (InceptorOracleParser.KW_NOTFOUND - 528)) | (1 << (InceptorOracleParser.KW_ROWCOUNT - 528)) | (1 << (InceptorOracleParser.KW_BULK_ROWCOUNT - 528)) | (1 << (InceptorOracleParser.KW_BULK_EXCEPTIONS - 528)) | (1 << (InceptorOracleParser.KW_REVERSE - 528)) | (1 << (InceptorOracleParser.KW_SAVE - 528)) | (1 << (InceptorOracleParser.KW_EXCEPTIONS - 528)))) !== 0) || ((((_la - 560)) & ~0x1f) == 0 && ((1 << (_la - 560)) & ((1 << (InceptorOracleParser.KW_INDICES - 560)) | (1 << (InceptorOracleParser.KW_REF - 560)) | (1 << (InceptorOracleParser.KW_YEARS - 560)) | (1 << (InceptorOracleParser.KW_MONTHS - 560)) | (1 << (InceptorOracleParser.KW_DAYS - 560)) | (1 << (InceptorOracleParser.KW_HOURS - 560)) | (1 << (InceptorOracleParser.KW_MINUTES - 560)) | (1 << (InceptorOracleParser.KW_SECONDS - 560)))) !== 0)) {
	                this.state = 3812;
	                this.showStmtIdentifier();
	            }

	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3815;
	            this.match(InceptorOracleParser.KW_PARTITIONS);
	            this.state = 3816;
	            this.tabTypeExpr();
	            this.state = 3818;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_PARTITION) {
	                this.state = 3817;
	                this.partitionSpec();
	            }

	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3820;
	            this.match(InceptorOracleParser.KW_CREATE);
	            this.state = 3821;
	            this.match(InceptorOracleParser.KW_TABLE);
	            this.state = 3822;
	            localctx.tabName = this.tableName();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 3823;
	            this.match(InceptorOracleParser.KW_TABLE);
	            this.state = 3824;
	            this.match(InceptorOracleParser.KW_EXTENDED);
	            this.state = 3827;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_FROM || _la===InceptorOracleParser.KW_IN) {
	                this.state = 3825;
	                _la = this._input.LA(1);
	                if(!(_la===InceptorOracleParser.KW_FROM || _la===InceptorOracleParser.KW_IN)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 3826;
	                localctx.db_name = this.identifier();
	            }

	            this.state = 3829;
	            this.match(InceptorOracleParser.KW_LIKE);
	            this.state = 3830;
	            this.showStmtIdentifier();
	            this.state = 3832;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_PARTITION) {
	                this.state = 3831;
	                this.partitionSpec();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showStatementPartC() {
	    let localctx = new ShowStatementPartCContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 526, InceptorOracleParser.RULE_showStatementPartC);
	    var _la = 0; // Token type
	    try {
	        this.state = 3877;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,324,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3836;
	            this.match(InceptorOracleParser.KW_TBLPROPERTIES);
	            this.state = 3837;
	            localctx.tblName = this.identifier();
	            this.state = 3841;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.LPAREN) {
	                this.state = 3838;
	                this.match(InceptorOracleParser.LPAREN);
	                this.state = 3839;
	                localctx.prptyName = this.match(InceptorOracleParser.StringLiteral);
	                this.state = 3840;
	                this.match(InceptorOracleParser.RPAREN);
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3843;
	            this.match(InceptorOracleParser.KW_LOCKS);
	            this.state = 3845;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << InceptorOracleParser.KW_TRUE) | (1 << InceptorOracleParser.KW_FALSE) | (1 << InceptorOracleParser.KW_ALL) | (1 << InceptorOracleParser.KW_LIKE) | (1 << InceptorOracleParser.KW_NO) | (1 << InceptorOracleParser.KW_ANY) | (1 << InceptorOracleParser.KW_EXISTS) | (1 << InceptorOracleParser.KW_ASC) | (1 << InceptorOracleParser.KW_DESC) | (1 << InceptorOracleParser.KW_ORDER) | (1 << InceptorOracleParser.KW_GROUP) | (1 << InceptorOracleParser.KW_INCREMENT) | (1 << InceptorOracleParser.KW_BY) | (1 << InceptorOracleParser.KW_HASH) | (1 << InceptorOracleParser.KW_INSERT) | (1 << InceptorOracleParser.KW_OVERWRITE) | (1 << InceptorOracleParser.KW_OUTER))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (InceptorOracleParser.KW_STREAMJOB - 33)) | (1 << (InceptorOracleParser.KW_STREAMJOBS - 33)) | (1 << (InceptorOracleParser.KW_AT - 33)) | (1 << (InceptorOracleParser.KW_LEFT - 33)) | (1 << (InceptorOracleParser.KW_RIGHT - 33)) | (1 << (InceptorOracleParser.KW_FULL - 33)) | (1 << (InceptorOracleParser.KW_PARTITION - 33)) | (1 << (InceptorOracleParser.KW_PARTITIONS - 33)) | (1 << (InceptorOracleParser.KW_PATTERN - 33)) | (1 << (InceptorOracleParser.KW_TABLE - 33)) | (1 << (InceptorOracleParser.KW_TABLES - 33)) | (1 << (InceptorOracleParser.KW_SEQUENCE - 33)) | (1 << (InceptorOracleParser.KW_SEQUENCES - 33)) | (1 << (InceptorOracleParser.KW_COLUMNS - 33)) | (1 << (InceptorOracleParser.KW_INDEX - 33)) | (1 << (InceptorOracleParser.KW_INDEXES - 33)) | (1 << (InceptorOracleParser.KW_REBUILD - 33)) | (1 << (InceptorOracleParser.KW_FUNCTIONS - 33)) | (1 << (InceptorOracleParser.KW_SHOW - 33)) | (1 << (InceptorOracleParser.KW_MSCK - 33)) | (1 << (InceptorOracleParser.KW_REPAIR - 33)) | (1 << (InceptorOracleParser.KW_DIRECTORY - 33)) | (1 << (InceptorOracleParser.KW_LOCAL - 33)) | (1 << (InceptorOracleParser.KW_GLOBAL - 33)) | (1 << (InceptorOracleParser.KW_USING - 33)) | (1 << (InceptorOracleParser.KW_CLUSTER - 33)) | (1 << (InceptorOracleParser.KW_DISTRIBUTE - 33)) | (1 << (InceptorOracleParser.KW_SORT - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (InceptorOracleParser.KW_UNION - 65)) | (1 << (InceptorOracleParser.KW_LOAD - 65)) | (1 << (InceptorOracleParser.KW_EXPORT - 65)) | (1 << (InceptorOracleParser.KW_IMPORT - 65)) | (1 << (InceptorOracleParser.KW_DATA - 65)) | (1 << (InceptorOracleParser.KW_INPATH - 65)) | (1 << (InceptorOracleParser.KW_IS - 65)) | (1 << (InceptorOracleParser.KW_NULLS - 65)) | (1 << (InceptorOracleParser.KW_CREATE - 65)) | (1 << (InceptorOracleParser.KW_EXTERNAL - 65)) | (1 << (InceptorOracleParser.KW_ALTER - 65)) | (1 << (InceptorOracleParser.KW_CHANGE - 65)) | (1 << (InceptorOracleParser.KW_FIRST - 65)) | (1 << (InceptorOracleParser.KW_LAST - 65)) | (1 << (InceptorOracleParser.KW_AFTER - 65)) | (1 << (InceptorOracleParser.KW_DESCRIBE - 65)) | (1 << (InceptorOracleParser.KW_DROP - 65)) | (1 << (InceptorOracleParser.KW_RENAME - 65)) | (1 << (InceptorOracleParser.KW_IGNORE - 65)) | (1 << (InceptorOracleParser.KW_RESPECT - 65)) | (1 << (InceptorOracleParser.KW_PROTECTION - 65)) | (1 << (InceptorOracleParser.KW_TO - 65)) | (1 << (InceptorOracleParser.KW_COMMENT - 65)) | (1 << (InceptorOracleParser.KW_PROMPT - 65)) | (1 << (InceptorOracleParser.KW_SPOOL - 65)) | (1 << (InceptorOracleParser.KW_BOOLEAN - 65)) | (1 << (InceptorOracleParser.KW_TINYINT - 65)) | (1 << (InceptorOracleParser.KW_BYTE - 65)) | (1 << (InceptorOracleParser.KW_SMALLINT - 65)) | (1 << (InceptorOracleParser.KW_INT - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (InceptorOracleParser.KW_BIGINT - 97)) | (1 << (InceptorOracleParser.KW_FLOAT - 97)) | (1 << (InceptorOracleParser.KW_DOUBLE - 97)) | (1 << (InceptorOracleParser.KW_DATE - 97)) | (1 << (InceptorOracleParser.KW_DATETIME - 97)) | (1 << (InceptorOracleParser.KW_TIMESTAMP - 97)) | (1 << (InceptorOracleParser.KW_TIME - 97)) | (1 << (InceptorOracleParser.KW_DECIMAL - 97)) | (1 << (InceptorOracleParser.KW_STRING - 97)) | (1 << (InceptorOracleParser.KW_GEO - 97)) | (1 << (InceptorOracleParser.KW_ARRAY - 97)) | (1 << (InceptorOracleParser.KW_STRUCT - 97)) | (1 << (InceptorOracleParser.KW_UNIONTYPE - 97)) | (1 << (InceptorOracleParser.KW_PARTITIONED - 97)) | (1 << (InceptorOracleParser.KW_ROUTED - 97)) | (1 << (InceptorOracleParser.KW_CLUSTERED - 97)) | (1 << (InceptorOracleParser.KW_SORTED - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (InceptorOracleParser.KW_NEXT - 129)) | (1 << (InceptorOracleParser.KW_NEXTVALUE - 129)) | (1 << (InceptorOracleParser.KW_BUCKETS - 129)) | (1 << (InceptorOracleParser.KW_ROW - 129)) | (1 << (InceptorOracleParser.KW_ROWS - 129)) | (1 << (InceptorOracleParser.KW_FORMAT - 129)) | (1 << (InceptorOracleParser.KW_DELIMITED - 129)) | (1 << (InceptorOracleParser.KW_FIELDS - 129)) | (1 << (InceptorOracleParser.KW_TERMINATED - 129)) | (1 << (InceptorOracleParser.KW_ESCAPED - 129)) | (1 << (InceptorOracleParser.KW_COLLECTION - 129)) | (1 << (InceptorOracleParser.KW_ITEMS - 129)) | (1 << (InceptorOracleParser.KW_KEYS - 129)) | (1 << (InceptorOracleParser.KW_KEY_TYPE - 129)) | (1 << (InceptorOracleParser.KW_LINES - 129)) | (1 << (InceptorOracleParser.KW_STORED - 129)) | (1 << (InceptorOracleParser.KW_FILEFORMAT - 129)) | (1 << (InceptorOracleParser.KW_SEQUENCEFILE - 129)) | (1 << (InceptorOracleParser.KW_TEXTFILE - 129)) | (1 << (InceptorOracleParser.KW_CSVFILE - 129)) | (1 << (InceptorOracleParser.KW_FWCFILE - 129)) | (1 << (InceptorOracleParser.KW_RCFILE - 129)) | (1 << (InceptorOracleParser.KW_ORCFILE - 129)) | (1 << (InceptorOracleParser.KW_HOLODESK - 129)) | (1 << (InceptorOracleParser.KW_STELLARDB - 129)) | (1 << (InceptorOracleParser.KW_ORCTRANSACTIONFILE - 129)) | (1 << (InceptorOracleParser.KW_PARQUET - 129)))) !== 0) || ((((_la - 161)) & ~0x1f) == 0 && ((1 << (_la - 161)) & ((1 << (InceptorOracleParser.KW_HYPERDRIVE - 161)) | (1 << (InceptorOracleParser.KW_ESDRIVE - 161)) | (1 << (InceptorOracleParser.KW_INPUTFORMAT - 161)) | (1 << (InceptorOracleParser.KW_OUTPUTFORMAT - 161)) | (1 << (InceptorOracleParser.KW_INPUTDRIVER - 161)) | (1 << (InceptorOracleParser.KW_OUTPUTDRIVER - 161)) | (1 << (InceptorOracleParser.KW_OFFLINE - 161)) | (1 << (InceptorOracleParser.KW_ENABLE - 161)) | (1 << (InceptorOracleParser.KW_DISABLE - 161)) | (1 << (InceptorOracleParser.KW_READONLY - 161)) | (1 << (InceptorOracleParser.KW_NO_DROP - 161)) | (1 << (InceptorOracleParser.KW_LOCATION - 161)) | (1 << (InceptorOracleParser.KW_BUCKET - 161)) | (1 << (InceptorOracleParser.KW_OUT - 161)) | (1 << (InceptorOracleParser.KW_OF - 161)) | (1 << (InceptorOracleParser.KW_PERCENT - 161)) | (1 << (InceptorOracleParser.KW_ADD - 161)) | (1 << (InceptorOracleParser.KW_REPLACE - 161)) | (1 << (InceptorOracleParser.KW_RLIKE - 161)) | (1 << (InceptorOracleParser.KW_REGEXP - 161)) | (1 << (InceptorOracleParser.KW_TEMPORARY - 161)) | (1 << (InceptorOracleParser.KW_RESOURCE - 161)) | (1 << (InceptorOracleParser.KW_RELOAD - 161)) | (1 << (InceptorOracleParser.KW_EXPLAIN - 161)) | (1 << (InceptorOracleParser.KW_FORMATTED - 161)) | (1 << (InceptorOracleParser.KW_PRETTY - 161)) | (1 << (InceptorOracleParser.KW_DEPENDENCY - 161)))) !== 0) || ((((_la - 193)) & ~0x1f) == 0 && ((1 << (_la - 193)) & ((1 << (InceptorOracleParser.KW_LOGICAL - 193)) | (1 << (InceptorOracleParser.KW_COST - 193)) | (1 << (InceptorOracleParser.KW_SERDE - 193)) | (1 << (InceptorOracleParser.KW_WITH - 193)) | (1 << (InceptorOracleParser.KW_WITHIN - 193)) | (1 << (InceptorOracleParser.KW_DEFERRED - 193)) | (1 << (InceptorOracleParser.KW_SERDEPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_DBPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_LIMIT - 193)) | (1 << (InceptorOracleParser.KW_SET - 193)) | (1 << (InceptorOracleParser.KW_UNSET - 193)) | (1 << (InceptorOracleParser.KW_TBLPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_IDXPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_VALUE_TYPE - 193)) | (1 << (InceptorOracleParser.KW_ELEM_TYPE - 193)) | (1 << (InceptorOracleParser.KW_PRIOR - 193)) | (1 << (InceptorOracleParser.KW_NOCYCLE - 193)) | (1 << (InceptorOracleParser.KW_MAPJOIN - 193)) | (1 << (InceptorOracleParser.KW_COMBINE - 193)) | (1 << (InceptorOracleParser.KW_COMBINE_STRUCT_INDEX - 193)) | (1 << (InceptorOracleParser.KW_GLKJOIN - 193)) | (1 << (InceptorOracleParser.KW_USE_INDEX - 193)))) !== 0) || ((((_la - 225)) & ~0x1f) == 0 && ((1 << (_la - 225)) & ((1 << (InceptorOracleParser.KW_STARGATE - 225)) | (1 << (InceptorOracleParser.KW_USE_BULKLOAD - 225)) | (1 << (InceptorOracleParser.KW_ADHOC - 225)) | (1 << (InceptorOracleParser.KW_PRECOMPILE - 225)) | (1 << (InceptorOracleParser.KW_STREAMTABLE - 225)) | (1 << (InceptorOracleParser.KW_STREAM - 225)) | (1 << (InceptorOracleParser.KW_RULEBASE - 225)) | (1 << (InceptorOracleParser.KW_RULEBASES - 225)) | (1 << (InceptorOracleParser.KW_RULE - 225)) | (1 << (InceptorOracleParser.KW_RULES - 225)) | (1 << (InceptorOracleParser.KW_MEET - 225)) | (1 << (InceptorOracleParser.KW_MUST - 225)) | (1 << (InceptorOracleParser.KW_MUSTNOT - 225)) | (1 << (InceptorOracleParser.KW_POLICY - 225)) | (1 << (InceptorOracleParser.KW_POLICIES - 225)) | (1 << (InceptorOracleParser.KW_REMOVE - 225)) | (1 << (InceptorOracleParser.KW_POLICYKEY - 225)) | (1 << (InceptorOracleParser.KW_POLICY_RULE - 225)) | (1 << (InceptorOracleParser.KW_LOOKUP - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTION - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTIONS - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTION_PROPERTIES - 225)) | (1 << (InceptorOracleParser.KW_HOLD_DDLTIME - 225)) | (1 << (InceptorOracleParser.KW_CLUSTERSTATUS - 225)))) !== 0) || ((((_la - 257)) & ~0x1f) == 0 && ((1 << (_la - 257)) & ((1 << (InceptorOracleParser.KW_UTC - 257)) | (1 << (InceptorOracleParser.KW_UTCTIMESTAMP - 257)) | (1 << (InceptorOracleParser.KW_LONG - 257)) | (1 << (InceptorOracleParser.KW_DELETE - 257)) | (1 << (InceptorOracleParser.KW_PLUS - 257)) | (1 << (InceptorOracleParser.KW_MINUS - 257)) | (1 << (InceptorOracleParser.KW_OP_CONCAT - 257)) | (1 << (InceptorOracleParser.KW_FETCH - 257)) | (1 << (InceptorOracleParser.KW_INTERSECT - 257)) | (1 << (InceptorOracleParser.KW_VIEW - 257)) | (1 << (InceptorOracleParser.KW_IN - 257)) | (1 << (InceptorOracleParser.KW_DATABASES - 257)) | (1 << (InceptorOracleParser.KW_MATERIALIZED - 257)) | (1 << (InceptorOracleParser.KW_SCHEMA - 257)) | (1 << (InceptorOracleParser.KW_SCHEMAS - 257)) | (1 << (InceptorOracleParser.KW_GRANT - 257)) | (1 << (InceptorOracleParser.KW_REVOKE - 257)) | (1 << (InceptorOracleParser.KW_SSL - 257)) | (1 << (InceptorOracleParser.KW_UNDO - 257)) | (1 << (InceptorOracleParser.KW_LOCK - 257)) | (1 << (InceptorOracleParser.KW_LOCKS - 257)) | (1 << (InceptorOracleParser.KW_UNLOCK - 257)) | (1 << (InceptorOracleParser.KW_SHARED - 257)) | (1 << (InceptorOracleParser.KW_EXCLUSIVE - 257)) | (1 << (InceptorOracleParser.KW_PROCEDURE - 257)) | (1 << (InceptorOracleParser.KW_UNSIGNED - 257)) | (1 << (InceptorOracleParser.KW_WHILE - 257)) | (1 << (InceptorOracleParser.KW_READ - 257)) | (1 << (InceptorOracleParser.KW_READS - 257)))) !== 0) || ((((_la - 289)) & ~0x1f) == 0 && ((1 << (_la - 289)) & ((1 << (InceptorOracleParser.KW_PURGE - 289)) | (1 << (InceptorOracleParser.KW_RANGE - 289)) | (1 << (InceptorOracleParser.KW_ANALYZE - 289)) | (1 << (InceptorOracleParser.KW_BEFORE - 289)) | (1 << (InceptorOracleParser.KW_BETWEEN - 289)) | (1 << (InceptorOracleParser.KW_BOTH - 289)) | (1 << (InceptorOracleParser.KW_BINARY - 289)) | (1 << (InceptorOracleParser.KW_DEFAULT - 289)) | (1 << (InceptorOracleParser.KW_TYPE - 289)) | (1 << (InceptorOracleParser.KW_TRIGGER - 289)) | (1 << (InceptorOracleParser.KW_RECORDREADER - 289)) | (1 << (InceptorOracleParser.KW_RECORDWRITER - 289)) | (1 << (InceptorOracleParser.KW_SEMI - 289)) | (1 << (InceptorOracleParser.KW_LATERAL - 289)) | (1 << (InceptorOracleParser.KW_TOUCH - 289)) | (1 << (InceptorOracleParser.KW_ARCHIVE - 289)) | (1 << (InceptorOracleParser.KW_UNARCHIVE - 289)) | (1 << (InceptorOracleParser.KW_COMPUTE - 289)) | (1 << (InceptorOracleParser.KW_STATISTICS - 289)) | (1 << (InceptorOracleParser.KW_USE - 289)) | (1 << (InceptorOracleParser.KW_OPTION - 289)) | (1 << (InceptorOracleParser.KW_CONCATENATE - 289)) | (1 << (InceptorOracleParser.KW_SHOW_DATABASE - 289)) | (1 << (InceptorOracleParser.KW_UPDATE - 289)) | (1 << (InceptorOracleParser.KW_RESTRICT - 289)) | (1 << (InceptorOracleParser.KW_CASCADE - 289)) | (1 << (InceptorOracleParser.KW_SKEWED - 289)))) !== 0) || ((((_la - 323)) & ~0x1f) == 0 && ((1 << (_la - 323)) & ((1 << (InceptorOracleParser.KW_DIRECTORIES - 323)) | (1 << (InceptorOracleParser.KW_WINDOWRESET - 323)) | (1 << (InceptorOracleParser.KW_SESSIONSTART - 323)) | (1 << (InceptorOracleParser.KW_SESSIONSTOP - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE_DISCARD - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE_COMPLETE - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOW - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOWSLIDELENGTH - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOWSEPARATED - 323)) | (1 << (InceptorOracleParser.KW_FOLLOWEDBY - 323)) | (1 << (InceptorOracleParser.KW_NOTFOLLOWEDBY - 323)) | (1 << (InceptorOracleParser.KW_NOTNEXT - 323)) | (1 << (InceptorOracleParser.KW_PATTERN_TIMES - 323)) | (1 << (InceptorOracleParser.KW_CURRVALUE - 323)) | (1 << (InceptorOracleParser.KW_GROUPING - 323)) | (1 << (InceptorOracleParser.KW_SETS - 323)))) !== 0) || ((((_la - 355)) & ~0x1f) == 0 && ((1 << (_la - 355)) & ((1 << (InceptorOracleParser.KW_TRUNCATE - 355)) | (1 << (InceptorOracleParser.KW_NOSCAN - 355)) | (1 << (InceptorOracleParser.KW_USER - 355)) | (1 << (InceptorOracleParser.KW_QUOTA - 355)) | (1 << (InceptorOracleParser.KW_PERMISSION - 355)) | (1 << (InceptorOracleParser.KW_ROLE - 355)) | (1 << (InceptorOracleParser.KW_ROLES - 355)) | (1 << (InceptorOracleParser.KW_INNER - 355)) | (1 << (InceptorOracleParser.KW_ADMIN - 355)) | (1 << (InceptorOracleParser.KW_OWNER - 355)) | (1 << (InceptorOracleParser.KW_PRINCIPALS - 355)) | (1 << (InceptorOracleParser.KW_CONSTANT - 355)) | (1 << (InceptorOracleParser.KW_CONSTRAINT - 355)) | (1 << (InceptorOracleParser.KW_VALUES - 355)) | (1 << (InceptorOracleParser.KW_YEAR - 355)) | (1 << (InceptorOracleParser.KW_MONTH - 355)) | (1 << (InceptorOracleParser.KW_DAY - 355)) | (1 << (InceptorOracleParser.KW_MINUTE - 355)) | (1 << (InceptorOracleParser.KW_HOUR - 355)))) !== 0) || ((((_la - 387)) & ~0x1f) == 0 && ((1 << (_la - 387)) & ((1 << (InceptorOracleParser.KW_SECOND - 387)) | (1 << (InceptorOracleParser.KW_INTERVAL - 387)) | (1 << (InceptorOracleParser.KW_SYSDATE - 387)) | (1 << (InceptorOracleParser.KW_NOMAXVALUE - 387)) | (1 << (InceptorOracleParser.KW_MINVALUE - 387)) | (1 << (InceptorOracleParser.KW_NOMINVALUE - 387)) | (1 << (InceptorOracleParser.KW_CYCLE - 387)) | (1 << (InceptorOracleParser.KW_CACHE - 387)) | (1 << (InceptorOracleParser.KW_CACHEDMETRIC - 387)) | (1 << (InceptorOracleParser.KW_CACHEDMETRICS - 387)) | (1 << (InceptorOracleParser.KW_NOCACHE - 387)) | (1 << (InceptorOracleParser.KW_NOORDER - 387)) | (1 << (InceptorOracleParser.KW_MERGE - 387)) | (1 << (InceptorOracleParser.KW_PLANT - 387)) | (1 << (InceptorOracleParser.KW_IMMEDIATE - 387)) | (1 << (InceptorOracleParser.KW_COMPACT - 387)) | (1 << (InceptorOracleParser.KW_STOP - 387)) | (1 << (InceptorOracleParser.KW_LIST - 387)))) !== 0) || ((((_la - 419)) & ~0x1f) == 0 && ((1 << (_la - 419)) & ((1 << (InceptorOracleParser.KW_TRANSACTION - 419)) | (1 << (InceptorOracleParser.KW_WORK - 419)) | (1 << (InceptorOracleParser.KW_SPACE - 419)) | (1 << (InceptorOracleParser.KW_CONF - 419)) | (1 << (InceptorOracleParser.KW_DEFINED - 419)) | (1 << (InceptorOracleParser.KW_INTEGER - 419)) | (1 << (InceptorOracleParser.KW_ONLY - 419)) | (1 << (InceptorOracleParser.KW_SERVER - 419)) | (1 << (InceptorOracleParser.KW_TRANSACTIONS - 419)) | (1 << (InceptorOracleParser.KW_URI - 419)) | (1 << (InceptorOracleParser.KW_WRITE - 419)) | (1 << (InceptorOracleParser.KW_FACL - 419)) | (1 << (InceptorOracleParser.KW_FOUND - 419)) | (1 << (InceptorOracleParser.KW_LEVEL - 419)) | (1 << (InceptorOracleParser.KW_PUBLIC - 419)) | (1 << (InceptorOracleParser.KW_LINKS - 419)) | (1 << (InceptorOracleParser.KW_CONNECT - 419)) | (1 << (InceptorOracleParser.KW_APPLICATION - 419)) | (1 << (InceptorOracleParser.KW_APPLICATIONS - 419)) | (1 << (InceptorOracleParser.KW_APP - 419)) | (1 << (InceptorOracleParser.KW_APPS - 419)) | (1 << (InceptorOracleParser.KW_INFINITE - 419)))) !== 0) || ((((_la - 451)) & ~0x1f) == 0 && ((1 << (_la - 451)) & ((1 << (InceptorOracleParser.KW_WAIT - 451)) | (1 << (InceptorOracleParser.KW_PRIMARY - 451)) | (1 << (InceptorOracleParser.KW_FOREIGN - 451)) | (1 << (InceptorOracleParser.KW_REFERENCES - 451)) | (1 << (InceptorOracleParser.KW_VALIDATE - 451)) | (1 << (InceptorOracleParser.KW_NOVALIDATE - 451)) | (1 << (InceptorOracleParser.KW_RELY - 451)) | (1 << (InceptorOracleParser.KW_NORELY - 451)) | (1 << (InceptorOracleParser.KW_KEY - 451)) | (1 << (InceptorOracleParser.KW_SEGMENT - 451)) | (1 << (InceptorOracleParser.KW_LENGTH - 451)) | (1 << (InceptorOracleParser.KW_ATTACH - 451)) | (1 << (InceptorOracleParser.KW_DETTACH - 451)) | (1 << (InceptorOracleParser.KW_SHARD - 451)) | (1 << (InceptorOracleParser.KW_NUM - 451)) | (1 << (InceptorOracleParser.KW_FULLTEXT - 451)) | (1 << (InceptorOracleParser.KW_TABLESIZE - 451)) | (1 << (InceptorOracleParser.KW_TABLET - 451)) | (1 << (InceptorOracleParser.KW_CAPACITY - 451)) | (1 << (InceptorOracleParser.KW_ANALYZER - 451)) | (1 << (InceptorOracleParser.KW_SYNC - 451)) | (1 << (InceptorOracleParser.KW_NO_INDEX - 451)) | (1 << (InceptorOracleParser.KW_LOG - 451)) | (1 << (InceptorOracleParser.KW_FILE - 451)) | (1 << (InceptorOracleParser.KW_JAR - 451)) | (1 << (InceptorOracleParser.KW_PERMANENT - 451)))) !== 0) || _la===InceptorOracleParser.KW_SCHEDULER || _la===InceptorOracleParser.KW_MODE || ((((_la - 537)) & ~0x1f) == 0 && ((1 << (_la - 537)) & ((1 << (InceptorOracleParser.Identifier - 537)) | (1 << (InceptorOracleParser.KW_NOCOPY - 537)) | (1 << (InceptorOracleParser.KW_VARRAY - 537)) | (1 << (InceptorOracleParser.KW_PACKAGE - 537)) | (1 << (InceptorOracleParser.KW_PACKAGES - 537)) | (1 << (InceptorOracleParser.KW_BODY - 537)) | (1 << (InceptorOracleParser.KW_ISOPEN - 537)) | (1 << (InceptorOracleParser.KW_NOTFOUND - 537)) | (1 << (InceptorOracleParser.KW_ROWCOUNT - 537)) | (1 << (InceptorOracleParser.KW_BULK_ROWCOUNT - 537)) | (1 << (InceptorOracleParser.KW_BULK_EXCEPTIONS - 537)) | (1 << (InceptorOracleParser.KW_REVERSE - 537)) | (1 << (InceptorOracleParser.KW_SAVE - 537)) | (1 << (InceptorOracleParser.KW_EXCEPTIONS - 537)) | (1 << (InceptorOracleParser.KW_INDICES - 537)) | (1 << (InceptorOracleParser.KW_REF - 537)) | (1 << (InceptorOracleParser.KW_YEARS - 537)))) !== 0) || ((((_la - 569)) & ~0x1f) == 0 && ((1 << (_la - 569)) & ((1 << (InceptorOracleParser.KW_MONTHS - 569)) | (1 << (InceptorOracleParser.KW_DAYS - 569)) | (1 << (InceptorOracleParser.KW_HOURS - 569)) | (1 << (InceptorOracleParser.KW_MINUTES - 569)) | (1 << (InceptorOracleParser.KW_SECONDS - 569)))) !== 0)) {
	                this.state = 3844;
	                localctx.parttype = this.partTypeExpr();
	            }

	            this.state = 3848;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_EXTENDED) {
	                this.state = 3847;
	                localctx.isExtended = this.match(InceptorOracleParser.KW_EXTENDED);
	            }

	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3850;
	            this.match(InceptorOracleParser.KW_LOCKS);
	            this.state = 3851;
	            this.match(InceptorOracleParser.KW_DATABASE);

	            this.state = 3852;
	            localctx.dbName = this.match(InceptorOracleParser.Identifier);
	            this.state = 3854;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_EXTENDED) {
	                this.state = 3853;
	                localctx.isExtended = this.match(InceptorOracleParser.KW_EXTENDED);
	            }

	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3857;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_FORMATTED) {
	                this.state = 3856;
	                localctx.showOptions = this.match(InceptorOracleParser.KW_FORMATTED);
	            }

	            this.state = 3859;
	            _la = this._input.LA(1);
	            if(!(_la===InceptorOracleParser.KW_INDEX || _la===InceptorOracleParser.KW_INDEXES)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 3860;
	            this.match(InceptorOracleParser.KW_ON);
	            this.state = 3861;
	            this.showStmtIdentifier();
	            this.state = 3864;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_FROM || _la===InceptorOracleParser.KW_IN) {
	                this.state = 3862;
	                _la = this._input.LA(1);
	                if(!(_la===InceptorOracleParser.KW_FROM || _la===InceptorOracleParser.KW_IN)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 3863;
	                localctx.db_name = this.identifier();
	            }

	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3866;
	            this.match(InceptorOracleParser.KW_COMPACTIONS);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 3867;
	            this.match(InceptorOracleParser.KW_TRANSACTIONS);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 3868;
	            this.match(InceptorOracleParser.KW_CONF);
	            this.state = 3869;
	            this.match(InceptorOracleParser.StringLiteral);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 3870;
	            this.match(InceptorOracleParser.KW_DATABASE);
	            this.state = 3871;
	            this.match(InceptorOracleParser.KW_LINKS);
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 3872;
	            this.match(InceptorOracleParser.KW_COMPACT);
	            this.state = 3873;
	            this.match(InceptorOracleParser.KW_BLACKLIST);
	            this.state = 3875;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.Identifier) {
	                this.state = 3874;
	                localctx.dbName = this.match(InceptorOracleParser.Identifier);
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	metastoreCheck() {
	    let localctx = new MetastoreCheckContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 528, InceptorOracleParser.RULE_metastoreCheck);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3879;
	        this.match(InceptorOracleParser.KW_MSCK);
	        this.state = 3881;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_REPAIR) {
	            this.state = 3880;
	            localctx.repair = this.match(InceptorOracleParser.KW_REPAIR);
	        }

	        this.state = 3895;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_TABLE) {
	            this.state = 3883;
	            this.match(InceptorOracleParser.KW_TABLE);
	            this.state = 3884;
	            localctx.table = this.identifier();
	            this.state = 3886;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_PARTITION) {
	                this.state = 3885;
	                this.partitionSpec();
	            }

	            this.state = 3892;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===InceptorOracleParser.COMMA) {
	                this.state = 3888;
	                this.match(InceptorOracleParser.COMMA);
	                this.state = 3889;
	                this.partitionSpec();
	                this.state = 3894;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropViewStatement() {
	    let localctx = new DropViewStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 530, InceptorOracleParser.RULE_dropViewStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3897;
	        this.match(InceptorOracleParser.KW_DROP);
	        this.state = 3898;
	        this.match(InceptorOracleParser.KW_VIEW);
	        this.state = 3900;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_IF) {
	            this.state = 3899;
	            this.ifExists();
	        }

	        this.state = 3902;
	        this.viewName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropMaterializedViewStatement() {
	    let localctx = new DropMaterializedViewStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 532, InceptorOracleParser.RULE_dropMaterializedViewStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3904;
	        this.match(InceptorOracleParser.KW_DROP);
	        this.state = 3905;
	        this.match(InceptorOracleParser.KW_MATERIALIZED);
	        this.state = 3906;
	        this.match(InceptorOracleParser.KW_VIEW);
	        this.state = 3908;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_IF) {
	            this.state = 3907;
	            this.ifExists();
	        }

	        this.state = 3910;
	        this.viewName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createFunctionStatement() {
	    let localctx = new CreateFunctionStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 534, InceptorOracleParser.RULE_createFunctionStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3912;
	        this.functionType();
	        this.state = 3913;
	        this.match(InceptorOracleParser.KW_FUNCTION);
	        this.state = 3915;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_IF) {
	            this.state = 3914;
	            this.ifNotExists();
	        }

	        this.state = 3917;
	        this.identifier();
	        this.state = 3918;
	        this.match(InceptorOracleParser.KW_AS);
	        this.state = 3919;
	        this.match(InceptorOracleParser.StringLiteral);
	        this.state = 3922;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_USING) {
	            this.state = 3920;
	            this.match(InceptorOracleParser.KW_USING);
	            this.state = 3921;
	            localctx.rList = this.resourceList();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createMacroStatement() {
	    let localctx = new CreateMacroStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 536, InceptorOracleParser.RULE_createMacroStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3924;
	        this.match(InceptorOracleParser.KW_CREATE);
	        this.state = 3925;
	        this.match(InceptorOracleParser.KW_TEMPORARY);
	        this.state = 3926;
	        this.match(InceptorOracleParser.KW_MACRO);
	        this.state = 3927;
	        this.match(InceptorOracleParser.Identifier);
	        this.state = 3928;
	        this.match(InceptorOracleParser.LPAREN);
	        this.state = 3930;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << InceptorOracleParser.KW_TRUE) | (1 << InceptorOracleParser.KW_FALSE) | (1 << InceptorOracleParser.KW_ALL) | (1 << InceptorOracleParser.KW_LIKE) | (1 << InceptorOracleParser.KW_NO) | (1 << InceptorOracleParser.KW_ANY) | (1 << InceptorOracleParser.KW_EXISTS) | (1 << InceptorOracleParser.KW_ASC) | (1 << InceptorOracleParser.KW_DESC) | (1 << InceptorOracleParser.KW_ORDER) | (1 << InceptorOracleParser.KW_GROUP) | (1 << InceptorOracleParser.KW_INCREMENT) | (1 << InceptorOracleParser.KW_BY) | (1 << InceptorOracleParser.KW_HASH) | (1 << InceptorOracleParser.KW_INSERT) | (1 << InceptorOracleParser.KW_OVERWRITE) | (1 << InceptorOracleParser.KW_OUTER))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (InceptorOracleParser.KW_STREAMJOB - 33)) | (1 << (InceptorOracleParser.KW_STREAMJOBS - 33)) | (1 << (InceptorOracleParser.KW_AT - 33)) | (1 << (InceptorOracleParser.KW_LEFT - 33)) | (1 << (InceptorOracleParser.KW_RIGHT - 33)) | (1 << (InceptorOracleParser.KW_FULL - 33)) | (1 << (InceptorOracleParser.KW_PARTITION - 33)) | (1 << (InceptorOracleParser.KW_PARTITIONS - 33)) | (1 << (InceptorOracleParser.KW_PATTERN - 33)) | (1 << (InceptorOracleParser.KW_TABLE - 33)) | (1 << (InceptorOracleParser.KW_TABLES - 33)) | (1 << (InceptorOracleParser.KW_SEQUENCE - 33)) | (1 << (InceptorOracleParser.KW_SEQUENCES - 33)) | (1 << (InceptorOracleParser.KW_COLUMNS - 33)) | (1 << (InceptorOracleParser.KW_INDEX - 33)) | (1 << (InceptorOracleParser.KW_INDEXES - 33)) | (1 << (InceptorOracleParser.KW_REBUILD - 33)) | (1 << (InceptorOracleParser.KW_FUNCTIONS - 33)) | (1 << (InceptorOracleParser.KW_SHOW - 33)) | (1 << (InceptorOracleParser.KW_MSCK - 33)) | (1 << (InceptorOracleParser.KW_REPAIR - 33)) | (1 << (InceptorOracleParser.KW_DIRECTORY - 33)) | (1 << (InceptorOracleParser.KW_LOCAL - 33)) | (1 << (InceptorOracleParser.KW_GLOBAL - 33)) | (1 << (InceptorOracleParser.KW_USING - 33)) | (1 << (InceptorOracleParser.KW_CLUSTER - 33)) | (1 << (InceptorOracleParser.KW_DISTRIBUTE - 33)) | (1 << (InceptorOracleParser.KW_SORT - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (InceptorOracleParser.KW_UNION - 65)) | (1 << (InceptorOracleParser.KW_LOAD - 65)) | (1 << (InceptorOracleParser.KW_EXPORT - 65)) | (1 << (InceptorOracleParser.KW_IMPORT - 65)) | (1 << (InceptorOracleParser.KW_DATA - 65)) | (1 << (InceptorOracleParser.KW_INPATH - 65)) | (1 << (InceptorOracleParser.KW_IS - 65)) | (1 << (InceptorOracleParser.KW_NULLS - 65)) | (1 << (InceptorOracleParser.KW_CREATE - 65)) | (1 << (InceptorOracleParser.KW_EXTERNAL - 65)) | (1 << (InceptorOracleParser.KW_ALTER - 65)) | (1 << (InceptorOracleParser.KW_CHANGE - 65)) | (1 << (InceptorOracleParser.KW_FIRST - 65)) | (1 << (InceptorOracleParser.KW_LAST - 65)) | (1 << (InceptorOracleParser.KW_AFTER - 65)) | (1 << (InceptorOracleParser.KW_DESCRIBE - 65)) | (1 << (InceptorOracleParser.KW_DROP - 65)) | (1 << (InceptorOracleParser.KW_RENAME - 65)) | (1 << (InceptorOracleParser.KW_IGNORE - 65)) | (1 << (InceptorOracleParser.KW_RESPECT - 65)) | (1 << (InceptorOracleParser.KW_PROTECTION - 65)) | (1 << (InceptorOracleParser.KW_TO - 65)) | (1 << (InceptorOracleParser.KW_COMMENT - 65)) | (1 << (InceptorOracleParser.KW_PROMPT - 65)) | (1 << (InceptorOracleParser.KW_SPOOL - 65)) | (1 << (InceptorOracleParser.KW_BOOLEAN - 65)) | (1 << (InceptorOracleParser.KW_TINYINT - 65)) | (1 << (InceptorOracleParser.KW_BYTE - 65)) | (1 << (InceptorOracleParser.KW_SMALLINT - 65)) | (1 << (InceptorOracleParser.KW_INT - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (InceptorOracleParser.KW_BIGINT - 97)) | (1 << (InceptorOracleParser.KW_FLOAT - 97)) | (1 << (InceptorOracleParser.KW_DOUBLE - 97)) | (1 << (InceptorOracleParser.KW_DATE - 97)) | (1 << (InceptorOracleParser.KW_DATETIME - 97)) | (1 << (InceptorOracleParser.KW_TIMESTAMP - 97)) | (1 << (InceptorOracleParser.KW_TIME - 97)) | (1 << (InceptorOracleParser.KW_DECIMAL - 97)) | (1 << (InceptorOracleParser.KW_STRING - 97)) | (1 << (InceptorOracleParser.KW_GEO - 97)) | (1 << (InceptorOracleParser.KW_ARRAY - 97)) | (1 << (InceptorOracleParser.KW_STRUCT - 97)) | (1 << (InceptorOracleParser.KW_UNIONTYPE - 97)) | (1 << (InceptorOracleParser.KW_PARTITIONED - 97)) | (1 << (InceptorOracleParser.KW_ROUTED - 97)) | (1 << (InceptorOracleParser.KW_CLUSTERED - 97)) | (1 << (InceptorOracleParser.KW_SORTED - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (InceptorOracleParser.KW_NEXT - 129)) | (1 << (InceptorOracleParser.KW_NEXTVALUE - 129)) | (1 << (InceptorOracleParser.KW_BUCKETS - 129)) | (1 << (InceptorOracleParser.KW_ROW - 129)) | (1 << (InceptorOracleParser.KW_ROWS - 129)) | (1 << (InceptorOracleParser.KW_FORMAT - 129)) | (1 << (InceptorOracleParser.KW_DELIMITED - 129)) | (1 << (InceptorOracleParser.KW_FIELDS - 129)) | (1 << (InceptorOracleParser.KW_TERMINATED - 129)) | (1 << (InceptorOracleParser.KW_ESCAPED - 129)) | (1 << (InceptorOracleParser.KW_COLLECTION - 129)) | (1 << (InceptorOracleParser.KW_ITEMS - 129)) | (1 << (InceptorOracleParser.KW_KEYS - 129)) | (1 << (InceptorOracleParser.KW_KEY_TYPE - 129)) | (1 << (InceptorOracleParser.KW_LINES - 129)) | (1 << (InceptorOracleParser.KW_STORED - 129)) | (1 << (InceptorOracleParser.KW_FILEFORMAT - 129)) | (1 << (InceptorOracleParser.KW_SEQUENCEFILE - 129)) | (1 << (InceptorOracleParser.KW_TEXTFILE - 129)) | (1 << (InceptorOracleParser.KW_CSVFILE - 129)) | (1 << (InceptorOracleParser.KW_FWCFILE - 129)) | (1 << (InceptorOracleParser.KW_RCFILE - 129)) | (1 << (InceptorOracleParser.KW_ORCFILE - 129)) | (1 << (InceptorOracleParser.KW_HOLODESK - 129)) | (1 << (InceptorOracleParser.KW_STELLARDB - 129)) | (1 << (InceptorOracleParser.KW_ORCTRANSACTIONFILE - 129)) | (1 << (InceptorOracleParser.KW_PARQUET - 129)))) !== 0) || ((((_la - 161)) & ~0x1f) == 0 && ((1 << (_la - 161)) & ((1 << (InceptorOracleParser.KW_HYPERDRIVE - 161)) | (1 << (InceptorOracleParser.KW_ESDRIVE - 161)) | (1 << (InceptorOracleParser.KW_INPUTFORMAT - 161)) | (1 << (InceptorOracleParser.KW_OUTPUTFORMAT - 161)) | (1 << (InceptorOracleParser.KW_INPUTDRIVER - 161)) | (1 << (InceptorOracleParser.KW_OUTPUTDRIVER - 161)) | (1 << (InceptorOracleParser.KW_OFFLINE - 161)) | (1 << (InceptorOracleParser.KW_ENABLE - 161)) | (1 << (InceptorOracleParser.KW_DISABLE - 161)) | (1 << (InceptorOracleParser.KW_READONLY - 161)) | (1 << (InceptorOracleParser.KW_NO_DROP - 161)) | (1 << (InceptorOracleParser.KW_LOCATION - 161)) | (1 << (InceptorOracleParser.KW_BUCKET - 161)) | (1 << (InceptorOracleParser.KW_OUT - 161)) | (1 << (InceptorOracleParser.KW_OF - 161)) | (1 << (InceptorOracleParser.KW_PERCENT - 161)) | (1 << (InceptorOracleParser.KW_ADD - 161)) | (1 << (InceptorOracleParser.KW_REPLACE - 161)) | (1 << (InceptorOracleParser.KW_RLIKE - 161)) | (1 << (InceptorOracleParser.KW_REGEXP - 161)) | (1 << (InceptorOracleParser.KW_TEMPORARY - 161)) | (1 << (InceptorOracleParser.KW_RESOURCE - 161)) | (1 << (InceptorOracleParser.KW_RELOAD - 161)) | (1 << (InceptorOracleParser.KW_EXPLAIN - 161)) | (1 << (InceptorOracleParser.KW_FORMATTED - 161)) | (1 << (InceptorOracleParser.KW_PRETTY - 161)) | (1 << (InceptorOracleParser.KW_DEPENDENCY - 161)))) !== 0) || ((((_la - 193)) & ~0x1f) == 0 && ((1 << (_la - 193)) & ((1 << (InceptorOracleParser.KW_LOGICAL - 193)) | (1 << (InceptorOracleParser.KW_COST - 193)) | (1 << (InceptorOracleParser.KW_SERDE - 193)) | (1 << (InceptorOracleParser.KW_WITH - 193)) | (1 << (InceptorOracleParser.KW_WITHIN - 193)) | (1 << (InceptorOracleParser.KW_DEFERRED - 193)) | (1 << (InceptorOracleParser.KW_SERDEPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_DBPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_LIMIT - 193)) | (1 << (InceptorOracleParser.KW_SET - 193)) | (1 << (InceptorOracleParser.KW_UNSET - 193)) | (1 << (InceptorOracleParser.KW_TBLPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_IDXPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_VALUE_TYPE - 193)) | (1 << (InceptorOracleParser.KW_ELEM_TYPE - 193)) | (1 << (InceptorOracleParser.KW_PRIOR - 193)) | (1 << (InceptorOracleParser.KW_NOCYCLE - 193)) | (1 << (InceptorOracleParser.KW_MAPJOIN - 193)) | (1 << (InceptorOracleParser.KW_COMBINE - 193)) | (1 << (InceptorOracleParser.KW_COMBINE_STRUCT_INDEX - 193)) | (1 << (InceptorOracleParser.KW_GLKJOIN - 193)) | (1 << (InceptorOracleParser.KW_USE_INDEX - 193)))) !== 0) || ((((_la - 225)) & ~0x1f) == 0 && ((1 << (_la - 225)) & ((1 << (InceptorOracleParser.KW_STARGATE - 225)) | (1 << (InceptorOracleParser.KW_USE_BULKLOAD - 225)) | (1 << (InceptorOracleParser.KW_ADHOC - 225)) | (1 << (InceptorOracleParser.KW_PRECOMPILE - 225)) | (1 << (InceptorOracleParser.KW_STREAMTABLE - 225)) | (1 << (InceptorOracleParser.KW_STREAM - 225)) | (1 << (InceptorOracleParser.KW_RULEBASE - 225)) | (1 << (InceptorOracleParser.KW_RULEBASES - 225)) | (1 << (InceptorOracleParser.KW_RULE - 225)) | (1 << (InceptorOracleParser.KW_RULES - 225)) | (1 << (InceptorOracleParser.KW_MEET - 225)) | (1 << (InceptorOracleParser.KW_MUST - 225)) | (1 << (InceptorOracleParser.KW_MUSTNOT - 225)) | (1 << (InceptorOracleParser.KW_POLICY - 225)) | (1 << (InceptorOracleParser.KW_POLICIES - 225)) | (1 << (InceptorOracleParser.KW_REMOVE - 225)) | (1 << (InceptorOracleParser.KW_POLICYKEY - 225)) | (1 << (InceptorOracleParser.KW_POLICY_RULE - 225)) | (1 << (InceptorOracleParser.KW_LOOKUP - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTION - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTIONS - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTION_PROPERTIES - 225)) | (1 << (InceptorOracleParser.KW_HOLD_DDLTIME - 225)) | (1 << (InceptorOracleParser.KW_CLUSTERSTATUS - 225)))) !== 0) || ((((_la - 257)) & ~0x1f) == 0 && ((1 << (_la - 257)) & ((1 << (InceptorOracleParser.KW_UTC - 257)) | (1 << (InceptorOracleParser.KW_UTCTIMESTAMP - 257)) | (1 << (InceptorOracleParser.KW_LONG - 257)) | (1 << (InceptorOracleParser.KW_DELETE - 257)) | (1 << (InceptorOracleParser.KW_PLUS - 257)) | (1 << (InceptorOracleParser.KW_MINUS - 257)) | (1 << (InceptorOracleParser.KW_OP_CONCAT - 257)) | (1 << (InceptorOracleParser.KW_FETCH - 257)) | (1 << (InceptorOracleParser.KW_INTERSECT - 257)) | (1 << (InceptorOracleParser.KW_VIEW - 257)) | (1 << (InceptorOracleParser.KW_IN - 257)) | (1 << (InceptorOracleParser.KW_DATABASES - 257)) | (1 << (InceptorOracleParser.KW_MATERIALIZED - 257)) | (1 << (InceptorOracleParser.KW_SCHEMA - 257)) | (1 << (InceptorOracleParser.KW_SCHEMAS - 257)) | (1 << (InceptorOracleParser.KW_GRANT - 257)) | (1 << (InceptorOracleParser.KW_REVOKE - 257)) | (1 << (InceptorOracleParser.KW_SSL - 257)) | (1 << (InceptorOracleParser.KW_UNDO - 257)) | (1 << (InceptorOracleParser.KW_LOCK - 257)) | (1 << (InceptorOracleParser.KW_LOCKS - 257)) | (1 << (InceptorOracleParser.KW_UNLOCK - 257)) | (1 << (InceptorOracleParser.KW_SHARED - 257)) | (1 << (InceptorOracleParser.KW_EXCLUSIVE - 257)) | (1 << (InceptorOracleParser.KW_PROCEDURE - 257)) | (1 << (InceptorOracleParser.KW_UNSIGNED - 257)) | (1 << (InceptorOracleParser.KW_WHILE - 257)) | (1 << (InceptorOracleParser.KW_READ - 257)) | (1 << (InceptorOracleParser.KW_READS - 257)))) !== 0) || ((((_la - 289)) & ~0x1f) == 0 && ((1 << (_la - 289)) & ((1 << (InceptorOracleParser.KW_PURGE - 289)) | (1 << (InceptorOracleParser.KW_RANGE - 289)) | (1 << (InceptorOracleParser.KW_ANALYZE - 289)) | (1 << (InceptorOracleParser.KW_BEFORE - 289)) | (1 << (InceptorOracleParser.KW_BETWEEN - 289)) | (1 << (InceptorOracleParser.KW_BOTH - 289)) | (1 << (InceptorOracleParser.KW_BINARY - 289)) | (1 << (InceptorOracleParser.KW_DEFAULT - 289)) | (1 << (InceptorOracleParser.KW_TYPE - 289)) | (1 << (InceptorOracleParser.KW_TRIGGER - 289)) | (1 << (InceptorOracleParser.KW_RECORDREADER - 289)) | (1 << (InceptorOracleParser.KW_RECORDWRITER - 289)) | (1 << (InceptorOracleParser.KW_SEMI - 289)) | (1 << (InceptorOracleParser.KW_LATERAL - 289)) | (1 << (InceptorOracleParser.KW_TOUCH - 289)) | (1 << (InceptorOracleParser.KW_ARCHIVE - 289)) | (1 << (InceptorOracleParser.KW_UNARCHIVE - 289)) | (1 << (InceptorOracleParser.KW_COMPUTE - 289)) | (1 << (InceptorOracleParser.KW_STATISTICS - 289)) | (1 << (InceptorOracleParser.KW_USE - 289)) | (1 << (InceptorOracleParser.KW_OPTION - 289)) | (1 << (InceptorOracleParser.KW_CONCATENATE - 289)) | (1 << (InceptorOracleParser.KW_SHOW_DATABASE - 289)) | (1 << (InceptorOracleParser.KW_UPDATE - 289)) | (1 << (InceptorOracleParser.KW_RESTRICT - 289)) | (1 << (InceptorOracleParser.KW_CASCADE - 289)) | (1 << (InceptorOracleParser.KW_SKEWED - 289)))) !== 0) || ((((_la - 323)) & ~0x1f) == 0 && ((1 << (_la - 323)) & ((1 << (InceptorOracleParser.KW_DIRECTORIES - 323)) | (1 << (InceptorOracleParser.KW_WINDOWRESET - 323)) | (1 << (InceptorOracleParser.KW_SESSIONSTART - 323)) | (1 << (InceptorOracleParser.KW_SESSIONSTOP - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE_DISCARD - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE_COMPLETE - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOW - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOWSLIDELENGTH - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOWSEPARATED - 323)) | (1 << (InceptorOracleParser.KW_FOLLOWEDBY - 323)) | (1 << (InceptorOracleParser.KW_NOTFOLLOWEDBY - 323)) | (1 << (InceptorOracleParser.KW_NOTNEXT - 323)) | (1 << (InceptorOracleParser.KW_PATTERN_TIMES - 323)) | (1 << (InceptorOracleParser.KW_CURRVALUE - 323)) | (1 << (InceptorOracleParser.KW_GROUPING - 323)) | (1 << (InceptorOracleParser.KW_SETS - 323)))) !== 0) || ((((_la - 355)) & ~0x1f) == 0 && ((1 << (_la - 355)) & ((1 << (InceptorOracleParser.KW_TRUNCATE - 355)) | (1 << (InceptorOracleParser.KW_NOSCAN - 355)) | (1 << (InceptorOracleParser.KW_USER - 355)) | (1 << (InceptorOracleParser.KW_QUOTA - 355)) | (1 << (InceptorOracleParser.KW_PERMISSION - 355)) | (1 << (InceptorOracleParser.KW_ROLE - 355)) | (1 << (InceptorOracleParser.KW_ROLES - 355)) | (1 << (InceptorOracleParser.KW_INNER - 355)) | (1 << (InceptorOracleParser.KW_ADMIN - 355)) | (1 << (InceptorOracleParser.KW_OWNER - 355)) | (1 << (InceptorOracleParser.KW_PRINCIPALS - 355)) | (1 << (InceptorOracleParser.KW_CONSTANT - 355)) | (1 << (InceptorOracleParser.KW_CONSTRAINT - 355)) | (1 << (InceptorOracleParser.KW_VALUES - 355)) | (1 << (InceptorOracleParser.KW_YEAR - 355)) | (1 << (InceptorOracleParser.KW_MONTH - 355)) | (1 << (InceptorOracleParser.KW_DAY - 355)) | (1 << (InceptorOracleParser.KW_MINUTE - 355)) | (1 << (InceptorOracleParser.KW_HOUR - 355)))) !== 0) || ((((_la - 387)) & ~0x1f) == 0 && ((1 << (_la - 387)) & ((1 << (InceptorOracleParser.KW_SECOND - 387)) | (1 << (InceptorOracleParser.KW_INTERVAL - 387)) | (1 << (InceptorOracleParser.KW_SYSDATE - 387)) | (1 << (InceptorOracleParser.KW_NOMAXVALUE - 387)) | (1 << (InceptorOracleParser.KW_MINVALUE - 387)) | (1 << (InceptorOracleParser.KW_NOMINVALUE - 387)) | (1 << (InceptorOracleParser.KW_CYCLE - 387)) | (1 << (InceptorOracleParser.KW_CACHE - 387)) | (1 << (InceptorOracleParser.KW_CACHEDMETRIC - 387)) | (1 << (InceptorOracleParser.KW_CACHEDMETRICS - 387)) | (1 << (InceptorOracleParser.KW_NOCACHE - 387)) | (1 << (InceptorOracleParser.KW_NOORDER - 387)) | (1 << (InceptorOracleParser.KW_MERGE - 387)) | (1 << (InceptorOracleParser.KW_PLANT - 387)) | (1 << (InceptorOracleParser.KW_IMMEDIATE - 387)) | (1 << (InceptorOracleParser.KW_COMPACT - 387)) | (1 << (InceptorOracleParser.KW_STOP - 387)) | (1 << (InceptorOracleParser.KW_LIST - 387)))) !== 0) || ((((_la - 419)) & ~0x1f) == 0 && ((1 << (_la - 419)) & ((1 << (InceptorOracleParser.KW_TRANSACTION - 419)) | (1 << (InceptorOracleParser.KW_WORK - 419)) | (1 << (InceptorOracleParser.KW_SPACE - 419)) | (1 << (InceptorOracleParser.KW_CONF - 419)) | (1 << (InceptorOracleParser.KW_DEFINED - 419)) | (1 << (InceptorOracleParser.KW_INTEGER - 419)) | (1 << (InceptorOracleParser.KW_ONLY - 419)) | (1 << (InceptorOracleParser.KW_SERVER - 419)) | (1 << (InceptorOracleParser.KW_TRANSACTIONS - 419)) | (1 << (InceptorOracleParser.KW_URI - 419)) | (1 << (InceptorOracleParser.KW_WRITE - 419)) | (1 << (InceptorOracleParser.KW_FACL - 419)) | (1 << (InceptorOracleParser.KW_FOUND - 419)) | (1 << (InceptorOracleParser.KW_LEVEL - 419)) | (1 << (InceptorOracleParser.KW_PUBLIC - 419)) | (1 << (InceptorOracleParser.KW_LINKS - 419)) | (1 << (InceptorOracleParser.KW_CONNECT - 419)) | (1 << (InceptorOracleParser.KW_APPLICATION - 419)) | (1 << (InceptorOracleParser.KW_APPLICATIONS - 419)) | (1 << (InceptorOracleParser.KW_APP - 419)) | (1 << (InceptorOracleParser.KW_APPS - 419)) | (1 << (InceptorOracleParser.KW_INFINITE - 419)))) !== 0) || ((((_la - 451)) & ~0x1f) == 0 && ((1 << (_la - 451)) & ((1 << (InceptorOracleParser.KW_WAIT - 451)) | (1 << (InceptorOracleParser.KW_PRIMARY - 451)) | (1 << (InceptorOracleParser.KW_FOREIGN - 451)) | (1 << (InceptorOracleParser.KW_REFERENCES - 451)) | (1 << (InceptorOracleParser.KW_VALIDATE - 451)) | (1 << (InceptorOracleParser.KW_NOVALIDATE - 451)) | (1 << (InceptorOracleParser.KW_RELY - 451)) | (1 << (InceptorOracleParser.KW_NORELY - 451)) | (1 << (InceptorOracleParser.KW_KEY - 451)) | (1 << (InceptorOracleParser.KW_SEGMENT - 451)) | (1 << (InceptorOracleParser.KW_LENGTH - 451)) | (1 << (InceptorOracleParser.KW_ATTACH - 451)) | (1 << (InceptorOracleParser.KW_DETTACH - 451)) | (1 << (InceptorOracleParser.KW_SHARD - 451)) | (1 << (InceptorOracleParser.KW_NUM - 451)) | (1 << (InceptorOracleParser.KW_FULLTEXT - 451)) | (1 << (InceptorOracleParser.KW_TABLESIZE - 451)) | (1 << (InceptorOracleParser.KW_TABLET - 451)) | (1 << (InceptorOracleParser.KW_CAPACITY - 451)) | (1 << (InceptorOracleParser.KW_ANALYZER - 451)) | (1 << (InceptorOracleParser.KW_SYNC - 451)) | (1 << (InceptorOracleParser.KW_NO_INDEX - 451)) | (1 << (InceptorOracleParser.KW_LOG - 451)) | (1 << (InceptorOracleParser.KW_FILE - 451)) | (1 << (InceptorOracleParser.KW_JAR - 451)) | (1 << (InceptorOracleParser.KW_PERMANENT - 451)))) !== 0) || _la===InceptorOracleParser.KW_SCHEDULER || _la===InceptorOracleParser.KW_MODE || ((((_la - 537)) & ~0x1f) == 0 && ((1 << (_la - 537)) & ((1 << (InceptorOracleParser.Identifier - 537)) | (1 << (InceptorOracleParser.KW_NOCOPY - 537)) | (1 << (InceptorOracleParser.KW_VARRAY - 537)) | (1 << (InceptorOracleParser.KW_PACKAGE - 537)) | (1 << (InceptorOracleParser.KW_PACKAGES - 537)) | (1 << (InceptorOracleParser.KW_BODY - 537)) | (1 << (InceptorOracleParser.KW_ISOPEN - 537)) | (1 << (InceptorOracleParser.KW_NOTFOUND - 537)) | (1 << (InceptorOracleParser.KW_ROWCOUNT - 537)) | (1 << (InceptorOracleParser.KW_BULK_ROWCOUNT - 537)) | (1 << (InceptorOracleParser.KW_BULK_EXCEPTIONS - 537)) | (1 << (InceptorOracleParser.KW_REVERSE - 537)) | (1 << (InceptorOracleParser.KW_SAVE - 537)) | (1 << (InceptorOracleParser.KW_EXCEPTIONS - 537)) | (1 << (InceptorOracleParser.KW_INDICES - 537)) | (1 << (InceptorOracleParser.KW_REF - 537)) | (1 << (InceptorOracleParser.KW_YEARS - 537)))) !== 0) || ((((_la - 569)) & ~0x1f) == 0 && ((1 << (_la - 569)) & ((1 << (InceptorOracleParser.KW_MONTHS - 569)) | (1 << (InceptorOracleParser.KW_DAYS - 569)) | (1 << (InceptorOracleParser.KW_HOURS - 569)) | (1 << (InceptorOracleParser.KW_MINUTES - 569)) | (1 << (InceptorOracleParser.KW_SECONDS - 569)))) !== 0)) {
	            this.state = 3929;
	            this.columnNameTypeList();
	        }

	        this.state = 3932;
	        this.match(InceptorOracleParser.RPAREN);
	        this.state = 3933;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createIndexStatement() {
	    let localctx = new CreateIndexStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 538, InceptorOracleParser.RULE_createIndexStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3935;
	        this.match(InceptorOracleParser.KW_CREATE);
	        this.state = 3936;
	        this.match(InceptorOracleParser.KW_INDEX);
	        this.state = 3937;
	        localctx.indexName = this.identifier();
	        this.state = 3938;
	        this.match(InceptorOracleParser.KW_ON);
	        this.state = 3939;
	        this.match(InceptorOracleParser.KW_TABLE);
	        this.state = 3940;
	        localctx.tab = this.tableName();
	        this.state = 3941;
	        this.match(InceptorOracleParser.LPAREN);
	        this.state = 3942;
	        localctx.indexedCols = this.columnNameList();
	        this.state = 3943;
	        this.match(InceptorOracleParser.RPAREN);
	        this.state = 3944;
	        this.match(InceptorOracleParser.KW_AS);
	        this.state = 3945;
	        localctx.typeName = this.match(InceptorOracleParser.StringLiteral);
	        this.state = 3947;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_WITH) {
	            this.state = 3946;
	            this.autoRebuild();
	        }

	        this.state = 3950;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_IDXPROPERTIES) {
	            this.state = 3949;
	            this.indexPropertiesPrefixed();
	        }

	        this.state = 3953;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_IN) {
	            this.state = 3952;
	            this.indexTblName();
	        }

	        this.state = 3956;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_ROW) {
	            this.state = 3955;
	            this.tableRowFormat();
	        }

	        this.state = 3959;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_STORED) {
	            this.state = 3958;
	            this.tableFileFormat();
	        }

	        this.state = 3962;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_LOCATION) {
	            this.state = 3961;
	            this.tableLocation();
	        }

	        this.state = 3965;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_TBLPROPERTIES) {
	            this.state = 3964;
	            this.tablePropertiesPrefixed();
	        }

	        this.state = 3968;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_COMMENT) {
	            this.state = 3967;
	            this.indexComment();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropIndexStatement() {
	    let localctx = new DropIndexStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 540, InceptorOracleParser.RULE_dropIndexStatement);
	    var _la = 0; // Token type
	    try {
	        this.state = 3987;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,344,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3970;
	            this.match(InceptorOracleParser.KW_DROP);
	            this.state = 3971;
	            this.match(InceptorOracleParser.KW_INDEX);
	            this.state = 3973;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_IF) {
	                this.state = 3972;
	                this.ifExists();
	            }

	            this.state = 3975;
	            localctx.indexName = this.identifier();
	            this.state = 3976;
	            this.match(InceptorOracleParser.KW_ON);
	            this.state = 3977;
	            localctx.tab = this.tableName();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3979;
	            this.match(InceptorOracleParser.KW_DROP);
	            this.state = 3980;
	            this.match(InceptorOracleParser.KW_FULLTEXT);
	            this.state = 3981;
	            this.match(InceptorOracleParser.KW_INDEX);
	            this.state = 3983;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_IF) {
	                this.state = 3982;
	                this.ifExists();
	            }

	            this.state = 3985;
	            this.match(InceptorOracleParser.KW_ON);
	            this.state = 3986;
	            localctx.tab = this.tableName();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropFunctionStatement() {
	    let localctx = new DropFunctionStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 542, InceptorOracleParser.RULE_dropFunctionStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3989;
	        this.match(InceptorOracleParser.KW_DROP);
	        this.state = 3990;
	        this.functionType();
	        this.state = 3991;
	        this.match(InceptorOracleParser.KW_FUNCTION);
	        this.state = 3993;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_IF) {
	            this.state = 3992;
	            this.ifExists();
	        }

	        this.state = 3995;
	        this.identifier();
	        this.state = 3997;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_WITH) {
	            this.state = 3996;
	            this.cleanClassLoader();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reloadFunctionStatement() {
	    let localctx = new ReloadFunctionStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 544, InceptorOracleParser.RULE_reloadFunctionStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3999;
	        this.match(InceptorOracleParser.KW_RELOAD);
	        this.state = 4000;
	        this.match(InceptorOracleParser.KW_FUNCTION);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropMacroStatement() {
	    let localctx = new DropMacroStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 546, InceptorOracleParser.RULE_dropMacroStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4002;
	        this.match(InceptorOracleParser.KW_DROP);
	        this.state = 4003;
	        this.match(InceptorOracleParser.KW_TEMPORARY);
	        this.state = 4004;
	        this.match(InceptorOracleParser.KW_MACRO);
	        this.state = 4006;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_IF) {
	            this.state = 4005;
	            this.ifExists();
	        }

	        this.state = 4008;
	        this.match(InceptorOracleParser.Identifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionType() {
	    let localctx = new FunctionTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 548, InceptorOracleParser.RULE_functionType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4010;
	        _la = this._input.LA(1);
	        if(!(_la===InceptorOracleParser.KW_TEMPORARY || _la===InceptorOracleParser.KW_PERMANENT)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cleanClassLoader() {
	    let localctx = new CleanClassLoaderContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 550, InceptorOracleParser.RULE_cleanClassLoader);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4012;
	        this.match(InceptorOracleParser.KW_WITH);
	        this.state = 4013;
	        this.match(InceptorOracleParser.KW_RESOURCE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	analyzeStatement() {
	    let localctx = new AnalyzeStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 552, InceptorOracleParser.RULE_analyzeStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4015;
	        this.match(InceptorOracleParser.KW_ANALYZE);
	        this.state = 4016;
	        this.match(InceptorOracleParser.KW_TABLE);

	        this.state = 4017;
	        localctx.parttype = this.tableOrPartition();
	        this.state = 4018;
	        this.match(InceptorOracleParser.KW_COMPUTE);
	        this.state = 4019;
	        this.match(InceptorOracleParser.KW_STATISTICS);
	        this.state = 4027;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case InceptorOracleParser.KW_NOSCAN:
	        	this.state = 4020;
	        	localctx.noscan = this.match(InceptorOracleParser.KW_NOSCAN);
	        	break;
	        case InceptorOracleParser.KW_PARTIALSCAN:
	        	this.state = 4021;
	        	localctx.partialscan = this.match(InceptorOracleParser.KW_PARTIALSCAN);
	        	break;
	        case InceptorOracleParser.KW_FOR:
	        	this.state = 4022;
	        	this.match(InceptorOracleParser.KW_FOR);
	        	this.state = 4023;
	        	this.match(InceptorOracleParser.KW_COLUMNS);
	        	this.state = 4025;
	        	this._errHandler.sync(this);
	        	_la = this._input.LA(1);
	        	if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << InceptorOracleParser.KW_TRUE) | (1 << InceptorOracleParser.KW_FALSE) | (1 << InceptorOracleParser.KW_ALL) | (1 << InceptorOracleParser.KW_LIKE) | (1 << InceptorOracleParser.KW_NO) | (1 << InceptorOracleParser.KW_ANY) | (1 << InceptorOracleParser.KW_EXISTS) | (1 << InceptorOracleParser.KW_ASC) | (1 << InceptorOracleParser.KW_DESC) | (1 << InceptorOracleParser.KW_ORDER) | (1 << InceptorOracleParser.KW_GROUP) | (1 << InceptorOracleParser.KW_INCREMENT) | (1 << InceptorOracleParser.KW_BY) | (1 << InceptorOracleParser.KW_HASH) | (1 << InceptorOracleParser.KW_INSERT) | (1 << InceptorOracleParser.KW_OVERWRITE) | (1 << InceptorOracleParser.KW_OUTER))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (InceptorOracleParser.KW_STREAMJOB - 33)) | (1 << (InceptorOracleParser.KW_STREAMJOBS - 33)) | (1 << (InceptorOracleParser.KW_AT - 33)) | (1 << (InceptorOracleParser.KW_LEFT - 33)) | (1 << (InceptorOracleParser.KW_RIGHT - 33)) | (1 << (InceptorOracleParser.KW_FULL - 33)) | (1 << (InceptorOracleParser.KW_PARTITION - 33)) | (1 << (InceptorOracleParser.KW_PARTITIONS - 33)) | (1 << (InceptorOracleParser.KW_PATTERN - 33)) | (1 << (InceptorOracleParser.KW_TABLE - 33)) | (1 << (InceptorOracleParser.KW_TABLES - 33)) | (1 << (InceptorOracleParser.KW_SEQUENCE - 33)) | (1 << (InceptorOracleParser.KW_SEQUENCES - 33)) | (1 << (InceptorOracleParser.KW_COLUMNS - 33)) | (1 << (InceptorOracleParser.KW_INDEX - 33)) | (1 << (InceptorOracleParser.KW_INDEXES - 33)) | (1 << (InceptorOracleParser.KW_REBUILD - 33)) | (1 << (InceptorOracleParser.KW_FUNCTIONS - 33)) | (1 << (InceptorOracleParser.KW_SHOW - 33)) | (1 << (InceptorOracleParser.KW_MSCK - 33)) | (1 << (InceptorOracleParser.KW_REPAIR - 33)) | (1 << (InceptorOracleParser.KW_DIRECTORY - 33)) | (1 << (InceptorOracleParser.KW_LOCAL - 33)) | (1 << (InceptorOracleParser.KW_GLOBAL - 33)) | (1 << (InceptorOracleParser.KW_USING - 33)) | (1 << (InceptorOracleParser.KW_CLUSTER - 33)) | (1 << (InceptorOracleParser.KW_DISTRIBUTE - 33)) | (1 << (InceptorOracleParser.KW_SORT - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (InceptorOracleParser.KW_UNION - 65)) | (1 << (InceptorOracleParser.KW_LOAD - 65)) | (1 << (InceptorOracleParser.KW_EXPORT - 65)) | (1 << (InceptorOracleParser.KW_IMPORT - 65)) | (1 << (InceptorOracleParser.KW_DATA - 65)) | (1 << (InceptorOracleParser.KW_INPATH - 65)) | (1 << (InceptorOracleParser.KW_IS - 65)) | (1 << (InceptorOracleParser.KW_NULLS - 65)) | (1 << (InceptorOracleParser.KW_CREATE - 65)) | (1 << (InceptorOracleParser.KW_EXTERNAL - 65)) | (1 << (InceptorOracleParser.KW_ALTER - 65)) | (1 << (InceptorOracleParser.KW_CHANGE - 65)) | (1 << (InceptorOracleParser.KW_FIRST - 65)) | (1 << (InceptorOracleParser.KW_LAST - 65)) | (1 << (InceptorOracleParser.KW_AFTER - 65)) | (1 << (InceptorOracleParser.KW_DESCRIBE - 65)) | (1 << (InceptorOracleParser.KW_DROP - 65)) | (1 << (InceptorOracleParser.KW_RENAME - 65)) | (1 << (InceptorOracleParser.KW_IGNORE - 65)) | (1 << (InceptorOracleParser.KW_RESPECT - 65)) | (1 << (InceptorOracleParser.KW_PROTECTION - 65)) | (1 << (InceptorOracleParser.KW_TO - 65)) | (1 << (InceptorOracleParser.KW_COMMENT - 65)) | (1 << (InceptorOracleParser.KW_PROMPT - 65)) | (1 << (InceptorOracleParser.KW_SPOOL - 65)) | (1 << (InceptorOracleParser.KW_BOOLEAN - 65)) | (1 << (InceptorOracleParser.KW_TINYINT - 65)) | (1 << (InceptorOracleParser.KW_BYTE - 65)) | (1 << (InceptorOracleParser.KW_SMALLINT - 65)) | (1 << (InceptorOracleParser.KW_INT - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (InceptorOracleParser.KW_BIGINT - 97)) | (1 << (InceptorOracleParser.KW_FLOAT - 97)) | (1 << (InceptorOracleParser.KW_DOUBLE - 97)) | (1 << (InceptorOracleParser.KW_DATE - 97)) | (1 << (InceptorOracleParser.KW_DATETIME - 97)) | (1 << (InceptorOracleParser.KW_TIMESTAMP - 97)) | (1 << (InceptorOracleParser.KW_TIME - 97)) | (1 << (InceptorOracleParser.KW_DECIMAL - 97)) | (1 << (InceptorOracleParser.KW_STRING - 97)) | (1 << (InceptorOracleParser.KW_GEO - 97)) | (1 << (InceptorOracleParser.KW_ARRAY - 97)) | (1 << (InceptorOracleParser.KW_STRUCT - 97)) | (1 << (InceptorOracleParser.KW_UNIONTYPE - 97)) | (1 << (InceptorOracleParser.KW_PARTITIONED - 97)) | (1 << (InceptorOracleParser.KW_ROUTED - 97)) | (1 << (InceptorOracleParser.KW_CLUSTERED - 97)) | (1 << (InceptorOracleParser.KW_SORTED - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (InceptorOracleParser.KW_NEXT - 129)) | (1 << (InceptorOracleParser.KW_NEXTVALUE - 129)) | (1 << (InceptorOracleParser.KW_BUCKETS - 129)) | (1 << (InceptorOracleParser.KW_ROW - 129)) | (1 << (InceptorOracleParser.KW_ROWS - 129)) | (1 << (InceptorOracleParser.KW_FORMAT - 129)) | (1 << (InceptorOracleParser.KW_DELIMITED - 129)) | (1 << (InceptorOracleParser.KW_FIELDS - 129)) | (1 << (InceptorOracleParser.KW_TERMINATED - 129)) | (1 << (InceptorOracleParser.KW_ESCAPED - 129)) | (1 << (InceptorOracleParser.KW_COLLECTION - 129)) | (1 << (InceptorOracleParser.KW_ITEMS - 129)) | (1 << (InceptorOracleParser.KW_KEYS - 129)) | (1 << (InceptorOracleParser.KW_KEY_TYPE - 129)) | (1 << (InceptorOracleParser.KW_LINES - 129)) | (1 << (InceptorOracleParser.KW_STORED - 129)) | (1 << (InceptorOracleParser.KW_FILEFORMAT - 129)) | (1 << (InceptorOracleParser.KW_SEQUENCEFILE - 129)) | (1 << (InceptorOracleParser.KW_TEXTFILE - 129)) | (1 << (InceptorOracleParser.KW_CSVFILE - 129)) | (1 << (InceptorOracleParser.KW_FWCFILE - 129)) | (1 << (InceptorOracleParser.KW_RCFILE - 129)) | (1 << (InceptorOracleParser.KW_ORCFILE - 129)) | (1 << (InceptorOracleParser.KW_HOLODESK - 129)) | (1 << (InceptorOracleParser.KW_STELLARDB - 129)) | (1 << (InceptorOracleParser.KW_ORCTRANSACTIONFILE - 129)) | (1 << (InceptorOracleParser.KW_PARQUET - 129)))) !== 0) || ((((_la - 161)) & ~0x1f) == 0 && ((1 << (_la - 161)) & ((1 << (InceptorOracleParser.KW_HYPERDRIVE - 161)) | (1 << (InceptorOracleParser.KW_ESDRIVE - 161)) | (1 << (InceptorOracleParser.KW_INPUTFORMAT - 161)) | (1 << (InceptorOracleParser.KW_OUTPUTFORMAT - 161)) | (1 << (InceptorOracleParser.KW_INPUTDRIVER - 161)) | (1 << (InceptorOracleParser.KW_OUTPUTDRIVER - 161)) | (1 << (InceptorOracleParser.KW_OFFLINE - 161)) | (1 << (InceptorOracleParser.KW_ENABLE - 161)) | (1 << (InceptorOracleParser.KW_DISABLE - 161)) | (1 << (InceptorOracleParser.KW_READONLY - 161)) | (1 << (InceptorOracleParser.KW_NO_DROP - 161)) | (1 << (InceptorOracleParser.KW_LOCATION - 161)) | (1 << (InceptorOracleParser.KW_BUCKET - 161)) | (1 << (InceptorOracleParser.KW_OUT - 161)) | (1 << (InceptorOracleParser.KW_OF - 161)) | (1 << (InceptorOracleParser.KW_PERCENT - 161)) | (1 << (InceptorOracleParser.KW_ADD - 161)) | (1 << (InceptorOracleParser.KW_REPLACE - 161)) | (1 << (InceptorOracleParser.KW_RLIKE - 161)) | (1 << (InceptorOracleParser.KW_REGEXP - 161)) | (1 << (InceptorOracleParser.KW_TEMPORARY - 161)) | (1 << (InceptorOracleParser.KW_RESOURCE - 161)) | (1 << (InceptorOracleParser.KW_RELOAD - 161)) | (1 << (InceptorOracleParser.KW_EXPLAIN - 161)) | (1 << (InceptorOracleParser.KW_FORMATTED - 161)) | (1 << (InceptorOracleParser.KW_PRETTY - 161)) | (1 << (InceptorOracleParser.KW_DEPENDENCY - 161)))) !== 0) || ((((_la - 193)) & ~0x1f) == 0 && ((1 << (_la - 193)) & ((1 << (InceptorOracleParser.KW_LOGICAL - 193)) | (1 << (InceptorOracleParser.KW_COST - 193)) | (1 << (InceptorOracleParser.KW_SERDE - 193)) | (1 << (InceptorOracleParser.KW_WITH - 193)) | (1 << (InceptorOracleParser.KW_WITHIN - 193)) | (1 << (InceptorOracleParser.KW_DEFERRED - 193)) | (1 << (InceptorOracleParser.KW_SERDEPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_DBPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_LIMIT - 193)) | (1 << (InceptorOracleParser.KW_SET - 193)) | (1 << (InceptorOracleParser.KW_UNSET - 193)) | (1 << (InceptorOracleParser.KW_TBLPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_IDXPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_VALUE_TYPE - 193)) | (1 << (InceptorOracleParser.KW_ELEM_TYPE - 193)) | (1 << (InceptorOracleParser.KW_PRIOR - 193)) | (1 << (InceptorOracleParser.KW_NOCYCLE - 193)) | (1 << (InceptorOracleParser.KW_MAPJOIN - 193)) | (1 << (InceptorOracleParser.KW_COMBINE - 193)) | (1 << (InceptorOracleParser.KW_COMBINE_STRUCT_INDEX - 193)) | (1 << (InceptorOracleParser.KW_GLKJOIN - 193)) | (1 << (InceptorOracleParser.KW_USE_INDEX - 193)))) !== 0) || ((((_la - 225)) & ~0x1f) == 0 && ((1 << (_la - 225)) & ((1 << (InceptorOracleParser.KW_STARGATE - 225)) | (1 << (InceptorOracleParser.KW_USE_BULKLOAD - 225)) | (1 << (InceptorOracleParser.KW_ADHOC - 225)) | (1 << (InceptorOracleParser.KW_PRECOMPILE - 225)) | (1 << (InceptorOracleParser.KW_STREAMTABLE - 225)) | (1 << (InceptorOracleParser.KW_STREAM - 225)) | (1 << (InceptorOracleParser.KW_RULEBASE - 225)) | (1 << (InceptorOracleParser.KW_RULEBASES - 225)) | (1 << (InceptorOracleParser.KW_RULE - 225)) | (1 << (InceptorOracleParser.KW_RULES - 225)) | (1 << (InceptorOracleParser.KW_MEET - 225)) | (1 << (InceptorOracleParser.KW_MUST - 225)) | (1 << (InceptorOracleParser.KW_MUSTNOT - 225)) | (1 << (InceptorOracleParser.KW_POLICY - 225)) | (1 << (InceptorOracleParser.KW_POLICIES - 225)) | (1 << (InceptorOracleParser.KW_REMOVE - 225)) | (1 << (InceptorOracleParser.KW_POLICYKEY - 225)) | (1 << (InceptorOracleParser.KW_POLICY_RULE - 225)) | (1 << (InceptorOracleParser.KW_LOOKUP - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTION - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTIONS - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTION_PROPERTIES - 225)) | (1 << (InceptorOracleParser.KW_HOLD_DDLTIME - 225)) | (1 << (InceptorOracleParser.KW_CLUSTERSTATUS - 225)))) !== 0) || ((((_la - 257)) & ~0x1f) == 0 && ((1 << (_la - 257)) & ((1 << (InceptorOracleParser.KW_UTC - 257)) | (1 << (InceptorOracleParser.KW_UTCTIMESTAMP - 257)) | (1 << (InceptorOracleParser.KW_LONG - 257)) | (1 << (InceptorOracleParser.KW_DELETE - 257)) | (1 << (InceptorOracleParser.KW_PLUS - 257)) | (1 << (InceptorOracleParser.KW_MINUS - 257)) | (1 << (InceptorOracleParser.KW_OP_CONCAT - 257)) | (1 << (InceptorOracleParser.KW_FETCH - 257)) | (1 << (InceptorOracleParser.KW_INTERSECT - 257)) | (1 << (InceptorOracleParser.KW_VIEW - 257)) | (1 << (InceptorOracleParser.KW_IN - 257)) | (1 << (InceptorOracleParser.KW_DATABASES - 257)) | (1 << (InceptorOracleParser.KW_MATERIALIZED - 257)) | (1 << (InceptorOracleParser.KW_SCHEMA - 257)) | (1 << (InceptorOracleParser.KW_SCHEMAS - 257)) | (1 << (InceptorOracleParser.KW_GRANT - 257)) | (1 << (InceptorOracleParser.KW_REVOKE - 257)) | (1 << (InceptorOracleParser.KW_SSL - 257)) | (1 << (InceptorOracleParser.KW_UNDO - 257)) | (1 << (InceptorOracleParser.KW_LOCK - 257)) | (1 << (InceptorOracleParser.KW_LOCKS - 257)) | (1 << (InceptorOracleParser.KW_UNLOCK - 257)) | (1 << (InceptorOracleParser.KW_SHARED - 257)) | (1 << (InceptorOracleParser.KW_EXCLUSIVE - 257)) | (1 << (InceptorOracleParser.KW_PROCEDURE - 257)) | (1 << (InceptorOracleParser.KW_UNSIGNED - 257)) | (1 << (InceptorOracleParser.KW_WHILE - 257)) | (1 << (InceptorOracleParser.KW_READ - 257)) | (1 << (InceptorOracleParser.KW_READS - 257)))) !== 0) || ((((_la - 289)) & ~0x1f) == 0 && ((1 << (_la - 289)) & ((1 << (InceptorOracleParser.KW_PURGE - 289)) | (1 << (InceptorOracleParser.KW_RANGE - 289)) | (1 << (InceptorOracleParser.KW_ANALYZE - 289)) | (1 << (InceptorOracleParser.KW_BEFORE - 289)) | (1 << (InceptorOracleParser.KW_BETWEEN - 289)) | (1 << (InceptorOracleParser.KW_BOTH - 289)) | (1 << (InceptorOracleParser.KW_BINARY - 289)) | (1 << (InceptorOracleParser.KW_DEFAULT - 289)) | (1 << (InceptorOracleParser.KW_TYPE - 289)) | (1 << (InceptorOracleParser.KW_TRIGGER - 289)) | (1 << (InceptorOracleParser.KW_RECORDREADER - 289)) | (1 << (InceptorOracleParser.KW_RECORDWRITER - 289)) | (1 << (InceptorOracleParser.KW_SEMI - 289)) | (1 << (InceptorOracleParser.KW_LATERAL - 289)) | (1 << (InceptorOracleParser.KW_TOUCH - 289)) | (1 << (InceptorOracleParser.KW_ARCHIVE - 289)) | (1 << (InceptorOracleParser.KW_UNARCHIVE - 289)) | (1 << (InceptorOracleParser.KW_COMPUTE - 289)) | (1 << (InceptorOracleParser.KW_STATISTICS - 289)) | (1 << (InceptorOracleParser.KW_USE - 289)) | (1 << (InceptorOracleParser.KW_OPTION - 289)) | (1 << (InceptorOracleParser.KW_CONCATENATE - 289)) | (1 << (InceptorOracleParser.KW_SHOW_DATABASE - 289)) | (1 << (InceptorOracleParser.KW_UPDATE - 289)) | (1 << (InceptorOracleParser.KW_RESTRICT - 289)) | (1 << (InceptorOracleParser.KW_CASCADE - 289)) | (1 << (InceptorOracleParser.KW_SKEWED - 289)))) !== 0) || ((((_la - 323)) & ~0x1f) == 0 && ((1 << (_la - 323)) & ((1 << (InceptorOracleParser.KW_DIRECTORIES - 323)) | (1 << (InceptorOracleParser.KW_WINDOWRESET - 323)) | (1 << (InceptorOracleParser.KW_SESSIONSTART - 323)) | (1 << (InceptorOracleParser.KW_SESSIONSTOP - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE_DISCARD - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE_COMPLETE - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOW - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOWSLIDELENGTH - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOWSEPARATED - 323)) | (1 << (InceptorOracleParser.KW_FOLLOWEDBY - 323)) | (1 << (InceptorOracleParser.KW_NOTFOLLOWEDBY - 323)) | (1 << (InceptorOracleParser.KW_NOTNEXT - 323)) | (1 << (InceptorOracleParser.KW_PATTERN_TIMES - 323)) | (1 << (InceptorOracleParser.KW_CURRVALUE - 323)) | (1 << (InceptorOracleParser.KW_GROUPING - 323)) | (1 << (InceptorOracleParser.KW_SETS - 323)))) !== 0) || ((((_la - 355)) & ~0x1f) == 0 && ((1 << (_la - 355)) & ((1 << (InceptorOracleParser.KW_TRUNCATE - 355)) | (1 << (InceptorOracleParser.KW_NOSCAN - 355)) | (1 << (InceptorOracleParser.KW_USER - 355)) | (1 << (InceptorOracleParser.KW_QUOTA - 355)) | (1 << (InceptorOracleParser.KW_PERMISSION - 355)) | (1 << (InceptorOracleParser.KW_ROLE - 355)) | (1 << (InceptorOracleParser.KW_ROLES - 355)) | (1 << (InceptorOracleParser.KW_INNER - 355)) | (1 << (InceptorOracleParser.KW_ADMIN - 355)) | (1 << (InceptorOracleParser.KW_OWNER - 355)) | (1 << (InceptorOracleParser.KW_PRINCIPALS - 355)) | (1 << (InceptorOracleParser.KW_CONSTANT - 355)) | (1 << (InceptorOracleParser.KW_CONSTRAINT - 355)) | (1 << (InceptorOracleParser.KW_VALUES - 355)) | (1 << (InceptorOracleParser.KW_YEAR - 355)) | (1 << (InceptorOracleParser.KW_MONTH - 355)) | (1 << (InceptorOracleParser.KW_DAY - 355)) | (1 << (InceptorOracleParser.KW_MINUTE - 355)) | (1 << (InceptorOracleParser.KW_HOUR - 355)))) !== 0) || ((((_la - 387)) & ~0x1f) == 0 && ((1 << (_la - 387)) & ((1 << (InceptorOracleParser.KW_SECOND - 387)) | (1 << (InceptorOracleParser.KW_INTERVAL - 387)) | (1 << (InceptorOracleParser.KW_SYSDATE - 387)) | (1 << (InceptorOracleParser.KW_NOMAXVALUE - 387)) | (1 << (InceptorOracleParser.KW_MINVALUE - 387)) | (1 << (InceptorOracleParser.KW_NOMINVALUE - 387)) | (1 << (InceptorOracleParser.KW_CYCLE - 387)) | (1 << (InceptorOracleParser.KW_CACHE - 387)) | (1 << (InceptorOracleParser.KW_CACHEDMETRIC - 387)) | (1 << (InceptorOracleParser.KW_CACHEDMETRICS - 387)) | (1 << (InceptorOracleParser.KW_NOCACHE - 387)) | (1 << (InceptorOracleParser.KW_NOORDER - 387)) | (1 << (InceptorOracleParser.KW_MERGE - 387)) | (1 << (InceptorOracleParser.KW_PLANT - 387)) | (1 << (InceptorOracleParser.KW_IMMEDIATE - 387)) | (1 << (InceptorOracleParser.KW_COMPACT - 387)) | (1 << (InceptorOracleParser.KW_STOP - 387)) | (1 << (InceptorOracleParser.KW_LIST - 387)))) !== 0) || ((((_la - 419)) & ~0x1f) == 0 && ((1 << (_la - 419)) & ((1 << (InceptorOracleParser.KW_TRANSACTION - 419)) | (1 << (InceptorOracleParser.KW_WORK - 419)) | (1 << (InceptorOracleParser.KW_SPACE - 419)) | (1 << (InceptorOracleParser.KW_CONF - 419)) | (1 << (InceptorOracleParser.KW_DEFINED - 419)) | (1 << (InceptorOracleParser.KW_INTEGER - 419)) | (1 << (InceptorOracleParser.KW_ONLY - 419)) | (1 << (InceptorOracleParser.KW_SERVER - 419)) | (1 << (InceptorOracleParser.KW_TRANSACTIONS - 419)) | (1 << (InceptorOracleParser.KW_URI - 419)) | (1 << (InceptorOracleParser.KW_WRITE - 419)) | (1 << (InceptorOracleParser.KW_FACL - 419)) | (1 << (InceptorOracleParser.KW_FOUND - 419)) | (1 << (InceptorOracleParser.KW_LEVEL - 419)) | (1 << (InceptorOracleParser.KW_PUBLIC - 419)) | (1 << (InceptorOracleParser.KW_LINKS - 419)) | (1 << (InceptorOracleParser.KW_CONNECT - 419)) | (1 << (InceptorOracleParser.KW_APPLICATION - 419)) | (1 << (InceptorOracleParser.KW_APPLICATIONS - 419)) | (1 << (InceptorOracleParser.KW_APP - 419)) | (1 << (InceptorOracleParser.KW_APPS - 419)) | (1 << (InceptorOracleParser.KW_INFINITE - 419)))) !== 0) || ((((_la - 451)) & ~0x1f) == 0 && ((1 << (_la - 451)) & ((1 << (InceptorOracleParser.KW_WAIT - 451)) | (1 << (InceptorOracleParser.KW_PRIMARY - 451)) | (1 << (InceptorOracleParser.KW_FOREIGN - 451)) | (1 << (InceptorOracleParser.KW_REFERENCES - 451)) | (1 << (InceptorOracleParser.KW_VALIDATE - 451)) | (1 << (InceptorOracleParser.KW_NOVALIDATE - 451)) | (1 << (InceptorOracleParser.KW_RELY - 451)) | (1 << (InceptorOracleParser.KW_NORELY - 451)) | (1 << (InceptorOracleParser.KW_KEY - 451)) | (1 << (InceptorOracleParser.KW_SEGMENT - 451)) | (1 << (InceptorOracleParser.KW_LENGTH - 451)) | (1 << (InceptorOracleParser.KW_ATTACH - 451)) | (1 << (InceptorOracleParser.KW_DETTACH - 451)) | (1 << (InceptorOracleParser.KW_SHARD - 451)) | (1 << (InceptorOracleParser.KW_NUM - 451)) | (1 << (InceptorOracleParser.KW_FULLTEXT - 451)) | (1 << (InceptorOracleParser.KW_TABLESIZE - 451)) | (1 << (InceptorOracleParser.KW_TABLET - 451)) | (1 << (InceptorOracleParser.KW_CAPACITY - 451)) | (1 << (InceptorOracleParser.KW_ANALYZER - 451)) | (1 << (InceptorOracleParser.KW_SYNC - 451)) | (1 << (InceptorOracleParser.KW_NO_INDEX - 451)) | (1 << (InceptorOracleParser.KW_LOG - 451)) | (1 << (InceptorOracleParser.KW_FILE - 451)) | (1 << (InceptorOracleParser.KW_JAR - 451)) | (1 << (InceptorOracleParser.KW_PERMANENT - 451)))) !== 0) || _la===InceptorOracleParser.KW_SCHEDULER || _la===InceptorOracleParser.KW_MODE || ((((_la - 537)) & ~0x1f) == 0 && ((1 << (_la - 537)) & ((1 << (InceptorOracleParser.Identifier - 537)) | (1 << (InceptorOracleParser.KW_NOCOPY - 537)) | (1 << (InceptorOracleParser.KW_VARRAY - 537)) | (1 << (InceptorOracleParser.KW_PACKAGE - 537)) | (1 << (InceptorOracleParser.KW_PACKAGES - 537)) | (1 << (InceptorOracleParser.KW_BODY - 537)) | (1 << (InceptorOracleParser.KW_ISOPEN - 537)) | (1 << (InceptorOracleParser.KW_NOTFOUND - 537)) | (1 << (InceptorOracleParser.KW_ROWCOUNT - 537)) | (1 << (InceptorOracleParser.KW_BULK_ROWCOUNT - 537)) | (1 << (InceptorOracleParser.KW_BULK_EXCEPTIONS - 537)) | (1 << (InceptorOracleParser.KW_REVERSE - 537)) | (1 << (InceptorOracleParser.KW_SAVE - 537)) | (1 << (InceptorOracleParser.KW_EXCEPTIONS - 537)) | (1 << (InceptorOracleParser.KW_INDICES - 537)) | (1 << (InceptorOracleParser.KW_REF - 537)) | (1 << (InceptorOracleParser.KW_YEARS - 537)))) !== 0) || ((((_la - 569)) & ~0x1f) == 0 && ((1 << (_la - 569)) & ((1 << (InceptorOracleParser.KW_MONTHS - 569)) | (1 << (InceptorOracleParser.KW_DAYS - 569)) | (1 << (InceptorOracleParser.KW_HOURS - 569)) | (1 << (InceptorOracleParser.KW_MINUTES - 569)) | (1 << (InceptorOracleParser.KW_SECONDS - 569)))) !== 0)) {
	        	    this.state = 4024;
	        	    localctx.statsColumnName = this.columnNameList();
	        	}

	        	break;
	        case InceptorOracleParser.EOF:
	        case InceptorOracleParser.SEMICOLON:
	        	break;
	        default:
	        	break;
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lockStatement() {
	    let localctx = new LockStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 554, InceptorOracleParser.RULE_lockStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4029;
	        this.match(InceptorOracleParser.KW_LOCK);
	        this.state = 4030;
	        this.match(InceptorOracleParser.KW_TABLE);
	        this.state = 4031;
	        this.tableName();
	        this.state = 4033;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_PARTITION) {
	            this.state = 4032;
	            this.partitionSpec();
	        }

	        this.state = 4035;
	        this.lockMode();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lockDatabase() {
	    let localctx = new LockDatabaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 556, InceptorOracleParser.RULE_lockDatabase);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4037;
	        this.match(InceptorOracleParser.KW_LOCK);
	        this.state = 4038;
	        this.match(InceptorOracleParser.KW_DATABASE);

	        this.state = 4039;
	        localctx.dbName = this.match(InceptorOracleParser.Identifier);
	        this.state = 4040;
	        this.lockMode();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unlockStatement() {
	    let localctx = new UnlockStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 558, InceptorOracleParser.RULE_unlockStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4042;
	        this.match(InceptorOracleParser.KW_UNLOCK);
	        this.state = 4043;
	        this.match(InceptorOracleParser.KW_TABLE);
	        this.state = 4044;
	        this.tableName();
	        this.state = 4046;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_PARTITION) {
	            this.state = 4045;
	            this.partitionSpec();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unlockDatabase() {
	    let localctx = new UnlockDatabaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 560, InceptorOracleParser.RULE_unlockDatabase);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4048;
	        this.match(InceptorOracleParser.KW_UNLOCK);
	        this.state = 4049;
	        this.match(InceptorOracleParser.KW_DATABASE);

	        this.state = 4050;
	        localctx.dbName = this.match(InceptorOracleParser.Identifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createRoleStatement() {
	    let localctx = new CreateRoleStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 562, InceptorOracleParser.RULE_createRoleStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4052;
	        this.match(InceptorOracleParser.KW_CREATE);
	        this.state = 4053;
	        this.match(InceptorOracleParser.KW_ROLE);
	        this.state = 4054;
	        localctx.roleName = this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropRoleStatement() {
	    let localctx = new DropRoleStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 564, InceptorOracleParser.RULE_dropRoleStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4056;
	        this.match(InceptorOracleParser.KW_DROP);
	        this.state = 4057;
	        this.match(InceptorOracleParser.KW_ROLE);
	        this.state = 4058;
	        localctx.roleName = this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	grantPrivileges() {
	    let localctx = new GrantPrivilegesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 566, InceptorOracleParser.RULE_grantPrivileges);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4060;
	        this.match(InceptorOracleParser.KW_GRANT);
	        this.state = 4061;
	        localctx.privList = this.privilegeList();
	        this.state = 4063;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_ON) {
	            this.state = 4062;
	            this.privilegeObject();
	        }

	        this.state = 4065;
	        this.match(InceptorOracleParser.KW_TO);
	        this.state = 4066;
	        this.principalSpecification();
	        this.state = 4068;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_WITH) {
	            this.state = 4067;
	            this.withGrantOption();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	revokePrivileges() {
	    let localctx = new RevokePrivilegesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 568, InceptorOracleParser.RULE_revokePrivileges);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4070;
	        this.match(InceptorOracleParser.KW_REVOKE);
	        this.state = 4072;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_GRANT) {
	            this.state = 4071;
	            this.grantOptionFor();
	        }

	        this.state = 4074;
	        this.privilegeList();
	        this.state = 4076;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_ON) {
	            this.state = 4075;
	            this.privilegeObject();
	        }

	        this.state = 4078;
	        this.match(InceptorOracleParser.KW_FROM);
	        this.state = 4079;
	        this.principalSpecification();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showQuota() {
	    let localctx = new ShowQuotaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 570, InceptorOracleParser.RULE_showQuota);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4081;
	        this.match(InceptorOracleParser.KW_SHOW);
	        this.state = 4082;
	        this.match(InceptorOracleParser.KW_QUOTA);
	        this.state = 4084;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_USER) {
	            this.state = 4083;
	            this.quotaUser();
	        }

	        this.state = 4088;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_ON) {
	            this.state = 4086;
	            this.match(InceptorOracleParser.KW_ON);
	            this.state = 4087;
	            this.quotaDb();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showFacl() {
	    let localctx = new ShowFaclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 572, InceptorOracleParser.RULE_showFacl);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4090;
	        this.match(InceptorOracleParser.KW_SHOW);
	        this.state = 4091;
	        this.match(InceptorOracleParser.KW_FACL);
	        this.state = 4093;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_GROUP || _la===InceptorOracleParser.KW_USER) {
	            this.state = 4092;
	            this.userOrGroup();
	        }

	        this.state = 4095;
	        this.match(InceptorOracleParser.KW_ON);
	        this.state = 4096;
	        this.match(InceptorOracleParser.KW_TABLE);
	        this.state = 4097;
	        this.tableName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showGrants() {
	    let localctx = new ShowGrantsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 574, InceptorOracleParser.RULE_showGrants);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4099;
	        this.match(InceptorOracleParser.KW_SHOW);
	        this.state = 4100;
	        this.match(InceptorOracleParser.KW_GRANT);
	        this.state = 4102;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_GROUP || _la===InceptorOracleParser.KW_USER || _la===InceptorOracleParser.KW_ROLE) {
	            this.state = 4101;
	            this.principalName();
	        }

	        this.state = 4106;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_ON) {
	            this.state = 4104;
	            this.match(InceptorOracleParser.KW_ON);
	            this.state = 4105;
	            this.privilegeIncludeColObject();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showRoleGrants() {
	    let localctx = new ShowRoleGrantsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 576, InceptorOracleParser.RULE_showRoleGrants);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4108;
	        this.match(InceptorOracleParser.KW_SHOW);
	        this.state = 4109;
	        this.match(InceptorOracleParser.KW_ROLE);
	        this.state = 4110;
	        this.match(InceptorOracleParser.KW_GRANT);
	        this.state = 4111;
	        this.principalName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showRolePrincipals() {
	    let localctx = new ShowRolePrincipalsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 578, InceptorOracleParser.RULE_showRolePrincipals);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4113;
	        this.match(InceptorOracleParser.KW_SHOW);
	        this.state = 4114;
	        this.match(InceptorOracleParser.KW_PRINCIPALS);
	        this.state = 4115;
	        localctx.roleName = this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showRoles() {
	    let localctx = new ShowRolesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 580, InceptorOracleParser.RULE_showRoles);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4117;
	        this.match(InceptorOracleParser.KW_SHOW);
	        this.state = 4118;
	        this.match(InceptorOracleParser.KW_ROLES);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showBlacklist() {
	    let localctx = new ShowBlacklistContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 582, InceptorOracleParser.RULE_showBlacklist);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4120;
	        this.match(InceptorOracleParser.KW_SHOW);
	        this.state = 4121;
	        this.match(InceptorOracleParser.KW_BLACKLIST);
	        this.state = 4125;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,361,this._ctx);
	        if(la_===1) {
	            this.state = 4122;
	            this.match(InceptorOracleParser.KW_LIKE);
	            this.state = 4123;
	            this.showStmtIdentifier();

	        } else if(la_===2) {
	            this.state = 4124;
	            this.showStmtIdentifier();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showSchedulerMode() {
	    let localctx = new ShowSchedulerModeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 584, InceptorOracleParser.RULE_showSchedulerMode);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4127;
	        this.match(InceptorOracleParser.KW_SHOW);
	        this.state = 4128;
	        this.match(InceptorOracleParser.KW_SCHEDULER);
	        this.state = 4129;
	        this.match(InceptorOracleParser.KW_MODE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	grantQuota() {
	    let localctx = new GrantQuotaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 586, InceptorOracleParser.RULE_grantQuota);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4131;
	        this.match(InceptorOracleParser.KW_GRANT);
	        this.state = 4132;
	        this.match(InceptorOracleParser.KW_QUOTA);
	        this.state = 4133;
	        this.quotaSpec();
	        this.state = 4136;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_ON) {
	            this.state = 4134;
	            this.match(InceptorOracleParser.KW_ON);
	            this.state = 4135;
	            this.quotaDb();
	        }

	        this.state = 4140;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_TO) {
	            this.state = 4138;
	            this.match(InceptorOracleParser.KW_TO);
	            this.state = 4139;
	            this.quotaUser();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	revokeQuota() {
	    let localctx = new RevokeQuotaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 588, InceptorOracleParser.RULE_revokeQuota);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4142;
	        this.match(InceptorOracleParser.KW_REVOKE);
	        this.state = 4143;
	        this.match(InceptorOracleParser.KW_QUOTA);
	        this.state = 4146;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_ON) {
	            this.state = 4144;
	            this.match(InceptorOracleParser.KW_ON);
	            this.state = 4145;
	            this.quotaDb();
	        }

	        this.state = 4150;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_FROM) {
	            this.state = 4148;
	            this.match(InceptorOracleParser.KW_FROM);
	            this.state = 4149;
	            this.quotaUser();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	faclSpec() {
	    let localctx = new FaclSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 590, InceptorOracleParser.RULE_faclSpec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4152;
	        this.match(InceptorOracleParser.StringLiteral);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	grantFacl() {
	    let localctx = new GrantFaclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 592, InceptorOracleParser.RULE_grantFacl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4154;
	        this.match(InceptorOracleParser.KW_GRANT);
	        this.state = 4155;
	        this.match(InceptorOracleParser.KW_FACL);
	        this.state = 4156;
	        this.faclSpec();
	        this.state = 4157;
	        this.match(InceptorOracleParser.KW_ON);
	        this.state = 4158;
	        this.match(InceptorOracleParser.KW_TABLE);
	        this.state = 4159;
	        this.tableName();
	        this.state = 4160;
	        this.match(InceptorOracleParser.KW_TO);
	        this.state = 4161;
	        this.userOrGroup();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	revokeFacl() {
	    let localctx = new RevokeFaclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 594, InceptorOracleParser.RULE_revokeFacl);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4163;
	        this.match(InceptorOracleParser.KW_REVOKE);
	        this.state = 4164;
	        this.match(InceptorOracleParser.KW_FACL);
	        this.state = 4165;
	        this.match(InceptorOracleParser.KW_ON);
	        this.state = 4166;
	        this.match(InceptorOracleParser.KW_TABLE);
	        this.state = 4167;
	        this.tableName();
	        this.state = 4170;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_FROM) {
	            this.state = 4168;
	            this.match(InceptorOracleParser.KW_FROM);
	            this.state = 4169;
	            this.userOrGroup();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	grantRole() {
	    let localctx = new GrantRoleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 596, InceptorOracleParser.RULE_grantRole);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4172;
	        this.match(InceptorOracleParser.KW_GRANT);
	        this.state = 4174;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,367,this._ctx);
	        if(la_===1) {
	            this.state = 4173;
	            this.match(InceptorOracleParser.KW_ROLE);

	        }
	        this.state = 4176;
	        this.identifier();
	        this.state = 4181;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===InceptorOracleParser.COMMA) {
	            this.state = 4177;
	            this.match(InceptorOracleParser.COMMA);
	            this.state = 4178;
	            this.identifier();
	            this.state = 4183;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 4184;
	        this.match(InceptorOracleParser.KW_TO);
	        this.state = 4185;
	        this.principalSpecification();
	        this.state = 4187;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_WITH) {
	            this.state = 4186;
	            this.withAdminOption();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	revokeRole() {
	    let localctx = new RevokeRoleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 598, InceptorOracleParser.RULE_revokeRole);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4189;
	        this.match(InceptorOracleParser.KW_REVOKE);
	        this.state = 4191;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,370,this._ctx);
	        if(la_===1) {
	            this.state = 4190;
	            this.adminOptionFor();

	        }
	        this.state = 4194;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,371,this._ctx);
	        if(la_===1) {
	            this.state = 4193;
	            this.match(InceptorOracleParser.KW_ROLE);

	        }
	        this.state = 4196;
	        this.identifier();
	        this.state = 4201;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===InceptorOracleParser.COMMA) {
	            this.state = 4197;
	            this.match(InceptorOracleParser.COMMA);
	            this.state = 4198;
	            this.identifier();
	            this.state = 4203;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 4204;
	        this.match(InceptorOracleParser.KW_FROM);
	        this.state = 4205;
	        this.principalSpecification();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showCurrentRole() {
	    let localctx = new ShowCurrentRoleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 600, InceptorOracleParser.RULE_showCurrentRole);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4207;
	        this.match(InceptorOracleParser.KW_SHOW);
	        this.state = 4208;
	        this.match(InceptorOracleParser.KW_CURRENT);
	        this.state = 4209;
	        this.match(InceptorOracleParser.KW_ROLES);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	syncIndex() {
	    let localctx = new SyncIndexContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 602, InceptorOracleParser.RULE_syncIndex);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4211;
	        this.match(InceptorOracleParser.KW_EXEC);
	        this.state = 4212;
	        this.match(InceptorOracleParser.KW_SYNC);
	        this.state = 4213;
	        this.match(InceptorOracleParser.KW_TABLE);
	        this.state = 4214;
	        localctx.tab = this.tableName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	syncRule() {
	    let localctx = new SyncRuleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 604, InceptorOracleParser.RULE_syncRule);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4216;
	        this.match(InceptorOracleParser.KW_EXEC);
	        this.state = 4217;
	        this.match(InceptorOracleParser.KW_SYNC);
	        this.state = 4218;
	        this.match(InceptorOracleParser.KW_RULE);
	        this.state = 4219;
	        localctx.tab = this.tableName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	syncPolicy() {
	    let localctx = new SyncPolicyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 606, InceptorOracleParser.RULE_syncPolicy);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4221;
	        this.match(InceptorOracleParser.KW_EXEC);
	        this.state = 4222;
	        this.match(InceptorOracleParser.KW_SYNC);
	        this.state = 4223;
	        this.match(InceptorOracleParser.KW_POLICY);
	        this.state = 4224;
	        localctx.tab = this.tableName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setRole() {
	    let localctx = new SetRoleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 608, InceptorOracleParser.RULE_setRole);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4226;
	        this.match(InceptorOracleParser.KW_SET);
	        this.state = 4227;
	        this.match(InceptorOracleParser.KW_ROLE);
	        this.state = 4228;
	        localctx.roleName = this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	quotaDb() {
	    let localctx = new QuotaDbContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 610, InceptorOracleParser.RULE_quotaDb);
	    try {
	        this.state = 4234;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case InceptorOracleParser.KW_DATABASE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4230;
	            this.match(InceptorOracleParser.KW_DATABASE);
	            this.state = 4231;
	            this.identifier();
	            break;
	        case InceptorOracleParser.KW_TEMPORARY:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4232;
	            this.match(InceptorOracleParser.KW_TEMPORARY);
	            this.state = 4233;
	            this.match(InceptorOracleParser.KW_SPACE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	quotaUser() {
	    let localctx = new QuotaUserContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 612, InceptorOracleParser.RULE_quotaUser);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4236;
	        this.match(InceptorOracleParser.KW_USER);
	        this.state = 4237;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	userOrGroup() {
	    let localctx = new UserOrGroupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 614, InceptorOracleParser.RULE_userOrGroup);
	    try {
	        this.state = 4243;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case InceptorOracleParser.KW_USER:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4239;
	            this.match(InceptorOracleParser.KW_USER);
	            this.state = 4240;
	            this.identifier();
	            break;
	        case InceptorOracleParser.KW_GROUP:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4241;
	            this.match(InceptorOracleParser.KW_GROUP);
	            this.state = 4242;
	            this.identifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	withGrantOption() {
	    let localctx = new WithGrantOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 616, InceptorOracleParser.RULE_withGrantOption);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4245;
	        this.match(InceptorOracleParser.KW_WITH);
	        this.state = 4246;
	        this.match(InceptorOracleParser.KW_GRANT);
	        this.state = 4247;
	        this.match(InceptorOracleParser.KW_OPTION);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	withAdminOption() {
	    let localctx = new WithAdminOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 618, InceptorOracleParser.RULE_withAdminOption);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4249;
	        this.match(InceptorOracleParser.KW_WITH);
	        this.state = 4250;
	        this.match(InceptorOracleParser.KW_ADMIN);
	        this.state = 4251;
	        this.match(InceptorOracleParser.KW_OPTION);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	adminOptionFor() {
	    let localctx = new AdminOptionForContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 620, InceptorOracleParser.RULE_adminOptionFor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4253;
	        this.match(InceptorOracleParser.KW_ADMIN);
	        this.state = 4254;
	        this.match(InceptorOracleParser.KW_OPTION);
	        this.state = 4255;
	        this.match(InceptorOracleParser.KW_FOR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	quotaSpec() {
	    let localctx = new QuotaSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 622, InceptorOracleParser.RULE_quotaSpec);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4257;
	        _la = this._input.LA(1);
	        if(!(_la===InceptorOracleParser.KW_UNLIMITED || _la===InceptorOracleParser.ByteLengthLiteral)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	privilegeIncludeColObject() {
	    let localctx = new PrivilegeIncludeColObjectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 624, InceptorOracleParser.RULE_privilegeIncludeColObject);
	    try {
	        this.state = 4263;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,375,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4259;
	            this.match(InceptorOracleParser.KW_ALL);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4260;
	            this.match(InceptorOracleParser.KW_ALL);
	            this.state = 4261;
	            this.match(InceptorOracleParser.KW_APP);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4262;
	            this.privObjectCols();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	allTablesInDB() {
	    let localctx = new AllTablesInDBContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 626, InceptorOracleParser.RULE_allTablesInDB);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4266;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,376,this._ctx);
	        if(la_===1) {
	            this.state = 4265;
	            this.match(InceptorOracleParser.KW_TABLE);

	        }
	        this.state = 4268;
	        this.identifier();
	        this.state = 4269;
	        this.match(InceptorOracleParser.DOT);
	        this.state = 4270;
	        this.match(InceptorOracleParser.STAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	privObjectCols() {
	    let localctx = new PrivObjectColsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 628, InceptorOracleParser.RULE_privObjectCols);
	    var _la = 0; // Token type
	    try {
	        this.state = 4304;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,382,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4272;
	            _la = this._input.LA(1);
	            if(!(_la===InceptorOracleParser.KW_DATABASE || _la===InceptorOracleParser.KW_SCHEMA)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 4273;
	            this.identifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4274;
	            _la = this._input.LA(1);
	            if(!(_la===InceptorOracleParser.KW_APPLICATION || _la===InceptorOracleParser.KW_APP)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 4275;
	            this.identifier();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4276;
	            this.allTablesInDB();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4278;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_TABLE) {
	                this.state = 4277;
	                this.match(InceptorOracleParser.KW_TABLE);
	            }

	            this.state = 4280;
	            this.match(InceptorOracleParser.STAR);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4282;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_TABLE) {
	                this.state = 4281;
	                this.match(InceptorOracleParser.KW_TABLE);
	            }

	            this.state = 4284;
	            this.match(InceptorOracleParser.STAR);
	            this.state = 4285;
	            this.match(InceptorOracleParser.DOT);
	            this.state = 4286;
	            this.match(InceptorOracleParser.STAR);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 4288;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,379,this._ctx);
	            if(la_===1) {
	                this.state = 4287;
	                this.match(InceptorOracleParser.KW_TABLE);

	            }
	            this.state = 4290;
	            this.tableName();
	            this.state = 4295;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.LPAREN) {
	                this.state = 4291;
	                this.match(InceptorOracleParser.LPAREN);
	                this.state = 4292;
	                localctx.cols = this.columnNameList();
	                this.state = 4293;
	                this.match(InceptorOracleParser.RPAREN);
	            }

	            this.state = 4298;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_PARTITION) {
	                this.state = 4297;
	                this.partitionSpec();
	            }

	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 4300;
	            this.match(InceptorOracleParser.KW_URI);

	            this.state = 4301;
	            localctx.path = this.match(InceptorOracleParser.StringLiteral);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 4302;
	            this.match(InceptorOracleParser.KW_SERVER);
	            this.state = 4303;
	            this.identifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	grantOptionFor() {
	    let localctx = new GrantOptionForContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 630, InceptorOracleParser.RULE_grantOptionFor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4306;
	        this.match(InceptorOracleParser.KW_GRANT);
	        this.state = 4307;
	        this.match(InceptorOracleParser.KW_OPTION);
	        this.state = 4308;
	        this.match(InceptorOracleParser.KW_FOR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	privilegeList() {
	    let localctx = new PrivilegeListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 632, InceptorOracleParser.RULE_privilegeList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4310;
	        this.privlegeDef();
	        this.state = 4315;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===InceptorOracleParser.COMMA) {
	            this.state = 4311;
	            this.match(InceptorOracleParser.COMMA);
	            this.state = 4312;
	            this.privlegeDef();
	            this.state = 4317;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	privlegeDef() {
	    let localctx = new PrivlegeDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 634, InceptorOracleParser.RULE_privlegeDef);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4318;
	        this.privilegeType();
	        this.state = 4323;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.LPAREN) {
	            this.state = 4319;
	            this.match(InceptorOracleParser.LPAREN);
	            this.state = 4320;
	            localctx.cols = this.columnNameList();
	            this.state = 4321;
	            this.match(InceptorOracleParser.RPAREN);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	privilegeType() {
	    let localctx = new PrivilegeTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 636, InceptorOracleParser.RULE_privilegeType);
	    var _la = 0; // Token type
	    try {
	        this.state = 4341;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,385,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4325;
	            this.match(InceptorOracleParser.KW_ALL);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4326;
	            this.match(InceptorOracleParser.KW_ALTER);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4327;
	            this.match(InceptorOracleParser.KW_UPDATE);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4328;
	            this.match(InceptorOracleParser.KW_CREATE);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4329;
	            this.match(InceptorOracleParser.KW_CREATE);
	            this.state = 4330;
	            _la = this._input.LA(1);
	            if(!(_la===InceptorOracleParser.KW_APPLICATION || _la===InceptorOracleParser.KW_APP)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 4331;
	            this.match(InceptorOracleParser.KW_DROP);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 4332;
	            this.match(InceptorOracleParser.KW_INDEX);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 4333;
	            this.match(InceptorOracleParser.KW_LOCK);
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 4334;
	            this.match(InceptorOracleParser.KW_SELECT);
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 4335;
	            this.match(InceptorOracleParser.KW_SHOW_DATABASE);
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 4336;
	            this.match(InceptorOracleParser.KW_INSERT);
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 4337;
	            this.match(InceptorOracleParser.KW_DELETE);
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 4338;
	            this.match(InceptorOracleParser.KW_START);
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 4339;
	            this.match(InceptorOracleParser.KW_STOP);
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 4340;
	            this.match(InceptorOracleParser.KW_LIST);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	privilegeObject() {
	    let localctx = new PrivilegeObjectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 638, InceptorOracleParser.RULE_privilegeObject);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4343;
	        this.match(InceptorOracleParser.KW_ON);
	        this.state = 4344;
	        this.privObject();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	privObjectType() {
	    let localctx = new PrivObjectTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 640, InceptorOracleParser.RULE_privObjectType);
	    var _la = 0; // Token type
	    try {
	        this.state = 4350;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case InceptorOracleParser.KW_DATABASE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4346;
	            this.match(InceptorOracleParser.KW_DATABASE);
	            break;
	        case InceptorOracleParser.EOF:
	        case InceptorOracleParser.KW_TABLE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4348;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_TABLE) {
	                this.state = 4347;
	                this.match(InceptorOracleParser.KW_TABLE);
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	privObject() {
	    let localctx = new PrivObjectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 642, InceptorOracleParser.RULE_privObject);
	    var _la = 0; // Token type
	    try {
	        this.state = 4378;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,392,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4352;
	            _la = this._input.LA(1);
	            if(!(_la===InceptorOracleParser.KW_DATABASE || _la===InceptorOracleParser.KW_SCHEMA)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 4353;
	            this.identifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4354;
	            this.allTablesInDB();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4356;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_TABLE) {
	                this.state = 4355;
	                this.match(InceptorOracleParser.KW_TABLE);
	            }

	            this.state = 4358;
	            this.match(InceptorOracleParser.STAR);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4360;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_TABLE) {
	                this.state = 4359;
	                this.match(InceptorOracleParser.KW_TABLE);
	            }

	            this.state = 4362;
	            this.match(InceptorOracleParser.STAR);
	            this.state = 4363;
	            this.match(InceptorOracleParser.DOT);
	            this.state = 4364;
	            this.match(InceptorOracleParser.STAR);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4366;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,390,this._ctx);
	            if(la_===1) {
	                this.state = 4365;
	                this.match(InceptorOracleParser.KW_TABLE);

	            }
	            this.state = 4368;
	            this.tableName();
	            this.state = 4370;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_PARTITION) {
	                this.state = 4369;
	                this.partitionSpec();
	            }

	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 4372;
	            _la = this._input.LA(1);
	            if(!(_la===InceptorOracleParser.KW_APPLICATION || _la===InceptorOracleParser.KW_APP)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 4373;
	            this.identifier();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 4374;
	            this.match(InceptorOracleParser.KW_URI);

	            this.state = 4375;
	            localctx.path = this.match(InceptorOracleParser.StringLiteral);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 4376;
	            this.match(InceptorOracleParser.KW_SERVER);
	            this.state = 4377;
	            this.identifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	principalSpecification() {
	    let localctx = new PrincipalSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 644, InceptorOracleParser.RULE_principalSpecification);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4380;
	        this.principalName();
	        this.state = 4385;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===InceptorOracleParser.COMMA) {
	            this.state = 4381;
	            this.match(InceptorOracleParser.COMMA);
	            this.state = 4382;
	            this.principalName();
	            this.state = 4387;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	principalName() {
	    let localctx = new PrincipalNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 646, InceptorOracleParser.RULE_principalName);
	    try {
	        this.state = 4394;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case InceptorOracleParser.KW_USER:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4388;
	            this.match(InceptorOracleParser.KW_USER);
	            this.state = 4389;
	            this.identifier();
	            break;
	        case InceptorOracleParser.KW_GROUP:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4390;
	            this.match(InceptorOracleParser.KW_GROUP);
	            this.state = 4391;
	            this.identifier();
	            break;
	        case InceptorOracleParser.KW_ROLE:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4392;
	            this.match(InceptorOracleParser.KW_ROLE);
	            this.state = 4393;
	            this.identifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lockMode() {
	    let localctx = new LockModeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 648, InceptorOracleParser.RULE_lockMode);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4396;
	        _la = this._input.LA(1);
	        if(!(_la===InceptorOracleParser.KW_SHARED || _la===InceptorOracleParser.KW_EXCLUSIVE)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	indexComment() {
	    let localctx = new IndexCommentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 650, InceptorOracleParser.RULE_indexComment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4398;
	        this.match(InceptorOracleParser.KW_COMMENT);
	        this.state = 4399;
	        localctx.comment = this.match(InceptorOracleParser.StringLiteral);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	autoRebuild() {
	    let localctx = new AutoRebuildContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 652, InceptorOracleParser.RULE_autoRebuild);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4401;
	        this.match(InceptorOracleParser.KW_WITH);
	        this.state = 4402;
	        this.match(InceptorOracleParser.KW_DEFERRED);
	        this.state = 4403;
	        this.match(InceptorOracleParser.KW_REBUILD);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	indexTblName() {
	    let localctx = new IndexTblNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 654, InceptorOracleParser.RULE_indexTblName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4405;
	        this.match(InceptorOracleParser.KW_IN);
	        this.state = 4406;
	        this.match(InceptorOracleParser.KW_TABLE);
	        this.state = 4407;
	        localctx.indexTbl = this.tableName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	indexPropertiesPrefixed() {
	    let localctx = new IndexPropertiesPrefixedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 656, InceptorOracleParser.RULE_indexPropertiesPrefixed);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4409;
	        this.match(InceptorOracleParser.KW_IDXPROPERTIES);
	        this.state = 4410;
	        this.indexProperties();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	indexProperties() {
	    let localctx = new IndexPropertiesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 658, InceptorOracleParser.RULE_indexProperties);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4412;
	        this.match(InceptorOracleParser.LPAREN);
	        this.state = 4413;
	        this.indexPropertiesList();
	        this.state = 4414;
	        this.match(InceptorOracleParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	indexPropertiesList() {
	    let localctx = new IndexPropertiesListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 660, InceptorOracleParser.RULE_indexPropertiesList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4416;
	        this.keyValueProperty();
	        this.state = 4421;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===InceptorOracleParser.COMMA) {
	            this.state = 4417;
	            this.match(InceptorOracleParser.COMMA);
	            this.state = 4418;
	            this.keyValueProperty();
	            this.state = 4423;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tabTypeExpr() {
	    let localctx = new TabTypeExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 662, InceptorOracleParser.RULE_tabTypeExpr);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4424;
	        this.identifier();
	        this.state = 4434;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===InceptorOracleParser.DOT) {
	            this.state = 4425;
	            this.match(InceptorOracleParser.DOT);
	            this.state = 4430;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,396,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 4426;
	                this.match(InceptorOracleParser.KW_ELEM_TYPE);
	                break;

	            case 2:
	                this.state = 4427;
	                this.match(InceptorOracleParser.KW_KEY_TYPE);
	                break;

	            case 3:
	                this.state = 4428;
	                this.match(InceptorOracleParser.KW_VALUE_TYPE);
	                break;

	            case 4:
	                this.state = 4429;
	                this.identifier();
	                break;

	            }
	            this.state = 4436;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	descTabTypeExpr() {
	    let localctx = new DescTabTypeExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 664, InceptorOracleParser.RULE_descTabTypeExpr);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4437;
	        this.identifier();
	        this.state = 4447;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===InceptorOracleParser.DOT) {
	            this.state = 4438;
	            this.match(InceptorOracleParser.DOT);
	            this.state = 4443;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,398,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 4439;
	                this.match(InceptorOracleParser.KW_ELEM_TYPE);
	                break;

	            case 2:
	                this.state = 4440;
	                this.match(InceptorOracleParser.KW_KEY_TYPE);
	                break;

	            case 3:
	                this.state = 4441;
	                this.match(InceptorOracleParser.KW_VALUE_TYPE);
	                break;

	            case 4:
	                this.state = 4442;
	                this.identifier();
	                break;

	            }
	            this.state = 4449;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 4451;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,400,this._ctx);
	        if(la_===1) {
	            this.state = 4450;
	            this.identifier();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partTypeExpr() {
	    let localctx = new PartTypeExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 666, InceptorOracleParser.RULE_partTypeExpr);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4453;
	        this.tabTypeExpr();
	        this.state = 4455;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_PARTITION) {
	            this.state = 4454;
	            this.partitionSpec();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	descPartTypeExpr() {
	    let localctx = new DescPartTypeExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 668, InceptorOracleParser.RULE_descPartTypeExpr);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4457;
	        this.descTabTypeExpr();
	        this.state = 4459;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_PARTITION) {
	            this.state = 4458;
	            this.partitionSpec();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showStmtIdentifier() {
	    let localctx = new ShowStmtIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 670, InceptorOracleParser.RULE_showStmtIdentifier);
	    try {
	        this.state = 4463;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case InceptorOracleParser.KW_TRUE:
	        case InceptorOracleParser.KW_FALSE:
	        case InceptorOracleParser.KW_ALL:
	        case InceptorOracleParser.KW_LIKE:
	        case InceptorOracleParser.KW_NO:
	        case InceptorOracleParser.KW_ANY:
	        case InceptorOracleParser.KW_EXISTS:
	        case InceptorOracleParser.KW_ASC:
	        case InceptorOracleParser.KW_DESC:
	        case InceptorOracleParser.KW_ORDER:
	        case InceptorOracleParser.KW_GROUP:
	        case InceptorOracleParser.KW_INCREMENT:
	        case InceptorOracleParser.KW_BY:
	        case InceptorOracleParser.KW_HASH:
	        case InceptorOracleParser.KW_INSERT:
	        case InceptorOracleParser.KW_OVERWRITE:
	        case InceptorOracleParser.KW_OUTER:
	        case InceptorOracleParser.KW_STREAMJOB:
	        case InceptorOracleParser.KW_STREAMJOBS:
	        case InceptorOracleParser.KW_AT:
	        case InceptorOracleParser.KW_LEFT:
	        case InceptorOracleParser.KW_RIGHT:
	        case InceptorOracleParser.KW_FULL:
	        case InceptorOracleParser.KW_PARTITION:
	        case InceptorOracleParser.KW_PARTITIONS:
	        case InceptorOracleParser.KW_PATTERN:
	        case InceptorOracleParser.KW_TABLE:
	        case InceptorOracleParser.KW_TABLES:
	        case InceptorOracleParser.KW_SEQUENCE:
	        case InceptorOracleParser.KW_SEQUENCES:
	        case InceptorOracleParser.KW_COLUMNS:
	        case InceptorOracleParser.KW_INDEX:
	        case InceptorOracleParser.KW_INDEXES:
	        case InceptorOracleParser.KW_REBUILD:
	        case InceptorOracleParser.KW_FUNCTIONS:
	        case InceptorOracleParser.KW_SHOW:
	        case InceptorOracleParser.KW_MSCK:
	        case InceptorOracleParser.KW_REPAIR:
	        case InceptorOracleParser.KW_DIRECTORY:
	        case InceptorOracleParser.KW_LOCAL:
	        case InceptorOracleParser.KW_GLOBAL:
	        case InceptorOracleParser.KW_USING:
	        case InceptorOracleParser.KW_CLUSTER:
	        case InceptorOracleParser.KW_DISTRIBUTE:
	        case InceptorOracleParser.KW_SORT:
	        case InceptorOracleParser.KW_UNION:
	        case InceptorOracleParser.KW_LOAD:
	        case InceptorOracleParser.KW_EXPORT:
	        case InceptorOracleParser.KW_IMPORT:
	        case InceptorOracleParser.KW_DATA:
	        case InceptorOracleParser.KW_INPATH:
	        case InceptorOracleParser.KW_IS:
	        case InceptorOracleParser.KW_NULLS:
	        case InceptorOracleParser.KW_CREATE:
	        case InceptorOracleParser.KW_EXTERNAL:
	        case InceptorOracleParser.KW_ALTER:
	        case InceptorOracleParser.KW_CHANGE:
	        case InceptorOracleParser.KW_FIRST:
	        case InceptorOracleParser.KW_LAST:
	        case InceptorOracleParser.KW_AFTER:
	        case InceptorOracleParser.KW_DESCRIBE:
	        case InceptorOracleParser.KW_DROP:
	        case InceptorOracleParser.KW_RENAME:
	        case InceptorOracleParser.KW_IGNORE:
	        case InceptorOracleParser.KW_RESPECT:
	        case InceptorOracleParser.KW_PROTECTION:
	        case InceptorOracleParser.KW_TO:
	        case InceptorOracleParser.KW_COMMENT:
	        case InceptorOracleParser.KW_PROMPT:
	        case InceptorOracleParser.KW_SPOOL:
	        case InceptorOracleParser.KW_BOOLEAN:
	        case InceptorOracleParser.KW_TINYINT:
	        case InceptorOracleParser.KW_BYTE:
	        case InceptorOracleParser.KW_SMALLINT:
	        case InceptorOracleParser.KW_INT:
	        case InceptorOracleParser.KW_BIGINT:
	        case InceptorOracleParser.KW_FLOAT:
	        case InceptorOracleParser.KW_DOUBLE:
	        case InceptorOracleParser.KW_DATE:
	        case InceptorOracleParser.KW_DATETIME:
	        case InceptorOracleParser.KW_TIMESTAMP:
	        case InceptorOracleParser.KW_TIME:
	        case InceptorOracleParser.KW_DECIMAL:
	        case InceptorOracleParser.KW_STRING:
	        case InceptorOracleParser.KW_GEO:
	        case InceptorOracleParser.KW_ARRAY:
	        case InceptorOracleParser.KW_STRUCT:
	        case InceptorOracleParser.KW_UNIONTYPE:
	        case InceptorOracleParser.KW_PARTITIONED:
	        case InceptorOracleParser.KW_ROUTED:
	        case InceptorOracleParser.KW_CLUSTERED:
	        case InceptorOracleParser.KW_SORTED:
	        case InceptorOracleParser.KW_NEXT:
	        case InceptorOracleParser.KW_NEXTVALUE:
	        case InceptorOracleParser.KW_BUCKETS:
	        case InceptorOracleParser.KW_ROW:
	        case InceptorOracleParser.KW_ROWS:
	        case InceptorOracleParser.KW_FORMAT:
	        case InceptorOracleParser.KW_DELIMITED:
	        case InceptorOracleParser.KW_FIELDS:
	        case InceptorOracleParser.KW_TERMINATED:
	        case InceptorOracleParser.KW_ESCAPED:
	        case InceptorOracleParser.KW_COLLECTION:
	        case InceptorOracleParser.KW_ITEMS:
	        case InceptorOracleParser.KW_KEYS:
	        case InceptorOracleParser.KW_KEY_TYPE:
	        case InceptorOracleParser.KW_LINES:
	        case InceptorOracleParser.KW_STORED:
	        case InceptorOracleParser.KW_FILEFORMAT:
	        case InceptorOracleParser.KW_SEQUENCEFILE:
	        case InceptorOracleParser.KW_TEXTFILE:
	        case InceptorOracleParser.KW_CSVFILE:
	        case InceptorOracleParser.KW_FWCFILE:
	        case InceptorOracleParser.KW_RCFILE:
	        case InceptorOracleParser.KW_ORCFILE:
	        case InceptorOracleParser.KW_HOLODESK:
	        case InceptorOracleParser.KW_STELLARDB:
	        case InceptorOracleParser.KW_ORCTRANSACTIONFILE:
	        case InceptorOracleParser.KW_PARQUET:
	        case InceptorOracleParser.KW_HYPERDRIVE:
	        case InceptorOracleParser.KW_ESDRIVE:
	        case InceptorOracleParser.KW_INPUTFORMAT:
	        case InceptorOracleParser.KW_OUTPUTFORMAT:
	        case InceptorOracleParser.KW_INPUTDRIVER:
	        case InceptorOracleParser.KW_OUTPUTDRIVER:
	        case InceptorOracleParser.KW_OFFLINE:
	        case InceptorOracleParser.KW_ENABLE:
	        case InceptorOracleParser.KW_DISABLE:
	        case InceptorOracleParser.KW_READONLY:
	        case InceptorOracleParser.KW_NO_DROP:
	        case InceptorOracleParser.KW_LOCATION:
	        case InceptorOracleParser.KW_BUCKET:
	        case InceptorOracleParser.KW_OUT:
	        case InceptorOracleParser.KW_OF:
	        case InceptorOracleParser.KW_PERCENT:
	        case InceptorOracleParser.KW_ADD:
	        case InceptorOracleParser.KW_REPLACE:
	        case InceptorOracleParser.KW_RLIKE:
	        case InceptorOracleParser.KW_REGEXP:
	        case InceptorOracleParser.KW_TEMPORARY:
	        case InceptorOracleParser.KW_RESOURCE:
	        case InceptorOracleParser.KW_RELOAD:
	        case InceptorOracleParser.KW_EXPLAIN:
	        case InceptorOracleParser.KW_FORMATTED:
	        case InceptorOracleParser.KW_PRETTY:
	        case InceptorOracleParser.KW_DEPENDENCY:
	        case InceptorOracleParser.KW_LOGICAL:
	        case InceptorOracleParser.KW_COST:
	        case InceptorOracleParser.KW_SERDE:
	        case InceptorOracleParser.KW_WITH:
	        case InceptorOracleParser.KW_WITHIN:
	        case InceptorOracleParser.KW_DEFERRED:
	        case InceptorOracleParser.KW_SERDEPROPERTIES:
	        case InceptorOracleParser.KW_DBPROPERTIES:
	        case InceptorOracleParser.KW_LIMIT:
	        case InceptorOracleParser.KW_SET:
	        case InceptorOracleParser.KW_UNSET:
	        case InceptorOracleParser.KW_TBLPROPERTIES:
	        case InceptorOracleParser.KW_IDXPROPERTIES:
	        case InceptorOracleParser.KW_VALUE_TYPE:
	        case InceptorOracleParser.KW_ELEM_TYPE:
	        case InceptorOracleParser.KW_PRIOR:
	        case InceptorOracleParser.KW_NOCYCLE:
	        case InceptorOracleParser.KW_MAPJOIN:
	        case InceptorOracleParser.KW_COMBINE:
	        case InceptorOracleParser.KW_COMBINE_STRUCT_INDEX:
	        case InceptorOracleParser.KW_GLKJOIN:
	        case InceptorOracleParser.KW_USE_INDEX:
	        case InceptorOracleParser.KW_STARGATE:
	        case InceptorOracleParser.KW_USE_BULKLOAD:
	        case InceptorOracleParser.KW_ADHOC:
	        case InceptorOracleParser.KW_PRECOMPILE:
	        case InceptorOracleParser.KW_STREAMTABLE:
	        case InceptorOracleParser.KW_STREAM:
	        case InceptorOracleParser.KW_RULEBASE:
	        case InceptorOracleParser.KW_RULEBASES:
	        case InceptorOracleParser.KW_RULE:
	        case InceptorOracleParser.KW_RULES:
	        case InceptorOracleParser.KW_MEET:
	        case InceptorOracleParser.KW_MUST:
	        case InceptorOracleParser.KW_MUSTNOT:
	        case InceptorOracleParser.KW_POLICY:
	        case InceptorOracleParser.KW_POLICIES:
	        case InceptorOracleParser.KW_REMOVE:
	        case InceptorOracleParser.KW_POLICYKEY:
	        case InceptorOracleParser.KW_POLICY_RULE:
	        case InceptorOracleParser.KW_LOOKUP:
	        case InceptorOracleParser.KW_RULE_FUNCTION:
	        case InceptorOracleParser.KW_RULE_FUNCTIONS:
	        case InceptorOracleParser.KW_RULE_FUNCTION_PROPERTIES:
	        case InceptorOracleParser.KW_HOLD_DDLTIME:
	        case InceptorOracleParser.KW_CLUSTERSTATUS:
	        case InceptorOracleParser.KW_UTC:
	        case InceptorOracleParser.KW_UTCTIMESTAMP:
	        case InceptorOracleParser.KW_LONG:
	        case InceptorOracleParser.KW_DELETE:
	        case InceptorOracleParser.KW_PLUS:
	        case InceptorOracleParser.KW_MINUS:
	        case InceptorOracleParser.KW_OP_CONCAT:
	        case InceptorOracleParser.KW_FETCH:
	        case InceptorOracleParser.KW_INTERSECT:
	        case InceptorOracleParser.KW_VIEW:
	        case InceptorOracleParser.KW_IN:
	        case InceptorOracleParser.KW_DATABASES:
	        case InceptorOracleParser.KW_MATERIALIZED:
	        case InceptorOracleParser.KW_SCHEMA:
	        case InceptorOracleParser.KW_SCHEMAS:
	        case InceptorOracleParser.KW_GRANT:
	        case InceptorOracleParser.KW_REVOKE:
	        case InceptorOracleParser.KW_SSL:
	        case InceptorOracleParser.KW_UNDO:
	        case InceptorOracleParser.KW_LOCK:
	        case InceptorOracleParser.KW_LOCKS:
	        case InceptorOracleParser.KW_UNLOCK:
	        case InceptorOracleParser.KW_SHARED:
	        case InceptorOracleParser.KW_EXCLUSIVE:
	        case InceptorOracleParser.KW_PROCEDURE:
	        case InceptorOracleParser.KW_UNSIGNED:
	        case InceptorOracleParser.KW_WHILE:
	        case InceptorOracleParser.KW_READ:
	        case InceptorOracleParser.KW_READS:
	        case InceptorOracleParser.KW_PURGE:
	        case InceptorOracleParser.KW_RANGE:
	        case InceptorOracleParser.KW_ANALYZE:
	        case InceptorOracleParser.KW_BEFORE:
	        case InceptorOracleParser.KW_BETWEEN:
	        case InceptorOracleParser.KW_BOTH:
	        case InceptorOracleParser.KW_BINARY:
	        case InceptorOracleParser.KW_DEFAULT:
	        case InceptorOracleParser.KW_TYPE:
	        case InceptorOracleParser.KW_TRIGGER:
	        case InceptorOracleParser.KW_RECORDREADER:
	        case InceptorOracleParser.KW_RECORDWRITER:
	        case InceptorOracleParser.KW_SEMI:
	        case InceptorOracleParser.KW_LATERAL:
	        case InceptorOracleParser.KW_TOUCH:
	        case InceptorOracleParser.KW_ARCHIVE:
	        case InceptorOracleParser.KW_UNARCHIVE:
	        case InceptorOracleParser.KW_COMPUTE:
	        case InceptorOracleParser.KW_STATISTICS:
	        case InceptorOracleParser.KW_USE:
	        case InceptorOracleParser.KW_OPTION:
	        case InceptorOracleParser.KW_CONCATENATE:
	        case InceptorOracleParser.KW_SHOW_DATABASE:
	        case InceptorOracleParser.KW_UPDATE:
	        case InceptorOracleParser.KW_RESTRICT:
	        case InceptorOracleParser.KW_CASCADE:
	        case InceptorOracleParser.KW_SKEWED:
	        case InceptorOracleParser.KW_DIRECTORIES:
	        case InceptorOracleParser.KW_WINDOWRESET:
	        case InceptorOracleParser.KW_SESSIONSTART:
	        case InceptorOracleParser.KW_SESSIONSTOP:
	        case InceptorOracleParser.KW_SESSIONEXPIRE:
	        case InceptorOracleParser.KW_SESSIONEXPIRE_DISCARD:
	        case InceptorOracleParser.KW_SESSIONEXPIRE_COMPLETE:
	        case InceptorOracleParser.KW_STREAMWINDOW:
	        case InceptorOracleParser.KW_STREAMWINDOWSLIDELENGTH:
	        case InceptorOracleParser.KW_STREAMWINDOWSEPARATED:
	        case InceptorOracleParser.KW_FOLLOWEDBY:
	        case InceptorOracleParser.KW_NOTFOLLOWEDBY:
	        case InceptorOracleParser.KW_NOTNEXT:
	        case InceptorOracleParser.KW_PATTERN_TIMES:
	        case InceptorOracleParser.KW_CURRVALUE:
	        case InceptorOracleParser.KW_GROUPING:
	        case InceptorOracleParser.KW_SETS:
	        case InceptorOracleParser.KW_TRUNCATE:
	        case InceptorOracleParser.KW_NOSCAN:
	        case InceptorOracleParser.KW_USER:
	        case InceptorOracleParser.KW_QUOTA:
	        case InceptorOracleParser.KW_PERMISSION:
	        case InceptorOracleParser.KW_ROLE:
	        case InceptorOracleParser.KW_ROLES:
	        case InceptorOracleParser.KW_INNER:
	        case InceptorOracleParser.KW_ADMIN:
	        case InceptorOracleParser.KW_OWNER:
	        case InceptorOracleParser.KW_PRINCIPALS:
	        case InceptorOracleParser.KW_CONSTANT:
	        case InceptorOracleParser.KW_CONSTRAINT:
	        case InceptorOracleParser.KW_VALUES:
	        case InceptorOracleParser.KW_YEAR:
	        case InceptorOracleParser.KW_MONTH:
	        case InceptorOracleParser.KW_DAY:
	        case InceptorOracleParser.KW_MINUTE:
	        case InceptorOracleParser.KW_HOUR:
	        case InceptorOracleParser.KW_SECOND:
	        case InceptorOracleParser.KW_INTERVAL:
	        case InceptorOracleParser.KW_SYSDATE:
	        case InceptorOracleParser.KW_NOMAXVALUE:
	        case InceptorOracleParser.KW_MINVALUE:
	        case InceptorOracleParser.KW_NOMINVALUE:
	        case InceptorOracleParser.KW_CYCLE:
	        case InceptorOracleParser.KW_CACHE:
	        case InceptorOracleParser.KW_CACHEDMETRIC:
	        case InceptorOracleParser.KW_CACHEDMETRICS:
	        case InceptorOracleParser.KW_NOCACHE:
	        case InceptorOracleParser.KW_NOORDER:
	        case InceptorOracleParser.KW_MERGE:
	        case InceptorOracleParser.KW_PLANT:
	        case InceptorOracleParser.KW_IMMEDIATE:
	        case InceptorOracleParser.KW_COMPACT:
	        case InceptorOracleParser.KW_STOP:
	        case InceptorOracleParser.KW_LIST:
	        case InceptorOracleParser.KW_TRANSACTION:
	        case InceptorOracleParser.KW_WORK:
	        case InceptorOracleParser.KW_SPACE:
	        case InceptorOracleParser.KW_CONF:
	        case InceptorOracleParser.KW_DEFINED:
	        case InceptorOracleParser.KW_INTEGER:
	        case InceptorOracleParser.KW_ONLY:
	        case InceptorOracleParser.KW_SERVER:
	        case InceptorOracleParser.KW_TRANSACTIONS:
	        case InceptorOracleParser.KW_URI:
	        case InceptorOracleParser.KW_WRITE:
	        case InceptorOracleParser.KW_FACL:
	        case InceptorOracleParser.KW_FOUND:
	        case InceptorOracleParser.KW_LEVEL:
	        case InceptorOracleParser.KW_PUBLIC:
	        case InceptorOracleParser.KW_LINKS:
	        case InceptorOracleParser.KW_CONNECT:
	        case InceptorOracleParser.KW_APPLICATION:
	        case InceptorOracleParser.KW_APPLICATIONS:
	        case InceptorOracleParser.KW_APP:
	        case InceptorOracleParser.KW_APPS:
	        case InceptorOracleParser.KW_INFINITE:
	        case InceptorOracleParser.KW_WAIT:
	        case InceptorOracleParser.KW_PRIMARY:
	        case InceptorOracleParser.KW_FOREIGN:
	        case InceptorOracleParser.KW_REFERENCES:
	        case InceptorOracleParser.KW_VALIDATE:
	        case InceptorOracleParser.KW_NOVALIDATE:
	        case InceptorOracleParser.KW_RELY:
	        case InceptorOracleParser.KW_NORELY:
	        case InceptorOracleParser.KW_KEY:
	        case InceptorOracleParser.KW_SEGMENT:
	        case InceptorOracleParser.KW_LENGTH:
	        case InceptorOracleParser.KW_ATTACH:
	        case InceptorOracleParser.KW_DETTACH:
	        case InceptorOracleParser.KW_SHARD:
	        case InceptorOracleParser.KW_NUM:
	        case InceptorOracleParser.KW_FULLTEXT:
	        case InceptorOracleParser.KW_TABLESIZE:
	        case InceptorOracleParser.KW_TABLET:
	        case InceptorOracleParser.KW_CAPACITY:
	        case InceptorOracleParser.KW_ANALYZER:
	        case InceptorOracleParser.KW_SYNC:
	        case InceptorOracleParser.KW_NO_INDEX:
	        case InceptorOracleParser.KW_LOG:
	        case InceptorOracleParser.KW_FILE:
	        case InceptorOracleParser.KW_JAR:
	        case InceptorOracleParser.KW_PERMANENT:
	        case InceptorOracleParser.KW_SCHEDULER:
	        case InceptorOracleParser.KW_MODE:
	        case InceptorOracleParser.Identifier:
	        case InceptorOracleParser.KW_NOCOPY:
	        case InceptorOracleParser.KW_VARRAY:
	        case InceptorOracleParser.KW_PACKAGE:
	        case InceptorOracleParser.KW_PACKAGES:
	        case InceptorOracleParser.KW_BODY:
	        case InceptorOracleParser.KW_ISOPEN:
	        case InceptorOracleParser.KW_NOTFOUND:
	        case InceptorOracleParser.KW_ROWCOUNT:
	        case InceptorOracleParser.KW_BULK_ROWCOUNT:
	        case InceptorOracleParser.KW_BULK_EXCEPTIONS:
	        case InceptorOracleParser.KW_REVERSE:
	        case InceptorOracleParser.KW_SAVE:
	        case InceptorOracleParser.KW_EXCEPTIONS:
	        case InceptorOracleParser.KW_INDICES:
	        case InceptorOracleParser.KW_REF:
	        case InceptorOracleParser.KW_YEARS:
	        case InceptorOracleParser.KW_MONTHS:
	        case InceptorOracleParser.KW_DAYS:
	        case InceptorOracleParser.KW_HOURS:
	        case InceptorOracleParser.KW_MINUTES:
	        case InceptorOracleParser.KW_SECONDS:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4461;
	            this.identifier();
	            break;
	        case InceptorOracleParser.StringLiteral:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4462;
	            this.match(InceptorOracleParser.StringLiteral);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sysFuncNames() {
	    let localctx = new SysFuncNamesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 672, InceptorOracleParser.RULE_sysFuncNames);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4465;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << InceptorOracleParser.KW_AND) | (1 << InceptorOracleParser.KW_OR) | (1 << InceptorOracleParser.KW_NOT) | (1 << InceptorOracleParser.KW_LIKE) | (1 << InceptorOracleParser.KW_IF))) !== 0) || ((((_la - 92)) & ~0x1f) == 0 && ((1 << (_la - 92)) & ((1 << (InceptorOracleParser.KW_BOOLEAN - 92)) | (1 << (InceptorOracleParser.KW_TINYINT - 92)) | (1 << (InceptorOracleParser.KW_SMALLINT - 92)) | (1 << (InceptorOracleParser.KW_INT - 92)) | (1 << (InceptorOracleParser.KW_BIGINT - 92)) | (1 << (InceptorOracleParser.KW_FLOAT - 92)) | (1 << (InceptorOracleParser.KW_DOUBLE - 92)) | (1 << (InceptorOracleParser.KW_STRING - 92)) | (1 << (InceptorOracleParser.KW_ARRAY - 92)) | (1 << (InceptorOracleParser.KW_STRUCT - 92)) | (1 << (InceptorOracleParser.KW_MAP - 92)) | (1 << (InceptorOracleParser.KW_UNIONTYPE - 92)))) !== 0) || ((((_la - 181)) & ~0x1f) == 0 && ((1 << (_la - 181)) & ((1 << (InceptorOracleParser.KW_RLIKE - 181)) | (1 << (InceptorOracleParser.KW_REGEXP - 181)) | (1 << (InceptorOracleParser.KW_CASE - 181)) | (1 << (InceptorOracleParser.KW_WHEN - 181)))) !== 0) || ((((_la - 269)) & ~0x1f) == 0 && ((1 << (_la - 269)) & ((1 << (InceptorOracleParser.KW_IN - 269)) | (1 << (InceptorOracleParser.KW_BETWEEN - 269)) | (1 << (InceptorOracleParser.KW_BINARY - 269)))) !== 0) || _la===InceptorOracleParser.KW_EXTRACT || ((((_la - 500)) & ~0x1f) == 0 && ((1 << (_la - 500)) & ((1 << (InceptorOracleParser.EQUAL - 500)) | (1 << (InceptorOracleParser.EQUAL_NS - 500)) | (1 << (InceptorOracleParser.NOTEQUAL - 500)) | (1 << (InceptorOracleParser.LESSTHANOREQUALTO - 500)) | (1 << (InceptorOracleParser.LESSTHAN - 500)) | (1 << (InceptorOracleParser.GREATERTHANOREQUALTO - 500)) | (1 << (InceptorOracleParser.GREATERTHAN - 500)) | (1 << (InceptorOracleParser.DIVIDE - 500)) | (1 << (InceptorOracleParser.PLUS - 500)) | (1 << (InceptorOracleParser.MINUS - 500)) | (1 << (InceptorOracleParser.STAR - 500)) | (1 << (InceptorOracleParser.MOD - 500)) | (1 << (InceptorOracleParser.DIV - 500)) | (1 << (InceptorOracleParser.OP_CONCAT - 500)) | (1 << (InceptorOracleParser.AMPERSAND - 500)) | (1 << (InceptorOracleParser.TILDE - 500)) | (1 << (InceptorOracleParser.BITWISEOR - 500)) | (1 << (InceptorOracleParser.BITWISEXOR - 500)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	descFuncNames() {
	    let localctx = new DescFuncNamesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 674, InceptorOracleParser.RULE_descFuncNames);
	    try {
	        this.state = 4470;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,404,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4467;
	            this.sysFuncNames();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4468;
	            this.match(InceptorOracleParser.StringLiteral);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4469;
	            this.identifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ddlCStatement() {
	    let localctx = new DdlCStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 676, InceptorOracleParser.RULE_ddlCStatement);
	    try {
	        this.state = 4477;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case InceptorOracleParser.KW_CREATE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4472;
	            this.createOrReplaceStatement();
	            break;
	        case InceptorOracleParser.KW_DROP:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4473;
	            this.dialectDropStatement();
	            break;
	        case InceptorOracleParser.KW_GRANT:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4474;
	            this.grantPermission();
	            break;
	        case InceptorOracleParser.KW_REVOKE:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4475;
	            this.revokePermission();
	            break;
	        case InceptorOracleParser.KW_SHOW:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4476;
	            this.showPermission();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createOrReplaceStatement() {
	    let localctx = new CreateOrReplaceStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 678, InceptorOracleParser.RULE_createOrReplaceStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4479;
	        this.match(InceptorOracleParser.KW_CREATE);
	        this.state = 4481;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_OR) {
	            this.state = 4480;
	            this.orReplace();
	        }

	        this.state = 4489;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case InceptorOracleParser.KW_VIEW:
	            this.state = 4483;
	            this.createViewStatement();
	            break;
	        case InceptorOracleParser.KW_MATERIALIZED:
	            this.state = 4484;
	            this.createMaterializedViewStatement();
	            break;
	        case InceptorOracleParser.KW_TEMPORARY:
	        case InceptorOracleParser.KW_PERMANENT:
	            this.state = 4485;
	            this.createFunctionStatement();
	            break;
	        case InceptorOracleParser.KW_RULE:
	            this.state = 4486;
	            this.createRuleStatement();
	            break;
	        case InceptorOracleParser.KW_POLICY:
	            this.state = 4487;
	            this.createPolicyStatement();
	            break;
	        case InceptorOracleParser.KW_FUNCTION:
	        case InceptorOracleParser.KW_PROCEDURE:
	        case InceptorOracleParser.KW_PACKAGE:
	            this.state = 4488;
	            this.dialectCreateOrReplaceStatement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createViewStatement() {
	    let localctx = new CreateViewStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 680, InceptorOracleParser.RULE_createViewStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4491;
	        this.match(InceptorOracleParser.KW_VIEW);
	        this.state = 4493;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_IF) {
	            this.state = 4492;
	            this.ifNotExists();
	        }

	        this.state = 4495;
	        localctx.name = this.tableName();
	        this.state = 4500;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.LPAREN) {
	            this.state = 4496;
	            this.match(InceptorOracleParser.LPAREN);
	            this.state = 4497;
	            this.columnNameCommentList();
	            this.state = 4498;
	            this.match(InceptorOracleParser.RPAREN);
	        }

	        this.state = 4503;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_COMMENT) {
	            this.state = 4502;
	            this.tableComment();
	        }

	        this.state = 4506;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_PARTITIONED) {
	            this.state = 4505;
	            this.viewPartition();
	        }

	        this.state = 4509;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_TBLPROPERTIES) {
	            this.state = 4508;
	            this.tablePropertiesPrefixed();
	        }

	        this.state = 4511;
	        this.match(InceptorOracleParser.KW_AS);
	        this.state = 4512;
	        this.queryStatementExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rewriteEnabled() {
	    let localctx = new RewriteEnabledContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 682, InceptorOracleParser.RULE_rewriteEnabled);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4514;
	        this.match(InceptorOracleParser.KW_ENABLE);
	        this.state = 4515;
	        this.match(InceptorOracleParser.KW_REWRITE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rewriteDisabled() {
	    let localctx = new RewriteDisabledContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 684, InceptorOracleParser.RULE_rewriteDisabled);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4517;
	        this.match(InceptorOracleParser.KW_DISABLE);
	        this.state = 4518;
	        this.match(InceptorOracleParser.KW_REWRITE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createMaterializedViewStatement() {
	    let localctx = new CreateMaterializedViewStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 686, InceptorOracleParser.RULE_createMaterializedViewStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4520;
	        this.match(InceptorOracleParser.KW_MATERIALIZED);
	        this.state = 4521;
	        this.match(InceptorOracleParser.KW_VIEW);
	        this.state = 4523;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_IF) {
	            this.state = 4522;
	            this.ifNotExists();
	        }

	        this.state = 4525;
	        localctx.name = this.tableName();
	        this.state = 4530;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.LPAREN) {
	            this.state = 4526;
	            this.match(InceptorOracleParser.LPAREN);
	            this.state = 4527;
	            this.columnNameCommentList();
	            this.state = 4528;
	            this.match(InceptorOracleParser.RPAREN);
	        }

	        this.state = 4533;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_ENABLE) {
	            this.state = 4532;
	            this.rewriteEnabled();
	        }

	        this.state = 4536;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_COMMENT) {
	            this.state = 4535;
	            this.tableComment();
	        }

	        this.state = 4539;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_PARTITIONED) {
	            this.state = 4538;
	            this.viewPartition();
	        }

	        this.state = 4542;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_TBLPROPERTIES) {
	            this.state = 4541;
	            this.tablePropertiesPrefixed();
	        }

	        this.state = 4544;
	        this.match(InceptorOracleParser.KW_AS);
	        this.state = 4545;
	        this.queryStatementExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	viewPartition() {
	    let localctx = new ViewPartitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 688, InceptorOracleParser.RULE_viewPartition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4547;
	        this.match(InceptorOracleParser.KW_PARTITIONED);
	        this.state = 4548;
	        this.match(InceptorOracleParser.KW_ON);
	        this.state = 4549;
	        this.match(InceptorOracleParser.LPAREN);
	        this.state = 4550;
	        this.columnNameList();
	        this.state = 4551;
	        this.match(InceptorOracleParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showPermission() {
	    let localctx = new ShowPermissionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 690, InceptorOracleParser.RULE_showPermission);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4553;
	        this.match(InceptorOracleParser.KW_SHOW);
	        this.state = 4554;
	        this.match(InceptorOracleParser.KW_PERMISSION);
	        this.state = 4555;
	        this.rclsObject();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	grantPermission() {
	    let localctx = new GrantPermissionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 692, InceptorOracleParser.RULE_grantPermission);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4557;
	        this.match(InceptorOracleParser.KW_GRANT);
	        this.state = 4558;
	        this.match(InceptorOracleParser.KW_PERMISSION);
	        this.state = 4559;
	        this.rclsObject();
	        this.state = 4560;
	        this.grantDefinition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	revokePermission() {
	    let localctx = new RevokePermissionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 694, InceptorOracleParser.RULE_revokePermission);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4562;
	        this.match(InceptorOracleParser.KW_REVOKE);
	        this.state = 4563;
	        this.match(InceptorOracleParser.KW_PERMISSION);
	        this.state = 4564;
	        this.rclsObject();
	        this.state = 4565;
	        this.revokeDefinition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	grantDefinition() {
	    let localctx = new GrantDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 696, InceptorOracleParser.RULE_grantDefinition);
	    try {
	        this.state = 4575;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,419,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4567;
	            this.match(InceptorOracleParser.KW_FOR);
	            this.state = 4568;
	            this.match(InceptorOracleParser.KW_ROWS);
	            this.state = 4569;
	            this.whereClause();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4570;
	            this.match(InceptorOracleParser.KW_FOR);
	            this.state = 4571;
	            this.match(InceptorOracleParser.KW_COLUMN);
	            this.state = 4572;
	            this.columnName();
	            this.state = 4573;
	            this.whenExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	revokeDefinition() {
	    let localctx = new RevokeDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 698, InceptorOracleParser.RULE_revokeDefinition);
	    try {
	        this.state = 4584;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,420,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4577;
	            this.match(InceptorOracleParser.KW_FOR);
	            this.state = 4578;
	            this.match(InceptorOracleParser.KW_ROWS);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4579;
	            this.match(InceptorOracleParser.KW_FOR);
	            this.state = 4580;
	            this.match(InceptorOracleParser.KW_COLUMNS);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4581;
	            this.match(InceptorOracleParser.KW_FOR);
	            this.state = 4582;
	            this.match(InceptorOracleParser.KW_COLUMN);
	            this.state = 4583;
	            this.columnName();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rclsObject() {
	    let localctx = new RclsObjectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 700, InceptorOracleParser.RULE_rclsObject);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4586;
	        this.match(InceptorOracleParser.KW_ON);
	        this.state = 4588;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,421,this._ctx);
	        if(la_===1) {
	            this.state = 4587;
	            _la = this._input.LA(1);
	            if(!(_la===InceptorOracleParser.KW_TABLE || _la===InceptorOracleParser.KW_VIEW)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }

	        }
	        this.state = 4590;
	        this.tableName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ddlStatement() {
	    let localctx = new DdlStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 702, InceptorOracleParser.RULE_ddlStatement);
	    try {
	        this.state = 4597;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,422,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4592;
	            this.alterStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4593;
	            this.ddlAStatement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4594;
	            this.ddlBStatement();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4595;
	            this.ddlCStatement();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4596;
	            this.compactStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compactStatement() {
	    let localctx = new CompactStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 704, InceptorOracleParser.RULE_compactStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4599;
	        this.match(InceptorOracleParser.KW_COMPACT);
	        this.state = 4600;
	        this.match(InceptorOracleParser.KW_TABLE);
	        this.state = 4601;
	        this.tablePartitionPrefix();
	        this.state = 4602;
	        localctx.compactType = this.match(InceptorOracleParser.StringLiteral);
	        this.state = 4603;
	        localctx.compactId = this.match(InceptorOracleParser.Number);
	        this.state = 4604;
	        localctx.compactSubId = this.match(InceptorOracleParser.Number);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	precedenceUnaryOperator() {
	    let localctx = new PrecedenceUnaryOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 706, InceptorOracleParser.RULE_precedenceUnaryOperator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4606;
	        _la = this._input.LA(1);
	        if(!(_la===InceptorOracleParser.KW_PRIOR || ((((_la - 510)) & ~0x1f) == 0 && ((1 << (_la - 510)) & ((1 << (InceptorOracleParser.PLUS - 510)) | (1 << (InceptorOracleParser.MINUS - 510)) | (1 << (InceptorOracleParser.TILDE - 510)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	precedenceUnaryPrefixExpression() {
	    let localctx = new PrecedenceUnaryPrefixExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 708, InceptorOracleParser.RULE_precedenceUnaryPrefixExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4611;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,423,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 4608;
	                this.precedenceUnaryOperator(); 
	            }
	            this.state = 4613;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,423,this._ctx);
	        }

	        this.state = 4614;
	        this.moleculeExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	precedenceUnarySuffixExpression() {
	    let localctx = new PrecedenceUnarySuffixExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 710, InceptorOracleParser.RULE_precedenceUnarySuffixExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4616;
	        this.precedenceUnaryPrefixExpression();
	        this.state = 4619;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,424,this._ctx);
	        if(la_===1) {
	            this.state = 4617;
	            localctx.a = this.match(InceptorOracleParser.KW_IS);
	            this.state = 4618;
	            this.nullCondition();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	precedenceBitwiseXorOperator() {
	    let localctx = new PrecedenceBitwiseXorOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 712, InceptorOracleParser.RULE_precedenceBitwiseXorOperator);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4621;
	        this.match(InceptorOracleParser.BITWISEXOR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	precedenceBitwiseXorExpression() {
	    let localctx = new PrecedenceBitwiseXorExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 714, InceptorOracleParser.RULE_precedenceBitwiseXorExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4623;
	        this.precedenceUnarySuffixExpression();
	        this.state = 4629;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===InceptorOracleParser.BITWISEXOR) {
	            this.state = 4624;
	            this.precedenceBitwiseXorOperator();
	            this.state = 4625;
	            this.precedenceUnarySuffixExpression();
	            this.state = 4631;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	precedenceStarOperator() {
	    let localctx = new PrecedenceStarOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 716, InceptorOracleParser.RULE_precedenceStarOperator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4632;
	        _la = this._input.LA(1);
	        if(!(((((_la - 509)) & ~0x1f) == 0 && ((1 << (_la - 509)) & ((1 << (InceptorOracleParser.DIVIDE - 509)) | (1 << (InceptorOracleParser.STAR - 509)) | (1 << (InceptorOracleParser.MOD - 509)) | (1 << (InceptorOracleParser.DIV - 509)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	precedenceStarExpression() {
	    let localctx = new PrecedenceStarExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 718, InceptorOracleParser.RULE_precedenceStarExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4634;
	        this.precedenceBitwiseXorExpression();
	        this.state = 4640;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 509)) & ~0x1f) == 0 && ((1 << (_la - 509)) & ((1 << (InceptorOracleParser.DIVIDE - 509)) | (1 << (InceptorOracleParser.STAR - 509)) | (1 << (InceptorOracleParser.MOD - 509)) | (1 << (InceptorOracleParser.DIV - 509)))) !== 0)) {
	            this.state = 4635;
	            this.precedenceStarOperator();
	            this.state = 4636;
	            this.precedenceBitwiseXorExpression();
	            this.state = 4642;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	precedencePlusOperator() {
	    let localctx = new PrecedencePlusOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 720, InceptorOracleParser.RULE_precedencePlusOperator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4643;
	        _la = this._input.LA(1);
	        if(!(_la===InceptorOracleParser.PLUS || _la===InceptorOracleParser.MINUS)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	precedencePlusExpression() {
	    let localctx = new PrecedencePlusExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 722, InceptorOracleParser.RULE_precedencePlusExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4645;
	        this.precedenceStarExpression();
	        this.state = 4651;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,427,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 4646;
	                this.precedencePlusOperator();
	                this.state = 4647;
	                this.precedenceStarExpression(); 
	            }
	            this.state = 4653;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,427,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	precedenceOPConcatOperator() {
	    let localctx = new PrecedenceOPConcatOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 724, InceptorOracleParser.RULE_precedenceOPConcatOperator);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4654;
	        this.match(InceptorOracleParser.OP_CONCAT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	precedenceOPConcatExpression() {
	    let localctx = new PrecedenceOPConcatExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 726, InceptorOracleParser.RULE_precedenceOPConcatExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4656;
	        this.precedencePlusExpression();
	        this.state = 4662;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===InceptorOracleParser.OP_CONCAT) {
	            this.state = 4657;
	            this.precedenceOPConcatOperator();
	            this.state = 4658;
	            this.precedencePlusExpression();
	            this.state = 4664;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	precedenceAmpersandOperator() {
	    let localctx = new PrecedenceAmpersandOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 728, InceptorOracleParser.RULE_precedenceAmpersandOperator);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4665;
	        this.match(InceptorOracleParser.AMPERSAND);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	precedenceAmpersandExpression() {
	    let localctx = new PrecedenceAmpersandExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 730, InceptorOracleParser.RULE_precedenceAmpersandExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4667;
	        this.precedenceOPConcatExpression();
	        this.state = 4673;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===InceptorOracleParser.AMPERSAND) {
	            this.state = 4668;
	            this.precedenceAmpersandOperator();
	            this.state = 4669;
	            this.precedenceOPConcatExpression();
	            this.state = 4675;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	precedenceBitwiseOrOperator() {
	    let localctx = new PrecedenceBitwiseOrOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 732, InceptorOracleParser.RULE_precedenceBitwiseOrOperator);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4676;
	        this.match(InceptorOracleParser.BITWISEOR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	precedenceBitwiseOrExpression() {
	    let localctx = new PrecedenceBitwiseOrExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 734, InceptorOracleParser.RULE_precedenceBitwiseOrExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4678;
	        this.precedenceAmpersandExpression();
	        this.state = 4684;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===InceptorOracleParser.BITWISEOR) {
	            this.state = 4679;
	            this.precedenceBitwiseOrOperator();
	            this.state = 4680;
	            this.precedenceAmpersandExpression();
	            this.state = 4686;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 4688;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.OUTER_JOIN_SIGN) {
	            this.state = 4687;
	            this.outer_join_sign();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	precedenceRegexpOperator() {
	    let localctx = new PrecedenceRegexpOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 736, InceptorOracleParser.RULE_precedenceRegexpOperator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4690;
	        _la = this._input.LA(1);
	        if(!(_la===InceptorOracleParser.KW_LIKE || _la===InceptorOracleParser.KW_RLIKE || _la===InceptorOracleParser.KW_REGEXP)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	precedenceEqualOperator() {
	    let localctx = new PrecedenceEqualOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 738, InceptorOracleParser.RULE_precedenceEqualOperator);
	    try {
	        this.state = 4700;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case InceptorOracleParser.KW_LIKE:
	        case InceptorOracleParser.KW_RLIKE:
	        case InceptorOracleParser.KW_REGEXP:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4692;
	            this.precedenceRegexpOperator();
	            break;
	        case InceptorOracleParser.EQUAL:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4693;
	            this.match(InceptorOracleParser.EQUAL);
	            break;
	        case InceptorOracleParser.EQUAL_NS:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4694;
	            this.match(InceptorOracleParser.EQUAL_NS);
	            break;
	        case InceptorOracleParser.NOTEQUAL:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4695;
	            this.match(InceptorOracleParser.NOTEQUAL);
	            break;
	        case InceptorOracleParser.LESSTHANOREQUALTO:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4696;
	            this.match(InceptorOracleParser.LESSTHANOREQUALTO);
	            break;
	        case InceptorOracleParser.LESSTHAN:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 4697;
	            this.match(InceptorOracleParser.LESSTHAN);
	            break;
	        case InceptorOracleParser.GREATERTHANOREQUALTO:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 4698;
	            this.match(InceptorOracleParser.GREATERTHANOREQUALTO);
	            break;
	        case InceptorOracleParser.GREATERTHAN:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 4699;
	            this.match(InceptorOracleParser.GREATERTHAN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expression() {
	    let localctx = new ExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 740, InceptorOracleParser.RULE_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4702;
	        this.precedenceOrExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressions() {
	    let localctx = new ExpressionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 742, InceptorOracleParser.RULE_expressions);
	    try {
	        this.state = 4709;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,433,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4704;
	            this.expressionsInParenthesis();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4705;
	            this.match(InceptorOracleParser.LPAREN);
	            this.state = 4706;
	            this.selectStatement();
	            this.state = 4707;
	            this.match(InceptorOracleParser.RPAREN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionsInParenthesis() {
	    let localctx = new ExpressionsInParenthesisContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 744, InceptorOracleParser.RULE_expressionsInParenthesis);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4711;
	        this.match(InceptorOracleParser.LPAREN);
	        this.state = 4712;
	        this.expressionsNotInParenthesis();
	        this.state = 4713;
	        this.match(InceptorOracleParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionsNotInParenthesis() {
	    let localctx = new ExpressionsNotInParenthesisContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 746, InceptorOracleParser.RULE_expressionsNotInParenthesis);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4715;
	        localctx.first = this.expression();
	        this.state = 4717;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.COMMA) {
	            this.state = 4716;
	            localctx.more = this.expressionPart();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionPart() {
	    let localctx = new ExpressionPartContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 748, InceptorOracleParser.RULE_expressionPart);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4721; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 4719;
	            this.match(InceptorOracleParser.COMMA);
	            this.state = 4720;
	            this.expression();
	            this.state = 4723; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===InceptorOracleParser.COMMA);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionList() {
	    let localctx = new ExpressionListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 750, InceptorOracleParser.RULE_expressionList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4725;
	        this.expression();
	        this.state = 4730;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===InceptorOracleParser.COMMA) {
	            this.state = 4726;
	            this.match(InceptorOracleParser.COMMA);
	            this.state = 4727;
	            this.expression();
	            this.state = 4732;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	outer_join_sign() {
	    let localctx = new Outer_join_signContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 752, InceptorOracleParser.RULE_outer_join_sign);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4733;
	        this.match(InceptorOracleParser.OUTER_JOIN_SIGN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nullCondition() {
	    let localctx = new NullConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 754, InceptorOracleParser.RULE_nullCondition);
	    try {
	        this.state = 4738;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case InceptorOracleParser.KW_NULL:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4735;
	            this.match(InceptorOracleParser.KW_NULL);
	            break;
	        case InceptorOracleParser.KW_NOT:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4736;
	            this.match(InceptorOracleParser.KW_NOT);
	            this.state = 4737;
	            this.match(InceptorOracleParser.KW_NULL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	precedenceSimilarExpression() {
	    let localctx = new PrecedenceSimilarExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 756, InceptorOracleParser.RULE_precedenceSimilarExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4740;
	        localctx.a = this.precedenceBitwiseOrExpression();
	        this.state = 4742;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,438,this._ctx);
	        if(la_===1) {
	            this.state = 4741;
	            localctx.part = this.precedenceSimilarExpressionPart();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	precedenceSimilarExpressionPart() {
	    let localctx = new PrecedenceSimilarExpressionPartContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 758, InceptorOracleParser.RULE_precedenceSimilarExpressionPart);
	    try {
	        this.state = 4747;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case InceptorOracleParser.KW_LIKE:
	        case InceptorOracleParser.KW_IN:
	        case InceptorOracleParser.KW_BETWEEN:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4744;
	            this.precedenceSimilarExpressionAtom();
	            break;
	        case InceptorOracleParser.KW_NOT:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4745;
	            this.match(InceptorOracleParser.KW_NOT);
	            this.state = 4746;
	            this.precedenceSimilarExpressionPartNot();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	precedenceSimilarExpressionAtom() {
	    let localctx = new PrecedenceSimilarExpressionAtomContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 760, InceptorOracleParser.RULE_precedenceSimilarExpressionAtom);
	    try {
	        this.state = 4753;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,440,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4749;
	            this.likeanyRightOp();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4750;
	            this.likeallRightOp();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4751;
	            this.inRightOp();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4752;
	            this.betweenRightOp();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	precedenceSimilarExpressionPartNot() {
	    let localctx = new PrecedenceSimilarExpressionPartNotContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 762, InceptorOracleParser.RULE_precedenceSimilarExpressionPartNot);
	    try {
	        this.state = 4759;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,441,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4755;
	            this.precedenceSimilarExpressionAtom();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4756;
	            this.precedenceRegexpOperator();
	            this.state = 4757;
	            localctx.notExpr = this.precedenceBitwiseOrExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	precedenceNotOperator() {
	    let localctx = new PrecedenceNotOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 764, InceptorOracleParser.RULE_precedenceNotOperator);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4761;
	        this.match(InceptorOracleParser.KW_NOT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	precedenceNotExpression() {
	    let localctx = new PrecedenceNotExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 766, InceptorOracleParser.RULE_precedenceNotExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4766;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===InceptorOracleParser.KW_NOT) {
	            this.state = 4763;
	            this.precedenceNotOperator();
	            this.state = 4768;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 4769;
	        this.precedenceEqualExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	precedenceAndOperator() {
	    let localctx = new PrecedenceAndOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 768, InceptorOracleParser.RULE_precedenceAndOperator);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4771;
	        this.match(InceptorOracleParser.KW_AND);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	precedenceAndExpression() {
	    let localctx = new PrecedenceAndExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 770, InceptorOracleParser.RULE_precedenceAndExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4773;
	        this.precedenceNotExpression();
	        this.state = 4779;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===InceptorOracleParser.KW_AND) {
	            this.state = 4774;
	            this.precedenceAndOperator();
	            this.state = 4775;
	            this.precedenceNotExpression();
	            this.state = 4781;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	precedenceOrOperator() {
	    let localctx = new PrecedenceOrOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 772, InceptorOracleParser.RULE_precedenceOrOperator);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4782;
	        this.match(InceptorOracleParser.KW_OR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	precedenceOrExpression() {
	    let localctx = new PrecedenceOrExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 774, InceptorOracleParser.RULE_precedenceOrExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4784;
	        this.precedenceAndExpression();
	        this.state = 4790;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===InceptorOracleParser.KW_OR) {
	            this.state = 4785;
	            this.precedenceOrOperator();
	            this.state = 4786;
	            this.precedenceAndExpression();
	            this.state = 4792;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	precedenceEqualExpression() {
	    let localctx = new PrecedenceEqualExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 776, InceptorOracleParser.RULE_precedenceEqualExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4793;
	        this.precedenceSimilarExpression();
	        this.state = 4799;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,445,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 4794;
	                this.precedenceEqualOperator();
	                this.state = 4795;
	                this.precedenceSimilarExpression(); 
	            }
	            this.state = 4801;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,445,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fromClause() {
	    let localctx = new FromClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 778, InceptorOracleParser.RULE_fromClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4802;
	        this.match(InceptorOracleParser.KW_FROM);
	        this.state = 4803;
	        this.joinSource();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	joinSource() {
	    let localctx = new JoinSourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 780, InceptorOracleParser.RULE_joinSource);
	    var _la = 0; // Token type
	    try {
	        this.state = 4828;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case InceptorOracleParser.KW_TRUE:
	        case InceptorOracleParser.KW_FALSE:
	        case InceptorOracleParser.KW_ALL:
	        case InceptorOracleParser.KW_LIKE:
	        case InceptorOracleParser.KW_NO:
	        case InceptorOracleParser.KW_ANY:
	        case InceptorOracleParser.KW_EXISTS:
	        case InceptorOracleParser.KW_ASC:
	        case InceptorOracleParser.KW_DESC:
	        case InceptorOracleParser.KW_ORDER:
	        case InceptorOracleParser.KW_GROUP:
	        case InceptorOracleParser.KW_INCREMENT:
	        case InceptorOracleParser.KW_BY:
	        case InceptorOracleParser.KW_HASH:
	        case InceptorOracleParser.KW_INSERT:
	        case InceptorOracleParser.KW_OVERWRITE:
	        case InceptorOracleParser.KW_OUTER:
	        case InceptorOracleParser.KW_STREAMJOB:
	        case InceptorOracleParser.KW_STREAMJOBS:
	        case InceptorOracleParser.KW_AT:
	        case InceptorOracleParser.KW_LEFT:
	        case InceptorOracleParser.KW_RIGHT:
	        case InceptorOracleParser.KW_FULL:
	        case InceptorOracleParser.KW_PARTITION:
	        case InceptorOracleParser.KW_PARTITIONS:
	        case InceptorOracleParser.KW_PATTERN:
	        case InceptorOracleParser.KW_TABLE:
	        case InceptorOracleParser.KW_TABLES:
	        case InceptorOracleParser.KW_SEQUENCE:
	        case InceptorOracleParser.KW_SEQUENCES:
	        case InceptorOracleParser.KW_COLUMNS:
	        case InceptorOracleParser.KW_INDEX:
	        case InceptorOracleParser.KW_INDEXES:
	        case InceptorOracleParser.KW_REBUILD:
	        case InceptorOracleParser.KW_FUNCTIONS:
	        case InceptorOracleParser.KW_SHOW:
	        case InceptorOracleParser.KW_MSCK:
	        case InceptorOracleParser.KW_REPAIR:
	        case InceptorOracleParser.KW_DIRECTORY:
	        case InceptorOracleParser.KW_LOCAL:
	        case InceptorOracleParser.KW_GLOBAL:
	        case InceptorOracleParser.KW_USING:
	        case InceptorOracleParser.KW_CLUSTER:
	        case InceptorOracleParser.KW_DISTRIBUTE:
	        case InceptorOracleParser.KW_SORT:
	        case InceptorOracleParser.KW_UNION:
	        case InceptorOracleParser.KW_LOAD:
	        case InceptorOracleParser.KW_EXPORT:
	        case InceptorOracleParser.KW_IMPORT:
	        case InceptorOracleParser.KW_DATA:
	        case InceptorOracleParser.KW_INPATH:
	        case InceptorOracleParser.KW_IS:
	        case InceptorOracleParser.KW_NULLS:
	        case InceptorOracleParser.KW_CREATE:
	        case InceptorOracleParser.KW_EXTERNAL:
	        case InceptorOracleParser.KW_ALTER:
	        case InceptorOracleParser.KW_CHANGE:
	        case InceptorOracleParser.KW_FIRST:
	        case InceptorOracleParser.KW_LAST:
	        case InceptorOracleParser.KW_AFTER:
	        case InceptorOracleParser.KW_DESCRIBE:
	        case InceptorOracleParser.KW_DROP:
	        case InceptorOracleParser.KW_RENAME:
	        case InceptorOracleParser.KW_IGNORE:
	        case InceptorOracleParser.KW_RESPECT:
	        case InceptorOracleParser.KW_PROTECTION:
	        case InceptorOracleParser.KW_TO:
	        case InceptorOracleParser.KW_COMMENT:
	        case InceptorOracleParser.KW_PROMPT:
	        case InceptorOracleParser.KW_SPOOL:
	        case InceptorOracleParser.KW_BOOLEAN:
	        case InceptorOracleParser.KW_TINYINT:
	        case InceptorOracleParser.KW_BYTE:
	        case InceptorOracleParser.KW_SMALLINT:
	        case InceptorOracleParser.KW_INT:
	        case InceptorOracleParser.KW_BIGINT:
	        case InceptorOracleParser.KW_FLOAT:
	        case InceptorOracleParser.KW_DOUBLE:
	        case InceptorOracleParser.KW_DATE:
	        case InceptorOracleParser.KW_DATETIME:
	        case InceptorOracleParser.KW_TIMESTAMP:
	        case InceptorOracleParser.KW_TIME:
	        case InceptorOracleParser.KW_DECIMAL:
	        case InceptorOracleParser.KW_STRING:
	        case InceptorOracleParser.KW_GEO:
	        case InceptorOracleParser.KW_ARRAY:
	        case InceptorOracleParser.KW_STRUCT:
	        case InceptorOracleParser.KW_UNIONTYPE:
	        case InceptorOracleParser.KW_PARTITIONED:
	        case InceptorOracleParser.KW_ROUTED:
	        case InceptorOracleParser.KW_CLUSTERED:
	        case InceptorOracleParser.KW_SORTED:
	        case InceptorOracleParser.KW_NEXT:
	        case InceptorOracleParser.KW_NEXTVALUE:
	        case InceptorOracleParser.KW_BUCKETS:
	        case InceptorOracleParser.KW_ROW:
	        case InceptorOracleParser.KW_ROWS:
	        case InceptorOracleParser.KW_FORMAT:
	        case InceptorOracleParser.KW_DELIMITED:
	        case InceptorOracleParser.KW_FIELDS:
	        case InceptorOracleParser.KW_TERMINATED:
	        case InceptorOracleParser.KW_ESCAPED:
	        case InceptorOracleParser.KW_COLLECTION:
	        case InceptorOracleParser.KW_ITEMS:
	        case InceptorOracleParser.KW_KEYS:
	        case InceptorOracleParser.KW_KEY_TYPE:
	        case InceptorOracleParser.KW_LINES:
	        case InceptorOracleParser.KW_STORED:
	        case InceptorOracleParser.KW_FILEFORMAT:
	        case InceptorOracleParser.KW_SEQUENCEFILE:
	        case InceptorOracleParser.KW_TEXTFILE:
	        case InceptorOracleParser.KW_CSVFILE:
	        case InceptorOracleParser.KW_FWCFILE:
	        case InceptorOracleParser.KW_RCFILE:
	        case InceptorOracleParser.KW_ORCFILE:
	        case InceptorOracleParser.KW_HOLODESK:
	        case InceptorOracleParser.KW_STELLARDB:
	        case InceptorOracleParser.KW_ORCTRANSACTIONFILE:
	        case InceptorOracleParser.KW_PARQUET:
	        case InceptorOracleParser.KW_HYPERDRIVE:
	        case InceptorOracleParser.KW_ESDRIVE:
	        case InceptorOracleParser.KW_INPUTFORMAT:
	        case InceptorOracleParser.KW_OUTPUTFORMAT:
	        case InceptorOracleParser.KW_INPUTDRIVER:
	        case InceptorOracleParser.KW_OUTPUTDRIVER:
	        case InceptorOracleParser.KW_OFFLINE:
	        case InceptorOracleParser.KW_ENABLE:
	        case InceptorOracleParser.KW_DISABLE:
	        case InceptorOracleParser.KW_READONLY:
	        case InceptorOracleParser.KW_NO_DROP:
	        case InceptorOracleParser.KW_LOCATION:
	        case InceptorOracleParser.KW_BUCKET:
	        case InceptorOracleParser.KW_OUT:
	        case InceptorOracleParser.KW_OF:
	        case InceptorOracleParser.KW_PERCENT:
	        case InceptorOracleParser.KW_ADD:
	        case InceptorOracleParser.KW_REPLACE:
	        case InceptorOracleParser.KW_RLIKE:
	        case InceptorOracleParser.KW_REGEXP:
	        case InceptorOracleParser.KW_TEMPORARY:
	        case InceptorOracleParser.KW_RESOURCE:
	        case InceptorOracleParser.KW_RELOAD:
	        case InceptorOracleParser.KW_EXPLAIN:
	        case InceptorOracleParser.KW_FORMATTED:
	        case InceptorOracleParser.KW_PRETTY:
	        case InceptorOracleParser.KW_DEPENDENCY:
	        case InceptorOracleParser.KW_LOGICAL:
	        case InceptorOracleParser.KW_COST:
	        case InceptorOracleParser.KW_SERDE:
	        case InceptorOracleParser.KW_WITH:
	        case InceptorOracleParser.KW_WITHIN:
	        case InceptorOracleParser.KW_DEFERRED:
	        case InceptorOracleParser.KW_SERDEPROPERTIES:
	        case InceptorOracleParser.KW_DBPROPERTIES:
	        case InceptorOracleParser.KW_LIMIT:
	        case InceptorOracleParser.KW_SET:
	        case InceptorOracleParser.KW_UNSET:
	        case InceptorOracleParser.KW_TBLPROPERTIES:
	        case InceptorOracleParser.KW_IDXPROPERTIES:
	        case InceptorOracleParser.KW_VALUE_TYPE:
	        case InceptorOracleParser.KW_ELEM_TYPE:
	        case InceptorOracleParser.KW_PRIOR:
	        case InceptorOracleParser.KW_NOCYCLE:
	        case InceptorOracleParser.KW_MAPJOIN:
	        case InceptorOracleParser.KW_COMBINE:
	        case InceptorOracleParser.KW_COMBINE_STRUCT_INDEX:
	        case InceptorOracleParser.KW_GLKJOIN:
	        case InceptorOracleParser.KW_USE_INDEX:
	        case InceptorOracleParser.KW_STARGATE:
	        case InceptorOracleParser.KW_USE_BULKLOAD:
	        case InceptorOracleParser.KW_ADHOC:
	        case InceptorOracleParser.KW_PRECOMPILE:
	        case InceptorOracleParser.KW_STREAMTABLE:
	        case InceptorOracleParser.KW_STREAM:
	        case InceptorOracleParser.KW_RULEBASE:
	        case InceptorOracleParser.KW_RULEBASES:
	        case InceptorOracleParser.KW_RULE:
	        case InceptorOracleParser.KW_RULES:
	        case InceptorOracleParser.KW_MEET:
	        case InceptorOracleParser.KW_MUST:
	        case InceptorOracleParser.KW_MUSTNOT:
	        case InceptorOracleParser.KW_POLICY:
	        case InceptorOracleParser.KW_POLICIES:
	        case InceptorOracleParser.KW_REMOVE:
	        case InceptorOracleParser.KW_POLICYKEY:
	        case InceptorOracleParser.KW_POLICY_RULE:
	        case InceptorOracleParser.KW_LOOKUP:
	        case InceptorOracleParser.KW_RULE_FUNCTION:
	        case InceptorOracleParser.KW_RULE_FUNCTIONS:
	        case InceptorOracleParser.KW_RULE_FUNCTION_PROPERTIES:
	        case InceptorOracleParser.KW_HOLD_DDLTIME:
	        case InceptorOracleParser.KW_CLUSTERSTATUS:
	        case InceptorOracleParser.KW_UTC:
	        case InceptorOracleParser.KW_UTCTIMESTAMP:
	        case InceptorOracleParser.KW_LONG:
	        case InceptorOracleParser.KW_DELETE:
	        case InceptorOracleParser.KW_PLUS:
	        case InceptorOracleParser.KW_MINUS:
	        case InceptorOracleParser.KW_OP_CONCAT:
	        case InceptorOracleParser.KW_FETCH:
	        case InceptorOracleParser.KW_INTERSECT:
	        case InceptorOracleParser.KW_VIEW:
	        case InceptorOracleParser.KW_IN:
	        case InceptorOracleParser.KW_DATABASES:
	        case InceptorOracleParser.KW_MATERIALIZED:
	        case InceptorOracleParser.KW_SCHEMA:
	        case InceptorOracleParser.KW_SCHEMAS:
	        case InceptorOracleParser.KW_GRANT:
	        case InceptorOracleParser.KW_REVOKE:
	        case InceptorOracleParser.KW_SSL:
	        case InceptorOracleParser.KW_UNDO:
	        case InceptorOracleParser.KW_LOCK:
	        case InceptorOracleParser.KW_LOCKS:
	        case InceptorOracleParser.KW_UNLOCK:
	        case InceptorOracleParser.KW_SHARED:
	        case InceptorOracleParser.KW_EXCLUSIVE:
	        case InceptorOracleParser.KW_PROCEDURE:
	        case InceptorOracleParser.KW_UNSIGNED:
	        case InceptorOracleParser.KW_WHILE:
	        case InceptorOracleParser.KW_READ:
	        case InceptorOracleParser.KW_READS:
	        case InceptorOracleParser.KW_PURGE:
	        case InceptorOracleParser.KW_RANGE:
	        case InceptorOracleParser.KW_ANALYZE:
	        case InceptorOracleParser.KW_BEFORE:
	        case InceptorOracleParser.KW_BETWEEN:
	        case InceptorOracleParser.KW_BOTH:
	        case InceptorOracleParser.KW_BINARY:
	        case InceptorOracleParser.KW_DEFAULT:
	        case InceptorOracleParser.KW_TYPE:
	        case InceptorOracleParser.KW_TRIGGER:
	        case InceptorOracleParser.KW_RECORDREADER:
	        case InceptorOracleParser.KW_RECORDWRITER:
	        case InceptorOracleParser.KW_SEMI:
	        case InceptorOracleParser.KW_LATERAL:
	        case InceptorOracleParser.KW_TOUCH:
	        case InceptorOracleParser.KW_ARCHIVE:
	        case InceptorOracleParser.KW_UNARCHIVE:
	        case InceptorOracleParser.KW_COMPUTE:
	        case InceptorOracleParser.KW_STATISTICS:
	        case InceptorOracleParser.KW_USE:
	        case InceptorOracleParser.KW_OPTION:
	        case InceptorOracleParser.KW_CONCATENATE:
	        case InceptorOracleParser.KW_SHOW_DATABASE:
	        case InceptorOracleParser.KW_UPDATE:
	        case InceptorOracleParser.KW_RESTRICT:
	        case InceptorOracleParser.KW_CASCADE:
	        case InceptorOracleParser.KW_SKEWED:
	        case InceptorOracleParser.KW_DIRECTORIES:
	        case InceptorOracleParser.KW_WINDOWRESET:
	        case InceptorOracleParser.KW_SESSIONSTART:
	        case InceptorOracleParser.KW_SESSIONSTOP:
	        case InceptorOracleParser.KW_SESSIONEXPIRE:
	        case InceptorOracleParser.KW_SESSIONEXPIRE_DISCARD:
	        case InceptorOracleParser.KW_SESSIONEXPIRE_COMPLETE:
	        case InceptorOracleParser.KW_STREAMWINDOW:
	        case InceptorOracleParser.KW_STREAMWINDOWSLIDELENGTH:
	        case InceptorOracleParser.KW_STREAMWINDOWSEPARATED:
	        case InceptorOracleParser.KW_FOLLOWEDBY:
	        case InceptorOracleParser.KW_NOTFOLLOWEDBY:
	        case InceptorOracleParser.KW_NOTNEXT:
	        case InceptorOracleParser.KW_PATTERN_TIMES:
	        case InceptorOracleParser.KW_CURRVALUE:
	        case InceptorOracleParser.KW_GROUPING:
	        case InceptorOracleParser.KW_SETS:
	        case InceptorOracleParser.KW_TRUNCATE:
	        case InceptorOracleParser.KW_NOSCAN:
	        case InceptorOracleParser.KW_USER:
	        case InceptorOracleParser.KW_QUOTA:
	        case InceptorOracleParser.KW_PERMISSION:
	        case InceptorOracleParser.KW_ROLE:
	        case InceptorOracleParser.KW_ROLES:
	        case InceptorOracleParser.KW_INNER:
	        case InceptorOracleParser.KW_ADMIN:
	        case InceptorOracleParser.KW_OWNER:
	        case InceptorOracleParser.KW_PRINCIPALS:
	        case InceptorOracleParser.KW_CONSTANT:
	        case InceptorOracleParser.KW_CONSTRAINT:
	        case InceptorOracleParser.KW_VALUES:
	        case InceptorOracleParser.KW_YEAR:
	        case InceptorOracleParser.KW_MONTH:
	        case InceptorOracleParser.KW_DAY:
	        case InceptorOracleParser.KW_MINUTE:
	        case InceptorOracleParser.KW_HOUR:
	        case InceptorOracleParser.KW_SECOND:
	        case InceptorOracleParser.KW_INTERVAL:
	        case InceptorOracleParser.KW_SYSDATE:
	        case InceptorOracleParser.KW_NOMAXVALUE:
	        case InceptorOracleParser.KW_MINVALUE:
	        case InceptorOracleParser.KW_NOMINVALUE:
	        case InceptorOracleParser.KW_CYCLE:
	        case InceptorOracleParser.KW_CACHE:
	        case InceptorOracleParser.KW_CACHEDMETRIC:
	        case InceptorOracleParser.KW_CACHEDMETRICS:
	        case InceptorOracleParser.KW_NOCACHE:
	        case InceptorOracleParser.KW_NOORDER:
	        case InceptorOracleParser.KW_MERGE:
	        case InceptorOracleParser.KW_PLANT:
	        case InceptorOracleParser.KW_IMMEDIATE:
	        case InceptorOracleParser.KW_COMPACT:
	        case InceptorOracleParser.KW_STOP:
	        case InceptorOracleParser.KW_LIST:
	        case InceptorOracleParser.KW_TRANSACTION:
	        case InceptorOracleParser.KW_WORK:
	        case InceptorOracleParser.KW_SPACE:
	        case InceptorOracleParser.KW_CONF:
	        case InceptorOracleParser.KW_DEFINED:
	        case InceptorOracleParser.KW_INTEGER:
	        case InceptorOracleParser.KW_ONLY:
	        case InceptorOracleParser.KW_SERVER:
	        case InceptorOracleParser.KW_TRANSACTIONS:
	        case InceptorOracleParser.KW_URI:
	        case InceptorOracleParser.KW_WRITE:
	        case InceptorOracleParser.KW_FACL:
	        case InceptorOracleParser.KW_FOUND:
	        case InceptorOracleParser.KW_LEVEL:
	        case InceptorOracleParser.KW_PUBLIC:
	        case InceptorOracleParser.KW_LINKS:
	        case InceptorOracleParser.KW_CONNECT:
	        case InceptorOracleParser.KW_APPLICATION:
	        case InceptorOracleParser.KW_APPLICATIONS:
	        case InceptorOracleParser.KW_APP:
	        case InceptorOracleParser.KW_APPS:
	        case InceptorOracleParser.KW_INFINITE:
	        case InceptorOracleParser.KW_WAIT:
	        case InceptorOracleParser.KW_PRIMARY:
	        case InceptorOracleParser.KW_FOREIGN:
	        case InceptorOracleParser.KW_REFERENCES:
	        case InceptorOracleParser.KW_VALIDATE:
	        case InceptorOracleParser.KW_NOVALIDATE:
	        case InceptorOracleParser.KW_RELY:
	        case InceptorOracleParser.KW_NORELY:
	        case InceptorOracleParser.KW_KEY:
	        case InceptorOracleParser.KW_SEGMENT:
	        case InceptorOracleParser.KW_LENGTH:
	        case InceptorOracleParser.KW_ATTACH:
	        case InceptorOracleParser.KW_DETTACH:
	        case InceptorOracleParser.KW_SHARD:
	        case InceptorOracleParser.KW_NUM:
	        case InceptorOracleParser.KW_FULLTEXT:
	        case InceptorOracleParser.KW_TABLESIZE:
	        case InceptorOracleParser.KW_TABLET:
	        case InceptorOracleParser.KW_CAPACITY:
	        case InceptorOracleParser.KW_ANALYZER:
	        case InceptorOracleParser.KW_SYNC:
	        case InceptorOracleParser.KW_NO_INDEX:
	        case InceptorOracleParser.KW_LOG:
	        case InceptorOracleParser.KW_FILE:
	        case InceptorOracleParser.KW_JAR:
	        case InceptorOracleParser.KW_PERMANENT:
	        case InceptorOracleParser.KW_SCHEDULER:
	        case InceptorOracleParser.KW_MODE:
	        case InceptorOracleParser.LPAREN:
	        case InceptorOracleParser.Identifier:
	        case InceptorOracleParser.KW_NOCOPY:
	        case InceptorOracleParser.KW_VARRAY:
	        case InceptorOracleParser.KW_PACKAGE:
	        case InceptorOracleParser.KW_PACKAGES:
	        case InceptorOracleParser.KW_BODY:
	        case InceptorOracleParser.KW_ISOPEN:
	        case InceptorOracleParser.KW_NOTFOUND:
	        case InceptorOracleParser.KW_ROWCOUNT:
	        case InceptorOracleParser.KW_BULK_ROWCOUNT:
	        case InceptorOracleParser.KW_BULK_EXCEPTIONS:
	        case InceptorOracleParser.KW_REVERSE:
	        case InceptorOracleParser.KW_SAVE:
	        case InceptorOracleParser.KW_EXCEPTIONS:
	        case InceptorOracleParser.KW_INDICES:
	        case InceptorOracleParser.KW_REF:
	        case InceptorOracleParser.KW_YEARS:
	        case InceptorOracleParser.KW_MONTHS:
	        case InceptorOracleParser.KW_DAYS:
	        case InceptorOracleParser.KW_HOURS:
	        case InceptorOracleParser.KW_MINUTES:
	        case InceptorOracleParser.KW_SECONDS:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4805;
	            this.fromSource();
	            this.state = 4817;
	            this._errHandler.sync(this);
	            let _alt = this._interp.adaptivePredict(this._input,448,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 4815;
	                    this._errHandler.sync(this);
	                    switch(this._input.LA(1)) {
	                    case InceptorOracleParser.KW_CROSS:
	                    case InceptorOracleParser.KW_NATURAL:
	                    case InceptorOracleParser.COMMA:
	                        this.state = 4806;
	                        this.joinToken();
	                        this.state = 4807;
	                        this.fromSource();
	                        break;
	                    case InceptorOracleParser.KW_JOIN:
	                    case InceptorOracleParser.KW_LEFT:
	                    case InceptorOracleParser.KW_RIGHT:
	                    case InceptorOracleParser.KW_FULL:
	                    case InceptorOracleParser.KW_INNER:
	                        this.state = 4809;
	                        this.joinTokenRequireOn();
	                        this.state = 4810;
	                        this.fromSource();
	                        this.state = 4813;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                        if(_la===InceptorOracleParser.KW_ON) {
	                            this.state = 4811;
	                            this.match(InceptorOracleParser.KW_ON);
	                            this.state = 4812;
	                            this.expression();
	                        }

	                        break;
	                    default:
	                        throw new antlr4.error.NoViableAltException(this);
	                    } 
	                }
	                this.state = 4819;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,448,this._ctx);
	            }

	            break;
	        case InceptorOracleParser.KW_UNIQUEJOIN:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4820;
	            this.uniqueJoinToken();
	            this.state = 4821;
	            this.uniqueJoinSource();
	            this.state = 4824; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 4822;
	                this.match(InceptorOracleParser.COMMA);
	                this.state = 4823;
	                this.uniqueJoinSource();
	                this.state = 4826; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===InceptorOracleParser.COMMA);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	uniqueJoinSource() {
	    let localctx = new UniqueJoinSourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 782, InceptorOracleParser.RULE_uniqueJoinSource);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4831;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_PRESERVE) {
	            this.state = 4830;
	            this.match(InceptorOracleParser.KW_PRESERVE);
	        }

	        this.state = 4833;
	        this.fromSource();
	        this.state = 4834;
	        this.uniqueJoinExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	uniqueJoinExpr() {
	    let localctx = new UniqueJoinExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 784, InceptorOracleParser.RULE_uniqueJoinExpr);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4836;
	        this.match(InceptorOracleParser.LPAREN);
	        this.state = 4837;
	        localctx._expression = this.expression();
	        localctx.e1.push(localctx._expression);
	        this.state = 4842;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===InceptorOracleParser.COMMA) {
	            this.state = 4838;
	            this.match(InceptorOracleParser.COMMA);
	            this.state = 4839;
	            localctx._expression = this.expression();
	            localctx.e1.push(localctx._expression);
	            this.state = 4844;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 4845;
	        this.match(InceptorOracleParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	uniqueJoinToken() {
	    let localctx = new UniqueJoinTokenContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 786, InceptorOracleParser.RULE_uniqueJoinToken);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4847;
	        this.match(InceptorOracleParser.KW_UNIQUEJOIN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	joinToken() {
	    let localctx = new JoinTokenContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 788, InceptorOracleParser.RULE_joinToken);
	    try {
	        this.state = 4854;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case InceptorOracleParser.KW_NATURAL:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4849;
	            this.match(InceptorOracleParser.KW_NATURAL);
	            this.state = 4850;
	            this.match(InceptorOracleParser.KW_JOIN);
	            break;
	        case InceptorOracleParser.KW_CROSS:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4851;
	            this.match(InceptorOracleParser.KW_CROSS);
	            this.state = 4852;
	            this.match(InceptorOracleParser.KW_JOIN);
	            break;
	        case InceptorOracleParser.COMMA:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4853;
	            this.match(InceptorOracleParser.COMMA);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	joinTokenRequireOn() {
	    let localctx = new JoinTokenRequireOnContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 790, InceptorOracleParser.RULE_joinTokenRequireOn);
	    var _la = 0; // Token type
	    try {
	        this.state = 4880;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,457,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4856;
	            this.match(InceptorOracleParser.KW_JOIN);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4857;
	            this.match(InceptorOracleParser.KW_INNER);
	            this.state = 4858;
	            this.match(InceptorOracleParser.KW_JOIN);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4859;
	            this.match(InceptorOracleParser.KW_LEFT);
	            this.state = 4861;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_OUTER) {
	                this.state = 4860;
	                this.match(InceptorOracleParser.KW_OUTER);
	            }

	            this.state = 4863;
	            this.match(InceptorOracleParser.KW_JOIN);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4864;
	            this.match(InceptorOracleParser.KW_RIGHT);
	            this.state = 4866;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_OUTER) {
	                this.state = 4865;
	                this.match(InceptorOracleParser.KW_OUTER);
	            }

	            this.state = 4868;
	            this.match(InceptorOracleParser.KW_JOIN);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4869;
	            this.match(InceptorOracleParser.KW_FULL);
	            this.state = 4871;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_OUTER) {
	                this.state = 4870;
	                this.match(InceptorOracleParser.KW_OUTER);
	            }

	            this.state = 4873;
	            this.match(InceptorOracleParser.KW_JOIN);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 4874;
	            this.match(InceptorOracleParser.KW_LEFT);
	            this.state = 4875;
	            this.match(InceptorOracleParser.KW_SEMI);
	            this.state = 4876;
	            this.match(InceptorOracleParser.KW_JOIN);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 4877;
	            this.match(InceptorOracleParser.KW_LEFT);
	            this.state = 4878;
	            this.match(InceptorOracleParser.KW_ANTISEMI);
	            this.state = 4879;
	            this.match(InceptorOracleParser.KW_JOIN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lateralView() {
	    let localctx = new LateralViewContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 792, InceptorOracleParser.RULE_lateralView);
	    var _la = 0; // Token type
	    try {
	        this.state = 4913;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,462,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4882;
	            this.match(InceptorOracleParser.KW_LATERAL);
	            this.state = 4883;
	            this.match(InceptorOracleParser.KW_VIEW);
	            this.state = 4884;
	            this.match(InceptorOracleParser.KW_OUTER);
	            this.state = 4885;
	            this.normfunction();
	            this.state = 4886;
	            this.tableAlias();
	            this.state = 4896;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_AS) {
	                this.state = 4887;
	                this.match(InceptorOracleParser.KW_AS);
	                this.state = 4888;
	                this.identifier();
	                this.state = 4893;
	                this._errHandler.sync(this);
	                let _alt = this._interp.adaptivePredict(this._input,458,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 4889;
	                        this.match(InceptorOracleParser.COMMA);
	                        this.state = 4890;
	                        this.identifier(); 
	                    }
	                    this.state = 4895;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,458,this._ctx);
	                }

	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4898;
	            this.match(InceptorOracleParser.KW_LATERAL);
	            this.state = 4899;
	            this.match(InceptorOracleParser.KW_VIEW);
	            this.state = 4900;
	            this.normfunction();
	            this.state = 4901;
	            this.tableAlias();
	            this.state = 4911;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_AS) {
	                this.state = 4902;
	                this.match(InceptorOracleParser.KW_AS);
	                this.state = 4903;
	                this.identifier();
	                this.state = 4908;
	                this._errHandler.sync(this);
	                let _alt = this._interp.adaptivePredict(this._input,460,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 4904;
	                        this.match(InceptorOracleParser.COMMA);
	                        this.state = 4905;
	                        this.identifier(); 
	                    }
	                    this.state = 4910;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,460,this._ctx);
	                }

	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fromSource() {
	    let localctx = new FromSourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 794, InceptorOracleParser.RULE_fromSource);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4920;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,463,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 4915;
	            this.patternSource();
	            break;

	        case 2:
	            this.state = 4916;
	            this.partitionedTableFunction();
	            break;

	        case 3:
	            this.state = 4917;
	            this.tableSource();
	            break;

	        case 4:
	            this.state = 4918;
	            this.subQuerySource();
	            break;

	        case 5:
	            this.state = 4919;
	            this.valuesSource();
	            break;

	        }
	        this.state = 4925;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,464,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 4922;
	                this.lateralView(); 
	            }
	            this.state = 4927;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,464,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableSource() {
	    let localctx = new TableSourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 796, InceptorOracleParser.RULE_tableSource);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4928;
	        localctx.tabname = this.tableName();
	        this.state = 4930;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,465,this._ctx);
	        if(la_===1) {
	            this.state = 4929;
	            localctx.props = this.tableProperties();

	        }
	        this.state = 4933;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_TABLESAMPLE) {
	            this.state = 4932;
	            localctx.ts = this.tableSample();
	        }

	        this.state = 4936;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,467,this._ctx);
	        if(la_===1) {
	            this.state = 4935;
	            localctx.sw = this.stream_window_clause();

	        }
	        this.state = 4942;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,469,this._ctx);
	        if(la_===1) {
	            this.state = 4939;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_AS) {
	                this.state = 4938;
	                this.match(InceptorOracleParser.KW_AS);
	            }

	            this.state = 4941;
	            this.alias();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subQuerySource() {
	    let localctx = new SubQuerySourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 798, InceptorOracleParser.RULE_subQuerySource);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4944;
	        this.match(InceptorOracleParser.LPAREN);
	        this.state = 4945;
	        this.queryStatementExpression();
	        this.state = 4946;
	        this.match(InceptorOracleParser.RPAREN);
	        this.state = 4951;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,471,this._ctx);
	        if(la_===1) {
	            this.state = 4948;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_AS) {
	                this.state = 4947;
	                this.match(InceptorOracleParser.KW_AS);
	            }

	            this.state = 4950;
	            this.alias();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	valuesSource() {
	    let localctx = new ValuesSourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 800, InceptorOracleParser.RULE_valuesSource);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4953;
	        this.match(InceptorOracleParser.LPAREN);
	        this.state = 4954;
	        this.valuesClause();
	        this.state = 4955;
	        this.match(InceptorOracleParser.RPAREN);
	        this.state = 4960;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,473,this._ctx);
	        if(la_===1) {
	            this.state = 4957;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_AS) {
	                this.state = 4956;
	                this.match(InceptorOracleParser.KW_AS);
	            }

	            this.state = 4959;
	            this.tableOrColumnAliasOfValues();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	patternSource() {
	    let localctx = new PatternSourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 802, InceptorOracleParser.RULE_patternSource);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4962;
	        this.match(InceptorOracleParser.KW_PATTERN);
	        this.state = 4963;
	        this.match(InceptorOracleParser.LPAREN);
	        this.state = 4964;
	        this.patternExpression();
	        this.state = 4968;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 343)) & ~0x1f) == 0 && ((1 << (_la - 343)) & ((1 << (InceptorOracleParser.KW_FOLLOWEDBY - 343)) | (1 << (InceptorOracleParser.KW_NOTFOLLOWEDBY - 343)) | (1 << (InceptorOracleParser.KW_NOTNEXT - 343)))) !== 0) || _la===InceptorOracleParser.COMMA || _la===InceptorOracleParser.Identifier) {
	            this.state = 4965;
	            this.patternExpression();
	            this.state = 4970;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 4971;
	        this.match(InceptorOracleParser.RPAREN);
	        this.state = 4973;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,475,this._ctx);
	        if(la_===1) {
	            this.state = 4972;
	            this.patternTimewindow();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	patternEvent() {
	    let localctx = new PatternEventContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 804, InceptorOracleParser.RULE_patternEvent);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4975;
	        this.match(InceptorOracleParser.Identifier);
	        this.state = 4976;
	        this.match(InceptorOracleParser.EQUAL);
	        this.state = 4979;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case InceptorOracleParser.KW_TRUE:
	        case InceptorOracleParser.KW_FALSE:
	        case InceptorOracleParser.KW_ALL:
	        case InceptorOracleParser.KW_LIKE:
	        case InceptorOracleParser.KW_NO:
	        case InceptorOracleParser.KW_ANY:
	        case InceptorOracleParser.KW_EXISTS:
	        case InceptorOracleParser.KW_ASC:
	        case InceptorOracleParser.KW_DESC:
	        case InceptorOracleParser.KW_ORDER:
	        case InceptorOracleParser.KW_GROUP:
	        case InceptorOracleParser.KW_INCREMENT:
	        case InceptorOracleParser.KW_BY:
	        case InceptorOracleParser.KW_HASH:
	        case InceptorOracleParser.KW_INSERT:
	        case InceptorOracleParser.KW_OVERWRITE:
	        case InceptorOracleParser.KW_OUTER:
	        case InceptorOracleParser.KW_STREAMJOB:
	        case InceptorOracleParser.KW_STREAMJOBS:
	        case InceptorOracleParser.KW_AT:
	        case InceptorOracleParser.KW_LEFT:
	        case InceptorOracleParser.KW_RIGHT:
	        case InceptorOracleParser.KW_FULL:
	        case InceptorOracleParser.KW_PARTITION:
	        case InceptorOracleParser.KW_PARTITIONS:
	        case InceptorOracleParser.KW_PATTERN:
	        case InceptorOracleParser.KW_TABLE:
	        case InceptorOracleParser.KW_TABLES:
	        case InceptorOracleParser.KW_SEQUENCE:
	        case InceptorOracleParser.KW_SEQUENCES:
	        case InceptorOracleParser.KW_COLUMNS:
	        case InceptorOracleParser.KW_INDEX:
	        case InceptorOracleParser.KW_INDEXES:
	        case InceptorOracleParser.KW_REBUILD:
	        case InceptorOracleParser.KW_FUNCTIONS:
	        case InceptorOracleParser.KW_SHOW:
	        case InceptorOracleParser.KW_MSCK:
	        case InceptorOracleParser.KW_REPAIR:
	        case InceptorOracleParser.KW_DIRECTORY:
	        case InceptorOracleParser.KW_LOCAL:
	        case InceptorOracleParser.KW_GLOBAL:
	        case InceptorOracleParser.KW_USING:
	        case InceptorOracleParser.KW_CLUSTER:
	        case InceptorOracleParser.KW_DISTRIBUTE:
	        case InceptorOracleParser.KW_SORT:
	        case InceptorOracleParser.KW_UNION:
	        case InceptorOracleParser.KW_LOAD:
	        case InceptorOracleParser.KW_EXPORT:
	        case InceptorOracleParser.KW_IMPORT:
	        case InceptorOracleParser.KW_DATA:
	        case InceptorOracleParser.KW_INPATH:
	        case InceptorOracleParser.KW_IS:
	        case InceptorOracleParser.KW_NULLS:
	        case InceptorOracleParser.KW_CREATE:
	        case InceptorOracleParser.KW_EXTERNAL:
	        case InceptorOracleParser.KW_ALTER:
	        case InceptorOracleParser.KW_CHANGE:
	        case InceptorOracleParser.KW_FIRST:
	        case InceptorOracleParser.KW_LAST:
	        case InceptorOracleParser.KW_AFTER:
	        case InceptorOracleParser.KW_DESCRIBE:
	        case InceptorOracleParser.KW_DROP:
	        case InceptorOracleParser.KW_RENAME:
	        case InceptorOracleParser.KW_IGNORE:
	        case InceptorOracleParser.KW_RESPECT:
	        case InceptorOracleParser.KW_PROTECTION:
	        case InceptorOracleParser.KW_TO:
	        case InceptorOracleParser.KW_COMMENT:
	        case InceptorOracleParser.KW_PROMPT:
	        case InceptorOracleParser.KW_SPOOL:
	        case InceptorOracleParser.KW_BOOLEAN:
	        case InceptorOracleParser.KW_TINYINT:
	        case InceptorOracleParser.KW_BYTE:
	        case InceptorOracleParser.KW_SMALLINT:
	        case InceptorOracleParser.KW_INT:
	        case InceptorOracleParser.KW_BIGINT:
	        case InceptorOracleParser.KW_FLOAT:
	        case InceptorOracleParser.KW_DOUBLE:
	        case InceptorOracleParser.KW_DATE:
	        case InceptorOracleParser.KW_DATETIME:
	        case InceptorOracleParser.KW_TIMESTAMP:
	        case InceptorOracleParser.KW_TIME:
	        case InceptorOracleParser.KW_DECIMAL:
	        case InceptorOracleParser.KW_STRING:
	        case InceptorOracleParser.KW_GEO:
	        case InceptorOracleParser.KW_ARRAY:
	        case InceptorOracleParser.KW_STRUCT:
	        case InceptorOracleParser.KW_UNIONTYPE:
	        case InceptorOracleParser.KW_PARTITIONED:
	        case InceptorOracleParser.KW_ROUTED:
	        case InceptorOracleParser.KW_CLUSTERED:
	        case InceptorOracleParser.KW_SORTED:
	        case InceptorOracleParser.KW_NEXT:
	        case InceptorOracleParser.KW_NEXTVALUE:
	        case InceptorOracleParser.KW_BUCKETS:
	        case InceptorOracleParser.KW_ROW:
	        case InceptorOracleParser.KW_ROWS:
	        case InceptorOracleParser.KW_FORMAT:
	        case InceptorOracleParser.KW_DELIMITED:
	        case InceptorOracleParser.KW_FIELDS:
	        case InceptorOracleParser.KW_TERMINATED:
	        case InceptorOracleParser.KW_ESCAPED:
	        case InceptorOracleParser.KW_COLLECTION:
	        case InceptorOracleParser.KW_ITEMS:
	        case InceptorOracleParser.KW_KEYS:
	        case InceptorOracleParser.KW_KEY_TYPE:
	        case InceptorOracleParser.KW_LINES:
	        case InceptorOracleParser.KW_STORED:
	        case InceptorOracleParser.KW_FILEFORMAT:
	        case InceptorOracleParser.KW_SEQUENCEFILE:
	        case InceptorOracleParser.KW_TEXTFILE:
	        case InceptorOracleParser.KW_CSVFILE:
	        case InceptorOracleParser.KW_FWCFILE:
	        case InceptorOracleParser.KW_RCFILE:
	        case InceptorOracleParser.KW_ORCFILE:
	        case InceptorOracleParser.KW_HOLODESK:
	        case InceptorOracleParser.KW_STELLARDB:
	        case InceptorOracleParser.KW_ORCTRANSACTIONFILE:
	        case InceptorOracleParser.KW_PARQUET:
	        case InceptorOracleParser.KW_HYPERDRIVE:
	        case InceptorOracleParser.KW_ESDRIVE:
	        case InceptorOracleParser.KW_INPUTFORMAT:
	        case InceptorOracleParser.KW_OUTPUTFORMAT:
	        case InceptorOracleParser.KW_INPUTDRIVER:
	        case InceptorOracleParser.KW_OUTPUTDRIVER:
	        case InceptorOracleParser.KW_OFFLINE:
	        case InceptorOracleParser.KW_ENABLE:
	        case InceptorOracleParser.KW_DISABLE:
	        case InceptorOracleParser.KW_READONLY:
	        case InceptorOracleParser.KW_NO_DROP:
	        case InceptorOracleParser.KW_LOCATION:
	        case InceptorOracleParser.KW_BUCKET:
	        case InceptorOracleParser.KW_OUT:
	        case InceptorOracleParser.KW_OF:
	        case InceptorOracleParser.KW_PERCENT:
	        case InceptorOracleParser.KW_ADD:
	        case InceptorOracleParser.KW_REPLACE:
	        case InceptorOracleParser.KW_RLIKE:
	        case InceptorOracleParser.KW_REGEXP:
	        case InceptorOracleParser.KW_TEMPORARY:
	        case InceptorOracleParser.KW_RESOURCE:
	        case InceptorOracleParser.KW_RELOAD:
	        case InceptorOracleParser.KW_EXPLAIN:
	        case InceptorOracleParser.KW_FORMATTED:
	        case InceptorOracleParser.KW_PRETTY:
	        case InceptorOracleParser.KW_DEPENDENCY:
	        case InceptorOracleParser.KW_LOGICAL:
	        case InceptorOracleParser.KW_COST:
	        case InceptorOracleParser.KW_SERDE:
	        case InceptorOracleParser.KW_WITH:
	        case InceptorOracleParser.KW_WITHIN:
	        case InceptorOracleParser.KW_DEFERRED:
	        case InceptorOracleParser.KW_SERDEPROPERTIES:
	        case InceptorOracleParser.KW_DBPROPERTIES:
	        case InceptorOracleParser.KW_LIMIT:
	        case InceptorOracleParser.KW_SET:
	        case InceptorOracleParser.KW_UNSET:
	        case InceptorOracleParser.KW_TBLPROPERTIES:
	        case InceptorOracleParser.KW_IDXPROPERTIES:
	        case InceptorOracleParser.KW_VALUE_TYPE:
	        case InceptorOracleParser.KW_ELEM_TYPE:
	        case InceptorOracleParser.KW_PRIOR:
	        case InceptorOracleParser.KW_NOCYCLE:
	        case InceptorOracleParser.KW_MAPJOIN:
	        case InceptorOracleParser.KW_COMBINE:
	        case InceptorOracleParser.KW_COMBINE_STRUCT_INDEX:
	        case InceptorOracleParser.KW_GLKJOIN:
	        case InceptorOracleParser.KW_USE_INDEX:
	        case InceptorOracleParser.KW_STARGATE:
	        case InceptorOracleParser.KW_USE_BULKLOAD:
	        case InceptorOracleParser.KW_ADHOC:
	        case InceptorOracleParser.KW_PRECOMPILE:
	        case InceptorOracleParser.KW_STREAMTABLE:
	        case InceptorOracleParser.KW_STREAM:
	        case InceptorOracleParser.KW_RULEBASE:
	        case InceptorOracleParser.KW_RULEBASES:
	        case InceptorOracleParser.KW_RULE:
	        case InceptorOracleParser.KW_RULES:
	        case InceptorOracleParser.KW_MEET:
	        case InceptorOracleParser.KW_MUST:
	        case InceptorOracleParser.KW_MUSTNOT:
	        case InceptorOracleParser.KW_POLICY:
	        case InceptorOracleParser.KW_POLICIES:
	        case InceptorOracleParser.KW_REMOVE:
	        case InceptorOracleParser.KW_POLICYKEY:
	        case InceptorOracleParser.KW_POLICY_RULE:
	        case InceptorOracleParser.KW_LOOKUP:
	        case InceptorOracleParser.KW_RULE_FUNCTION:
	        case InceptorOracleParser.KW_RULE_FUNCTIONS:
	        case InceptorOracleParser.KW_RULE_FUNCTION_PROPERTIES:
	        case InceptorOracleParser.KW_HOLD_DDLTIME:
	        case InceptorOracleParser.KW_CLUSTERSTATUS:
	        case InceptorOracleParser.KW_UTC:
	        case InceptorOracleParser.KW_UTCTIMESTAMP:
	        case InceptorOracleParser.KW_LONG:
	        case InceptorOracleParser.KW_DELETE:
	        case InceptorOracleParser.KW_PLUS:
	        case InceptorOracleParser.KW_MINUS:
	        case InceptorOracleParser.KW_OP_CONCAT:
	        case InceptorOracleParser.KW_FETCH:
	        case InceptorOracleParser.KW_INTERSECT:
	        case InceptorOracleParser.KW_VIEW:
	        case InceptorOracleParser.KW_IN:
	        case InceptorOracleParser.KW_DATABASES:
	        case InceptorOracleParser.KW_MATERIALIZED:
	        case InceptorOracleParser.KW_SCHEMA:
	        case InceptorOracleParser.KW_SCHEMAS:
	        case InceptorOracleParser.KW_GRANT:
	        case InceptorOracleParser.KW_REVOKE:
	        case InceptorOracleParser.KW_SSL:
	        case InceptorOracleParser.KW_UNDO:
	        case InceptorOracleParser.KW_LOCK:
	        case InceptorOracleParser.KW_LOCKS:
	        case InceptorOracleParser.KW_UNLOCK:
	        case InceptorOracleParser.KW_SHARED:
	        case InceptorOracleParser.KW_EXCLUSIVE:
	        case InceptorOracleParser.KW_PROCEDURE:
	        case InceptorOracleParser.KW_UNSIGNED:
	        case InceptorOracleParser.KW_WHILE:
	        case InceptorOracleParser.KW_READ:
	        case InceptorOracleParser.KW_READS:
	        case InceptorOracleParser.KW_PURGE:
	        case InceptorOracleParser.KW_RANGE:
	        case InceptorOracleParser.KW_ANALYZE:
	        case InceptorOracleParser.KW_BEFORE:
	        case InceptorOracleParser.KW_BETWEEN:
	        case InceptorOracleParser.KW_BOTH:
	        case InceptorOracleParser.KW_BINARY:
	        case InceptorOracleParser.KW_DEFAULT:
	        case InceptorOracleParser.KW_TYPE:
	        case InceptorOracleParser.KW_TRIGGER:
	        case InceptorOracleParser.KW_RECORDREADER:
	        case InceptorOracleParser.KW_RECORDWRITER:
	        case InceptorOracleParser.KW_SEMI:
	        case InceptorOracleParser.KW_LATERAL:
	        case InceptorOracleParser.KW_TOUCH:
	        case InceptorOracleParser.KW_ARCHIVE:
	        case InceptorOracleParser.KW_UNARCHIVE:
	        case InceptorOracleParser.KW_COMPUTE:
	        case InceptorOracleParser.KW_STATISTICS:
	        case InceptorOracleParser.KW_USE:
	        case InceptorOracleParser.KW_OPTION:
	        case InceptorOracleParser.KW_CONCATENATE:
	        case InceptorOracleParser.KW_SHOW_DATABASE:
	        case InceptorOracleParser.KW_UPDATE:
	        case InceptorOracleParser.KW_RESTRICT:
	        case InceptorOracleParser.KW_CASCADE:
	        case InceptorOracleParser.KW_SKEWED:
	        case InceptorOracleParser.KW_DIRECTORIES:
	        case InceptorOracleParser.KW_WINDOWRESET:
	        case InceptorOracleParser.KW_SESSIONSTART:
	        case InceptorOracleParser.KW_SESSIONSTOP:
	        case InceptorOracleParser.KW_SESSIONEXPIRE:
	        case InceptorOracleParser.KW_SESSIONEXPIRE_DISCARD:
	        case InceptorOracleParser.KW_SESSIONEXPIRE_COMPLETE:
	        case InceptorOracleParser.KW_STREAMWINDOW:
	        case InceptorOracleParser.KW_STREAMWINDOWSLIDELENGTH:
	        case InceptorOracleParser.KW_STREAMWINDOWSEPARATED:
	        case InceptorOracleParser.KW_FOLLOWEDBY:
	        case InceptorOracleParser.KW_NOTFOLLOWEDBY:
	        case InceptorOracleParser.KW_NOTNEXT:
	        case InceptorOracleParser.KW_PATTERN_TIMES:
	        case InceptorOracleParser.KW_CURRVALUE:
	        case InceptorOracleParser.KW_GROUPING:
	        case InceptorOracleParser.KW_SETS:
	        case InceptorOracleParser.KW_TRUNCATE:
	        case InceptorOracleParser.KW_NOSCAN:
	        case InceptorOracleParser.KW_USER:
	        case InceptorOracleParser.KW_QUOTA:
	        case InceptorOracleParser.KW_PERMISSION:
	        case InceptorOracleParser.KW_ROLE:
	        case InceptorOracleParser.KW_ROLES:
	        case InceptorOracleParser.KW_INNER:
	        case InceptorOracleParser.KW_ADMIN:
	        case InceptorOracleParser.KW_OWNER:
	        case InceptorOracleParser.KW_PRINCIPALS:
	        case InceptorOracleParser.KW_CONSTANT:
	        case InceptorOracleParser.KW_CONSTRAINT:
	        case InceptorOracleParser.KW_VALUES:
	        case InceptorOracleParser.KW_YEAR:
	        case InceptorOracleParser.KW_MONTH:
	        case InceptorOracleParser.KW_DAY:
	        case InceptorOracleParser.KW_MINUTE:
	        case InceptorOracleParser.KW_HOUR:
	        case InceptorOracleParser.KW_SECOND:
	        case InceptorOracleParser.KW_INTERVAL:
	        case InceptorOracleParser.KW_SYSDATE:
	        case InceptorOracleParser.KW_NOMAXVALUE:
	        case InceptorOracleParser.KW_MINVALUE:
	        case InceptorOracleParser.KW_NOMINVALUE:
	        case InceptorOracleParser.KW_CYCLE:
	        case InceptorOracleParser.KW_CACHE:
	        case InceptorOracleParser.KW_CACHEDMETRIC:
	        case InceptorOracleParser.KW_CACHEDMETRICS:
	        case InceptorOracleParser.KW_NOCACHE:
	        case InceptorOracleParser.KW_NOORDER:
	        case InceptorOracleParser.KW_MERGE:
	        case InceptorOracleParser.KW_PLANT:
	        case InceptorOracleParser.KW_IMMEDIATE:
	        case InceptorOracleParser.KW_COMPACT:
	        case InceptorOracleParser.KW_STOP:
	        case InceptorOracleParser.KW_LIST:
	        case InceptorOracleParser.KW_TRANSACTION:
	        case InceptorOracleParser.KW_WORK:
	        case InceptorOracleParser.KW_SPACE:
	        case InceptorOracleParser.KW_CONF:
	        case InceptorOracleParser.KW_DEFINED:
	        case InceptorOracleParser.KW_INTEGER:
	        case InceptorOracleParser.KW_ONLY:
	        case InceptorOracleParser.KW_SERVER:
	        case InceptorOracleParser.KW_TRANSACTIONS:
	        case InceptorOracleParser.KW_URI:
	        case InceptorOracleParser.KW_WRITE:
	        case InceptorOracleParser.KW_FACL:
	        case InceptorOracleParser.KW_FOUND:
	        case InceptorOracleParser.KW_LEVEL:
	        case InceptorOracleParser.KW_PUBLIC:
	        case InceptorOracleParser.KW_LINKS:
	        case InceptorOracleParser.KW_CONNECT:
	        case InceptorOracleParser.KW_APPLICATION:
	        case InceptorOracleParser.KW_APPLICATIONS:
	        case InceptorOracleParser.KW_APP:
	        case InceptorOracleParser.KW_APPS:
	        case InceptorOracleParser.KW_INFINITE:
	        case InceptorOracleParser.KW_WAIT:
	        case InceptorOracleParser.KW_PRIMARY:
	        case InceptorOracleParser.KW_FOREIGN:
	        case InceptorOracleParser.KW_REFERENCES:
	        case InceptorOracleParser.KW_VALIDATE:
	        case InceptorOracleParser.KW_NOVALIDATE:
	        case InceptorOracleParser.KW_RELY:
	        case InceptorOracleParser.KW_NORELY:
	        case InceptorOracleParser.KW_KEY:
	        case InceptorOracleParser.KW_SEGMENT:
	        case InceptorOracleParser.KW_LENGTH:
	        case InceptorOracleParser.KW_ATTACH:
	        case InceptorOracleParser.KW_DETTACH:
	        case InceptorOracleParser.KW_SHARD:
	        case InceptorOracleParser.KW_NUM:
	        case InceptorOracleParser.KW_FULLTEXT:
	        case InceptorOracleParser.KW_TABLESIZE:
	        case InceptorOracleParser.KW_TABLET:
	        case InceptorOracleParser.KW_CAPACITY:
	        case InceptorOracleParser.KW_ANALYZER:
	        case InceptorOracleParser.KW_SYNC:
	        case InceptorOracleParser.KW_NO_INDEX:
	        case InceptorOracleParser.KW_LOG:
	        case InceptorOracleParser.KW_FILE:
	        case InceptorOracleParser.KW_JAR:
	        case InceptorOracleParser.KW_PERMANENT:
	        case InceptorOracleParser.KW_SCHEDULER:
	        case InceptorOracleParser.KW_MODE:
	        case InceptorOracleParser.Identifier:
	        case InceptorOracleParser.KW_NOCOPY:
	        case InceptorOracleParser.KW_VARRAY:
	        case InceptorOracleParser.KW_PACKAGE:
	        case InceptorOracleParser.KW_PACKAGES:
	        case InceptorOracleParser.KW_BODY:
	        case InceptorOracleParser.KW_ISOPEN:
	        case InceptorOracleParser.KW_NOTFOUND:
	        case InceptorOracleParser.KW_ROWCOUNT:
	        case InceptorOracleParser.KW_BULK_ROWCOUNT:
	        case InceptorOracleParser.KW_BULK_EXCEPTIONS:
	        case InceptorOracleParser.KW_REVERSE:
	        case InceptorOracleParser.KW_SAVE:
	        case InceptorOracleParser.KW_EXCEPTIONS:
	        case InceptorOracleParser.KW_INDICES:
	        case InceptorOracleParser.KW_REF:
	        case InceptorOracleParser.KW_YEARS:
	        case InceptorOracleParser.KW_MONTHS:
	        case InceptorOracleParser.KW_DAYS:
	        case InceptorOracleParser.KW_HOURS:
	        case InceptorOracleParser.KW_MINUTES:
	        case InceptorOracleParser.KW_SECONDS:
	            this.state = 4977;
	            localctx.stream = this.tableSource();
	            break;
	        case InceptorOracleParser.LPAREN:
	            this.state = 4978;
	            this.subQuerySource();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 4981;
	        this.match(InceptorOracleParser.LSQUARE);
	        this.state = 4982;
	        this.expression();
	        this.state = 4983;
	        this.match(InceptorOracleParser.RSQUARE);
	        this.state = 4985;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.LSQUARE) {
	            this.state = 4984;
	            this.timesExpr();
	        }

	        this.state = 4988;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.PLUS) {
	            this.state = 4987;
	            this.oneOrMoreExpr();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	timesExpr() {
	    let localctx = new TimesExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 806, InceptorOracleParser.RULE_timesExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4990;
	        this.match(InceptorOracleParser.LSQUARE);
	        this.state = 4991;
	        this.match(InceptorOracleParser.KW_PATTERN_TIMES);
	        this.state = 4992;
	        this.match(InceptorOracleParser.LPAREN);
	        this.state = 4993;
	        localctx.numerator = this.match(InceptorOracleParser.Number);
	        this.state = 4994;
	        this.match(InceptorOracleParser.RPAREN);
	        this.state = 4995;
	        this.match(InceptorOracleParser.RSQUARE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oneOrMoreExpr() {
	    let localctx = new OneOrMoreExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 808, InceptorOracleParser.RULE_oneOrMoreExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4997;
	        this.match(InceptorOracleParser.PLUS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	patternExpression() {
	    let localctx = new PatternExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 810, InceptorOracleParser.RULE_patternExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5002;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 343)) & ~0x1f) == 0 && ((1 << (_la - 343)) & ((1 << (InceptorOracleParser.KW_FOLLOWEDBY - 343)) | (1 << (InceptorOracleParser.KW_NOTFOLLOWEDBY - 343)) | (1 << (InceptorOracleParser.KW_NOTNEXT - 343)))) !== 0) || _la===InceptorOracleParser.COMMA) {
	            this.state = 4999;
	            this.eventOp();
	            this.state = 5004;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 5005;
	        this.patternEvent();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	eventOp() {
	    let localctx = new EventOpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 812, InceptorOracleParser.RULE_eventOp);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5007;
	        _la = this._input.LA(1);
	        if(!(((((_la - 343)) & ~0x1f) == 0 && ((1 << (_la - 343)) & ((1 << (InceptorOracleParser.KW_FOLLOWEDBY - 343)) | (1 << (InceptorOracleParser.KW_NOTFOLLOWEDBY - 343)) | (1 << (InceptorOracleParser.KW_NOTNEXT - 343)))) !== 0) || _la===InceptorOracleParser.COMMA)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	patternTimewindow() {
	    let localctx = new PatternTimewindowContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 814, InceptorOracleParser.RULE_patternTimewindow);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5009;
	        this.match(InceptorOracleParser.KW_WITHIN);
	        this.state = 5010;
	        this.match(InceptorOracleParser.LPAREN);
	        this.state = 5011;
	        this.cepIntervalLiteral();
	        this.state = 5012;
	        this.match(InceptorOracleParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cepIntervalLiteral() {
	    let localctx = new CepIntervalLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 816, InceptorOracleParser.RULE_cepIntervalLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5014;
	        this.match(InceptorOracleParser.StringLiteral);
	        this.state = 5015;
	        localctx.qualifiers = this.cepIntervalQualifiers();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cepIntervalQualifiers() {
	    let localctx = new CepIntervalQualifiersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 818, InceptorOracleParser.RULE_cepIntervalQualifiers);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5017;
	        _la = this._input.LA(1);
	        if(!(((((_la - 384)) & ~0x1f) == 0 && ((1 << (_la - 384)) & ((1 << (InceptorOracleParser.KW_DAY - 384)) | (1 << (InceptorOracleParser.KW_MINUTE - 384)) | (1 << (InceptorOracleParser.KW_HOUR - 384)) | (1 << (InceptorOracleParser.KW_SECOND - 384)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableBucketSample() {
	    let localctx = new TableBucketSampleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 820, InceptorOracleParser.RULE_tableBucketSample);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5019;
	        this.match(InceptorOracleParser.KW_TABLESAMPLE);
	        this.state = 5020;
	        this.match(InceptorOracleParser.LPAREN);
	        this.state = 5021;
	        this.match(InceptorOracleParser.KW_BUCKET);

	        this.state = 5022;
	        localctx.numerator = this.match(InceptorOracleParser.Number);
	        this.state = 5023;
	        this.match(InceptorOracleParser.KW_OUT);
	        this.state = 5024;
	        this.match(InceptorOracleParser.KW_OF);

	        this.state = 5025;
	        localctx.denominator = this.match(InceptorOracleParser.Number);
	        this.state = 5035;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_ON) {
	            this.state = 5026;
	            this.match(InceptorOracleParser.KW_ON);
	            this.state = 5027;
	            localctx._expression = this.expression();
	            localctx.expr.push(localctx._expression);
	            this.state = 5032;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===InceptorOracleParser.COMMA) {
	                this.state = 5028;
	                this.match(InceptorOracleParser.COMMA);
	                this.state = 5029;
	                localctx._expression = this.expression();
	                localctx.expr.push(localctx._expression);
	                this.state = 5034;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 5037;
	        this.match(InceptorOracleParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	splitSample() {
	    let localctx = new SplitSampleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 822, InceptorOracleParser.RULE_splitSample);
	    try {
	        this.state = 5051;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,483,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5039;
	            this.match(InceptorOracleParser.KW_TABLESAMPLE);
	            this.state = 5040;
	            this.match(InceptorOracleParser.LPAREN);

	            this.state = 5041;
	            localctx.numerator = this.match(InceptorOracleParser.Number);
	            this.state = 5044;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case InceptorOracleParser.KW_PERCENT:
	                this.state = 5042;
	                localctx.percent = this.match(InceptorOracleParser.KW_PERCENT);
	                break;
	            case InceptorOracleParser.KW_ROWS:
	                this.state = 5043;
	                this.match(InceptorOracleParser.KW_ROWS);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 5046;
	            this.match(InceptorOracleParser.RPAREN);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5047;
	            this.match(InceptorOracleParser.KW_TABLESAMPLE);
	            this.state = 5048;
	            this.match(InceptorOracleParser.LPAREN);

	            this.state = 5049;
	            localctx.numerator = this.match(InceptorOracleParser.ByteLengthLiteral);
	            this.state = 5050;
	            this.match(InceptorOracleParser.RPAREN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableSample() {
	    let localctx = new TableSampleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 824, InceptorOracleParser.RULE_tableSample);
	    try {
	        this.state = 5055;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,484,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5053;
	            this.tableBucketSample();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5054;
	            this.splitSample();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	normfunction() {
	    let localctx = new NormfunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 826, InceptorOracleParser.RULE_normfunction);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5057;
	        this.functionName();
	        this.state = 5058;
	        this.match(InceptorOracleParser.LPAREN);
	        this.state = 5073;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,488,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 5059;
	            this.match(InceptorOracleParser.STAR);
	            break;

	        case 2:
	            this.state = 5061;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_DISTINCT) {
	                this.state = 5060;
	                this.match(InceptorOracleParser.KW_DISTINCT);
	            }

	            this.state = 5071;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << InceptorOracleParser.KW_TRUE) | (1 << InceptorOracleParser.KW_FALSE) | (1 << InceptorOracleParser.KW_ALL) | (1 << InceptorOracleParser.KW_NOT) | (1 << InceptorOracleParser.KW_LIKE) | (1 << InceptorOracleParser.KW_NO) | (1 << InceptorOracleParser.KW_ANY) | (1 << InceptorOracleParser.KW_IF) | (1 << InceptorOracleParser.KW_EXISTS) | (1 << InceptorOracleParser.KW_ASC) | (1 << InceptorOracleParser.KW_DESC) | (1 << InceptorOracleParser.KW_ORDER) | (1 << InceptorOracleParser.KW_GROUP) | (1 << InceptorOracleParser.KW_INCREMENT) | (1 << InceptorOracleParser.KW_BY) | (1 << InceptorOracleParser.KW_HASH) | (1 << InceptorOracleParser.KW_INSERT) | (1 << InceptorOracleParser.KW_OVERWRITE) | (1 << InceptorOracleParser.KW_OUTER))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (InceptorOracleParser.KW_STREAMJOB - 33)) | (1 << (InceptorOracleParser.KW_STREAMJOBS - 33)) | (1 << (InceptorOracleParser.KW_AT - 33)) | (1 << (InceptorOracleParser.KW_LEFT - 33)) | (1 << (InceptorOracleParser.KW_RIGHT - 33)) | (1 << (InceptorOracleParser.KW_FULL - 33)) | (1 << (InceptorOracleParser.KW_PARTITION - 33)) | (1 << (InceptorOracleParser.KW_PARTITIONS - 33)) | (1 << (InceptorOracleParser.KW_PATTERN - 33)) | (1 << (InceptorOracleParser.KW_TABLE - 33)) | (1 << (InceptorOracleParser.KW_TABLES - 33)) | (1 << (InceptorOracleParser.KW_SEQUENCE - 33)) | (1 << (InceptorOracleParser.KW_SEQUENCES - 33)) | (1 << (InceptorOracleParser.KW_COLUMNS - 33)) | (1 << (InceptorOracleParser.KW_INDEX - 33)) | (1 << (InceptorOracleParser.KW_INDEXES - 33)) | (1 << (InceptorOracleParser.KW_REBUILD - 33)) | (1 << (InceptorOracleParser.KW_FUNCTIONS - 33)) | (1 << (InceptorOracleParser.KW_SHOW - 33)) | (1 << (InceptorOracleParser.KW_MSCK - 33)) | (1 << (InceptorOracleParser.KW_REPAIR - 33)) | (1 << (InceptorOracleParser.KW_DIRECTORY - 33)) | (1 << (InceptorOracleParser.KW_LOCAL - 33)) | (1 << (InceptorOracleParser.KW_GLOBAL - 33)) | (1 << (InceptorOracleParser.KW_USING - 33)) | (1 << (InceptorOracleParser.KW_CLUSTER - 33)) | (1 << (InceptorOracleParser.KW_DISTRIBUTE - 33)) | (1 << (InceptorOracleParser.KW_SORT - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (InceptorOracleParser.KW_UNION - 65)) | (1 << (InceptorOracleParser.KW_LOAD - 65)) | (1 << (InceptorOracleParser.KW_EXPORT - 65)) | (1 << (InceptorOracleParser.KW_IMPORT - 65)) | (1 << (InceptorOracleParser.KW_DATA - 65)) | (1 << (InceptorOracleParser.KW_INPATH - 65)) | (1 << (InceptorOracleParser.KW_IS - 65)) | (1 << (InceptorOracleParser.KW_NULL - 65)) | (1 << (InceptorOracleParser.KW_NULLS - 65)) | (1 << (InceptorOracleParser.KW_CREATE - 65)) | (1 << (InceptorOracleParser.KW_EXTERNAL - 65)) | (1 << (InceptorOracleParser.KW_ALTER - 65)) | (1 << (InceptorOracleParser.KW_CHANGE - 65)) | (1 << (InceptorOracleParser.KW_FIRST - 65)) | (1 << (InceptorOracleParser.KW_LAST - 65)) | (1 << (InceptorOracleParser.KW_AFTER - 65)) | (1 << (InceptorOracleParser.KW_DESCRIBE - 65)) | (1 << (InceptorOracleParser.KW_DROP - 65)) | (1 << (InceptorOracleParser.KW_RENAME - 65)) | (1 << (InceptorOracleParser.KW_IGNORE - 65)) | (1 << (InceptorOracleParser.KW_RESPECT - 65)) | (1 << (InceptorOracleParser.KW_PROTECTION - 65)) | (1 << (InceptorOracleParser.KW_TO - 65)) | (1 << (InceptorOracleParser.KW_COMMENT - 65)) | (1 << (InceptorOracleParser.KW_PROMPT - 65)) | (1 << (InceptorOracleParser.KW_SPOOL - 65)) | (1 << (InceptorOracleParser.KW_BOOLEAN - 65)) | (1 << (InceptorOracleParser.KW_TINYINT - 65)) | (1 << (InceptorOracleParser.KW_BYTE - 65)) | (1 << (InceptorOracleParser.KW_SMALLINT - 65)) | (1 << (InceptorOracleParser.KW_INT - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (InceptorOracleParser.KW_BIGINT - 97)) | (1 << (InceptorOracleParser.KW_FLOAT - 97)) | (1 << (InceptorOracleParser.KW_DOUBLE - 97)) | (1 << (InceptorOracleParser.KW_DATE - 97)) | (1 << (InceptorOracleParser.KW_DATETIME - 97)) | (1 << (InceptorOracleParser.KW_TIMESTAMP - 97)) | (1 << (InceptorOracleParser.KW_TIME - 97)) | (1 << (InceptorOracleParser.KW_DECIMAL - 97)) | (1 << (InceptorOracleParser.KW_STRING - 97)) | (1 << (InceptorOracleParser.KW_GEO - 97)) | (1 << (InceptorOracleParser.KW_ARRAY - 97)) | (1 << (InceptorOracleParser.KW_STRUCT - 97)) | (1 << (InceptorOracleParser.KW_MAP - 97)) | (1 << (InceptorOracleParser.KW_UNIONTYPE - 97)) | (1 << (InceptorOracleParser.KW_PARTITIONED - 97)) | (1 << (InceptorOracleParser.KW_ROUTED - 97)) | (1 << (InceptorOracleParser.KW_CLUSTERED - 97)) | (1 << (InceptorOracleParser.KW_SORTED - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (InceptorOracleParser.KW_NEXT - 129)) | (1 << (InceptorOracleParser.KW_NEXTVALUE - 129)) | (1 << (InceptorOracleParser.KW_UNLIMITED - 129)) | (1 << (InceptorOracleParser.KW_WIDCARD - 129)) | (1 << (InceptorOracleParser.KW_BUCKETS - 129)) | (1 << (InceptorOracleParser.KW_ROW - 129)) | (1 << (InceptorOracleParser.KW_ROWS - 129)) | (1 << (InceptorOracleParser.KW_FORMAT - 129)) | (1 << (InceptorOracleParser.KW_DELIMITED - 129)) | (1 << (InceptorOracleParser.KW_FIELDS - 129)) | (1 << (InceptorOracleParser.KW_TERMINATED - 129)) | (1 << (InceptorOracleParser.KW_ESCAPED - 129)) | (1 << (InceptorOracleParser.KW_COLLECTION - 129)) | (1 << (InceptorOracleParser.KW_ITEMS - 129)) | (1 << (InceptorOracleParser.KW_KEYS - 129)) | (1 << (InceptorOracleParser.KW_KEY_TYPE - 129)) | (1 << (InceptorOracleParser.KW_LINES - 129)) | (1 << (InceptorOracleParser.KW_STORED - 129)) | (1 << (InceptorOracleParser.KW_FILEFORMAT - 129)) | (1 << (InceptorOracleParser.KW_SEQUENCEFILE - 129)) | (1 << (InceptorOracleParser.KW_TEXTFILE - 129)) | (1 << (InceptorOracleParser.KW_CSVFILE - 129)) | (1 << (InceptorOracleParser.KW_FWCFILE - 129)) | (1 << (InceptorOracleParser.KW_RCFILE - 129)) | (1 << (InceptorOracleParser.KW_ORCFILE - 129)) | (1 << (InceptorOracleParser.KW_HOLODESK - 129)) | (1 << (InceptorOracleParser.KW_STELLARDB - 129)) | (1 << (InceptorOracleParser.KW_ORCTRANSACTIONFILE - 129)) | (1 << (InceptorOracleParser.KW_PARQUET - 129)))) !== 0) || ((((_la - 161)) & ~0x1f) == 0 && ((1 << (_la - 161)) & ((1 << (InceptorOracleParser.KW_HYPERDRIVE - 161)) | (1 << (InceptorOracleParser.KW_ESDRIVE - 161)) | (1 << (InceptorOracleParser.KW_INPUTFORMAT - 161)) | (1 << (InceptorOracleParser.KW_OUTPUTFORMAT - 161)) | (1 << (InceptorOracleParser.KW_INPUTDRIVER - 161)) | (1 << (InceptorOracleParser.KW_OUTPUTDRIVER - 161)) | (1 << (InceptorOracleParser.KW_OFFLINE - 161)) | (1 << (InceptorOracleParser.KW_ENABLE - 161)) | (1 << (InceptorOracleParser.KW_DISABLE - 161)) | (1 << (InceptorOracleParser.KW_READONLY - 161)) | (1 << (InceptorOracleParser.KW_NO_DROP - 161)) | (1 << (InceptorOracleParser.KW_LOCATION - 161)) | (1 << (InceptorOracleParser.KW_BUCKET - 161)) | (1 << (InceptorOracleParser.KW_OUT - 161)) | (1 << (InceptorOracleParser.KW_OF - 161)) | (1 << (InceptorOracleParser.KW_PERCENT - 161)) | (1 << (InceptorOracleParser.KW_CAST - 161)) | (1 << (InceptorOracleParser.KW_ADD - 161)) | (1 << (InceptorOracleParser.KW_REPLACE - 161)) | (1 << (InceptorOracleParser.KW_RLIKE - 161)) | (1 << (InceptorOracleParser.KW_REGEXP - 161)) | (1 << (InceptorOracleParser.KW_TEMPORARY - 161)) | (1 << (InceptorOracleParser.KW_RESOURCE - 161)) | (1 << (InceptorOracleParser.KW_RELOAD - 161)) | (1 << (InceptorOracleParser.KW_EXPLAIN - 161)) | (1 << (InceptorOracleParser.KW_FORMATTED - 161)) | (1 << (InceptorOracleParser.KW_PRETTY - 161)) | (1 << (InceptorOracleParser.KW_DEPENDENCY - 161)))) !== 0) || ((((_la - 193)) & ~0x1f) == 0 && ((1 << (_la - 193)) & ((1 << (InceptorOracleParser.KW_LOGICAL - 193)) | (1 << (InceptorOracleParser.KW_COST - 193)) | (1 << (InceptorOracleParser.KW_SERDE - 193)) | (1 << (InceptorOracleParser.KW_WITH - 193)) | (1 << (InceptorOracleParser.KW_WITHIN - 193)) | (1 << (InceptorOracleParser.KW_DEFERRED - 193)) | (1 << (InceptorOracleParser.KW_SERDEPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_DBPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_LIMIT - 193)) | (1 << (InceptorOracleParser.KW_SET - 193)) | (1 << (InceptorOracleParser.KW_UNSET - 193)) | (1 << (InceptorOracleParser.KW_TBLPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_IDXPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_VALUE_TYPE - 193)) | (1 << (InceptorOracleParser.KW_ELEM_TYPE - 193)) | (1 << (InceptorOracleParser.KW_CASE - 193)) | (1 << (InceptorOracleParser.KW_PRIOR - 193)) | (1 << (InceptorOracleParser.KW_NOCYCLE - 193)) | (1 << (InceptorOracleParser.KW_MAPJOIN - 193)) | (1 << (InceptorOracleParser.KW_COMBINE - 193)) | (1 << (InceptorOracleParser.KW_COMBINE_STRUCT_INDEX - 193)) | (1 << (InceptorOracleParser.KW_GLKJOIN - 193)) | (1 << (InceptorOracleParser.KW_USE_INDEX - 193)))) !== 0) || ((((_la - 225)) & ~0x1f) == 0 && ((1 << (_la - 225)) & ((1 << (InceptorOracleParser.KW_STARGATE - 225)) | (1 << (InceptorOracleParser.KW_USE_BULKLOAD - 225)) | (1 << (InceptorOracleParser.KW_ADHOC - 225)) | (1 << (InceptorOracleParser.KW_PRECOMPILE - 225)) | (1 << (InceptorOracleParser.KW_STREAMTABLE - 225)) | (1 << (InceptorOracleParser.KW_STREAM - 225)) | (1 << (InceptorOracleParser.KW_RULEBASE - 225)) | (1 << (InceptorOracleParser.KW_RULEBASES - 225)) | (1 << (InceptorOracleParser.KW_RULE - 225)) | (1 << (InceptorOracleParser.KW_RULES - 225)) | (1 << (InceptorOracleParser.KW_MEET - 225)) | (1 << (InceptorOracleParser.KW_MUST - 225)) | (1 << (InceptorOracleParser.KW_MUSTNOT - 225)) | (1 << (InceptorOracleParser.KW_POLICY - 225)) | (1 << (InceptorOracleParser.KW_POLICIES - 225)) | (1 << (InceptorOracleParser.KW_REMOVE - 225)) | (1 << (InceptorOracleParser.KW_POLICYKEY - 225)) | (1 << (InceptorOracleParser.KW_POLICY_RULE - 225)) | (1 << (InceptorOracleParser.KW_LOOKUP - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTION - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTIONS - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTION_PROPERTIES - 225)) | (1 << (InceptorOracleParser.KW_HOLD_DDLTIME - 225)) | (1 << (InceptorOracleParser.KW_CLUSTERSTATUS - 225)))) !== 0) || ((((_la - 257)) & ~0x1f) == 0 && ((1 << (_la - 257)) & ((1 << (InceptorOracleParser.KW_UTC - 257)) | (1 << (InceptorOracleParser.KW_UTCTIMESTAMP - 257)) | (1 << (InceptorOracleParser.KW_LONG - 257)) | (1 << (InceptorOracleParser.KW_DELETE - 257)) | (1 << (InceptorOracleParser.KW_PLUS - 257)) | (1 << (InceptorOracleParser.KW_MINUS - 257)) | (1 << (InceptorOracleParser.KW_OP_CONCAT - 257)) | (1 << (InceptorOracleParser.KW_FETCH - 257)) | (1 << (InceptorOracleParser.KW_INTERSECT - 257)) | (1 << (InceptorOracleParser.KW_VIEW - 257)) | (1 << (InceptorOracleParser.KW_IN - 257)) | (1 << (InceptorOracleParser.KW_DATABASES - 257)) | (1 << (InceptorOracleParser.KW_MATERIALIZED - 257)) | (1 << (InceptorOracleParser.KW_SCHEMA - 257)) | (1 << (InceptorOracleParser.KW_SCHEMAS - 257)) | (1 << (InceptorOracleParser.KW_GRANT - 257)) | (1 << (InceptorOracleParser.KW_REVOKE - 257)) | (1 << (InceptorOracleParser.KW_SSL - 257)) | (1 << (InceptorOracleParser.KW_UNDO - 257)) | (1 << (InceptorOracleParser.KW_LOCK - 257)) | (1 << (InceptorOracleParser.KW_LOCKS - 257)) | (1 << (InceptorOracleParser.KW_UNLOCK - 257)) | (1 << (InceptorOracleParser.KW_SHARED - 257)) | (1 << (InceptorOracleParser.KW_EXCLUSIVE - 257)) | (1 << (InceptorOracleParser.KW_PROCEDURE - 257)) | (1 << (InceptorOracleParser.KW_UNSIGNED - 257)) | (1 << (InceptorOracleParser.KW_WHILE - 257)) | (1 << (InceptorOracleParser.KW_READ - 257)) | (1 << (InceptorOracleParser.KW_READS - 257)))) !== 0) || ((((_la - 289)) & ~0x1f) == 0 && ((1 << (_la - 289)) & ((1 << (InceptorOracleParser.KW_PURGE - 289)) | (1 << (InceptorOracleParser.KW_RANGE - 289)) | (1 << (InceptorOracleParser.KW_ANALYZE - 289)) | (1 << (InceptorOracleParser.KW_BEFORE - 289)) | (1 << (InceptorOracleParser.KW_BETWEEN - 289)) | (1 << (InceptorOracleParser.KW_BOTH - 289)) | (1 << (InceptorOracleParser.KW_BINARY - 289)) | (1 << (InceptorOracleParser.KW_DEFAULT - 289)) | (1 << (InceptorOracleParser.KW_TYPE - 289)) | (1 << (InceptorOracleParser.KW_TRIGGER - 289)) | (1 << (InceptorOracleParser.KW_RECORDREADER - 289)) | (1 << (InceptorOracleParser.KW_RECORDWRITER - 289)) | (1 << (InceptorOracleParser.KW_SEMI - 289)) | (1 << (InceptorOracleParser.KW_LATERAL - 289)) | (1 << (InceptorOracleParser.KW_TOUCH - 289)) | (1 << (InceptorOracleParser.KW_ARCHIVE - 289)) | (1 << (InceptorOracleParser.KW_UNARCHIVE - 289)) | (1 << (InceptorOracleParser.KW_COMPUTE - 289)) | (1 << (InceptorOracleParser.KW_STATISTICS - 289)) | (1 << (InceptorOracleParser.KW_USE - 289)) | (1 << (InceptorOracleParser.KW_OPTION - 289)) | (1 << (InceptorOracleParser.KW_CONCATENATE - 289)) | (1 << (InceptorOracleParser.KW_SHOW_DATABASE - 289)) | (1 << (InceptorOracleParser.KW_UPDATE - 289)) | (1 << (InceptorOracleParser.KW_RESTRICT - 289)) | (1 << (InceptorOracleParser.KW_CASCADE - 289)) | (1 << (InceptorOracleParser.KW_SKEWED - 289)))) !== 0) || ((((_la - 323)) & ~0x1f) == 0 && ((1 << (_la - 323)) & ((1 << (InceptorOracleParser.KW_DIRECTORIES - 323)) | (1 << (InceptorOracleParser.KW_WINDOWRESET - 323)) | (1 << (InceptorOracleParser.KW_SESSIONSTART - 323)) | (1 << (InceptorOracleParser.KW_SESSIONSTOP - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE_DISCARD - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE_COMPLETE - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOW - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOWSLIDELENGTH - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOWSEPARATED - 323)) | (1 << (InceptorOracleParser.KW_FOLLOWEDBY - 323)) | (1 << (InceptorOracleParser.KW_NOTFOLLOWEDBY - 323)) | (1 << (InceptorOracleParser.KW_NOTNEXT - 323)) | (1 << (InceptorOracleParser.KW_PATTERN_TIMES - 323)) | (1 << (InceptorOracleParser.KW_CURRVALUE - 323)) | (1 << (InceptorOracleParser.KW_GROUPING - 323)) | (1 << (InceptorOracleParser.KW_SETS - 323)))) !== 0) || ((((_la - 355)) & ~0x1f) == 0 && ((1 << (_la - 355)) & ((1 << (InceptorOracleParser.KW_TRUNCATE - 355)) | (1 << (InceptorOracleParser.KW_NOSCAN - 355)) | (1 << (InceptorOracleParser.KW_USER - 355)) | (1 << (InceptorOracleParser.KW_QUOTA - 355)) | (1 << (InceptorOracleParser.KW_PERMISSION - 355)) | (1 << (InceptorOracleParser.KW_ROLE - 355)) | (1 << (InceptorOracleParser.KW_ROLES - 355)) | (1 << (InceptorOracleParser.KW_INNER - 355)) | (1 << (InceptorOracleParser.KW_ADMIN - 355)) | (1 << (InceptorOracleParser.KW_OWNER - 355)) | (1 << (InceptorOracleParser.KW_PRINCIPALS - 355)) | (1 << (InceptorOracleParser.KW_CONSTANT - 355)) | (1 << (InceptorOracleParser.KW_CONSTRAINT - 355)) | (1 << (InceptorOracleParser.KW_VALUES - 355)) | (1 << (InceptorOracleParser.KW_YEAR - 355)) | (1 << (InceptorOracleParser.KW_MONTH - 355)) | (1 << (InceptorOracleParser.KW_DAY - 355)) | (1 << (InceptorOracleParser.KW_MINUTE - 355)) | (1 << (InceptorOracleParser.KW_HOUR - 355)))) !== 0) || ((((_la - 387)) & ~0x1f) == 0 && ((1 << (_la - 387)) & ((1 << (InceptorOracleParser.KW_SECOND - 387)) | (1 << (InceptorOracleParser.KW_INTERVAL - 387)) | (1 << (InceptorOracleParser.KW_EXTRACT - 387)) | (1 << (InceptorOracleParser.KW_SUBSTRING - 387)) | (1 << (InceptorOracleParser.KW_SYSDATE - 387)) | (1 << (InceptorOracleParser.KW_SYSTIMESTAMP - 387)) | (1 << (InceptorOracleParser.KW_SYSTIME - 387)) | (1 << (InceptorOracleParser.KW_MAXVALUE - 387)) | (1 << (InceptorOracleParser.KW_NOMAXVALUE - 387)) | (1 << (InceptorOracleParser.KW_MINVALUE - 387)) | (1 << (InceptorOracleParser.KW_NOMINVALUE - 387)) | (1 << (InceptorOracleParser.KW_CYCLE - 387)) | (1 << (InceptorOracleParser.KW_CACHE - 387)) | (1 << (InceptorOracleParser.KW_CACHEDMETRIC - 387)) | (1 << (InceptorOracleParser.KW_CACHEDMETRICS - 387)) | (1 << (InceptorOracleParser.KW_NOCACHE - 387)) | (1 << (InceptorOracleParser.KW_NOORDER - 387)) | (1 << (InceptorOracleParser.KW_MERGE - 387)) | (1 << (InceptorOracleParser.KW_PLANT - 387)) | (1 << (InceptorOracleParser.KW_IMMEDIATE - 387)) | (1 << (InceptorOracleParser.KW_COMPACT - 387)) | (1 << (InceptorOracleParser.KW_STOP - 387)) | (1 << (InceptorOracleParser.KW_LIST - 387)))) !== 0) || ((((_la - 419)) & ~0x1f) == 0 && ((1 << (_la - 419)) & ((1 << (InceptorOracleParser.KW_TRANSACTION - 419)) | (1 << (InceptorOracleParser.KW_WORK - 419)) | (1 << (InceptorOracleParser.KW_SPACE - 419)) | (1 << (InceptorOracleParser.KW_CONF - 419)) | (1 << (InceptorOracleParser.KW_DEFINED - 419)) | (1 << (InceptorOracleParser.KW_INTEGER - 419)) | (1 << (InceptorOracleParser.KW_ONLY - 419)) | (1 << (InceptorOracleParser.KW_SERVER - 419)) | (1 << (InceptorOracleParser.KW_TRANSACTIONS - 419)) | (1 << (InceptorOracleParser.KW_URI - 419)) | (1 << (InceptorOracleParser.KW_WRITE - 419)) | (1 << (InceptorOracleParser.KW_FACL - 419)) | (1 << (InceptorOracleParser.KW_FOUND - 419)) | (1 << (InceptorOracleParser.KW_LEVEL - 419)) | (1 << (InceptorOracleParser.KW_PUBLIC - 419)) | (1 << (InceptorOracleParser.KW_LINKS - 419)) | (1 << (InceptorOracleParser.KW_CONNECT - 419)) | (1 << (InceptorOracleParser.KW_APPLICATION - 419)) | (1 << (InceptorOracleParser.KW_APPLICATIONS - 419)) | (1 << (InceptorOracleParser.KW_APP - 419)) | (1 << (InceptorOracleParser.KW_APPS - 419)) | (1 << (InceptorOracleParser.KW_INFINITE - 419)))) !== 0) || ((((_la - 451)) & ~0x1f) == 0 && ((1 << (_la - 451)) & ((1 << (InceptorOracleParser.KW_WAIT - 451)) | (1 << (InceptorOracleParser.KW_PRIMARY - 451)) | (1 << (InceptorOracleParser.KW_FOREIGN - 451)) | (1 << (InceptorOracleParser.KW_REFERENCES - 451)) | (1 << (InceptorOracleParser.KW_VALIDATE - 451)) | (1 << (InceptorOracleParser.KW_NOVALIDATE - 451)) | (1 << (InceptorOracleParser.KW_RELY - 451)) | (1 << (InceptorOracleParser.KW_NORELY - 451)) | (1 << (InceptorOracleParser.KW_KEY - 451)) | (1 << (InceptorOracleParser.KW_SEGMENT - 451)) | (1 << (InceptorOracleParser.KW_LENGTH - 451)) | (1 << (InceptorOracleParser.KW_ATTACH - 451)) | (1 << (InceptorOracleParser.KW_DETTACH - 451)) | (1 << (InceptorOracleParser.KW_SHARD - 451)) | (1 << (InceptorOracleParser.KW_NUM - 451)) | (1 << (InceptorOracleParser.KW_FULLTEXT - 451)) | (1 << (InceptorOracleParser.KW_TABLESIZE - 451)) | (1 << (InceptorOracleParser.KW_TABLET - 451)) | (1 << (InceptorOracleParser.KW_CAPACITY - 451)) | (1 << (InceptorOracleParser.KW_ANALYZER - 451)) | (1 << (InceptorOracleParser.KW_SYNC - 451)) | (1 << (InceptorOracleParser.KW_NO_INDEX - 451)) | (1 << (InceptorOracleParser.KW_LOG - 451)) | (1 << (InceptorOracleParser.KW_FILE - 451)) | (1 << (InceptorOracleParser.KW_JAR - 451)) | (1 << (InceptorOracleParser.KW_PERMANENT - 451)))) !== 0) || ((((_la - 485)) & ~0x1f) == 0 && ((1 << (_la - 485)) & ((1 << (InceptorOracleParser.KW_SCHEDULER - 485)) | (1 << (InceptorOracleParser.KW_MODE - 485)) | (1 << (InceptorOracleParser.LPAREN - 485)) | (1 << (InceptorOracleParser.PLUS - 485)) | (1 << (InceptorOracleParser.MINUS - 485)) | (1 << (InceptorOracleParser.STAR - 485)))) !== 0) || ((((_la - 517)) & ~0x1f) == 0 && ((1 << (_la - 517)) & ((1 << (InceptorOracleParser.TILDE - 517)) | (1 << (InceptorOracleParser.StringLiteral - 517)) | (1 << (InceptorOracleParser.CharSetLiteral - 517)) | (1 << (InceptorOracleParser.BigintLiteral - 517)) | (1 << (InceptorOracleParser.SmallintLiteral - 517)) | (1 << (InceptorOracleParser.TinyintLiteral - 517)) | (1 << (InceptorOracleParser.DecimalLiteral - 517)) | (1 << (InceptorOracleParser.Number - 517)) | (1 << (InceptorOracleParser.Identifier - 517)) | (1 << (InceptorOracleParser.CharSetName - 517)) | (1 << (InceptorOracleParser.KW_NOCOPY - 517)) | (1 << (InceptorOracleParser.KW_VARRAY - 517)) | (1 << (InceptorOracleParser.KW_PACKAGE - 517)))) !== 0) || ((((_la - 549)) & ~0x1f) == 0 && ((1 << (_la - 549)) & ((1 << (InceptorOracleParser.KW_PACKAGES - 549)) | (1 << (InceptorOracleParser.KW_BODY - 549)) | (1 << (InceptorOracleParser.KW_ISOPEN - 549)) | (1 << (InceptorOracleParser.KW_NOTFOUND - 549)) | (1 << (InceptorOracleParser.KW_ROWCOUNT - 549)) | (1 << (InceptorOracleParser.KW_BULK_ROWCOUNT - 549)) | (1 << (InceptorOracleParser.KW_BULK_EXCEPTIONS - 549)) | (1 << (InceptorOracleParser.KW_REVERSE - 549)) | (1 << (InceptorOracleParser.KW_SAVE - 549)) | (1 << (InceptorOracleParser.KW_EXCEPTIONS - 549)) | (1 << (InceptorOracleParser.KW_INDICES - 549)) | (1 << (InceptorOracleParser.KW_REF - 549)) | (1 << (InceptorOracleParser.KW_YEARS - 549)) | (1 << (InceptorOracleParser.KW_MONTHS - 549)) | (1 << (InceptorOracleParser.KW_DAYS - 549)) | (1 << (InceptorOracleParser.KW_HOURS - 549)) | (1 << (InceptorOracleParser.KW_MINUTES - 549)) | (1 << (InceptorOracleParser.KW_SECONDS - 549)))) !== 0)) {
	                this.state = 5063;
	                this.paramExpression();
	                this.state = 5068;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===InceptorOracleParser.COMMA) {
	                    this.state = 5064;
	                    this.match(InceptorOracleParser.COMMA);
	                    this.state = 5065;
	                    this.paramExpression();
	                    this.state = 5070;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            break;

	        }
	        this.state = 5075;
	        this.match(InceptorOracleParser.RPAREN);
	        this.state = 5078;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_OVER) {
	            this.state = 5076;
	            this.match(InceptorOracleParser.KW_OVER);
	            this.state = 5077;
	            this.window_specification();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	funcOp() {
	    let localctx = new FuncOpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 828, InceptorOracleParser.RULE_funcOp);
	    try {
	        this.state = 5085;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,490,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5080;
	            this.match(InceptorOracleParser.LPAREN);
	            this.state = 5081;
	            this.match(InceptorOracleParser.STAR);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5082;
	            this.match(InceptorOracleParser.LPAREN);
	            this.state = 5083;
	            this.match(InceptorOracleParser.KW_DISTINCT);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5084;
	            this.match(InceptorOracleParser.LPAREN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionName() {
	    let localctx = new FunctionNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 830, InceptorOracleParser.RULE_functionName);
	    try {
	        this.state = 5089;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,491,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5087;
	            this.identifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5088;
	            this.dialectFunctionName();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	windowFuncIgnoreNulls() {
	    let localctx = new WindowFuncIgnoreNullsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 832, InceptorOracleParser.RULE_windowFuncIgnoreNulls);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5093;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case InceptorOracleParser.KW_IGNORE:
	            this.state = 5091;
	            localctx.ignore = this.match(InceptorOracleParser.KW_IGNORE);
	            break;
	        case InceptorOracleParser.KW_RESPECT:
	            this.state = 5092;
	            localctx.respect = this.match(InceptorOracleParser.KW_RESPECT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 5095;
	        this.match(InceptorOracleParser.KW_NULLS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	paramExpression() {
	    let localctx = new ParamExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 834, InceptorOracleParser.RULE_paramExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5100;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,493,this._ctx);
	        if(la_===1) {
	            this.state = 5097;
	            this.identifier();

	            this.state = 5098;
	            localctx.namedNotation = this.match(InceptorOracleParser.NAMED_NOTATION);

	        }
	        this.state = 5102;
	        this.selectExpression();
	        this.state = 5104;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_IGNORE || _la===InceptorOracleParser.KW_RESPECT) {
	            this.state = 5103;
	            this.windowFuncIgnoreNulls();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	castExpression() {
	    let localctx = new CastExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 836, InceptorOracleParser.RULE_castExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5106;
	        this.match(InceptorOracleParser.KW_CAST);
	        this.state = 5107;
	        this.match(InceptorOracleParser.LPAREN);
	        this.state = 5108;
	        this.expression();
	        this.state = 5109;
	        this.match(InceptorOracleParser.KW_AS);
	        this.state = 5110;
	        this.primitiveType();
	        this.state = 5111;
	        this.match(InceptorOracleParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	existExpression() {
	    let localctx = new ExistExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 838, InceptorOracleParser.RULE_existExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5113;
	        this.match(InceptorOracleParser.KW_EXISTS);
	        this.state = 5114;
	        this.match(InceptorOracleParser.LPAREN);
	        this.state = 5115;
	        this.selectStatement();
	        this.state = 5116;
	        this.match(InceptorOracleParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	widcardExpression() {
	    let localctx = new WidcardExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 840, InceptorOracleParser.RULE_widcardExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5118;
	        this.match(InceptorOracleParser.KW_WIDCARD);
	        this.state = 5119;
	        this.match(InceptorOracleParser.LPAREN);
	        this.state = 5120;
	        this.match(InceptorOracleParser.Number);
	        this.state = 5121;
	        this.match(InceptorOracleParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inRightOp() {
	    let localctx = new InRightOpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 842, InceptorOracleParser.RULE_inRightOp);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5123;
	        this.match(InceptorOracleParser.KW_IN);
	        this.state = 5129;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,495,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 5124;
	            this.match(InceptorOracleParser.LPAREN);
	            this.state = 5125;
	            this.queryStatementExpression();
	            this.state = 5126;
	            this.match(InceptorOracleParser.RPAREN);
	            break;

	        case 2:
	            this.state = 5128;
	            localctx.expr = this.expressionsInParenthesis();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	betweenRightOp() {
	    let localctx = new BetweenRightOpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 844, InceptorOracleParser.RULE_betweenRightOp);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5131;
	        this.match(InceptorOracleParser.KW_BETWEEN);

	        this.state = 5132;
	        localctx.min = this.precedenceBitwiseOrExpression();
	        this.state = 5133;
	        this.match(InceptorOracleParser.KW_AND);

	        this.state = 5134;
	        localctx.max = this.precedenceBitwiseOrExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	likeanyRightOp() {
	    let localctx = new LikeanyRightOpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 846, InceptorOracleParser.RULE_likeanyRightOp);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5136;
	        this.match(InceptorOracleParser.KW_LIKE);
	        this.state = 5137;
	        this.match(InceptorOracleParser.KW_ANY);

	        this.state = 5138;
	        localctx.expr = this.expressionsInParenthesis();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	likeallRightOp() {
	    let localctx = new LikeallRightOpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 848, InceptorOracleParser.RULE_likeallRightOp);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5140;
	        this.match(InceptorOracleParser.KW_LIKE);
	        this.state = 5141;
	        this.match(InceptorOracleParser.KW_ALL);

	        this.state = 5142;
	        localctx.expr = this.expressionsInParenthesis();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	extractExpression() {
	    let localctx = new ExtractExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 850, InceptorOracleParser.RULE_extractExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5144;
	        this.match(InceptorOracleParser.KW_EXTRACT);
	        this.state = 5145;
	        this.match(InceptorOracleParser.LPAREN);
	        this.state = 5146;
	        this.extractTarget();
	        this.state = 5147;
	        this.match(InceptorOracleParser.KW_FROM);
	        this.state = 5148;
	        this.expression();
	        this.state = 5149;
	        this.match(InceptorOracleParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	substringExpression() {
	    let localctx = new SubstringExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 852, InceptorOracleParser.RULE_substringExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5151;
	        this.match(InceptorOracleParser.KW_SUBSTRING);
	        this.state = 5152;
	        this.match(InceptorOracleParser.LPAREN);
	        this.state = 5153;
	        this.expression();
	        this.state = 5154;
	        this.seperatorFrom();
	        this.state = 5155;
	        localctx.startPos = this.expression();
	        this.state = 5159;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_FOR || _la===InceptorOracleParser.COMMA) {
	            this.state = 5156;
	            this.seperatorFor();
	            this.state = 5157;
	            localctx.length = this.expression();
	        }

	        this.state = 5161;
	        this.match(InceptorOracleParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	extractTarget() {
	    let localctx = new ExtractTargetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 854, InceptorOracleParser.RULE_extractTarget);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5163;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	seperatorFrom() {
	    let localctx = new SeperatorFromContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 856, InceptorOracleParser.RULE_seperatorFrom);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5165;
	        _la = this._input.LA(1);
	        if(!(_la===InceptorOracleParser.KW_FROM || _la===InceptorOracleParser.COMMA)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	seperatorFor() {
	    let localctx = new SeperatorForContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 858, InceptorOracleParser.RULE_seperatorFor);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5167;
	        _la = this._input.LA(1);
	        if(!(_la===InceptorOracleParser.KW_FOR || _la===InceptorOracleParser.COMMA)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	yearFuncExpression() {
	    let localctx = new YearFuncExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 860, InceptorOracleParser.RULE_yearFuncExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5169;
	        this.match(InceptorOracleParser.KW_YEAR);
	        this.state = 5170;
	        this.match(InceptorOracleParser.LPAREN);
	        this.state = 5171;
	        this.tableOrColumn();
	        this.state = 5172;
	        this.match(InceptorOracleParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	monthFuncExpression() {
	    let localctx = new MonthFuncExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 862, InceptorOracleParser.RULE_monthFuncExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5174;
	        this.match(InceptorOracleParser.KW_MONTH);
	        this.state = 5175;
	        this.match(InceptorOracleParser.LPAREN);
	        this.state = 5176;
	        this.tableOrColumn();
	        this.state = 5177;
	        this.match(InceptorOracleParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dayFuncExpression() {
	    let localctx = new DayFuncExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 864, InceptorOracleParser.RULE_dayFuncExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5179;
	        this.match(InceptorOracleParser.KW_DAY);
	        this.state = 5180;
	        this.match(InceptorOracleParser.LPAREN);
	        this.state = 5181;
	        this.tableOrColumn();
	        this.state = 5182;
	        this.match(InceptorOracleParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	hourFuncExpression() {
	    let localctx = new HourFuncExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 866, InceptorOracleParser.RULE_hourFuncExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5184;
	        this.match(InceptorOracleParser.KW_HOUR);
	        this.state = 5185;
	        this.match(InceptorOracleParser.LPAREN);
	        this.state = 5186;
	        this.tableOrColumn();
	        this.state = 5187;
	        this.match(InceptorOracleParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	minuteFuncExpression() {
	    let localctx = new MinuteFuncExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 868, InceptorOracleParser.RULE_minuteFuncExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5189;
	        this.match(InceptorOracleParser.KW_MINUTE);
	        this.state = 5190;
	        this.match(InceptorOracleParser.LPAREN);
	        this.state = 5191;
	        this.tableOrColumn();
	        this.state = 5192;
	        this.match(InceptorOracleParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	secondFuncExpression() {
	    let localctx = new SecondFuncExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 870, InceptorOracleParser.RULE_secondFuncExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5194;
	        this.match(InceptorOracleParser.KW_SECOND);
	        this.state = 5195;
	        this.match(InceptorOracleParser.LPAREN);
	        this.state = 5196;
	        this.tableOrColumn();
	        this.state = 5197;
	        this.match(InceptorOracleParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	caseExpression() {
	    let localctx = new CaseExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 872, InceptorOracleParser.RULE_caseExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5199;
	        this.match(InceptorOracleParser.KW_CASE);
	        this.state = 5200;
	        this.expression();
	        this.state = 5206; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 5201;
	            this.match(InceptorOracleParser.KW_WHEN);
	            this.state = 5202;
	            this.expression();
	            this.state = 5203;
	            this.match(InceptorOracleParser.KW_THEN);
	            this.state = 5204;
	            this.expression();
	            this.state = 5208; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===InceptorOracleParser.KW_WHEN);
	        this.state = 5212;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_ELSE) {
	            this.state = 5210;
	            this.match(InceptorOracleParser.KW_ELSE);
	            this.state = 5211;
	            this.expression();
	        }

	        this.state = 5214;
	        this.dialectEndCase();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whenExpression() {
	    let localctx = new WhenExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 874, InceptorOracleParser.RULE_whenExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5216;
	        this.match(InceptorOracleParser.KW_CASE);
	        this.state = 5222; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 5217;
	            this.match(InceptorOracleParser.KW_WHEN);
	            this.state = 5218;
	            this.expression();
	            this.state = 5219;
	            this.match(InceptorOracleParser.KW_THEN);
	            this.state = 5220;
	            this.expression();
	            this.state = 5224; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===InceptorOracleParser.KW_WHEN);
	        this.state = 5228;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_ELSE) {
	            this.state = 5226;
	            this.match(InceptorOracleParser.KW_ELSE);
	            this.state = 5227;
	            this.expression();
	        }

	        this.state = 5230;
	        this.dialectEndCase();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	condition() {
	    let localctx = new ConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 876, InceptorOracleParser.RULE_condition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5232;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resourceList() {
	    let localctx = new ResourceListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 878, InceptorOracleParser.RULE_resourceList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5234;
	        this.resource();
	        this.state = 5239;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===InceptorOracleParser.COMMA) {
	            this.state = 5235;
	            this.match(InceptorOracleParser.COMMA);
	            this.state = 5236;
	            this.resource();
	            this.state = 5241;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resource() {
	    let localctx = new ResourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 880, InceptorOracleParser.RULE_resource);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5242;
	        localctx.resType = this.resourceType();
	        this.state = 5243;
	        localctx.resPath = this.match(InceptorOracleParser.StringLiteral);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resourceType() {
	    let localctx = new ResourceTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 882, InceptorOracleParser.RULE_resourceType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5245;
	        _la = this._input.LA(1);
	        if(!(_la===InceptorOracleParser.KW_ARCHIVE || _la===InceptorOracleParser.KW_FILE || _la===InceptorOracleParser.KW_JAR)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphPathStatement() {
	    let localctx = new GraphPathStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 884, InceptorOracleParser.RULE_graphPathStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5247;
	        this.match(InceptorOracleParser.KW_SELECT);
	        this.state = 5248;
	        this.graphSelectClause();
	        this.state = 5249;
	        this.match(InceptorOracleParser.KW_FROM);
	        this.state = 5250;
	        this.match(InceptorOracleParser.KW_GRAPH_PATH);
	        this.state = 5251;
	        this.match(InceptorOracleParser.LPAREN);
	        this.state = 5252;
	        localctx.vertex = this.graphReference();
	        this.state = 5253;
	        this.match(InceptorOracleParser.COMMA);
	        this.state = 5254;
	        localctx.edge = this.graphReference();
	        this.state = 5255;
	        this.match(InceptorOracleParser.COMMA);
	        this.state = 5256;
	        localctx.pattern = this.graphPattern();
	        this.state = 5257;
	        this.match(InceptorOracleParser.COMMA);
	        this.state = 5258;
	        localctx.vertexIdCol = this.identifier();
	        this.state = 5259;
	        this.match(InceptorOracleParser.COMMA);
	        this.state = 5260;
	        localctx.edgeSrcCol = this.identifier();
	        this.state = 5261;
	        this.match(InceptorOracleParser.COMMA);
	        this.state = 5262;
	        localctx.edgeDstCol = this.identifier();
	        this.state = 5263;
	        this.match(InceptorOracleParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphReference() {
	    let localctx = new GraphReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 886, InceptorOracleParser.RULE_graphReference);
	    try {
	        this.state = 5270;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case InceptorOracleParser.LPAREN:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5265;
	            this.match(InceptorOracleParser.LPAREN);
	            this.state = 5266;
	            this.selectStatement();
	            this.state = 5267;
	            this.match(InceptorOracleParser.RPAREN);
	            break;
	        case InceptorOracleParser.KW_TRUE:
	        case InceptorOracleParser.KW_FALSE:
	        case InceptorOracleParser.KW_ALL:
	        case InceptorOracleParser.KW_LIKE:
	        case InceptorOracleParser.KW_NO:
	        case InceptorOracleParser.KW_ANY:
	        case InceptorOracleParser.KW_EXISTS:
	        case InceptorOracleParser.KW_ASC:
	        case InceptorOracleParser.KW_DESC:
	        case InceptorOracleParser.KW_ORDER:
	        case InceptorOracleParser.KW_GROUP:
	        case InceptorOracleParser.KW_INCREMENT:
	        case InceptorOracleParser.KW_BY:
	        case InceptorOracleParser.KW_HASH:
	        case InceptorOracleParser.KW_INSERT:
	        case InceptorOracleParser.KW_OVERWRITE:
	        case InceptorOracleParser.KW_OUTER:
	        case InceptorOracleParser.KW_STREAMJOB:
	        case InceptorOracleParser.KW_STREAMJOBS:
	        case InceptorOracleParser.KW_AT:
	        case InceptorOracleParser.KW_LEFT:
	        case InceptorOracleParser.KW_RIGHT:
	        case InceptorOracleParser.KW_FULL:
	        case InceptorOracleParser.KW_PARTITION:
	        case InceptorOracleParser.KW_PARTITIONS:
	        case InceptorOracleParser.KW_PATTERN:
	        case InceptorOracleParser.KW_TABLE:
	        case InceptorOracleParser.KW_TABLES:
	        case InceptorOracleParser.KW_SEQUENCE:
	        case InceptorOracleParser.KW_SEQUENCES:
	        case InceptorOracleParser.KW_COLUMNS:
	        case InceptorOracleParser.KW_INDEX:
	        case InceptorOracleParser.KW_INDEXES:
	        case InceptorOracleParser.KW_REBUILD:
	        case InceptorOracleParser.KW_FUNCTIONS:
	        case InceptorOracleParser.KW_SHOW:
	        case InceptorOracleParser.KW_MSCK:
	        case InceptorOracleParser.KW_REPAIR:
	        case InceptorOracleParser.KW_DIRECTORY:
	        case InceptorOracleParser.KW_LOCAL:
	        case InceptorOracleParser.KW_GLOBAL:
	        case InceptorOracleParser.KW_USING:
	        case InceptorOracleParser.KW_CLUSTER:
	        case InceptorOracleParser.KW_DISTRIBUTE:
	        case InceptorOracleParser.KW_SORT:
	        case InceptorOracleParser.KW_UNION:
	        case InceptorOracleParser.KW_LOAD:
	        case InceptorOracleParser.KW_EXPORT:
	        case InceptorOracleParser.KW_IMPORT:
	        case InceptorOracleParser.KW_DATA:
	        case InceptorOracleParser.KW_INPATH:
	        case InceptorOracleParser.KW_IS:
	        case InceptorOracleParser.KW_NULLS:
	        case InceptorOracleParser.KW_CREATE:
	        case InceptorOracleParser.KW_EXTERNAL:
	        case InceptorOracleParser.KW_ALTER:
	        case InceptorOracleParser.KW_CHANGE:
	        case InceptorOracleParser.KW_FIRST:
	        case InceptorOracleParser.KW_LAST:
	        case InceptorOracleParser.KW_AFTER:
	        case InceptorOracleParser.KW_DESCRIBE:
	        case InceptorOracleParser.KW_DROP:
	        case InceptorOracleParser.KW_RENAME:
	        case InceptorOracleParser.KW_IGNORE:
	        case InceptorOracleParser.KW_RESPECT:
	        case InceptorOracleParser.KW_PROTECTION:
	        case InceptorOracleParser.KW_TO:
	        case InceptorOracleParser.KW_COMMENT:
	        case InceptorOracleParser.KW_PROMPT:
	        case InceptorOracleParser.KW_SPOOL:
	        case InceptorOracleParser.KW_BOOLEAN:
	        case InceptorOracleParser.KW_TINYINT:
	        case InceptorOracleParser.KW_BYTE:
	        case InceptorOracleParser.KW_SMALLINT:
	        case InceptorOracleParser.KW_INT:
	        case InceptorOracleParser.KW_BIGINT:
	        case InceptorOracleParser.KW_FLOAT:
	        case InceptorOracleParser.KW_DOUBLE:
	        case InceptorOracleParser.KW_DATE:
	        case InceptorOracleParser.KW_DATETIME:
	        case InceptorOracleParser.KW_TIMESTAMP:
	        case InceptorOracleParser.KW_TIME:
	        case InceptorOracleParser.KW_DECIMAL:
	        case InceptorOracleParser.KW_STRING:
	        case InceptorOracleParser.KW_GEO:
	        case InceptorOracleParser.KW_ARRAY:
	        case InceptorOracleParser.KW_STRUCT:
	        case InceptorOracleParser.KW_UNIONTYPE:
	        case InceptorOracleParser.KW_PARTITIONED:
	        case InceptorOracleParser.KW_ROUTED:
	        case InceptorOracleParser.KW_CLUSTERED:
	        case InceptorOracleParser.KW_SORTED:
	        case InceptorOracleParser.KW_NEXT:
	        case InceptorOracleParser.KW_NEXTVALUE:
	        case InceptorOracleParser.KW_BUCKETS:
	        case InceptorOracleParser.KW_ROW:
	        case InceptorOracleParser.KW_ROWS:
	        case InceptorOracleParser.KW_FORMAT:
	        case InceptorOracleParser.KW_DELIMITED:
	        case InceptorOracleParser.KW_FIELDS:
	        case InceptorOracleParser.KW_TERMINATED:
	        case InceptorOracleParser.KW_ESCAPED:
	        case InceptorOracleParser.KW_COLLECTION:
	        case InceptorOracleParser.KW_ITEMS:
	        case InceptorOracleParser.KW_KEYS:
	        case InceptorOracleParser.KW_KEY_TYPE:
	        case InceptorOracleParser.KW_LINES:
	        case InceptorOracleParser.KW_STORED:
	        case InceptorOracleParser.KW_FILEFORMAT:
	        case InceptorOracleParser.KW_SEQUENCEFILE:
	        case InceptorOracleParser.KW_TEXTFILE:
	        case InceptorOracleParser.KW_CSVFILE:
	        case InceptorOracleParser.KW_FWCFILE:
	        case InceptorOracleParser.KW_RCFILE:
	        case InceptorOracleParser.KW_ORCFILE:
	        case InceptorOracleParser.KW_HOLODESK:
	        case InceptorOracleParser.KW_STELLARDB:
	        case InceptorOracleParser.KW_ORCTRANSACTIONFILE:
	        case InceptorOracleParser.KW_PARQUET:
	        case InceptorOracleParser.KW_HYPERDRIVE:
	        case InceptorOracleParser.KW_ESDRIVE:
	        case InceptorOracleParser.KW_INPUTFORMAT:
	        case InceptorOracleParser.KW_OUTPUTFORMAT:
	        case InceptorOracleParser.KW_INPUTDRIVER:
	        case InceptorOracleParser.KW_OUTPUTDRIVER:
	        case InceptorOracleParser.KW_OFFLINE:
	        case InceptorOracleParser.KW_ENABLE:
	        case InceptorOracleParser.KW_DISABLE:
	        case InceptorOracleParser.KW_READONLY:
	        case InceptorOracleParser.KW_NO_DROP:
	        case InceptorOracleParser.KW_LOCATION:
	        case InceptorOracleParser.KW_BUCKET:
	        case InceptorOracleParser.KW_OUT:
	        case InceptorOracleParser.KW_OF:
	        case InceptorOracleParser.KW_PERCENT:
	        case InceptorOracleParser.KW_ADD:
	        case InceptorOracleParser.KW_REPLACE:
	        case InceptorOracleParser.KW_RLIKE:
	        case InceptorOracleParser.KW_REGEXP:
	        case InceptorOracleParser.KW_TEMPORARY:
	        case InceptorOracleParser.KW_RESOURCE:
	        case InceptorOracleParser.KW_RELOAD:
	        case InceptorOracleParser.KW_EXPLAIN:
	        case InceptorOracleParser.KW_FORMATTED:
	        case InceptorOracleParser.KW_PRETTY:
	        case InceptorOracleParser.KW_DEPENDENCY:
	        case InceptorOracleParser.KW_LOGICAL:
	        case InceptorOracleParser.KW_COST:
	        case InceptorOracleParser.KW_SERDE:
	        case InceptorOracleParser.KW_WITH:
	        case InceptorOracleParser.KW_WITHIN:
	        case InceptorOracleParser.KW_DEFERRED:
	        case InceptorOracleParser.KW_SERDEPROPERTIES:
	        case InceptorOracleParser.KW_DBPROPERTIES:
	        case InceptorOracleParser.KW_LIMIT:
	        case InceptorOracleParser.KW_SET:
	        case InceptorOracleParser.KW_UNSET:
	        case InceptorOracleParser.KW_TBLPROPERTIES:
	        case InceptorOracleParser.KW_IDXPROPERTIES:
	        case InceptorOracleParser.KW_VALUE_TYPE:
	        case InceptorOracleParser.KW_ELEM_TYPE:
	        case InceptorOracleParser.KW_PRIOR:
	        case InceptorOracleParser.KW_NOCYCLE:
	        case InceptorOracleParser.KW_MAPJOIN:
	        case InceptorOracleParser.KW_COMBINE:
	        case InceptorOracleParser.KW_COMBINE_STRUCT_INDEX:
	        case InceptorOracleParser.KW_GLKJOIN:
	        case InceptorOracleParser.KW_USE_INDEX:
	        case InceptorOracleParser.KW_STARGATE:
	        case InceptorOracleParser.KW_USE_BULKLOAD:
	        case InceptorOracleParser.KW_ADHOC:
	        case InceptorOracleParser.KW_PRECOMPILE:
	        case InceptorOracleParser.KW_STREAMTABLE:
	        case InceptorOracleParser.KW_STREAM:
	        case InceptorOracleParser.KW_RULEBASE:
	        case InceptorOracleParser.KW_RULEBASES:
	        case InceptorOracleParser.KW_RULE:
	        case InceptorOracleParser.KW_RULES:
	        case InceptorOracleParser.KW_MEET:
	        case InceptorOracleParser.KW_MUST:
	        case InceptorOracleParser.KW_MUSTNOT:
	        case InceptorOracleParser.KW_POLICY:
	        case InceptorOracleParser.KW_POLICIES:
	        case InceptorOracleParser.KW_REMOVE:
	        case InceptorOracleParser.KW_POLICYKEY:
	        case InceptorOracleParser.KW_POLICY_RULE:
	        case InceptorOracleParser.KW_LOOKUP:
	        case InceptorOracleParser.KW_RULE_FUNCTION:
	        case InceptorOracleParser.KW_RULE_FUNCTIONS:
	        case InceptorOracleParser.KW_RULE_FUNCTION_PROPERTIES:
	        case InceptorOracleParser.KW_HOLD_DDLTIME:
	        case InceptorOracleParser.KW_CLUSTERSTATUS:
	        case InceptorOracleParser.KW_UTC:
	        case InceptorOracleParser.KW_UTCTIMESTAMP:
	        case InceptorOracleParser.KW_LONG:
	        case InceptorOracleParser.KW_DELETE:
	        case InceptorOracleParser.KW_PLUS:
	        case InceptorOracleParser.KW_MINUS:
	        case InceptorOracleParser.KW_OP_CONCAT:
	        case InceptorOracleParser.KW_FETCH:
	        case InceptorOracleParser.KW_INTERSECT:
	        case InceptorOracleParser.KW_VIEW:
	        case InceptorOracleParser.KW_IN:
	        case InceptorOracleParser.KW_DATABASES:
	        case InceptorOracleParser.KW_MATERIALIZED:
	        case InceptorOracleParser.KW_SCHEMA:
	        case InceptorOracleParser.KW_SCHEMAS:
	        case InceptorOracleParser.KW_GRANT:
	        case InceptorOracleParser.KW_REVOKE:
	        case InceptorOracleParser.KW_SSL:
	        case InceptorOracleParser.KW_UNDO:
	        case InceptorOracleParser.KW_LOCK:
	        case InceptorOracleParser.KW_LOCKS:
	        case InceptorOracleParser.KW_UNLOCK:
	        case InceptorOracleParser.KW_SHARED:
	        case InceptorOracleParser.KW_EXCLUSIVE:
	        case InceptorOracleParser.KW_PROCEDURE:
	        case InceptorOracleParser.KW_UNSIGNED:
	        case InceptorOracleParser.KW_WHILE:
	        case InceptorOracleParser.KW_READ:
	        case InceptorOracleParser.KW_READS:
	        case InceptorOracleParser.KW_PURGE:
	        case InceptorOracleParser.KW_RANGE:
	        case InceptorOracleParser.KW_ANALYZE:
	        case InceptorOracleParser.KW_BEFORE:
	        case InceptorOracleParser.KW_BETWEEN:
	        case InceptorOracleParser.KW_BOTH:
	        case InceptorOracleParser.KW_BINARY:
	        case InceptorOracleParser.KW_DEFAULT:
	        case InceptorOracleParser.KW_TYPE:
	        case InceptorOracleParser.KW_TRIGGER:
	        case InceptorOracleParser.KW_RECORDREADER:
	        case InceptorOracleParser.KW_RECORDWRITER:
	        case InceptorOracleParser.KW_SEMI:
	        case InceptorOracleParser.KW_LATERAL:
	        case InceptorOracleParser.KW_TOUCH:
	        case InceptorOracleParser.KW_ARCHIVE:
	        case InceptorOracleParser.KW_UNARCHIVE:
	        case InceptorOracleParser.KW_COMPUTE:
	        case InceptorOracleParser.KW_STATISTICS:
	        case InceptorOracleParser.KW_USE:
	        case InceptorOracleParser.KW_OPTION:
	        case InceptorOracleParser.KW_CONCATENATE:
	        case InceptorOracleParser.KW_SHOW_DATABASE:
	        case InceptorOracleParser.KW_UPDATE:
	        case InceptorOracleParser.KW_RESTRICT:
	        case InceptorOracleParser.KW_CASCADE:
	        case InceptorOracleParser.KW_SKEWED:
	        case InceptorOracleParser.KW_DIRECTORIES:
	        case InceptorOracleParser.KW_WINDOWRESET:
	        case InceptorOracleParser.KW_SESSIONSTART:
	        case InceptorOracleParser.KW_SESSIONSTOP:
	        case InceptorOracleParser.KW_SESSIONEXPIRE:
	        case InceptorOracleParser.KW_SESSIONEXPIRE_DISCARD:
	        case InceptorOracleParser.KW_SESSIONEXPIRE_COMPLETE:
	        case InceptorOracleParser.KW_STREAMWINDOW:
	        case InceptorOracleParser.KW_STREAMWINDOWSLIDELENGTH:
	        case InceptorOracleParser.KW_STREAMWINDOWSEPARATED:
	        case InceptorOracleParser.KW_FOLLOWEDBY:
	        case InceptorOracleParser.KW_NOTFOLLOWEDBY:
	        case InceptorOracleParser.KW_NOTNEXT:
	        case InceptorOracleParser.KW_PATTERN_TIMES:
	        case InceptorOracleParser.KW_CURRVALUE:
	        case InceptorOracleParser.KW_GROUPING:
	        case InceptorOracleParser.KW_SETS:
	        case InceptorOracleParser.KW_TRUNCATE:
	        case InceptorOracleParser.KW_NOSCAN:
	        case InceptorOracleParser.KW_USER:
	        case InceptorOracleParser.KW_QUOTA:
	        case InceptorOracleParser.KW_PERMISSION:
	        case InceptorOracleParser.KW_ROLE:
	        case InceptorOracleParser.KW_ROLES:
	        case InceptorOracleParser.KW_INNER:
	        case InceptorOracleParser.KW_ADMIN:
	        case InceptorOracleParser.KW_OWNER:
	        case InceptorOracleParser.KW_PRINCIPALS:
	        case InceptorOracleParser.KW_CONSTANT:
	        case InceptorOracleParser.KW_CONSTRAINT:
	        case InceptorOracleParser.KW_VALUES:
	        case InceptorOracleParser.KW_YEAR:
	        case InceptorOracleParser.KW_MONTH:
	        case InceptorOracleParser.KW_DAY:
	        case InceptorOracleParser.KW_MINUTE:
	        case InceptorOracleParser.KW_HOUR:
	        case InceptorOracleParser.KW_SECOND:
	        case InceptorOracleParser.KW_INTERVAL:
	        case InceptorOracleParser.KW_SYSDATE:
	        case InceptorOracleParser.KW_NOMAXVALUE:
	        case InceptorOracleParser.KW_MINVALUE:
	        case InceptorOracleParser.KW_NOMINVALUE:
	        case InceptorOracleParser.KW_CYCLE:
	        case InceptorOracleParser.KW_CACHE:
	        case InceptorOracleParser.KW_CACHEDMETRIC:
	        case InceptorOracleParser.KW_CACHEDMETRICS:
	        case InceptorOracleParser.KW_NOCACHE:
	        case InceptorOracleParser.KW_NOORDER:
	        case InceptorOracleParser.KW_MERGE:
	        case InceptorOracleParser.KW_PLANT:
	        case InceptorOracleParser.KW_IMMEDIATE:
	        case InceptorOracleParser.KW_COMPACT:
	        case InceptorOracleParser.KW_STOP:
	        case InceptorOracleParser.KW_LIST:
	        case InceptorOracleParser.KW_TRANSACTION:
	        case InceptorOracleParser.KW_WORK:
	        case InceptorOracleParser.KW_SPACE:
	        case InceptorOracleParser.KW_CONF:
	        case InceptorOracleParser.KW_DEFINED:
	        case InceptorOracleParser.KW_INTEGER:
	        case InceptorOracleParser.KW_ONLY:
	        case InceptorOracleParser.KW_SERVER:
	        case InceptorOracleParser.KW_TRANSACTIONS:
	        case InceptorOracleParser.KW_URI:
	        case InceptorOracleParser.KW_WRITE:
	        case InceptorOracleParser.KW_FACL:
	        case InceptorOracleParser.KW_FOUND:
	        case InceptorOracleParser.KW_LEVEL:
	        case InceptorOracleParser.KW_PUBLIC:
	        case InceptorOracleParser.KW_LINKS:
	        case InceptorOracleParser.KW_CONNECT:
	        case InceptorOracleParser.KW_APPLICATION:
	        case InceptorOracleParser.KW_APPLICATIONS:
	        case InceptorOracleParser.KW_APP:
	        case InceptorOracleParser.KW_APPS:
	        case InceptorOracleParser.KW_INFINITE:
	        case InceptorOracleParser.KW_WAIT:
	        case InceptorOracleParser.KW_PRIMARY:
	        case InceptorOracleParser.KW_FOREIGN:
	        case InceptorOracleParser.KW_REFERENCES:
	        case InceptorOracleParser.KW_VALIDATE:
	        case InceptorOracleParser.KW_NOVALIDATE:
	        case InceptorOracleParser.KW_RELY:
	        case InceptorOracleParser.KW_NORELY:
	        case InceptorOracleParser.KW_KEY:
	        case InceptorOracleParser.KW_SEGMENT:
	        case InceptorOracleParser.KW_LENGTH:
	        case InceptorOracleParser.KW_ATTACH:
	        case InceptorOracleParser.KW_DETTACH:
	        case InceptorOracleParser.KW_SHARD:
	        case InceptorOracleParser.KW_NUM:
	        case InceptorOracleParser.KW_FULLTEXT:
	        case InceptorOracleParser.KW_TABLESIZE:
	        case InceptorOracleParser.KW_TABLET:
	        case InceptorOracleParser.KW_CAPACITY:
	        case InceptorOracleParser.KW_ANALYZER:
	        case InceptorOracleParser.KW_SYNC:
	        case InceptorOracleParser.KW_NO_INDEX:
	        case InceptorOracleParser.KW_LOG:
	        case InceptorOracleParser.KW_FILE:
	        case InceptorOracleParser.KW_JAR:
	        case InceptorOracleParser.KW_PERMANENT:
	        case InceptorOracleParser.KW_SCHEDULER:
	        case InceptorOracleParser.KW_MODE:
	        case InceptorOracleParser.Identifier:
	        case InceptorOracleParser.KW_NOCOPY:
	        case InceptorOracleParser.KW_VARRAY:
	        case InceptorOracleParser.KW_PACKAGE:
	        case InceptorOracleParser.KW_PACKAGES:
	        case InceptorOracleParser.KW_BODY:
	        case InceptorOracleParser.KW_ISOPEN:
	        case InceptorOracleParser.KW_NOTFOUND:
	        case InceptorOracleParser.KW_ROWCOUNT:
	        case InceptorOracleParser.KW_BULK_ROWCOUNT:
	        case InceptorOracleParser.KW_BULK_EXCEPTIONS:
	        case InceptorOracleParser.KW_REVERSE:
	        case InceptorOracleParser.KW_SAVE:
	        case InceptorOracleParser.KW_EXCEPTIONS:
	        case InceptorOracleParser.KW_INDICES:
	        case InceptorOracleParser.KW_REF:
	        case InceptorOracleParser.KW_YEARS:
	        case InceptorOracleParser.KW_MONTHS:
	        case InceptorOracleParser.KW_DAYS:
	        case InceptorOracleParser.KW_HOURS:
	        case InceptorOracleParser.KW_MINUTES:
	        case InceptorOracleParser.KW_SECONDS:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5269;
	            this.tableSource();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphPattern() {
	    let localctx = new GraphPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 888, InceptorOracleParser.RULE_graphPattern);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5272;
	        this.match(InceptorOracleParser.LPAREN);
	        this.state = 5274;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << InceptorOracleParser.KW_TRUE) | (1 << InceptorOracleParser.KW_FALSE) | (1 << InceptorOracleParser.KW_ALL) | (1 << InceptorOracleParser.KW_LIKE) | (1 << InceptorOracleParser.KW_NO) | (1 << InceptorOracleParser.KW_ANY) | (1 << InceptorOracleParser.KW_EXISTS) | (1 << InceptorOracleParser.KW_ASC) | (1 << InceptorOracleParser.KW_DESC) | (1 << InceptorOracleParser.KW_ORDER) | (1 << InceptorOracleParser.KW_GROUP) | (1 << InceptorOracleParser.KW_INCREMENT) | (1 << InceptorOracleParser.KW_BY) | (1 << InceptorOracleParser.KW_HASH) | (1 << InceptorOracleParser.KW_INSERT) | (1 << InceptorOracleParser.KW_OVERWRITE) | (1 << InceptorOracleParser.KW_OUTER))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (InceptorOracleParser.KW_STREAMJOB - 33)) | (1 << (InceptorOracleParser.KW_STREAMJOBS - 33)) | (1 << (InceptorOracleParser.KW_AT - 33)) | (1 << (InceptorOracleParser.KW_LEFT - 33)) | (1 << (InceptorOracleParser.KW_RIGHT - 33)) | (1 << (InceptorOracleParser.KW_FULL - 33)) | (1 << (InceptorOracleParser.KW_PARTITION - 33)) | (1 << (InceptorOracleParser.KW_PARTITIONS - 33)) | (1 << (InceptorOracleParser.KW_PATTERN - 33)) | (1 << (InceptorOracleParser.KW_TABLE - 33)) | (1 << (InceptorOracleParser.KW_TABLES - 33)) | (1 << (InceptorOracleParser.KW_SEQUENCE - 33)) | (1 << (InceptorOracleParser.KW_SEQUENCES - 33)) | (1 << (InceptorOracleParser.KW_COLUMNS - 33)) | (1 << (InceptorOracleParser.KW_INDEX - 33)) | (1 << (InceptorOracleParser.KW_INDEXES - 33)) | (1 << (InceptorOracleParser.KW_REBUILD - 33)) | (1 << (InceptorOracleParser.KW_FUNCTIONS - 33)) | (1 << (InceptorOracleParser.KW_SHOW - 33)) | (1 << (InceptorOracleParser.KW_MSCK - 33)) | (1 << (InceptorOracleParser.KW_REPAIR - 33)) | (1 << (InceptorOracleParser.KW_DIRECTORY - 33)) | (1 << (InceptorOracleParser.KW_LOCAL - 33)) | (1 << (InceptorOracleParser.KW_GLOBAL - 33)) | (1 << (InceptorOracleParser.KW_USING - 33)) | (1 << (InceptorOracleParser.KW_CLUSTER - 33)) | (1 << (InceptorOracleParser.KW_DISTRIBUTE - 33)) | (1 << (InceptorOracleParser.KW_SORT - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (InceptorOracleParser.KW_UNION - 65)) | (1 << (InceptorOracleParser.KW_LOAD - 65)) | (1 << (InceptorOracleParser.KW_EXPORT - 65)) | (1 << (InceptorOracleParser.KW_IMPORT - 65)) | (1 << (InceptorOracleParser.KW_DATA - 65)) | (1 << (InceptorOracleParser.KW_INPATH - 65)) | (1 << (InceptorOracleParser.KW_IS - 65)) | (1 << (InceptorOracleParser.KW_NULLS - 65)) | (1 << (InceptorOracleParser.KW_CREATE - 65)) | (1 << (InceptorOracleParser.KW_EXTERNAL - 65)) | (1 << (InceptorOracleParser.KW_ALTER - 65)) | (1 << (InceptorOracleParser.KW_CHANGE - 65)) | (1 << (InceptorOracleParser.KW_FIRST - 65)) | (1 << (InceptorOracleParser.KW_LAST - 65)) | (1 << (InceptorOracleParser.KW_AFTER - 65)) | (1 << (InceptorOracleParser.KW_DESCRIBE - 65)) | (1 << (InceptorOracleParser.KW_DROP - 65)) | (1 << (InceptorOracleParser.KW_RENAME - 65)) | (1 << (InceptorOracleParser.KW_IGNORE - 65)) | (1 << (InceptorOracleParser.KW_RESPECT - 65)) | (1 << (InceptorOracleParser.KW_PROTECTION - 65)) | (1 << (InceptorOracleParser.KW_TO - 65)) | (1 << (InceptorOracleParser.KW_COMMENT - 65)) | (1 << (InceptorOracleParser.KW_PROMPT - 65)) | (1 << (InceptorOracleParser.KW_SPOOL - 65)) | (1 << (InceptorOracleParser.KW_BOOLEAN - 65)) | (1 << (InceptorOracleParser.KW_TINYINT - 65)) | (1 << (InceptorOracleParser.KW_BYTE - 65)) | (1 << (InceptorOracleParser.KW_SMALLINT - 65)) | (1 << (InceptorOracleParser.KW_INT - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (InceptorOracleParser.KW_BIGINT - 97)) | (1 << (InceptorOracleParser.KW_FLOAT - 97)) | (1 << (InceptorOracleParser.KW_DOUBLE - 97)) | (1 << (InceptorOracleParser.KW_DATE - 97)) | (1 << (InceptorOracleParser.KW_DATETIME - 97)) | (1 << (InceptorOracleParser.KW_TIMESTAMP - 97)) | (1 << (InceptorOracleParser.KW_TIME - 97)) | (1 << (InceptorOracleParser.KW_DECIMAL - 97)) | (1 << (InceptorOracleParser.KW_STRING - 97)) | (1 << (InceptorOracleParser.KW_GEO - 97)) | (1 << (InceptorOracleParser.KW_ARRAY - 97)) | (1 << (InceptorOracleParser.KW_STRUCT - 97)) | (1 << (InceptorOracleParser.KW_UNIONTYPE - 97)) | (1 << (InceptorOracleParser.KW_PARTITIONED - 97)) | (1 << (InceptorOracleParser.KW_ROUTED - 97)) | (1 << (InceptorOracleParser.KW_CLUSTERED - 97)) | (1 << (InceptorOracleParser.KW_SORTED - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (InceptorOracleParser.KW_NEXT - 129)) | (1 << (InceptorOracleParser.KW_NEXTVALUE - 129)) | (1 << (InceptorOracleParser.KW_BUCKETS - 129)) | (1 << (InceptorOracleParser.KW_ROW - 129)) | (1 << (InceptorOracleParser.KW_ROWS - 129)) | (1 << (InceptorOracleParser.KW_FORMAT - 129)) | (1 << (InceptorOracleParser.KW_DELIMITED - 129)) | (1 << (InceptorOracleParser.KW_FIELDS - 129)) | (1 << (InceptorOracleParser.KW_TERMINATED - 129)) | (1 << (InceptorOracleParser.KW_ESCAPED - 129)) | (1 << (InceptorOracleParser.KW_COLLECTION - 129)) | (1 << (InceptorOracleParser.KW_ITEMS - 129)) | (1 << (InceptorOracleParser.KW_KEYS - 129)) | (1 << (InceptorOracleParser.KW_KEY_TYPE - 129)) | (1 << (InceptorOracleParser.KW_LINES - 129)) | (1 << (InceptorOracleParser.KW_STORED - 129)) | (1 << (InceptorOracleParser.KW_FILEFORMAT - 129)) | (1 << (InceptorOracleParser.KW_SEQUENCEFILE - 129)) | (1 << (InceptorOracleParser.KW_TEXTFILE - 129)) | (1 << (InceptorOracleParser.KW_CSVFILE - 129)) | (1 << (InceptorOracleParser.KW_FWCFILE - 129)) | (1 << (InceptorOracleParser.KW_RCFILE - 129)) | (1 << (InceptorOracleParser.KW_ORCFILE - 129)) | (1 << (InceptorOracleParser.KW_HOLODESK - 129)) | (1 << (InceptorOracleParser.KW_STELLARDB - 129)) | (1 << (InceptorOracleParser.KW_ORCTRANSACTIONFILE - 129)) | (1 << (InceptorOracleParser.KW_PARQUET - 129)))) !== 0) || ((((_la - 161)) & ~0x1f) == 0 && ((1 << (_la - 161)) & ((1 << (InceptorOracleParser.KW_HYPERDRIVE - 161)) | (1 << (InceptorOracleParser.KW_ESDRIVE - 161)) | (1 << (InceptorOracleParser.KW_INPUTFORMAT - 161)) | (1 << (InceptorOracleParser.KW_OUTPUTFORMAT - 161)) | (1 << (InceptorOracleParser.KW_INPUTDRIVER - 161)) | (1 << (InceptorOracleParser.KW_OUTPUTDRIVER - 161)) | (1 << (InceptorOracleParser.KW_OFFLINE - 161)) | (1 << (InceptorOracleParser.KW_ENABLE - 161)) | (1 << (InceptorOracleParser.KW_DISABLE - 161)) | (1 << (InceptorOracleParser.KW_READONLY - 161)) | (1 << (InceptorOracleParser.KW_NO_DROP - 161)) | (1 << (InceptorOracleParser.KW_LOCATION - 161)) | (1 << (InceptorOracleParser.KW_BUCKET - 161)) | (1 << (InceptorOracleParser.KW_OUT - 161)) | (1 << (InceptorOracleParser.KW_OF - 161)) | (1 << (InceptorOracleParser.KW_PERCENT - 161)) | (1 << (InceptorOracleParser.KW_ADD - 161)) | (1 << (InceptorOracleParser.KW_REPLACE - 161)) | (1 << (InceptorOracleParser.KW_RLIKE - 161)) | (1 << (InceptorOracleParser.KW_REGEXP - 161)) | (1 << (InceptorOracleParser.KW_TEMPORARY - 161)) | (1 << (InceptorOracleParser.KW_RESOURCE - 161)) | (1 << (InceptorOracleParser.KW_RELOAD - 161)) | (1 << (InceptorOracleParser.KW_EXPLAIN - 161)) | (1 << (InceptorOracleParser.KW_FORMATTED - 161)) | (1 << (InceptorOracleParser.KW_PRETTY - 161)) | (1 << (InceptorOracleParser.KW_DEPENDENCY - 161)))) !== 0) || ((((_la - 193)) & ~0x1f) == 0 && ((1 << (_la - 193)) & ((1 << (InceptorOracleParser.KW_LOGICAL - 193)) | (1 << (InceptorOracleParser.KW_COST - 193)) | (1 << (InceptorOracleParser.KW_SERDE - 193)) | (1 << (InceptorOracleParser.KW_WITH - 193)) | (1 << (InceptorOracleParser.KW_WITHIN - 193)) | (1 << (InceptorOracleParser.KW_DEFERRED - 193)) | (1 << (InceptorOracleParser.KW_SERDEPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_DBPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_LIMIT - 193)) | (1 << (InceptorOracleParser.KW_SET - 193)) | (1 << (InceptorOracleParser.KW_UNSET - 193)) | (1 << (InceptorOracleParser.KW_TBLPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_IDXPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_VALUE_TYPE - 193)) | (1 << (InceptorOracleParser.KW_ELEM_TYPE - 193)) | (1 << (InceptorOracleParser.KW_PRIOR - 193)) | (1 << (InceptorOracleParser.KW_NOCYCLE - 193)) | (1 << (InceptorOracleParser.KW_MAPJOIN - 193)) | (1 << (InceptorOracleParser.KW_COMBINE - 193)) | (1 << (InceptorOracleParser.KW_COMBINE_STRUCT_INDEX - 193)) | (1 << (InceptorOracleParser.KW_GLKJOIN - 193)) | (1 << (InceptorOracleParser.KW_USE_INDEX - 193)))) !== 0) || ((((_la - 225)) & ~0x1f) == 0 && ((1 << (_la - 225)) & ((1 << (InceptorOracleParser.KW_STARGATE - 225)) | (1 << (InceptorOracleParser.KW_USE_BULKLOAD - 225)) | (1 << (InceptorOracleParser.KW_ADHOC - 225)) | (1 << (InceptorOracleParser.KW_PRECOMPILE - 225)) | (1 << (InceptorOracleParser.KW_STREAMTABLE - 225)) | (1 << (InceptorOracleParser.KW_STREAM - 225)) | (1 << (InceptorOracleParser.KW_RULEBASE - 225)) | (1 << (InceptorOracleParser.KW_RULEBASES - 225)) | (1 << (InceptorOracleParser.KW_RULE - 225)) | (1 << (InceptorOracleParser.KW_RULES - 225)) | (1 << (InceptorOracleParser.KW_MEET - 225)) | (1 << (InceptorOracleParser.KW_MUST - 225)) | (1 << (InceptorOracleParser.KW_MUSTNOT - 225)) | (1 << (InceptorOracleParser.KW_POLICY - 225)) | (1 << (InceptorOracleParser.KW_POLICIES - 225)) | (1 << (InceptorOracleParser.KW_REMOVE - 225)) | (1 << (InceptorOracleParser.KW_POLICYKEY - 225)) | (1 << (InceptorOracleParser.KW_POLICY_RULE - 225)) | (1 << (InceptorOracleParser.KW_LOOKUP - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTION - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTIONS - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTION_PROPERTIES - 225)) | (1 << (InceptorOracleParser.KW_HOLD_DDLTIME - 225)) | (1 << (InceptorOracleParser.KW_CLUSTERSTATUS - 225)))) !== 0) || ((((_la - 257)) & ~0x1f) == 0 && ((1 << (_la - 257)) & ((1 << (InceptorOracleParser.KW_UTC - 257)) | (1 << (InceptorOracleParser.KW_UTCTIMESTAMP - 257)) | (1 << (InceptorOracleParser.KW_LONG - 257)) | (1 << (InceptorOracleParser.KW_DELETE - 257)) | (1 << (InceptorOracleParser.KW_PLUS - 257)) | (1 << (InceptorOracleParser.KW_MINUS - 257)) | (1 << (InceptorOracleParser.KW_OP_CONCAT - 257)) | (1 << (InceptorOracleParser.KW_FETCH - 257)) | (1 << (InceptorOracleParser.KW_INTERSECT - 257)) | (1 << (InceptorOracleParser.KW_VIEW - 257)) | (1 << (InceptorOracleParser.KW_IN - 257)) | (1 << (InceptorOracleParser.KW_DATABASES - 257)) | (1 << (InceptorOracleParser.KW_MATERIALIZED - 257)) | (1 << (InceptorOracleParser.KW_SCHEMA - 257)) | (1 << (InceptorOracleParser.KW_SCHEMAS - 257)) | (1 << (InceptorOracleParser.KW_GRANT - 257)) | (1 << (InceptorOracleParser.KW_REVOKE - 257)) | (1 << (InceptorOracleParser.KW_SSL - 257)) | (1 << (InceptorOracleParser.KW_UNDO - 257)) | (1 << (InceptorOracleParser.KW_LOCK - 257)) | (1 << (InceptorOracleParser.KW_LOCKS - 257)) | (1 << (InceptorOracleParser.KW_UNLOCK - 257)) | (1 << (InceptorOracleParser.KW_SHARED - 257)) | (1 << (InceptorOracleParser.KW_EXCLUSIVE - 257)) | (1 << (InceptorOracleParser.KW_PROCEDURE - 257)) | (1 << (InceptorOracleParser.KW_UNSIGNED - 257)) | (1 << (InceptorOracleParser.KW_WHILE - 257)) | (1 << (InceptorOracleParser.KW_READ - 257)) | (1 << (InceptorOracleParser.KW_READS - 257)))) !== 0) || ((((_la - 289)) & ~0x1f) == 0 && ((1 << (_la - 289)) & ((1 << (InceptorOracleParser.KW_PURGE - 289)) | (1 << (InceptorOracleParser.KW_RANGE - 289)) | (1 << (InceptorOracleParser.KW_ANALYZE - 289)) | (1 << (InceptorOracleParser.KW_BEFORE - 289)) | (1 << (InceptorOracleParser.KW_BETWEEN - 289)) | (1 << (InceptorOracleParser.KW_BOTH - 289)) | (1 << (InceptorOracleParser.KW_BINARY - 289)) | (1 << (InceptorOracleParser.KW_DEFAULT - 289)) | (1 << (InceptorOracleParser.KW_TYPE - 289)) | (1 << (InceptorOracleParser.KW_TRIGGER - 289)) | (1 << (InceptorOracleParser.KW_RECORDREADER - 289)) | (1 << (InceptorOracleParser.KW_RECORDWRITER - 289)) | (1 << (InceptorOracleParser.KW_SEMI - 289)) | (1 << (InceptorOracleParser.KW_LATERAL - 289)) | (1 << (InceptorOracleParser.KW_TOUCH - 289)) | (1 << (InceptorOracleParser.KW_ARCHIVE - 289)) | (1 << (InceptorOracleParser.KW_UNARCHIVE - 289)) | (1 << (InceptorOracleParser.KW_COMPUTE - 289)) | (1 << (InceptorOracleParser.KW_STATISTICS - 289)) | (1 << (InceptorOracleParser.KW_USE - 289)) | (1 << (InceptorOracleParser.KW_OPTION - 289)) | (1 << (InceptorOracleParser.KW_CONCATENATE - 289)) | (1 << (InceptorOracleParser.KW_SHOW_DATABASE - 289)) | (1 << (InceptorOracleParser.KW_UPDATE - 289)) | (1 << (InceptorOracleParser.KW_RESTRICT - 289)) | (1 << (InceptorOracleParser.KW_CASCADE - 289)) | (1 << (InceptorOracleParser.KW_SKEWED - 289)))) !== 0) || ((((_la - 323)) & ~0x1f) == 0 && ((1 << (_la - 323)) & ((1 << (InceptorOracleParser.KW_DIRECTORIES - 323)) | (1 << (InceptorOracleParser.KW_WINDOWRESET - 323)) | (1 << (InceptorOracleParser.KW_SESSIONSTART - 323)) | (1 << (InceptorOracleParser.KW_SESSIONSTOP - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE_DISCARD - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE_COMPLETE - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOW - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOWSLIDELENGTH - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOWSEPARATED - 323)) | (1 << (InceptorOracleParser.KW_FOLLOWEDBY - 323)) | (1 << (InceptorOracleParser.KW_NOTFOLLOWEDBY - 323)) | (1 << (InceptorOracleParser.KW_NOTNEXT - 323)) | (1 << (InceptorOracleParser.KW_PATTERN_TIMES - 323)) | (1 << (InceptorOracleParser.KW_CURRVALUE - 323)) | (1 << (InceptorOracleParser.KW_GROUPING - 323)) | (1 << (InceptorOracleParser.KW_SETS - 323)))) !== 0) || ((((_la - 355)) & ~0x1f) == 0 && ((1 << (_la - 355)) & ((1 << (InceptorOracleParser.KW_TRUNCATE - 355)) | (1 << (InceptorOracleParser.KW_NOSCAN - 355)) | (1 << (InceptorOracleParser.KW_USER - 355)) | (1 << (InceptorOracleParser.KW_QUOTA - 355)) | (1 << (InceptorOracleParser.KW_PERMISSION - 355)) | (1 << (InceptorOracleParser.KW_ROLE - 355)) | (1 << (InceptorOracleParser.KW_ROLES - 355)) | (1 << (InceptorOracleParser.KW_INNER - 355)) | (1 << (InceptorOracleParser.KW_ADMIN - 355)) | (1 << (InceptorOracleParser.KW_OWNER - 355)) | (1 << (InceptorOracleParser.KW_PRINCIPALS - 355)) | (1 << (InceptorOracleParser.KW_CONSTANT - 355)) | (1 << (InceptorOracleParser.KW_CONSTRAINT - 355)) | (1 << (InceptorOracleParser.KW_VALUES - 355)) | (1 << (InceptorOracleParser.KW_YEAR - 355)) | (1 << (InceptorOracleParser.KW_MONTH - 355)) | (1 << (InceptorOracleParser.KW_DAY - 355)) | (1 << (InceptorOracleParser.KW_MINUTE - 355)) | (1 << (InceptorOracleParser.KW_HOUR - 355)))) !== 0) || ((((_la - 387)) & ~0x1f) == 0 && ((1 << (_la - 387)) & ((1 << (InceptorOracleParser.KW_SECOND - 387)) | (1 << (InceptorOracleParser.KW_INTERVAL - 387)) | (1 << (InceptorOracleParser.KW_SYSDATE - 387)) | (1 << (InceptorOracleParser.KW_NOMAXVALUE - 387)) | (1 << (InceptorOracleParser.KW_MINVALUE - 387)) | (1 << (InceptorOracleParser.KW_NOMINVALUE - 387)) | (1 << (InceptorOracleParser.KW_CYCLE - 387)) | (1 << (InceptorOracleParser.KW_CACHE - 387)) | (1 << (InceptorOracleParser.KW_CACHEDMETRIC - 387)) | (1 << (InceptorOracleParser.KW_CACHEDMETRICS - 387)) | (1 << (InceptorOracleParser.KW_NOCACHE - 387)) | (1 << (InceptorOracleParser.KW_NOORDER - 387)) | (1 << (InceptorOracleParser.KW_MERGE - 387)) | (1 << (InceptorOracleParser.KW_PLANT - 387)) | (1 << (InceptorOracleParser.KW_IMMEDIATE - 387)) | (1 << (InceptorOracleParser.KW_COMPACT - 387)) | (1 << (InceptorOracleParser.KW_STOP - 387)) | (1 << (InceptorOracleParser.KW_LIST - 387)))) !== 0) || ((((_la - 419)) & ~0x1f) == 0 && ((1 << (_la - 419)) & ((1 << (InceptorOracleParser.KW_TRANSACTION - 419)) | (1 << (InceptorOracleParser.KW_WORK - 419)) | (1 << (InceptorOracleParser.KW_SPACE - 419)) | (1 << (InceptorOracleParser.KW_CONF - 419)) | (1 << (InceptorOracleParser.KW_DEFINED - 419)) | (1 << (InceptorOracleParser.KW_INTEGER - 419)) | (1 << (InceptorOracleParser.KW_ONLY - 419)) | (1 << (InceptorOracleParser.KW_SERVER - 419)) | (1 << (InceptorOracleParser.KW_TRANSACTIONS - 419)) | (1 << (InceptorOracleParser.KW_URI - 419)) | (1 << (InceptorOracleParser.KW_WRITE - 419)) | (1 << (InceptorOracleParser.KW_FACL - 419)) | (1 << (InceptorOracleParser.KW_FOUND - 419)) | (1 << (InceptorOracleParser.KW_LEVEL - 419)) | (1 << (InceptorOracleParser.KW_PUBLIC - 419)) | (1 << (InceptorOracleParser.KW_LINKS - 419)) | (1 << (InceptorOracleParser.KW_CONNECT - 419)) | (1 << (InceptorOracleParser.KW_APPLICATION - 419)) | (1 << (InceptorOracleParser.KW_APPLICATIONS - 419)) | (1 << (InceptorOracleParser.KW_APP - 419)) | (1 << (InceptorOracleParser.KW_APPS - 419)) | (1 << (InceptorOracleParser.KW_INFINITE - 419)))) !== 0) || ((((_la - 451)) & ~0x1f) == 0 && ((1 << (_la - 451)) & ((1 << (InceptorOracleParser.KW_WAIT - 451)) | (1 << (InceptorOracleParser.KW_PRIMARY - 451)) | (1 << (InceptorOracleParser.KW_FOREIGN - 451)) | (1 << (InceptorOracleParser.KW_REFERENCES - 451)) | (1 << (InceptorOracleParser.KW_VALIDATE - 451)) | (1 << (InceptorOracleParser.KW_NOVALIDATE - 451)) | (1 << (InceptorOracleParser.KW_RELY - 451)) | (1 << (InceptorOracleParser.KW_NORELY - 451)) | (1 << (InceptorOracleParser.KW_KEY - 451)) | (1 << (InceptorOracleParser.KW_SEGMENT - 451)) | (1 << (InceptorOracleParser.KW_LENGTH - 451)) | (1 << (InceptorOracleParser.KW_ATTACH - 451)) | (1 << (InceptorOracleParser.KW_DETTACH - 451)) | (1 << (InceptorOracleParser.KW_SHARD - 451)) | (1 << (InceptorOracleParser.KW_NUM - 451)) | (1 << (InceptorOracleParser.KW_FULLTEXT - 451)) | (1 << (InceptorOracleParser.KW_TABLESIZE - 451)) | (1 << (InceptorOracleParser.KW_TABLET - 451)) | (1 << (InceptorOracleParser.KW_CAPACITY - 451)) | (1 << (InceptorOracleParser.KW_ANALYZER - 451)) | (1 << (InceptorOracleParser.KW_SYNC - 451)) | (1 << (InceptorOracleParser.KW_NO_INDEX - 451)) | (1 << (InceptorOracleParser.KW_LOG - 451)) | (1 << (InceptorOracleParser.KW_FILE - 451)) | (1 << (InceptorOracleParser.KW_JAR - 451)) | (1 << (InceptorOracleParser.KW_PERMANENT - 451)))) !== 0) || _la===InceptorOracleParser.KW_SCHEDULER || _la===InceptorOracleParser.KW_MODE || ((((_la - 537)) & ~0x1f) == 0 && ((1 << (_la - 537)) & ((1 << (InceptorOracleParser.Identifier - 537)) | (1 << (InceptorOracleParser.KW_NOCOPY - 537)) | (1 << (InceptorOracleParser.KW_VARRAY - 537)) | (1 << (InceptorOracleParser.KW_PACKAGE - 537)) | (1 << (InceptorOracleParser.KW_PACKAGES - 537)) | (1 << (InceptorOracleParser.KW_BODY - 537)) | (1 << (InceptorOracleParser.KW_ISOPEN - 537)) | (1 << (InceptorOracleParser.KW_NOTFOUND - 537)) | (1 << (InceptorOracleParser.KW_ROWCOUNT - 537)) | (1 << (InceptorOracleParser.KW_BULK_ROWCOUNT - 537)) | (1 << (InceptorOracleParser.KW_BULK_EXCEPTIONS - 537)) | (1 << (InceptorOracleParser.KW_REVERSE - 537)) | (1 << (InceptorOracleParser.KW_SAVE - 537)) | (1 << (InceptorOracleParser.KW_EXCEPTIONS - 537)) | (1 << (InceptorOracleParser.KW_INDICES - 537)) | (1 << (InceptorOracleParser.KW_REF - 537)) | (1 << (InceptorOracleParser.KW_YEARS - 537)))) !== 0) || ((((_la - 569)) & ~0x1f) == 0 && ((1 << (_la - 569)) & ((1 << (InceptorOracleParser.KW_MONTHS - 569)) | (1 << (InceptorOracleParser.KW_DAYS - 569)) | (1 << (InceptorOracleParser.KW_HOURS - 569)) | (1 << (InceptorOracleParser.KW_MINUTES - 569)) | (1 << (InceptorOracleParser.KW_SECONDS - 569)))) !== 0)) {
	            this.state = 5273;
	            this.graphItem();
	        }

	        this.state = 5276;
	        this.match(InceptorOracleParser.RPAREN);
	        this.state = 5278; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 5277;
	            this.graphEdge();
	            this.state = 5280; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===InceptorOracleParser.MINUS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphEdge() {
	    let localctx = new GraphEdgeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 890, InceptorOracleParser.RULE_graphEdge);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5282;
	        this.match(InceptorOracleParser.MINUS);
	        this.state = 5283;
	        this.match(InceptorOracleParser.LSQUARE);
	        this.state = 5285;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << InceptorOracleParser.KW_TRUE) | (1 << InceptorOracleParser.KW_FALSE) | (1 << InceptorOracleParser.KW_ALL) | (1 << InceptorOracleParser.KW_LIKE) | (1 << InceptorOracleParser.KW_NO) | (1 << InceptorOracleParser.KW_ANY) | (1 << InceptorOracleParser.KW_EXISTS) | (1 << InceptorOracleParser.KW_ASC) | (1 << InceptorOracleParser.KW_DESC) | (1 << InceptorOracleParser.KW_ORDER) | (1 << InceptorOracleParser.KW_GROUP) | (1 << InceptorOracleParser.KW_INCREMENT) | (1 << InceptorOracleParser.KW_BY) | (1 << InceptorOracleParser.KW_HASH) | (1 << InceptorOracleParser.KW_INSERT) | (1 << InceptorOracleParser.KW_OVERWRITE) | (1 << InceptorOracleParser.KW_OUTER))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (InceptorOracleParser.KW_STREAMJOB - 33)) | (1 << (InceptorOracleParser.KW_STREAMJOBS - 33)) | (1 << (InceptorOracleParser.KW_AT - 33)) | (1 << (InceptorOracleParser.KW_LEFT - 33)) | (1 << (InceptorOracleParser.KW_RIGHT - 33)) | (1 << (InceptorOracleParser.KW_FULL - 33)) | (1 << (InceptorOracleParser.KW_PARTITION - 33)) | (1 << (InceptorOracleParser.KW_PARTITIONS - 33)) | (1 << (InceptorOracleParser.KW_PATTERN - 33)) | (1 << (InceptorOracleParser.KW_TABLE - 33)) | (1 << (InceptorOracleParser.KW_TABLES - 33)) | (1 << (InceptorOracleParser.KW_SEQUENCE - 33)) | (1 << (InceptorOracleParser.KW_SEQUENCES - 33)) | (1 << (InceptorOracleParser.KW_COLUMNS - 33)) | (1 << (InceptorOracleParser.KW_INDEX - 33)) | (1 << (InceptorOracleParser.KW_INDEXES - 33)) | (1 << (InceptorOracleParser.KW_REBUILD - 33)) | (1 << (InceptorOracleParser.KW_FUNCTIONS - 33)) | (1 << (InceptorOracleParser.KW_SHOW - 33)) | (1 << (InceptorOracleParser.KW_MSCK - 33)) | (1 << (InceptorOracleParser.KW_REPAIR - 33)) | (1 << (InceptorOracleParser.KW_DIRECTORY - 33)) | (1 << (InceptorOracleParser.KW_LOCAL - 33)) | (1 << (InceptorOracleParser.KW_GLOBAL - 33)) | (1 << (InceptorOracleParser.KW_USING - 33)) | (1 << (InceptorOracleParser.KW_CLUSTER - 33)) | (1 << (InceptorOracleParser.KW_DISTRIBUTE - 33)) | (1 << (InceptorOracleParser.KW_SORT - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (InceptorOracleParser.KW_UNION - 65)) | (1 << (InceptorOracleParser.KW_LOAD - 65)) | (1 << (InceptorOracleParser.KW_EXPORT - 65)) | (1 << (InceptorOracleParser.KW_IMPORT - 65)) | (1 << (InceptorOracleParser.KW_DATA - 65)) | (1 << (InceptorOracleParser.KW_INPATH - 65)) | (1 << (InceptorOracleParser.KW_IS - 65)) | (1 << (InceptorOracleParser.KW_NULLS - 65)) | (1 << (InceptorOracleParser.KW_CREATE - 65)) | (1 << (InceptorOracleParser.KW_EXTERNAL - 65)) | (1 << (InceptorOracleParser.KW_ALTER - 65)) | (1 << (InceptorOracleParser.KW_CHANGE - 65)) | (1 << (InceptorOracleParser.KW_FIRST - 65)) | (1 << (InceptorOracleParser.KW_LAST - 65)) | (1 << (InceptorOracleParser.KW_AFTER - 65)) | (1 << (InceptorOracleParser.KW_DESCRIBE - 65)) | (1 << (InceptorOracleParser.KW_DROP - 65)) | (1 << (InceptorOracleParser.KW_RENAME - 65)) | (1 << (InceptorOracleParser.KW_IGNORE - 65)) | (1 << (InceptorOracleParser.KW_RESPECT - 65)) | (1 << (InceptorOracleParser.KW_PROTECTION - 65)) | (1 << (InceptorOracleParser.KW_TO - 65)) | (1 << (InceptorOracleParser.KW_COMMENT - 65)) | (1 << (InceptorOracleParser.KW_PROMPT - 65)) | (1 << (InceptorOracleParser.KW_SPOOL - 65)) | (1 << (InceptorOracleParser.KW_BOOLEAN - 65)) | (1 << (InceptorOracleParser.KW_TINYINT - 65)) | (1 << (InceptorOracleParser.KW_BYTE - 65)) | (1 << (InceptorOracleParser.KW_SMALLINT - 65)) | (1 << (InceptorOracleParser.KW_INT - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (InceptorOracleParser.KW_BIGINT - 97)) | (1 << (InceptorOracleParser.KW_FLOAT - 97)) | (1 << (InceptorOracleParser.KW_DOUBLE - 97)) | (1 << (InceptorOracleParser.KW_DATE - 97)) | (1 << (InceptorOracleParser.KW_DATETIME - 97)) | (1 << (InceptorOracleParser.KW_TIMESTAMP - 97)) | (1 << (InceptorOracleParser.KW_TIME - 97)) | (1 << (InceptorOracleParser.KW_DECIMAL - 97)) | (1 << (InceptorOracleParser.KW_STRING - 97)) | (1 << (InceptorOracleParser.KW_GEO - 97)) | (1 << (InceptorOracleParser.KW_ARRAY - 97)) | (1 << (InceptorOracleParser.KW_STRUCT - 97)) | (1 << (InceptorOracleParser.KW_UNIONTYPE - 97)) | (1 << (InceptorOracleParser.KW_PARTITIONED - 97)) | (1 << (InceptorOracleParser.KW_ROUTED - 97)) | (1 << (InceptorOracleParser.KW_CLUSTERED - 97)) | (1 << (InceptorOracleParser.KW_SORTED - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (InceptorOracleParser.KW_NEXT - 129)) | (1 << (InceptorOracleParser.KW_NEXTVALUE - 129)) | (1 << (InceptorOracleParser.KW_BUCKETS - 129)) | (1 << (InceptorOracleParser.KW_ROW - 129)) | (1 << (InceptorOracleParser.KW_ROWS - 129)) | (1 << (InceptorOracleParser.KW_FORMAT - 129)) | (1 << (InceptorOracleParser.KW_DELIMITED - 129)) | (1 << (InceptorOracleParser.KW_FIELDS - 129)) | (1 << (InceptorOracleParser.KW_TERMINATED - 129)) | (1 << (InceptorOracleParser.KW_ESCAPED - 129)) | (1 << (InceptorOracleParser.KW_COLLECTION - 129)) | (1 << (InceptorOracleParser.KW_ITEMS - 129)) | (1 << (InceptorOracleParser.KW_KEYS - 129)) | (1 << (InceptorOracleParser.KW_KEY_TYPE - 129)) | (1 << (InceptorOracleParser.KW_LINES - 129)) | (1 << (InceptorOracleParser.KW_STORED - 129)) | (1 << (InceptorOracleParser.KW_FILEFORMAT - 129)) | (1 << (InceptorOracleParser.KW_SEQUENCEFILE - 129)) | (1 << (InceptorOracleParser.KW_TEXTFILE - 129)) | (1 << (InceptorOracleParser.KW_CSVFILE - 129)) | (1 << (InceptorOracleParser.KW_FWCFILE - 129)) | (1 << (InceptorOracleParser.KW_RCFILE - 129)) | (1 << (InceptorOracleParser.KW_ORCFILE - 129)) | (1 << (InceptorOracleParser.KW_HOLODESK - 129)) | (1 << (InceptorOracleParser.KW_STELLARDB - 129)) | (1 << (InceptorOracleParser.KW_ORCTRANSACTIONFILE - 129)) | (1 << (InceptorOracleParser.KW_PARQUET - 129)))) !== 0) || ((((_la - 161)) & ~0x1f) == 0 && ((1 << (_la - 161)) & ((1 << (InceptorOracleParser.KW_HYPERDRIVE - 161)) | (1 << (InceptorOracleParser.KW_ESDRIVE - 161)) | (1 << (InceptorOracleParser.KW_INPUTFORMAT - 161)) | (1 << (InceptorOracleParser.KW_OUTPUTFORMAT - 161)) | (1 << (InceptorOracleParser.KW_INPUTDRIVER - 161)) | (1 << (InceptorOracleParser.KW_OUTPUTDRIVER - 161)) | (1 << (InceptorOracleParser.KW_OFFLINE - 161)) | (1 << (InceptorOracleParser.KW_ENABLE - 161)) | (1 << (InceptorOracleParser.KW_DISABLE - 161)) | (1 << (InceptorOracleParser.KW_READONLY - 161)) | (1 << (InceptorOracleParser.KW_NO_DROP - 161)) | (1 << (InceptorOracleParser.KW_LOCATION - 161)) | (1 << (InceptorOracleParser.KW_BUCKET - 161)) | (1 << (InceptorOracleParser.KW_OUT - 161)) | (1 << (InceptorOracleParser.KW_OF - 161)) | (1 << (InceptorOracleParser.KW_PERCENT - 161)) | (1 << (InceptorOracleParser.KW_ADD - 161)) | (1 << (InceptorOracleParser.KW_REPLACE - 161)) | (1 << (InceptorOracleParser.KW_RLIKE - 161)) | (1 << (InceptorOracleParser.KW_REGEXP - 161)) | (1 << (InceptorOracleParser.KW_TEMPORARY - 161)) | (1 << (InceptorOracleParser.KW_RESOURCE - 161)) | (1 << (InceptorOracleParser.KW_RELOAD - 161)) | (1 << (InceptorOracleParser.KW_EXPLAIN - 161)) | (1 << (InceptorOracleParser.KW_FORMATTED - 161)) | (1 << (InceptorOracleParser.KW_PRETTY - 161)) | (1 << (InceptorOracleParser.KW_DEPENDENCY - 161)))) !== 0) || ((((_la - 193)) & ~0x1f) == 0 && ((1 << (_la - 193)) & ((1 << (InceptorOracleParser.KW_LOGICAL - 193)) | (1 << (InceptorOracleParser.KW_COST - 193)) | (1 << (InceptorOracleParser.KW_SERDE - 193)) | (1 << (InceptorOracleParser.KW_WITH - 193)) | (1 << (InceptorOracleParser.KW_WITHIN - 193)) | (1 << (InceptorOracleParser.KW_DEFERRED - 193)) | (1 << (InceptorOracleParser.KW_SERDEPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_DBPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_LIMIT - 193)) | (1 << (InceptorOracleParser.KW_SET - 193)) | (1 << (InceptorOracleParser.KW_UNSET - 193)) | (1 << (InceptorOracleParser.KW_TBLPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_IDXPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_VALUE_TYPE - 193)) | (1 << (InceptorOracleParser.KW_ELEM_TYPE - 193)) | (1 << (InceptorOracleParser.KW_PRIOR - 193)) | (1 << (InceptorOracleParser.KW_NOCYCLE - 193)) | (1 << (InceptorOracleParser.KW_MAPJOIN - 193)) | (1 << (InceptorOracleParser.KW_COMBINE - 193)) | (1 << (InceptorOracleParser.KW_COMBINE_STRUCT_INDEX - 193)) | (1 << (InceptorOracleParser.KW_GLKJOIN - 193)) | (1 << (InceptorOracleParser.KW_USE_INDEX - 193)))) !== 0) || ((((_la - 225)) & ~0x1f) == 0 && ((1 << (_la - 225)) & ((1 << (InceptorOracleParser.KW_STARGATE - 225)) | (1 << (InceptorOracleParser.KW_USE_BULKLOAD - 225)) | (1 << (InceptorOracleParser.KW_ADHOC - 225)) | (1 << (InceptorOracleParser.KW_PRECOMPILE - 225)) | (1 << (InceptorOracleParser.KW_STREAMTABLE - 225)) | (1 << (InceptorOracleParser.KW_STREAM - 225)) | (1 << (InceptorOracleParser.KW_RULEBASE - 225)) | (1 << (InceptorOracleParser.KW_RULEBASES - 225)) | (1 << (InceptorOracleParser.KW_RULE - 225)) | (1 << (InceptorOracleParser.KW_RULES - 225)) | (1 << (InceptorOracleParser.KW_MEET - 225)) | (1 << (InceptorOracleParser.KW_MUST - 225)) | (1 << (InceptorOracleParser.KW_MUSTNOT - 225)) | (1 << (InceptorOracleParser.KW_POLICY - 225)) | (1 << (InceptorOracleParser.KW_POLICIES - 225)) | (1 << (InceptorOracleParser.KW_REMOVE - 225)) | (1 << (InceptorOracleParser.KW_POLICYKEY - 225)) | (1 << (InceptorOracleParser.KW_POLICY_RULE - 225)) | (1 << (InceptorOracleParser.KW_LOOKUP - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTION - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTIONS - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTION_PROPERTIES - 225)) | (1 << (InceptorOracleParser.KW_HOLD_DDLTIME - 225)) | (1 << (InceptorOracleParser.KW_CLUSTERSTATUS - 225)))) !== 0) || ((((_la - 257)) & ~0x1f) == 0 && ((1 << (_la - 257)) & ((1 << (InceptorOracleParser.KW_UTC - 257)) | (1 << (InceptorOracleParser.KW_UTCTIMESTAMP - 257)) | (1 << (InceptorOracleParser.KW_LONG - 257)) | (1 << (InceptorOracleParser.KW_DELETE - 257)) | (1 << (InceptorOracleParser.KW_PLUS - 257)) | (1 << (InceptorOracleParser.KW_MINUS - 257)) | (1 << (InceptorOracleParser.KW_OP_CONCAT - 257)) | (1 << (InceptorOracleParser.KW_FETCH - 257)) | (1 << (InceptorOracleParser.KW_INTERSECT - 257)) | (1 << (InceptorOracleParser.KW_VIEW - 257)) | (1 << (InceptorOracleParser.KW_IN - 257)) | (1 << (InceptorOracleParser.KW_DATABASES - 257)) | (1 << (InceptorOracleParser.KW_MATERIALIZED - 257)) | (1 << (InceptorOracleParser.KW_SCHEMA - 257)) | (1 << (InceptorOracleParser.KW_SCHEMAS - 257)) | (1 << (InceptorOracleParser.KW_GRANT - 257)) | (1 << (InceptorOracleParser.KW_REVOKE - 257)) | (1 << (InceptorOracleParser.KW_SSL - 257)) | (1 << (InceptorOracleParser.KW_UNDO - 257)) | (1 << (InceptorOracleParser.KW_LOCK - 257)) | (1 << (InceptorOracleParser.KW_LOCKS - 257)) | (1 << (InceptorOracleParser.KW_UNLOCK - 257)) | (1 << (InceptorOracleParser.KW_SHARED - 257)) | (1 << (InceptorOracleParser.KW_EXCLUSIVE - 257)) | (1 << (InceptorOracleParser.KW_PROCEDURE - 257)) | (1 << (InceptorOracleParser.KW_UNSIGNED - 257)) | (1 << (InceptorOracleParser.KW_WHILE - 257)) | (1 << (InceptorOracleParser.KW_READ - 257)) | (1 << (InceptorOracleParser.KW_READS - 257)))) !== 0) || ((((_la - 289)) & ~0x1f) == 0 && ((1 << (_la - 289)) & ((1 << (InceptorOracleParser.KW_PURGE - 289)) | (1 << (InceptorOracleParser.KW_RANGE - 289)) | (1 << (InceptorOracleParser.KW_ANALYZE - 289)) | (1 << (InceptorOracleParser.KW_BEFORE - 289)) | (1 << (InceptorOracleParser.KW_BETWEEN - 289)) | (1 << (InceptorOracleParser.KW_BOTH - 289)) | (1 << (InceptorOracleParser.KW_BINARY - 289)) | (1 << (InceptorOracleParser.KW_DEFAULT - 289)) | (1 << (InceptorOracleParser.KW_TYPE - 289)) | (1 << (InceptorOracleParser.KW_TRIGGER - 289)) | (1 << (InceptorOracleParser.KW_RECORDREADER - 289)) | (1 << (InceptorOracleParser.KW_RECORDWRITER - 289)) | (1 << (InceptorOracleParser.KW_SEMI - 289)) | (1 << (InceptorOracleParser.KW_LATERAL - 289)) | (1 << (InceptorOracleParser.KW_TOUCH - 289)) | (1 << (InceptorOracleParser.KW_ARCHIVE - 289)) | (1 << (InceptorOracleParser.KW_UNARCHIVE - 289)) | (1 << (InceptorOracleParser.KW_COMPUTE - 289)) | (1 << (InceptorOracleParser.KW_STATISTICS - 289)) | (1 << (InceptorOracleParser.KW_USE - 289)) | (1 << (InceptorOracleParser.KW_OPTION - 289)) | (1 << (InceptorOracleParser.KW_CONCATENATE - 289)) | (1 << (InceptorOracleParser.KW_SHOW_DATABASE - 289)) | (1 << (InceptorOracleParser.KW_UPDATE - 289)) | (1 << (InceptorOracleParser.KW_RESTRICT - 289)) | (1 << (InceptorOracleParser.KW_CASCADE - 289)) | (1 << (InceptorOracleParser.KW_SKEWED - 289)))) !== 0) || ((((_la - 323)) & ~0x1f) == 0 && ((1 << (_la - 323)) & ((1 << (InceptorOracleParser.KW_DIRECTORIES - 323)) | (1 << (InceptorOracleParser.KW_WINDOWRESET - 323)) | (1 << (InceptorOracleParser.KW_SESSIONSTART - 323)) | (1 << (InceptorOracleParser.KW_SESSIONSTOP - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE_DISCARD - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE_COMPLETE - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOW - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOWSLIDELENGTH - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOWSEPARATED - 323)) | (1 << (InceptorOracleParser.KW_FOLLOWEDBY - 323)) | (1 << (InceptorOracleParser.KW_NOTFOLLOWEDBY - 323)) | (1 << (InceptorOracleParser.KW_NOTNEXT - 323)) | (1 << (InceptorOracleParser.KW_PATTERN_TIMES - 323)) | (1 << (InceptorOracleParser.KW_CURRVALUE - 323)) | (1 << (InceptorOracleParser.KW_GROUPING - 323)) | (1 << (InceptorOracleParser.KW_SETS - 323)))) !== 0) || ((((_la - 355)) & ~0x1f) == 0 && ((1 << (_la - 355)) & ((1 << (InceptorOracleParser.KW_TRUNCATE - 355)) | (1 << (InceptorOracleParser.KW_NOSCAN - 355)) | (1 << (InceptorOracleParser.KW_USER - 355)) | (1 << (InceptorOracleParser.KW_QUOTA - 355)) | (1 << (InceptorOracleParser.KW_PERMISSION - 355)) | (1 << (InceptorOracleParser.KW_ROLE - 355)) | (1 << (InceptorOracleParser.KW_ROLES - 355)) | (1 << (InceptorOracleParser.KW_INNER - 355)) | (1 << (InceptorOracleParser.KW_ADMIN - 355)) | (1 << (InceptorOracleParser.KW_OWNER - 355)) | (1 << (InceptorOracleParser.KW_PRINCIPALS - 355)) | (1 << (InceptorOracleParser.KW_CONSTANT - 355)) | (1 << (InceptorOracleParser.KW_CONSTRAINT - 355)) | (1 << (InceptorOracleParser.KW_VALUES - 355)) | (1 << (InceptorOracleParser.KW_YEAR - 355)) | (1 << (InceptorOracleParser.KW_MONTH - 355)) | (1 << (InceptorOracleParser.KW_DAY - 355)) | (1 << (InceptorOracleParser.KW_MINUTE - 355)) | (1 << (InceptorOracleParser.KW_HOUR - 355)))) !== 0) || ((((_la - 387)) & ~0x1f) == 0 && ((1 << (_la - 387)) & ((1 << (InceptorOracleParser.KW_SECOND - 387)) | (1 << (InceptorOracleParser.KW_INTERVAL - 387)) | (1 << (InceptorOracleParser.KW_SYSDATE - 387)) | (1 << (InceptorOracleParser.KW_NOMAXVALUE - 387)) | (1 << (InceptorOracleParser.KW_MINVALUE - 387)) | (1 << (InceptorOracleParser.KW_NOMINVALUE - 387)) | (1 << (InceptorOracleParser.KW_CYCLE - 387)) | (1 << (InceptorOracleParser.KW_CACHE - 387)) | (1 << (InceptorOracleParser.KW_CACHEDMETRIC - 387)) | (1 << (InceptorOracleParser.KW_CACHEDMETRICS - 387)) | (1 << (InceptorOracleParser.KW_NOCACHE - 387)) | (1 << (InceptorOracleParser.KW_NOORDER - 387)) | (1 << (InceptorOracleParser.KW_MERGE - 387)) | (1 << (InceptorOracleParser.KW_PLANT - 387)) | (1 << (InceptorOracleParser.KW_IMMEDIATE - 387)) | (1 << (InceptorOracleParser.KW_COMPACT - 387)) | (1 << (InceptorOracleParser.KW_STOP - 387)) | (1 << (InceptorOracleParser.KW_LIST - 387)))) !== 0) || ((((_la - 419)) & ~0x1f) == 0 && ((1 << (_la - 419)) & ((1 << (InceptorOracleParser.KW_TRANSACTION - 419)) | (1 << (InceptorOracleParser.KW_WORK - 419)) | (1 << (InceptorOracleParser.KW_SPACE - 419)) | (1 << (InceptorOracleParser.KW_CONF - 419)) | (1 << (InceptorOracleParser.KW_DEFINED - 419)) | (1 << (InceptorOracleParser.KW_INTEGER - 419)) | (1 << (InceptorOracleParser.KW_ONLY - 419)) | (1 << (InceptorOracleParser.KW_SERVER - 419)) | (1 << (InceptorOracleParser.KW_TRANSACTIONS - 419)) | (1 << (InceptorOracleParser.KW_URI - 419)) | (1 << (InceptorOracleParser.KW_WRITE - 419)) | (1 << (InceptorOracleParser.KW_FACL - 419)) | (1 << (InceptorOracleParser.KW_FOUND - 419)) | (1 << (InceptorOracleParser.KW_LEVEL - 419)) | (1 << (InceptorOracleParser.KW_PUBLIC - 419)) | (1 << (InceptorOracleParser.KW_LINKS - 419)) | (1 << (InceptorOracleParser.KW_CONNECT - 419)) | (1 << (InceptorOracleParser.KW_APPLICATION - 419)) | (1 << (InceptorOracleParser.KW_APPLICATIONS - 419)) | (1 << (InceptorOracleParser.KW_APP - 419)) | (1 << (InceptorOracleParser.KW_APPS - 419)) | (1 << (InceptorOracleParser.KW_INFINITE - 419)))) !== 0) || ((((_la - 451)) & ~0x1f) == 0 && ((1 << (_la - 451)) & ((1 << (InceptorOracleParser.KW_WAIT - 451)) | (1 << (InceptorOracleParser.KW_PRIMARY - 451)) | (1 << (InceptorOracleParser.KW_FOREIGN - 451)) | (1 << (InceptorOracleParser.KW_REFERENCES - 451)) | (1 << (InceptorOracleParser.KW_VALIDATE - 451)) | (1 << (InceptorOracleParser.KW_NOVALIDATE - 451)) | (1 << (InceptorOracleParser.KW_RELY - 451)) | (1 << (InceptorOracleParser.KW_NORELY - 451)) | (1 << (InceptorOracleParser.KW_KEY - 451)) | (1 << (InceptorOracleParser.KW_SEGMENT - 451)) | (1 << (InceptorOracleParser.KW_LENGTH - 451)) | (1 << (InceptorOracleParser.KW_ATTACH - 451)) | (1 << (InceptorOracleParser.KW_DETTACH - 451)) | (1 << (InceptorOracleParser.KW_SHARD - 451)) | (1 << (InceptorOracleParser.KW_NUM - 451)) | (1 << (InceptorOracleParser.KW_FULLTEXT - 451)) | (1 << (InceptorOracleParser.KW_TABLESIZE - 451)) | (1 << (InceptorOracleParser.KW_TABLET - 451)) | (1 << (InceptorOracleParser.KW_CAPACITY - 451)) | (1 << (InceptorOracleParser.KW_ANALYZER - 451)) | (1 << (InceptorOracleParser.KW_SYNC - 451)) | (1 << (InceptorOracleParser.KW_NO_INDEX - 451)) | (1 << (InceptorOracleParser.KW_LOG - 451)) | (1 << (InceptorOracleParser.KW_FILE - 451)) | (1 << (InceptorOracleParser.KW_JAR - 451)) | (1 << (InceptorOracleParser.KW_PERMANENT - 451)))) !== 0) || _la===InceptorOracleParser.KW_SCHEDULER || _la===InceptorOracleParser.KW_MODE || ((((_la - 537)) & ~0x1f) == 0 && ((1 << (_la - 537)) & ((1 << (InceptorOracleParser.Identifier - 537)) | (1 << (InceptorOracleParser.KW_NOCOPY - 537)) | (1 << (InceptorOracleParser.KW_VARRAY - 537)) | (1 << (InceptorOracleParser.KW_PACKAGE - 537)) | (1 << (InceptorOracleParser.KW_PACKAGES - 537)) | (1 << (InceptorOracleParser.KW_BODY - 537)) | (1 << (InceptorOracleParser.KW_ISOPEN - 537)) | (1 << (InceptorOracleParser.KW_NOTFOUND - 537)) | (1 << (InceptorOracleParser.KW_ROWCOUNT - 537)) | (1 << (InceptorOracleParser.KW_BULK_ROWCOUNT - 537)) | (1 << (InceptorOracleParser.KW_BULK_EXCEPTIONS - 537)) | (1 << (InceptorOracleParser.KW_REVERSE - 537)) | (1 << (InceptorOracleParser.KW_SAVE - 537)) | (1 << (InceptorOracleParser.KW_EXCEPTIONS - 537)) | (1 << (InceptorOracleParser.KW_INDICES - 537)) | (1 << (InceptorOracleParser.KW_REF - 537)) | (1 << (InceptorOracleParser.KW_YEARS - 537)))) !== 0) || ((((_la - 569)) & ~0x1f) == 0 && ((1 << (_la - 569)) & ((1 << (InceptorOracleParser.KW_MONTHS - 569)) | (1 << (InceptorOracleParser.KW_DAYS - 569)) | (1 << (InceptorOracleParser.KW_HOURS - 569)) | (1 << (InceptorOracleParser.KW_MINUTES - 569)) | (1 << (InceptorOracleParser.KW_SECONDS - 569)))) !== 0)) {
	            this.state = 5284;
	            localctx.edge = this.graphItem();
	        }

	        this.state = 5287;
	        this.match(InceptorOracleParser.RSQUARE);
	        this.state = 5288;
	        this.match(InceptorOracleParser.RARROW);
	        this.state = 5289;
	        this.match(InceptorOracleParser.LPAREN);
	        this.state = 5291;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << InceptorOracleParser.KW_TRUE) | (1 << InceptorOracleParser.KW_FALSE) | (1 << InceptorOracleParser.KW_ALL) | (1 << InceptorOracleParser.KW_LIKE) | (1 << InceptorOracleParser.KW_NO) | (1 << InceptorOracleParser.KW_ANY) | (1 << InceptorOracleParser.KW_EXISTS) | (1 << InceptorOracleParser.KW_ASC) | (1 << InceptorOracleParser.KW_DESC) | (1 << InceptorOracleParser.KW_ORDER) | (1 << InceptorOracleParser.KW_GROUP) | (1 << InceptorOracleParser.KW_INCREMENT) | (1 << InceptorOracleParser.KW_BY) | (1 << InceptorOracleParser.KW_HASH) | (1 << InceptorOracleParser.KW_INSERT) | (1 << InceptorOracleParser.KW_OVERWRITE) | (1 << InceptorOracleParser.KW_OUTER))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (InceptorOracleParser.KW_STREAMJOB - 33)) | (1 << (InceptorOracleParser.KW_STREAMJOBS - 33)) | (1 << (InceptorOracleParser.KW_AT - 33)) | (1 << (InceptorOracleParser.KW_LEFT - 33)) | (1 << (InceptorOracleParser.KW_RIGHT - 33)) | (1 << (InceptorOracleParser.KW_FULL - 33)) | (1 << (InceptorOracleParser.KW_PARTITION - 33)) | (1 << (InceptorOracleParser.KW_PARTITIONS - 33)) | (1 << (InceptorOracleParser.KW_PATTERN - 33)) | (1 << (InceptorOracleParser.KW_TABLE - 33)) | (1 << (InceptorOracleParser.KW_TABLES - 33)) | (1 << (InceptorOracleParser.KW_SEQUENCE - 33)) | (1 << (InceptorOracleParser.KW_SEQUENCES - 33)) | (1 << (InceptorOracleParser.KW_COLUMNS - 33)) | (1 << (InceptorOracleParser.KW_INDEX - 33)) | (1 << (InceptorOracleParser.KW_INDEXES - 33)) | (1 << (InceptorOracleParser.KW_REBUILD - 33)) | (1 << (InceptorOracleParser.KW_FUNCTIONS - 33)) | (1 << (InceptorOracleParser.KW_SHOW - 33)) | (1 << (InceptorOracleParser.KW_MSCK - 33)) | (1 << (InceptorOracleParser.KW_REPAIR - 33)) | (1 << (InceptorOracleParser.KW_DIRECTORY - 33)) | (1 << (InceptorOracleParser.KW_LOCAL - 33)) | (1 << (InceptorOracleParser.KW_GLOBAL - 33)) | (1 << (InceptorOracleParser.KW_USING - 33)) | (1 << (InceptorOracleParser.KW_CLUSTER - 33)) | (1 << (InceptorOracleParser.KW_DISTRIBUTE - 33)) | (1 << (InceptorOracleParser.KW_SORT - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (InceptorOracleParser.KW_UNION - 65)) | (1 << (InceptorOracleParser.KW_LOAD - 65)) | (1 << (InceptorOracleParser.KW_EXPORT - 65)) | (1 << (InceptorOracleParser.KW_IMPORT - 65)) | (1 << (InceptorOracleParser.KW_DATA - 65)) | (1 << (InceptorOracleParser.KW_INPATH - 65)) | (1 << (InceptorOracleParser.KW_IS - 65)) | (1 << (InceptorOracleParser.KW_NULLS - 65)) | (1 << (InceptorOracleParser.KW_CREATE - 65)) | (1 << (InceptorOracleParser.KW_EXTERNAL - 65)) | (1 << (InceptorOracleParser.KW_ALTER - 65)) | (1 << (InceptorOracleParser.KW_CHANGE - 65)) | (1 << (InceptorOracleParser.KW_FIRST - 65)) | (1 << (InceptorOracleParser.KW_LAST - 65)) | (1 << (InceptorOracleParser.KW_AFTER - 65)) | (1 << (InceptorOracleParser.KW_DESCRIBE - 65)) | (1 << (InceptorOracleParser.KW_DROP - 65)) | (1 << (InceptorOracleParser.KW_RENAME - 65)) | (1 << (InceptorOracleParser.KW_IGNORE - 65)) | (1 << (InceptorOracleParser.KW_RESPECT - 65)) | (1 << (InceptorOracleParser.KW_PROTECTION - 65)) | (1 << (InceptorOracleParser.KW_TO - 65)) | (1 << (InceptorOracleParser.KW_COMMENT - 65)) | (1 << (InceptorOracleParser.KW_PROMPT - 65)) | (1 << (InceptorOracleParser.KW_SPOOL - 65)) | (1 << (InceptorOracleParser.KW_BOOLEAN - 65)) | (1 << (InceptorOracleParser.KW_TINYINT - 65)) | (1 << (InceptorOracleParser.KW_BYTE - 65)) | (1 << (InceptorOracleParser.KW_SMALLINT - 65)) | (1 << (InceptorOracleParser.KW_INT - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (InceptorOracleParser.KW_BIGINT - 97)) | (1 << (InceptorOracleParser.KW_FLOAT - 97)) | (1 << (InceptorOracleParser.KW_DOUBLE - 97)) | (1 << (InceptorOracleParser.KW_DATE - 97)) | (1 << (InceptorOracleParser.KW_DATETIME - 97)) | (1 << (InceptorOracleParser.KW_TIMESTAMP - 97)) | (1 << (InceptorOracleParser.KW_TIME - 97)) | (1 << (InceptorOracleParser.KW_DECIMAL - 97)) | (1 << (InceptorOracleParser.KW_STRING - 97)) | (1 << (InceptorOracleParser.KW_GEO - 97)) | (1 << (InceptorOracleParser.KW_ARRAY - 97)) | (1 << (InceptorOracleParser.KW_STRUCT - 97)) | (1 << (InceptorOracleParser.KW_UNIONTYPE - 97)) | (1 << (InceptorOracleParser.KW_PARTITIONED - 97)) | (1 << (InceptorOracleParser.KW_ROUTED - 97)) | (1 << (InceptorOracleParser.KW_CLUSTERED - 97)) | (1 << (InceptorOracleParser.KW_SORTED - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (InceptorOracleParser.KW_NEXT - 129)) | (1 << (InceptorOracleParser.KW_NEXTVALUE - 129)) | (1 << (InceptorOracleParser.KW_BUCKETS - 129)) | (1 << (InceptorOracleParser.KW_ROW - 129)) | (1 << (InceptorOracleParser.KW_ROWS - 129)) | (1 << (InceptorOracleParser.KW_FORMAT - 129)) | (1 << (InceptorOracleParser.KW_DELIMITED - 129)) | (1 << (InceptorOracleParser.KW_FIELDS - 129)) | (1 << (InceptorOracleParser.KW_TERMINATED - 129)) | (1 << (InceptorOracleParser.KW_ESCAPED - 129)) | (1 << (InceptorOracleParser.KW_COLLECTION - 129)) | (1 << (InceptorOracleParser.KW_ITEMS - 129)) | (1 << (InceptorOracleParser.KW_KEYS - 129)) | (1 << (InceptorOracleParser.KW_KEY_TYPE - 129)) | (1 << (InceptorOracleParser.KW_LINES - 129)) | (1 << (InceptorOracleParser.KW_STORED - 129)) | (1 << (InceptorOracleParser.KW_FILEFORMAT - 129)) | (1 << (InceptorOracleParser.KW_SEQUENCEFILE - 129)) | (1 << (InceptorOracleParser.KW_TEXTFILE - 129)) | (1 << (InceptorOracleParser.KW_CSVFILE - 129)) | (1 << (InceptorOracleParser.KW_FWCFILE - 129)) | (1 << (InceptorOracleParser.KW_RCFILE - 129)) | (1 << (InceptorOracleParser.KW_ORCFILE - 129)) | (1 << (InceptorOracleParser.KW_HOLODESK - 129)) | (1 << (InceptorOracleParser.KW_STELLARDB - 129)) | (1 << (InceptorOracleParser.KW_ORCTRANSACTIONFILE - 129)) | (1 << (InceptorOracleParser.KW_PARQUET - 129)))) !== 0) || ((((_la - 161)) & ~0x1f) == 0 && ((1 << (_la - 161)) & ((1 << (InceptorOracleParser.KW_HYPERDRIVE - 161)) | (1 << (InceptorOracleParser.KW_ESDRIVE - 161)) | (1 << (InceptorOracleParser.KW_INPUTFORMAT - 161)) | (1 << (InceptorOracleParser.KW_OUTPUTFORMAT - 161)) | (1 << (InceptorOracleParser.KW_INPUTDRIVER - 161)) | (1 << (InceptorOracleParser.KW_OUTPUTDRIVER - 161)) | (1 << (InceptorOracleParser.KW_OFFLINE - 161)) | (1 << (InceptorOracleParser.KW_ENABLE - 161)) | (1 << (InceptorOracleParser.KW_DISABLE - 161)) | (1 << (InceptorOracleParser.KW_READONLY - 161)) | (1 << (InceptorOracleParser.KW_NO_DROP - 161)) | (1 << (InceptorOracleParser.KW_LOCATION - 161)) | (1 << (InceptorOracleParser.KW_BUCKET - 161)) | (1 << (InceptorOracleParser.KW_OUT - 161)) | (1 << (InceptorOracleParser.KW_OF - 161)) | (1 << (InceptorOracleParser.KW_PERCENT - 161)) | (1 << (InceptorOracleParser.KW_ADD - 161)) | (1 << (InceptorOracleParser.KW_REPLACE - 161)) | (1 << (InceptorOracleParser.KW_RLIKE - 161)) | (1 << (InceptorOracleParser.KW_REGEXP - 161)) | (1 << (InceptorOracleParser.KW_TEMPORARY - 161)) | (1 << (InceptorOracleParser.KW_RESOURCE - 161)) | (1 << (InceptorOracleParser.KW_RELOAD - 161)) | (1 << (InceptorOracleParser.KW_EXPLAIN - 161)) | (1 << (InceptorOracleParser.KW_FORMATTED - 161)) | (1 << (InceptorOracleParser.KW_PRETTY - 161)) | (1 << (InceptorOracleParser.KW_DEPENDENCY - 161)))) !== 0) || ((((_la - 193)) & ~0x1f) == 0 && ((1 << (_la - 193)) & ((1 << (InceptorOracleParser.KW_LOGICAL - 193)) | (1 << (InceptorOracleParser.KW_COST - 193)) | (1 << (InceptorOracleParser.KW_SERDE - 193)) | (1 << (InceptorOracleParser.KW_WITH - 193)) | (1 << (InceptorOracleParser.KW_WITHIN - 193)) | (1 << (InceptorOracleParser.KW_DEFERRED - 193)) | (1 << (InceptorOracleParser.KW_SERDEPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_DBPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_LIMIT - 193)) | (1 << (InceptorOracleParser.KW_SET - 193)) | (1 << (InceptorOracleParser.KW_UNSET - 193)) | (1 << (InceptorOracleParser.KW_TBLPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_IDXPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_VALUE_TYPE - 193)) | (1 << (InceptorOracleParser.KW_ELEM_TYPE - 193)) | (1 << (InceptorOracleParser.KW_PRIOR - 193)) | (1 << (InceptorOracleParser.KW_NOCYCLE - 193)) | (1 << (InceptorOracleParser.KW_MAPJOIN - 193)) | (1 << (InceptorOracleParser.KW_COMBINE - 193)) | (1 << (InceptorOracleParser.KW_COMBINE_STRUCT_INDEX - 193)) | (1 << (InceptorOracleParser.KW_GLKJOIN - 193)) | (1 << (InceptorOracleParser.KW_USE_INDEX - 193)))) !== 0) || ((((_la - 225)) & ~0x1f) == 0 && ((1 << (_la - 225)) & ((1 << (InceptorOracleParser.KW_STARGATE - 225)) | (1 << (InceptorOracleParser.KW_USE_BULKLOAD - 225)) | (1 << (InceptorOracleParser.KW_ADHOC - 225)) | (1 << (InceptorOracleParser.KW_PRECOMPILE - 225)) | (1 << (InceptorOracleParser.KW_STREAMTABLE - 225)) | (1 << (InceptorOracleParser.KW_STREAM - 225)) | (1 << (InceptorOracleParser.KW_RULEBASE - 225)) | (1 << (InceptorOracleParser.KW_RULEBASES - 225)) | (1 << (InceptorOracleParser.KW_RULE - 225)) | (1 << (InceptorOracleParser.KW_RULES - 225)) | (1 << (InceptorOracleParser.KW_MEET - 225)) | (1 << (InceptorOracleParser.KW_MUST - 225)) | (1 << (InceptorOracleParser.KW_MUSTNOT - 225)) | (1 << (InceptorOracleParser.KW_POLICY - 225)) | (1 << (InceptorOracleParser.KW_POLICIES - 225)) | (1 << (InceptorOracleParser.KW_REMOVE - 225)) | (1 << (InceptorOracleParser.KW_POLICYKEY - 225)) | (1 << (InceptorOracleParser.KW_POLICY_RULE - 225)) | (1 << (InceptorOracleParser.KW_LOOKUP - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTION - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTIONS - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTION_PROPERTIES - 225)) | (1 << (InceptorOracleParser.KW_HOLD_DDLTIME - 225)) | (1 << (InceptorOracleParser.KW_CLUSTERSTATUS - 225)))) !== 0) || ((((_la - 257)) & ~0x1f) == 0 && ((1 << (_la - 257)) & ((1 << (InceptorOracleParser.KW_UTC - 257)) | (1 << (InceptorOracleParser.KW_UTCTIMESTAMP - 257)) | (1 << (InceptorOracleParser.KW_LONG - 257)) | (1 << (InceptorOracleParser.KW_DELETE - 257)) | (1 << (InceptorOracleParser.KW_PLUS - 257)) | (1 << (InceptorOracleParser.KW_MINUS - 257)) | (1 << (InceptorOracleParser.KW_OP_CONCAT - 257)) | (1 << (InceptorOracleParser.KW_FETCH - 257)) | (1 << (InceptorOracleParser.KW_INTERSECT - 257)) | (1 << (InceptorOracleParser.KW_VIEW - 257)) | (1 << (InceptorOracleParser.KW_IN - 257)) | (1 << (InceptorOracleParser.KW_DATABASES - 257)) | (1 << (InceptorOracleParser.KW_MATERIALIZED - 257)) | (1 << (InceptorOracleParser.KW_SCHEMA - 257)) | (1 << (InceptorOracleParser.KW_SCHEMAS - 257)) | (1 << (InceptorOracleParser.KW_GRANT - 257)) | (1 << (InceptorOracleParser.KW_REVOKE - 257)) | (1 << (InceptorOracleParser.KW_SSL - 257)) | (1 << (InceptorOracleParser.KW_UNDO - 257)) | (1 << (InceptorOracleParser.KW_LOCK - 257)) | (1 << (InceptorOracleParser.KW_LOCKS - 257)) | (1 << (InceptorOracleParser.KW_UNLOCK - 257)) | (1 << (InceptorOracleParser.KW_SHARED - 257)) | (1 << (InceptorOracleParser.KW_EXCLUSIVE - 257)) | (1 << (InceptorOracleParser.KW_PROCEDURE - 257)) | (1 << (InceptorOracleParser.KW_UNSIGNED - 257)) | (1 << (InceptorOracleParser.KW_WHILE - 257)) | (1 << (InceptorOracleParser.KW_READ - 257)) | (1 << (InceptorOracleParser.KW_READS - 257)))) !== 0) || ((((_la - 289)) & ~0x1f) == 0 && ((1 << (_la - 289)) & ((1 << (InceptorOracleParser.KW_PURGE - 289)) | (1 << (InceptorOracleParser.KW_RANGE - 289)) | (1 << (InceptorOracleParser.KW_ANALYZE - 289)) | (1 << (InceptorOracleParser.KW_BEFORE - 289)) | (1 << (InceptorOracleParser.KW_BETWEEN - 289)) | (1 << (InceptorOracleParser.KW_BOTH - 289)) | (1 << (InceptorOracleParser.KW_BINARY - 289)) | (1 << (InceptorOracleParser.KW_DEFAULT - 289)) | (1 << (InceptorOracleParser.KW_TYPE - 289)) | (1 << (InceptorOracleParser.KW_TRIGGER - 289)) | (1 << (InceptorOracleParser.KW_RECORDREADER - 289)) | (1 << (InceptorOracleParser.KW_RECORDWRITER - 289)) | (1 << (InceptorOracleParser.KW_SEMI - 289)) | (1 << (InceptorOracleParser.KW_LATERAL - 289)) | (1 << (InceptorOracleParser.KW_TOUCH - 289)) | (1 << (InceptorOracleParser.KW_ARCHIVE - 289)) | (1 << (InceptorOracleParser.KW_UNARCHIVE - 289)) | (1 << (InceptorOracleParser.KW_COMPUTE - 289)) | (1 << (InceptorOracleParser.KW_STATISTICS - 289)) | (1 << (InceptorOracleParser.KW_USE - 289)) | (1 << (InceptorOracleParser.KW_OPTION - 289)) | (1 << (InceptorOracleParser.KW_CONCATENATE - 289)) | (1 << (InceptorOracleParser.KW_SHOW_DATABASE - 289)) | (1 << (InceptorOracleParser.KW_UPDATE - 289)) | (1 << (InceptorOracleParser.KW_RESTRICT - 289)) | (1 << (InceptorOracleParser.KW_CASCADE - 289)) | (1 << (InceptorOracleParser.KW_SKEWED - 289)))) !== 0) || ((((_la - 323)) & ~0x1f) == 0 && ((1 << (_la - 323)) & ((1 << (InceptorOracleParser.KW_DIRECTORIES - 323)) | (1 << (InceptorOracleParser.KW_WINDOWRESET - 323)) | (1 << (InceptorOracleParser.KW_SESSIONSTART - 323)) | (1 << (InceptorOracleParser.KW_SESSIONSTOP - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE_DISCARD - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE_COMPLETE - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOW - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOWSLIDELENGTH - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOWSEPARATED - 323)) | (1 << (InceptorOracleParser.KW_FOLLOWEDBY - 323)) | (1 << (InceptorOracleParser.KW_NOTFOLLOWEDBY - 323)) | (1 << (InceptorOracleParser.KW_NOTNEXT - 323)) | (1 << (InceptorOracleParser.KW_PATTERN_TIMES - 323)) | (1 << (InceptorOracleParser.KW_CURRVALUE - 323)) | (1 << (InceptorOracleParser.KW_GROUPING - 323)) | (1 << (InceptorOracleParser.KW_SETS - 323)))) !== 0) || ((((_la - 355)) & ~0x1f) == 0 && ((1 << (_la - 355)) & ((1 << (InceptorOracleParser.KW_TRUNCATE - 355)) | (1 << (InceptorOracleParser.KW_NOSCAN - 355)) | (1 << (InceptorOracleParser.KW_USER - 355)) | (1 << (InceptorOracleParser.KW_QUOTA - 355)) | (1 << (InceptorOracleParser.KW_PERMISSION - 355)) | (1 << (InceptorOracleParser.KW_ROLE - 355)) | (1 << (InceptorOracleParser.KW_ROLES - 355)) | (1 << (InceptorOracleParser.KW_INNER - 355)) | (1 << (InceptorOracleParser.KW_ADMIN - 355)) | (1 << (InceptorOracleParser.KW_OWNER - 355)) | (1 << (InceptorOracleParser.KW_PRINCIPALS - 355)) | (1 << (InceptorOracleParser.KW_CONSTANT - 355)) | (1 << (InceptorOracleParser.KW_CONSTRAINT - 355)) | (1 << (InceptorOracleParser.KW_VALUES - 355)) | (1 << (InceptorOracleParser.KW_YEAR - 355)) | (1 << (InceptorOracleParser.KW_MONTH - 355)) | (1 << (InceptorOracleParser.KW_DAY - 355)) | (1 << (InceptorOracleParser.KW_MINUTE - 355)) | (1 << (InceptorOracleParser.KW_HOUR - 355)))) !== 0) || ((((_la - 387)) & ~0x1f) == 0 && ((1 << (_la - 387)) & ((1 << (InceptorOracleParser.KW_SECOND - 387)) | (1 << (InceptorOracleParser.KW_INTERVAL - 387)) | (1 << (InceptorOracleParser.KW_SYSDATE - 387)) | (1 << (InceptorOracleParser.KW_NOMAXVALUE - 387)) | (1 << (InceptorOracleParser.KW_MINVALUE - 387)) | (1 << (InceptorOracleParser.KW_NOMINVALUE - 387)) | (1 << (InceptorOracleParser.KW_CYCLE - 387)) | (1 << (InceptorOracleParser.KW_CACHE - 387)) | (1 << (InceptorOracleParser.KW_CACHEDMETRIC - 387)) | (1 << (InceptorOracleParser.KW_CACHEDMETRICS - 387)) | (1 << (InceptorOracleParser.KW_NOCACHE - 387)) | (1 << (InceptorOracleParser.KW_NOORDER - 387)) | (1 << (InceptorOracleParser.KW_MERGE - 387)) | (1 << (InceptorOracleParser.KW_PLANT - 387)) | (1 << (InceptorOracleParser.KW_IMMEDIATE - 387)) | (1 << (InceptorOracleParser.KW_COMPACT - 387)) | (1 << (InceptorOracleParser.KW_STOP - 387)) | (1 << (InceptorOracleParser.KW_LIST - 387)))) !== 0) || ((((_la - 419)) & ~0x1f) == 0 && ((1 << (_la - 419)) & ((1 << (InceptorOracleParser.KW_TRANSACTION - 419)) | (1 << (InceptorOracleParser.KW_WORK - 419)) | (1 << (InceptorOracleParser.KW_SPACE - 419)) | (1 << (InceptorOracleParser.KW_CONF - 419)) | (1 << (InceptorOracleParser.KW_DEFINED - 419)) | (1 << (InceptorOracleParser.KW_INTEGER - 419)) | (1 << (InceptorOracleParser.KW_ONLY - 419)) | (1 << (InceptorOracleParser.KW_SERVER - 419)) | (1 << (InceptorOracleParser.KW_TRANSACTIONS - 419)) | (1 << (InceptorOracleParser.KW_URI - 419)) | (1 << (InceptorOracleParser.KW_WRITE - 419)) | (1 << (InceptorOracleParser.KW_FACL - 419)) | (1 << (InceptorOracleParser.KW_FOUND - 419)) | (1 << (InceptorOracleParser.KW_LEVEL - 419)) | (1 << (InceptorOracleParser.KW_PUBLIC - 419)) | (1 << (InceptorOracleParser.KW_LINKS - 419)) | (1 << (InceptorOracleParser.KW_CONNECT - 419)) | (1 << (InceptorOracleParser.KW_APPLICATION - 419)) | (1 << (InceptorOracleParser.KW_APPLICATIONS - 419)) | (1 << (InceptorOracleParser.KW_APP - 419)) | (1 << (InceptorOracleParser.KW_APPS - 419)) | (1 << (InceptorOracleParser.KW_INFINITE - 419)))) !== 0) || ((((_la - 451)) & ~0x1f) == 0 && ((1 << (_la - 451)) & ((1 << (InceptorOracleParser.KW_WAIT - 451)) | (1 << (InceptorOracleParser.KW_PRIMARY - 451)) | (1 << (InceptorOracleParser.KW_FOREIGN - 451)) | (1 << (InceptorOracleParser.KW_REFERENCES - 451)) | (1 << (InceptorOracleParser.KW_VALIDATE - 451)) | (1 << (InceptorOracleParser.KW_NOVALIDATE - 451)) | (1 << (InceptorOracleParser.KW_RELY - 451)) | (1 << (InceptorOracleParser.KW_NORELY - 451)) | (1 << (InceptorOracleParser.KW_KEY - 451)) | (1 << (InceptorOracleParser.KW_SEGMENT - 451)) | (1 << (InceptorOracleParser.KW_LENGTH - 451)) | (1 << (InceptorOracleParser.KW_ATTACH - 451)) | (1 << (InceptorOracleParser.KW_DETTACH - 451)) | (1 << (InceptorOracleParser.KW_SHARD - 451)) | (1 << (InceptorOracleParser.KW_NUM - 451)) | (1 << (InceptorOracleParser.KW_FULLTEXT - 451)) | (1 << (InceptorOracleParser.KW_TABLESIZE - 451)) | (1 << (InceptorOracleParser.KW_TABLET - 451)) | (1 << (InceptorOracleParser.KW_CAPACITY - 451)) | (1 << (InceptorOracleParser.KW_ANALYZER - 451)) | (1 << (InceptorOracleParser.KW_SYNC - 451)) | (1 << (InceptorOracleParser.KW_NO_INDEX - 451)) | (1 << (InceptorOracleParser.KW_LOG - 451)) | (1 << (InceptorOracleParser.KW_FILE - 451)) | (1 << (InceptorOracleParser.KW_JAR - 451)) | (1 << (InceptorOracleParser.KW_PERMANENT - 451)))) !== 0) || _la===InceptorOracleParser.KW_SCHEDULER || _la===InceptorOracleParser.KW_MODE || ((((_la - 537)) & ~0x1f) == 0 && ((1 << (_la - 537)) & ((1 << (InceptorOracleParser.Identifier - 537)) | (1 << (InceptorOracleParser.KW_NOCOPY - 537)) | (1 << (InceptorOracleParser.KW_VARRAY - 537)) | (1 << (InceptorOracleParser.KW_PACKAGE - 537)) | (1 << (InceptorOracleParser.KW_PACKAGES - 537)) | (1 << (InceptorOracleParser.KW_BODY - 537)) | (1 << (InceptorOracleParser.KW_ISOPEN - 537)) | (1 << (InceptorOracleParser.KW_NOTFOUND - 537)) | (1 << (InceptorOracleParser.KW_ROWCOUNT - 537)) | (1 << (InceptorOracleParser.KW_BULK_ROWCOUNT - 537)) | (1 << (InceptorOracleParser.KW_BULK_EXCEPTIONS - 537)) | (1 << (InceptorOracleParser.KW_REVERSE - 537)) | (1 << (InceptorOracleParser.KW_SAVE - 537)) | (1 << (InceptorOracleParser.KW_EXCEPTIONS - 537)) | (1 << (InceptorOracleParser.KW_INDICES - 537)) | (1 << (InceptorOracleParser.KW_REF - 537)) | (1 << (InceptorOracleParser.KW_YEARS - 537)))) !== 0) || ((((_la - 569)) & ~0x1f) == 0 && ((1 << (_la - 569)) & ((1 << (InceptorOracleParser.KW_MONTHS - 569)) | (1 << (InceptorOracleParser.KW_DAYS - 569)) | (1 << (InceptorOracleParser.KW_HOURS - 569)) | (1 << (InceptorOracleParser.KW_MINUTES - 569)) | (1 << (InceptorOracleParser.KW_SECONDS - 569)))) !== 0)) {
	            this.state = 5290;
	            localctx.dst = this.graphItem();
	        }

	        this.state = 5293;
	        this.match(InceptorOracleParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphItem() {
	    let localctx = new GraphItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 892, InceptorOracleParser.RULE_graphItem);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5295;
	        this.identifier();
	        this.state = 5300;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.LCURLY) {
	            this.state = 5296;
	            this.match(InceptorOracleParser.LCURLY);
	            this.state = 5297;
	            this.expression();
	            this.state = 5298;
	            this.match(InceptorOracleParser.RCURLY);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphSelectClause() {
	    let localctx = new GraphSelectClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 894, InceptorOracleParser.RULE_graphSelectClause);
	    var _la = 0; // Token type
	    try {
	        this.state = 5311;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case InceptorOracleParser.STAR:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5302;
	            this.match(InceptorOracleParser.STAR);
	            break;
	        case InceptorOracleParser.KW_TRUE:
	        case InceptorOracleParser.KW_FALSE:
	        case InceptorOracleParser.KW_ALL:
	        case InceptorOracleParser.KW_LIKE:
	        case InceptorOracleParser.KW_NO:
	        case InceptorOracleParser.KW_ANY:
	        case InceptorOracleParser.KW_EXISTS:
	        case InceptorOracleParser.KW_ASC:
	        case InceptorOracleParser.KW_DESC:
	        case InceptorOracleParser.KW_ORDER:
	        case InceptorOracleParser.KW_GROUP:
	        case InceptorOracleParser.KW_INCREMENT:
	        case InceptorOracleParser.KW_BY:
	        case InceptorOracleParser.KW_HASH:
	        case InceptorOracleParser.KW_INSERT:
	        case InceptorOracleParser.KW_OVERWRITE:
	        case InceptorOracleParser.KW_OUTER:
	        case InceptorOracleParser.KW_STREAMJOB:
	        case InceptorOracleParser.KW_STREAMJOBS:
	        case InceptorOracleParser.KW_AT:
	        case InceptorOracleParser.KW_LEFT:
	        case InceptorOracleParser.KW_RIGHT:
	        case InceptorOracleParser.KW_FULL:
	        case InceptorOracleParser.KW_PARTITION:
	        case InceptorOracleParser.KW_PARTITIONS:
	        case InceptorOracleParser.KW_PATTERN:
	        case InceptorOracleParser.KW_TABLE:
	        case InceptorOracleParser.KW_TABLES:
	        case InceptorOracleParser.KW_SEQUENCE:
	        case InceptorOracleParser.KW_SEQUENCES:
	        case InceptorOracleParser.KW_COLUMNS:
	        case InceptorOracleParser.KW_INDEX:
	        case InceptorOracleParser.KW_INDEXES:
	        case InceptorOracleParser.KW_REBUILD:
	        case InceptorOracleParser.KW_FUNCTIONS:
	        case InceptorOracleParser.KW_SHOW:
	        case InceptorOracleParser.KW_MSCK:
	        case InceptorOracleParser.KW_REPAIR:
	        case InceptorOracleParser.KW_DIRECTORY:
	        case InceptorOracleParser.KW_LOCAL:
	        case InceptorOracleParser.KW_GLOBAL:
	        case InceptorOracleParser.KW_USING:
	        case InceptorOracleParser.KW_CLUSTER:
	        case InceptorOracleParser.KW_DISTRIBUTE:
	        case InceptorOracleParser.KW_SORT:
	        case InceptorOracleParser.KW_UNION:
	        case InceptorOracleParser.KW_LOAD:
	        case InceptorOracleParser.KW_EXPORT:
	        case InceptorOracleParser.KW_IMPORT:
	        case InceptorOracleParser.KW_DATA:
	        case InceptorOracleParser.KW_INPATH:
	        case InceptorOracleParser.KW_IS:
	        case InceptorOracleParser.KW_NULLS:
	        case InceptorOracleParser.KW_CREATE:
	        case InceptorOracleParser.KW_EXTERNAL:
	        case InceptorOracleParser.KW_ALTER:
	        case InceptorOracleParser.KW_CHANGE:
	        case InceptorOracleParser.KW_FIRST:
	        case InceptorOracleParser.KW_LAST:
	        case InceptorOracleParser.KW_AFTER:
	        case InceptorOracleParser.KW_DESCRIBE:
	        case InceptorOracleParser.KW_DROP:
	        case InceptorOracleParser.KW_RENAME:
	        case InceptorOracleParser.KW_IGNORE:
	        case InceptorOracleParser.KW_RESPECT:
	        case InceptorOracleParser.KW_PROTECTION:
	        case InceptorOracleParser.KW_TO:
	        case InceptorOracleParser.KW_COMMENT:
	        case InceptorOracleParser.KW_PROMPT:
	        case InceptorOracleParser.KW_SPOOL:
	        case InceptorOracleParser.KW_BOOLEAN:
	        case InceptorOracleParser.KW_TINYINT:
	        case InceptorOracleParser.KW_BYTE:
	        case InceptorOracleParser.KW_SMALLINT:
	        case InceptorOracleParser.KW_INT:
	        case InceptorOracleParser.KW_BIGINT:
	        case InceptorOracleParser.KW_FLOAT:
	        case InceptorOracleParser.KW_DOUBLE:
	        case InceptorOracleParser.KW_DATE:
	        case InceptorOracleParser.KW_DATETIME:
	        case InceptorOracleParser.KW_TIMESTAMP:
	        case InceptorOracleParser.KW_TIME:
	        case InceptorOracleParser.KW_DECIMAL:
	        case InceptorOracleParser.KW_STRING:
	        case InceptorOracleParser.KW_GEO:
	        case InceptorOracleParser.KW_ARRAY:
	        case InceptorOracleParser.KW_STRUCT:
	        case InceptorOracleParser.KW_UNIONTYPE:
	        case InceptorOracleParser.KW_PARTITIONED:
	        case InceptorOracleParser.KW_ROUTED:
	        case InceptorOracleParser.KW_CLUSTERED:
	        case InceptorOracleParser.KW_SORTED:
	        case InceptorOracleParser.KW_NEXT:
	        case InceptorOracleParser.KW_NEXTVALUE:
	        case InceptorOracleParser.KW_BUCKETS:
	        case InceptorOracleParser.KW_ROW:
	        case InceptorOracleParser.KW_ROWS:
	        case InceptorOracleParser.KW_FORMAT:
	        case InceptorOracleParser.KW_DELIMITED:
	        case InceptorOracleParser.KW_FIELDS:
	        case InceptorOracleParser.KW_TERMINATED:
	        case InceptorOracleParser.KW_ESCAPED:
	        case InceptorOracleParser.KW_COLLECTION:
	        case InceptorOracleParser.KW_ITEMS:
	        case InceptorOracleParser.KW_KEYS:
	        case InceptorOracleParser.KW_KEY_TYPE:
	        case InceptorOracleParser.KW_LINES:
	        case InceptorOracleParser.KW_STORED:
	        case InceptorOracleParser.KW_FILEFORMAT:
	        case InceptorOracleParser.KW_SEQUENCEFILE:
	        case InceptorOracleParser.KW_TEXTFILE:
	        case InceptorOracleParser.KW_CSVFILE:
	        case InceptorOracleParser.KW_FWCFILE:
	        case InceptorOracleParser.KW_RCFILE:
	        case InceptorOracleParser.KW_ORCFILE:
	        case InceptorOracleParser.KW_HOLODESK:
	        case InceptorOracleParser.KW_STELLARDB:
	        case InceptorOracleParser.KW_ORCTRANSACTIONFILE:
	        case InceptorOracleParser.KW_PARQUET:
	        case InceptorOracleParser.KW_HYPERDRIVE:
	        case InceptorOracleParser.KW_ESDRIVE:
	        case InceptorOracleParser.KW_INPUTFORMAT:
	        case InceptorOracleParser.KW_OUTPUTFORMAT:
	        case InceptorOracleParser.KW_INPUTDRIVER:
	        case InceptorOracleParser.KW_OUTPUTDRIVER:
	        case InceptorOracleParser.KW_OFFLINE:
	        case InceptorOracleParser.KW_ENABLE:
	        case InceptorOracleParser.KW_DISABLE:
	        case InceptorOracleParser.KW_READONLY:
	        case InceptorOracleParser.KW_NO_DROP:
	        case InceptorOracleParser.KW_LOCATION:
	        case InceptorOracleParser.KW_BUCKET:
	        case InceptorOracleParser.KW_OUT:
	        case InceptorOracleParser.KW_OF:
	        case InceptorOracleParser.KW_PERCENT:
	        case InceptorOracleParser.KW_ADD:
	        case InceptorOracleParser.KW_REPLACE:
	        case InceptorOracleParser.KW_RLIKE:
	        case InceptorOracleParser.KW_REGEXP:
	        case InceptorOracleParser.KW_TEMPORARY:
	        case InceptorOracleParser.KW_RESOURCE:
	        case InceptorOracleParser.KW_RELOAD:
	        case InceptorOracleParser.KW_EXPLAIN:
	        case InceptorOracleParser.KW_FORMATTED:
	        case InceptorOracleParser.KW_PRETTY:
	        case InceptorOracleParser.KW_DEPENDENCY:
	        case InceptorOracleParser.KW_LOGICAL:
	        case InceptorOracleParser.KW_COST:
	        case InceptorOracleParser.KW_SERDE:
	        case InceptorOracleParser.KW_WITH:
	        case InceptorOracleParser.KW_WITHIN:
	        case InceptorOracleParser.KW_DEFERRED:
	        case InceptorOracleParser.KW_SERDEPROPERTIES:
	        case InceptorOracleParser.KW_DBPROPERTIES:
	        case InceptorOracleParser.KW_LIMIT:
	        case InceptorOracleParser.KW_SET:
	        case InceptorOracleParser.KW_UNSET:
	        case InceptorOracleParser.KW_TBLPROPERTIES:
	        case InceptorOracleParser.KW_IDXPROPERTIES:
	        case InceptorOracleParser.KW_VALUE_TYPE:
	        case InceptorOracleParser.KW_ELEM_TYPE:
	        case InceptorOracleParser.KW_PRIOR:
	        case InceptorOracleParser.KW_NOCYCLE:
	        case InceptorOracleParser.KW_MAPJOIN:
	        case InceptorOracleParser.KW_COMBINE:
	        case InceptorOracleParser.KW_COMBINE_STRUCT_INDEX:
	        case InceptorOracleParser.KW_GLKJOIN:
	        case InceptorOracleParser.KW_USE_INDEX:
	        case InceptorOracleParser.KW_STARGATE:
	        case InceptorOracleParser.KW_USE_BULKLOAD:
	        case InceptorOracleParser.KW_ADHOC:
	        case InceptorOracleParser.KW_PRECOMPILE:
	        case InceptorOracleParser.KW_STREAMTABLE:
	        case InceptorOracleParser.KW_STREAM:
	        case InceptorOracleParser.KW_RULEBASE:
	        case InceptorOracleParser.KW_RULEBASES:
	        case InceptorOracleParser.KW_RULE:
	        case InceptorOracleParser.KW_RULES:
	        case InceptorOracleParser.KW_MEET:
	        case InceptorOracleParser.KW_MUST:
	        case InceptorOracleParser.KW_MUSTNOT:
	        case InceptorOracleParser.KW_POLICY:
	        case InceptorOracleParser.KW_POLICIES:
	        case InceptorOracleParser.KW_REMOVE:
	        case InceptorOracleParser.KW_POLICYKEY:
	        case InceptorOracleParser.KW_POLICY_RULE:
	        case InceptorOracleParser.KW_LOOKUP:
	        case InceptorOracleParser.KW_RULE_FUNCTION:
	        case InceptorOracleParser.KW_RULE_FUNCTIONS:
	        case InceptorOracleParser.KW_RULE_FUNCTION_PROPERTIES:
	        case InceptorOracleParser.KW_HOLD_DDLTIME:
	        case InceptorOracleParser.KW_CLUSTERSTATUS:
	        case InceptorOracleParser.KW_UTC:
	        case InceptorOracleParser.KW_UTCTIMESTAMP:
	        case InceptorOracleParser.KW_LONG:
	        case InceptorOracleParser.KW_DELETE:
	        case InceptorOracleParser.KW_PLUS:
	        case InceptorOracleParser.KW_MINUS:
	        case InceptorOracleParser.KW_OP_CONCAT:
	        case InceptorOracleParser.KW_FETCH:
	        case InceptorOracleParser.KW_INTERSECT:
	        case InceptorOracleParser.KW_VIEW:
	        case InceptorOracleParser.KW_IN:
	        case InceptorOracleParser.KW_DATABASES:
	        case InceptorOracleParser.KW_MATERIALIZED:
	        case InceptorOracleParser.KW_SCHEMA:
	        case InceptorOracleParser.KW_SCHEMAS:
	        case InceptorOracleParser.KW_GRANT:
	        case InceptorOracleParser.KW_REVOKE:
	        case InceptorOracleParser.KW_SSL:
	        case InceptorOracleParser.KW_UNDO:
	        case InceptorOracleParser.KW_LOCK:
	        case InceptorOracleParser.KW_LOCKS:
	        case InceptorOracleParser.KW_UNLOCK:
	        case InceptorOracleParser.KW_SHARED:
	        case InceptorOracleParser.KW_EXCLUSIVE:
	        case InceptorOracleParser.KW_PROCEDURE:
	        case InceptorOracleParser.KW_UNSIGNED:
	        case InceptorOracleParser.KW_WHILE:
	        case InceptorOracleParser.KW_READ:
	        case InceptorOracleParser.KW_READS:
	        case InceptorOracleParser.KW_PURGE:
	        case InceptorOracleParser.KW_RANGE:
	        case InceptorOracleParser.KW_ANALYZE:
	        case InceptorOracleParser.KW_BEFORE:
	        case InceptorOracleParser.KW_BETWEEN:
	        case InceptorOracleParser.KW_BOTH:
	        case InceptorOracleParser.KW_BINARY:
	        case InceptorOracleParser.KW_DEFAULT:
	        case InceptorOracleParser.KW_TYPE:
	        case InceptorOracleParser.KW_TRIGGER:
	        case InceptorOracleParser.KW_RECORDREADER:
	        case InceptorOracleParser.KW_RECORDWRITER:
	        case InceptorOracleParser.KW_SEMI:
	        case InceptorOracleParser.KW_LATERAL:
	        case InceptorOracleParser.KW_TOUCH:
	        case InceptorOracleParser.KW_ARCHIVE:
	        case InceptorOracleParser.KW_UNARCHIVE:
	        case InceptorOracleParser.KW_COMPUTE:
	        case InceptorOracleParser.KW_STATISTICS:
	        case InceptorOracleParser.KW_USE:
	        case InceptorOracleParser.KW_OPTION:
	        case InceptorOracleParser.KW_CONCATENATE:
	        case InceptorOracleParser.KW_SHOW_DATABASE:
	        case InceptorOracleParser.KW_UPDATE:
	        case InceptorOracleParser.KW_RESTRICT:
	        case InceptorOracleParser.KW_CASCADE:
	        case InceptorOracleParser.KW_SKEWED:
	        case InceptorOracleParser.KW_DIRECTORIES:
	        case InceptorOracleParser.KW_WINDOWRESET:
	        case InceptorOracleParser.KW_SESSIONSTART:
	        case InceptorOracleParser.KW_SESSIONSTOP:
	        case InceptorOracleParser.KW_SESSIONEXPIRE:
	        case InceptorOracleParser.KW_SESSIONEXPIRE_DISCARD:
	        case InceptorOracleParser.KW_SESSIONEXPIRE_COMPLETE:
	        case InceptorOracleParser.KW_STREAMWINDOW:
	        case InceptorOracleParser.KW_STREAMWINDOWSLIDELENGTH:
	        case InceptorOracleParser.KW_STREAMWINDOWSEPARATED:
	        case InceptorOracleParser.KW_FOLLOWEDBY:
	        case InceptorOracleParser.KW_NOTFOLLOWEDBY:
	        case InceptorOracleParser.KW_NOTNEXT:
	        case InceptorOracleParser.KW_PATTERN_TIMES:
	        case InceptorOracleParser.KW_CURRVALUE:
	        case InceptorOracleParser.KW_GROUPING:
	        case InceptorOracleParser.KW_SETS:
	        case InceptorOracleParser.KW_TRUNCATE:
	        case InceptorOracleParser.KW_NOSCAN:
	        case InceptorOracleParser.KW_USER:
	        case InceptorOracleParser.KW_QUOTA:
	        case InceptorOracleParser.KW_PERMISSION:
	        case InceptorOracleParser.KW_ROLE:
	        case InceptorOracleParser.KW_ROLES:
	        case InceptorOracleParser.KW_INNER:
	        case InceptorOracleParser.KW_ADMIN:
	        case InceptorOracleParser.KW_OWNER:
	        case InceptorOracleParser.KW_PRINCIPALS:
	        case InceptorOracleParser.KW_CONSTANT:
	        case InceptorOracleParser.KW_CONSTRAINT:
	        case InceptorOracleParser.KW_VALUES:
	        case InceptorOracleParser.KW_YEAR:
	        case InceptorOracleParser.KW_MONTH:
	        case InceptorOracleParser.KW_DAY:
	        case InceptorOracleParser.KW_MINUTE:
	        case InceptorOracleParser.KW_HOUR:
	        case InceptorOracleParser.KW_SECOND:
	        case InceptorOracleParser.KW_INTERVAL:
	        case InceptorOracleParser.KW_SYSDATE:
	        case InceptorOracleParser.KW_NOMAXVALUE:
	        case InceptorOracleParser.KW_MINVALUE:
	        case InceptorOracleParser.KW_NOMINVALUE:
	        case InceptorOracleParser.KW_CYCLE:
	        case InceptorOracleParser.KW_CACHE:
	        case InceptorOracleParser.KW_CACHEDMETRIC:
	        case InceptorOracleParser.KW_CACHEDMETRICS:
	        case InceptorOracleParser.KW_NOCACHE:
	        case InceptorOracleParser.KW_NOORDER:
	        case InceptorOracleParser.KW_MERGE:
	        case InceptorOracleParser.KW_PLANT:
	        case InceptorOracleParser.KW_IMMEDIATE:
	        case InceptorOracleParser.KW_COMPACT:
	        case InceptorOracleParser.KW_STOP:
	        case InceptorOracleParser.KW_LIST:
	        case InceptorOracleParser.KW_TRANSACTION:
	        case InceptorOracleParser.KW_WORK:
	        case InceptorOracleParser.KW_SPACE:
	        case InceptorOracleParser.KW_CONF:
	        case InceptorOracleParser.KW_DEFINED:
	        case InceptorOracleParser.KW_INTEGER:
	        case InceptorOracleParser.KW_ONLY:
	        case InceptorOracleParser.KW_SERVER:
	        case InceptorOracleParser.KW_TRANSACTIONS:
	        case InceptorOracleParser.KW_URI:
	        case InceptorOracleParser.KW_WRITE:
	        case InceptorOracleParser.KW_FACL:
	        case InceptorOracleParser.KW_FOUND:
	        case InceptorOracleParser.KW_LEVEL:
	        case InceptorOracleParser.KW_PUBLIC:
	        case InceptorOracleParser.KW_LINKS:
	        case InceptorOracleParser.KW_CONNECT:
	        case InceptorOracleParser.KW_APPLICATION:
	        case InceptorOracleParser.KW_APPLICATIONS:
	        case InceptorOracleParser.KW_APP:
	        case InceptorOracleParser.KW_APPS:
	        case InceptorOracleParser.KW_INFINITE:
	        case InceptorOracleParser.KW_WAIT:
	        case InceptorOracleParser.KW_PRIMARY:
	        case InceptorOracleParser.KW_FOREIGN:
	        case InceptorOracleParser.KW_REFERENCES:
	        case InceptorOracleParser.KW_VALIDATE:
	        case InceptorOracleParser.KW_NOVALIDATE:
	        case InceptorOracleParser.KW_RELY:
	        case InceptorOracleParser.KW_NORELY:
	        case InceptorOracleParser.KW_KEY:
	        case InceptorOracleParser.KW_SEGMENT:
	        case InceptorOracleParser.KW_LENGTH:
	        case InceptorOracleParser.KW_ATTACH:
	        case InceptorOracleParser.KW_DETTACH:
	        case InceptorOracleParser.KW_SHARD:
	        case InceptorOracleParser.KW_NUM:
	        case InceptorOracleParser.KW_FULLTEXT:
	        case InceptorOracleParser.KW_TABLESIZE:
	        case InceptorOracleParser.KW_TABLET:
	        case InceptorOracleParser.KW_CAPACITY:
	        case InceptorOracleParser.KW_ANALYZER:
	        case InceptorOracleParser.KW_SYNC:
	        case InceptorOracleParser.KW_NO_INDEX:
	        case InceptorOracleParser.KW_LOG:
	        case InceptorOracleParser.KW_FILE:
	        case InceptorOracleParser.KW_JAR:
	        case InceptorOracleParser.KW_PERMANENT:
	        case InceptorOracleParser.KW_SCHEDULER:
	        case InceptorOracleParser.KW_MODE:
	        case InceptorOracleParser.Identifier:
	        case InceptorOracleParser.KW_NOCOPY:
	        case InceptorOracleParser.KW_VARRAY:
	        case InceptorOracleParser.KW_PACKAGE:
	        case InceptorOracleParser.KW_PACKAGES:
	        case InceptorOracleParser.KW_BODY:
	        case InceptorOracleParser.KW_ISOPEN:
	        case InceptorOracleParser.KW_NOTFOUND:
	        case InceptorOracleParser.KW_ROWCOUNT:
	        case InceptorOracleParser.KW_BULK_ROWCOUNT:
	        case InceptorOracleParser.KW_BULK_EXCEPTIONS:
	        case InceptorOracleParser.KW_REVERSE:
	        case InceptorOracleParser.KW_SAVE:
	        case InceptorOracleParser.KW_EXCEPTIONS:
	        case InceptorOracleParser.KW_INDICES:
	        case InceptorOracleParser.KW_REF:
	        case InceptorOracleParser.KW_YEARS:
	        case InceptorOracleParser.KW_MONTHS:
	        case InceptorOracleParser.KW_DAYS:
	        case InceptorOracleParser.KW_HOURS:
	        case InceptorOracleParser.KW_MINUTES:
	        case InceptorOracleParser.KW_SECONDS:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5303;
	            this.graphSelectTable();
	            this.state = 5308;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===InceptorOracleParser.COMMA) {
	                this.state = 5304;
	                this.match(InceptorOracleParser.COMMA);
	                this.state = 5305;
	                this.graphSelectTable();
	                this.state = 5310;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphSelectTable() {
	    let localctx = new GraphSelectTableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 896, InceptorOracleParser.RULE_graphSelectTable);
	    try {
	        this.state = 5324;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,511,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5318;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,510,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 5313;
	                this.identifier();
	                break;

	            case 2:
	                this.state = 5314;
	                this.identifier();
	                this.state = 5315;
	                this.match(InceptorOracleParser.DOT);
	                this.state = 5316;
	                this.match(InceptorOracleParser.STAR);
	                break;

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5320;
	            localctx.t = this.identifier();
	            this.state = 5321;
	            this.match(InceptorOracleParser.DOT);
	            this.state = 5322;
	            localctx.c = this.identifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupingSetExpression() {
	    let localctx = new GroupingSetExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 898, InceptorOracleParser.RULE_groupingSetExpression);
	    try {
	        this.state = 5333;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,512,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5326;
	            this.rollupClause();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5327;
	            this.cubeClause();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5328;
	            this.groupingSetsClause();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5329;
	            this.groupByExpressionList();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 5330;
	            this.groupByExpression();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 5331;
	            this.match(InceptorOracleParser.LPAREN);
	            this.state = 5332;
	            this.match(InceptorOracleParser.RPAREN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ordinaryGroupingSet() {
	    let localctx = new OrdinaryGroupingSetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 900, InceptorOracleParser.RULE_ordinaryGroupingSet);
	    try {
	        this.state = 5337;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,513,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5335;
	            this.groupByExpressionList();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5336;
	            this.groupByExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupByExpressionList() {
	    let localctx = new GroupByExpressionListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 902, InceptorOracleParser.RULE_groupByExpressionList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5339;
	        this.match(InceptorOracleParser.LPAREN);
	        this.state = 5340;
	        this.groupByExpression();
	        this.state = 5345;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===InceptorOracleParser.COMMA) {
	            this.state = 5341;
	            this.match(InceptorOracleParser.COMMA);
	            this.state = 5342;
	            this.groupByExpression();
	            this.state = 5347;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 5348;
	        this.match(InceptorOracleParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupByElements() {
	    let localctx = new GroupByElementsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 904, InceptorOracleParser.RULE_groupByElements);
	    try {
	        this.state = 5377;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,518,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5350;
	            this.groupingSetsClause();
	            this.state = 5355;
	            this._errHandler.sync(this);
	            let _alt = this._interp.adaptivePredict(this._input,515,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 5351;
	                    this.match(InceptorOracleParser.COMMA);
	                    this.state = 5352;
	                    this.groupingSetsClause(); 
	                }
	                this.state = 5357;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,515,this._ctx);
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5358;
	            this.rollupClause();
	            this.state = 5363;
	            this._errHandler.sync(this);
	            let _alt = this._interp.adaptivePredict(this._input,516,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 5359;
	                    this.match(InceptorOracleParser.COMMA);
	                    this.state = 5360;
	                    this.rollupClause(); 
	                }
	                this.state = 5365;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,516,this._ctx);
	            }

	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5366;
	            this.cubeClause();
	            this.state = 5371;
	            this._errHandler.sync(this);
	            let _alt = this._interp.adaptivePredict(this._input,517,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 5367;
	                    this.match(InceptorOracleParser.COMMA);
	                    this.state = 5368;
	                    this.cubeClause(); 
	                }
	                this.state = 5373;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,517,this._ctx);
	            }

	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5374;
	            this.groupByExpression();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 5375;
	            this.match(InceptorOracleParser.LPAREN);
	            this.state = 5376;
	            this.match(InceptorOracleParser.RPAREN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rollupClause() {
	    let localctx = new RollupClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 906, InceptorOracleParser.RULE_rollupClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5379;
	        this.match(InceptorOracleParser.KW_ROLLUP);
	        this.state = 5380;
	        this.match(InceptorOracleParser.LPAREN);
	        this.state = 5381;
	        this.ordinaryGroupingSet();
	        this.state = 5386;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===InceptorOracleParser.COMMA) {
	            this.state = 5382;
	            this.match(InceptorOracleParser.COMMA);
	            this.state = 5383;
	            this.ordinaryGroupingSet();
	            this.state = 5388;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 5389;
	        this.match(InceptorOracleParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cubeClause() {
	    let localctx = new CubeClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 908, InceptorOracleParser.RULE_cubeClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5391;
	        this.match(InceptorOracleParser.KW_CUBE);
	        this.state = 5392;
	        this.match(InceptorOracleParser.LPAREN);
	        this.state = 5393;
	        this.ordinaryGroupingSet();
	        this.state = 5398;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===InceptorOracleParser.COMMA) {
	            this.state = 5394;
	            this.match(InceptorOracleParser.COMMA);
	            this.state = 5395;
	            this.ordinaryGroupingSet();
	            this.state = 5400;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 5401;
	        this.match(InceptorOracleParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupingSetsClause() {
	    let localctx = new GroupingSetsClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 910, InceptorOracleParser.RULE_groupingSetsClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5403;
	        this.match(InceptorOracleParser.KW_GROUPING);
	        this.state = 5404;
	        this.match(InceptorOracleParser.KW_SETS);
	        this.state = 5405;
	        this.match(InceptorOracleParser.LPAREN);
	        this.state = 5406;
	        this.groupingSetExpression();
	        this.state = 5411;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===InceptorOracleParser.COMMA) {
	            this.state = 5407;
	            this.match(InceptorOracleParser.COMMA);
	            this.state = 5408;
	            this.groupingSetExpression();
	            this.state = 5413;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 5414;
	        this.match(InceptorOracleParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupByClause() {
	    let localctx = new GroupByClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 912, InceptorOracleParser.RULE_groupByClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5416;
	        this.match(InceptorOracleParser.KW_GROUP);
	        this.state = 5417;
	        this.match(InceptorOracleParser.KW_BY);
	        this.state = 5418;
	        this.groupByElements();
	        this.state = 5423;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===InceptorOracleParser.COMMA) {
	            this.state = 5419;
	            this.match(InceptorOracleParser.COMMA);
	            this.state = 5420;
	            this.groupByElements();
	            this.state = 5425;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupByExpression() {
	    let localctx = new GroupByExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 914, InceptorOracleParser.RULE_groupByExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5426;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	hiveDataOpStatement() {
	    let localctx = new HiveDataOpStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 916, InceptorOracleParser.RULE_hiveDataOpStatement);
	    try {
	        this.state = 5431;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case InceptorOracleParser.KW_LOAD:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5428;
	            this.loadStatement();
	            break;
	        case InceptorOracleParser.KW_EXPORT:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5429;
	            this.exportStatement();
	            break;
	        case InceptorOracleParser.KW_IMPORT:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5430;
	            this.importStatement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	loadStatement() {
	    let localctx = new LoadStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 918, InceptorOracleParser.RULE_loadStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5433;
	        this.match(InceptorOracleParser.KW_LOAD);
	        this.state = 5434;
	        this.match(InceptorOracleParser.KW_DATA);
	        this.state = 5436;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_LOCAL) {
	            this.state = 5435;
	            localctx.islocal = this.match(InceptorOracleParser.KW_LOCAL);
	        }

	        this.state = 5438;
	        this.match(InceptorOracleParser.KW_INPATH);

	        this.state = 5439;
	        localctx.path = this.match(InceptorOracleParser.StringLiteral);
	        this.state = 5441;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_OVERWRITE) {
	            this.state = 5440;
	            localctx.isoverwrite = this.match(InceptorOracleParser.KW_OVERWRITE);
	        }

	        this.state = 5443;
	        this.match(InceptorOracleParser.KW_INTO);
	        this.state = 5444;
	        this.match(InceptorOracleParser.KW_TABLE);

	        this.state = 5445;
	        localctx.tab = this.tableOrPartition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exportStatement() {
	    let localctx = new ExportStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 920, InceptorOracleParser.RULE_exportStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5447;
	        this.match(InceptorOracleParser.KW_EXPORT);
	        this.state = 5448;
	        this.match(InceptorOracleParser.KW_TABLE);

	        this.state = 5449;
	        localctx.tab = this.tableOrPartition();
	        this.state = 5450;
	        this.match(InceptorOracleParser.KW_TO);

	        this.state = 5451;
	        localctx.path = this.match(InceptorOracleParser.StringLiteral);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	importStatement() {
	    let localctx = new ImportStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 922, InceptorOracleParser.RULE_importStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5453;
	        this.match(InceptorOracleParser.KW_IMPORT);
	        this.state = 5459;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_TABLE || _la===InceptorOracleParser.KW_EXTERNAL) {
	            this.state = 5455;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_EXTERNAL) {
	                this.state = 5454;
	                localctx.ext = this.match(InceptorOracleParser.KW_EXTERNAL);
	            }

	            this.state = 5457;
	            this.match(InceptorOracleParser.KW_TABLE);

	            this.state = 5458;
	            localctx.tab = this.tableOrPartition();
	        }

	        this.state = 5461;
	        this.match(InceptorOracleParser.KW_FROM);

	        this.state = 5462;
	        localctx.path = this.match(InceptorOracleParser.StringLiteral);
	        this.state = 5464;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_LOCATION) {
	            this.state = 5463;
	            this.tableLocation();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createHyperbaseIndexStatement() {
	    let localctx = new CreateHyperbaseIndexStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 924, InceptorOracleParser.RULE_createHyperbaseIndexStatement);
	    var _la = 0; // Token type
	    try {
	        this.state = 5500;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,531,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5466;
	            this.match(InceptorOracleParser.KW_CREATE);
	            this.state = 5467;
	            this.match(InceptorOracleParser.KW_LOCAL);
	            this.state = 5468;
	            this.match(InceptorOracleParser.KW_INDEX);
	            this.state = 5469;
	            localctx.indexName = this.identifier();
	            this.state = 5470;
	            this.match(InceptorOracleParser.KW_ON);
	            this.state = 5471;
	            this.tableName();
	            this.state = 5472;
	            this.match(InceptorOracleParser.LPAREN);
	            this.state = 5473;
	            localctx.indexedCols = this.hyperbaseColumnNameList();
	            this.state = 5474;
	            this.match(InceptorOracleParser.RPAREN);
	            this.state = 5476;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_ATTACH) {
	                this.state = 5475;
	                this.attachColumn();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5478;
	            this.match(InceptorOracleParser.KW_CREATE);
	            this.state = 5479;
	            this.match(InceptorOracleParser.KW_GLOBAL);
	            this.state = 5480;
	            this.match(InceptorOracleParser.KW_INDEX);
	            this.state = 5481;
	            localctx.indexName = this.identifier();
	            this.state = 5482;
	            this.match(InceptorOracleParser.KW_ON);
	            this.state = 5483;
	            this.tableName();
	            this.state = 5484;
	            this.match(InceptorOracleParser.LPAREN);
	            this.state = 5485;
	            localctx.indexedCols = this.hyperbaseColumnNameList();
	            this.state = 5486;
	            this.match(InceptorOracleParser.RPAREN);
	            this.state = 5488;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_ATTACH) {
	                this.state = 5487;
	                this.attachColumn();
	            }

	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5490;
	            this.match(InceptorOracleParser.KW_CREATE);
	            this.state = 5491;
	            this.match(InceptorOracleParser.KW_FULLTEXT);
	            this.state = 5492;
	            this.match(InceptorOracleParser.KW_INDEX);
	            this.state = 5493;
	            this.match(InceptorOracleParser.KW_ON);
	            this.state = 5494;
	            this.tableName();
	            this.state = 5495;
	            this.match(InceptorOracleParser.LPAREN);
	            this.state = 5496;
	            this.fulltextColsList();
	            this.state = 5497;
	            this.match(InceptorOracleParser.RPAREN);
	            this.state = 5498;
	            this.shardNumber();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rebuildHolodeskGlobalIndexStatement() {
	    let localctx = new RebuildHolodeskGlobalIndexStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 926, InceptorOracleParser.RULE_rebuildHolodeskGlobalIndexStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5502;
	        this.match(InceptorOracleParser.KW_REBUILD);
	        this.state = 5503;
	        this.match(InceptorOracleParser.KW_GLOBAL);
	        this.state = 5504;
	        this.match(InceptorOracleParser.KW_INDEX);
	        this.state = 5505;
	        localctx.indexName = this.identifier();
	        this.state = 5506;
	        this.match(InceptorOracleParser.KW_ON);
	        this.state = 5507;
	        this.tableName();
	        this.state = 5508;
	        this.match(InceptorOracleParser.LPAREN);
	        this.state = 5509;
	        localctx.indexedCols = this.hyperbaseColumnNameList();
	        this.state = 5510;
	        this.match(InceptorOracleParser.RPAREN);
	        this.state = 5512;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_ATTACH) {
	            this.state = 5511;
	            this.attachColumn();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fulltextColsList() {
	    let localctx = new FulltextColsListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 928, InceptorOracleParser.RULE_fulltextColsList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5514;
	        this.fulltextIndexAndProps();
	        this.state = 5519;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===InceptorOracleParser.COMMA) {
	            this.state = 5515;
	            this.match(InceptorOracleParser.COMMA);
	            this.state = 5516;
	            this.fulltextIndexAndProps();
	            this.state = 5521;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fulltextIndexAndProps() {
	    let localctx = new FulltextIndexAndPropsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 930, InceptorOracleParser.RULE_fulltextIndexAndProps);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5522;
	        localctx.coln = this.identifier();
	        this.state = 5524;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_DOCVALUES) {
	            this.state = 5523;
	            this.fulltextIndexProps();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fulltextIndexProps() {
	    let localctx = new FulltextIndexPropsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 932, InceptorOracleParser.RULE_fulltextIndexProps);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5526;
	        this.match(InceptorOracleParser.KW_DOCVALUES);
	        this.state = 5527;
	        this.match(InceptorOracleParser.LSQUARE);
	        this.state = 5528;
	        this.booleanValue();
	        this.state = 5529;
	        this.match(InceptorOracleParser.RSQUARE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	shardNumber() {
	    let localctx = new ShardNumberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 934, InceptorOracleParser.RULE_shardNumber);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5531;
	        this.match(InceptorOracleParser.KW_SHARD);
	        this.state = 5532;
	        this.match(InceptorOracleParser.KW_NUM);
	        this.state = 5533;
	        this.match(InceptorOracleParser.Number);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropHyperbaseIndexStatement() {
	    let localctx = new DropHyperbaseIndexStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 936, InceptorOracleParser.RULE_dropHyperbaseIndexStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5535;
	        this.match(InceptorOracleParser.KW_DROP);
	        this.state = 5536;
	        this.match(InceptorOracleParser.KW_INDEX);
	        this.state = 5538;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_IF) {
	            this.state = 5537;
	            this.ifExists();
	        }

	        this.state = 5540;
	        localctx.indexName = this.identifier();
	        this.state = 5541;
	        this.match(InceptorOracleParser.KW_ON);
	        this.state = 5542;
	        localctx.tab = this.tableName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	hyperbaseColumnNameList() {
	    let localctx = new HyperbaseColumnNameListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 938, InceptorOracleParser.RULE_hyperbaseColumnNameList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5544;
	        this.indexWithLength();
	        this.state = 5549;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===InceptorOracleParser.COMMA) {
	            this.state = 5545;
	            this.match(InceptorOracleParser.COMMA);
	            this.state = 5546;
	            this.indexWithLength();
	            this.state = 5551;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	indexWithLength() {
	    let localctx = new IndexWithLengthContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 940, InceptorOracleParser.RULE_indexWithLength);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5552;
	        localctx.coln = this.identifier();
	        this.state = 5554;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_SEGMENT || _la===InceptorOracleParser.LPAREN) {
	            this.state = 5553;
	            this.segmentLength();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	segmentLength() {
	    let localctx = new SegmentLengthContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 942, InceptorOracleParser.RULE_segmentLength);
	    try {
	        this.state = 5562;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case InceptorOracleParser.KW_SEGMENT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5556;
	            this.match(InceptorOracleParser.KW_SEGMENT);
	            this.state = 5557;
	            this.match(InceptorOracleParser.KW_LENGTH);
	            this.state = 5558;
	            this.match(InceptorOracleParser.Number);
	            break;
	        case InceptorOracleParser.LPAREN:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5559;
	            this.match(InceptorOracleParser.LPAREN);
	            this.state = 5560;
	            this.match(InceptorOracleParser.Number);
	            this.state = 5561;
	            this.match(InceptorOracleParser.RPAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attachColumn() {
	    let localctx = new AttachColumnContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 944, InceptorOracleParser.RULE_attachColumn);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5564;
	        this.match(InceptorOracleParser.KW_ATTACH);
	        this.state = 5565;
	        this.match(InceptorOracleParser.LPAREN);
	        this.state = 5566;
	        localctx.colNames = this.columnNameList();
	        this.state = 5567;
	        this.match(InceptorOracleParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mandarinStatement() {
	    let localctx = new MandarinStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 946, InceptorOracleParser.RULE_mandarinStatement);
	    try {
	        this.state = 5574;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,539,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5569;
	            this.hiveDataOpStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5570;
	            this.ddlStatement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5571;
	            this.dclStatement();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5572;
	            this.queryStatementExpression();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 5573;
	            this.sqlCallStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectStatement() {
	    let localctx = new SelectStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 948, InceptorOracleParser.RULE_selectStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5576;
	        this.selectClause();
	        this.state = 5589;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_INTO || _la===InceptorOracleParser.KW_BULK) {
	            this.state = 5578;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_BULK) {
	                this.state = 5577;
	                this.bulkCollect();
	            }

	            this.state = 5580;
	            localctx.into = this.match(InceptorOracleParser.KW_INTO);
	            this.state = 5581;
	            this.leftValue();
	            this.state = 5586;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===InceptorOracleParser.COMMA) {
	                this.state = 5582;
	                this.match(InceptorOracleParser.COMMA);
	                this.state = 5583;
	                this.leftValue();
	                this.state = 5588;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 5591;
	        this.fromClause();
	        this.state = 5593;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_WHERE) {
	            this.state = 5592;
	            this.whereClause();
	        }

	        this.state = 5596;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,544,this._ctx);
	        if(la_===1) {
	            this.state = 5595;
	            this.hierarchicalQueryClause();

	        }
	        this.state = 5599;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,545,this._ctx);
	        if(la_===1) {
	            this.state = 5598;
	            this.groupByClause();

	        }
	        this.state = 5602;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_HAVING) {
	            this.state = 5601;
	            this.havingClause();
	        }

	        this.state = 5605;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_QUALIFY) {
	            this.state = 5604;
	            this.qualifyClause();
	        }

	        this.state = 5608;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,548,this._ctx);
	        if(la_===1) {
	            this.state = 5607;
	            this.orderByClause();

	        }
	        this.state = 5611;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,549,this._ctx);
	        if(la_===1) {
	            this.state = 5610;
	            this.clusterByClause();

	        }
	        this.state = 5614;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,550,this._ctx);
	        if(la_===1) {
	            this.state = 5613;
	            this.distributeByClause();

	        }
	        this.state = 5617;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,551,this._ctx);
	        if(la_===1) {
	            this.state = 5616;
	            this.sortByClause();

	        }
	        this.state = 5620;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_WINDOW) {
	            this.state = 5619;
	            this.window_clause();
	        }

	        this.state = 5623;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,553,this._ctx);
	        if(la_===1) {
	            this.state = 5622;
	            this.stream_window_clause();

	        }
	        this.state = 5626;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,554,this._ctx);
	        if(la_===1) {
	            this.state = 5625;
	            this.limitClause();

	        }
	        this.state = 5629;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,555,this._ctx);
	        if(la_===1) {
	            this.state = 5628;
	            this.forUpdateClause();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subSelectStatement() {
	    let localctx = new SubSelectStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 950, InceptorOracleParser.RULE_subSelectStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5631;
	        this.selectClause();
	        this.state = 5644;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_INTO || _la===InceptorOracleParser.KW_BULK) {
	            this.state = 5633;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_BULK) {
	                this.state = 5632;
	                this.bulkCollect();
	            }

	            this.state = 5635;
	            localctx.into = this.match(InceptorOracleParser.KW_INTO);
	            this.state = 5636;
	            this.leftValue();
	            this.state = 5641;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===InceptorOracleParser.COMMA) {
	                this.state = 5637;
	                this.match(InceptorOracleParser.COMMA);
	                this.state = 5638;
	                this.leftValue();
	                this.state = 5643;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 5646;
	        this.fromClause();
	        this.state = 5648;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_WHERE) {
	            this.state = 5647;
	            this.whereClause();
	        }

	        this.state = 5651;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_START || _la===InceptorOracleParser.KW_CONNECT) {
	            this.state = 5650;
	            this.hierarchicalQueryClause();
	        }

	        this.state = 5654;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_GROUP) {
	            this.state = 5653;
	            this.groupByClause();
	        }

	        this.state = 5657;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_HAVING) {
	            this.state = 5656;
	            this.havingClause();
	        }

	        this.state = 5660;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_QUALIFY) {
	            this.state = 5659;
	            this.qualifyClause();
	        }

	        this.state = 5663;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_ORDER) {
	            this.state = 5662;
	            this.orderByClause();
	        }

	        this.state = 5666;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_CLUSTER) {
	            this.state = 5665;
	            this.clusterByClause();
	        }

	        this.state = 5669;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_DISTRIBUTE) {
	            this.state = 5668;
	            this.distributeByClause();
	        }

	        this.state = 5672;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_SORT) {
	            this.state = 5671;
	            this.sortByClause();
	        }

	        this.state = 5675;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_WINDOW) {
	            this.state = 5674;
	            this.window_clause();
	        }

	        this.state = 5678;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_STREAMWINDOW) {
	            this.state = 5677;
	            this.stream_window_clause();
	        }

	        this.state = 5681;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_LIMIT || _la===InceptorOracleParser.KW_FETCH || _la===InceptorOracleParser.KW_OFFSET) {
	            this.state = 5680;
	            this.limitClause();
	        }

	        this.state = 5684;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_FOR) {
	            this.state = 5683;
	            this.forUpdateClause();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	explicitInsertStatement() {
	    let localctx = new ExplicitInsertStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 952, InceptorOracleParser.RULE_explicitInsertStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5686;
	        this.match(InceptorOracleParser.KW_INSERT);
	        this.state = 5687;
	        this.match(InceptorOracleParser.KW_INTO);
	        this.state = 5689;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,572,this._ctx);
	        if(la_===1) {
	            this.state = 5688;
	            this.match(InceptorOracleParser.KW_TABLE);

	        }
	        this.state = 5691;
	        this.tableOrPartition();
	        this.state = 5692;
	        this.valuesClause();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	batchInsertStatement() {
	    let localctx = new BatchInsertStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 954, InceptorOracleParser.RULE_batchInsertStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5694;
	        this.match(InceptorOracleParser.KW_BATCH_INSERT);
	        this.state = 5695;
	        this.match(InceptorOracleParser.KW_INTO);
	        this.state = 5696;
	        this.tableOrPartition();
	        this.state = 5697;
	        this.batchValuesClause();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	withClause() {
	    let localctx = new WithClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 956, InceptorOracleParser.RULE_withClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5699;
	        this.match(InceptorOracleParser.KW_WITH);
	        this.state = 5701; 
	        this._errHandler.sync(this);
	        let _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 5700;
	        		this.withClauseElement();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 5703; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,573, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 5705;
	        this.queryStatementExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	withClauseElement() {
	    let localctx = new WithClauseElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 958, InceptorOracleParser.RULE_withClauseElement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5708;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_WITH) {
	            this.state = 5707;
	            this.match(InceptorOracleParser.KW_WITH);
	        }

	        this.state = 5710;
	        this.match(InceptorOracleParser.Identifier);
	        this.state = 5711;
	        this.match(InceptorOracleParser.KW_AS);
	        this.state = 5712;
	        this.match(InceptorOracleParser.LPAREN);
	        this.state = 5713;
	        this.queryStatementExpression();
	        this.state = 5714;
	        this.match(InceptorOracleParser.RPAREN);
	        this.state = 5716;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.COMMA) {
	            this.state = 5715;
	            this.match(InceptorOracleParser.COMMA);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	regular_body() {
	    let localctx = new Regular_bodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 960, InceptorOracleParser.RULE_regular_body);
	    var _la = 0; // Token type
	    try {
	        this.state = 5764;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,588,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5718;
	            this.insertClause();
	            this.state = 5721;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,576,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 5719;
	                this.withClause();
	                break;

	            case 2:
	                this.state = 5720;
	                this.queryStatementExpressionPlus();
	                break;

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5723;
	            this.insertClause();
	            this.state = 5724;
	            this.selectClause();
	            this.state = 5725;
	            this.fromClause();
	            this.state = 5727;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_WHERE) {
	                this.state = 5726;
	                this.whereClause();
	            }

	            this.state = 5730;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,578,this._ctx);
	            if(la_===1) {
	                this.state = 5729;
	                this.hierarchicalQueryClause();

	            }
	            this.state = 5733;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,579,this._ctx);
	            if(la_===1) {
	                this.state = 5732;
	                this.groupByClause();

	            }
	            this.state = 5736;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_HAVING) {
	                this.state = 5735;
	                this.havingClause();
	            }

	            this.state = 5739;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_QUALIFY) {
	                this.state = 5738;
	                this.qualifyClause();
	            }

	            this.state = 5742;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,582,this._ctx);
	            if(la_===1) {
	                this.state = 5741;
	                this.orderByClause();

	            }
	            this.state = 5745;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,583,this._ctx);
	            if(la_===1) {
	                this.state = 5744;
	                this.clusterByClause();

	            }
	            this.state = 5748;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,584,this._ctx);
	            if(la_===1) {
	                this.state = 5747;
	                this.distributeByClause();

	            }
	            this.state = 5751;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,585,this._ctx);
	            if(la_===1) {
	                this.state = 5750;
	                this.sortByClause();

	            }
	            this.state = 5754;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_WINDOW) {
	                this.state = 5753;
	                this.window_clause();
	            }

	            this.state = 5757;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,587,this._ctx);
	            if(la_===1) {
	                this.state = 5756;
	                this.limitClause();

	            }
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5759;
	            this.selectStatement();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5760;
	            this.crudStatement();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 5761;
	            this.explicitInsertStatement();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 5762;
	            this.batchInsertStatement();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 5763;
	            this.graphPathStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bulkCollect() {
	    let localctx = new BulkCollectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 962, InceptorOracleParser.RULE_bulkCollect);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5766;
	        this.match(InceptorOracleParser.KW_BULK);
	        this.state = 5767;
	        this.match(InceptorOracleParser.KW_COLLECT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	body() {
	    let localctx = new BodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 964, InceptorOracleParser.RULE_body);
	    var _la = 0; // Token type
	    try {
	        this.state = 5850;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case InceptorOracleParser.KW_INSERT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5769;
	            this.insertClause();
	            this.state = 5770;
	            this.selectClause();
	            this.state = 5772;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,589,this._ctx);
	            if(la_===1) {
	                this.state = 5771;
	                this.lateralView();

	            }
	            this.state = 5775;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_WHERE) {
	                this.state = 5774;
	                this.whereClause();
	            }

	            this.state = 5778;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,591,this._ctx);
	            if(la_===1) {
	                this.state = 5777;
	                this.hierarchicalQueryClause();

	            }
	            this.state = 5781;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,592,this._ctx);
	            if(la_===1) {
	                this.state = 5780;
	                this.groupByClause();

	            }
	            this.state = 5784;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_HAVING) {
	                this.state = 5783;
	                this.havingClause();
	            }

	            this.state = 5787;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_QUALIFY) {
	                this.state = 5786;
	                this.qualifyClause();
	            }

	            this.state = 5790;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,595,this._ctx);
	            if(la_===1) {
	                this.state = 5789;
	                this.orderByClause();

	            }
	            this.state = 5793;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,596,this._ctx);
	            if(la_===1) {
	                this.state = 5792;
	                this.clusterByClause();

	            }
	            this.state = 5796;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,597,this._ctx);
	            if(la_===1) {
	                this.state = 5795;
	                this.distributeByClause();

	            }
	            this.state = 5799;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,598,this._ctx);
	            if(la_===1) {
	                this.state = 5798;
	                this.sortByClause();

	            }
	            this.state = 5802;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_WINDOW) {
	                this.state = 5801;
	                this.window_clause();
	            }

	            this.state = 5805;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,600,this._ctx);
	            if(la_===1) {
	                this.state = 5804;
	                this.stream_window_clause();

	            }
	            this.state = 5808;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,601,this._ctx);
	            if(la_===1) {
	                this.state = 5807;
	                this.limitClause();

	            }
	            break;
	        case InceptorOracleParser.KW_SELECT:
	        case InceptorOracleParser.KW_MAP:
	        case InceptorOracleParser.KW_REDUCE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5810;
	            this.selectClause();
	            this.state = 5812;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,602,this._ctx);
	            if(la_===1) {
	                this.state = 5811;
	                this.lateralView();

	            }
	            this.state = 5815;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_WHERE) {
	                this.state = 5814;
	                this.whereClause();
	            }

	            this.state = 5818;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,604,this._ctx);
	            if(la_===1) {
	                this.state = 5817;
	                this.hierarchicalQueryClause();

	            }
	            this.state = 5821;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,605,this._ctx);
	            if(la_===1) {
	                this.state = 5820;
	                this.groupByClause();

	            }
	            this.state = 5824;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_HAVING) {
	                this.state = 5823;
	                this.havingClause();
	            }

	            this.state = 5827;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_QUALIFY) {
	                this.state = 5826;
	                this.qualifyClause();
	            }

	            this.state = 5830;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,608,this._ctx);
	            if(la_===1) {
	                this.state = 5829;
	                this.orderByClause();

	            }
	            this.state = 5833;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,609,this._ctx);
	            if(la_===1) {
	                this.state = 5832;
	                this.clusterByClause();

	            }
	            this.state = 5836;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,610,this._ctx);
	            if(la_===1) {
	                this.state = 5835;
	                this.distributeByClause();

	            }
	            this.state = 5839;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,611,this._ctx);
	            if(la_===1) {
	                this.state = 5838;
	                this.sortByClause();

	            }
	            this.state = 5842;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_WINDOW) {
	                this.state = 5841;
	                this.window_clause();
	            }

	            this.state = 5845;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,613,this._ctx);
	            if(la_===1) {
	                this.state = 5844;
	                this.stream_window_clause();

	            }
	            this.state = 5848;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,614,this._ctx);
	            if(la_===1) {
	                this.state = 5847;
	                this.limitClause();

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertClause() {
	    let localctx = new InsertClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 966, InceptorOracleParser.RULE_insertClause);
	    var _la = 0; // Token type
	    try {
	        this.state = 5864;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,618,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5852;
	            this.match(InceptorOracleParser.KW_INSERT);
	            this.state = 5853;
	            this.match(InceptorOracleParser.KW_OVERWRITE);
	            this.state = 5854;
	            this.destination();
	            this.state = 5856;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_IF) {
	                this.state = 5855;
	                this.ifNotExists();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5858;
	            this.match(InceptorOracleParser.KW_INSERT);
	            this.state = 5859;
	            this.match(InceptorOracleParser.KW_INTO);
	            this.state = 5861;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,617,this._ctx);
	            if(la_===1) {
	                this.state = 5860;
	                this.match(InceptorOracleParser.KW_TABLE);

	            }
	            this.state = 5863;
	            this.tableOrPartition();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whereClause() {
	    let localctx = new WhereClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 968, InceptorOracleParser.RULE_whereClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5866;
	        this.match(InceptorOracleParser.KW_WHERE);
	        this.state = 5867;
	        this.searchCondition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	qualifyClause() {
	    let localctx = new QualifyClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 970, InceptorOracleParser.RULE_qualifyClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5869;
	        this.match(InceptorOracleParser.KW_QUALIFY);
	        this.state = 5870;
	        this.searchCondition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	havingClause() {
	    let localctx = new HavingClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 972, InceptorOracleParser.RULE_havingClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5872;
	        this.match(InceptorOracleParser.KW_HAVING);
	        this.state = 5873;
	        this.havingCondition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	havingCondition() {
	    let localctx = new HavingConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 974, InceptorOracleParser.RULE_havingCondition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5875;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	valuesClause() {
	    let localctx = new ValuesClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 976, InceptorOracleParser.RULE_valuesClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5877;
	        this.match(InceptorOracleParser.KW_VALUES);
	        this.state = 5878;
	        this.valuesRow();
	        this.state = 5883;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===InceptorOracleParser.COMMA) {
	            this.state = 5879;
	            this.match(InceptorOracleParser.COMMA);
	            this.state = 5880;
	            this.valuesRow();
	            this.state = 5885;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	valuesRow() {
	    let localctx = new ValuesRowContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 978, InceptorOracleParser.RULE_valuesRow);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5886;
	        this.match(InceptorOracleParser.LPAREN);
	        this.state = 5887;
	        this.expression();
	        this.state = 5892;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===InceptorOracleParser.COMMA) {
	            this.state = 5888;
	            this.match(InceptorOracleParser.COMMA);
	            this.state = 5889;
	            this.expression();
	            this.state = 5894;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 5895;
	        this.match(InceptorOracleParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	batchValuesRow() {
	    let localctx = new BatchValuesRowContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 980, InceptorOracleParser.RULE_batchValuesRow);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5897;
	        this.match(InceptorOracleParser.KW_VALUES);
	        this.state = 5898;
	        this.valuesRow();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	batchValuesClause() {
	    let localctx = new BatchValuesClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 982, InceptorOracleParser.RULE_batchValuesClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5900;
	        this.match(InceptorOracleParser.KW_BATCH_VALUES);
	        this.state = 5901;
	        this.match(InceptorOracleParser.LPAREN);
	        this.state = 5902;
	        this.batchValuesRow();
	        this.state = 5907;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===InceptorOracleParser.COMMA) {
	            this.state = 5903;
	            this.match(InceptorOracleParser.COMMA);
	            this.state = 5904;
	            this.batchValuesRow();
	            this.state = 5909;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 5910;
	        this.match(InceptorOracleParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	searchCondition() {
	    let localctx = new SearchConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 984, InceptorOracleParser.RULE_searchCondition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5912;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	hierarchicalQueryClause() {
	    let localctx = new HierarchicalQueryClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 986, InceptorOracleParser.RULE_hierarchicalQueryClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5915;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_START) {
	            this.state = 5914;
	            this.startWithCondition();
	        }

	        this.state = 5917;
	        this.connectByCondition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	startWithCondition() {
	    let localctx = new StartWithConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 988, InceptorOracleParser.RULE_startWithCondition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5919;
	        this.match(InceptorOracleParser.KW_START);
	        this.state = 5920;
	        this.match(InceptorOracleParser.KW_WITH);
	        this.state = 5921;
	        this.searchCondition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	connectByCondition() {
	    let localctx = new ConnectByConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 990, InceptorOracleParser.RULE_connectByCondition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5923;
	        this.match(InceptorOracleParser.KW_CONNECT);
	        this.state = 5924;
	        this.match(InceptorOracleParser.KW_BY);
	        this.state = 5926;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,623,this._ctx);
	        if(la_===1) {
	            this.state = 5925;
	            this.nocycle();

	        }
	        this.state = 5928;
	        this.searchCondition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nocycle() {
	    let localctx = new NocycleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 992, InceptorOracleParser.RULE_nocycle);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5930;
	        this.match(InceptorOracleParser.KW_NOCYCLE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	destination() {
	    let localctx = new DestinationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 994, InceptorOracleParser.RULE_destination);
	    var _la = 0; // Token type
	    try {
	        this.state = 5951;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case InceptorOracleParser.KW_LOCAL:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5932;
	            this.match(InceptorOracleParser.KW_LOCAL);
	            this.state = 5933;
	            this.match(InceptorOracleParser.KW_DIRECTORY);
	            this.state = 5934;
	            this.match(InceptorOracleParser.StringLiteral);
	            this.state = 5936;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_ROW) {
	                this.state = 5935;
	                this.tableRowFormat();
	            }

	            this.state = 5939;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_STORED) {
	                this.state = 5938;
	                this.tableFileFormat();
	            }

	            break;
	        case InceptorOracleParser.KW_DIRECTORY:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5941;
	            this.match(InceptorOracleParser.KW_DIRECTORY);
	            this.state = 5942;
	            this.match(InceptorOracleParser.StringLiteral);
	            this.state = 5944;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_ROW) {
	                this.state = 5943;
	                this.tableRowFormat();
	            }

	            this.state = 5947;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_STORED) {
	                this.state = 5946;
	                this.tableFileFormat();
	            }

	            break;
	        case InceptorOracleParser.KW_TABLE:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5949;
	            this.match(InceptorOracleParser.KW_TABLE);
	            this.state = 5950;
	            this.tableOrPartition();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	queryStatementExpression() {
	    let localctx = new QueryStatementExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 996, InceptorOracleParser.RULE_queryStatementExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5953;
	        this.queryStatementMayInParenthese();
	        this.state = 5959;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,629,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 5954;
	                this.queryOperator();
	                this.state = 5955;
	                this.queryStatementMayInParenthese(); 
	            }
	            this.state = 5961;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,629,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	queryStatementExpressionPlus() {
	    let localctx = new QueryStatementExpressionPlusContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 998, InceptorOracleParser.RULE_queryStatementExpressionPlus);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5962;
	        this.queryStatementMayInParenthese();
	        this.state = 5966; 
	        this._errHandler.sync(this);
	        let _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 5963;
	        		this.queryOperator();
	        		this.state = 5964;
	        		this.queryStatementMayInParenthese();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 5968; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,630, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	queryStatementMayInParenthese() {
	    let localctx = new QueryStatementMayInParentheseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1000, InceptorOracleParser.RULE_queryStatementMayInParenthese);
	    try {
	        this.state = 5975;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case InceptorOracleParser.KW_FROM:
	        case InceptorOracleParser.KW_SELECT:
	        case InceptorOracleParser.KW_INSERT:
	        case InceptorOracleParser.KW_BATCH_INSERT:
	        case InceptorOracleParser.KW_MAP:
	        case InceptorOracleParser.KW_REDUCE:
	        case InceptorOracleParser.KW_WITH:
	        case InceptorOracleParser.KW_DELETE:
	        case InceptorOracleParser.KW_UPDATE:
	        case InceptorOracleParser.KW_BATCHUPDATE:
	        case InceptorOracleParser.KW_MERGE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5970;
	            this.queryStatement();
	            break;
	        case InceptorOracleParser.LPAREN:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5971;
	            this.match(InceptorOracleParser.LPAREN);
	            this.state = 5972;
	            this.queryStatement();
	            this.state = 5973;
	            this.match(InceptorOracleParser.RPAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	queryOperator() {
	    let localctx = new QueryOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1002, InceptorOracleParser.RULE_queryOperator);
	    var _la = 0; // Token type
	    try {
	        this.state = 5989;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case InceptorOracleParser.KW_UNION:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5977;
	            this.match(InceptorOracleParser.KW_UNION);
	            this.state = 5979;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_ALL) {
	                this.state = 5978;
	                this.match(InceptorOracleParser.KW_ALL);
	            }

	            break;
	        case InceptorOracleParser.KW_INTERSECT:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5981;
	            this.match(InceptorOracleParser.KW_INTERSECT);
	            this.state = 5983;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_ALL) {
	                this.state = 5982;
	                this.match(InceptorOracleParser.KW_ALL);
	            }

	            break;
	        case InceptorOracleParser.KW_EXCEPT:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5985;
	            this.match(InceptorOracleParser.KW_EXCEPT);
	            this.state = 5987;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_ALL) {
	                this.state = 5986;
	                this.match(InceptorOracleParser.KW_ALL);
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	queryStatement() {
	    let localctx = new QueryStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1004, InceptorOracleParser.RULE_queryStatement);
	    try {
	        this.state = 5999;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case InceptorOracleParser.KW_FROM:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5991;
	            this.fromClause();
	            this.state = 5993; 
	            this._errHandler.sync(this);
	            let _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 5992;
	            		this.body();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 5995; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,636, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;
	        case InceptorOracleParser.KW_SELECT:
	        case InceptorOracleParser.KW_INSERT:
	        case InceptorOracleParser.KW_BATCH_INSERT:
	        case InceptorOracleParser.KW_MAP:
	        case InceptorOracleParser.KW_REDUCE:
	        case InceptorOracleParser.KW_DELETE:
	        case InceptorOracleParser.KW_UPDATE:
	        case InceptorOracleParser.KW_BATCHUPDATE:
	        case InceptorOracleParser.KW_MERGE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5997;
	            this.regular_body();
	            break;
	        case InceptorOracleParser.KW_WITH:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5998;
	            this.withClause();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableRangePartition() {
	    let localctx = new TableRangePartitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1006, InceptorOracleParser.RULE_tableRangePartition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6001;
	        this.match(InceptorOracleParser.KW_PARTITIONED);
	        this.state = 6002;
	        this.match(InceptorOracleParser.KW_BY);
	        this.state = 6003;
	        this.match(InceptorOracleParser.KW_RANGE);
	        this.state = 6004;
	        this.match(InceptorOracleParser.LPAREN);
	        this.state = 6005;
	        this.columnList();
	        this.state = 6006;
	        this.match(InceptorOracleParser.RPAREN);
	        this.state = 6008;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_INTERVAL) {
	            this.state = 6007;
	            this.intervalPartitionValue();
	        }

	        this.state = 6014;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.LPAREN) {
	            this.state = 6010;
	            this.match(InceptorOracleParser.LPAREN);
	            this.state = 6011;
	            this.rangePartitionList();
	            this.state = 6012;
	            this.match(InceptorOracleParser.RPAREN);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	intervalPartitionValue() {
	    let localctx = new IntervalPartitionValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1008, InceptorOracleParser.RULE_intervalPartitionValue);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6016;
	        this.match(InceptorOracleParser.KW_INTERVAL);
	        this.state = 6017;
	        this.match(InceptorOracleParser.LPAREN);
	        this.state = 6020;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,640,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 6018;
	            localctx.intervalConst = this.constant();
	            break;

	        case 2:
	            this.state = 6019;
	            this.normfunction();
	            break;

	        }
	        this.state = 6022;
	        this.match(InceptorOracleParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rangePartitionList() {
	    let localctx = new RangePartitionListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1010, InceptorOracleParser.RULE_rangePartitionList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6024;
	        this.rangePartition();
	        this.state = 6029;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===InceptorOracleParser.COMMA) {
	            this.state = 6025;
	            this.match(InceptorOracleParser.COMMA);
	            this.state = 6026;
	            this.rangePartition();
	            this.state = 6031;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rangePartition() {
	    let localctx = new RangePartitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1012, InceptorOracleParser.RULE_rangePartition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6032;
	        this.match(InceptorOracleParser.KW_PARTITION);
	        this.state = 6034;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,642,this._ctx);
	        if(la_===1) {
	            this.state = 6033;
	            this.identifier();

	        }
	        this.state = 6036;
	        this.rangeValues();
	        this.state = 6038;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 122)) & ~0x1f) == 0 && ((1 << (_la - 122)) & ((1 << (InceptorOracleParser.KW_TABLESPACE - 122)) | (1 << (InceptorOracleParser.KW_PCTFREE - 122)) | (1 << (InceptorOracleParser.KW_PCTUSED - 122)) | (1 << (InceptorOracleParser.KW_INITRANS - 122)) | (1 << (InceptorOracleParser.KW_MAXTRANS - 122)) | (1 << (InceptorOracleParser.KW_STORAGE - 122)))) !== 0)) {
	            this.state = 6037;
	            this.tablePartitionDesc();
	        }

	        this.state = 6041;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,644,this._ctx);
	        if(la_===1) {
	            this.state = 6040;
	            this.partitionLocation();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rangeValues() {
	    let localctx = new RangeValuesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1014, InceptorOracleParser.RULE_rangeValues);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6043;
	        this.match(InceptorOracleParser.KW_VALUES);
	        this.state = 6044;
	        this.match(InceptorOracleParser.KW_LESS);
	        this.state = 6045;
	        this.match(InceptorOracleParser.KW_THAN);
	        this.state = 6046;
	        this.match(InceptorOracleParser.LPAREN);
	        this.state = 6047;
	        this.constant();
	        this.state = 6052;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===InceptorOracleParser.COMMA) {
	            this.state = 6048;
	            this.match(InceptorOracleParser.COMMA);
	            this.state = 6049;
	            this.constant();
	            this.state = 6054;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 6055;
	        this.match(InceptorOracleParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tablePartitionDesc() {
	    let localctx = new TablePartitionDescContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1016, InceptorOracleParser.RULE_tablePartitionDesc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6057;
	        this.segmentAttributesClause();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	segmentAttributesClause() {
	    let localctx = new SegmentAttributesClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1018, InceptorOracleParser.RULE_segmentAttributesClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6060; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 6059;
	            this.segmentAttribute();
	            this.state = 6062; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(((((_la - 122)) & ~0x1f) == 0 && ((1 << (_la - 122)) & ((1 << (InceptorOracleParser.KW_TABLESPACE - 122)) | (1 << (InceptorOracleParser.KW_PCTFREE - 122)) | (1 << (InceptorOracleParser.KW_PCTUSED - 122)) | (1 << (InceptorOracleParser.KW_INITRANS - 122)) | (1 << (InceptorOracleParser.KW_MAXTRANS - 122)) | (1 << (InceptorOracleParser.KW_STORAGE - 122)))) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	segmentAttribute() {
	    let localctx = new SegmentAttributeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1020, InceptorOracleParser.RULE_segmentAttribute);
	    try {
	        this.state = 6067;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case InceptorOracleParser.KW_PCTFREE:
	        case InceptorOracleParser.KW_PCTUSED:
	        case InceptorOracleParser.KW_INITRANS:
	        case InceptorOracleParser.KW_MAXTRANS:
	        case InceptorOracleParser.KW_STORAGE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6064;
	            this.physicalAttributesClause();
	            break;
	        case InceptorOracleParser.KW_TABLESPACE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6065;
	            this.match(InceptorOracleParser.KW_TABLESPACE);
	            this.state = 6066;
	            this.identifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	physicalAttributesClause() {
	    let localctx = new PhysicalAttributesClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1022, InceptorOracleParser.RULE_physicalAttributesClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6070; 
	        this._errHandler.sync(this);
	        let _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 6069;
	        		this.physicalAttribute();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 6072; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,648, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	physicalAttribute() {
	    let localctx = new PhysicalAttributeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1024, InceptorOracleParser.RULE_physicalAttribute);
	    try {
	        this.state = 6083;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case InceptorOracleParser.KW_PCTFREE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6074;
	            this.match(InceptorOracleParser.KW_PCTFREE);
	            this.state = 6075;
	            localctx.num = this.match(InceptorOracleParser.Number);
	            break;
	        case InceptorOracleParser.KW_PCTUSED:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6076;
	            this.match(InceptorOracleParser.KW_PCTUSED);
	            this.state = 6077;
	            localctx.num = this.match(InceptorOracleParser.Number);
	            break;
	        case InceptorOracleParser.KW_INITRANS:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 6078;
	            this.match(InceptorOracleParser.KW_INITRANS);
	            this.state = 6079;
	            localctx.num = this.match(InceptorOracleParser.Number);
	            break;
	        case InceptorOracleParser.KW_MAXTRANS:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 6080;
	            this.match(InceptorOracleParser.KW_MAXTRANS);
	            this.state = 6081;
	            localctx.num = this.match(InceptorOracleParser.Number);
	            break;
	        case InceptorOracleParser.KW_STORAGE:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 6082;
	            this.storageClause();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	storageClause() {
	    let localctx = new StorageClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1026, InceptorOracleParser.RULE_storageClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6085;
	        this.match(InceptorOracleParser.KW_STORAGE);
	        this.state = 6086;
	        this.match(InceptorOracleParser.LPAREN);
	        this.state = 6088; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 6087;
	            this.storageItem();
	            this.state = 6090; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (InceptorOracleParser.KW_INITIAL - 128)) | (1 << (InceptorOracleParser.KW_NEXT - 128)) | (1 << (InceptorOracleParser.KW_MINEXTENTS - 128)) | (1 << (InceptorOracleParser.KW_MAXEXTENTS - 128)))) !== 0));
	        this.state = 6092;
	        this.match(InceptorOracleParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	storageItem() {
	    let localctx = new StorageItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1028, InceptorOracleParser.RULE_storageItem);
	    try {
	        this.state = 6108;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,651,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6094;
	            this.match(InceptorOracleParser.KW_INITIAL);
	            this.state = 6095;
	            localctx.sz = this.match(InceptorOracleParser.ByteLengthLiteral);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6096;
	            this.match(InceptorOracleParser.KW_INITIAL);
	            this.state = 6097;
	            localctx.num = this.match(InceptorOracleParser.Number);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 6098;
	            this.match(InceptorOracleParser.KW_NEXT);
	            this.state = 6099;
	            localctx.sz = this.match(InceptorOracleParser.ByteLengthLiteral);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 6100;
	            this.match(InceptorOracleParser.KW_NEXT);
	            this.state = 6101;
	            localctx.num = this.match(InceptorOracleParser.Number);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 6102;
	            this.match(InceptorOracleParser.KW_MINEXTENTS);
	            this.state = 6103;
	            localctx.num = this.match(InceptorOracleParser.Number);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 6104;
	            this.match(InceptorOracleParser.KW_MAXEXTENTS);
	            this.state = 6105;
	            this.match(InceptorOracleParser.KW_UNLIMITED);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 6106;
	            this.match(InceptorOracleParser.KW_MAXEXTENTS);
	            this.state = 6107;
	            localctx.num = this.match(InceptorOracleParser.Number);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectClauseParserStart() {
	    let localctx = new SelectClauseParserStartContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1030, InceptorOracleParser.RULE_selectClauseParserStart);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6110;
	        this.selectClause();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectClause() {
	    let localctx = new SelectClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1032, InceptorOracleParser.RULE_selectClause);
	    var _la = 0; // Token type
	    try {
	        this.state = 6126;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case InceptorOracleParser.KW_SELECT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6112;
	            this.match(InceptorOracleParser.KW_SELECT);
	            this.state = 6114;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.HINT_LEFT) {
	                this.state = 6113;
	                this.hintClause();
	            }

	            this.state = 6123;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case InceptorOracleParser.KW_TRUE:
	            case InceptorOracleParser.KW_FALSE:
	            case InceptorOracleParser.KW_ALL:
	            case InceptorOracleParser.KW_NOT:
	            case InceptorOracleParser.KW_LIKE:
	            case InceptorOracleParser.KW_NO:
	            case InceptorOracleParser.KW_ANY:
	            case InceptorOracleParser.KW_IF:
	            case InceptorOracleParser.KW_EXISTS:
	            case InceptorOracleParser.KW_ASC:
	            case InceptorOracleParser.KW_DESC:
	            case InceptorOracleParser.KW_ORDER:
	            case InceptorOracleParser.KW_GROUP:
	            case InceptorOracleParser.KW_INCREMENT:
	            case InceptorOracleParser.KW_BY:
	            case InceptorOracleParser.KW_HASH:
	            case InceptorOracleParser.KW_DISTINCT:
	            case InceptorOracleParser.KW_INSERT:
	            case InceptorOracleParser.KW_OVERWRITE:
	            case InceptorOracleParser.KW_OUTER:
	            case InceptorOracleParser.KW_STREAMJOB:
	            case InceptorOracleParser.KW_STREAMJOBS:
	            case InceptorOracleParser.KW_AT:
	            case InceptorOracleParser.KW_LEFT:
	            case InceptorOracleParser.KW_RIGHT:
	            case InceptorOracleParser.KW_FULL:
	            case InceptorOracleParser.KW_PARTITION:
	            case InceptorOracleParser.KW_PARTITIONS:
	            case InceptorOracleParser.KW_PATTERN:
	            case InceptorOracleParser.KW_TABLE:
	            case InceptorOracleParser.KW_TABLES:
	            case InceptorOracleParser.KW_SEQUENCE:
	            case InceptorOracleParser.KW_SEQUENCES:
	            case InceptorOracleParser.KW_COLUMNS:
	            case InceptorOracleParser.KW_INDEX:
	            case InceptorOracleParser.KW_INDEXES:
	            case InceptorOracleParser.KW_REBUILD:
	            case InceptorOracleParser.KW_FUNCTIONS:
	            case InceptorOracleParser.KW_SHOW:
	            case InceptorOracleParser.KW_MSCK:
	            case InceptorOracleParser.KW_REPAIR:
	            case InceptorOracleParser.KW_DIRECTORY:
	            case InceptorOracleParser.KW_LOCAL:
	            case InceptorOracleParser.KW_GLOBAL:
	            case InceptorOracleParser.KW_USING:
	            case InceptorOracleParser.KW_CLUSTER:
	            case InceptorOracleParser.KW_DISTRIBUTE:
	            case InceptorOracleParser.KW_SORT:
	            case InceptorOracleParser.KW_UNION:
	            case InceptorOracleParser.KW_LOAD:
	            case InceptorOracleParser.KW_EXPORT:
	            case InceptorOracleParser.KW_IMPORT:
	            case InceptorOracleParser.KW_DATA:
	            case InceptorOracleParser.KW_INPATH:
	            case InceptorOracleParser.KW_IS:
	            case InceptorOracleParser.KW_NULL:
	            case InceptorOracleParser.KW_NULLS:
	            case InceptorOracleParser.KW_CREATE:
	            case InceptorOracleParser.KW_EXTERNAL:
	            case InceptorOracleParser.KW_ALTER:
	            case InceptorOracleParser.KW_CHANGE:
	            case InceptorOracleParser.KW_FIRST:
	            case InceptorOracleParser.KW_LAST:
	            case InceptorOracleParser.KW_AFTER:
	            case InceptorOracleParser.KW_DESCRIBE:
	            case InceptorOracleParser.KW_DROP:
	            case InceptorOracleParser.KW_RENAME:
	            case InceptorOracleParser.KW_IGNORE:
	            case InceptorOracleParser.KW_RESPECT:
	            case InceptorOracleParser.KW_PROTECTION:
	            case InceptorOracleParser.KW_TO:
	            case InceptorOracleParser.KW_COMMENT:
	            case InceptorOracleParser.KW_PROMPT:
	            case InceptorOracleParser.KW_SPOOL:
	            case InceptorOracleParser.KW_BOOLEAN:
	            case InceptorOracleParser.KW_TINYINT:
	            case InceptorOracleParser.KW_BYTE:
	            case InceptorOracleParser.KW_SMALLINT:
	            case InceptorOracleParser.KW_INT:
	            case InceptorOracleParser.KW_BIGINT:
	            case InceptorOracleParser.KW_FLOAT:
	            case InceptorOracleParser.KW_DOUBLE:
	            case InceptorOracleParser.KW_DATE:
	            case InceptorOracleParser.KW_DATETIME:
	            case InceptorOracleParser.KW_TIMESTAMP:
	            case InceptorOracleParser.KW_TIME:
	            case InceptorOracleParser.KW_DECIMAL:
	            case InceptorOracleParser.KW_STRING:
	            case InceptorOracleParser.KW_GEO:
	            case InceptorOracleParser.KW_ARRAY:
	            case InceptorOracleParser.KW_STRUCT:
	            case InceptorOracleParser.KW_MAP:
	            case InceptorOracleParser.KW_UNIONTYPE:
	            case InceptorOracleParser.KW_PARTITIONED:
	            case InceptorOracleParser.KW_ROUTED:
	            case InceptorOracleParser.KW_CLUSTERED:
	            case InceptorOracleParser.KW_SORTED:
	            case InceptorOracleParser.KW_NEXT:
	            case InceptorOracleParser.KW_NEXTVALUE:
	            case InceptorOracleParser.KW_UNLIMITED:
	            case InceptorOracleParser.KW_WIDCARD:
	            case InceptorOracleParser.KW_BUCKETS:
	            case InceptorOracleParser.KW_ROW:
	            case InceptorOracleParser.KW_ROWS:
	            case InceptorOracleParser.KW_FORMAT:
	            case InceptorOracleParser.KW_DELIMITED:
	            case InceptorOracleParser.KW_FIELDS:
	            case InceptorOracleParser.KW_TERMINATED:
	            case InceptorOracleParser.KW_ESCAPED:
	            case InceptorOracleParser.KW_COLLECTION:
	            case InceptorOracleParser.KW_ITEMS:
	            case InceptorOracleParser.KW_KEYS:
	            case InceptorOracleParser.KW_KEY_TYPE:
	            case InceptorOracleParser.KW_LINES:
	            case InceptorOracleParser.KW_STORED:
	            case InceptorOracleParser.KW_FILEFORMAT:
	            case InceptorOracleParser.KW_SEQUENCEFILE:
	            case InceptorOracleParser.KW_TEXTFILE:
	            case InceptorOracleParser.KW_CSVFILE:
	            case InceptorOracleParser.KW_FWCFILE:
	            case InceptorOracleParser.KW_RCFILE:
	            case InceptorOracleParser.KW_ORCFILE:
	            case InceptorOracleParser.KW_HOLODESK:
	            case InceptorOracleParser.KW_STELLARDB:
	            case InceptorOracleParser.KW_ORCTRANSACTIONFILE:
	            case InceptorOracleParser.KW_PARQUET:
	            case InceptorOracleParser.KW_HYPERDRIVE:
	            case InceptorOracleParser.KW_ESDRIVE:
	            case InceptorOracleParser.KW_INPUTFORMAT:
	            case InceptorOracleParser.KW_OUTPUTFORMAT:
	            case InceptorOracleParser.KW_INPUTDRIVER:
	            case InceptorOracleParser.KW_OUTPUTDRIVER:
	            case InceptorOracleParser.KW_OFFLINE:
	            case InceptorOracleParser.KW_ENABLE:
	            case InceptorOracleParser.KW_DISABLE:
	            case InceptorOracleParser.KW_READONLY:
	            case InceptorOracleParser.KW_NO_DROP:
	            case InceptorOracleParser.KW_LOCATION:
	            case InceptorOracleParser.KW_BUCKET:
	            case InceptorOracleParser.KW_OUT:
	            case InceptorOracleParser.KW_OF:
	            case InceptorOracleParser.KW_PERCENT:
	            case InceptorOracleParser.KW_CAST:
	            case InceptorOracleParser.KW_ADD:
	            case InceptorOracleParser.KW_REPLACE:
	            case InceptorOracleParser.KW_RLIKE:
	            case InceptorOracleParser.KW_REGEXP:
	            case InceptorOracleParser.KW_TEMPORARY:
	            case InceptorOracleParser.KW_RESOURCE:
	            case InceptorOracleParser.KW_RELOAD:
	            case InceptorOracleParser.KW_EXPLAIN:
	            case InceptorOracleParser.KW_FORMATTED:
	            case InceptorOracleParser.KW_PRETTY:
	            case InceptorOracleParser.KW_DEPENDENCY:
	            case InceptorOracleParser.KW_LOGICAL:
	            case InceptorOracleParser.KW_COST:
	            case InceptorOracleParser.KW_SERDE:
	            case InceptorOracleParser.KW_WITH:
	            case InceptorOracleParser.KW_WITHIN:
	            case InceptorOracleParser.KW_DEFERRED:
	            case InceptorOracleParser.KW_SERDEPROPERTIES:
	            case InceptorOracleParser.KW_DBPROPERTIES:
	            case InceptorOracleParser.KW_LIMIT:
	            case InceptorOracleParser.KW_SET:
	            case InceptorOracleParser.KW_UNSET:
	            case InceptorOracleParser.KW_TBLPROPERTIES:
	            case InceptorOracleParser.KW_IDXPROPERTIES:
	            case InceptorOracleParser.KW_VALUE_TYPE:
	            case InceptorOracleParser.KW_ELEM_TYPE:
	            case InceptorOracleParser.KW_CASE:
	            case InceptorOracleParser.KW_PRIOR:
	            case InceptorOracleParser.KW_NOCYCLE:
	            case InceptorOracleParser.KW_MAPJOIN:
	            case InceptorOracleParser.KW_COMBINE:
	            case InceptorOracleParser.KW_COMBINE_STRUCT_INDEX:
	            case InceptorOracleParser.KW_GLKJOIN:
	            case InceptorOracleParser.KW_USE_INDEX:
	            case InceptorOracleParser.KW_STARGATE:
	            case InceptorOracleParser.KW_USE_BULKLOAD:
	            case InceptorOracleParser.KW_ADHOC:
	            case InceptorOracleParser.KW_PRECOMPILE:
	            case InceptorOracleParser.KW_STREAMTABLE:
	            case InceptorOracleParser.KW_STREAM:
	            case InceptorOracleParser.KW_RULEBASE:
	            case InceptorOracleParser.KW_RULEBASES:
	            case InceptorOracleParser.KW_RULE:
	            case InceptorOracleParser.KW_RULES:
	            case InceptorOracleParser.KW_MEET:
	            case InceptorOracleParser.KW_MUST:
	            case InceptorOracleParser.KW_MUSTNOT:
	            case InceptorOracleParser.KW_POLICY:
	            case InceptorOracleParser.KW_POLICIES:
	            case InceptorOracleParser.KW_REMOVE:
	            case InceptorOracleParser.KW_POLICYKEY:
	            case InceptorOracleParser.KW_POLICY_RULE:
	            case InceptorOracleParser.KW_LOOKUP:
	            case InceptorOracleParser.KW_RULE_FUNCTION:
	            case InceptorOracleParser.KW_RULE_FUNCTIONS:
	            case InceptorOracleParser.KW_RULE_FUNCTION_PROPERTIES:
	            case InceptorOracleParser.KW_HOLD_DDLTIME:
	            case InceptorOracleParser.KW_CLUSTERSTATUS:
	            case InceptorOracleParser.KW_UTC:
	            case InceptorOracleParser.KW_UTCTIMESTAMP:
	            case InceptorOracleParser.KW_LONG:
	            case InceptorOracleParser.KW_DELETE:
	            case InceptorOracleParser.KW_PLUS:
	            case InceptorOracleParser.KW_MINUS:
	            case InceptorOracleParser.KW_OP_CONCAT:
	            case InceptorOracleParser.KW_FETCH:
	            case InceptorOracleParser.KW_INTERSECT:
	            case InceptorOracleParser.KW_VIEW:
	            case InceptorOracleParser.KW_IN:
	            case InceptorOracleParser.KW_DATABASES:
	            case InceptorOracleParser.KW_MATERIALIZED:
	            case InceptorOracleParser.KW_SCHEMA:
	            case InceptorOracleParser.KW_SCHEMAS:
	            case InceptorOracleParser.KW_GRANT:
	            case InceptorOracleParser.KW_REVOKE:
	            case InceptorOracleParser.KW_SSL:
	            case InceptorOracleParser.KW_UNDO:
	            case InceptorOracleParser.KW_LOCK:
	            case InceptorOracleParser.KW_LOCKS:
	            case InceptorOracleParser.KW_UNLOCK:
	            case InceptorOracleParser.KW_SHARED:
	            case InceptorOracleParser.KW_EXCLUSIVE:
	            case InceptorOracleParser.KW_PROCEDURE:
	            case InceptorOracleParser.KW_UNSIGNED:
	            case InceptorOracleParser.KW_WHILE:
	            case InceptorOracleParser.KW_READ:
	            case InceptorOracleParser.KW_READS:
	            case InceptorOracleParser.KW_PURGE:
	            case InceptorOracleParser.KW_RANGE:
	            case InceptorOracleParser.KW_ANALYZE:
	            case InceptorOracleParser.KW_BEFORE:
	            case InceptorOracleParser.KW_BETWEEN:
	            case InceptorOracleParser.KW_BOTH:
	            case InceptorOracleParser.KW_BINARY:
	            case InceptorOracleParser.KW_DEFAULT:
	            case InceptorOracleParser.KW_TYPE:
	            case InceptorOracleParser.KW_TRIGGER:
	            case InceptorOracleParser.KW_RECORDREADER:
	            case InceptorOracleParser.KW_RECORDWRITER:
	            case InceptorOracleParser.KW_SEMI:
	            case InceptorOracleParser.KW_LATERAL:
	            case InceptorOracleParser.KW_TOUCH:
	            case InceptorOracleParser.KW_ARCHIVE:
	            case InceptorOracleParser.KW_UNARCHIVE:
	            case InceptorOracleParser.KW_COMPUTE:
	            case InceptorOracleParser.KW_STATISTICS:
	            case InceptorOracleParser.KW_USE:
	            case InceptorOracleParser.KW_OPTION:
	            case InceptorOracleParser.KW_CONCATENATE:
	            case InceptorOracleParser.KW_SHOW_DATABASE:
	            case InceptorOracleParser.KW_UPDATE:
	            case InceptorOracleParser.KW_RESTRICT:
	            case InceptorOracleParser.KW_CASCADE:
	            case InceptorOracleParser.KW_SKEWED:
	            case InceptorOracleParser.KW_DIRECTORIES:
	            case InceptorOracleParser.KW_WINDOWRESET:
	            case InceptorOracleParser.KW_SESSIONSTART:
	            case InceptorOracleParser.KW_SESSIONSTOP:
	            case InceptorOracleParser.KW_SESSIONEXPIRE:
	            case InceptorOracleParser.KW_SESSIONEXPIRE_DISCARD:
	            case InceptorOracleParser.KW_SESSIONEXPIRE_COMPLETE:
	            case InceptorOracleParser.KW_STREAMWINDOW:
	            case InceptorOracleParser.KW_STREAMWINDOWSLIDELENGTH:
	            case InceptorOracleParser.KW_STREAMWINDOWSEPARATED:
	            case InceptorOracleParser.KW_FOLLOWEDBY:
	            case InceptorOracleParser.KW_NOTFOLLOWEDBY:
	            case InceptorOracleParser.KW_NOTNEXT:
	            case InceptorOracleParser.KW_PATTERN_TIMES:
	            case InceptorOracleParser.KW_CURRVALUE:
	            case InceptorOracleParser.KW_GROUPING:
	            case InceptorOracleParser.KW_SETS:
	            case InceptorOracleParser.KW_TRUNCATE:
	            case InceptorOracleParser.KW_NOSCAN:
	            case InceptorOracleParser.KW_USER:
	            case InceptorOracleParser.KW_QUOTA:
	            case InceptorOracleParser.KW_PERMISSION:
	            case InceptorOracleParser.KW_ROLE:
	            case InceptorOracleParser.KW_ROLES:
	            case InceptorOracleParser.KW_INNER:
	            case InceptorOracleParser.KW_ADMIN:
	            case InceptorOracleParser.KW_OWNER:
	            case InceptorOracleParser.KW_PRINCIPALS:
	            case InceptorOracleParser.KW_CONSTANT:
	            case InceptorOracleParser.KW_CONSTRAINT:
	            case InceptorOracleParser.KW_VALUES:
	            case InceptorOracleParser.KW_YEAR:
	            case InceptorOracleParser.KW_MONTH:
	            case InceptorOracleParser.KW_DAY:
	            case InceptorOracleParser.KW_MINUTE:
	            case InceptorOracleParser.KW_HOUR:
	            case InceptorOracleParser.KW_SECOND:
	            case InceptorOracleParser.KW_INTERVAL:
	            case InceptorOracleParser.KW_EXTRACT:
	            case InceptorOracleParser.KW_SUBSTRING:
	            case InceptorOracleParser.KW_SYSDATE:
	            case InceptorOracleParser.KW_SYSTIMESTAMP:
	            case InceptorOracleParser.KW_SYSTIME:
	            case InceptorOracleParser.KW_MAXVALUE:
	            case InceptorOracleParser.KW_NOMAXVALUE:
	            case InceptorOracleParser.KW_MINVALUE:
	            case InceptorOracleParser.KW_NOMINVALUE:
	            case InceptorOracleParser.KW_CYCLE:
	            case InceptorOracleParser.KW_CACHE:
	            case InceptorOracleParser.KW_CACHEDMETRIC:
	            case InceptorOracleParser.KW_CACHEDMETRICS:
	            case InceptorOracleParser.KW_NOCACHE:
	            case InceptorOracleParser.KW_NOORDER:
	            case InceptorOracleParser.KW_MERGE:
	            case InceptorOracleParser.KW_PLANT:
	            case InceptorOracleParser.KW_IMMEDIATE:
	            case InceptorOracleParser.KW_COMPACT:
	            case InceptorOracleParser.KW_STOP:
	            case InceptorOracleParser.KW_LIST:
	            case InceptorOracleParser.KW_TRANSACTION:
	            case InceptorOracleParser.KW_WORK:
	            case InceptorOracleParser.KW_SPACE:
	            case InceptorOracleParser.KW_CONF:
	            case InceptorOracleParser.KW_DEFINED:
	            case InceptorOracleParser.KW_INTEGER:
	            case InceptorOracleParser.KW_ONLY:
	            case InceptorOracleParser.KW_SERVER:
	            case InceptorOracleParser.KW_TRANSACTIONS:
	            case InceptorOracleParser.KW_URI:
	            case InceptorOracleParser.KW_WRITE:
	            case InceptorOracleParser.KW_FACL:
	            case InceptorOracleParser.KW_FOUND:
	            case InceptorOracleParser.KW_LEVEL:
	            case InceptorOracleParser.KW_PUBLIC:
	            case InceptorOracleParser.KW_LINKS:
	            case InceptorOracleParser.KW_CONNECT:
	            case InceptorOracleParser.KW_APPLICATION:
	            case InceptorOracleParser.KW_APPLICATIONS:
	            case InceptorOracleParser.KW_APP:
	            case InceptorOracleParser.KW_APPS:
	            case InceptorOracleParser.KW_INFINITE:
	            case InceptorOracleParser.KW_WAIT:
	            case InceptorOracleParser.KW_PRIMARY:
	            case InceptorOracleParser.KW_FOREIGN:
	            case InceptorOracleParser.KW_REFERENCES:
	            case InceptorOracleParser.KW_VALIDATE:
	            case InceptorOracleParser.KW_NOVALIDATE:
	            case InceptorOracleParser.KW_RELY:
	            case InceptorOracleParser.KW_NORELY:
	            case InceptorOracleParser.KW_KEY:
	            case InceptorOracleParser.KW_SEGMENT:
	            case InceptorOracleParser.KW_LENGTH:
	            case InceptorOracleParser.KW_ATTACH:
	            case InceptorOracleParser.KW_DETTACH:
	            case InceptorOracleParser.KW_SHARD:
	            case InceptorOracleParser.KW_NUM:
	            case InceptorOracleParser.KW_FULLTEXT:
	            case InceptorOracleParser.KW_TABLESIZE:
	            case InceptorOracleParser.KW_TABLET:
	            case InceptorOracleParser.KW_CAPACITY:
	            case InceptorOracleParser.KW_ANALYZER:
	            case InceptorOracleParser.KW_SYNC:
	            case InceptorOracleParser.KW_NO_INDEX:
	            case InceptorOracleParser.KW_LOG:
	            case InceptorOracleParser.KW_FILE:
	            case InceptorOracleParser.KW_JAR:
	            case InceptorOracleParser.KW_PERMANENT:
	            case InceptorOracleParser.KW_SCHEDULER:
	            case InceptorOracleParser.KW_MODE:
	            case InceptorOracleParser.LPAREN:
	            case InceptorOracleParser.PLUS:
	            case InceptorOracleParser.MINUS:
	            case InceptorOracleParser.STAR:
	            case InceptorOracleParser.TILDE:
	            case InceptorOracleParser.StringLiteral:
	            case InceptorOracleParser.CharSetLiteral:
	            case InceptorOracleParser.BigintLiteral:
	            case InceptorOracleParser.SmallintLiteral:
	            case InceptorOracleParser.TinyintLiteral:
	            case InceptorOracleParser.DecimalLiteral:
	            case InceptorOracleParser.Number:
	            case InceptorOracleParser.Identifier:
	            case InceptorOracleParser.CharSetName:
	            case InceptorOracleParser.KW_NOCOPY:
	            case InceptorOracleParser.KW_VARRAY:
	            case InceptorOracleParser.KW_PACKAGE:
	            case InceptorOracleParser.KW_PACKAGES:
	            case InceptorOracleParser.KW_BODY:
	            case InceptorOracleParser.KW_ISOPEN:
	            case InceptorOracleParser.KW_NOTFOUND:
	            case InceptorOracleParser.KW_ROWCOUNT:
	            case InceptorOracleParser.KW_BULK_ROWCOUNT:
	            case InceptorOracleParser.KW_BULK_EXCEPTIONS:
	            case InceptorOracleParser.KW_REVERSE:
	            case InceptorOracleParser.KW_SAVE:
	            case InceptorOracleParser.KW_EXCEPTIONS:
	            case InceptorOracleParser.KW_INDICES:
	            case InceptorOracleParser.KW_REF:
	            case InceptorOracleParser.KW_YEARS:
	            case InceptorOracleParser.KW_MONTHS:
	            case InceptorOracleParser.KW_DAYS:
	            case InceptorOracleParser.KW_HOURS:
	            case InceptorOracleParser.KW_MINUTES:
	            case InceptorOracleParser.KW_SECONDS:
	                this.state = 6118;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,653,this._ctx);
	                if(la_===1) {
	                    this.state = 6116;
	                    this.match(InceptorOracleParser.KW_ALL);

	                } else if(la_===2) {
	                    this.state = 6117;
	                    localctx.dist = this.match(InceptorOracleParser.KW_DISTINCT);

	                }
	                this.state = 6120;
	                this.selectList();
	                break;
	            case InceptorOracleParser.KW_TRANSFORM:
	                this.state = 6121;
	                localctx.transform = this.match(InceptorOracleParser.KW_TRANSFORM);
	                this.state = 6122;
	                this.selectTrfmClause();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        case InceptorOracleParser.KW_MAP:
	        case InceptorOracleParser.KW_REDUCE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6125;
	            this.trfmClause();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectList() {
	    let localctx = new SelectListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1034, InceptorOracleParser.RULE_selectList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6128;
	        this.selectItem();
	        this.state = 6133;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===InceptorOracleParser.COMMA) {
	            this.state = 6129;
	            this.match(InceptorOracleParser.COMMA);
	            this.state = 6130;
	            this.selectItem();
	            this.state = 6135;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	hintClause() {
	    let localctx = new HintClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1036, InceptorOracleParser.RULE_hintClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6136;
	        this.match(InceptorOracleParser.HINT_LEFT);
	        this.state = 6137;
	        this.hintList();
	        this.state = 6138;
	        this.match(InceptorOracleParser.C_COMMENT_RIGHT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	hintList() {
	    let localctx = new HintListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1038, InceptorOracleParser.RULE_hintList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6140;
	        this.hintItem();
	        this.state = 6145;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===InceptorOracleParser.COMMA) {
	            this.state = 6141;
	            this.match(InceptorOracleParser.COMMA);
	            this.state = 6142;
	            this.hintItem();
	            this.state = 6147;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	hintItem() {
	    let localctx = new HintItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1040, InceptorOracleParser.RULE_hintItem);
	    var _la = 0; // Token type
	    try {
	        this.state = 6176;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case InceptorOracleParser.KW_MAPJOIN:
	        case InceptorOracleParser.KW_COMBINE:
	        case InceptorOracleParser.KW_COMBINE_STRUCT_INDEX:
	        case InceptorOracleParser.KW_GLKJOIN:
	        case InceptorOracleParser.KW_USE_BULKLOAD:
	        case InceptorOracleParser.KW_ADHOC:
	        case InceptorOracleParser.KW_PRECOMPILE:
	        case InceptorOracleParser.KW_STREAMTABLE:
	        case InceptorOracleParser.KW_HOLD_DDLTIME:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6148;
	            this.hintName();
	            this.state = 6153;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.LPAREN) {
	                this.state = 6149;
	                this.match(InceptorOracleParser.LPAREN);
	                this.state = 6150;
	                this.hintArgs();
	                this.state = 6151;
	                this.match(InceptorOracleParser.RPAREN);
	            }

	            break;
	        case InceptorOracleParser.KW_USE_INDEX:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6155;
	            this.indexHintName();
	            this.state = 6160;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.LPAREN) {
	                this.state = 6156;
	                this.match(InceptorOracleParser.LPAREN);
	                this.state = 6157;
	                this.indexHintArgs();
	                this.state = 6158;
	                this.match(InceptorOracleParser.RPAREN);
	            }

	            break;
	        case InceptorOracleParser.KW_STARGATE:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 6162;
	            this.stargateHintName();
	            this.state = 6167;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.LPAREN) {
	                this.state = 6163;
	                this.match(InceptorOracleParser.LPAREN);
	                this.state = 6164;
	                this.stargateHintArgs();
	                this.state = 6165;
	                this.match(InceptorOracleParser.RPAREN);
	            }

	            break;
	        case InceptorOracleParser.KW_REWRITE:
	        case InceptorOracleParser.KW_NO_REWRITE:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 6169;
	            this.mboHintName();
	            this.state = 6174;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.LPAREN) {
	                this.state = 6170;
	                this.match(InceptorOracleParser.LPAREN);
	                this.state = 6171;
	                this.mboHintArgs();
	                this.state = 6172;
	                this.match(InceptorOracleParser.RPAREN);
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stargateHintName() {
	    let localctx = new StargateHintNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1042, InceptorOracleParser.RULE_stargateHintName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6178;
	        this.match(InceptorOracleParser.KW_STARGATE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stargateHintArgs() {
	    let localctx = new StargateHintArgsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1044, InceptorOracleParser.RULE_stargateHintArgs);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6180;
	        this.stargateHintArgName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stargateHintArgName() {
	    let localctx = new StargateHintArgNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1046, InceptorOracleParser.RULE_stargateHintArgName);
	    try {
	        this.state = 6189;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,663,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6182;
	            this.identifier();
	            this.state = 6183;
	            this.identifier();
	            this.state = 6184;
	            this.identifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6186;
	            this.identifier();
	            this.state = 6187;
	            this.identifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	hintName() {
	    let localctx = new HintNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1048, InceptorOracleParser.RULE_hintName);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6191;
	        _la = this._input.LA(1);
	        if(!(((((_la - 220)) & ~0x1f) == 0 && ((1 << (_la - 220)) & ((1 << (InceptorOracleParser.KW_MAPJOIN - 220)) | (1 << (InceptorOracleParser.KW_COMBINE - 220)) | (1 << (InceptorOracleParser.KW_COMBINE_STRUCT_INDEX - 220)) | (1 << (InceptorOracleParser.KW_GLKJOIN - 220)) | (1 << (InceptorOracleParser.KW_USE_BULKLOAD - 220)) | (1 << (InceptorOracleParser.KW_ADHOC - 220)) | (1 << (InceptorOracleParser.KW_PRECOMPILE - 220)) | (1 << (InceptorOracleParser.KW_STREAMTABLE - 220)))) !== 0) || _la===InceptorOracleParser.KW_HOLD_DDLTIME)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	indexHintName() {
	    let localctx = new IndexHintNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1050, InceptorOracleParser.RULE_indexHintName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6193;
	        this.match(InceptorOracleParser.KW_USE_INDEX);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mboHintName() {
	    let localctx = new MboHintNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1052, InceptorOracleParser.RULE_mboHintName);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6195;
	        _la = this._input.LA(1);
	        if(!(_la===InceptorOracleParser.KW_REWRITE || _la===InceptorOracleParser.KW_NO_REWRITE)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	indexHintArgs() {
	    let localctx = new IndexHintArgsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1054, InceptorOracleParser.RULE_indexHintArgs);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6197;
	        this.indexHintArgName();
	        this.state = 6202;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===InceptorOracleParser.COMMA) {
	            this.state = 6198;
	            this.match(InceptorOracleParser.COMMA);
	            this.state = 6199;
	            this.indexHintArgName();
	            this.state = 6204;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mboHintArgs() {
	    let localctx = new MboHintArgsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1056, InceptorOracleParser.RULE_mboHintArgs);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6205;
	        this.mboHintArgName();
	        this.state = 6210;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===InceptorOracleParser.COMMA) {
	            this.state = 6206;
	            this.match(InceptorOracleParser.COMMA);
	            this.state = 6207;
	            this.mboHintArgName();
	            this.state = 6212;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	indexHintArgName() {
	    let localctx = new IndexHintArgNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1058, InceptorOracleParser.RULE_indexHintArgName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6213;
	        this.hintArgName();
	        this.state = 6214;
	        this.match(InceptorOracleParser.KW_USING);
	        this.state = 6215;
	        this.hintArgName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mboHintArgName() {
	    let localctx = new MboHintArgNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1060, InceptorOracleParser.RULE_mboHintArgName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6217;
	        this.tableName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	hintArgs() {
	    let localctx = new HintArgsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1062, InceptorOracleParser.RULE_hintArgs);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6219;
	        this.hintArgName();
	        this.state = 6224;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===InceptorOracleParser.COMMA) {
	            this.state = 6220;
	            this.match(InceptorOracleParser.COMMA);
	            this.state = 6221;
	            this.hintArgName();
	            this.state = 6226;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	hintArgName() {
	    let localctx = new HintArgNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1064, InceptorOracleParser.RULE_hintArgName);
	    try {
	        this.state = 6229;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case InceptorOracleParser.Number:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6227;
	            this.match(InceptorOracleParser.Number);
	            break;
	        case InceptorOracleParser.KW_TRUE:
	        case InceptorOracleParser.KW_FALSE:
	        case InceptorOracleParser.KW_ALL:
	        case InceptorOracleParser.KW_LIKE:
	        case InceptorOracleParser.KW_NO:
	        case InceptorOracleParser.KW_ANY:
	        case InceptorOracleParser.KW_EXISTS:
	        case InceptorOracleParser.KW_ASC:
	        case InceptorOracleParser.KW_DESC:
	        case InceptorOracleParser.KW_ORDER:
	        case InceptorOracleParser.KW_GROUP:
	        case InceptorOracleParser.KW_INCREMENT:
	        case InceptorOracleParser.KW_BY:
	        case InceptorOracleParser.KW_HASH:
	        case InceptorOracleParser.KW_INSERT:
	        case InceptorOracleParser.KW_OVERWRITE:
	        case InceptorOracleParser.KW_OUTER:
	        case InceptorOracleParser.KW_STREAMJOB:
	        case InceptorOracleParser.KW_STREAMJOBS:
	        case InceptorOracleParser.KW_AT:
	        case InceptorOracleParser.KW_LEFT:
	        case InceptorOracleParser.KW_RIGHT:
	        case InceptorOracleParser.KW_FULL:
	        case InceptorOracleParser.KW_PARTITION:
	        case InceptorOracleParser.KW_PARTITIONS:
	        case InceptorOracleParser.KW_PATTERN:
	        case InceptorOracleParser.KW_TABLE:
	        case InceptorOracleParser.KW_TABLES:
	        case InceptorOracleParser.KW_SEQUENCE:
	        case InceptorOracleParser.KW_SEQUENCES:
	        case InceptorOracleParser.KW_COLUMNS:
	        case InceptorOracleParser.KW_INDEX:
	        case InceptorOracleParser.KW_INDEXES:
	        case InceptorOracleParser.KW_REBUILD:
	        case InceptorOracleParser.KW_FUNCTIONS:
	        case InceptorOracleParser.KW_SHOW:
	        case InceptorOracleParser.KW_MSCK:
	        case InceptorOracleParser.KW_REPAIR:
	        case InceptorOracleParser.KW_DIRECTORY:
	        case InceptorOracleParser.KW_LOCAL:
	        case InceptorOracleParser.KW_GLOBAL:
	        case InceptorOracleParser.KW_USING:
	        case InceptorOracleParser.KW_CLUSTER:
	        case InceptorOracleParser.KW_DISTRIBUTE:
	        case InceptorOracleParser.KW_SORT:
	        case InceptorOracleParser.KW_UNION:
	        case InceptorOracleParser.KW_LOAD:
	        case InceptorOracleParser.KW_EXPORT:
	        case InceptorOracleParser.KW_IMPORT:
	        case InceptorOracleParser.KW_DATA:
	        case InceptorOracleParser.KW_INPATH:
	        case InceptorOracleParser.KW_IS:
	        case InceptorOracleParser.KW_NULLS:
	        case InceptorOracleParser.KW_CREATE:
	        case InceptorOracleParser.KW_EXTERNAL:
	        case InceptorOracleParser.KW_ALTER:
	        case InceptorOracleParser.KW_CHANGE:
	        case InceptorOracleParser.KW_FIRST:
	        case InceptorOracleParser.KW_LAST:
	        case InceptorOracleParser.KW_AFTER:
	        case InceptorOracleParser.KW_DESCRIBE:
	        case InceptorOracleParser.KW_DROP:
	        case InceptorOracleParser.KW_RENAME:
	        case InceptorOracleParser.KW_IGNORE:
	        case InceptorOracleParser.KW_RESPECT:
	        case InceptorOracleParser.KW_PROTECTION:
	        case InceptorOracleParser.KW_TO:
	        case InceptorOracleParser.KW_COMMENT:
	        case InceptorOracleParser.KW_PROMPT:
	        case InceptorOracleParser.KW_SPOOL:
	        case InceptorOracleParser.KW_BOOLEAN:
	        case InceptorOracleParser.KW_TINYINT:
	        case InceptorOracleParser.KW_BYTE:
	        case InceptorOracleParser.KW_SMALLINT:
	        case InceptorOracleParser.KW_INT:
	        case InceptorOracleParser.KW_BIGINT:
	        case InceptorOracleParser.KW_FLOAT:
	        case InceptorOracleParser.KW_DOUBLE:
	        case InceptorOracleParser.KW_DATE:
	        case InceptorOracleParser.KW_DATETIME:
	        case InceptorOracleParser.KW_TIMESTAMP:
	        case InceptorOracleParser.KW_TIME:
	        case InceptorOracleParser.KW_DECIMAL:
	        case InceptorOracleParser.KW_STRING:
	        case InceptorOracleParser.KW_GEO:
	        case InceptorOracleParser.KW_ARRAY:
	        case InceptorOracleParser.KW_STRUCT:
	        case InceptorOracleParser.KW_UNIONTYPE:
	        case InceptorOracleParser.KW_PARTITIONED:
	        case InceptorOracleParser.KW_ROUTED:
	        case InceptorOracleParser.KW_CLUSTERED:
	        case InceptorOracleParser.KW_SORTED:
	        case InceptorOracleParser.KW_NEXT:
	        case InceptorOracleParser.KW_NEXTVALUE:
	        case InceptorOracleParser.KW_BUCKETS:
	        case InceptorOracleParser.KW_ROW:
	        case InceptorOracleParser.KW_ROWS:
	        case InceptorOracleParser.KW_FORMAT:
	        case InceptorOracleParser.KW_DELIMITED:
	        case InceptorOracleParser.KW_FIELDS:
	        case InceptorOracleParser.KW_TERMINATED:
	        case InceptorOracleParser.KW_ESCAPED:
	        case InceptorOracleParser.KW_COLLECTION:
	        case InceptorOracleParser.KW_ITEMS:
	        case InceptorOracleParser.KW_KEYS:
	        case InceptorOracleParser.KW_KEY_TYPE:
	        case InceptorOracleParser.KW_LINES:
	        case InceptorOracleParser.KW_STORED:
	        case InceptorOracleParser.KW_FILEFORMAT:
	        case InceptorOracleParser.KW_SEQUENCEFILE:
	        case InceptorOracleParser.KW_TEXTFILE:
	        case InceptorOracleParser.KW_CSVFILE:
	        case InceptorOracleParser.KW_FWCFILE:
	        case InceptorOracleParser.KW_RCFILE:
	        case InceptorOracleParser.KW_ORCFILE:
	        case InceptorOracleParser.KW_HOLODESK:
	        case InceptorOracleParser.KW_STELLARDB:
	        case InceptorOracleParser.KW_ORCTRANSACTIONFILE:
	        case InceptorOracleParser.KW_PARQUET:
	        case InceptorOracleParser.KW_HYPERDRIVE:
	        case InceptorOracleParser.KW_ESDRIVE:
	        case InceptorOracleParser.KW_INPUTFORMAT:
	        case InceptorOracleParser.KW_OUTPUTFORMAT:
	        case InceptorOracleParser.KW_INPUTDRIVER:
	        case InceptorOracleParser.KW_OUTPUTDRIVER:
	        case InceptorOracleParser.KW_OFFLINE:
	        case InceptorOracleParser.KW_ENABLE:
	        case InceptorOracleParser.KW_DISABLE:
	        case InceptorOracleParser.KW_READONLY:
	        case InceptorOracleParser.KW_NO_DROP:
	        case InceptorOracleParser.KW_LOCATION:
	        case InceptorOracleParser.KW_BUCKET:
	        case InceptorOracleParser.KW_OUT:
	        case InceptorOracleParser.KW_OF:
	        case InceptorOracleParser.KW_PERCENT:
	        case InceptorOracleParser.KW_ADD:
	        case InceptorOracleParser.KW_REPLACE:
	        case InceptorOracleParser.KW_RLIKE:
	        case InceptorOracleParser.KW_REGEXP:
	        case InceptorOracleParser.KW_TEMPORARY:
	        case InceptorOracleParser.KW_RESOURCE:
	        case InceptorOracleParser.KW_RELOAD:
	        case InceptorOracleParser.KW_EXPLAIN:
	        case InceptorOracleParser.KW_FORMATTED:
	        case InceptorOracleParser.KW_PRETTY:
	        case InceptorOracleParser.KW_DEPENDENCY:
	        case InceptorOracleParser.KW_LOGICAL:
	        case InceptorOracleParser.KW_COST:
	        case InceptorOracleParser.KW_SERDE:
	        case InceptorOracleParser.KW_WITH:
	        case InceptorOracleParser.KW_WITHIN:
	        case InceptorOracleParser.KW_DEFERRED:
	        case InceptorOracleParser.KW_SERDEPROPERTIES:
	        case InceptorOracleParser.KW_DBPROPERTIES:
	        case InceptorOracleParser.KW_LIMIT:
	        case InceptorOracleParser.KW_SET:
	        case InceptorOracleParser.KW_UNSET:
	        case InceptorOracleParser.KW_TBLPROPERTIES:
	        case InceptorOracleParser.KW_IDXPROPERTIES:
	        case InceptorOracleParser.KW_VALUE_TYPE:
	        case InceptorOracleParser.KW_ELEM_TYPE:
	        case InceptorOracleParser.KW_PRIOR:
	        case InceptorOracleParser.KW_NOCYCLE:
	        case InceptorOracleParser.KW_MAPJOIN:
	        case InceptorOracleParser.KW_COMBINE:
	        case InceptorOracleParser.KW_COMBINE_STRUCT_INDEX:
	        case InceptorOracleParser.KW_GLKJOIN:
	        case InceptorOracleParser.KW_USE_INDEX:
	        case InceptorOracleParser.KW_STARGATE:
	        case InceptorOracleParser.KW_USE_BULKLOAD:
	        case InceptorOracleParser.KW_ADHOC:
	        case InceptorOracleParser.KW_PRECOMPILE:
	        case InceptorOracleParser.KW_STREAMTABLE:
	        case InceptorOracleParser.KW_STREAM:
	        case InceptorOracleParser.KW_RULEBASE:
	        case InceptorOracleParser.KW_RULEBASES:
	        case InceptorOracleParser.KW_RULE:
	        case InceptorOracleParser.KW_RULES:
	        case InceptorOracleParser.KW_MEET:
	        case InceptorOracleParser.KW_MUST:
	        case InceptorOracleParser.KW_MUSTNOT:
	        case InceptorOracleParser.KW_POLICY:
	        case InceptorOracleParser.KW_POLICIES:
	        case InceptorOracleParser.KW_REMOVE:
	        case InceptorOracleParser.KW_POLICYKEY:
	        case InceptorOracleParser.KW_POLICY_RULE:
	        case InceptorOracleParser.KW_LOOKUP:
	        case InceptorOracleParser.KW_RULE_FUNCTION:
	        case InceptorOracleParser.KW_RULE_FUNCTIONS:
	        case InceptorOracleParser.KW_RULE_FUNCTION_PROPERTIES:
	        case InceptorOracleParser.KW_HOLD_DDLTIME:
	        case InceptorOracleParser.KW_CLUSTERSTATUS:
	        case InceptorOracleParser.KW_UTC:
	        case InceptorOracleParser.KW_UTCTIMESTAMP:
	        case InceptorOracleParser.KW_LONG:
	        case InceptorOracleParser.KW_DELETE:
	        case InceptorOracleParser.KW_PLUS:
	        case InceptorOracleParser.KW_MINUS:
	        case InceptorOracleParser.KW_OP_CONCAT:
	        case InceptorOracleParser.KW_FETCH:
	        case InceptorOracleParser.KW_INTERSECT:
	        case InceptorOracleParser.KW_VIEW:
	        case InceptorOracleParser.KW_IN:
	        case InceptorOracleParser.KW_DATABASES:
	        case InceptorOracleParser.KW_MATERIALIZED:
	        case InceptorOracleParser.KW_SCHEMA:
	        case InceptorOracleParser.KW_SCHEMAS:
	        case InceptorOracleParser.KW_GRANT:
	        case InceptorOracleParser.KW_REVOKE:
	        case InceptorOracleParser.KW_SSL:
	        case InceptorOracleParser.KW_UNDO:
	        case InceptorOracleParser.KW_LOCK:
	        case InceptorOracleParser.KW_LOCKS:
	        case InceptorOracleParser.KW_UNLOCK:
	        case InceptorOracleParser.KW_SHARED:
	        case InceptorOracleParser.KW_EXCLUSIVE:
	        case InceptorOracleParser.KW_PROCEDURE:
	        case InceptorOracleParser.KW_UNSIGNED:
	        case InceptorOracleParser.KW_WHILE:
	        case InceptorOracleParser.KW_READ:
	        case InceptorOracleParser.KW_READS:
	        case InceptorOracleParser.KW_PURGE:
	        case InceptorOracleParser.KW_RANGE:
	        case InceptorOracleParser.KW_ANALYZE:
	        case InceptorOracleParser.KW_BEFORE:
	        case InceptorOracleParser.KW_BETWEEN:
	        case InceptorOracleParser.KW_BOTH:
	        case InceptorOracleParser.KW_BINARY:
	        case InceptorOracleParser.KW_DEFAULT:
	        case InceptorOracleParser.KW_TYPE:
	        case InceptorOracleParser.KW_TRIGGER:
	        case InceptorOracleParser.KW_RECORDREADER:
	        case InceptorOracleParser.KW_RECORDWRITER:
	        case InceptorOracleParser.KW_SEMI:
	        case InceptorOracleParser.KW_LATERAL:
	        case InceptorOracleParser.KW_TOUCH:
	        case InceptorOracleParser.KW_ARCHIVE:
	        case InceptorOracleParser.KW_UNARCHIVE:
	        case InceptorOracleParser.KW_COMPUTE:
	        case InceptorOracleParser.KW_STATISTICS:
	        case InceptorOracleParser.KW_USE:
	        case InceptorOracleParser.KW_OPTION:
	        case InceptorOracleParser.KW_CONCATENATE:
	        case InceptorOracleParser.KW_SHOW_DATABASE:
	        case InceptorOracleParser.KW_UPDATE:
	        case InceptorOracleParser.KW_RESTRICT:
	        case InceptorOracleParser.KW_CASCADE:
	        case InceptorOracleParser.KW_SKEWED:
	        case InceptorOracleParser.KW_DIRECTORIES:
	        case InceptorOracleParser.KW_WINDOWRESET:
	        case InceptorOracleParser.KW_SESSIONSTART:
	        case InceptorOracleParser.KW_SESSIONSTOP:
	        case InceptorOracleParser.KW_SESSIONEXPIRE:
	        case InceptorOracleParser.KW_SESSIONEXPIRE_DISCARD:
	        case InceptorOracleParser.KW_SESSIONEXPIRE_COMPLETE:
	        case InceptorOracleParser.KW_STREAMWINDOW:
	        case InceptorOracleParser.KW_STREAMWINDOWSLIDELENGTH:
	        case InceptorOracleParser.KW_STREAMWINDOWSEPARATED:
	        case InceptorOracleParser.KW_FOLLOWEDBY:
	        case InceptorOracleParser.KW_NOTFOLLOWEDBY:
	        case InceptorOracleParser.KW_NOTNEXT:
	        case InceptorOracleParser.KW_PATTERN_TIMES:
	        case InceptorOracleParser.KW_CURRVALUE:
	        case InceptorOracleParser.KW_GROUPING:
	        case InceptorOracleParser.KW_SETS:
	        case InceptorOracleParser.KW_TRUNCATE:
	        case InceptorOracleParser.KW_NOSCAN:
	        case InceptorOracleParser.KW_USER:
	        case InceptorOracleParser.KW_QUOTA:
	        case InceptorOracleParser.KW_PERMISSION:
	        case InceptorOracleParser.KW_ROLE:
	        case InceptorOracleParser.KW_ROLES:
	        case InceptorOracleParser.KW_INNER:
	        case InceptorOracleParser.KW_ADMIN:
	        case InceptorOracleParser.KW_OWNER:
	        case InceptorOracleParser.KW_PRINCIPALS:
	        case InceptorOracleParser.KW_CONSTANT:
	        case InceptorOracleParser.KW_CONSTRAINT:
	        case InceptorOracleParser.KW_VALUES:
	        case InceptorOracleParser.KW_YEAR:
	        case InceptorOracleParser.KW_MONTH:
	        case InceptorOracleParser.KW_DAY:
	        case InceptorOracleParser.KW_MINUTE:
	        case InceptorOracleParser.KW_HOUR:
	        case InceptorOracleParser.KW_SECOND:
	        case InceptorOracleParser.KW_INTERVAL:
	        case InceptorOracleParser.KW_SYSDATE:
	        case InceptorOracleParser.KW_NOMAXVALUE:
	        case InceptorOracleParser.KW_MINVALUE:
	        case InceptorOracleParser.KW_NOMINVALUE:
	        case InceptorOracleParser.KW_CYCLE:
	        case InceptorOracleParser.KW_CACHE:
	        case InceptorOracleParser.KW_CACHEDMETRIC:
	        case InceptorOracleParser.KW_CACHEDMETRICS:
	        case InceptorOracleParser.KW_NOCACHE:
	        case InceptorOracleParser.KW_NOORDER:
	        case InceptorOracleParser.KW_MERGE:
	        case InceptorOracleParser.KW_PLANT:
	        case InceptorOracleParser.KW_IMMEDIATE:
	        case InceptorOracleParser.KW_COMPACT:
	        case InceptorOracleParser.KW_STOP:
	        case InceptorOracleParser.KW_LIST:
	        case InceptorOracleParser.KW_TRANSACTION:
	        case InceptorOracleParser.KW_WORK:
	        case InceptorOracleParser.KW_SPACE:
	        case InceptorOracleParser.KW_CONF:
	        case InceptorOracleParser.KW_DEFINED:
	        case InceptorOracleParser.KW_INTEGER:
	        case InceptorOracleParser.KW_ONLY:
	        case InceptorOracleParser.KW_SERVER:
	        case InceptorOracleParser.KW_TRANSACTIONS:
	        case InceptorOracleParser.KW_URI:
	        case InceptorOracleParser.KW_WRITE:
	        case InceptorOracleParser.KW_FACL:
	        case InceptorOracleParser.KW_FOUND:
	        case InceptorOracleParser.KW_LEVEL:
	        case InceptorOracleParser.KW_PUBLIC:
	        case InceptorOracleParser.KW_LINKS:
	        case InceptorOracleParser.KW_CONNECT:
	        case InceptorOracleParser.KW_APPLICATION:
	        case InceptorOracleParser.KW_APPLICATIONS:
	        case InceptorOracleParser.KW_APP:
	        case InceptorOracleParser.KW_APPS:
	        case InceptorOracleParser.KW_INFINITE:
	        case InceptorOracleParser.KW_WAIT:
	        case InceptorOracleParser.KW_PRIMARY:
	        case InceptorOracleParser.KW_FOREIGN:
	        case InceptorOracleParser.KW_REFERENCES:
	        case InceptorOracleParser.KW_VALIDATE:
	        case InceptorOracleParser.KW_NOVALIDATE:
	        case InceptorOracleParser.KW_RELY:
	        case InceptorOracleParser.KW_NORELY:
	        case InceptorOracleParser.KW_KEY:
	        case InceptorOracleParser.KW_SEGMENT:
	        case InceptorOracleParser.KW_LENGTH:
	        case InceptorOracleParser.KW_ATTACH:
	        case InceptorOracleParser.KW_DETTACH:
	        case InceptorOracleParser.KW_SHARD:
	        case InceptorOracleParser.KW_NUM:
	        case InceptorOracleParser.KW_FULLTEXT:
	        case InceptorOracleParser.KW_TABLESIZE:
	        case InceptorOracleParser.KW_TABLET:
	        case InceptorOracleParser.KW_CAPACITY:
	        case InceptorOracleParser.KW_ANALYZER:
	        case InceptorOracleParser.KW_SYNC:
	        case InceptorOracleParser.KW_NO_INDEX:
	        case InceptorOracleParser.KW_LOG:
	        case InceptorOracleParser.KW_FILE:
	        case InceptorOracleParser.KW_JAR:
	        case InceptorOracleParser.KW_PERMANENT:
	        case InceptorOracleParser.KW_SCHEDULER:
	        case InceptorOracleParser.KW_MODE:
	        case InceptorOracleParser.Identifier:
	        case InceptorOracleParser.KW_NOCOPY:
	        case InceptorOracleParser.KW_VARRAY:
	        case InceptorOracleParser.KW_PACKAGE:
	        case InceptorOracleParser.KW_PACKAGES:
	        case InceptorOracleParser.KW_BODY:
	        case InceptorOracleParser.KW_ISOPEN:
	        case InceptorOracleParser.KW_NOTFOUND:
	        case InceptorOracleParser.KW_ROWCOUNT:
	        case InceptorOracleParser.KW_BULK_ROWCOUNT:
	        case InceptorOracleParser.KW_BULK_EXCEPTIONS:
	        case InceptorOracleParser.KW_REVERSE:
	        case InceptorOracleParser.KW_SAVE:
	        case InceptorOracleParser.KW_EXCEPTIONS:
	        case InceptorOracleParser.KW_INDICES:
	        case InceptorOracleParser.KW_REF:
	        case InceptorOracleParser.KW_YEARS:
	        case InceptorOracleParser.KW_MONTHS:
	        case InceptorOracleParser.KW_DAYS:
	        case InceptorOracleParser.KW_HOURS:
	        case InceptorOracleParser.KW_MINUTES:
	        case InceptorOracleParser.KW_SECONDS:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6228;
	            this.identifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectItem() {
	    let localctx = new SelectItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1066, InceptorOracleParser.RULE_selectItem);
	    var _la = 0; // Token type
	    try {
	        this.state = 6251;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,671,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6231;
	            this.expression();
	            this.state = 6248;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,670,this._ctx);
	            if(la_===1) {
	                this.state = 6233;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===InceptorOracleParser.KW_AS) {
	                    this.state = 6232;
	                    this.match(InceptorOracleParser.KW_AS);
	                }

	                this.state = 6235;
	                this.columnAlias();

	            } else if(la_===2) {
	                this.state = 6236;
	                this.match(InceptorOracleParser.KW_AS);
	                this.state = 6237;
	                this.match(InceptorOracleParser.LPAREN);
	                this.state = 6238;
	                this.columnAlias();
	                this.state = 6243;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===InceptorOracleParser.COMMA) {
	                    this.state = 6239;
	                    this.match(InceptorOracleParser.COMMA);
	                    this.state = 6240;
	                    this.columnAlias();
	                    this.state = 6245;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 6246;
	                this.match(InceptorOracleParser.RPAREN);

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6250;
	            this.tableAllColumns();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	trfmClause() {
	    let localctx = new TrfmClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1068, InceptorOracleParser.RULE_trfmClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6257;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case InceptorOracleParser.KW_MAP:
	            this.state = 6253;
	            this.match(InceptorOracleParser.KW_MAP);
	            this.state = 6254;
	            this.selectExpressionList();
	            break;
	        case InceptorOracleParser.KW_REDUCE:
	            this.state = 6255;
	            this.match(InceptorOracleParser.KW_REDUCE);
	            this.state = 6256;
	            this.selectExpressionList();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 6259;
	        localctx.inSerde = this.rowFormat();
	        this.state = 6260;
	        localctx.inRec = this.recordWriter();
	        this.state = 6261;
	        this.match(InceptorOracleParser.KW_USING);
	        this.state = 6262;
	        this.match(InceptorOracleParser.StringLiteral);
	        this.state = 6277;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_AS) {
	            this.state = 6263;
	            this.match(InceptorOracleParser.KW_AS);
	            this.state = 6275;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case InceptorOracleParser.LPAREN:
	                this.state = 6264;
	                this.match(InceptorOracleParser.LPAREN);
	                this.state = 6267;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,673,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 6265;
	                    this.aliasList();
	                    break;

	                case 2:
	                    this.state = 6266;
	                    this.columnNameTypeList();
	                    break;

	                }
	                this.state = 6269;
	                this.match(InceptorOracleParser.RPAREN);
	                break;
	            case InceptorOracleParser.KW_TRUE:
	            case InceptorOracleParser.KW_FALSE:
	            case InceptorOracleParser.KW_ALL:
	            case InceptorOracleParser.KW_LIKE:
	            case InceptorOracleParser.KW_NO:
	            case InceptorOracleParser.KW_ANY:
	            case InceptorOracleParser.KW_EXISTS:
	            case InceptorOracleParser.KW_ASC:
	            case InceptorOracleParser.KW_DESC:
	            case InceptorOracleParser.KW_ORDER:
	            case InceptorOracleParser.KW_GROUP:
	            case InceptorOracleParser.KW_INCREMENT:
	            case InceptorOracleParser.KW_BY:
	            case InceptorOracleParser.KW_HASH:
	            case InceptorOracleParser.KW_INSERT:
	            case InceptorOracleParser.KW_OVERWRITE:
	            case InceptorOracleParser.KW_OUTER:
	            case InceptorOracleParser.KW_STREAMJOB:
	            case InceptorOracleParser.KW_STREAMJOBS:
	            case InceptorOracleParser.KW_AT:
	            case InceptorOracleParser.KW_LEFT:
	            case InceptorOracleParser.KW_RIGHT:
	            case InceptorOracleParser.KW_FULL:
	            case InceptorOracleParser.KW_PARTITION:
	            case InceptorOracleParser.KW_PARTITIONS:
	            case InceptorOracleParser.KW_PATTERN:
	            case InceptorOracleParser.KW_TABLE:
	            case InceptorOracleParser.KW_TABLES:
	            case InceptorOracleParser.KW_SEQUENCE:
	            case InceptorOracleParser.KW_SEQUENCES:
	            case InceptorOracleParser.KW_COLUMNS:
	            case InceptorOracleParser.KW_INDEX:
	            case InceptorOracleParser.KW_INDEXES:
	            case InceptorOracleParser.KW_REBUILD:
	            case InceptorOracleParser.KW_FUNCTIONS:
	            case InceptorOracleParser.KW_SHOW:
	            case InceptorOracleParser.KW_MSCK:
	            case InceptorOracleParser.KW_REPAIR:
	            case InceptorOracleParser.KW_DIRECTORY:
	            case InceptorOracleParser.KW_LOCAL:
	            case InceptorOracleParser.KW_GLOBAL:
	            case InceptorOracleParser.KW_USING:
	            case InceptorOracleParser.KW_CLUSTER:
	            case InceptorOracleParser.KW_DISTRIBUTE:
	            case InceptorOracleParser.KW_SORT:
	            case InceptorOracleParser.KW_UNION:
	            case InceptorOracleParser.KW_LOAD:
	            case InceptorOracleParser.KW_EXPORT:
	            case InceptorOracleParser.KW_IMPORT:
	            case InceptorOracleParser.KW_DATA:
	            case InceptorOracleParser.KW_INPATH:
	            case InceptorOracleParser.KW_IS:
	            case InceptorOracleParser.KW_NULLS:
	            case InceptorOracleParser.KW_CREATE:
	            case InceptorOracleParser.KW_EXTERNAL:
	            case InceptorOracleParser.KW_ALTER:
	            case InceptorOracleParser.KW_CHANGE:
	            case InceptorOracleParser.KW_FIRST:
	            case InceptorOracleParser.KW_LAST:
	            case InceptorOracleParser.KW_AFTER:
	            case InceptorOracleParser.KW_DESCRIBE:
	            case InceptorOracleParser.KW_DROP:
	            case InceptorOracleParser.KW_RENAME:
	            case InceptorOracleParser.KW_IGNORE:
	            case InceptorOracleParser.KW_RESPECT:
	            case InceptorOracleParser.KW_PROTECTION:
	            case InceptorOracleParser.KW_TO:
	            case InceptorOracleParser.KW_COMMENT:
	            case InceptorOracleParser.KW_PROMPT:
	            case InceptorOracleParser.KW_SPOOL:
	            case InceptorOracleParser.KW_BOOLEAN:
	            case InceptorOracleParser.KW_TINYINT:
	            case InceptorOracleParser.KW_BYTE:
	            case InceptorOracleParser.KW_SMALLINT:
	            case InceptorOracleParser.KW_INT:
	            case InceptorOracleParser.KW_BIGINT:
	            case InceptorOracleParser.KW_FLOAT:
	            case InceptorOracleParser.KW_DOUBLE:
	            case InceptorOracleParser.KW_DATE:
	            case InceptorOracleParser.KW_DATETIME:
	            case InceptorOracleParser.KW_TIMESTAMP:
	            case InceptorOracleParser.KW_TIME:
	            case InceptorOracleParser.KW_DECIMAL:
	            case InceptorOracleParser.KW_STRING:
	            case InceptorOracleParser.KW_GEO:
	            case InceptorOracleParser.KW_ARRAY:
	            case InceptorOracleParser.KW_STRUCT:
	            case InceptorOracleParser.KW_UNIONTYPE:
	            case InceptorOracleParser.KW_PARTITIONED:
	            case InceptorOracleParser.KW_ROUTED:
	            case InceptorOracleParser.KW_CLUSTERED:
	            case InceptorOracleParser.KW_SORTED:
	            case InceptorOracleParser.KW_NEXT:
	            case InceptorOracleParser.KW_NEXTVALUE:
	            case InceptorOracleParser.KW_BUCKETS:
	            case InceptorOracleParser.KW_ROW:
	            case InceptorOracleParser.KW_ROWS:
	            case InceptorOracleParser.KW_FORMAT:
	            case InceptorOracleParser.KW_DELIMITED:
	            case InceptorOracleParser.KW_FIELDS:
	            case InceptorOracleParser.KW_TERMINATED:
	            case InceptorOracleParser.KW_ESCAPED:
	            case InceptorOracleParser.KW_COLLECTION:
	            case InceptorOracleParser.KW_ITEMS:
	            case InceptorOracleParser.KW_KEYS:
	            case InceptorOracleParser.KW_KEY_TYPE:
	            case InceptorOracleParser.KW_LINES:
	            case InceptorOracleParser.KW_STORED:
	            case InceptorOracleParser.KW_FILEFORMAT:
	            case InceptorOracleParser.KW_SEQUENCEFILE:
	            case InceptorOracleParser.KW_TEXTFILE:
	            case InceptorOracleParser.KW_CSVFILE:
	            case InceptorOracleParser.KW_FWCFILE:
	            case InceptorOracleParser.KW_RCFILE:
	            case InceptorOracleParser.KW_ORCFILE:
	            case InceptorOracleParser.KW_HOLODESK:
	            case InceptorOracleParser.KW_STELLARDB:
	            case InceptorOracleParser.KW_ORCTRANSACTIONFILE:
	            case InceptorOracleParser.KW_PARQUET:
	            case InceptorOracleParser.KW_HYPERDRIVE:
	            case InceptorOracleParser.KW_ESDRIVE:
	            case InceptorOracleParser.KW_INPUTFORMAT:
	            case InceptorOracleParser.KW_OUTPUTFORMAT:
	            case InceptorOracleParser.KW_INPUTDRIVER:
	            case InceptorOracleParser.KW_OUTPUTDRIVER:
	            case InceptorOracleParser.KW_OFFLINE:
	            case InceptorOracleParser.KW_ENABLE:
	            case InceptorOracleParser.KW_DISABLE:
	            case InceptorOracleParser.KW_READONLY:
	            case InceptorOracleParser.KW_NO_DROP:
	            case InceptorOracleParser.KW_LOCATION:
	            case InceptorOracleParser.KW_BUCKET:
	            case InceptorOracleParser.KW_OUT:
	            case InceptorOracleParser.KW_OF:
	            case InceptorOracleParser.KW_PERCENT:
	            case InceptorOracleParser.KW_ADD:
	            case InceptorOracleParser.KW_REPLACE:
	            case InceptorOracleParser.KW_RLIKE:
	            case InceptorOracleParser.KW_REGEXP:
	            case InceptorOracleParser.KW_TEMPORARY:
	            case InceptorOracleParser.KW_RESOURCE:
	            case InceptorOracleParser.KW_RELOAD:
	            case InceptorOracleParser.KW_EXPLAIN:
	            case InceptorOracleParser.KW_FORMATTED:
	            case InceptorOracleParser.KW_PRETTY:
	            case InceptorOracleParser.KW_DEPENDENCY:
	            case InceptorOracleParser.KW_LOGICAL:
	            case InceptorOracleParser.KW_COST:
	            case InceptorOracleParser.KW_SERDE:
	            case InceptorOracleParser.KW_WITH:
	            case InceptorOracleParser.KW_WITHIN:
	            case InceptorOracleParser.KW_DEFERRED:
	            case InceptorOracleParser.KW_SERDEPROPERTIES:
	            case InceptorOracleParser.KW_DBPROPERTIES:
	            case InceptorOracleParser.KW_LIMIT:
	            case InceptorOracleParser.KW_SET:
	            case InceptorOracleParser.KW_UNSET:
	            case InceptorOracleParser.KW_TBLPROPERTIES:
	            case InceptorOracleParser.KW_IDXPROPERTIES:
	            case InceptorOracleParser.KW_VALUE_TYPE:
	            case InceptorOracleParser.KW_ELEM_TYPE:
	            case InceptorOracleParser.KW_PRIOR:
	            case InceptorOracleParser.KW_NOCYCLE:
	            case InceptorOracleParser.KW_MAPJOIN:
	            case InceptorOracleParser.KW_COMBINE:
	            case InceptorOracleParser.KW_COMBINE_STRUCT_INDEX:
	            case InceptorOracleParser.KW_GLKJOIN:
	            case InceptorOracleParser.KW_USE_INDEX:
	            case InceptorOracleParser.KW_STARGATE:
	            case InceptorOracleParser.KW_USE_BULKLOAD:
	            case InceptorOracleParser.KW_ADHOC:
	            case InceptorOracleParser.KW_PRECOMPILE:
	            case InceptorOracleParser.KW_STREAMTABLE:
	            case InceptorOracleParser.KW_STREAM:
	            case InceptorOracleParser.KW_RULEBASE:
	            case InceptorOracleParser.KW_RULEBASES:
	            case InceptorOracleParser.KW_RULE:
	            case InceptorOracleParser.KW_RULES:
	            case InceptorOracleParser.KW_MEET:
	            case InceptorOracleParser.KW_MUST:
	            case InceptorOracleParser.KW_MUSTNOT:
	            case InceptorOracleParser.KW_POLICY:
	            case InceptorOracleParser.KW_POLICIES:
	            case InceptorOracleParser.KW_REMOVE:
	            case InceptorOracleParser.KW_POLICYKEY:
	            case InceptorOracleParser.KW_POLICY_RULE:
	            case InceptorOracleParser.KW_LOOKUP:
	            case InceptorOracleParser.KW_RULE_FUNCTION:
	            case InceptorOracleParser.KW_RULE_FUNCTIONS:
	            case InceptorOracleParser.KW_RULE_FUNCTION_PROPERTIES:
	            case InceptorOracleParser.KW_HOLD_DDLTIME:
	            case InceptorOracleParser.KW_CLUSTERSTATUS:
	            case InceptorOracleParser.KW_UTC:
	            case InceptorOracleParser.KW_UTCTIMESTAMP:
	            case InceptorOracleParser.KW_LONG:
	            case InceptorOracleParser.KW_DELETE:
	            case InceptorOracleParser.KW_PLUS:
	            case InceptorOracleParser.KW_MINUS:
	            case InceptorOracleParser.KW_OP_CONCAT:
	            case InceptorOracleParser.KW_FETCH:
	            case InceptorOracleParser.KW_INTERSECT:
	            case InceptorOracleParser.KW_VIEW:
	            case InceptorOracleParser.KW_IN:
	            case InceptorOracleParser.KW_DATABASES:
	            case InceptorOracleParser.KW_MATERIALIZED:
	            case InceptorOracleParser.KW_SCHEMA:
	            case InceptorOracleParser.KW_SCHEMAS:
	            case InceptorOracleParser.KW_GRANT:
	            case InceptorOracleParser.KW_REVOKE:
	            case InceptorOracleParser.KW_SSL:
	            case InceptorOracleParser.KW_UNDO:
	            case InceptorOracleParser.KW_LOCK:
	            case InceptorOracleParser.KW_LOCKS:
	            case InceptorOracleParser.KW_UNLOCK:
	            case InceptorOracleParser.KW_SHARED:
	            case InceptorOracleParser.KW_EXCLUSIVE:
	            case InceptorOracleParser.KW_PROCEDURE:
	            case InceptorOracleParser.KW_UNSIGNED:
	            case InceptorOracleParser.KW_WHILE:
	            case InceptorOracleParser.KW_READ:
	            case InceptorOracleParser.KW_READS:
	            case InceptorOracleParser.KW_PURGE:
	            case InceptorOracleParser.KW_RANGE:
	            case InceptorOracleParser.KW_ANALYZE:
	            case InceptorOracleParser.KW_BEFORE:
	            case InceptorOracleParser.KW_BETWEEN:
	            case InceptorOracleParser.KW_BOTH:
	            case InceptorOracleParser.KW_BINARY:
	            case InceptorOracleParser.KW_DEFAULT:
	            case InceptorOracleParser.KW_TYPE:
	            case InceptorOracleParser.KW_TRIGGER:
	            case InceptorOracleParser.KW_RECORDREADER:
	            case InceptorOracleParser.KW_RECORDWRITER:
	            case InceptorOracleParser.KW_SEMI:
	            case InceptorOracleParser.KW_LATERAL:
	            case InceptorOracleParser.KW_TOUCH:
	            case InceptorOracleParser.KW_ARCHIVE:
	            case InceptorOracleParser.KW_UNARCHIVE:
	            case InceptorOracleParser.KW_COMPUTE:
	            case InceptorOracleParser.KW_STATISTICS:
	            case InceptorOracleParser.KW_USE:
	            case InceptorOracleParser.KW_OPTION:
	            case InceptorOracleParser.KW_CONCATENATE:
	            case InceptorOracleParser.KW_SHOW_DATABASE:
	            case InceptorOracleParser.KW_UPDATE:
	            case InceptorOracleParser.KW_RESTRICT:
	            case InceptorOracleParser.KW_CASCADE:
	            case InceptorOracleParser.KW_SKEWED:
	            case InceptorOracleParser.KW_DIRECTORIES:
	            case InceptorOracleParser.KW_WINDOWRESET:
	            case InceptorOracleParser.KW_SESSIONSTART:
	            case InceptorOracleParser.KW_SESSIONSTOP:
	            case InceptorOracleParser.KW_SESSIONEXPIRE:
	            case InceptorOracleParser.KW_SESSIONEXPIRE_DISCARD:
	            case InceptorOracleParser.KW_SESSIONEXPIRE_COMPLETE:
	            case InceptorOracleParser.KW_STREAMWINDOW:
	            case InceptorOracleParser.KW_STREAMWINDOWSLIDELENGTH:
	            case InceptorOracleParser.KW_STREAMWINDOWSEPARATED:
	            case InceptorOracleParser.KW_FOLLOWEDBY:
	            case InceptorOracleParser.KW_NOTFOLLOWEDBY:
	            case InceptorOracleParser.KW_NOTNEXT:
	            case InceptorOracleParser.KW_PATTERN_TIMES:
	            case InceptorOracleParser.KW_CURRVALUE:
	            case InceptorOracleParser.KW_GROUPING:
	            case InceptorOracleParser.KW_SETS:
	            case InceptorOracleParser.KW_TRUNCATE:
	            case InceptorOracleParser.KW_NOSCAN:
	            case InceptorOracleParser.KW_USER:
	            case InceptorOracleParser.KW_QUOTA:
	            case InceptorOracleParser.KW_PERMISSION:
	            case InceptorOracleParser.KW_ROLE:
	            case InceptorOracleParser.KW_ROLES:
	            case InceptorOracleParser.KW_INNER:
	            case InceptorOracleParser.KW_ADMIN:
	            case InceptorOracleParser.KW_OWNER:
	            case InceptorOracleParser.KW_PRINCIPALS:
	            case InceptorOracleParser.KW_CONSTANT:
	            case InceptorOracleParser.KW_CONSTRAINT:
	            case InceptorOracleParser.KW_VALUES:
	            case InceptorOracleParser.KW_YEAR:
	            case InceptorOracleParser.KW_MONTH:
	            case InceptorOracleParser.KW_DAY:
	            case InceptorOracleParser.KW_MINUTE:
	            case InceptorOracleParser.KW_HOUR:
	            case InceptorOracleParser.KW_SECOND:
	            case InceptorOracleParser.KW_INTERVAL:
	            case InceptorOracleParser.KW_SYSDATE:
	            case InceptorOracleParser.KW_NOMAXVALUE:
	            case InceptorOracleParser.KW_MINVALUE:
	            case InceptorOracleParser.KW_NOMINVALUE:
	            case InceptorOracleParser.KW_CYCLE:
	            case InceptorOracleParser.KW_CACHE:
	            case InceptorOracleParser.KW_CACHEDMETRIC:
	            case InceptorOracleParser.KW_CACHEDMETRICS:
	            case InceptorOracleParser.KW_NOCACHE:
	            case InceptorOracleParser.KW_NOORDER:
	            case InceptorOracleParser.KW_MERGE:
	            case InceptorOracleParser.KW_PLANT:
	            case InceptorOracleParser.KW_IMMEDIATE:
	            case InceptorOracleParser.KW_COMPACT:
	            case InceptorOracleParser.KW_STOP:
	            case InceptorOracleParser.KW_LIST:
	            case InceptorOracleParser.KW_TRANSACTION:
	            case InceptorOracleParser.KW_WORK:
	            case InceptorOracleParser.KW_SPACE:
	            case InceptorOracleParser.KW_CONF:
	            case InceptorOracleParser.KW_DEFINED:
	            case InceptorOracleParser.KW_INTEGER:
	            case InceptorOracleParser.KW_ONLY:
	            case InceptorOracleParser.KW_SERVER:
	            case InceptorOracleParser.KW_TRANSACTIONS:
	            case InceptorOracleParser.KW_URI:
	            case InceptorOracleParser.KW_WRITE:
	            case InceptorOracleParser.KW_FACL:
	            case InceptorOracleParser.KW_FOUND:
	            case InceptorOracleParser.KW_LEVEL:
	            case InceptorOracleParser.KW_PUBLIC:
	            case InceptorOracleParser.KW_LINKS:
	            case InceptorOracleParser.KW_CONNECT:
	            case InceptorOracleParser.KW_APPLICATION:
	            case InceptorOracleParser.KW_APPLICATIONS:
	            case InceptorOracleParser.KW_APP:
	            case InceptorOracleParser.KW_APPS:
	            case InceptorOracleParser.KW_INFINITE:
	            case InceptorOracleParser.KW_WAIT:
	            case InceptorOracleParser.KW_PRIMARY:
	            case InceptorOracleParser.KW_FOREIGN:
	            case InceptorOracleParser.KW_REFERENCES:
	            case InceptorOracleParser.KW_VALIDATE:
	            case InceptorOracleParser.KW_NOVALIDATE:
	            case InceptorOracleParser.KW_RELY:
	            case InceptorOracleParser.KW_NORELY:
	            case InceptorOracleParser.KW_KEY:
	            case InceptorOracleParser.KW_SEGMENT:
	            case InceptorOracleParser.KW_LENGTH:
	            case InceptorOracleParser.KW_ATTACH:
	            case InceptorOracleParser.KW_DETTACH:
	            case InceptorOracleParser.KW_SHARD:
	            case InceptorOracleParser.KW_NUM:
	            case InceptorOracleParser.KW_FULLTEXT:
	            case InceptorOracleParser.KW_TABLESIZE:
	            case InceptorOracleParser.KW_TABLET:
	            case InceptorOracleParser.KW_CAPACITY:
	            case InceptorOracleParser.KW_ANALYZER:
	            case InceptorOracleParser.KW_SYNC:
	            case InceptorOracleParser.KW_NO_INDEX:
	            case InceptorOracleParser.KW_LOG:
	            case InceptorOracleParser.KW_FILE:
	            case InceptorOracleParser.KW_JAR:
	            case InceptorOracleParser.KW_PERMANENT:
	            case InceptorOracleParser.KW_SCHEDULER:
	            case InceptorOracleParser.KW_MODE:
	            case InceptorOracleParser.Identifier:
	            case InceptorOracleParser.KW_NOCOPY:
	            case InceptorOracleParser.KW_VARRAY:
	            case InceptorOracleParser.KW_PACKAGE:
	            case InceptorOracleParser.KW_PACKAGES:
	            case InceptorOracleParser.KW_BODY:
	            case InceptorOracleParser.KW_ISOPEN:
	            case InceptorOracleParser.KW_NOTFOUND:
	            case InceptorOracleParser.KW_ROWCOUNT:
	            case InceptorOracleParser.KW_BULK_ROWCOUNT:
	            case InceptorOracleParser.KW_BULK_EXCEPTIONS:
	            case InceptorOracleParser.KW_REVERSE:
	            case InceptorOracleParser.KW_SAVE:
	            case InceptorOracleParser.KW_EXCEPTIONS:
	            case InceptorOracleParser.KW_INDICES:
	            case InceptorOracleParser.KW_REF:
	            case InceptorOracleParser.KW_YEARS:
	            case InceptorOracleParser.KW_MONTHS:
	            case InceptorOracleParser.KW_DAYS:
	            case InceptorOracleParser.KW_HOURS:
	            case InceptorOracleParser.KW_MINUTES:
	            case InceptorOracleParser.KW_SECONDS:
	                this.state = 6273;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,674,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 6271;
	                    this.aliasList();
	                    break;

	                case 2:
	                    this.state = 6272;
	                    this.columnNameTypeList();
	                    break;

	                }
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	        }

	        this.state = 6279;
	        localctx.outSerde = this.rowFormat();
	        this.state = 6280;
	        localctx.outRec = this.recordReader();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectExpression() {
	    let localctx = new SelectExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1070, InceptorOracleParser.RULE_selectExpression);
	    try {
	        this.state = 6284;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,677,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6282;
	            this.expression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6283;
	            this.tableAllColumns();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectExpressionList() {
	    let localctx = new SelectExpressionListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1072, InceptorOracleParser.RULE_selectExpressionList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6286;
	        this.selectExpression();
	        this.state = 6291;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===InceptorOracleParser.COMMA) {
	            this.state = 6287;
	            this.match(InceptorOracleParser.COMMA);
	            this.state = 6288;
	            this.selectExpression();
	            this.state = 6293;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rowFormat() {
	    let localctx = new RowFormatContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1074, InceptorOracleParser.RULE_rowFormat);
	    try {
	        this.state = 6297;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,679,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6294;
	            this.rowFormatSerde();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6295;
	            this.rowFormatDelimited();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordReader() {
	    let localctx = new RecordReaderContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1076, InceptorOracleParser.RULE_recordReader);
	    try {
	        this.state = 6302;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,680,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6299;
	            this.match(InceptorOracleParser.KW_RECORDREADER);
	            this.state = 6300;
	            this.match(InceptorOracleParser.StringLiteral);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordWriter() {
	    let localctx = new RecordWriterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1078, InceptorOracleParser.RULE_recordWriter);
	    try {
	        this.state = 6307;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case InceptorOracleParser.KW_RECORDWRITER:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6304;
	            this.match(InceptorOracleParser.KW_RECORDWRITER);
	            this.state = 6305;
	            this.match(InceptorOracleParser.StringLiteral);
	            break;
	        case InceptorOracleParser.KW_USING:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectTrfmClause() {
	    let localctx = new SelectTrfmClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1080, InceptorOracleParser.RULE_selectTrfmClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6309;
	        this.match(InceptorOracleParser.LPAREN);
	        this.state = 6310;
	        this.selectExpressionList();
	        this.state = 6311;
	        this.match(InceptorOracleParser.RPAREN);
	        this.state = 6312;
	        localctx.inSerde = this.rowFormat();
	        this.state = 6313;
	        localctx.inRec = this.recordWriter();
	        this.state = 6314;
	        this.match(InceptorOracleParser.KW_USING);
	        this.state = 6315;
	        this.match(InceptorOracleParser.StringLiteral);
	        this.state = 6330;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_AS) {
	            this.state = 6316;
	            this.match(InceptorOracleParser.KW_AS);
	            this.state = 6328;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case InceptorOracleParser.LPAREN:
	                this.state = 6317;
	                this.match(InceptorOracleParser.LPAREN);
	                this.state = 6320;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,682,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 6318;
	                    this.aliasList();
	                    break;

	                case 2:
	                    this.state = 6319;
	                    this.columnNameTypeList();
	                    break;

	                }
	                this.state = 6322;
	                this.match(InceptorOracleParser.RPAREN);
	                break;
	            case InceptorOracleParser.KW_TRUE:
	            case InceptorOracleParser.KW_FALSE:
	            case InceptorOracleParser.KW_ALL:
	            case InceptorOracleParser.KW_LIKE:
	            case InceptorOracleParser.KW_NO:
	            case InceptorOracleParser.KW_ANY:
	            case InceptorOracleParser.KW_EXISTS:
	            case InceptorOracleParser.KW_ASC:
	            case InceptorOracleParser.KW_DESC:
	            case InceptorOracleParser.KW_ORDER:
	            case InceptorOracleParser.KW_GROUP:
	            case InceptorOracleParser.KW_INCREMENT:
	            case InceptorOracleParser.KW_BY:
	            case InceptorOracleParser.KW_HASH:
	            case InceptorOracleParser.KW_INSERT:
	            case InceptorOracleParser.KW_OVERWRITE:
	            case InceptorOracleParser.KW_OUTER:
	            case InceptorOracleParser.KW_STREAMJOB:
	            case InceptorOracleParser.KW_STREAMJOBS:
	            case InceptorOracleParser.KW_AT:
	            case InceptorOracleParser.KW_LEFT:
	            case InceptorOracleParser.KW_RIGHT:
	            case InceptorOracleParser.KW_FULL:
	            case InceptorOracleParser.KW_PARTITION:
	            case InceptorOracleParser.KW_PARTITIONS:
	            case InceptorOracleParser.KW_PATTERN:
	            case InceptorOracleParser.KW_TABLE:
	            case InceptorOracleParser.KW_TABLES:
	            case InceptorOracleParser.KW_SEQUENCE:
	            case InceptorOracleParser.KW_SEQUENCES:
	            case InceptorOracleParser.KW_COLUMNS:
	            case InceptorOracleParser.KW_INDEX:
	            case InceptorOracleParser.KW_INDEXES:
	            case InceptorOracleParser.KW_REBUILD:
	            case InceptorOracleParser.KW_FUNCTIONS:
	            case InceptorOracleParser.KW_SHOW:
	            case InceptorOracleParser.KW_MSCK:
	            case InceptorOracleParser.KW_REPAIR:
	            case InceptorOracleParser.KW_DIRECTORY:
	            case InceptorOracleParser.KW_LOCAL:
	            case InceptorOracleParser.KW_GLOBAL:
	            case InceptorOracleParser.KW_USING:
	            case InceptorOracleParser.KW_CLUSTER:
	            case InceptorOracleParser.KW_DISTRIBUTE:
	            case InceptorOracleParser.KW_SORT:
	            case InceptorOracleParser.KW_UNION:
	            case InceptorOracleParser.KW_LOAD:
	            case InceptorOracleParser.KW_EXPORT:
	            case InceptorOracleParser.KW_IMPORT:
	            case InceptorOracleParser.KW_DATA:
	            case InceptorOracleParser.KW_INPATH:
	            case InceptorOracleParser.KW_IS:
	            case InceptorOracleParser.KW_NULLS:
	            case InceptorOracleParser.KW_CREATE:
	            case InceptorOracleParser.KW_EXTERNAL:
	            case InceptorOracleParser.KW_ALTER:
	            case InceptorOracleParser.KW_CHANGE:
	            case InceptorOracleParser.KW_FIRST:
	            case InceptorOracleParser.KW_LAST:
	            case InceptorOracleParser.KW_AFTER:
	            case InceptorOracleParser.KW_DESCRIBE:
	            case InceptorOracleParser.KW_DROP:
	            case InceptorOracleParser.KW_RENAME:
	            case InceptorOracleParser.KW_IGNORE:
	            case InceptorOracleParser.KW_RESPECT:
	            case InceptorOracleParser.KW_PROTECTION:
	            case InceptorOracleParser.KW_TO:
	            case InceptorOracleParser.KW_COMMENT:
	            case InceptorOracleParser.KW_PROMPT:
	            case InceptorOracleParser.KW_SPOOL:
	            case InceptorOracleParser.KW_BOOLEAN:
	            case InceptorOracleParser.KW_TINYINT:
	            case InceptorOracleParser.KW_BYTE:
	            case InceptorOracleParser.KW_SMALLINT:
	            case InceptorOracleParser.KW_INT:
	            case InceptorOracleParser.KW_BIGINT:
	            case InceptorOracleParser.KW_FLOAT:
	            case InceptorOracleParser.KW_DOUBLE:
	            case InceptorOracleParser.KW_DATE:
	            case InceptorOracleParser.KW_DATETIME:
	            case InceptorOracleParser.KW_TIMESTAMP:
	            case InceptorOracleParser.KW_TIME:
	            case InceptorOracleParser.KW_DECIMAL:
	            case InceptorOracleParser.KW_STRING:
	            case InceptorOracleParser.KW_GEO:
	            case InceptorOracleParser.KW_ARRAY:
	            case InceptorOracleParser.KW_STRUCT:
	            case InceptorOracleParser.KW_UNIONTYPE:
	            case InceptorOracleParser.KW_PARTITIONED:
	            case InceptorOracleParser.KW_ROUTED:
	            case InceptorOracleParser.KW_CLUSTERED:
	            case InceptorOracleParser.KW_SORTED:
	            case InceptorOracleParser.KW_NEXT:
	            case InceptorOracleParser.KW_NEXTVALUE:
	            case InceptorOracleParser.KW_BUCKETS:
	            case InceptorOracleParser.KW_ROW:
	            case InceptorOracleParser.KW_ROWS:
	            case InceptorOracleParser.KW_FORMAT:
	            case InceptorOracleParser.KW_DELIMITED:
	            case InceptorOracleParser.KW_FIELDS:
	            case InceptorOracleParser.KW_TERMINATED:
	            case InceptorOracleParser.KW_ESCAPED:
	            case InceptorOracleParser.KW_COLLECTION:
	            case InceptorOracleParser.KW_ITEMS:
	            case InceptorOracleParser.KW_KEYS:
	            case InceptorOracleParser.KW_KEY_TYPE:
	            case InceptorOracleParser.KW_LINES:
	            case InceptorOracleParser.KW_STORED:
	            case InceptorOracleParser.KW_FILEFORMAT:
	            case InceptorOracleParser.KW_SEQUENCEFILE:
	            case InceptorOracleParser.KW_TEXTFILE:
	            case InceptorOracleParser.KW_CSVFILE:
	            case InceptorOracleParser.KW_FWCFILE:
	            case InceptorOracleParser.KW_RCFILE:
	            case InceptorOracleParser.KW_ORCFILE:
	            case InceptorOracleParser.KW_HOLODESK:
	            case InceptorOracleParser.KW_STELLARDB:
	            case InceptorOracleParser.KW_ORCTRANSACTIONFILE:
	            case InceptorOracleParser.KW_PARQUET:
	            case InceptorOracleParser.KW_HYPERDRIVE:
	            case InceptorOracleParser.KW_ESDRIVE:
	            case InceptorOracleParser.KW_INPUTFORMAT:
	            case InceptorOracleParser.KW_OUTPUTFORMAT:
	            case InceptorOracleParser.KW_INPUTDRIVER:
	            case InceptorOracleParser.KW_OUTPUTDRIVER:
	            case InceptorOracleParser.KW_OFFLINE:
	            case InceptorOracleParser.KW_ENABLE:
	            case InceptorOracleParser.KW_DISABLE:
	            case InceptorOracleParser.KW_READONLY:
	            case InceptorOracleParser.KW_NO_DROP:
	            case InceptorOracleParser.KW_LOCATION:
	            case InceptorOracleParser.KW_BUCKET:
	            case InceptorOracleParser.KW_OUT:
	            case InceptorOracleParser.KW_OF:
	            case InceptorOracleParser.KW_PERCENT:
	            case InceptorOracleParser.KW_ADD:
	            case InceptorOracleParser.KW_REPLACE:
	            case InceptorOracleParser.KW_RLIKE:
	            case InceptorOracleParser.KW_REGEXP:
	            case InceptorOracleParser.KW_TEMPORARY:
	            case InceptorOracleParser.KW_RESOURCE:
	            case InceptorOracleParser.KW_RELOAD:
	            case InceptorOracleParser.KW_EXPLAIN:
	            case InceptorOracleParser.KW_FORMATTED:
	            case InceptorOracleParser.KW_PRETTY:
	            case InceptorOracleParser.KW_DEPENDENCY:
	            case InceptorOracleParser.KW_LOGICAL:
	            case InceptorOracleParser.KW_COST:
	            case InceptorOracleParser.KW_SERDE:
	            case InceptorOracleParser.KW_WITH:
	            case InceptorOracleParser.KW_WITHIN:
	            case InceptorOracleParser.KW_DEFERRED:
	            case InceptorOracleParser.KW_SERDEPROPERTIES:
	            case InceptorOracleParser.KW_DBPROPERTIES:
	            case InceptorOracleParser.KW_LIMIT:
	            case InceptorOracleParser.KW_SET:
	            case InceptorOracleParser.KW_UNSET:
	            case InceptorOracleParser.KW_TBLPROPERTIES:
	            case InceptorOracleParser.KW_IDXPROPERTIES:
	            case InceptorOracleParser.KW_VALUE_TYPE:
	            case InceptorOracleParser.KW_ELEM_TYPE:
	            case InceptorOracleParser.KW_PRIOR:
	            case InceptorOracleParser.KW_NOCYCLE:
	            case InceptorOracleParser.KW_MAPJOIN:
	            case InceptorOracleParser.KW_COMBINE:
	            case InceptorOracleParser.KW_COMBINE_STRUCT_INDEX:
	            case InceptorOracleParser.KW_GLKJOIN:
	            case InceptorOracleParser.KW_USE_INDEX:
	            case InceptorOracleParser.KW_STARGATE:
	            case InceptorOracleParser.KW_USE_BULKLOAD:
	            case InceptorOracleParser.KW_ADHOC:
	            case InceptorOracleParser.KW_PRECOMPILE:
	            case InceptorOracleParser.KW_STREAMTABLE:
	            case InceptorOracleParser.KW_STREAM:
	            case InceptorOracleParser.KW_RULEBASE:
	            case InceptorOracleParser.KW_RULEBASES:
	            case InceptorOracleParser.KW_RULE:
	            case InceptorOracleParser.KW_RULES:
	            case InceptorOracleParser.KW_MEET:
	            case InceptorOracleParser.KW_MUST:
	            case InceptorOracleParser.KW_MUSTNOT:
	            case InceptorOracleParser.KW_POLICY:
	            case InceptorOracleParser.KW_POLICIES:
	            case InceptorOracleParser.KW_REMOVE:
	            case InceptorOracleParser.KW_POLICYKEY:
	            case InceptorOracleParser.KW_POLICY_RULE:
	            case InceptorOracleParser.KW_LOOKUP:
	            case InceptorOracleParser.KW_RULE_FUNCTION:
	            case InceptorOracleParser.KW_RULE_FUNCTIONS:
	            case InceptorOracleParser.KW_RULE_FUNCTION_PROPERTIES:
	            case InceptorOracleParser.KW_HOLD_DDLTIME:
	            case InceptorOracleParser.KW_CLUSTERSTATUS:
	            case InceptorOracleParser.KW_UTC:
	            case InceptorOracleParser.KW_UTCTIMESTAMP:
	            case InceptorOracleParser.KW_LONG:
	            case InceptorOracleParser.KW_DELETE:
	            case InceptorOracleParser.KW_PLUS:
	            case InceptorOracleParser.KW_MINUS:
	            case InceptorOracleParser.KW_OP_CONCAT:
	            case InceptorOracleParser.KW_FETCH:
	            case InceptorOracleParser.KW_INTERSECT:
	            case InceptorOracleParser.KW_VIEW:
	            case InceptorOracleParser.KW_IN:
	            case InceptorOracleParser.KW_DATABASES:
	            case InceptorOracleParser.KW_MATERIALIZED:
	            case InceptorOracleParser.KW_SCHEMA:
	            case InceptorOracleParser.KW_SCHEMAS:
	            case InceptorOracleParser.KW_GRANT:
	            case InceptorOracleParser.KW_REVOKE:
	            case InceptorOracleParser.KW_SSL:
	            case InceptorOracleParser.KW_UNDO:
	            case InceptorOracleParser.KW_LOCK:
	            case InceptorOracleParser.KW_LOCKS:
	            case InceptorOracleParser.KW_UNLOCK:
	            case InceptorOracleParser.KW_SHARED:
	            case InceptorOracleParser.KW_EXCLUSIVE:
	            case InceptorOracleParser.KW_PROCEDURE:
	            case InceptorOracleParser.KW_UNSIGNED:
	            case InceptorOracleParser.KW_WHILE:
	            case InceptorOracleParser.KW_READ:
	            case InceptorOracleParser.KW_READS:
	            case InceptorOracleParser.KW_PURGE:
	            case InceptorOracleParser.KW_RANGE:
	            case InceptorOracleParser.KW_ANALYZE:
	            case InceptorOracleParser.KW_BEFORE:
	            case InceptorOracleParser.KW_BETWEEN:
	            case InceptorOracleParser.KW_BOTH:
	            case InceptorOracleParser.KW_BINARY:
	            case InceptorOracleParser.KW_DEFAULT:
	            case InceptorOracleParser.KW_TYPE:
	            case InceptorOracleParser.KW_TRIGGER:
	            case InceptorOracleParser.KW_RECORDREADER:
	            case InceptorOracleParser.KW_RECORDWRITER:
	            case InceptorOracleParser.KW_SEMI:
	            case InceptorOracleParser.KW_LATERAL:
	            case InceptorOracleParser.KW_TOUCH:
	            case InceptorOracleParser.KW_ARCHIVE:
	            case InceptorOracleParser.KW_UNARCHIVE:
	            case InceptorOracleParser.KW_COMPUTE:
	            case InceptorOracleParser.KW_STATISTICS:
	            case InceptorOracleParser.KW_USE:
	            case InceptorOracleParser.KW_OPTION:
	            case InceptorOracleParser.KW_CONCATENATE:
	            case InceptorOracleParser.KW_SHOW_DATABASE:
	            case InceptorOracleParser.KW_UPDATE:
	            case InceptorOracleParser.KW_RESTRICT:
	            case InceptorOracleParser.KW_CASCADE:
	            case InceptorOracleParser.KW_SKEWED:
	            case InceptorOracleParser.KW_DIRECTORIES:
	            case InceptorOracleParser.KW_WINDOWRESET:
	            case InceptorOracleParser.KW_SESSIONSTART:
	            case InceptorOracleParser.KW_SESSIONSTOP:
	            case InceptorOracleParser.KW_SESSIONEXPIRE:
	            case InceptorOracleParser.KW_SESSIONEXPIRE_DISCARD:
	            case InceptorOracleParser.KW_SESSIONEXPIRE_COMPLETE:
	            case InceptorOracleParser.KW_STREAMWINDOW:
	            case InceptorOracleParser.KW_STREAMWINDOWSLIDELENGTH:
	            case InceptorOracleParser.KW_STREAMWINDOWSEPARATED:
	            case InceptorOracleParser.KW_FOLLOWEDBY:
	            case InceptorOracleParser.KW_NOTFOLLOWEDBY:
	            case InceptorOracleParser.KW_NOTNEXT:
	            case InceptorOracleParser.KW_PATTERN_TIMES:
	            case InceptorOracleParser.KW_CURRVALUE:
	            case InceptorOracleParser.KW_GROUPING:
	            case InceptorOracleParser.KW_SETS:
	            case InceptorOracleParser.KW_TRUNCATE:
	            case InceptorOracleParser.KW_NOSCAN:
	            case InceptorOracleParser.KW_USER:
	            case InceptorOracleParser.KW_QUOTA:
	            case InceptorOracleParser.KW_PERMISSION:
	            case InceptorOracleParser.KW_ROLE:
	            case InceptorOracleParser.KW_ROLES:
	            case InceptorOracleParser.KW_INNER:
	            case InceptorOracleParser.KW_ADMIN:
	            case InceptorOracleParser.KW_OWNER:
	            case InceptorOracleParser.KW_PRINCIPALS:
	            case InceptorOracleParser.KW_CONSTANT:
	            case InceptorOracleParser.KW_CONSTRAINT:
	            case InceptorOracleParser.KW_VALUES:
	            case InceptorOracleParser.KW_YEAR:
	            case InceptorOracleParser.KW_MONTH:
	            case InceptorOracleParser.KW_DAY:
	            case InceptorOracleParser.KW_MINUTE:
	            case InceptorOracleParser.KW_HOUR:
	            case InceptorOracleParser.KW_SECOND:
	            case InceptorOracleParser.KW_INTERVAL:
	            case InceptorOracleParser.KW_SYSDATE:
	            case InceptorOracleParser.KW_NOMAXVALUE:
	            case InceptorOracleParser.KW_MINVALUE:
	            case InceptorOracleParser.KW_NOMINVALUE:
	            case InceptorOracleParser.KW_CYCLE:
	            case InceptorOracleParser.KW_CACHE:
	            case InceptorOracleParser.KW_CACHEDMETRIC:
	            case InceptorOracleParser.KW_CACHEDMETRICS:
	            case InceptorOracleParser.KW_NOCACHE:
	            case InceptorOracleParser.KW_NOORDER:
	            case InceptorOracleParser.KW_MERGE:
	            case InceptorOracleParser.KW_PLANT:
	            case InceptorOracleParser.KW_IMMEDIATE:
	            case InceptorOracleParser.KW_COMPACT:
	            case InceptorOracleParser.KW_STOP:
	            case InceptorOracleParser.KW_LIST:
	            case InceptorOracleParser.KW_TRANSACTION:
	            case InceptorOracleParser.KW_WORK:
	            case InceptorOracleParser.KW_SPACE:
	            case InceptorOracleParser.KW_CONF:
	            case InceptorOracleParser.KW_DEFINED:
	            case InceptorOracleParser.KW_INTEGER:
	            case InceptorOracleParser.KW_ONLY:
	            case InceptorOracleParser.KW_SERVER:
	            case InceptorOracleParser.KW_TRANSACTIONS:
	            case InceptorOracleParser.KW_URI:
	            case InceptorOracleParser.KW_WRITE:
	            case InceptorOracleParser.KW_FACL:
	            case InceptorOracleParser.KW_FOUND:
	            case InceptorOracleParser.KW_LEVEL:
	            case InceptorOracleParser.KW_PUBLIC:
	            case InceptorOracleParser.KW_LINKS:
	            case InceptorOracleParser.KW_CONNECT:
	            case InceptorOracleParser.KW_APPLICATION:
	            case InceptorOracleParser.KW_APPLICATIONS:
	            case InceptorOracleParser.KW_APP:
	            case InceptorOracleParser.KW_APPS:
	            case InceptorOracleParser.KW_INFINITE:
	            case InceptorOracleParser.KW_WAIT:
	            case InceptorOracleParser.KW_PRIMARY:
	            case InceptorOracleParser.KW_FOREIGN:
	            case InceptorOracleParser.KW_REFERENCES:
	            case InceptorOracleParser.KW_VALIDATE:
	            case InceptorOracleParser.KW_NOVALIDATE:
	            case InceptorOracleParser.KW_RELY:
	            case InceptorOracleParser.KW_NORELY:
	            case InceptorOracleParser.KW_KEY:
	            case InceptorOracleParser.KW_SEGMENT:
	            case InceptorOracleParser.KW_LENGTH:
	            case InceptorOracleParser.KW_ATTACH:
	            case InceptorOracleParser.KW_DETTACH:
	            case InceptorOracleParser.KW_SHARD:
	            case InceptorOracleParser.KW_NUM:
	            case InceptorOracleParser.KW_FULLTEXT:
	            case InceptorOracleParser.KW_TABLESIZE:
	            case InceptorOracleParser.KW_TABLET:
	            case InceptorOracleParser.KW_CAPACITY:
	            case InceptorOracleParser.KW_ANALYZER:
	            case InceptorOracleParser.KW_SYNC:
	            case InceptorOracleParser.KW_NO_INDEX:
	            case InceptorOracleParser.KW_LOG:
	            case InceptorOracleParser.KW_FILE:
	            case InceptorOracleParser.KW_JAR:
	            case InceptorOracleParser.KW_PERMANENT:
	            case InceptorOracleParser.KW_SCHEDULER:
	            case InceptorOracleParser.KW_MODE:
	            case InceptorOracleParser.Identifier:
	            case InceptorOracleParser.KW_NOCOPY:
	            case InceptorOracleParser.KW_VARRAY:
	            case InceptorOracleParser.KW_PACKAGE:
	            case InceptorOracleParser.KW_PACKAGES:
	            case InceptorOracleParser.KW_BODY:
	            case InceptorOracleParser.KW_ISOPEN:
	            case InceptorOracleParser.KW_NOTFOUND:
	            case InceptorOracleParser.KW_ROWCOUNT:
	            case InceptorOracleParser.KW_BULK_ROWCOUNT:
	            case InceptorOracleParser.KW_BULK_EXCEPTIONS:
	            case InceptorOracleParser.KW_REVERSE:
	            case InceptorOracleParser.KW_SAVE:
	            case InceptorOracleParser.KW_EXCEPTIONS:
	            case InceptorOracleParser.KW_INDICES:
	            case InceptorOracleParser.KW_REF:
	            case InceptorOracleParser.KW_YEARS:
	            case InceptorOracleParser.KW_MONTHS:
	            case InceptorOracleParser.KW_DAYS:
	            case InceptorOracleParser.KW_HOURS:
	            case InceptorOracleParser.KW_MINUTES:
	            case InceptorOracleParser.KW_SECONDS:
	                this.state = 6326;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,683,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 6324;
	                    this.aliasList();
	                    break;

	                case 2:
	                    this.state = 6325;
	                    this.columnNameTypeList();
	                    break;

	                }
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	        }

	        this.state = 6332;
	        localctx.outSerde = this.rowFormat();
	        this.state = 6333;
	        localctx.outRec = this.recordReader();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sequenceOption() {
	    let localctx = new SequenceOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1082, InceptorOracleParser.RULE_sequenceOption);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6337;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case InceptorOracleParser.KW_START:
	            this.state = 6335;
	            this.sequenceStartWith();
	            break;
	        case InceptorOracleParser.KW_ORDER:
	        case InceptorOracleParser.KW_INCREMENT:
	        case InceptorOracleParser.KW_NOCYCLE:
	        case InceptorOracleParser.KW_MAXVALUE:
	        case InceptorOracleParser.KW_NOMAXVALUE:
	        case InceptorOracleParser.KW_MINVALUE:
	        case InceptorOracleParser.KW_NOMINVALUE:
	        case InceptorOracleParser.KW_CYCLE:
	        case InceptorOracleParser.KW_CACHE:
	        case InceptorOracleParser.KW_NOCACHE:
	        case InceptorOracleParser.KW_NOORDER:
	            this.state = 6336;
	            this.sequenceOptionWithoutStart();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sequenceOptionWithoutStart() {
	    let localctx = new SequenceOptionWithoutStartContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1084, InceptorOracleParser.RULE_sequenceOptionWithoutStart);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6345;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case InceptorOracleParser.KW_INCREMENT:
	            this.state = 6339;
	            this.sequenceIncrement();
	            break;
	        case InceptorOracleParser.KW_MAXVALUE:
	        case InceptorOracleParser.KW_NOMAXVALUE:
	            this.state = 6340;
	            this.sequenceMaxValue();
	            break;
	        case InceptorOracleParser.KW_MINVALUE:
	        case InceptorOracleParser.KW_NOMINVALUE:
	            this.state = 6341;
	            this.sequenceMinValue();
	            break;
	        case InceptorOracleParser.KW_NOCYCLE:
	        case InceptorOracleParser.KW_CYCLE:
	            this.state = 6342;
	            this.sequenceCycle();
	            break;
	        case InceptorOracleParser.KW_CACHE:
	        case InceptorOracleParser.KW_NOCACHE:
	            this.state = 6343;
	            this.sequenceCache();
	            break;
	        case InceptorOracleParser.KW_ORDER:
	        case InceptorOracleParser.KW_NOORDER:
	            this.state = 6344;
	            this.sequenceOrder();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sequenceIncrement() {
	    let localctx = new SequenceIncrementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1086, InceptorOracleParser.RULE_sequenceIncrement);
	    try {
	        this.state = 6355;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,688,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6347;
	            this.match(InceptorOracleParser.KW_INCREMENT);
	            this.state = 6348;
	            this.match(InceptorOracleParser.KW_BY);
	            this.state = 6349;
	            this.precedencePlusOperator();
	            this.state = 6350;
	            localctx.num = this.match(InceptorOracleParser.Number);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6352;
	            this.match(InceptorOracleParser.KW_INCREMENT);
	            this.state = 6353;
	            this.match(InceptorOracleParser.KW_BY);
	            this.state = 6354;
	            localctx.num = this.match(InceptorOracleParser.Number);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sequenceStartWith() {
	    let localctx = new SequenceStartWithContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1088, InceptorOracleParser.RULE_sequenceStartWith);
	    try {
	        this.state = 6365;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,689,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6357;
	            this.match(InceptorOracleParser.KW_START);
	            this.state = 6358;
	            this.match(InceptorOracleParser.KW_WITH);
	            this.state = 6359;
	            this.precedencePlusOperator();
	            this.state = 6360;
	            localctx.num = this.match(InceptorOracleParser.Number);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6362;
	            this.match(InceptorOracleParser.KW_START);
	            this.state = 6363;
	            this.match(InceptorOracleParser.KW_WITH);
	            this.state = 6364;
	            localctx.num = this.match(InceptorOracleParser.Number);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sequenceMaxValue() {
	    let localctx = new SequenceMaxValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1090, InceptorOracleParser.RULE_sequenceMaxValue);
	    try {
	        this.state = 6374;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,690,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6367;
	            this.match(InceptorOracleParser.KW_MAXVALUE);
	            this.state = 6368;
	            this.precedencePlusOperator();
	            this.state = 6369;
	            localctx.num = this.match(InceptorOracleParser.Number);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6371;
	            this.match(InceptorOracleParser.KW_MAXVALUE);
	            this.state = 6372;
	            localctx.num = this.match(InceptorOracleParser.Number);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 6373;
	            this.match(InceptorOracleParser.KW_NOMAXVALUE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sequenceMinValue() {
	    let localctx = new SequenceMinValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1092, InceptorOracleParser.RULE_sequenceMinValue);
	    try {
	        this.state = 6383;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,691,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6376;
	            this.match(InceptorOracleParser.KW_MINVALUE);
	            this.state = 6377;
	            this.precedencePlusOperator();
	            this.state = 6378;
	            localctx.num = this.match(InceptorOracleParser.Number);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6380;
	            this.match(InceptorOracleParser.KW_MINVALUE);
	            this.state = 6381;
	            localctx.num = this.match(InceptorOracleParser.Number);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 6382;
	            this.match(InceptorOracleParser.KW_NOMINVALUE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sequenceCycle() {
	    let localctx = new SequenceCycleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1094, InceptorOracleParser.RULE_sequenceCycle);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6385;
	        _la = this._input.LA(1);
	        if(!(_la===InceptorOracleParser.KW_NOCYCLE || _la===InceptorOracleParser.KW_CYCLE)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sequenceCache() {
	    let localctx = new SequenceCacheContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1096, InceptorOracleParser.RULE_sequenceCache);
	    try {
	        this.state = 6393;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,692,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6387;
	            this.match(InceptorOracleParser.KW_CACHE);
	            this.state = 6388;
	            this.match(InceptorOracleParser.PLUS);
	            this.state = 6389;
	            localctx.num = this.match(InceptorOracleParser.Number);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6390;
	            this.match(InceptorOracleParser.KW_CACHE);
	            this.state = 6391;
	            localctx.num = this.match(InceptorOracleParser.Number);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 6392;
	            this.match(InceptorOracleParser.KW_NOCACHE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sequenceOrder() {
	    let localctx = new SequenceOrderContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1098, InceptorOracleParser.RULE_sequenceOrder);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6395;
	        _la = this._input.LA(1);
	        if(!(_la===InceptorOracleParser.KW_ORDER || _la===InceptorOracleParser.KW_NOORDER)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orderByClause() {
	    let localctx = new OrderByClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1100, InceptorOracleParser.RULE_orderByClause);
	    var _la = 0; // Token type
	    try {
	        this.state = 6420;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,695,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6397;
	            this.match(InceptorOracleParser.KW_ORDER);
	            this.state = 6398;
	            this.match(InceptorOracleParser.KW_BY);
	            this.state = 6399;
	            this.match(InceptorOracleParser.LPAREN);
	            this.state = 6400;
	            this.columnRefOrder();
	            this.state = 6405;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===InceptorOracleParser.COMMA) {
	                this.state = 6401;
	                this.match(InceptorOracleParser.COMMA);
	                this.state = 6402;
	                this.columnRefOrder();
	                this.state = 6407;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 6408;
	            this.match(InceptorOracleParser.RPAREN);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6410;
	            this.match(InceptorOracleParser.KW_ORDER);
	            this.state = 6411;
	            this.match(InceptorOracleParser.KW_BY);
	            this.state = 6412;
	            this.columnRefOrder();
	            this.state = 6417;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===InceptorOracleParser.COMMA) {
	                this.state = 6413;
	                this.match(InceptorOracleParser.COMMA);
	                this.state = 6414;
	                this.columnRefOrder();
	                this.state = 6419;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	clusterByClause() {
	    let localctx = new ClusterByClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1102, InceptorOracleParser.RULE_clusterByClause);
	    var _la = 0; // Token type
	    try {
	        this.state = 6445;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,698,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6422;
	            this.match(InceptorOracleParser.KW_CLUSTER);
	            this.state = 6423;
	            this.match(InceptorOracleParser.KW_BY);
	            this.state = 6424;
	            this.match(InceptorOracleParser.LPAREN);
	            this.state = 6425;
	            this.expression();
	            this.state = 6430;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===InceptorOracleParser.COMMA) {
	                this.state = 6426;
	                this.match(InceptorOracleParser.COMMA);
	                this.state = 6427;
	                this.expression();
	                this.state = 6432;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 6433;
	            this.match(InceptorOracleParser.RPAREN);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6435;
	            this.match(InceptorOracleParser.KW_CLUSTER);
	            this.state = 6436;
	            this.match(InceptorOracleParser.KW_BY);
	            this.state = 6437;
	            this.expression();
	            this.state = 6442;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===InceptorOracleParser.COMMA) {
	                this.state = 6438;
	                this.match(InceptorOracleParser.COMMA);
	                this.state = 6439;
	                this.expression();
	                this.state = 6444;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partitionByClause() {
	    let localctx = new PartitionByClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1104, InceptorOracleParser.RULE_partitionByClause);
	    var _la = 0; // Token type
	    try {
	        this.state = 6470;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,701,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6447;
	            this.match(InceptorOracleParser.KW_PARTITION);
	            this.state = 6448;
	            this.match(InceptorOracleParser.KW_BY);
	            this.state = 6449;
	            this.match(InceptorOracleParser.LPAREN);
	            this.state = 6450;
	            this.expression();
	            this.state = 6455;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===InceptorOracleParser.COMMA) {
	                this.state = 6451;
	                this.match(InceptorOracleParser.COMMA);
	                this.state = 6452;
	                this.expression();
	                this.state = 6457;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 6458;
	            this.match(InceptorOracleParser.RPAREN);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6460;
	            this.match(InceptorOracleParser.KW_PARTITION);
	            this.state = 6461;
	            this.match(InceptorOracleParser.KW_BY);
	            this.state = 6462;
	            this.expression();
	            this.state = 6467;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===InceptorOracleParser.COMMA) {
	                this.state = 6463;
	                this.match(InceptorOracleParser.COMMA);
	                this.state = 6464;
	                this.expression();
	                this.state = 6469;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	distributeByClause() {
	    let localctx = new DistributeByClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1106, InceptorOracleParser.RULE_distributeByClause);
	    var _la = 0; // Token type
	    try {
	        this.state = 6495;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,704,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6472;
	            this.match(InceptorOracleParser.KW_DISTRIBUTE);
	            this.state = 6473;
	            this.match(InceptorOracleParser.KW_BY);
	            this.state = 6474;
	            this.match(InceptorOracleParser.LPAREN);
	            this.state = 6475;
	            this.expression();
	            this.state = 6480;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===InceptorOracleParser.COMMA) {
	                this.state = 6476;
	                this.match(InceptorOracleParser.COMMA);
	                this.state = 6477;
	                this.expression();
	                this.state = 6482;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 6483;
	            this.match(InceptorOracleParser.RPAREN);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6485;
	            this.match(InceptorOracleParser.KW_DISTRIBUTE);
	            this.state = 6486;
	            this.match(InceptorOracleParser.KW_BY);
	            this.state = 6487;
	            this.expression();
	            this.state = 6492;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===InceptorOracleParser.COMMA) {
	                this.state = 6488;
	                this.match(InceptorOracleParser.COMMA);
	                this.state = 6489;
	                this.expression();
	                this.state = 6494;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sortByClause() {
	    let localctx = new SortByClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1108, InceptorOracleParser.RULE_sortByClause);
	    var _la = 0; // Token type
	    try {
	        this.state = 6520;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,707,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6497;
	            this.match(InceptorOracleParser.KW_SORT);
	            this.state = 6498;
	            this.match(InceptorOracleParser.KW_BY);
	            this.state = 6499;
	            this.match(InceptorOracleParser.LPAREN);
	            this.state = 6500;
	            this.columnRefOrder();
	            this.state = 6505;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===InceptorOracleParser.COMMA) {
	                this.state = 6501;
	                this.match(InceptorOracleParser.COMMA);
	                this.state = 6502;
	                this.columnRefOrder();
	                this.state = 6507;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 6508;
	            this.match(InceptorOracleParser.RPAREN);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6510;
	            this.match(InceptorOracleParser.KW_SORT);
	            this.state = 6511;
	            this.match(InceptorOracleParser.KW_BY);
	            this.state = 6512;
	            this.columnRefOrder();
	            this.state = 6517;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===InceptorOracleParser.COMMA) {
	                this.state = 6513;
	                this.match(InceptorOracleParser.COMMA);
	                this.state = 6514;
	                this.columnRefOrder();
	                this.state = 6519;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	limitClause() {
	    let localctx = new LimitClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1110, InceptorOracleParser.RULE_limitClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6522;
	        this.dialectLimitClause();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partitioningSpec() {
	    let localctx = new PartitioningSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1112, InceptorOracleParser.RULE_partitioningSpec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6524;
	        this.partitionByClause();
	        this.state = 6526;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,708,this._ctx);
	        if(la_===1) {
	            this.state = 6525;
	            this.orderByClause();

	        }
	        this.state = 6528;
	        this.orderByClause();
	        this.state = 6529;
	        this.distributeByClause();
	        this.state = 6531;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,709,this._ctx);
	        if(la_===1) {
	            this.state = 6530;
	            this.sortByClause();

	        }
	        this.state = 6533;
	        this.sortByClause();
	        this.state = 6534;
	        this.clusterByClause();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forUpdateClause() {
	    let localctx = new ForUpdateClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1114, InceptorOracleParser.RULE_forUpdateClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6536;
	        this.match(InceptorOracleParser.KW_FOR);
	        this.state = 6537;
	        this.match(InceptorOracleParser.KW_UPDATE);
	        this.state = 6540;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,710,this._ctx);
	        if(la_===1) {
	            this.state = 6538;
	            this.match(InceptorOracleParser.KW_OF);
	            this.state = 6539;
	            this.columnOrtableDotColumnWithDBNameList();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	window_clause() {
	    let localctx = new Window_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1116, InceptorOracleParser.RULE_window_clause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6542;
	        this.match(InceptorOracleParser.KW_WINDOW);
	        this.state = 6543;
	        this.window_defn();
	        this.state = 6548;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===InceptorOracleParser.COMMA) {
	            this.state = 6544;
	            this.match(InceptorOracleParser.COMMA);
	            this.state = 6545;
	            this.window_defn();
	            this.state = 6550;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	window_defn() {
	    let localctx = new Window_defnContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1118, InceptorOracleParser.RULE_window_defn);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6551;
	        this.match(InceptorOracleParser.Identifier);
	        this.state = 6552;
	        this.match(InceptorOracleParser.KW_AS);
	        this.state = 6553;
	        this.window_specification();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	window_specification() {
	    let localctx = new Window_specificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1120, InceptorOracleParser.RULE_window_specification);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6567;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case InceptorOracleParser.Identifier:
	            this.state = 6555;
	            this.match(InceptorOracleParser.Identifier);
	            break;
	        case InceptorOracleParser.LPAREN:
	            this.state = 6556;
	            this.match(InceptorOracleParser.LPAREN);
	            this.state = 6558;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.Identifier) {
	                this.state = 6557;
	                this.match(InceptorOracleParser.Identifier);
	            }

	            this.state = 6561;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_PARTITION) {
	                this.state = 6560;
	                this.partitioningSpec();
	            }

	            this.state = 6564;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_ROWS || _la===InceptorOracleParser.KW_RANGE) {
	                this.state = 6563;
	                this.window_frame();
	            }

	            this.state = 6566;
	            this.match(InceptorOracleParser.RPAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	window_frame() {
	    let localctx = new Window_frameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1122, InceptorOracleParser.RULE_window_frame);
	    try {
	        this.state = 6572;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,716,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6569;
	            this.window_range_expression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6570;
	            this.window_value_expression();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 6571;
	            this.window_timerange_expression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	window_range_expression() {
	    let localctx = new Window_range_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1124, InceptorOracleParser.RULE_window_range_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6574;
	        this.match(InceptorOracleParser.KW_ROWS);
	        this.state = 6575;
	        localctx.sb = this.window_frame_start_boundary();
	        this.state = 6576;
	        this.match(InceptorOracleParser.KW_ROWS);
	        this.state = 6577;
	        this.match(InceptorOracleParser.KW_BETWEEN);
	        this.state = 6578;
	        localctx.s = this.window_frame_boundary();
	        this.state = 6579;
	        this.match(InceptorOracleParser.KW_AND);
	        this.state = 6580;
	        localctx.end = this.window_frame_boundary();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	window_value_expression() {
	    let localctx = new Window_value_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1126, InceptorOracleParser.RULE_window_value_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6582;
	        this.match(InceptorOracleParser.KW_RANGE);
	        this.state = 6583;
	        localctx.sb = this.window_frame_start_boundary();
	        this.state = 6584;
	        this.match(InceptorOracleParser.KW_RANGE);
	        this.state = 6585;
	        this.match(InceptorOracleParser.KW_BETWEEN);
	        this.state = 6586;
	        localctx.s = this.window_frame_boundary();
	        this.state = 6587;
	        this.match(InceptorOracleParser.KW_AND);
	        this.state = 6588;
	        localctx.end = this.window_frame_boundary();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	window_timerange_expression() {
	    let localctx = new Window_timerange_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1128, InceptorOracleParser.RULE_window_timerange_expression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6590;
	        this.match(InceptorOracleParser.KW_RANGE);
	        this.state = 6591;
	        localctx.sb = this.window_time_frame_start_boundary();
	        this.state = 6593;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_INTERVAL) {
	            this.state = 6592;
	            this.window_time_frame_interval();
	        }

	        this.state = 6596;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_START) {
	            this.state = 6595;
	            this.streamwindow_zerotime_expression();
	        }

	        this.state = 6599;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_WINDOWRESET) {
	            this.state = 6598;
	            this.window_time_frame_resetinterval();
	        }

	        this.state = 6602;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_CACHE) {
	            this.state = 6601;
	            this.window_time_frame_cache_clause();
	        }

	        this.state = 6604;
	        this.match(InceptorOracleParser.KW_RANGE);
	        this.state = 6605;
	        this.match(InceptorOracleParser.KW_BETWEEN);
	        this.state = 6606;
	        localctx.s = this.window_time_frame_boundary();
	        this.state = 6607;
	        this.match(InceptorOracleParser.KW_AND);
	        this.state = 6608;
	        localctx.end = this.window_time_frame_boundary();
	        this.state = 6610;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_INTERVAL) {
	            this.state = 6609;
	            this.window_time_frame_interval();
	        }

	        this.state = 6613;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_START) {
	            this.state = 6612;
	            this.streamwindow_zerotime_expression();
	        }

	        this.state = 6616;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_WINDOWRESET) {
	            this.state = 6615;
	            this.window_time_frame_resetinterval();
	        }

	        this.state = 6619;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_CACHE) {
	            this.state = 6618;
	            this.window_time_frame_cache_clause();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	window_frame_start_boundary() {
	    let localctx = new Window_frame_start_boundaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1130, InceptorOracleParser.RULE_window_frame_start_boundary);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6621;
	        this.match(InceptorOracleParser.KW_UNBOUNDED);
	        this.state = 6622;
	        this.match(InceptorOracleParser.KW_PRECEDING);
	        this.state = 6623;
	        this.match(InceptorOracleParser.KW_CURRENT);
	        this.state = 6624;
	        this.match(InceptorOracleParser.KW_ROW);
	        this.state = 6625;
	        this.match(InceptorOracleParser.Number);
	        this.state = 6626;
	        this.match(InceptorOracleParser.KW_PRECEDING);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	window_frame_boundary() {
	    let localctx = new Window_frame_boundaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1132, InceptorOracleParser.RULE_window_frame_boundary);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6628;
	        this.match(InceptorOracleParser.KW_UNBOUNDED);
	        this.state = 6631;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case InceptorOracleParser.KW_PRECEDING:
	            this.state = 6629;
	            localctx.r = this.match(InceptorOracleParser.KW_PRECEDING);
	            break;
	        case InceptorOracleParser.KW_FOLLOWING:
	            this.state = 6630;
	            localctx.r = this.match(InceptorOracleParser.KW_FOLLOWING);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 6633;
	        this.match(InceptorOracleParser.KW_CURRENT);
	        this.state = 6634;
	        this.match(InceptorOracleParser.KW_ROW);
	        this.state = 6635;
	        this.match(InceptorOracleParser.Number);
	        this.state = 6638;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case InceptorOracleParser.KW_PRECEDING:
	            this.state = 6636;
	            localctx.d = this.match(InceptorOracleParser.KW_PRECEDING);
	            break;
	        case InceptorOracleParser.KW_FOLLOWING:
	            this.state = 6637;
	            localctx.d = this.match(InceptorOracleParser.KW_FOLLOWING);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	window_time_frame_start_boundary() {
	    let localctx = new Window_time_frame_start_boundaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1134, InceptorOracleParser.RULE_window_time_frame_start_boundary);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6640;
	        this.streamIntervalLiteral();
	        this.state = 6641;
	        this.match(InceptorOracleParser.KW_PRECEDING);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	window_time_frame_boundary() {
	    let localctx = new Window_time_frame_boundaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1136, InceptorOracleParser.RULE_window_time_frame_boundary);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6643;
	        this.streamIntervalLiteral();
	        this.state = 6646;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case InceptorOracleParser.KW_PRECEDING:
	            this.state = 6644;
	            localctx.d = this.match(InceptorOracleParser.KW_PRECEDING);
	            break;
	        case InceptorOracleParser.KW_FOLLOWING:
	            this.state = 6645;
	            localctx.d = this.match(InceptorOracleParser.KW_FOLLOWING);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	window_time_frame_interval() {
	    let localctx = new Window_time_frame_intervalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1138, InceptorOracleParser.RULE_window_time_frame_interval);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6648;
	        this.match(InceptorOracleParser.KW_INTERVAL);
	        this.state = 6649;
	        this.streamIntervalLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	window_time_frame_resetinterval() {
	    let localctx = new Window_time_frame_resetintervalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1140, InceptorOracleParser.RULE_window_time_frame_resetinterval);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6651;
	        this.match(InceptorOracleParser.KW_WINDOWRESET);
	        this.state = 6652;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	window_time_frame_cache_clause() {
	    let localctx = new Window_time_frame_cache_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1142, InceptorOracleParser.RULE_window_time_frame_cache_clause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6654;
	        this.match(InceptorOracleParser.KW_CACHE);
	        this.state = 6655;
	        this.match(InceptorOracleParser.KW_AS);
	        this.state = 6656;
	        localctx.metricName = this.expression();
	        this.state = 6657;
	        this.match(InceptorOracleParser.KW_INTO);
	        this.state = 6658;
	        localctx.cacheLayer = this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stream_window_clause() {
	    let localctx = new Stream_window_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1144, InceptorOracleParser.RULE_stream_window_clause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6660;
	        this.match(InceptorOracleParser.KW_STREAMWINDOW);
	        this.state = 6661;
	        this.stream_window_defn();
	        this.state = 6666;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===InceptorOracleParser.COMMA) {
	            this.state = 6662;
	            this.match(InceptorOracleParser.COMMA);
	            this.state = 6663;
	            this.stream_window_defn();
	            this.state = 6668;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 6669;
	        this.match(InceptorOracleParser.KW_SESSIONWINDOW);
	        this.state = 6670;
	        this.stream_window_defn();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stream_window_defn() {
	    let localctx = new Stream_window_defnContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1146, InceptorOracleParser.RULE_stream_window_defn);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6672;
	        this.match(InceptorOracleParser.Identifier);
	        this.state = 6673;
	        this.match(InceptorOracleParser.KW_AS);
	        this.state = 6674;
	        this.stream_window_specification();
	        this.state = 6675;
	        this.stream_window_specification();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stream_window_specification() {
	    let localctx = new Stream_window_specificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1148, InceptorOracleParser.RULE_stream_window_specification);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6683;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case InceptorOracleParser.Identifier:
	            this.state = 6677;
	            this.match(InceptorOracleParser.Identifier);
	            break;
	        case InceptorOracleParser.LPAREN:
	            this.state = 6678;
	            this.match(InceptorOracleParser.LPAREN);
	            this.state = 6680;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_SESSIONSTART || _la===InceptorOracleParser.KW_STREAMWINDOWSEPARATED || _la===InceptorOracleParser.KW_INTERVAL || _la===InceptorOracleParser.KW_LENGTH) {
	                this.state = 6679;
	                this.stream_window_frame();
	            }

	            this.state = 6682;
	            this.match(InceptorOracleParser.RPAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stream_window_frame() {
	    let localctx = new Stream_window_frameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1150, InceptorOracleParser.RULE_stream_window_frame);
	    var _la = 0; // Token type
	    try {
	        this.state = 6701;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case InceptorOracleParser.KW_SESSIONSTART:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6685;
	            this.sessionwindow_expression();
	            break;
	        case InceptorOracleParser.KW_STREAMWINDOWSEPARATED:
	        case InceptorOracleParser.KW_INTERVAL:
	        case InceptorOracleParser.KW_LENGTH:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6687;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_STREAMWINDOWSEPARATED) {
	                this.state = 6686;
	                this.streamwindow_separated_expression();
	            }

	            this.state = 6693;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case InceptorOracleParser.KW_LENGTH:
	                this.state = 6689;
	                this.streamwindow_range_expression();
	                this.state = 6690;
	                this.streamwindow_slide_expression();
	                break;
	            case InceptorOracleParser.KW_INTERVAL:
	                this.state = 6692;
	                this.streamwindow_interval_expression();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 6696;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_FORMAT) {
	                this.state = 6695;
	                this.streamwindow_format_expression();
	            }

	            this.state = 6699;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_START) {
	                this.state = 6698;
	                this.streamwindow_zerotime_expression();
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sessionwindow_expression() {
	    let localctx = new Sessionwindow_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1152, InceptorOracleParser.RULE_sessionwindow_expression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6703;
	        this.sessionwindow_start_expression();
	        this.state = 6704;
	        this.sessionwindow_stop_expression();
	        this.state = 6706;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_SESSIONPARTITION) {
	            this.state = 6705;
	            this.sessionwindow_partition_expression();
	        }

	        this.state = 6709;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_SESSIONEXPIRE) {
	            this.state = 6708;
	            this.sessionwindow_expire_expression();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sessionwindow_start_expression() {
	    let localctx = new Sessionwindow_start_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1154, InceptorOracleParser.RULE_sessionwindow_start_expression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6711;
	        this.match(InceptorOracleParser.KW_SESSIONSTART);
	        this.state = 6712;
	        this.match(InceptorOracleParser.LSQUARE);
	        this.state = 6713;
	        this.expression();
	        this.state = 6715;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_SESSIONWINDOW_INCLUDE || _la===InceptorOracleParser.KW_SESSIONWINDOW_EXCLUDE) {
	            this.state = 6714;
	            this.session_boundary_interval_expr();
	        }

	        this.state = 6717;
	        this.match(InceptorOracleParser.RSQUARE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sessionwindow_stop_expression() {
	    let localctx = new Sessionwindow_stop_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1156, InceptorOracleParser.RULE_sessionwindow_stop_expression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6719;
	        this.match(InceptorOracleParser.KW_END);
	        this.state = 6720;
	        this.match(InceptorOracleParser.LSQUARE);
	        this.state = 6721;
	        this.expression();
	        this.state = 6723;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_SESSIONWINDOW_INCLUDE || _la===InceptorOracleParser.KW_SESSIONWINDOW_EXCLUDE) {
	            this.state = 6722;
	            this.session_boundary_interval_expr();
	        }

	        this.state = 6725;
	        this.match(InceptorOracleParser.RSQUARE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	session_boundary_interval_expr() {
	    let localctx = new Session_boundary_interval_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1158, InceptorOracleParser.RULE_session_boundary_interval_expr);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6727;
	        _la = this._input.LA(1);
	        if(!(_la===InceptorOracleParser.KW_SESSIONWINDOW_INCLUDE || _la===InceptorOracleParser.KW_SESSIONWINDOW_EXCLUDE)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sessionwindow_partition_expression() {
	    let localctx = new Sessionwindow_partition_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1160, InceptorOracleParser.RULE_sessionwindow_partition_expression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6729;
	        this.match(InceptorOracleParser.KW_SESSIONPARTITION);
	        this.state = 6730;
	        this.match(InceptorOracleParser.LPAREN);
	        this.state = 6731;
	        this.expression();
	        this.state = 6736;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===InceptorOracleParser.COMMA) {
	            this.state = 6732;
	            this.match(InceptorOracleParser.COMMA);
	            this.state = 6733;
	            this.expression();
	            this.state = 6738;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 6739;
	        this.match(InceptorOracleParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sessionwindow_expire_expression() {
	    let localctx = new Sessionwindow_expire_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1162, InceptorOracleParser.RULE_sessionwindow_expire_expression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6741;
	        this.match(InceptorOracleParser.KW_SESSIONEXPIRE);
	        this.state = 6742;
	        this.match(InceptorOracleParser.LPAREN);
	        this.state = 6743;
	        this.streamIntervalLiteral();
	        this.state = 6745;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_SESSIONEXPIRE_DISCARD || _la===InceptorOracleParser.KW_SESSIONEXPIRE_COMPLETE) {
	            this.state = 6744;
	            this.sessionwindow_expire_operation_expression();
	        }

	        this.state = 6747;
	        this.match(InceptorOracleParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sessionwindow_expire_operation_expression() {
	    let localctx = new Sessionwindow_expire_operation_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1164, InceptorOracleParser.RULE_sessionwindow_expire_operation_expression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6749;
	        _la = this._input.LA(1);
	        if(!(_la===InceptorOracleParser.KW_SESSIONEXPIRE_DISCARD || _la===InceptorOracleParser.KW_SESSIONEXPIRE_COMPLETE)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	streamwindow_range_expression() {
	    let localctx = new Streamwindow_range_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1166, InceptorOracleParser.RULE_streamwindow_range_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6751;
	        this.match(InceptorOracleParser.KW_LENGTH);
	        this.state = 6752;
	        this.streamwindow_length();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	streamwindow_length() {
	    let localctx = new Streamwindow_lengthContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1168, InceptorOracleParser.RULE_streamwindow_length);
	    try {
	        this.state = 6756;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case InceptorOracleParser.StringLiteral:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6754;
	            this.streamIntervalLiteral();
	            break;
	        case InceptorOracleParser.KW_INFINITE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6755;
	            this.match(InceptorOracleParser.KW_INFINITE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	streamwindow_slide_expression() {
	    let localctx = new Streamwindow_slide_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1170, InceptorOracleParser.RULE_streamwindow_slide_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6758;
	        this.match(InceptorOracleParser.KW_STREAMWINDOWSLIDELENGTH);
	        this.state = 6759;
	        this.streamIntervalLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	streamwindow_interval_expression() {
	    let localctx = new Streamwindow_interval_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1172, InceptorOracleParser.RULE_streamwindow_interval_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6761;
	        this.match(InceptorOracleParser.KW_INTERVAL);
	        this.state = 6762;
	        this.streamIntervalLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	streamwindow_separated_expression() {
	    let localctx = new Streamwindow_separated_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1174, InceptorOracleParser.RULE_streamwindow_separated_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6764;
	        this.match(InceptorOracleParser.KW_STREAMWINDOWSEPARATED);
	        this.state = 6765;
	        this.match(InceptorOracleParser.KW_BY);
	        this.state = 6766;
	        localctx.field = this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	streamwindow_format_expression() {
	    let localctx = new Streamwindow_format_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1176, InceptorOracleParser.RULE_streamwindow_format_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6768;
	        this.match(InceptorOracleParser.KW_FORMAT);
	        this.state = 6769;
	        localctx.format = this.match(InceptorOracleParser.StringLiteral);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	streamwindow_zerotime_expression() {
	    let localctx = new Streamwindow_zerotime_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1178, InceptorOracleParser.RULE_streamwindow_zerotime_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6771;
	        this.match(InceptorOracleParser.KW_START);
	        this.state = 6772;
	        this.match(InceptorOracleParser.KW_TIME);
	        this.state = 6773;
	        this.match(InceptorOracleParser.KW_AT);
	        this.state = 6774;
	        localctx.zerotime = this.match(InceptorOracleParser.StringLiteral);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	streamIntervalLiteral() {
	    let localctx = new StreamIntervalLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1180, InceptorOracleParser.RULE_streamIntervalLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6776;
	        this.match(InceptorOracleParser.StringLiteral);
	        this.state = 6777;
	        localctx.qualifiers = this.streamIntervalQualifiers();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	streamIntervalQualifiers() {
	    let localctx = new StreamIntervalQualifiersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1182, InceptorOracleParser.RULE_streamIntervalQualifiers);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6779;
	        _la = this._input.LA(1);
	        if(!(((((_la - 384)) & ~0x1f) == 0 && ((1 << (_la - 384)) & ((1 << (InceptorOracleParser.KW_DAY - 384)) | (1 << (InceptorOracleParser.KW_MINUTE - 384)) | (1 << (InceptorOracleParser.KW_HOUR - 384)) | (1 << (InceptorOracleParser.KW_SECOND - 384)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type() {
	    let localctx = new TypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1184, InceptorOracleParser.RULE_type);
	    try {
	        this.state = 6786;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case InceptorOracleParser.KW_BOOLEAN:
	        case InceptorOracleParser.KW_TINYINT:
	        case InceptorOracleParser.KW_SMALLINT:
	        case InceptorOracleParser.KW_INT:
	        case InceptorOracleParser.KW_BIGINT:
	        case InceptorOracleParser.KW_FLOAT:
	        case InceptorOracleParser.KW_DOUBLE:
	        case InceptorOracleParser.KW_DATE:
	        case InceptorOracleParser.KW_DATETIME:
	        case InceptorOracleParser.KW_TIMESTAMP:
	        case InceptorOracleParser.KW_DECIMAL:
	        case InceptorOracleParser.KW_NUMERIC:
	        case InceptorOracleParser.KW_DEC:
	        case InceptorOracleParser.KW_STRING:
	        case InceptorOracleParser.KW_CHAR:
	        case InceptorOracleParser.KW_VARCHAR:
	        case InceptorOracleParser.KW_GEO:
	        case InceptorOracleParser.KW_VARCHAR2:
	        case InceptorOracleParser.KW_NVARCHAR:
	        case InceptorOracleParser.KW_BINARY:
	        case InceptorOracleParser.KW_NUMBER:
	        case InceptorOracleParser.KW_BLOB:
	        case InceptorOracleParser.KW_CLOB:
	        case InceptorOracleParser.KW_INTERVAL:
	        case InceptorOracleParser.KW_INTEGER:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6781;
	            this.primitiveType();
	            break;
	        case InceptorOracleParser.KW_ARRAY:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6782;
	            this.listType();
	            break;
	        case InceptorOracleParser.KW_STRUCT:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 6783;
	            this.structType();
	            break;
	        case InceptorOracleParser.KW_MAP:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 6784;
	            this.mapType();
	            break;
	        case InceptorOracleParser.KW_UNIONTYPE:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 6785;
	            this.unionType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primitiveType() {
	    let localctx = new PrimitiveTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1186, InceptorOracleParser.RULE_primitiveType);
	    var _la = 0; // Token type
	    try {
	        this.state = 6843;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,750,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6788;
	            this.match(InceptorOracleParser.KW_TINYINT);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6789;
	            this.match(InceptorOracleParser.KW_SMALLINT);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 6790;
	            this.match(InceptorOracleParser.KW_INT);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 6791;
	            this.match(InceptorOracleParser.KW_BIGINT);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 6792;
	            this.match(InceptorOracleParser.KW_BOOLEAN);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 6793;
	            this.match(InceptorOracleParser.KW_FLOAT);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 6794;
	            this.match(InceptorOracleParser.KW_DOUBLE);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 6795;
	            this.match(InceptorOracleParser.KW_DATE);
	            this.state = 6798;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,744,this._ctx);
	            if(la_===1) {
	                this.state = 6796;
	                this.match(InceptorOracleParser.KW_FORMAT);
	                this.state = 6797;
	                this.match(InceptorOracleParser.StringLiteral);

	            }
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 6800;
	            this.match(InceptorOracleParser.KW_DATETIME);
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 6801;
	            this.match(InceptorOracleParser.KW_GEO);
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 6802;
	            this.match(InceptorOracleParser.KW_TIMESTAMP);
	            this.state = 6806;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,745,this._ctx);
	            if(la_===1) {
	                this.state = 6803;
	                this.match(InceptorOracleParser.LPAREN);
	                this.state = 6804;
	                localctx.length = this.match(InceptorOracleParser.Number);
	                this.state = 6805;
	                this.match(InceptorOracleParser.RPAREN);

	            }
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 6808;
	            this.match(InceptorOracleParser.KW_INTERVAL);
	            this.state = 6809;
	            this.match(InceptorOracleParser.KW_YEAR);
	            this.state = 6810;
	            this.match(InceptorOracleParser.KW_TO);
	            this.state = 6811;
	            this.match(InceptorOracleParser.KW_MONTH);
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 6812;
	            this.match(InceptorOracleParser.KW_INTERVAL);
	            this.state = 6813;
	            this.match(InceptorOracleParser.KW_DAY);
	            this.state = 6814;
	            this.match(InceptorOracleParser.KW_TO);
	            this.state = 6815;
	            this.match(InceptorOracleParser.KW_SECOND);
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 6816;
	            this.match(InceptorOracleParser.KW_STRING);
	            this.state = 6819;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,746,this._ctx);
	            if(la_===1) {
	                this.state = 6817;
	                this.match(InceptorOracleParser.KW_LENGTH);
	                this.state = 6818;
	                localctx.length = this.match(InceptorOracleParser.Number);

	            }
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 6821;
	            this.match(InceptorOracleParser.KW_NVARCHAR);
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 6822;
	            this.match(InceptorOracleParser.KW_CLOB);
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 6823;
	            this.match(InceptorOracleParser.KW_BINARY);
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 6824;
	            this.match(InceptorOracleParser.KW_BLOB);
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 6825;
	            this.match(InceptorOracleParser.KW_CHAR);
	            this.state = 6829;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,747,this._ctx);
	            if(la_===1) {
	                this.state = 6826;
	                this.match(InceptorOracleParser.LPAREN);
	                this.state = 6827;
	                localctx.length = this.match(InceptorOracleParser.Number);
	                this.state = 6828;
	                this.match(InceptorOracleParser.RPAREN);

	            }
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 6831;
	            this.match(InceptorOracleParser.KW_INTEGER);
	            break;

	        case 21:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 6832;
	            _la = this._input.LA(1);
	            if(!(((((_la - 104)) & ~0x1f) == 0 && ((1 << (_la - 104)) & ((1 << (InceptorOracleParser.KW_DECIMAL - 104)) | (1 << (InceptorOracleParser.KW_NUMERIC - 104)) | (1 << (InceptorOracleParser.KW_DEC - 104)))) !== 0) || _la===InceptorOracleParser.KW_NUMBER)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 6840;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,749,this._ctx);
	            if(la_===1) {
	                this.state = 6833;
	                this.match(InceptorOracleParser.LPAREN);
	                this.state = 6834;
	                this.match(InceptorOracleParser.Number);
	                this.state = 6837;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===InceptorOracleParser.COMMA) {
	                    this.state = 6835;
	                    this.match(InceptorOracleParser.COMMA);
	                    this.state = 6836;
	                    this.match(InceptorOracleParser.Number);
	                }

	                this.state = 6839;
	                this.match(InceptorOracleParser.RPAREN);

	            }
	            break;

	        case 22:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 6842;
	            this.dialectPrimitiveType();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listType() {
	    let localctx = new ListTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1188, InceptorOracleParser.RULE_listType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6845;
	        this.match(InceptorOracleParser.KW_ARRAY);
	        this.state = 6846;
	        this.match(InceptorOracleParser.LESSTHAN);
	        this.state = 6847;
	        this.type();
	        this.state = 6848;
	        this.match(InceptorOracleParser.GREATERTHAN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	structType() {
	    let localctx = new StructTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1190, InceptorOracleParser.RULE_structType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6850;
	        this.match(InceptorOracleParser.KW_STRUCT);
	        this.state = 6851;
	        this.match(InceptorOracleParser.LESSTHAN);
	        this.state = 6852;
	        this.columnNameColonTypeList();
	        this.state = 6853;
	        this.match(InceptorOracleParser.GREATERTHAN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mapType() {
	    let localctx = new MapTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1192, InceptorOracleParser.RULE_mapType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6855;
	        this.match(InceptorOracleParser.KW_MAP);
	        this.state = 6856;
	        this.match(InceptorOracleParser.LESSTHAN);
	        this.state = 6857;
	        localctx.left = this.primitiveType();
	        this.state = 6858;
	        this.match(InceptorOracleParser.COMMA);
	        this.state = 6859;
	        localctx.right = this.type();
	        this.state = 6860;
	        this.match(InceptorOracleParser.GREATERTHAN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unionType() {
	    let localctx = new UnionTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1194, InceptorOracleParser.RULE_unionType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6862;
	        this.match(InceptorOracleParser.KW_UNIONTYPE);
	        this.state = 6863;
	        this.match(InceptorOracleParser.LESSTHAN);
	        this.state = 6864;
	        this.colTypeList();
	        this.state = 6865;
	        this.match(InceptorOracleParser.GREATERTHAN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnNameColonType() {
	    let localctx = new ColumnNameColonTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1196, InceptorOracleParser.RULE_columnNameColonType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6867;
	        localctx.colName = this.identifier();
	        this.state = 6868;
	        this.match(InceptorOracleParser.COLON);
	        this.state = 6869;
	        this.colType();
	        this.state = 6872;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_COMMENT) {
	            this.state = 6870;
	            this.match(InceptorOracleParser.KW_COMMENT);
	            this.state = 6871;
	            localctx.comment = this.match(InceptorOracleParser.StringLiteral);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	colType() {
	    let localctx = new ColTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1198, InceptorOracleParser.RULE_colType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6874;
	        this.type();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	colTypeList() {
	    let localctx = new ColTypeListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1200, InceptorOracleParser.RULE_colTypeList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6876;
	        this.colType();
	        this.state = 6881;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===InceptorOracleParser.COMMA) {
	            this.state = 6877;
	            this.match(InceptorOracleParser.COMMA);
	            this.state = 6878;
	            this.colType();
	            this.state = 6883;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	gotoStatement() {
	    let localctx = new GotoStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1202, InceptorOracleParser.RULE_gotoStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6884;
	        this.match(InceptorOracleParser.KW_GOTO);
	        this.state = 6885;
	        this.match(InceptorOracleParser.Identifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnStatement() {
	    let localctx = new ReturnStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1204, InceptorOracleParser.RULE_returnStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6887;
	        this.match(InceptorOracleParser.KW_RETURN);
	        this.state = 6889;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,753,this._ctx);
	        if(la_===1) {
	            this.state = 6888;
	            this.expression();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	continueStatement() {
	    let localctx = new ContinueStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1206, InceptorOracleParser.RULE_continueStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6891;
	        this.match(InceptorOracleParser.KW_CONTINUE);
	        this.state = 6893;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,754,this._ctx);
	        if(la_===1) {
	            this.state = 6892;
	            this.match(InceptorOracleParser.Identifier);

	        }
	        this.state = 6897;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,755,this._ctx);
	        if(la_===1) {
	            this.state = 6895;
	            this.match(InceptorOracleParser.KW_WHEN);
	            this.state = 6896;
	            this.condition();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exitStatement() {
	    let localctx = new ExitStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1208, InceptorOracleParser.RULE_exitStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6899;
	        this.match(InceptorOracleParser.KW_EXIT);
	        this.state = 6901;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,756,this._ctx);
	        if(la_===1) {
	            this.state = 6900;
	            this.match(InceptorOracleParser.Identifier);

	        }
	        this.state = 6905;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,757,this._ctx);
	        if(la_===1) {
	            this.state = 6903;
	            this.match(InceptorOracleParser.KW_WHEN);
	            this.state = 6904;
	            this.condition();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dialectEndCase() {
	    let localctx = new DialectEndCaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1210, InceptorOracleParser.RULE_dialectEndCase);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6907;
	        this.match(InceptorOracleParser.KW_END);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cursorParserStart() {
	    let localctx = new CursorParserStartContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1212, InceptorOracleParser.RULE_cursorParserStart);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6909;
	        this.cursorName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cursorName() {
	    let localctx = new CursorNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1214, InceptorOracleParser.RULE_cursorName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6911;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cursorParamSpec() {
	    let localctx = new CursorParamSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1216, InceptorOracleParser.RULE_cursorParamSpec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6913;
	        this.parameter();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cursorParamList() {
	    let localctx = new CursorParamListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1218, InceptorOracleParser.RULE_cursorParamList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6915;
	        this.match(InceptorOracleParser.LPAREN);
	        this.state = 6916;
	        this.cursorParamSpec();
	        this.state = 6921;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===InceptorOracleParser.COMMA) {
	            this.state = 6917;
	            this.match(InceptorOracleParser.COMMA);
	            this.state = 6918;
	            this.cursorParamSpec();
	            this.state = 6923;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 6924;
	        this.match(InceptorOracleParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cursorReturnSpec() {
	    let localctx = new CursorReturnSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1220, InceptorOracleParser.RULE_cursorReturnSpec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6926;
	        this.match(InceptorOracleParser.KW_RETURN);
	        this.state = 6927;
	        this.datatype();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cursorBodySpec() {
	    let localctx = new CursorBodySpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1222, InceptorOracleParser.RULE_cursorBodySpec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6929;
	        this.selectStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cursorDeclStatement() {
	    let localctx = new CursorDeclStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1224, InceptorOracleParser.RULE_cursorDeclStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6931;
	        this.match(InceptorOracleParser.KW_CURSOR);
	        this.state = 6932;
	        this.cursorName();
	        this.state = 6934;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.LPAREN) {
	            this.state = 6933;
	            this.cursorParamList();
	        }

	        this.state = 6937;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_RETURN) {
	            this.state = 6936;
	            this.cursorReturnSpec();
	        }

	        this.state = 6939;
	        this.match(InceptorOracleParser.KW_IS);
	        this.state = 6940;
	        this.cursorBodySpec();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	openForOrOpenCursorStatement() {
	    let localctx = new OpenForOrOpenCursorStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1226, InceptorOracleParser.RULE_openForOrOpenCursorStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6942;
	        this.match(InceptorOracleParser.KW_OPEN);
	        this.state = 6943;
	        this.leftValue();
	        this.state = 6946;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,761,this._ctx);
	        if(la_===1) {
	            this.state = 6944;
	            localctx.opFor = this.match(InceptorOracleParser.KW_FOR);
	            this.state = 6945;
	            this.openForClause();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	openForClause() {
	    let localctx = new OpenForClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1228, InceptorOracleParser.RULE_openForClause);
	    try {
	        this.state = 6953;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,763,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6948;
	            this.selectStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6949;
	            this.dynamicSqlStatement();
	            this.state = 6951;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,762,this._ctx);
	            if(la_===1) {
	                this.state = 6950;
	                this.usingClause();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fetchCursorIntoStatement() {
	    let localctx = new FetchCursorIntoStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1230, InceptorOracleParser.RULE_fetchCursorIntoStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6955;
	        this.match(InceptorOracleParser.KW_FETCH);
	        this.state = 6956;
	        this.leftValue();
	        this.state = 6958;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_BULK) {
	            this.state = 6957;
	            this.bulkCollect();
	        }

	        this.state = 6960;
	        this.intoClause();
	        this.state = 6962;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,765,this._ctx);
	        if(la_===1) {
	            this.state = 6961;
	            this.limitClause();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	closeCursorStatement() {
	    let localctx = new CloseCursorStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1232, InceptorOracleParser.RULE_closeCursorStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6964;
	        this.match(InceptorOracleParser.KW_CLOSE);
	        this.state = 6965;
	        this.leftValue();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	intoClause() {
	    let localctx = new IntoClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1234, InceptorOracleParser.RULE_intoClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6967;
	        this.match(InceptorOracleParser.KW_INTO);
	        this.state = 6968;
	        this.leftValue();
	        this.state = 6973;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===InceptorOracleParser.COMMA) {
	            this.state = 6969;
	            this.match(InceptorOracleParser.COMMA);
	            this.state = 6970;
	            this.leftValue();
	            this.state = 6975;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	realParam() {
	    let localctx = new RealParamContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1236, InceptorOracleParser.RULE_realParam);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6976;
	        this.match(InceptorOracleParser.LPAREN);
	        this.state = 6980;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << InceptorOracleParser.KW_TRUE) | (1 << InceptorOracleParser.KW_FALSE) | (1 << InceptorOracleParser.KW_ALL) | (1 << InceptorOracleParser.KW_NOT) | (1 << InceptorOracleParser.KW_LIKE) | (1 << InceptorOracleParser.KW_NO) | (1 << InceptorOracleParser.KW_ANY) | (1 << InceptorOracleParser.KW_IF) | (1 << InceptorOracleParser.KW_EXISTS) | (1 << InceptorOracleParser.KW_ASC) | (1 << InceptorOracleParser.KW_DESC) | (1 << InceptorOracleParser.KW_ORDER) | (1 << InceptorOracleParser.KW_GROUP) | (1 << InceptorOracleParser.KW_INCREMENT) | (1 << InceptorOracleParser.KW_BY) | (1 << InceptorOracleParser.KW_HASH) | (1 << InceptorOracleParser.KW_INSERT) | (1 << InceptorOracleParser.KW_OVERWRITE) | (1 << InceptorOracleParser.KW_OUTER))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (InceptorOracleParser.KW_STREAMJOB - 33)) | (1 << (InceptorOracleParser.KW_STREAMJOBS - 33)) | (1 << (InceptorOracleParser.KW_AT - 33)) | (1 << (InceptorOracleParser.KW_LEFT - 33)) | (1 << (InceptorOracleParser.KW_RIGHT - 33)) | (1 << (InceptorOracleParser.KW_FULL - 33)) | (1 << (InceptorOracleParser.KW_PARTITION - 33)) | (1 << (InceptorOracleParser.KW_PARTITIONS - 33)) | (1 << (InceptorOracleParser.KW_PATTERN - 33)) | (1 << (InceptorOracleParser.KW_TABLE - 33)) | (1 << (InceptorOracleParser.KW_TABLES - 33)) | (1 << (InceptorOracleParser.KW_SEQUENCE - 33)) | (1 << (InceptorOracleParser.KW_SEQUENCES - 33)) | (1 << (InceptorOracleParser.KW_COLUMNS - 33)) | (1 << (InceptorOracleParser.KW_INDEX - 33)) | (1 << (InceptorOracleParser.KW_INDEXES - 33)) | (1 << (InceptorOracleParser.KW_REBUILD - 33)) | (1 << (InceptorOracleParser.KW_FUNCTIONS - 33)) | (1 << (InceptorOracleParser.KW_SHOW - 33)) | (1 << (InceptorOracleParser.KW_MSCK - 33)) | (1 << (InceptorOracleParser.KW_REPAIR - 33)) | (1 << (InceptorOracleParser.KW_DIRECTORY - 33)) | (1 << (InceptorOracleParser.KW_LOCAL - 33)) | (1 << (InceptorOracleParser.KW_GLOBAL - 33)) | (1 << (InceptorOracleParser.KW_USING - 33)) | (1 << (InceptorOracleParser.KW_CLUSTER - 33)) | (1 << (InceptorOracleParser.KW_DISTRIBUTE - 33)) | (1 << (InceptorOracleParser.KW_SORT - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (InceptorOracleParser.KW_UNION - 65)) | (1 << (InceptorOracleParser.KW_LOAD - 65)) | (1 << (InceptorOracleParser.KW_EXPORT - 65)) | (1 << (InceptorOracleParser.KW_IMPORT - 65)) | (1 << (InceptorOracleParser.KW_DATA - 65)) | (1 << (InceptorOracleParser.KW_INPATH - 65)) | (1 << (InceptorOracleParser.KW_IS - 65)) | (1 << (InceptorOracleParser.KW_NULL - 65)) | (1 << (InceptorOracleParser.KW_NULLS - 65)) | (1 << (InceptorOracleParser.KW_CREATE - 65)) | (1 << (InceptorOracleParser.KW_EXTERNAL - 65)) | (1 << (InceptorOracleParser.KW_ALTER - 65)) | (1 << (InceptorOracleParser.KW_CHANGE - 65)) | (1 << (InceptorOracleParser.KW_FIRST - 65)) | (1 << (InceptorOracleParser.KW_LAST - 65)) | (1 << (InceptorOracleParser.KW_AFTER - 65)) | (1 << (InceptorOracleParser.KW_DESCRIBE - 65)) | (1 << (InceptorOracleParser.KW_DROP - 65)) | (1 << (InceptorOracleParser.KW_RENAME - 65)) | (1 << (InceptorOracleParser.KW_IGNORE - 65)) | (1 << (InceptorOracleParser.KW_RESPECT - 65)) | (1 << (InceptorOracleParser.KW_PROTECTION - 65)) | (1 << (InceptorOracleParser.KW_TO - 65)) | (1 << (InceptorOracleParser.KW_COMMENT - 65)) | (1 << (InceptorOracleParser.KW_PROMPT - 65)) | (1 << (InceptorOracleParser.KW_SPOOL - 65)) | (1 << (InceptorOracleParser.KW_BOOLEAN - 65)) | (1 << (InceptorOracleParser.KW_TINYINT - 65)) | (1 << (InceptorOracleParser.KW_BYTE - 65)) | (1 << (InceptorOracleParser.KW_SMALLINT - 65)) | (1 << (InceptorOracleParser.KW_INT - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (InceptorOracleParser.KW_BIGINT - 97)) | (1 << (InceptorOracleParser.KW_FLOAT - 97)) | (1 << (InceptorOracleParser.KW_DOUBLE - 97)) | (1 << (InceptorOracleParser.KW_DATE - 97)) | (1 << (InceptorOracleParser.KW_DATETIME - 97)) | (1 << (InceptorOracleParser.KW_TIMESTAMP - 97)) | (1 << (InceptorOracleParser.KW_TIME - 97)) | (1 << (InceptorOracleParser.KW_DECIMAL - 97)) | (1 << (InceptorOracleParser.KW_STRING - 97)) | (1 << (InceptorOracleParser.KW_GEO - 97)) | (1 << (InceptorOracleParser.KW_ARRAY - 97)) | (1 << (InceptorOracleParser.KW_STRUCT - 97)) | (1 << (InceptorOracleParser.KW_MAP - 97)) | (1 << (InceptorOracleParser.KW_UNIONTYPE - 97)) | (1 << (InceptorOracleParser.KW_PARTITIONED - 97)) | (1 << (InceptorOracleParser.KW_ROUTED - 97)) | (1 << (InceptorOracleParser.KW_CLUSTERED - 97)) | (1 << (InceptorOracleParser.KW_SORTED - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (InceptorOracleParser.KW_NEXT - 129)) | (1 << (InceptorOracleParser.KW_NEXTVALUE - 129)) | (1 << (InceptorOracleParser.KW_UNLIMITED - 129)) | (1 << (InceptorOracleParser.KW_WIDCARD - 129)) | (1 << (InceptorOracleParser.KW_BUCKETS - 129)) | (1 << (InceptorOracleParser.KW_ROW - 129)) | (1 << (InceptorOracleParser.KW_ROWS - 129)) | (1 << (InceptorOracleParser.KW_FORMAT - 129)) | (1 << (InceptorOracleParser.KW_DELIMITED - 129)) | (1 << (InceptorOracleParser.KW_FIELDS - 129)) | (1 << (InceptorOracleParser.KW_TERMINATED - 129)) | (1 << (InceptorOracleParser.KW_ESCAPED - 129)) | (1 << (InceptorOracleParser.KW_COLLECTION - 129)) | (1 << (InceptorOracleParser.KW_ITEMS - 129)) | (1 << (InceptorOracleParser.KW_KEYS - 129)) | (1 << (InceptorOracleParser.KW_KEY_TYPE - 129)) | (1 << (InceptorOracleParser.KW_LINES - 129)) | (1 << (InceptorOracleParser.KW_STORED - 129)) | (1 << (InceptorOracleParser.KW_FILEFORMAT - 129)) | (1 << (InceptorOracleParser.KW_SEQUENCEFILE - 129)) | (1 << (InceptorOracleParser.KW_TEXTFILE - 129)) | (1 << (InceptorOracleParser.KW_CSVFILE - 129)) | (1 << (InceptorOracleParser.KW_FWCFILE - 129)) | (1 << (InceptorOracleParser.KW_RCFILE - 129)) | (1 << (InceptorOracleParser.KW_ORCFILE - 129)) | (1 << (InceptorOracleParser.KW_HOLODESK - 129)) | (1 << (InceptorOracleParser.KW_STELLARDB - 129)) | (1 << (InceptorOracleParser.KW_ORCTRANSACTIONFILE - 129)) | (1 << (InceptorOracleParser.KW_PARQUET - 129)))) !== 0) || ((((_la - 161)) & ~0x1f) == 0 && ((1 << (_la - 161)) & ((1 << (InceptorOracleParser.KW_HYPERDRIVE - 161)) | (1 << (InceptorOracleParser.KW_ESDRIVE - 161)) | (1 << (InceptorOracleParser.KW_INPUTFORMAT - 161)) | (1 << (InceptorOracleParser.KW_OUTPUTFORMAT - 161)) | (1 << (InceptorOracleParser.KW_INPUTDRIVER - 161)) | (1 << (InceptorOracleParser.KW_OUTPUTDRIVER - 161)) | (1 << (InceptorOracleParser.KW_OFFLINE - 161)) | (1 << (InceptorOracleParser.KW_ENABLE - 161)) | (1 << (InceptorOracleParser.KW_DISABLE - 161)) | (1 << (InceptorOracleParser.KW_READONLY - 161)) | (1 << (InceptorOracleParser.KW_NO_DROP - 161)) | (1 << (InceptorOracleParser.KW_LOCATION - 161)) | (1 << (InceptorOracleParser.KW_BUCKET - 161)) | (1 << (InceptorOracleParser.KW_OUT - 161)) | (1 << (InceptorOracleParser.KW_OF - 161)) | (1 << (InceptorOracleParser.KW_PERCENT - 161)) | (1 << (InceptorOracleParser.KW_CAST - 161)) | (1 << (InceptorOracleParser.KW_ADD - 161)) | (1 << (InceptorOracleParser.KW_REPLACE - 161)) | (1 << (InceptorOracleParser.KW_RLIKE - 161)) | (1 << (InceptorOracleParser.KW_REGEXP - 161)) | (1 << (InceptorOracleParser.KW_TEMPORARY - 161)) | (1 << (InceptorOracleParser.KW_RESOURCE - 161)) | (1 << (InceptorOracleParser.KW_RELOAD - 161)) | (1 << (InceptorOracleParser.KW_EXPLAIN - 161)) | (1 << (InceptorOracleParser.KW_FORMATTED - 161)) | (1 << (InceptorOracleParser.KW_PRETTY - 161)) | (1 << (InceptorOracleParser.KW_DEPENDENCY - 161)))) !== 0) || ((((_la - 193)) & ~0x1f) == 0 && ((1 << (_la - 193)) & ((1 << (InceptorOracleParser.KW_LOGICAL - 193)) | (1 << (InceptorOracleParser.KW_COST - 193)) | (1 << (InceptorOracleParser.KW_SERDE - 193)) | (1 << (InceptorOracleParser.KW_WITH - 193)) | (1 << (InceptorOracleParser.KW_WITHIN - 193)) | (1 << (InceptorOracleParser.KW_DEFERRED - 193)) | (1 << (InceptorOracleParser.KW_SERDEPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_DBPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_LIMIT - 193)) | (1 << (InceptorOracleParser.KW_SET - 193)) | (1 << (InceptorOracleParser.KW_UNSET - 193)) | (1 << (InceptorOracleParser.KW_TBLPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_IDXPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_VALUE_TYPE - 193)) | (1 << (InceptorOracleParser.KW_ELEM_TYPE - 193)) | (1 << (InceptorOracleParser.KW_CASE - 193)) | (1 << (InceptorOracleParser.KW_PRIOR - 193)) | (1 << (InceptorOracleParser.KW_NOCYCLE - 193)) | (1 << (InceptorOracleParser.KW_MAPJOIN - 193)) | (1 << (InceptorOracleParser.KW_COMBINE - 193)) | (1 << (InceptorOracleParser.KW_COMBINE_STRUCT_INDEX - 193)) | (1 << (InceptorOracleParser.KW_GLKJOIN - 193)) | (1 << (InceptorOracleParser.KW_USE_INDEX - 193)))) !== 0) || ((((_la - 225)) & ~0x1f) == 0 && ((1 << (_la - 225)) & ((1 << (InceptorOracleParser.KW_STARGATE - 225)) | (1 << (InceptorOracleParser.KW_USE_BULKLOAD - 225)) | (1 << (InceptorOracleParser.KW_ADHOC - 225)) | (1 << (InceptorOracleParser.KW_PRECOMPILE - 225)) | (1 << (InceptorOracleParser.KW_STREAMTABLE - 225)) | (1 << (InceptorOracleParser.KW_STREAM - 225)) | (1 << (InceptorOracleParser.KW_RULEBASE - 225)) | (1 << (InceptorOracleParser.KW_RULEBASES - 225)) | (1 << (InceptorOracleParser.KW_RULE - 225)) | (1 << (InceptorOracleParser.KW_RULES - 225)) | (1 << (InceptorOracleParser.KW_MEET - 225)) | (1 << (InceptorOracleParser.KW_MUST - 225)) | (1 << (InceptorOracleParser.KW_MUSTNOT - 225)) | (1 << (InceptorOracleParser.KW_POLICY - 225)) | (1 << (InceptorOracleParser.KW_POLICIES - 225)) | (1 << (InceptorOracleParser.KW_REMOVE - 225)) | (1 << (InceptorOracleParser.KW_POLICYKEY - 225)) | (1 << (InceptorOracleParser.KW_POLICY_RULE - 225)) | (1 << (InceptorOracleParser.KW_LOOKUP - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTION - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTIONS - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTION_PROPERTIES - 225)) | (1 << (InceptorOracleParser.KW_HOLD_DDLTIME - 225)) | (1 << (InceptorOracleParser.KW_CLUSTERSTATUS - 225)))) !== 0) || ((((_la - 257)) & ~0x1f) == 0 && ((1 << (_la - 257)) & ((1 << (InceptorOracleParser.KW_UTC - 257)) | (1 << (InceptorOracleParser.KW_UTCTIMESTAMP - 257)) | (1 << (InceptorOracleParser.KW_LONG - 257)) | (1 << (InceptorOracleParser.KW_DELETE - 257)) | (1 << (InceptorOracleParser.KW_PLUS - 257)) | (1 << (InceptorOracleParser.KW_MINUS - 257)) | (1 << (InceptorOracleParser.KW_OP_CONCAT - 257)) | (1 << (InceptorOracleParser.KW_FETCH - 257)) | (1 << (InceptorOracleParser.KW_INTERSECT - 257)) | (1 << (InceptorOracleParser.KW_VIEW - 257)) | (1 << (InceptorOracleParser.KW_IN - 257)) | (1 << (InceptorOracleParser.KW_DATABASES - 257)) | (1 << (InceptorOracleParser.KW_MATERIALIZED - 257)) | (1 << (InceptorOracleParser.KW_SCHEMA - 257)) | (1 << (InceptorOracleParser.KW_SCHEMAS - 257)) | (1 << (InceptorOracleParser.KW_GRANT - 257)) | (1 << (InceptorOracleParser.KW_REVOKE - 257)) | (1 << (InceptorOracleParser.KW_SSL - 257)) | (1 << (InceptorOracleParser.KW_UNDO - 257)) | (1 << (InceptorOracleParser.KW_LOCK - 257)) | (1 << (InceptorOracleParser.KW_LOCKS - 257)) | (1 << (InceptorOracleParser.KW_UNLOCK - 257)) | (1 << (InceptorOracleParser.KW_SHARED - 257)) | (1 << (InceptorOracleParser.KW_EXCLUSIVE - 257)) | (1 << (InceptorOracleParser.KW_PROCEDURE - 257)) | (1 << (InceptorOracleParser.KW_UNSIGNED - 257)) | (1 << (InceptorOracleParser.KW_WHILE - 257)) | (1 << (InceptorOracleParser.KW_READ - 257)) | (1 << (InceptorOracleParser.KW_READS - 257)))) !== 0) || ((((_la - 289)) & ~0x1f) == 0 && ((1 << (_la - 289)) & ((1 << (InceptorOracleParser.KW_PURGE - 289)) | (1 << (InceptorOracleParser.KW_RANGE - 289)) | (1 << (InceptorOracleParser.KW_ANALYZE - 289)) | (1 << (InceptorOracleParser.KW_BEFORE - 289)) | (1 << (InceptorOracleParser.KW_BETWEEN - 289)) | (1 << (InceptorOracleParser.KW_BOTH - 289)) | (1 << (InceptorOracleParser.KW_BINARY - 289)) | (1 << (InceptorOracleParser.KW_DEFAULT - 289)) | (1 << (InceptorOracleParser.KW_TYPE - 289)) | (1 << (InceptorOracleParser.KW_TRIGGER - 289)) | (1 << (InceptorOracleParser.KW_RECORDREADER - 289)) | (1 << (InceptorOracleParser.KW_RECORDWRITER - 289)) | (1 << (InceptorOracleParser.KW_SEMI - 289)) | (1 << (InceptorOracleParser.KW_LATERAL - 289)) | (1 << (InceptorOracleParser.KW_TOUCH - 289)) | (1 << (InceptorOracleParser.KW_ARCHIVE - 289)) | (1 << (InceptorOracleParser.KW_UNARCHIVE - 289)) | (1 << (InceptorOracleParser.KW_COMPUTE - 289)) | (1 << (InceptorOracleParser.KW_STATISTICS - 289)) | (1 << (InceptorOracleParser.KW_USE - 289)) | (1 << (InceptorOracleParser.KW_OPTION - 289)) | (1 << (InceptorOracleParser.KW_CONCATENATE - 289)) | (1 << (InceptorOracleParser.KW_SHOW_DATABASE - 289)) | (1 << (InceptorOracleParser.KW_UPDATE - 289)) | (1 << (InceptorOracleParser.KW_RESTRICT - 289)) | (1 << (InceptorOracleParser.KW_CASCADE - 289)) | (1 << (InceptorOracleParser.KW_SKEWED - 289)))) !== 0) || ((((_la - 323)) & ~0x1f) == 0 && ((1 << (_la - 323)) & ((1 << (InceptorOracleParser.KW_DIRECTORIES - 323)) | (1 << (InceptorOracleParser.KW_WINDOWRESET - 323)) | (1 << (InceptorOracleParser.KW_SESSIONSTART - 323)) | (1 << (InceptorOracleParser.KW_SESSIONSTOP - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE_DISCARD - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE_COMPLETE - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOW - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOWSLIDELENGTH - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOWSEPARATED - 323)) | (1 << (InceptorOracleParser.KW_FOLLOWEDBY - 323)) | (1 << (InceptorOracleParser.KW_NOTFOLLOWEDBY - 323)) | (1 << (InceptorOracleParser.KW_NOTNEXT - 323)) | (1 << (InceptorOracleParser.KW_PATTERN_TIMES - 323)) | (1 << (InceptorOracleParser.KW_CURRVALUE - 323)) | (1 << (InceptorOracleParser.KW_GROUPING - 323)) | (1 << (InceptorOracleParser.KW_SETS - 323)))) !== 0) || ((((_la - 355)) & ~0x1f) == 0 && ((1 << (_la - 355)) & ((1 << (InceptorOracleParser.KW_TRUNCATE - 355)) | (1 << (InceptorOracleParser.KW_NOSCAN - 355)) | (1 << (InceptorOracleParser.KW_USER - 355)) | (1 << (InceptorOracleParser.KW_QUOTA - 355)) | (1 << (InceptorOracleParser.KW_PERMISSION - 355)) | (1 << (InceptorOracleParser.KW_ROLE - 355)) | (1 << (InceptorOracleParser.KW_ROLES - 355)) | (1 << (InceptorOracleParser.KW_INNER - 355)) | (1 << (InceptorOracleParser.KW_ADMIN - 355)) | (1 << (InceptorOracleParser.KW_OWNER - 355)) | (1 << (InceptorOracleParser.KW_PRINCIPALS - 355)) | (1 << (InceptorOracleParser.KW_CONSTANT - 355)) | (1 << (InceptorOracleParser.KW_CONSTRAINT - 355)) | (1 << (InceptorOracleParser.KW_VALUES - 355)) | (1 << (InceptorOracleParser.KW_YEAR - 355)) | (1 << (InceptorOracleParser.KW_MONTH - 355)) | (1 << (InceptorOracleParser.KW_DAY - 355)) | (1 << (InceptorOracleParser.KW_MINUTE - 355)) | (1 << (InceptorOracleParser.KW_HOUR - 355)))) !== 0) || ((((_la - 387)) & ~0x1f) == 0 && ((1 << (_la - 387)) & ((1 << (InceptorOracleParser.KW_SECOND - 387)) | (1 << (InceptorOracleParser.KW_INTERVAL - 387)) | (1 << (InceptorOracleParser.KW_EXTRACT - 387)) | (1 << (InceptorOracleParser.KW_SUBSTRING - 387)) | (1 << (InceptorOracleParser.KW_SYSDATE - 387)) | (1 << (InceptorOracleParser.KW_SYSTIMESTAMP - 387)) | (1 << (InceptorOracleParser.KW_SYSTIME - 387)) | (1 << (InceptorOracleParser.KW_MAXVALUE - 387)) | (1 << (InceptorOracleParser.KW_NOMAXVALUE - 387)) | (1 << (InceptorOracleParser.KW_MINVALUE - 387)) | (1 << (InceptorOracleParser.KW_NOMINVALUE - 387)) | (1 << (InceptorOracleParser.KW_CYCLE - 387)) | (1 << (InceptorOracleParser.KW_CACHE - 387)) | (1 << (InceptorOracleParser.KW_CACHEDMETRIC - 387)) | (1 << (InceptorOracleParser.KW_CACHEDMETRICS - 387)) | (1 << (InceptorOracleParser.KW_NOCACHE - 387)) | (1 << (InceptorOracleParser.KW_NOORDER - 387)) | (1 << (InceptorOracleParser.KW_MERGE - 387)) | (1 << (InceptorOracleParser.KW_PLANT - 387)) | (1 << (InceptorOracleParser.KW_IMMEDIATE - 387)) | (1 << (InceptorOracleParser.KW_COMPACT - 387)) | (1 << (InceptorOracleParser.KW_STOP - 387)) | (1 << (InceptorOracleParser.KW_LIST - 387)))) !== 0) || ((((_la - 419)) & ~0x1f) == 0 && ((1 << (_la - 419)) & ((1 << (InceptorOracleParser.KW_TRANSACTION - 419)) | (1 << (InceptorOracleParser.KW_WORK - 419)) | (1 << (InceptorOracleParser.KW_SPACE - 419)) | (1 << (InceptorOracleParser.KW_CONF - 419)) | (1 << (InceptorOracleParser.KW_DEFINED - 419)) | (1 << (InceptorOracleParser.KW_INTEGER - 419)) | (1 << (InceptorOracleParser.KW_ONLY - 419)) | (1 << (InceptorOracleParser.KW_SERVER - 419)) | (1 << (InceptorOracleParser.KW_TRANSACTIONS - 419)) | (1 << (InceptorOracleParser.KW_URI - 419)) | (1 << (InceptorOracleParser.KW_WRITE - 419)) | (1 << (InceptorOracleParser.KW_FACL - 419)) | (1 << (InceptorOracleParser.KW_FOUND - 419)) | (1 << (InceptorOracleParser.KW_LEVEL - 419)) | (1 << (InceptorOracleParser.KW_PUBLIC - 419)) | (1 << (InceptorOracleParser.KW_LINKS - 419)) | (1 << (InceptorOracleParser.KW_CONNECT - 419)) | (1 << (InceptorOracleParser.KW_APPLICATION - 419)) | (1 << (InceptorOracleParser.KW_APPLICATIONS - 419)) | (1 << (InceptorOracleParser.KW_APP - 419)) | (1 << (InceptorOracleParser.KW_APPS - 419)) | (1 << (InceptorOracleParser.KW_INFINITE - 419)))) !== 0) || ((((_la - 451)) & ~0x1f) == 0 && ((1 << (_la - 451)) & ((1 << (InceptorOracleParser.KW_WAIT - 451)) | (1 << (InceptorOracleParser.KW_PRIMARY - 451)) | (1 << (InceptorOracleParser.KW_FOREIGN - 451)) | (1 << (InceptorOracleParser.KW_REFERENCES - 451)) | (1 << (InceptorOracleParser.KW_VALIDATE - 451)) | (1 << (InceptorOracleParser.KW_NOVALIDATE - 451)) | (1 << (InceptorOracleParser.KW_RELY - 451)) | (1 << (InceptorOracleParser.KW_NORELY - 451)) | (1 << (InceptorOracleParser.KW_KEY - 451)) | (1 << (InceptorOracleParser.KW_SEGMENT - 451)) | (1 << (InceptorOracleParser.KW_LENGTH - 451)) | (1 << (InceptorOracleParser.KW_ATTACH - 451)) | (1 << (InceptorOracleParser.KW_DETTACH - 451)) | (1 << (InceptorOracleParser.KW_SHARD - 451)) | (1 << (InceptorOracleParser.KW_NUM - 451)) | (1 << (InceptorOracleParser.KW_FULLTEXT - 451)) | (1 << (InceptorOracleParser.KW_TABLESIZE - 451)) | (1 << (InceptorOracleParser.KW_TABLET - 451)) | (1 << (InceptorOracleParser.KW_CAPACITY - 451)) | (1 << (InceptorOracleParser.KW_ANALYZER - 451)) | (1 << (InceptorOracleParser.KW_SYNC - 451)) | (1 << (InceptorOracleParser.KW_NO_INDEX - 451)) | (1 << (InceptorOracleParser.KW_LOG - 451)) | (1 << (InceptorOracleParser.KW_FILE - 451)) | (1 << (InceptorOracleParser.KW_JAR - 451)) | (1 << (InceptorOracleParser.KW_PERMANENT - 451)))) !== 0) || ((((_la - 485)) & ~0x1f) == 0 && ((1 << (_la - 485)) & ((1 << (InceptorOracleParser.KW_SCHEDULER - 485)) | (1 << (InceptorOracleParser.KW_MODE - 485)) | (1 << (InceptorOracleParser.LPAREN - 485)) | (1 << (InceptorOracleParser.PLUS - 485)) | (1 << (InceptorOracleParser.MINUS - 485)))) !== 0) || ((((_la - 517)) & ~0x1f) == 0 && ((1 << (_la - 517)) & ((1 << (InceptorOracleParser.TILDE - 517)) | (1 << (InceptorOracleParser.StringLiteral - 517)) | (1 << (InceptorOracleParser.CharSetLiteral - 517)) | (1 << (InceptorOracleParser.BigintLiteral - 517)) | (1 << (InceptorOracleParser.SmallintLiteral - 517)) | (1 << (InceptorOracleParser.TinyintLiteral - 517)) | (1 << (InceptorOracleParser.DecimalLiteral - 517)) | (1 << (InceptorOracleParser.Number - 517)) | (1 << (InceptorOracleParser.Identifier - 517)) | (1 << (InceptorOracleParser.CharSetName - 517)) | (1 << (InceptorOracleParser.KW_NOCOPY - 517)) | (1 << (InceptorOracleParser.KW_VARRAY - 517)) | (1 << (InceptorOracleParser.KW_PACKAGE - 517)))) !== 0) || ((((_la - 549)) & ~0x1f) == 0 && ((1 << (_la - 549)) & ((1 << (InceptorOracleParser.KW_PACKAGES - 549)) | (1 << (InceptorOracleParser.KW_BODY - 549)) | (1 << (InceptorOracleParser.KW_ISOPEN - 549)) | (1 << (InceptorOracleParser.KW_NOTFOUND - 549)) | (1 << (InceptorOracleParser.KW_ROWCOUNT - 549)) | (1 << (InceptorOracleParser.KW_BULK_ROWCOUNT - 549)) | (1 << (InceptorOracleParser.KW_BULK_EXCEPTIONS - 549)) | (1 << (InceptorOracleParser.KW_REVERSE - 549)) | (1 << (InceptorOracleParser.KW_SAVE - 549)) | (1 << (InceptorOracleParser.KW_EXCEPTIONS - 549)) | (1 << (InceptorOracleParser.KW_INDICES - 549)) | (1 << (InceptorOracleParser.KW_REF - 549)) | (1 << (InceptorOracleParser.KW_YEARS - 549)) | (1 << (InceptorOracleParser.KW_MONTHS - 549)) | (1 << (InceptorOracleParser.KW_DAYS - 549)) | (1 << (InceptorOracleParser.KW_HOURS - 549)) | (1 << (InceptorOracleParser.KW_MINUTES - 549)) | (1 << (InceptorOracleParser.KW_SECONDS - 549)))) !== 0)) {
	            this.state = 6977;
	            this.expression();
	            this.state = 6982;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 6987;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===InceptorOracleParser.COMMA) {
	            this.state = 6983;
	            this.match(InceptorOracleParser.COMMA);
	            this.state = 6984;
	            this.identifier();
	            this.state = 6989;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 6990;
	        this.match(InceptorOracleParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameters() {
	    let localctx = new ParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1238, InceptorOracleParser.RULE_parameters);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6992;
	        this.match(InceptorOracleParser.LPAREN);
	        this.state = 6996;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << InceptorOracleParser.KW_TRUE) | (1 << InceptorOracleParser.KW_FALSE) | (1 << InceptorOracleParser.KW_ALL) | (1 << InceptorOracleParser.KW_LIKE) | (1 << InceptorOracleParser.KW_NO) | (1 << InceptorOracleParser.KW_ANY) | (1 << InceptorOracleParser.KW_EXISTS) | (1 << InceptorOracleParser.KW_ASC) | (1 << InceptorOracleParser.KW_DESC) | (1 << InceptorOracleParser.KW_ORDER) | (1 << InceptorOracleParser.KW_GROUP) | (1 << InceptorOracleParser.KW_INCREMENT) | (1 << InceptorOracleParser.KW_BY) | (1 << InceptorOracleParser.KW_HASH) | (1 << InceptorOracleParser.KW_INSERT) | (1 << InceptorOracleParser.KW_OVERWRITE) | (1 << InceptorOracleParser.KW_OUTER))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (InceptorOracleParser.KW_STREAMJOB - 33)) | (1 << (InceptorOracleParser.KW_STREAMJOBS - 33)) | (1 << (InceptorOracleParser.KW_AT - 33)) | (1 << (InceptorOracleParser.KW_LEFT - 33)) | (1 << (InceptorOracleParser.KW_RIGHT - 33)) | (1 << (InceptorOracleParser.KW_FULL - 33)) | (1 << (InceptorOracleParser.KW_PARTITION - 33)) | (1 << (InceptorOracleParser.KW_PARTITIONS - 33)) | (1 << (InceptorOracleParser.KW_PATTERN - 33)) | (1 << (InceptorOracleParser.KW_TABLE - 33)) | (1 << (InceptorOracleParser.KW_TABLES - 33)) | (1 << (InceptorOracleParser.KW_SEQUENCE - 33)) | (1 << (InceptorOracleParser.KW_SEQUENCES - 33)) | (1 << (InceptorOracleParser.KW_COLUMNS - 33)) | (1 << (InceptorOracleParser.KW_INDEX - 33)) | (1 << (InceptorOracleParser.KW_INDEXES - 33)) | (1 << (InceptorOracleParser.KW_REBUILD - 33)) | (1 << (InceptorOracleParser.KW_FUNCTIONS - 33)) | (1 << (InceptorOracleParser.KW_SHOW - 33)) | (1 << (InceptorOracleParser.KW_MSCK - 33)) | (1 << (InceptorOracleParser.KW_REPAIR - 33)) | (1 << (InceptorOracleParser.KW_DIRECTORY - 33)) | (1 << (InceptorOracleParser.KW_LOCAL - 33)) | (1 << (InceptorOracleParser.KW_GLOBAL - 33)) | (1 << (InceptorOracleParser.KW_USING - 33)) | (1 << (InceptorOracleParser.KW_CLUSTER - 33)) | (1 << (InceptorOracleParser.KW_DISTRIBUTE - 33)) | (1 << (InceptorOracleParser.KW_SORT - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (InceptorOracleParser.KW_UNION - 65)) | (1 << (InceptorOracleParser.KW_LOAD - 65)) | (1 << (InceptorOracleParser.KW_EXPORT - 65)) | (1 << (InceptorOracleParser.KW_IMPORT - 65)) | (1 << (InceptorOracleParser.KW_DATA - 65)) | (1 << (InceptorOracleParser.KW_INPATH - 65)) | (1 << (InceptorOracleParser.KW_IS - 65)) | (1 << (InceptorOracleParser.KW_NULLS - 65)) | (1 << (InceptorOracleParser.KW_CREATE - 65)) | (1 << (InceptorOracleParser.KW_EXTERNAL - 65)) | (1 << (InceptorOracleParser.KW_ALTER - 65)) | (1 << (InceptorOracleParser.KW_CHANGE - 65)) | (1 << (InceptorOracleParser.KW_FIRST - 65)) | (1 << (InceptorOracleParser.KW_LAST - 65)) | (1 << (InceptorOracleParser.KW_AFTER - 65)) | (1 << (InceptorOracleParser.KW_DESCRIBE - 65)) | (1 << (InceptorOracleParser.KW_DROP - 65)) | (1 << (InceptorOracleParser.KW_RENAME - 65)) | (1 << (InceptorOracleParser.KW_IGNORE - 65)) | (1 << (InceptorOracleParser.KW_RESPECT - 65)) | (1 << (InceptorOracleParser.KW_PROTECTION - 65)) | (1 << (InceptorOracleParser.KW_TO - 65)) | (1 << (InceptorOracleParser.KW_COMMENT - 65)) | (1 << (InceptorOracleParser.KW_PROMPT - 65)) | (1 << (InceptorOracleParser.KW_SPOOL - 65)) | (1 << (InceptorOracleParser.KW_BOOLEAN - 65)) | (1 << (InceptorOracleParser.KW_TINYINT - 65)) | (1 << (InceptorOracleParser.KW_BYTE - 65)) | (1 << (InceptorOracleParser.KW_SMALLINT - 65)) | (1 << (InceptorOracleParser.KW_INT - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (InceptorOracleParser.KW_BIGINT - 97)) | (1 << (InceptorOracleParser.KW_FLOAT - 97)) | (1 << (InceptorOracleParser.KW_DOUBLE - 97)) | (1 << (InceptorOracleParser.KW_DATE - 97)) | (1 << (InceptorOracleParser.KW_DATETIME - 97)) | (1 << (InceptorOracleParser.KW_TIMESTAMP - 97)) | (1 << (InceptorOracleParser.KW_TIME - 97)) | (1 << (InceptorOracleParser.KW_DECIMAL - 97)) | (1 << (InceptorOracleParser.KW_STRING - 97)) | (1 << (InceptorOracleParser.KW_GEO - 97)) | (1 << (InceptorOracleParser.KW_ARRAY - 97)) | (1 << (InceptorOracleParser.KW_STRUCT - 97)) | (1 << (InceptorOracleParser.KW_UNIONTYPE - 97)) | (1 << (InceptorOracleParser.KW_PARTITIONED - 97)) | (1 << (InceptorOracleParser.KW_ROUTED - 97)) | (1 << (InceptorOracleParser.KW_CLUSTERED - 97)) | (1 << (InceptorOracleParser.KW_SORTED - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (InceptorOracleParser.KW_NEXT - 129)) | (1 << (InceptorOracleParser.KW_NEXTVALUE - 129)) | (1 << (InceptorOracleParser.KW_BUCKETS - 129)) | (1 << (InceptorOracleParser.KW_ROW - 129)) | (1 << (InceptorOracleParser.KW_ROWS - 129)) | (1 << (InceptorOracleParser.KW_FORMAT - 129)) | (1 << (InceptorOracleParser.KW_DELIMITED - 129)) | (1 << (InceptorOracleParser.KW_FIELDS - 129)) | (1 << (InceptorOracleParser.KW_TERMINATED - 129)) | (1 << (InceptorOracleParser.KW_ESCAPED - 129)) | (1 << (InceptorOracleParser.KW_COLLECTION - 129)) | (1 << (InceptorOracleParser.KW_ITEMS - 129)) | (1 << (InceptorOracleParser.KW_KEYS - 129)) | (1 << (InceptorOracleParser.KW_KEY_TYPE - 129)) | (1 << (InceptorOracleParser.KW_LINES - 129)) | (1 << (InceptorOracleParser.KW_STORED - 129)) | (1 << (InceptorOracleParser.KW_FILEFORMAT - 129)) | (1 << (InceptorOracleParser.KW_SEQUENCEFILE - 129)) | (1 << (InceptorOracleParser.KW_TEXTFILE - 129)) | (1 << (InceptorOracleParser.KW_CSVFILE - 129)) | (1 << (InceptorOracleParser.KW_FWCFILE - 129)) | (1 << (InceptorOracleParser.KW_RCFILE - 129)) | (1 << (InceptorOracleParser.KW_ORCFILE - 129)) | (1 << (InceptorOracleParser.KW_HOLODESK - 129)) | (1 << (InceptorOracleParser.KW_STELLARDB - 129)) | (1 << (InceptorOracleParser.KW_ORCTRANSACTIONFILE - 129)) | (1 << (InceptorOracleParser.KW_PARQUET - 129)))) !== 0) || ((((_la - 161)) & ~0x1f) == 0 && ((1 << (_la - 161)) & ((1 << (InceptorOracleParser.KW_HYPERDRIVE - 161)) | (1 << (InceptorOracleParser.KW_ESDRIVE - 161)) | (1 << (InceptorOracleParser.KW_INPUTFORMAT - 161)) | (1 << (InceptorOracleParser.KW_OUTPUTFORMAT - 161)) | (1 << (InceptorOracleParser.KW_INPUTDRIVER - 161)) | (1 << (InceptorOracleParser.KW_OUTPUTDRIVER - 161)) | (1 << (InceptorOracleParser.KW_OFFLINE - 161)) | (1 << (InceptorOracleParser.KW_ENABLE - 161)) | (1 << (InceptorOracleParser.KW_DISABLE - 161)) | (1 << (InceptorOracleParser.KW_READONLY - 161)) | (1 << (InceptorOracleParser.KW_NO_DROP - 161)) | (1 << (InceptorOracleParser.KW_LOCATION - 161)) | (1 << (InceptorOracleParser.KW_BUCKET - 161)) | (1 << (InceptorOracleParser.KW_OUT - 161)) | (1 << (InceptorOracleParser.KW_OF - 161)) | (1 << (InceptorOracleParser.KW_PERCENT - 161)) | (1 << (InceptorOracleParser.KW_ADD - 161)) | (1 << (InceptorOracleParser.KW_REPLACE - 161)) | (1 << (InceptorOracleParser.KW_RLIKE - 161)) | (1 << (InceptorOracleParser.KW_REGEXP - 161)) | (1 << (InceptorOracleParser.KW_TEMPORARY - 161)) | (1 << (InceptorOracleParser.KW_RESOURCE - 161)) | (1 << (InceptorOracleParser.KW_RELOAD - 161)) | (1 << (InceptorOracleParser.KW_EXPLAIN - 161)) | (1 << (InceptorOracleParser.KW_FORMATTED - 161)) | (1 << (InceptorOracleParser.KW_PRETTY - 161)) | (1 << (InceptorOracleParser.KW_DEPENDENCY - 161)))) !== 0) || ((((_la - 193)) & ~0x1f) == 0 && ((1 << (_la - 193)) & ((1 << (InceptorOracleParser.KW_LOGICAL - 193)) | (1 << (InceptorOracleParser.KW_COST - 193)) | (1 << (InceptorOracleParser.KW_SERDE - 193)) | (1 << (InceptorOracleParser.KW_WITH - 193)) | (1 << (InceptorOracleParser.KW_WITHIN - 193)) | (1 << (InceptorOracleParser.KW_DEFERRED - 193)) | (1 << (InceptorOracleParser.KW_SERDEPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_DBPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_LIMIT - 193)) | (1 << (InceptorOracleParser.KW_SET - 193)) | (1 << (InceptorOracleParser.KW_UNSET - 193)) | (1 << (InceptorOracleParser.KW_TBLPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_IDXPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_VALUE_TYPE - 193)) | (1 << (InceptorOracleParser.KW_ELEM_TYPE - 193)) | (1 << (InceptorOracleParser.KW_PRIOR - 193)) | (1 << (InceptorOracleParser.KW_NOCYCLE - 193)) | (1 << (InceptorOracleParser.KW_MAPJOIN - 193)) | (1 << (InceptorOracleParser.KW_COMBINE - 193)) | (1 << (InceptorOracleParser.KW_COMBINE_STRUCT_INDEX - 193)) | (1 << (InceptorOracleParser.KW_GLKJOIN - 193)) | (1 << (InceptorOracleParser.KW_USE_INDEX - 193)))) !== 0) || ((((_la - 225)) & ~0x1f) == 0 && ((1 << (_la - 225)) & ((1 << (InceptorOracleParser.KW_STARGATE - 225)) | (1 << (InceptorOracleParser.KW_USE_BULKLOAD - 225)) | (1 << (InceptorOracleParser.KW_ADHOC - 225)) | (1 << (InceptorOracleParser.KW_PRECOMPILE - 225)) | (1 << (InceptorOracleParser.KW_STREAMTABLE - 225)) | (1 << (InceptorOracleParser.KW_STREAM - 225)) | (1 << (InceptorOracleParser.KW_RULEBASE - 225)) | (1 << (InceptorOracleParser.KW_RULEBASES - 225)) | (1 << (InceptorOracleParser.KW_RULE - 225)) | (1 << (InceptorOracleParser.KW_RULES - 225)) | (1 << (InceptorOracleParser.KW_MEET - 225)) | (1 << (InceptorOracleParser.KW_MUST - 225)) | (1 << (InceptorOracleParser.KW_MUSTNOT - 225)) | (1 << (InceptorOracleParser.KW_POLICY - 225)) | (1 << (InceptorOracleParser.KW_POLICIES - 225)) | (1 << (InceptorOracleParser.KW_REMOVE - 225)) | (1 << (InceptorOracleParser.KW_POLICYKEY - 225)) | (1 << (InceptorOracleParser.KW_POLICY_RULE - 225)) | (1 << (InceptorOracleParser.KW_LOOKUP - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTION - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTIONS - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTION_PROPERTIES - 225)) | (1 << (InceptorOracleParser.KW_HOLD_DDLTIME - 225)) | (1 << (InceptorOracleParser.KW_CLUSTERSTATUS - 225)))) !== 0) || ((((_la - 257)) & ~0x1f) == 0 && ((1 << (_la - 257)) & ((1 << (InceptorOracleParser.KW_UTC - 257)) | (1 << (InceptorOracleParser.KW_UTCTIMESTAMP - 257)) | (1 << (InceptorOracleParser.KW_LONG - 257)) | (1 << (InceptorOracleParser.KW_DELETE - 257)) | (1 << (InceptorOracleParser.KW_PLUS - 257)) | (1 << (InceptorOracleParser.KW_MINUS - 257)) | (1 << (InceptorOracleParser.KW_OP_CONCAT - 257)) | (1 << (InceptorOracleParser.KW_FETCH - 257)) | (1 << (InceptorOracleParser.KW_INTERSECT - 257)) | (1 << (InceptorOracleParser.KW_VIEW - 257)) | (1 << (InceptorOracleParser.KW_IN - 257)) | (1 << (InceptorOracleParser.KW_DATABASES - 257)) | (1 << (InceptorOracleParser.KW_MATERIALIZED - 257)) | (1 << (InceptorOracleParser.KW_SCHEMA - 257)) | (1 << (InceptorOracleParser.KW_SCHEMAS - 257)) | (1 << (InceptorOracleParser.KW_GRANT - 257)) | (1 << (InceptorOracleParser.KW_REVOKE - 257)) | (1 << (InceptorOracleParser.KW_SSL - 257)) | (1 << (InceptorOracleParser.KW_UNDO - 257)) | (1 << (InceptorOracleParser.KW_LOCK - 257)) | (1 << (InceptorOracleParser.KW_LOCKS - 257)) | (1 << (InceptorOracleParser.KW_UNLOCK - 257)) | (1 << (InceptorOracleParser.KW_SHARED - 257)) | (1 << (InceptorOracleParser.KW_EXCLUSIVE - 257)) | (1 << (InceptorOracleParser.KW_PROCEDURE - 257)) | (1 << (InceptorOracleParser.KW_UNSIGNED - 257)) | (1 << (InceptorOracleParser.KW_WHILE - 257)) | (1 << (InceptorOracleParser.KW_READ - 257)) | (1 << (InceptorOracleParser.KW_READS - 257)))) !== 0) || ((((_la - 289)) & ~0x1f) == 0 && ((1 << (_la - 289)) & ((1 << (InceptorOracleParser.KW_PURGE - 289)) | (1 << (InceptorOracleParser.KW_RANGE - 289)) | (1 << (InceptorOracleParser.KW_ANALYZE - 289)) | (1 << (InceptorOracleParser.KW_BEFORE - 289)) | (1 << (InceptorOracleParser.KW_BETWEEN - 289)) | (1 << (InceptorOracleParser.KW_BOTH - 289)) | (1 << (InceptorOracleParser.KW_BINARY - 289)) | (1 << (InceptorOracleParser.KW_DEFAULT - 289)) | (1 << (InceptorOracleParser.KW_TYPE - 289)) | (1 << (InceptorOracleParser.KW_TRIGGER - 289)) | (1 << (InceptorOracleParser.KW_RECORDREADER - 289)) | (1 << (InceptorOracleParser.KW_RECORDWRITER - 289)) | (1 << (InceptorOracleParser.KW_SEMI - 289)) | (1 << (InceptorOracleParser.KW_LATERAL - 289)) | (1 << (InceptorOracleParser.KW_TOUCH - 289)) | (1 << (InceptorOracleParser.KW_ARCHIVE - 289)) | (1 << (InceptorOracleParser.KW_UNARCHIVE - 289)) | (1 << (InceptorOracleParser.KW_COMPUTE - 289)) | (1 << (InceptorOracleParser.KW_STATISTICS - 289)) | (1 << (InceptorOracleParser.KW_USE - 289)) | (1 << (InceptorOracleParser.KW_OPTION - 289)) | (1 << (InceptorOracleParser.KW_CONCATENATE - 289)) | (1 << (InceptorOracleParser.KW_SHOW_DATABASE - 289)) | (1 << (InceptorOracleParser.KW_UPDATE - 289)) | (1 << (InceptorOracleParser.KW_RESTRICT - 289)) | (1 << (InceptorOracleParser.KW_CASCADE - 289)) | (1 << (InceptorOracleParser.KW_SKEWED - 289)))) !== 0) || ((((_la - 323)) & ~0x1f) == 0 && ((1 << (_la - 323)) & ((1 << (InceptorOracleParser.KW_DIRECTORIES - 323)) | (1 << (InceptorOracleParser.KW_WINDOWRESET - 323)) | (1 << (InceptorOracleParser.KW_SESSIONSTART - 323)) | (1 << (InceptorOracleParser.KW_SESSIONSTOP - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE_DISCARD - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE_COMPLETE - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOW - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOWSLIDELENGTH - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOWSEPARATED - 323)) | (1 << (InceptorOracleParser.KW_FOLLOWEDBY - 323)) | (1 << (InceptorOracleParser.KW_NOTFOLLOWEDBY - 323)) | (1 << (InceptorOracleParser.KW_NOTNEXT - 323)) | (1 << (InceptorOracleParser.KW_PATTERN_TIMES - 323)) | (1 << (InceptorOracleParser.KW_CURRVALUE - 323)) | (1 << (InceptorOracleParser.KW_GROUPING - 323)) | (1 << (InceptorOracleParser.KW_SETS - 323)))) !== 0) || ((((_la - 355)) & ~0x1f) == 0 && ((1 << (_la - 355)) & ((1 << (InceptorOracleParser.KW_TRUNCATE - 355)) | (1 << (InceptorOracleParser.KW_NOSCAN - 355)) | (1 << (InceptorOracleParser.KW_USER - 355)) | (1 << (InceptorOracleParser.KW_QUOTA - 355)) | (1 << (InceptorOracleParser.KW_PERMISSION - 355)) | (1 << (InceptorOracleParser.KW_ROLE - 355)) | (1 << (InceptorOracleParser.KW_ROLES - 355)) | (1 << (InceptorOracleParser.KW_INNER - 355)) | (1 << (InceptorOracleParser.KW_ADMIN - 355)) | (1 << (InceptorOracleParser.KW_OWNER - 355)) | (1 << (InceptorOracleParser.KW_PRINCIPALS - 355)) | (1 << (InceptorOracleParser.KW_CONSTANT - 355)) | (1 << (InceptorOracleParser.KW_CONSTRAINT - 355)) | (1 << (InceptorOracleParser.KW_VALUES - 355)) | (1 << (InceptorOracleParser.KW_YEAR - 355)) | (1 << (InceptorOracleParser.KW_MONTH - 355)) | (1 << (InceptorOracleParser.KW_DAY - 355)) | (1 << (InceptorOracleParser.KW_MINUTE - 355)) | (1 << (InceptorOracleParser.KW_HOUR - 355)))) !== 0) || ((((_la - 387)) & ~0x1f) == 0 && ((1 << (_la - 387)) & ((1 << (InceptorOracleParser.KW_SECOND - 387)) | (1 << (InceptorOracleParser.KW_INTERVAL - 387)) | (1 << (InceptorOracleParser.KW_SYSDATE - 387)) | (1 << (InceptorOracleParser.KW_NOMAXVALUE - 387)) | (1 << (InceptorOracleParser.KW_MINVALUE - 387)) | (1 << (InceptorOracleParser.KW_NOMINVALUE - 387)) | (1 << (InceptorOracleParser.KW_CYCLE - 387)) | (1 << (InceptorOracleParser.KW_CACHE - 387)) | (1 << (InceptorOracleParser.KW_CACHEDMETRIC - 387)) | (1 << (InceptorOracleParser.KW_CACHEDMETRICS - 387)) | (1 << (InceptorOracleParser.KW_NOCACHE - 387)) | (1 << (InceptorOracleParser.KW_NOORDER - 387)) | (1 << (InceptorOracleParser.KW_MERGE - 387)) | (1 << (InceptorOracleParser.KW_PLANT - 387)) | (1 << (InceptorOracleParser.KW_IMMEDIATE - 387)) | (1 << (InceptorOracleParser.KW_COMPACT - 387)) | (1 << (InceptorOracleParser.KW_STOP - 387)) | (1 << (InceptorOracleParser.KW_LIST - 387)))) !== 0) || ((((_la - 419)) & ~0x1f) == 0 && ((1 << (_la - 419)) & ((1 << (InceptorOracleParser.KW_TRANSACTION - 419)) | (1 << (InceptorOracleParser.KW_WORK - 419)) | (1 << (InceptorOracleParser.KW_SPACE - 419)) | (1 << (InceptorOracleParser.KW_CONF - 419)) | (1 << (InceptorOracleParser.KW_DEFINED - 419)) | (1 << (InceptorOracleParser.KW_INTEGER - 419)) | (1 << (InceptorOracleParser.KW_ONLY - 419)) | (1 << (InceptorOracleParser.KW_SERVER - 419)) | (1 << (InceptorOracleParser.KW_TRANSACTIONS - 419)) | (1 << (InceptorOracleParser.KW_URI - 419)) | (1 << (InceptorOracleParser.KW_WRITE - 419)) | (1 << (InceptorOracleParser.KW_FACL - 419)) | (1 << (InceptorOracleParser.KW_FOUND - 419)) | (1 << (InceptorOracleParser.KW_LEVEL - 419)) | (1 << (InceptorOracleParser.KW_PUBLIC - 419)) | (1 << (InceptorOracleParser.KW_LINKS - 419)) | (1 << (InceptorOracleParser.KW_CONNECT - 419)) | (1 << (InceptorOracleParser.KW_APPLICATION - 419)) | (1 << (InceptorOracleParser.KW_APPLICATIONS - 419)) | (1 << (InceptorOracleParser.KW_APP - 419)) | (1 << (InceptorOracleParser.KW_APPS - 419)) | (1 << (InceptorOracleParser.KW_INFINITE - 419)))) !== 0) || ((((_la - 451)) & ~0x1f) == 0 && ((1 << (_la - 451)) & ((1 << (InceptorOracleParser.KW_WAIT - 451)) | (1 << (InceptorOracleParser.KW_PRIMARY - 451)) | (1 << (InceptorOracleParser.KW_FOREIGN - 451)) | (1 << (InceptorOracleParser.KW_REFERENCES - 451)) | (1 << (InceptorOracleParser.KW_VALIDATE - 451)) | (1 << (InceptorOracleParser.KW_NOVALIDATE - 451)) | (1 << (InceptorOracleParser.KW_RELY - 451)) | (1 << (InceptorOracleParser.KW_NORELY - 451)) | (1 << (InceptorOracleParser.KW_KEY - 451)) | (1 << (InceptorOracleParser.KW_SEGMENT - 451)) | (1 << (InceptorOracleParser.KW_LENGTH - 451)) | (1 << (InceptorOracleParser.KW_ATTACH - 451)) | (1 << (InceptorOracleParser.KW_DETTACH - 451)) | (1 << (InceptorOracleParser.KW_SHARD - 451)) | (1 << (InceptorOracleParser.KW_NUM - 451)) | (1 << (InceptorOracleParser.KW_FULLTEXT - 451)) | (1 << (InceptorOracleParser.KW_TABLESIZE - 451)) | (1 << (InceptorOracleParser.KW_TABLET - 451)) | (1 << (InceptorOracleParser.KW_CAPACITY - 451)) | (1 << (InceptorOracleParser.KW_ANALYZER - 451)) | (1 << (InceptorOracleParser.KW_SYNC - 451)) | (1 << (InceptorOracleParser.KW_NO_INDEX - 451)) | (1 << (InceptorOracleParser.KW_LOG - 451)) | (1 << (InceptorOracleParser.KW_FILE - 451)) | (1 << (InceptorOracleParser.KW_JAR - 451)) | (1 << (InceptorOracleParser.KW_PERMANENT - 451)))) !== 0) || _la===InceptorOracleParser.KW_SCHEDULER || _la===InceptorOracleParser.KW_MODE || ((((_la - 523)) & ~0x1f) == 0 && ((1 << (_la - 523)) & ((1 << (InceptorOracleParser.AT - 523)) | (1 << (InceptorOracleParser.Identifier - 523)) | (1 << (InceptorOracleParser.KW_NOCOPY - 523)) | (1 << (InceptorOracleParser.KW_VARRAY - 523)) | (1 << (InceptorOracleParser.KW_PACKAGE - 523)) | (1 << (InceptorOracleParser.KW_PACKAGES - 523)) | (1 << (InceptorOracleParser.KW_BODY - 523)) | (1 << (InceptorOracleParser.KW_ISOPEN - 523)) | (1 << (InceptorOracleParser.KW_NOTFOUND - 523)) | (1 << (InceptorOracleParser.KW_ROWCOUNT - 523)) | (1 << (InceptorOracleParser.KW_BULK_ROWCOUNT - 523)))) !== 0) || ((((_la - 555)) & ~0x1f) == 0 && ((1 << (_la - 555)) & ((1 << (InceptorOracleParser.KW_BULK_EXCEPTIONS - 555)) | (1 << (InceptorOracleParser.KW_REVERSE - 555)) | (1 << (InceptorOracleParser.KW_SAVE - 555)) | (1 << (InceptorOracleParser.KW_EXCEPTIONS - 555)) | (1 << (InceptorOracleParser.KW_INDICES - 555)) | (1 << (InceptorOracleParser.KW_REF - 555)) | (1 << (InceptorOracleParser.KW_YEARS - 555)) | (1 << (InceptorOracleParser.KW_MONTHS - 555)) | (1 << (InceptorOracleParser.KW_DAYS - 555)) | (1 << (InceptorOracleParser.KW_HOURS - 555)) | (1 << (InceptorOracleParser.KW_MINUTES - 555)) | (1 << (InceptorOracleParser.KW_SECONDS - 555)))) !== 0)) {
	            this.state = 6993;
	            this.parameter();
	            this.state = 6998;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 7003;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===InceptorOracleParser.COMMA) {
	            this.state = 6999;
	            this.match(InceptorOracleParser.COMMA);
	            this.state = 7000;
	            this.parameter();
	            this.state = 7005;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 7006;
	        this.match(InceptorOracleParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameter() {
	    let localctx = new ParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1240, InceptorOracleParser.RULE_parameter);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7008;
	        this.variable_name();
	        this.state = 7012;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,771,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 7009;
	                this.parameter_attribute(); 
	            }
	            this.state = 7014;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,771,this._ctx);
	        }

	        this.state = 7015;
	        this.datatype();
	        this.state = 7021;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,773,this._ctx);
	        if(la_===1) {
	            this.state = 7018;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case InceptorOracleParser.ASSIGN_OP:
	                this.state = 7016;
	                localctx.assign = this.match(InceptorOracleParser.ASSIGN_OP);
	                break;
	            case InceptorOracleParser.KW_DEFAULT:
	                this.state = 7017;
	                localctx.assign = this.match(InceptorOracleParser.KW_DEFAULT);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 7020;
	            this.default_value();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameter_attribute() {
	    let localctx = new Parameter_attributeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1242, InceptorOracleParser.RULE_parameter_attribute);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7023;
	        _la = this._input.LA(1);
	        if(!(_la===InceptorOracleParser.KW_OUT || _la===InceptorOracleParser.KW_IN || _la===InceptorOracleParser.KW_INOUT || _la===InceptorOracleParser.KW_NOCOPY)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declareSpecItem() {
	    let localctx = new DeclareSpecItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1244, InceptorOracleParser.RULE_declareSpecItem);
	    var _la = 0; // Token type
	    try {
	        this.state = 7045;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,779,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7025;
	            this.typeDeclStatement();
	            this.state = 7027;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.SEMICOLON) {
	                this.state = 7026;
	                this.match(InceptorOracleParser.SEMICOLON);
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7029;
	            this.declareException();
	            this.state = 7031;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.SEMICOLON) {
	                this.state = 7030;
	                this.match(InceptorOracleParser.SEMICOLON);
	            }

	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7033;
	            this.declareVariable();
	            this.state = 7035;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.SEMICOLON) {
	                this.state = 7034;
	                this.match(InceptorOracleParser.SEMICOLON);
	            }

	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 7037;
	            this.cursorDeclStatement();
	            this.state = 7039;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.SEMICOLON) {
	                this.state = 7038;
	                this.match(InceptorOracleParser.SEMICOLON);
	            }

	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 7041;
	            this.pragmaStatement();
	            this.state = 7043;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.SEMICOLON) {
	                this.state = 7042;
	                this.match(InceptorOracleParser.SEMICOLON);
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declareVariable() {
	    let localctx = new DeclareVariableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1246, InceptorOracleParser.RULE_declareVariable);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7047;
	        this.variable_name();
	        this.state = 7049;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,780,this._ctx);
	        if(la_===1) {
	            this.state = 7048;
	            this.match(InceptorOracleParser.KW_CONSTANT);

	        }
	        this.state = 7051;
	        this.datatype();
	        this.state = 7054;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_NOT) {
	            this.state = 7052;
	            this.match(InceptorOracleParser.KW_NOT);
	            this.state = 7053;
	            this.match(InceptorOracleParser.KW_NULL);
	        }

	        this.state = 7061;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,783,this._ctx);
	        if(la_===1) {
	            this.state = 7058;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case InceptorOracleParser.ASSIGN_OP:
	                this.state = 7056;
	                localctx.assign = this.match(InceptorOracleParser.ASSIGN_OP);
	                break;
	            case InceptorOracleParser.KW_DEFAULT:
	                this.state = 7057;
	                localctx.assign = this.match(InceptorOracleParser.KW_DEFAULT);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 7060;
	            this.default_value();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variable_name() {
	    let localctx = new Variable_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1248, InceptorOracleParser.RULE_variable_name);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7064;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.AT) {
	            this.state = 7063;
	            this.match(InceptorOracleParser.AT);
	        }

	        this.state = 7066;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	default_value() {
	    let localctx = new Default_valueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1250, InceptorOracleParser.RULE_default_value);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7068;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	return_type_spec() {
	    let localctx = new Return_type_specContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1252, InceptorOracleParser.RULE_return_type_spec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7070;
	        this.datatype();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	size() {
	    let localctx = new SizeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1254, InceptorOracleParser.RULE_size);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7073; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 7072;
	            this.match(InceptorOracleParser.Digit);
	            this.state = 7075; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===InceptorOracleParser.Digit);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	leftValue() {
	    let localctx = new LeftValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1256, InceptorOracleParser.RULE_leftValue);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7077;
	        this.moleculeExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	plFuncProcName() {
	    let localctx = new PlFuncProcNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1258, InceptorOracleParser.RULE_plFuncProcName);
	    try {
	        this.state = 7084;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,786,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7079;
	            localctx.db = this.identifier();
	            this.state = 7080;
	            this.match(InceptorOracleParser.DOT);
	            this.state = 7081;
	            localctx.funcpro = this.identifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7083;
	            localctx.funcpro = this.identifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declareException() {
	    let localctx = new DeclareExceptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1260, InceptorOracleParser.RULE_declareException);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7086;
	        this.identifier();
	        this.state = 7087;
	        this.match(InceptorOracleParser.KW_EXCEPTION);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pragmaStatement() {
	    let localctx = new PragmaStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1262, InceptorOracleParser.RULE_pragmaStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7089;
	        this.match(InceptorOracleParser.KW_PRAGMA);
	        this.state = 7090;
	        this.pragmas();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pragmas() {
	    let localctx = new PragmasContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1264, InceptorOracleParser.RULE_pragmas);
	    try {
	        this.state = 7095;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case InceptorOracleParser.KW_EXCEPTION_INIT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7092;
	            this.pragmaExceptionInit();
	            break;
	        case InceptorOracleParser.KW_AUTONOMOUS_TRANSACTION:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7093;
	            this.pragmaAutonomousTransaction();
	            break;
	        case InceptorOracleParser.KW_SERIALLY_REUSABLE:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7094;
	            this.pragmaSeriallyReusable();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pragmaExceptionInit() {
	    let localctx = new PragmaExceptionInitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1266, InceptorOracleParser.RULE_pragmaExceptionInit);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7097;
	        this.match(InceptorOracleParser.KW_EXCEPTION_INIT);
	        this.state = 7098;
	        this.match(InceptorOracleParser.LPAREN);
	        this.state = 7099;
	        this.identifier();
	        this.state = 7100;
	        this.match(InceptorOracleParser.COMMA);
	        this.state = 7101;
	        this.expression();
	        this.state = 7102;
	        this.match(InceptorOracleParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pragmaAutonomousTransaction() {
	    let localctx = new PragmaAutonomousTransactionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1268, InceptorOracleParser.RULE_pragmaAutonomousTransaction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7104;
	        this.match(InceptorOracleParser.KW_AUTONOMOUS_TRANSACTION);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pragmaSeriallyReusable() {
	    let localctx = new PragmaSeriallyReusableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1270, InceptorOracleParser.RULE_pragmaSeriallyReusable);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7106;
	        this.match(InceptorOracleParser.KW_SERIALLY_REUSABLE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declare_pragma() {
	    let localctx = new Declare_pragmaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1272, InceptorOracleParser.RULE_declare_pragma);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7108;
	        this.match(InceptorOracleParser.KW_PRAGMA);
	        this.state = 7112;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << InceptorOracleParser.KW_TRUE) | (1 << InceptorOracleParser.KW_FALSE) | (1 << InceptorOracleParser.KW_ALL) | (1 << InceptorOracleParser.KW_LIKE) | (1 << InceptorOracleParser.KW_NO) | (1 << InceptorOracleParser.KW_ANY) | (1 << InceptorOracleParser.KW_EXISTS) | (1 << InceptorOracleParser.KW_ASC) | (1 << InceptorOracleParser.KW_DESC) | (1 << InceptorOracleParser.KW_ORDER) | (1 << InceptorOracleParser.KW_GROUP) | (1 << InceptorOracleParser.KW_INCREMENT) | (1 << InceptorOracleParser.KW_BY) | (1 << InceptorOracleParser.KW_HASH) | (1 << InceptorOracleParser.KW_INSERT) | (1 << InceptorOracleParser.KW_OVERWRITE) | (1 << InceptorOracleParser.KW_OUTER))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (InceptorOracleParser.KW_STREAMJOB - 33)) | (1 << (InceptorOracleParser.KW_STREAMJOBS - 33)) | (1 << (InceptorOracleParser.KW_AT - 33)) | (1 << (InceptorOracleParser.KW_LEFT - 33)) | (1 << (InceptorOracleParser.KW_RIGHT - 33)) | (1 << (InceptorOracleParser.KW_FULL - 33)) | (1 << (InceptorOracleParser.KW_PARTITION - 33)) | (1 << (InceptorOracleParser.KW_PARTITIONS - 33)) | (1 << (InceptorOracleParser.KW_PATTERN - 33)) | (1 << (InceptorOracleParser.KW_TABLE - 33)) | (1 << (InceptorOracleParser.KW_TABLES - 33)) | (1 << (InceptorOracleParser.KW_SEQUENCE - 33)) | (1 << (InceptorOracleParser.KW_SEQUENCES - 33)) | (1 << (InceptorOracleParser.KW_COLUMNS - 33)) | (1 << (InceptorOracleParser.KW_INDEX - 33)) | (1 << (InceptorOracleParser.KW_INDEXES - 33)) | (1 << (InceptorOracleParser.KW_REBUILD - 33)) | (1 << (InceptorOracleParser.KW_FUNCTIONS - 33)) | (1 << (InceptorOracleParser.KW_SHOW - 33)) | (1 << (InceptorOracleParser.KW_MSCK - 33)) | (1 << (InceptorOracleParser.KW_REPAIR - 33)) | (1 << (InceptorOracleParser.KW_DIRECTORY - 33)) | (1 << (InceptorOracleParser.KW_LOCAL - 33)) | (1 << (InceptorOracleParser.KW_GLOBAL - 33)) | (1 << (InceptorOracleParser.KW_USING - 33)) | (1 << (InceptorOracleParser.KW_CLUSTER - 33)) | (1 << (InceptorOracleParser.KW_DISTRIBUTE - 33)) | (1 << (InceptorOracleParser.KW_SORT - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (InceptorOracleParser.KW_UNION - 65)) | (1 << (InceptorOracleParser.KW_LOAD - 65)) | (1 << (InceptorOracleParser.KW_EXPORT - 65)) | (1 << (InceptorOracleParser.KW_IMPORT - 65)) | (1 << (InceptorOracleParser.KW_DATA - 65)) | (1 << (InceptorOracleParser.KW_INPATH - 65)) | (1 << (InceptorOracleParser.KW_IS - 65)) | (1 << (InceptorOracleParser.KW_NULLS - 65)) | (1 << (InceptorOracleParser.KW_CREATE - 65)) | (1 << (InceptorOracleParser.KW_EXTERNAL - 65)) | (1 << (InceptorOracleParser.KW_ALTER - 65)) | (1 << (InceptorOracleParser.KW_CHANGE - 65)) | (1 << (InceptorOracleParser.KW_FIRST - 65)) | (1 << (InceptorOracleParser.KW_LAST - 65)) | (1 << (InceptorOracleParser.KW_AFTER - 65)) | (1 << (InceptorOracleParser.KW_DESCRIBE - 65)) | (1 << (InceptorOracleParser.KW_DROP - 65)) | (1 << (InceptorOracleParser.KW_RENAME - 65)) | (1 << (InceptorOracleParser.KW_IGNORE - 65)) | (1 << (InceptorOracleParser.KW_RESPECT - 65)) | (1 << (InceptorOracleParser.KW_PROTECTION - 65)) | (1 << (InceptorOracleParser.KW_TO - 65)) | (1 << (InceptorOracleParser.KW_COMMENT - 65)) | (1 << (InceptorOracleParser.KW_PROMPT - 65)) | (1 << (InceptorOracleParser.KW_SPOOL - 65)) | (1 << (InceptorOracleParser.KW_BOOLEAN - 65)) | (1 << (InceptorOracleParser.KW_TINYINT - 65)) | (1 << (InceptorOracleParser.KW_BYTE - 65)) | (1 << (InceptorOracleParser.KW_SMALLINT - 65)) | (1 << (InceptorOracleParser.KW_INT - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (InceptorOracleParser.KW_BIGINT - 97)) | (1 << (InceptorOracleParser.KW_FLOAT - 97)) | (1 << (InceptorOracleParser.KW_DOUBLE - 97)) | (1 << (InceptorOracleParser.KW_DATE - 97)) | (1 << (InceptorOracleParser.KW_DATETIME - 97)) | (1 << (InceptorOracleParser.KW_TIMESTAMP - 97)) | (1 << (InceptorOracleParser.KW_TIME - 97)) | (1 << (InceptorOracleParser.KW_DECIMAL - 97)) | (1 << (InceptorOracleParser.KW_STRING - 97)) | (1 << (InceptorOracleParser.KW_GEO - 97)) | (1 << (InceptorOracleParser.KW_ARRAY - 97)) | (1 << (InceptorOracleParser.KW_STRUCT - 97)) | (1 << (InceptorOracleParser.KW_UNIONTYPE - 97)) | (1 << (InceptorOracleParser.KW_PARTITIONED - 97)) | (1 << (InceptorOracleParser.KW_ROUTED - 97)) | (1 << (InceptorOracleParser.KW_CLUSTERED - 97)) | (1 << (InceptorOracleParser.KW_SORTED - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (InceptorOracleParser.KW_NEXT - 129)) | (1 << (InceptorOracleParser.KW_NEXTVALUE - 129)) | (1 << (InceptorOracleParser.KW_BUCKETS - 129)) | (1 << (InceptorOracleParser.KW_ROW - 129)) | (1 << (InceptorOracleParser.KW_ROWS - 129)) | (1 << (InceptorOracleParser.KW_FORMAT - 129)) | (1 << (InceptorOracleParser.KW_DELIMITED - 129)) | (1 << (InceptorOracleParser.KW_FIELDS - 129)) | (1 << (InceptorOracleParser.KW_TERMINATED - 129)) | (1 << (InceptorOracleParser.KW_ESCAPED - 129)) | (1 << (InceptorOracleParser.KW_COLLECTION - 129)) | (1 << (InceptorOracleParser.KW_ITEMS - 129)) | (1 << (InceptorOracleParser.KW_KEYS - 129)) | (1 << (InceptorOracleParser.KW_KEY_TYPE - 129)) | (1 << (InceptorOracleParser.KW_LINES - 129)) | (1 << (InceptorOracleParser.KW_STORED - 129)) | (1 << (InceptorOracleParser.KW_FILEFORMAT - 129)) | (1 << (InceptorOracleParser.KW_SEQUENCEFILE - 129)) | (1 << (InceptorOracleParser.KW_TEXTFILE - 129)) | (1 << (InceptorOracleParser.KW_CSVFILE - 129)) | (1 << (InceptorOracleParser.KW_FWCFILE - 129)) | (1 << (InceptorOracleParser.KW_RCFILE - 129)) | (1 << (InceptorOracleParser.KW_ORCFILE - 129)) | (1 << (InceptorOracleParser.KW_HOLODESK - 129)) | (1 << (InceptorOracleParser.KW_STELLARDB - 129)) | (1 << (InceptorOracleParser.KW_ORCTRANSACTIONFILE - 129)) | (1 << (InceptorOracleParser.KW_PARQUET - 129)))) !== 0) || ((((_la - 161)) & ~0x1f) == 0 && ((1 << (_la - 161)) & ((1 << (InceptorOracleParser.KW_HYPERDRIVE - 161)) | (1 << (InceptorOracleParser.KW_ESDRIVE - 161)) | (1 << (InceptorOracleParser.KW_INPUTFORMAT - 161)) | (1 << (InceptorOracleParser.KW_OUTPUTFORMAT - 161)) | (1 << (InceptorOracleParser.KW_INPUTDRIVER - 161)) | (1 << (InceptorOracleParser.KW_OUTPUTDRIVER - 161)) | (1 << (InceptorOracleParser.KW_OFFLINE - 161)) | (1 << (InceptorOracleParser.KW_ENABLE - 161)) | (1 << (InceptorOracleParser.KW_DISABLE - 161)) | (1 << (InceptorOracleParser.KW_READONLY - 161)) | (1 << (InceptorOracleParser.KW_NO_DROP - 161)) | (1 << (InceptorOracleParser.KW_LOCATION - 161)) | (1 << (InceptorOracleParser.KW_BUCKET - 161)) | (1 << (InceptorOracleParser.KW_OUT - 161)) | (1 << (InceptorOracleParser.KW_OF - 161)) | (1 << (InceptorOracleParser.KW_PERCENT - 161)) | (1 << (InceptorOracleParser.KW_ADD - 161)) | (1 << (InceptorOracleParser.KW_REPLACE - 161)) | (1 << (InceptorOracleParser.KW_RLIKE - 161)) | (1 << (InceptorOracleParser.KW_REGEXP - 161)) | (1 << (InceptorOracleParser.KW_TEMPORARY - 161)) | (1 << (InceptorOracleParser.KW_RESOURCE - 161)) | (1 << (InceptorOracleParser.KW_RELOAD - 161)) | (1 << (InceptorOracleParser.KW_EXPLAIN - 161)) | (1 << (InceptorOracleParser.KW_FORMATTED - 161)) | (1 << (InceptorOracleParser.KW_PRETTY - 161)) | (1 << (InceptorOracleParser.KW_DEPENDENCY - 161)))) !== 0) || ((((_la - 193)) & ~0x1f) == 0 && ((1 << (_la - 193)) & ((1 << (InceptorOracleParser.KW_LOGICAL - 193)) | (1 << (InceptorOracleParser.KW_COST - 193)) | (1 << (InceptorOracleParser.KW_SERDE - 193)) | (1 << (InceptorOracleParser.KW_WITH - 193)) | (1 << (InceptorOracleParser.KW_WITHIN - 193)) | (1 << (InceptorOracleParser.KW_DEFERRED - 193)) | (1 << (InceptorOracleParser.KW_SERDEPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_DBPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_LIMIT - 193)) | (1 << (InceptorOracleParser.KW_SET - 193)) | (1 << (InceptorOracleParser.KW_UNSET - 193)) | (1 << (InceptorOracleParser.KW_TBLPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_IDXPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_VALUE_TYPE - 193)) | (1 << (InceptorOracleParser.KW_ELEM_TYPE - 193)) | (1 << (InceptorOracleParser.KW_PRIOR - 193)) | (1 << (InceptorOracleParser.KW_NOCYCLE - 193)) | (1 << (InceptorOracleParser.KW_MAPJOIN - 193)) | (1 << (InceptorOracleParser.KW_COMBINE - 193)) | (1 << (InceptorOracleParser.KW_COMBINE_STRUCT_INDEX - 193)) | (1 << (InceptorOracleParser.KW_GLKJOIN - 193)) | (1 << (InceptorOracleParser.KW_USE_INDEX - 193)))) !== 0) || ((((_la - 225)) & ~0x1f) == 0 && ((1 << (_la - 225)) & ((1 << (InceptorOracleParser.KW_STARGATE - 225)) | (1 << (InceptorOracleParser.KW_USE_BULKLOAD - 225)) | (1 << (InceptorOracleParser.KW_ADHOC - 225)) | (1 << (InceptorOracleParser.KW_PRECOMPILE - 225)) | (1 << (InceptorOracleParser.KW_STREAMTABLE - 225)) | (1 << (InceptorOracleParser.KW_STREAM - 225)) | (1 << (InceptorOracleParser.KW_RULEBASE - 225)) | (1 << (InceptorOracleParser.KW_RULEBASES - 225)) | (1 << (InceptorOracleParser.KW_RULE - 225)) | (1 << (InceptorOracleParser.KW_RULES - 225)) | (1 << (InceptorOracleParser.KW_MEET - 225)) | (1 << (InceptorOracleParser.KW_MUST - 225)) | (1 << (InceptorOracleParser.KW_MUSTNOT - 225)) | (1 << (InceptorOracleParser.KW_POLICY - 225)) | (1 << (InceptorOracleParser.KW_POLICIES - 225)) | (1 << (InceptorOracleParser.KW_REMOVE - 225)) | (1 << (InceptorOracleParser.KW_POLICYKEY - 225)) | (1 << (InceptorOracleParser.KW_POLICY_RULE - 225)) | (1 << (InceptorOracleParser.KW_LOOKUP - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTION - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTIONS - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTION_PROPERTIES - 225)) | (1 << (InceptorOracleParser.KW_HOLD_DDLTIME - 225)) | (1 << (InceptorOracleParser.KW_CLUSTERSTATUS - 225)))) !== 0) || ((((_la - 257)) & ~0x1f) == 0 && ((1 << (_la - 257)) & ((1 << (InceptorOracleParser.KW_UTC - 257)) | (1 << (InceptorOracleParser.KW_UTCTIMESTAMP - 257)) | (1 << (InceptorOracleParser.KW_LONG - 257)) | (1 << (InceptorOracleParser.KW_DELETE - 257)) | (1 << (InceptorOracleParser.KW_PLUS - 257)) | (1 << (InceptorOracleParser.KW_MINUS - 257)) | (1 << (InceptorOracleParser.KW_OP_CONCAT - 257)) | (1 << (InceptorOracleParser.KW_FETCH - 257)) | (1 << (InceptorOracleParser.KW_INTERSECT - 257)) | (1 << (InceptorOracleParser.KW_VIEW - 257)) | (1 << (InceptorOracleParser.KW_IN - 257)) | (1 << (InceptorOracleParser.KW_DATABASES - 257)) | (1 << (InceptorOracleParser.KW_MATERIALIZED - 257)) | (1 << (InceptorOracleParser.KW_SCHEMA - 257)) | (1 << (InceptorOracleParser.KW_SCHEMAS - 257)) | (1 << (InceptorOracleParser.KW_GRANT - 257)) | (1 << (InceptorOracleParser.KW_REVOKE - 257)) | (1 << (InceptorOracleParser.KW_SSL - 257)) | (1 << (InceptorOracleParser.KW_UNDO - 257)) | (1 << (InceptorOracleParser.KW_LOCK - 257)) | (1 << (InceptorOracleParser.KW_LOCKS - 257)) | (1 << (InceptorOracleParser.KW_UNLOCK - 257)) | (1 << (InceptorOracleParser.KW_SHARED - 257)) | (1 << (InceptorOracleParser.KW_EXCLUSIVE - 257)) | (1 << (InceptorOracleParser.KW_PROCEDURE - 257)) | (1 << (InceptorOracleParser.KW_UNSIGNED - 257)) | (1 << (InceptorOracleParser.KW_WHILE - 257)) | (1 << (InceptorOracleParser.KW_READ - 257)) | (1 << (InceptorOracleParser.KW_READS - 257)))) !== 0) || ((((_la - 289)) & ~0x1f) == 0 && ((1 << (_la - 289)) & ((1 << (InceptorOracleParser.KW_PURGE - 289)) | (1 << (InceptorOracleParser.KW_RANGE - 289)) | (1 << (InceptorOracleParser.KW_ANALYZE - 289)) | (1 << (InceptorOracleParser.KW_BEFORE - 289)) | (1 << (InceptorOracleParser.KW_BETWEEN - 289)) | (1 << (InceptorOracleParser.KW_BOTH - 289)) | (1 << (InceptorOracleParser.KW_BINARY - 289)) | (1 << (InceptorOracleParser.KW_DEFAULT - 289)) | (1 << (InceptorOracleParser.KW_TYPE - 289)) | (1 << (InceptorOracleParser.KW_TRIGGER - 289)) | (1 << (InceptorOracleParser.KW_RECORDREADER - 289)) | (1 << (InceptorOracleParser.KW_RECORDWRITER - 289)) | (1 << (InceptorOracleParser.KW_SEMI - 289)) | (1 << (InceptorOracleParser.KW_LATERAL - 289)) | (1 << (InceptorOracleParser.KW_TOUCH - 289)) | (1 << (InceptorOracleParser.KW_ARCHIVE - 289)) | (1 << (InceptorOracleParser.KW_UNARCHIVE - 289)) | (1 << (InceptorOracleParser.KW_COMPUTE - 289)) | (1 << (InceptorOracleParser.KW_STATISTICS - 289)) | (1 << (InceptorOracleParser.KW_USE - 289)) | (1 << (InceptorOracleParser.KW_OPTION - 289)) | (1 << (InceptorOracleParser.KW_CONCATENATE - 289)) | (1 << (InceptorOracleParser.KW_SHOW_DATABASE - 289)) | (1 << (InceptorOracleParser.KW_UPDATE - 289)) | (1 << (InceptorOracleParser.KW_RESTRICT - 289)) | (1 << (InceptorOracleParser.KW_CASCADE - 289)) | (1 << (InceptorOracleParser.KW_SKEWED - 289)))) !== 0) || ((((_la - 323)) & ~0x1f) == 0 && ((1 << (_la - 323)) & ((1 << (InceptorOracleParser.KW_DIRECTORIES - 323)) | (1 << (InceptorOracleParser.KW_WINDOWRESET - 323)) | (1 << (InceptorOracleParser.KW_SESSIONSTART - 323)) | (1 << (InceptorOracleParser.KW_SESSIONSTOP - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE_DISCARD - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE_COMPLETE - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOW - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOWSLIDELENGTH - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOWSEPARATED - 323)) | (1 << (InceptorOracleParser.KW_FOLLOWEDBY - 323)) | (1 << (InceptorOracleParser.KW_NOTFOLLOWEDBY - 323)) | (1 << (InceptorOracleParser.KW_NOTNEXT - 323)) | (1 << (InceptorOracleParser.KW_PATTERN_TIMES - 323)) | (1 << (InceptorOracleParser.KW_CURRVALUE - 323)) | (1 << (InceptorOracleParser.KW_GROUPING - 323)) | (1 << (InceptorOracleParser.KW_SETS - 323)))) !== 0) || ((((_la - 355)) & ~0x1f) == 0 && ((1 << (_la - 355)) & ((1 << (InceptorOracleParser.KW_TRUNCATE - 355)) | (1 << (InceptorOracleParser.KW_NOSCAN - 355)) | (1 << (InceptorOracleParser.KW_USER - 355)) | (1 << (InceptorOracleParser.KW_QUOTA - 355)) | (1 << (InceptorOracleParser.KW_PERMISSION - 355)) | (1 << (InceptorOracleParser.KW_ROLE - 355)) | (1 << (InceptorOracleParser.KW_ROLES - 355)) | (1 << (InceptorOracleParser.KW_INNER - 355)) | (1 << (InceptorOracleParser.KW_ADMIN - 355)) | (1 << (InceptorOracleParser.KW_OWNER - 355)) | (1 << (InceptorOracleParser.KW_PRINCIPALS - 355)) | (1 << (InceptorOracleParser.KW_CONSTANT - 355)) | (1 << (InceptorOracleParser.KW_CONSTRAINT - 355)) | (1 << (InceptorOracleParser.KW_VALUES - 355)) | (1 << (InceptorOracleParser.KW_YEAR - 355)) | (1 << (InceptorOracleParser.KW_MONTH - 355)) | (1 << (InceptorOracleParser.KW_DAY - 355)) | (1 << (InceptorOracleParser.KW_MINUTE - 355)) | (1 << (InceptorOracleParser.KW_HOUR - 355)))) !== 0) || ((((_la - 387)) & ~0x1f) == 0 && ((1 << (_la - 387)) & ((1 << (InceptorOracleParser.KW_SECOND - 387)) | (1 << (InceptorOracleParser.KW_INTERVAL - 387)) | (1 << (InceptorOracleParser.KW_SYSDATE - 387)) | (1 << (InceptorOracleParser.KW_NOMAXVALUE - 387)) | (1 << (InceptorOracleParser.KW_MINVALUE - 387)) | (1 << (InceptorOracleParser.KW_NOMINVALUE - 387)) | (1 << (InceptorOracleParser.KW_CYCLE - 387)) | (1 << (InceptorOracleParser.KW_CACHE - 387)) | (1 << (InceptorOracleParser.KW_CACHEDMETRIC - 387)) | (1 << (InceptorOracleParser.KW_CACHEDMETRICS - 387)) | (1 << (InceptorOracleParser.KW_NOCACHE - 387)) | (1 << (InceptorOracleParser.KW_NOORDER - 387)) | (1 << (InceptorOracleParser.KW_MERGE - 387)) | (1 << (InceptorOracleParser.KW_PLANT - 387)) | (1 << (InceptorOracleParser.KW_IMMEDIATE - 387)) | (1 << (InceptorOracleParser.KW_COMPACT - 387)) | (1 << (InceptorOracleParser.KW_STOP - 387)) | (1 << (InceptorOracleParser.KW_LIST - 387)))) !== 0) || ((((_la - 419)) & ~0x1f) == 0 && ((1 << (_la - 419)) & ((1 << (InceptorOracleParser.KW_TRANSACTION - 419)) | (1 << (InceptorOracleParser.KW_WORK - 419)) | (1 << (InceptorOracleParser.KW_SPACE - 419)) | (1 << (InceptorOracleParser.KW_CONF - 419)) | (1 << (InceptorOracleParser.KW_DEFINED - 419)) | (1 << (InceptorOracleParser.KW_INTEGER - 419)) | (1 << (InceptorOracleParser.KW_ONLY - 419)) | (1 << (InceptorOracleParser.KW_SERVER - 419)) | (1 << (InceptorOracleParser.KW_TRANSACTIONS - 419)) | (1 << (InceptorOracleParser.KW_URI - 419)) | (1 << (InceptorOracleParser.KW_WRITE - 419)) | (1 << (InceptorOracleParser.KW_FACL - 419)) | (1 << (InceptorOracleParser.KW_FOUND - 419)) | (1 << (InceptorOracleParser.KW_LEVEL - 419)) | (1 << (InceptorOracleParser.KW_PUBLIC - 419)) | (1 << (InceptorOracleParser.KW_LINKS - 419)) | (1 << (InceptorOracleParser.KW_CONNECT - 419)) | (1 << (InceptorOracleParser.KW_APPLICATION - 419)) | (1 << (InceptorOracleParser.KW_APPLICATIONS - 419)) | (1 << (InceptorOracleParser.KW_APP - 419)) | (1 << (InceptorOracleParser.KW_APPS - 419)) | (1 << (InceptorOracleParser.KW_INFINITE - 419)))) !== 0) || ((((_la - 451)) & ~0x1f) == 0 && ((1 << (_la - 451)) & ((1 << (InceptorOracleParser.KW_WAIT - 451)) | (1 << (InceptorOracleParser.KW_PRIMARY - 451)) | (1 << (InceptorOracleParser.KW_FOREIGN - 451)) | (1 << (InceptorOracleParser.KW_REFERENCES - 451)) | (1 << (InceptorOracleParser.KW_VALIDATE - 451)) | (1 << (InceptorOracleParser.KW_NOVALIDATE - 451)) | (1 << (InceptorOracleParser.KW_RELY - 451)) | (1 << (InceptorOracleParser.KW_NORELY - 451)) | (1 << (InceptorOracleParser.KW_KEY - 451)) | (1 << (InceptorOracleParser.KW_SEGMENT - 451)) | (1 << (InceptorOracleParser.KW_LENGTH - 451)) | (1 << (InceptorOracleParser.KW_ATTACH - 451)) | (1 << (InceptorOracleParser.KW_DETTACH - 451)) | (1 << (InceptorOracleParser.KW_SHARD - 451)) | (1 << (InceptorOracleParser.KW_NUM - 451)) | (1 << (InceptorOracleParser.KW_FULLTEXT - 451)) | (1 << (InceptorOracleParser.KW_TABLESIZE - 451)) | (1 << (InceptorOracleParser.KW_TABLET - 451)) | (1 << (InceptorOracleParser.KW_CAPACITY - 451)) | (1 << (InceptorOracleParser.KW_ANALYZER - 451)) | (1 << (InceptorOracleParser.KW_SYNC - 451)) | (1 << (InceptorOracleParser.KW_NO_INDEX - 451)) | (1 << (InceptorOracleParser.KW_LOG - 451)) | (1 << (InceptorOracleParser.KW_FILE - 451)) | (1 << (InceptorOracleParser.KW_JAR - 451)) | (1 << (InceptorOracleParser.KW_PERMANENT - 451)))) !== 0) || _la===InceptorOracleParser.KW_SCHEDULER || _la===InceptorOracleParser.KW_MODE || ((((_la - 537)) & ~0x1f) == 0 && ((1 << (_la - 537)) & ((1 << (InceptorOracleParser.Identifier - 537)) | (1 << (InceptorOracleParser.KW_NOCOPY - 537)) | (1 << (InceptorOracleParser.KW_VARRAY - 537)) | (1 << (InceptorOracleParser.KW_PACKAGE - 537)) | (1 << (InceptorOracleParser.KW_PACKAGES - 537)) | (1 << (InceptorOracleParser.KW_BODY - 537)) | (1 << (InceptorOracleParser.KW_ISOPEN - 537)) | (1 << (InceptorOracleParser.KW_NOTFOUND - 537)) | (1 << (InceptorOracleParser.KW_ROWCOUNT - 537)) | (1 << (InceptorOracleParser.KW_BULK_ROWCOUNT - 537)) | (1 << (InceptorOracleParser.KW_BULK_EXCEPTIONS - 537)) | (1 << (InceptorOracleParser.KW_REVERSE - 537)) | (1 << (InceptorOracleParser.KW_SAVE - 537)) | (1 << (InceptorOracleParser.KW_EXCEPTIONS - 537)) | (1 << (InceptorOracleParser.KW_INDICES - 537)) | (1 << (InceptorOracleParser.KW_REF - 537)) | (1 << (InceptorOracleParser.KW_YEARS - 537)))) !== 0) || ((((_la - 569)) & ~0x1f) == 0 && ((1 << (_la - 569)) & ((1 << (InceptorOracleParser.KW_MONTHS - 569)) | (1 << (InceptorOracleParser.KW_DAYS - 569)) | (1 << (InceptorOracleParser.KW_HOURS - 569)) | (1 << (InceptorOracleParser.KW_MINUTES - 569)) | (1 << (InceptorOracleParser.KW_SECONDS - 569)))) !== 0)) {
	            this.state = 7109;
	            this.identifier();
	            this.state = 7114;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declare_record() {
	    let localctx = new Declare_recordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1274, InceptorOracleParser.RULE_declare_record);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7115;
	        this.match(InceptorOracleParser.KW_RECORD);
	        this.state = 7119;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << InceptorOracleParser.KW_TRUE) | (1 << InceptorOracleParser.KW_FALSE) | (1 << InceptorOracleParser.KW_ALL) | (1 << InceptorOracleParser.KW_LIKE) | (1 << InceptorOracleParser.KW_NO) | (1 << InceptorOracleParser.KW_ANY) | (1 << InceptorOracleParser.KW_EXISTS) | (1 << InceptorOracleParser.KW_ASC) | (1 << InceptorOracleParser.KW_DESC) | (1 << InceptorOracleParser.KW_ORDER) | (1 << InceptorOracleParser.KW_GROUP) | (1 << InceptorOracleParser.KW_INCREMENT) | (1 << InceptorOracleParser.KW_BY) | (1 << InceptorOracleParser.KW_HASH) | (1 << InceptorOracleParser.KW_INSERT) | (1 << InceptorOracleParser.KW_OVERWRITE) | (1 << InceptorOracleParser.KW_OUTER))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (InceptorOracleParser.KW_STREAMJOB - 33)) | (1 << (InceptorOracleParser.KW_STREAMJOBS - 33)) | (1 << (InceptorOracleParser.KW_AT - 33)) | (1 << (InceptorOracleParser.KW_LEFT - 33)) | (1 << (InceptorOracleParser.KW_RIGHT - 33)) | (1 << (InceptorOracleParser.KW_FULL - 33)) | (1 << (InceptorOracleParser.KW_PARTITION - 33)) | (1 << (InceptorOracleParser.KW_PARTITIONS - 33)) | (1 << (InceptorOracleParser.KW_PATTERN - 33)) | (1 << (InceptorOracleParser.KW_TABLE - 33)) | (1 << (InceptorOracleParser.KW_TABLES - 33)) | (1 << (InceptorOracleParser.KW_SEQUENCE - 33)) | (1 << (InceptorOracleParser.KW_SEQUENCES - 33)) | (1 << (InceptorOracleParser.KW_COLUMNS - 33)) | (1 << (InceptorOracleParser.KW_INDEX - 33)) | (1 << (InceptorOracleParser.KW_INDEXES - 33)) | (1 << (InceptorOracleParser.KW_REBUILD - 33)) | (1 << (InceptorOracleParser.KW_FUNCTIONS - 33)) | (1 << (InceptorOracleParser.KW_SHOW - 33)) | (1 << (InceptorOracleParser.KW_MSCK - 33)) | (1 << (InceptorOracleParser.KW_REPAIR - 33)) | (1 << (InceptorOracleParser.KW_DIRECTORY - 33)) | (1 << (InceptorOracleParser.KW_LOCAL - 33)) | (1 << (InceptorOracleParser.KW_GLOBAL - 33)) | (1 << (InceptorOracleParser.KW_USING - 33)) | (1 << (InceptorOracleParser.KW_CLUSTER - 33)) | (1 << (InceptorOracleParser.KW_DISTRIBUTE - 33)) | (1 << (InceptorOracleParser.KW_SORT - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (InceptorOracleParser.KW_UNION - 65)) | (1 << (InceptorOracleParser.KW_LOAD - 65)) | (1 << (InceptorOracleParser.KW_EXPORT - 65)) | (1 << (InceptorOracleParser.KW_IMPORT - 65)) | (1 << (InceptorOracleParser.KW_DATA - 65)) | (1 << (InceptorOracleParser.KW_INPATH - 65)) | (1 << (InceptorOracleParser.KW_IS - 65)) | (1 << (InceptorOracleParser.KW_NULLS - 65)) | (1 << (InceptorOracleParser.KW_CREATE - 65)) | (1 << (InceptorOracleParser.KW_EXTERNAL - 65)) | (1 << (InceptorOracleParser.KW_ALTER - 65)) | (1 << (InceptorOracleParser.KW_CHANGE - 65)) | (1 << (InceptorOracleParser.KW_FIRST - 65)) | (1 << (InceptorOracleParser.KW_LAST - 65)) | (1 << (InceptorOracleParser.KW_AFTER - 65)) | (1 << (InceptorOracleParser.KW_DESCRIBE - 65)) | (1 << (InceptorOracleParser.KW_DROP - 65)) | (1 << (InceptorOracleParser.KW_RENAME - 65)) | (1 << (InceptorOracleParser.KW_IGNORE - 65)) | (1 << (InceptorOracleParser.KW_RESPECT - 65)) | (1 << (InceptorOracleParser.KW_PROTECTION - 65)) | (1 << (InceptorOracleParser.KW_TO - 65)) | (1 << (InceptorOracleParser.KW_COMMENT - 65)) | (1 << (InceptorOracleParser.KW_PROMPT - 65)) | (1 << (InceptorOracleParser.KW_SPOOL - 65)) | (1 << (InceptorOracleParser.KW_BOOLEAN - 65)) | (1 << (InceptorOracleParser.KW_TINYINT - 65)) | (1 << (InceptorOracleParser.KW_BYTE - 65)) | (1 << (InceptorOracleParser.KW_SMALLINT - 65)) | (1 << (InceptorOracleParser.KW_INT - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (InceptorOracleParser.KW_BIGINT - 97)) | (1 << (InceptorOracleParser.KW_FLOAT - 97)) | (1 << (InceptorOracleParser.KW_DOUBLE - 97)) | (1 << (InceptorOracleParser.KW_DATE - 97)) | (1 << (InceptorOracleParser.KW_DATETIME - 97)) | (1 << (InceptorOracleParser.KW_TIMESTAMP - 97)) | (1 << (InceptorOracleParser.KW_TIME - 97)) | (1 << (InceptorOracleParser.KW_DECIMAL - 97)) | (1 << (InceptorOracleParser.KW_STRING - 97)) | (1 << (InceptorOracleParser.KW_GEO - 97)) | (1 << (InceptorOracleParser.KW_ARRAY - 97)) | (1 << (InceptorOracleParser.KW_STRUCT - 97)) | (1 << (InceptorOracleParser.KW_UNIONTYPE - 97)) | (1 << (InceptorOracleParser.KW_PARTITIONED - 97)) | (1 << (InceptorOracleParser.KW_ROUTED - 97)) | (1 << (InceptorOracleParser.KW_CLUSTERED - 97)) | (1 << (InceptorOracleParser.KW_SORTED - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (InceptorOracleParser.KW_NEXT - 129)) | (1 << (InceptorOracleParser.KW_NEXTVALUE - 129)) | (1 << (InceptorOracleParser.KW_BUCKETS - 129)) | (1 << (InceptorOracleParser.KW_ROW - 129)) | (1 << (InceptorOracleParser.KW_ROWS - 129)) | (1 << (InceptorOracleParser.KW_FORMAT - 129)) | (1 << (InceptorOracleParser.KW_DELIMITED - 129)) | (1 << (InceptorOracleParser.KW_FIELDS - 129)) | (1 << (InceptorOracleParser.KW_TERMINATED - 129)) | (1 << (InceptorOracleParser.KW_ESCAPED - 129)) | (1 << (InceptorOracleParser.KW_COLLECTION - 129)) | (1 << (InceptorOracleParser.KW_ITEMS - 129)) | (1 << (InceptorOracleParser.KW_KEYS - 129)) | (1 << (InceptorOracleParser.KW_KEY_TYPE - 129)) | (1 << (InceptorOracleParser.KW_LINES - 129)) | (1 << (InceptorOracleParser.KW_STORED - 129)) | (1 << (InceptorOracleParser.KW_FILEFORMAT - 129)) | (1 << (InceptorOracleParser.KW_SEQUENCEFILE - 129)) | (1 << (InceptorOracleParser.KW_TEXTFILE - 129)) | (1 << (InceptorOracleParser.KW_CSVFILE - 129)) | (1 << (InceptorOracleParser.KW_FWCFILE - 129)) | (1 << (InceptorOracleParser.KW_RCFILE - 129)) | (1 << (InceptorOracleParser.KW_ORCFILE - 129)) | (1 << (InceptorOracleParser.KW_HOLODESK - 129)) | (1 << (InceptorOracleParser.KW_STELLARDB - 129)) | (1 << (InceptorOracleParser.KW_ORCTRANSACTIONFILE - 129)) | (1 << (InceptorOracleParser.KW_PARQUET - 129)))) !== 0) || ((((_la - 161)) & ~0x1f) == 0 && ((1 << (_la - 161)) & ((1 << (InceptorOracleParser.KW_HYPERDRIVE - 161)) | (1 << (InceptorOracleParser.KW_ESDRIVE - 161)) | (1 << (InceptorOracleParser.KW_INPUTFORMAT - 161)) | (1 << (InceptorOracleParser.KW_OUTPUTFORMAT - 161)) | (1 << (InceptorOracleParser.KW_INPUTDRIVER - 161)) | (1 << (InceptorOracleParser.KW_OUTPUTDRIVER - 161)) | (1 << (InceptorOracleParser.KW_OFFLINE - 161)) | (1 << (InceptorOracleParser.KW_ENABLE - 161)) | (1 << (InceptorOracleParser.KW_DISABLE - 161)) | (1 << (InceptorOracleParser.KW_READONLY - 161)) | (1 << (InceptorOracleParser.KW_NO_DROP - 161)) | (1 << (InceptorOracleParser.KW_LOCATION - 161)) | (1 << (InceptorOracleParser.KW_BUCKET - 161)) | (1 << (InceptorOracleParser.KW_OUT - 161)) | (1 << (InceptorOracleParser.KW_OF - 161)) | (1 << (InceptorOracleParser.KW_PERCENT - 161)) | (1 << (InceptorOracleParser.KW_ADD - 161)) | (1 << (InceptorOracleParser.KW_REPLACE - 161)) | (1 << (InceptorOracleParser.KW_RLIKE - 161)) | (1 << (InceptorOracleParser.KW_REGEXP - 161)) | (1 << (InceptorOracleParser.KW_TEMPORARY - 161)) | (1 << (InceptorOracleParser.KW_RESOURCE - 161)) | (1 << (InceptorOracleParser.KW_RELOAD - 161)) | (1 << (InceptorOracleParser.KW_EXPLAIN - 161)) | (1 << (InceptorOracleParser.KW_FORMATTED - 161)) | (1 << (InceptorOracleParser.KW_PRETTY - 161)) | (1 << (InceptorOracleParser.KW_DEPENDENCY - 161)))) !== 0) || ((((_la - 193)) & ~0x1f) == 0 && ((1 << (_la - 193)) & ((1 << (InceptorOracleParser.KW_LOGICAL - 193)) | (1 << (InceptorOracleParser.KW_COST - 193)) | (1 << (InceptorOracleParser.KW_SERDE - 193)) | (1 << (InceptorOracleParser.KW_WITH - 193)) | (1 << (InceptorOracleParser.KW_WITHIN - 193)) | (1 << (InceptorOracleParser.KW_DEFERRED - 193)) | (1 << (InceptorOracleParser.KW_SERDEPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_DBPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_LIMIT - 193)) | (1 << (InceptorOracleParser.KW_SET - 193)) | (1 << (InceptorOracleParser.KW_UNSET - 193)) | (1 << (InceptorOracleParser.KW_TBLPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_IDXPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_VALUE_TYPE - 193)) | (1 << (InceptorOracleParser.KW_ELEM_TYPE - 193)) | (1 << (InceptorOracleParser.KW_PRIOR - 193)) | (1 << (InceptorOracleParser.KW_NOCYCLE - 193)) | (1 << (InceptorOracleParser.KW_MAPJOIN - 193)) | (1 << (InceptorOracleParser.KW_COMBINE - 193)) | (1 << (InceptorOracleParser.KW_COMBINE_STRUCT_INDEX - 193)) | (1 << (InceptorOracleParser.KW_GLKJOIN - 193)) | (1 << (InceptorOracleParser.KW_USE_INDEX - 193)))) !== 0) || ((((_la - 225)) & ~0x1f) == 0 && ((1 << (_la - 225)) & ((1 << (InceptorOracleParser.KW_STARGATE - 225)) | (1 << (InceptorOracleParser.KW_USE_BULKLOAD - 225)) | (1 << (InceptorOracleParser.KW_ADHOC - 225)) | (1 << (InceptorOracleParser.KW_PRECOMPILE - 225)) | (1 << (InceptorOracleParser.KW_STREAMTABLE - 225)) | (1 << (InceptorOracleParser.KW_STREAM - 225)) | (1 << (InceptorOracleParser.KW_RULEBASE - 225)) | (1 << (InceptorOracleParser.KW_RULEBASES - 225)) | (1 << (InceptorOracleParser.KW_RULE - 225)) | (1 << (InceptorOracleParser.KW_RULES - 225)) | (1 << (InceptorOracleParser.KW_MEET - 225)) | (1 << (InceptorOracleParser.KW_MUST - 225)) | (1 << (InceptorOracleParser.KW_MUSTNOT - 225)) | (1 << (InceptorOracleParser.KW_POLICY - 225)) | (1 << (InceptorOracleParser.KW_POLICIES - 225)) | (1 << (InceptorOracleParser.KW_REMOVE - 225)) | (1 << (InceptorOracleParser.KW_POLICYKEY - 225)) | (1 << (InceptorOracleParser.KW_POLICY_RULE - 225)) | (1 << (InceptorOracleParser.KW_LOOKUP - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTION - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTIONS - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTION_PROPERTIES - 225)) | (1 << (InceptorOracleParser.KW_HOLD_DDLTIME - 225)) | (1 << (InceptorOracleParser.KW_CLUSTERSTATUS - 225)))) !== 0) || ((((_la - 257)) & ~0x1f) == 0 && ((1 << (_la - 257)) & ((1 << (InceptorOracleParser.KW_UTC - 257)) | (1 << (InceptorOracleParser.KW_UTCTIMESTAMP - 257)) | (1 << (InceptorOracleParser.KW_LONG - 257)) | (1 << (InceptorOracleParser.KW_DELETE - 257)) | (1 << (InceptorOracleParser.KW_PLUS - 257)) | (1 << (InceptorOracleParser.KW_MINUS - 257)) | (1 << (InceptorOracleParser.KW_OP_CONCAT - 257)) | (1 << (InceptorOracleParser.KW_FETCH - 257)) | (1 << (InceptorOracleParser.KW_INTERSECT - 257)) | (1 << (InceptorOracleParser.KW_VIEW - 257)) | (1 << (InceptorOracleParser.KW_IN - 257)) | (1 << (InceptorOracleParser.KW_DATABASES - 257)) | (1 << (InceptorOracleParser.KW_MATERIALIZED - 257)) | (1 << (InceptorOracleParser.KW_SCHEMA - 257)) | (1 << (InceptorOracleParser.KW_SCHEMAS - 257)) | (1 << (InceptorOracleParser.KW_GRANT - 257)) | (1 << (InceptorOracleParser.KW_REVOKE - 257)) | (1 << (InceptorOracleParser.KW_SSL - 257)) | (1 << (InceptorOracleParser.KW_UNDO - 257)) | (1 << (InceptorOracleParser.KW_LOCK - 257)) | (1 << (InceptorOracleParser.KW_LOCKS - 257)) | (1 << (InceptorOracleParser.KW_UNLOCK - 257)) | (1 << (InceptorOracleParser.KW_SHARED - 257)) | (1 << (InceptorOracleParser.KW_EXCLUSIVE - 257)) | (1 << (InceptorOracleParser.KW_PROCEDURE - 257)) | (1 << (InceptorOracleParser.KW_UNSIGNED - 257)) | (1 << (InceptorOracleParser.KW_WHILE - 257)) | (1 << (InceptorOracleParser.KW_READ - 257)) | (1 << (InceptorOracleParser.KW_READS - 257)))) !== 0) || ((((_la - 289)) & ~0x1f) == 0 && ((1 << (_la - 289)) & ((1 << (InceptorOracleParser.KW_PURGE - 289)) | (1 << (InceptorOracleParser.KW_RANGE - 289)) | (1 << (InceptorOracleParser.KW_ANALYZE - 289)) | (1 << (InceptorOracleParser.KW_BEFORE - 289)) | (1 << (InceptorOracleParser.KW_BETWEEN - 289)) | (1 << (InceptorOracleParser.KW_BOTH - 289)) | (1 << (InceptorOracleParser.KW_BINARY - 289)) | (1 << (InceptorOracleParser.KW_DEFAULT - 289)) | (1 << (InceptorOracleParser.KW_TYPE - 289)) | (1 << (InceptorOracleParser.KW_TRIGGER - 289)) | (1 << (InceptorOracleParser.KW_RECORDREADER - 289)) | (1 << (InceptorOracleParser.KW_RECORDWRITER - 289)) | (1 << (InceptorOracleParser.KW_SEMI - 289)) | (1 << (InceptorOracleParser.KW_LATERAL - 289)) | (1 << (InceptorOracleParser.KW_TOUCH - 289)) | (1 << (InceptorOracleParser.KW_ARCHIVE - 289)) | (1 << (InceptorOracleParser.KW_UNARCHIVE - 289)) | (1 << (InceptorOracleParser.KW_COMPUTE - 289)) | (1 << (InceptorOracleParser.KW_STATISTICS - 289)) | (1 << (InceptorOracleParser.KW_USE - 289)) | (1 << (InceptorOracleParser.KW_OPTION - 289)) | (1 << (InceptorOracleParser.KW_CONCATENATE - 289)) | (1 << (InceptorOracleParser.KW_SHOW_DATABASE - 289)) | (1 << (InceptorOracleParser.KW_UPDATE - 289)) | (1 << (InceptorOracleParser.KW_RESTRICT - 289)) | (1 << (InceptorOracleParser.KW_CASCADE - 289)) | (1 << (InceptorOracleParser.KW_SKEWED - 289)))) !== 0) || ((((_la - 323)) & ~0x1f) == 0 && ((1 << (_la - 323)) & ((1 << (InceptorOracleParser.KW_DIRECTORIES - 323)) | (1 << (InceptorOracleParser.KW_WINDOWRESET - 323)) | (1 << (InceptorOracleParser.KW_SESSIONSTART - 323)) | (1 << (InceptorOracleParser.KW_SESSIONSTOP - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE_DISCARD - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE_COMPLETE - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOW - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOWSLIDELENGTH - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOWSEPARATED - 323)) | (1 << (InceptorOracleParser.KW_FOLLOWEDBY - 323)) | (1 << (InceptorOracleParser.KW_NOTFOLLOWEDBY - 323)) | (1 << (InceptorOracleParser.KW_NOTNEXT - 323)) | (1 << (InceptorOracleParser.KW_PATTERN_TIMES - 323)) | (1 << (InceptorOracleParser.KW_CURRVALUE - 323)) | (1 << (InceptorOracleParser.KW_GROUPING - 323)) | (1 << (InceptorOracleParser.KW_SETS - 323)))) !== 0) || ((((_la - 355)) & ~0x1f) == 0 && ((1 << (_la - 355)) & ((1 << (InceptorOracleParser.KW_TRUNCATE - 355)) | (1 << (InceptorOracleParser.KW_NOSCAN - 355)) | (1 << (InceptorOracleParser.KW_USER - 355)) | (1 << (InceptorOracleParser.KW_QUOTA - 355)) | (1 << (InceptorOracleParser.KW_PERMISSION - 355)) | (1 << (InceptorOracleParser.KW_ROLE - 355)) | (1 << (InceptorOracleParser.KW_ROLES - 355)) | (1 << (InceptorOracleParser.KW_INNER - 355)) | (1 << (InceptorOracleParser.KW_ADMIN - 355)) | (1 << (InceptorOracleParser.KW_OWNER - 355)) | (1 << (InceptorOracleParser.KW_PRINCIPALS - 355)) | (1 << (InceptorOracleParser.KW_CONSTANT - 355)) | (1 << (InceptorOracleParser.KW_CONSTRAINT - 355)) | (1 << (InceptorOracleParser.KW_VALUES - 355)) | (1 << (InceptorOracleParser.KW_YEAR - 355)) | (1 << (InceptorOracleParser.KW_MONTH - 355)) | (1 << (InceptorOracleParser.KW_DAY - 355)) | (1 << (InceptorOracleParser.KW_MINUTE - 355)) | (1 << (InceptorOracleParser.KW_HOUR - 355)))) !== 0) || ((((_la - 387)) & ~0x1f) == 0 && ((1 << (_la - 387)) & ((1 << (InceptorOracleParser.KW_SECOND - 387)) | (1 << (InceptorOracleParser.KW_INTERVAL - 387)) | (1 << (InceptorOracleParser.KW_SYSDATE - 387)) | (1 << (InceptorOracleParser.KW_NOMAXVALUE - 387)) | (1 << (InceptorOracleParser.KW_MINVALUE - 387)) | (1 << (InceptorOracleParser.KW_NOMINVALUE - 387)) | (1 << (InceptorOracleParser.KW_CYCLE - 387)) | (1 << (InceptorOracleParser.KW_CACHE - 387)) | (1 << (InceptorOracleParser.KW_CACHEDMETRIC - 387)) | (1 << (InceptorOracleParser.KW_CACHEDMETRICS - 387)) | (1 << (InceptorOracleParser.KW_NOCACHE - 387)) | (1 << (InceptorOracleParser.KW_NOORDER - 387)) | (1 << (InceptorOracleParser.KW_MERGE - 387)) | (1 << (InceptorOracleParser.KW_PLANT - 387)) | (1 << (InceptorOracleParser.KW_IMMEDIATE - 387)) | (1 << (InceptorOracleParser.KW_COMPACT - 387)) | (1 << (InceptorOracleParser.KW_STOP - 387)) | (1 << (InceptorOracleParser.KW_LIST - 387)))) !== 0) || ((((_la - 419)) & ~0x1f) == 0 && ((1 << (_la - 419)) & ((1 << (InceptorOracleParser.KW_TRANSACTION - 419)) | (1 << (InceptorOracleParser.KW_WORK - 419)) | (1 << (InceptorOracleParser.KW_SPACE - 419)) | (1 << (InceptorOracleParser.KW_CONF - 419)) | (1 << (InceptorOracleParser.KW_DEFINED - 419)) | (1 << (InceptorOracleParser.KW_INTEGER - 419)) | (1 << (InceptorOracleParser.KW_ONLY - 419)) | (1 << (InceptorOracleParser.KW_SERVER - 419)) | (1 << (InceptorOracleParser.KW_TRANSACTIONS - 419)) | (1 << (InceptorOracleParser.KW_URI - 419)) | (1 << (InceptorOracleParser.KW_WRITE - 419)) | (1 << (InceptorOracleParser.KW_FACL - 419)) | (1 << (InceptorOracleParser.KW_FOUND - 419)) | (1 << (InceptorOracleParser.KW_LEVEL - 419)) | (1 << (InceptorOracleParser.KW_PUBLIC - 419)) | (1 << (InceptorOracleParser.KW_LINKS - 419)) | (1 << (InceptorOracleParser.KW_CONNECT - 419)) | (1 << (InceptorOracleParser.KW_APPLICATION - 419)) | (1 << (InceptorOracleParser.KW_APPLICATIONS - 419)) | (1 << (InceptorOracleParser.KW_APP - 419)) | (1 << (InceptorOracleParser.KW_APPS - 419)) | (1 << (InceptorOracleParser.KW_INFINITE - 419)))) !== 0) || ((((_la - 451)) & ~0x1f) == 0 && ((1 << (_la - 451)) & ((1 << (InceptorOracleParser.KW_WAIT - 451)) | (1 << (InceptorOracleParser.KW_PRIMARY - 451)) | (1 << (InceptorOracleParser.KW_FOREIGN - 451)) | (1 << (InceptorOracleParser.KW_REFERENCES - 451)) | (1 << (InceptorOracleParser.KW_VALIDATE - 451)) | (1 << (InceptorOracleParser.KW_NOVALIDATE - 451)) | (1 << (InceptorOracleParser.KW_RELY - 451)) | (1 << (InceptorOracleParser.KW_NORELY - 451)) | (1 << (InceptorOracleParser.KW_KEY - 451)) | (1 << (InceptorOracleParser.KW_SEGMENT - 451)) | (1 << (InceptorOracleParser.KW_LENGTH - 451)) | (1 << (InceptorOracleParser.KW_ATTACH - 451)) | (1 << (InceptorOracleParser.KW_DETTACH - 451)) | (1 << (InceptorOracleParser.KW_SHARD - 451)) | (1 << (InceptorOracleParser.KW_NUM - 451)) | (1 << (InceptorOracleParser.KW_FULLTEXT - 451)) | (1 << (InceptorOracleParser.KW_TABLESIZE - 451)) | (1 << (InceptorOracleParser.KW_TABLET - 451)) | (1 << (InceptorOracleParser.KW_CAPACITY - 451)) | (1 << (InceptorOracleParser.KW_ANALYZER - 451)) | (1 << (InceptorOracleParser.KW_SYNC - 451)) | (1 << (InceptorOracleParser.KW_NO_INDEX - 451)) | (1 << (InceptorOracleParser.KW_LOG - 451)) | (1 << (InceptorOracleParser.KW_FILE - 451)) | (1 << (InceptorOracleParser.KW_JAR - 451)) | (1 << (InceptorOracleParser.KW_PERMANENT - 451)))) !== 0) || _la===InceptorOracleParser.KW_SCHEDULER || _la===InceptorOracleParser.KW_MODE || ((((_la - 537)) & ~0x1f) == 0 && ((1 << (_la - 537)) & ((1 << (InceptorOracleParser.Identifier - 537)) | (1 << (InceptorOracleParser.KW_NOCOPY - 537)) | (1 << (InceptorOracleParser.KW_VARRAY - 537)) | (1 << (InceptorOracleParser.KW_PACKAGE - 537)) | (1 << (InceptorOracleParser.KW_PACKAGES - 537)) | (1 << (InceptorOracleParser.KW_BODY - 537)) | (1 << (InceptorOracleParser.KW_ISOPEN - 537)) | (1 << (InceptorOracleParser.KW_NOTFOUND - 537)) | (1 << (InceptorOracleParser.KW_ROWCOUNT - 537)) | (1 << (InceptorOracleParser.KW_BULK_ROWCOUNT - 537)) | (1 << (InceptorOracleParser.KW_BULK_EXCEPTIONS - 537)) | (1 << (InceptorOracleParser.KW_REVERSE - 537)) | (1 << (InceptorOracleParser.KW_SAVE - 537)) | (1 << (InceptorOracleParser.KW_EXCEPTIONS - 537)) | (1 << (InceptorOracleParser.KW_INDICES - 537)) | (1 << (InceptorOracleParser.KW_REF - 537)) | (1 << (InceptorOracleParser.KW_YEARS - 537)))) !== 0) || ((((_la - 569)) & ~0x1f) == 0 && ((1 << (_la - 569)) & ((1 << (InceptorOracleParser.KW_MONTHS - 569)) | (1 << (InceptorOracleParser.KW_DAYS - 569)) | (1 << (InceptorOracleParser.KW_HOURS - 569)) | (1 << (InceptorOracleParser.KW_MINUTES - 569)) | (1 << (InceptorOracleParser.KW_SECONDS - 569)))) !== 0)) {
	            this.state = 7116;
	            this.identifier();
	            this.state = 7121;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declare_table() {
	    let localctx = new Declare_tableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1276, InceptorOracleParser.RULE_declare_table);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7122;
	        this.match(InceptorOracleParser.KW_TABLE);
	        this.state = 7126;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << InceptorOracleParser.KW_TRUE) | (1 << InceptorOracleParser.KW_FALSE) | (1 << InceptorOracleParser.KW_ALL) | (1 << InceptorOracleParser.KW_LIKE) | (1 << InceptorOracleParser.KW_NO) | (1 << InceptorOracleParser.KW_ANY) | (1 << InceptorOracleParser.KW_EXISTS) | (1 << InceptorOracleParser.KW_ASC) | (1 << InceptorOracleParser.KW_DESC) | (1 << InceptorOracleParser.KW_ORDER) | (1 << InceptorOracleParser.KW_GROUP) | (1 << InceptorOracleParser.KW_INCREMENT) | (1 << InceptorOracleParser.KW_BY) | (1 << InceptorOracleParser.KW_HASH) | (1 << InceptorOracleParser.KW_INSERT) | (1 << InceptorOracleParser.KW_OVERWRITE) | (1 << InceptorOracleParser.KW_OUTER))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (InceptorOracleParser.KW_STREAMJOB - 33)) | (1 << (InceptorOracleParser.KW_STREAMJOBS - 33)) | (1 << (InceptorOracleParser.KW_AT - 33)) | (1 << (InceptorOracleParser.KW_LEFT - 33)) | (1 << (InceptorOracleParser.KW_RIGHT - 33)) | (1 << (InceptorOracleParser.KW_FULL - 33)) | (1 << (InceptorOracleParser.KW_PARTITION - 33)) | (1 << (InceptorOracleParser.KW_PARTITIONS - 33)) | (1 << (InceptorOracleParser.KW_PATTERN - 33)) | (1 << (InceptorOracleParser.KW_TABLE - 33)) | (1 << (InceptorOracleParser.KW_TABLES - 33)) | (1 << (InceptorOracleParser.KW_SEQUENCE - 33)) | (1 << (InceptorOracleParser.KW_SEQUENCES - 33)) | (1 << (InceptorOracleParser.KW_COLUMNS - 33)) | (1 << (InceptorOracleParser.KW_INDEX - 33)) | (1 << (InceptorOracleParser.KW_INDEXES - 33)) | (1 << (InceptorOracleParser.KW_REBUILD - 33)) | (1 << (InceptorOracleParser.KW_FUNCTIONS - 33)) | (1 << (InceptorOracleParser.KW_SHOW - 33)) | (1 << (InceptorOracleParser.KW_MSCK - 33)) | (1 << (InceptorOracleParser.KW_REPAIR - 33)) | (1 << (InceptorOracleParser.KW_DIRECTORY - 33)) | (1 << (InceptorOracleParser.KW_LOCAL - 33)) | (1 << (InceptorOracleParser.KW_GLOBAL - 33)) | (1 << (InceptorOracleParser.KW_USING - 33)) | (1 << (InceptorOracleParser.KW_CLUSTER - 33)) | (1 << (InceptorOracleParser.KW_DISTRIBUTE - 33)) | (1 << (InceptorOracleParser.KW_SORT - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (InceptorOracleParser.KW_UNION - 65)) | (1 << (InceptorOracleParser.KW_LOAD - 65)) | (1 << (InceptorOracleParser.KW_EXPORT - 65)) | (1 << (InceptorOracleParser.KW_IMPORT - 65)) | (1 << (InceptorOracleParser.KW_DATA - 65)) | (1 << (InceptorOracleParser.KW_INPATH - 65)) | (1 << (InceptorOracleParser.KW_IS - 65)) | (1 << (InceptorOracleParser.KW_NULLS - 65)) | (1 << (InceptorOracleParser.KW_CREATE - 65)) | (1 << (InceptorOracleParser.KW_EXTERNAL - 65)) | (1 << (InceptorOracleParser.KW_ALTER - 65)) | (1 << (InceptorOracleParser.KW_CHANGE - 65)) | (1 << (InceptorOracleParser.KW_FIRST - 65)) | (1 << (InceptorOracleParser.KW_LAST - 65)) | (1 << (InceptorOracleParser.KW_AFTER - 65)) | (1 << (InceptorOracleParser.KW_DESCRIBE - 65)) | (1 << (InceptorOracleParser.KW_DROP - 65)) | (1 << (InceptorOracleParser.KW_RENAME - 65)) | (1 << (InceptorOracleParser.KW_IGNORE - 65)) | (1 << (InceptorOracleParser.KW_RESPECT - 65)) | (1 << (InceptorOracleParser.KW_PROTECTION - 65)) | (1 << (InceptorOracleParser.KW_TO - 65)) | (1 << (InceptorOracleParser.KW_COMMENT - 65)) | (1 << (InceptorOracleParser.KW_PROMPT - 65)) | (1 << (InceptorOracleParser.KW_SPOOL - 65)) | (1 << (InceptorOracleParser.KW_BOOLEAN - 65)) | (1 << (InceptorOracleParser.KW_TINYINT - 65)) | (1 << (InceptorOracleParser.KW_BYTE - 65)) | (1 << (InceptorOracleParser.KW_SMALLINT - 65)) | (1 << (InceptorOracleParser.KW_INT - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (InceptorOracleParser.KW_BIGINT - 97)) | (1 << (InceptorOracleParser.KW_FLOAT - 97)) | (1 << (InceptorOracleParser.KW_DOUBLE - 97)) | (1 << (InceptorOracleParser.KW_DATE - 97)) | (1 << (InceptorOracleParser.KW_DATETIME - 97)) | (1 << (InceptorOracleParser.KW_TIMESTAMP - 97)) | (1 << (InceptorOracleParser.KW_TIME - 97)) | (1 << (InceptorOracleParser.KW_DECIMAL - 97)) | (1 << (InceptorOracleParser.KW_STRING - 97)) | (1 << (InceptorOracleParser.KW_GEO - 97)) | (1 << (InceptorOracleParser.KW_ARRAY - 97)) | (1 << (InceptorOracleParser.KW_STRUCT - 97)) | (1 << (InceptorOracleParser.KW_UNIONTYPE - 97)) | (1 << (InceptorOracleParser.KW_PARTITIONED - 97)) | (1 << (InceptorOracleParser.KW_ROUTED - 97)) | (1 << (InceptorOracleParser.KW_CLUSTERED - 97)) | (1 << (InceptorOracleParser.KW_SORTED - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (InceptorOracleParser.KW_NEXT - 129)) | (1 << (InceptorOracleParser.KW_NEXTVALUE - 129)) | (1 << (InceptorOracleParser.KW_BUCKETS - 129)) | (1 << (InceptorOracleParser.KW_ROW - 129)) | (1 << (InceptorOracleParser.KW_ROWS - 129)) | (1 << (InceptorOracleParser.KW_FORMAT - 129)) | (1 << (InceptorOracleParser.KW_DELIMITED - 129)) | (1 << (InceptorOracleParser.KW_FIELDS - 129)) | (1 << (InceptorOracleParser.KW_TERMINATED - 129)) | (1 << (InceptorOracleParser.KW_ESCAPED - 129)) | (1 << (InceptorOracleParser.KW_COLLECTION - 129)) | (1 << (InceptorOracleParser.KW_ITEMS - 129)) | (1 << (InceptorOracleParser.KW_KEYS - 129)) | (1 << (InceptorOracleParser.KW_KEY_TYPE - 129)) | (1 << (InceptorOracleParser.KW_LINES - 129)) | (1 << (InceptorOracleParser.KW_STORED - 129)) | (1 << (InceptorOracleParser.KW_FILEFORMAT - 129)) | (1 << (InceptorOracleParser.KW_SEQUENCEFILE - 129)) | (1 << (InceptorOracleParser.KW_TEXTFILE - 129)) | (1 << (InceptorOracleParser.KW_CSVFILE - 129)) | (1 << (InceptorOracleParser.KW_FWCFILE - 129)) | (1 << (InceptorOracleParser.KW_RCFILE - 129)) | (1 << (InceptorOracleParser.KW_ORCFILE - 129)) | (1 << (InceptorOracleParser.KW_HOLODESK - 129)) | (1 << (InceptorOracleParser.KW_STELLARDB - 129)) | (1 << (InceptorOracleParser.KW_ORCTRANSACTIONFILE - 129)) | (1 << (InceptorOracleParser.KW_PARQUET - 129)))) !== 0) || ((((_la - 161)) & ~0x1f) == 0 && ((1 << (_la - 161)) & ((1 << (InceptorOracleParser.KW_HYPERDRIVE - 161)) | (1 << (InceptorOracleParser.KW_ESDRIVE - 161)) | (1 << (InceptorOracleParser.KW_INPUTFORMAT - 161)) | (1 << (InceptorOracleParser.KW_OUTPUTFORMAT - 161)) | (1 << (InceptorOracleParser.KW_INPUTDRIVER - 161)) | (1 << (InceptorOracleParser.KW_OUTPUTDRIVER - 161)) | (1 << (InceptorOracleParser.KW_OFFLINE - 161)) | (1 << (InceptorOracleParser.KW_ENABLE - 161)) | (1 << (InceptorOracleParser.KW_DISABLE - 161)) | (1 << (InceptorOracleParser.KW_READONLY - 161)) | (1 << (InceptorOracleParser.KW_NO_DROP - 161)) | (1 << (InceptorOracleParser.KW_LOCATION - 161)) | (1 << (InceptorOracleParser.KW_BUCKET - 161)) | (1 << (InceptorOracleParser.KW_OUT - 161)) | (1 << (InceptorOracleParser.KW_OF - 161)) | (1 << (InceptorOracleParser.KW_PERCENT - 161)) | (1 << (InceptorOracleParser.KW_ADD - 161)) | (1 << (InceptorOracleParser.KW_REPLACE - 161)) | (1 << (InceptorOracleParser.KW_RLIKE - 161)) | (1 << (InceptorOracleParser.KW_REGEXP - 161)) | (1 << (InceptorOracleParser.KW_TEMPORARY - 161)) | (1 << (InceptorOracleParser.KW_RESOURCE - 161)) | (1 << (InceptorOracleParser.KW_RELOAD - 161)) | (1 << (InceptorOracleParser.KW_EXPLAIN - 161)) | (1 << (InceptorOracleParser.KW_FORMATTED - 161)) | (1 << (InceptorOracleParser.KW_PRETTY - 161)) | (1 << (InceptorOracleParser.KW_DEPENDENCY - 161)))) !== 0) || ((((_la - 193)) & ~0x1f) == 0 && ((1 << (_la - 193)) & ((1 << (InceptorOracleParser.KW_LOGICAL - 193)) | (1 << (InceptorOracleParser.KW_COST - 193)) | (1 << (InceptorOracleParser.KW_SERDE - 193)) | (1 << (InceptorOracleParser.KW_WITH - 193)) | (1 << (InceptorOracleParser.KW_WITHIN - 193)) | (1 << (InceptorOracleParser.KW_DEFERRED - 193)) | (1 << (InceptorOracleParser.KW_SERDEPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_DBPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_LIMIT - 193)) | (1 << (InceptorOracleParser.KW_SET - 193)) | (1 << (InceptorOracleParser.KW_UNSET - 193)) | (1 << (InceptorOracleParser.KW_TBLPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_IDXPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_VALUE_TYPE - 193)) | (1 << (InceptorOracleParser.KW_ELEM_TYPE - 193)) | (1 << (InceptorOracleParser.KW_PRIOR - 193)) | (1 << (InceptorOracleParser.KW_NOCYCLE - 193)) | (1 << (InceptorOracleParser.KW_MAPJOIN - 193)) | (1 << (InceptorOracleParser.KW_COMBINE - 193)) | (1 << (InceptorOracleParser.KW_COMBINE_STRUCT_INDEX - 193)) | (1 << (InceptorOracleParser.KW_GLKJOIN - 193)) | (1 << (InceptorOracleParser.KW_USE_INDEX - 193)))) !== 0) || ((((_la - 225)) & ~0x1f) == 0 && ((1 << (_la - 225)) & ((1 << (InceptorOracleParser.KW_STARGATE - 225)) | (1 << (InceptorOracleParser.KW_USE_BULKLOAD - 225)) | (1 << (InceptorOracleParser.KW_ADHOC - 225)) | (1 << (InceptorOracleParser.KW_PRECOMPILE - 225)) | (1 << (InceptorOracleParser.KW_STREAMTABLE - 225)) | (1 << (InceptorOracleParser.KW_STREAM - 225)) | (1 << (InceptorOracleParser.KW_RULEBASE - 225)) | (1 << (InceptorOracleParser.KW_RULEBASES - 225)) | (1 << (InceptorOracleParser.KW_RULE - 225)) | (1 << (InceptorOracleParser.KW_RULES - 225)) | (1 << (InceptorOracleParser.KW_MEET - 225)) | (1 << (InceptorOracleParser.KW_MUST - 225)) | (1 << (InceptorOracleParser.KW_MUSTNOT - 225)) | (1 << (InceptorOracleParser.KW_POLICY - 225)) | (1 << (InceptorOracleParser.KW_POLICIES - 225)) | (1 << (InceptorOracleParser.KW_REMOVE - 225)) | (1 << (InceptorOracleParser.KW_POLICYKEY - 225)) | (1 << (InceptorOracleParser.KW_POLICY_RULE - 225)) | (1 << (InceptorOracleParser.KW_LOOKUP - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTION - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTIONS - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTION_PROPERTIES - 225)) | (1 << (InceptorOracleParser.KW_HOLD_DDLTIME - 225)) | (1 << (InceptorOracleParser.KW_CLUSTERSTATUS - 225)))) !== 0) || ((((_la - 257)) & ~0x1f) == 0 && ((1 << (_la - 257)) & ((1 << (InceptorOracleParser.KW_UTC - 257)) | (1 << (InceptorOracleParser.KW_UTCTIMESTAMP - 257)) | (1 << (InceptorOracleParser.KW_LONG - 257)) | (1 << (InceptorOracleParser.KW_DELETE - 257)) | (1 << (InceptorOracleParser.KW_PLUS - 257)) | (1 << (InceptorOracleParser.KW_MINUS - 257)) | (1 << (InceptorOracleParser.KW_OP_CONCAT - 257)) | (1 << (InceptorOracleParser.KW_FETCH - 257)) | (1 << (InceptorOracleParser.KW_INTERSECT - 257)) | (1 << (InceptorOracleParser.KW_VIEW - 257)) | (1 << (InceptorOracleParser.KW_IN - 257)) | (1 << (InceptorOracleParser.KW_DATABASES - 257)) | (1 << (InceptorOracleParser.KW_MATERIALIZED - 257)) | (1 << (InceptorOracleParser.KW_SCHEMA - 257)) | (1 << (InceptorOracleParser.KW_SCHEMAS - 257)) | (1 << (InceptorOracleParser.KW_GRANT - 257)) | (1 << (InceptorOracleParser.KW_REVOKE - 257)) | (1 << (InceptorOracleParser.KW_SSL - 257)) | (1 << (InceptorOracleParser.KW_UNDO - 257)) | (1 << (InceptorOracleParser.KW_LOCK - 257)) | (1 << (InceptorOracleParser.KW_LOCKS - 257)) | (1 << (InceptorOracleParser.KW_UNLOCK - 257)) | (1 << (InceptorOracleParser.KW_SHARED - 257)) | (1 << (InceptorOracleParser.KW_EXCLUSIVE - 257)) | (1 << (InceptorOracleParser.KW_PROCEDURE - 257)) | (1 << (InceptorOracleParser.KW_UNSIGNED - 257)) | (1 << (InceptorOracleParser.KW_WHILE - 257)) | (1 << (InceptorOracleParser.KW_READ - 257)) | (1 << (InceptorOracleParser.KW_READS - 257)))) !== 0) || ((((_la - 289)) & ~0x1f) == 0 && ((1 << (_la - 289)) & ((1 << (InceptorOracleParser.KW_PURGE - 289)) | (1 << (InceptorOracleParser.KW_RANGE - 289)) | (1 << (InceptorOracleParser.KW_ANALYZE - 289)) | (1 << (InceptorOracleParser.KW_BEFORE - 289)) | (1 << (InceptorOracleParser.KW_BETWEEN - 289)) | (1 << (InceptorOracleParser.KW_BOTH - 289)) | (1 << (InceptorOracleParser.KW_BINARY - 289)) | (1 << (InceptorOracleParser.KW_DEFAULT - 289)) | (1 << (InceptorOracleParser.KW_TYPE - 289)) | (1 << (InceptorOracleParser.KW_TRIGGER - 289)) | (1 << (InceptorOracleParser.KW_RECORDREADER - 289)) | (1 << (InceptorOracleParser.KW_RECORDWRITER - 289)) | (1 << (InceptorOracleParser.KW_SEMI - 289)) | (1 << (InceptorOracleParser.KW_LATERAL - 289)) | (1 << (InceptorOracleParser.KW_TOUCH - 289)) | (1 << (InceptorOracleParser.KW_ARCHIVE - 289)) | (1 << (InceptorOracleParser.KW_UNARCHIVE - 289)) | (1 << (InceptorOracleParser.KW_COMPUTE - 289)) | (1 << (InceptorOracleParser.KW_STATISTICS - 289)) | (1 << (InceptorOracleParser.KW_USE - 289)) | (1 << (InceptorOracleParser.KW_OPTION - 289)) | (1 << (InceptorOracleParser.KW_CONCATENATE - 289)) | (1 << (InceptorOracleParser.KW_SHOW_DATABASE - 289)) | (1 << (InceptorOracleParser.KW_UPDATE - 289)) | (1 << (InceptorOracleParser.KW_RESTRICT - 289)) | (1 << (InceptorOracleParser.KW_CASCADE - 289)) | (1 << (InceptorOracleParser.KW_SKEWED - 289)))) !== 0) || ((((_la - 323)) & ~0x1f) == 0 && ((1 << (_la - 323)) & ((1 << (InceptorOracleParser.KW_DIRECTORIES - 323)) | (1 << (InceptorOracleParser.KW_WINDOWRESET - 323)) | (1 << (InceptorOracleParser.KW_SESSIONSTART - 323)) | (1 << (InceptorOracleParser.KW_SESSIONSTOP - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE_DISCARD - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE_COMPLETE - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOW - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOWSLIDELENGTH - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOWSEPARATED - 323)) | (1 << (InceptorOracleParser.KW_FOLLOWEDBY - 323)) | (1 << (InceptorOracleParser.KW_NOTFOLLOWEDBY - 323)) | (1 << (InceptorOracleParser.KW_NOTNEXT - 323)) | (1 << (InceptorOracleParser.KW_PATTERN_TIMES - 323)) | (1 << (InceptorOracleParser.KW_CURRVALUE - 323)) | (1 << (InceptorOracleParser.KW_GROUPING - 323)) | (1 << (InceptorOracleParser.KW_SETS - 323)))) !== 0) || ((((_la - 355)) & ~0x1f) == 0 && ((1 << (_la - 355)) & ((1 << (InceptorOracleParser.KW_TRUNCATE - 355)) | (1 << (InceptorOracleParser.KW_NOSCAN - 355)) | (1 << (InceptorOracleParser.KW_USER - 355)) | (1 << (InceptorOracleParser.KW_QUOTA - 355)) | (1 << (InceptorOracleParser.KW_PERMISSION - 355)) | (1 << (InceptorOracleParser.KW_ROLE - 355)) | (1 << (InceptorOracleParser.KW_ROLES - 355)) | (1 << (InceptorOracleParser.KW_INNER - 355)) | (1 << (InceptorOracleParser.KW_ADMIN - 355)) | (1 << (InceptorOracleParser.KW_OWNER - 355)) | (1 << (InceptorOracleParser.KW_PRINCIPALS - 355)) | (1 << (InceptorOracleParser.KW_CONSTANT - 355)) | (1 << (InceptorOracleParser.KW_CONSTRAINT - 355)) | (1 << (InceptorOracleParser.KW_VALUES - 355)) | (1 << (InceptorOracleParser.KW_YEAR - 355)) | (1 << (InceptorOracleParser.KW_MONTH - 355)) | (1 << (InceptorOracleParser.KW_DAY - 355)) | (1 << (InceptorOracleParser.KW_MINUTE - 355)) | (1 << (InceptorOracleParser.KW_HOUR - 355)))) !== 0) || ((((_la - 387)) & ~0x1f) == 0 && ((1 << (_la - 387)) & ((1 << (InceptorOracleParser.KW_SECOND - 387)) | (1 << (InceptorOracleParser.KW_INTERVAL - 387)) | (1 << (InceptorOracleParser.KW_SYSDATE - 387)) | (1 << (InceptorOracleParser.KW_NOMAXVALUE - 387)) | (1 << (InceptorOracleParser.KW_MINVALUE - 387)) | (1 << (InceptorOracleParser.KW_NOMINVALUE - 387)) | (1 << (InceptorOracleParser.KW_CYCLE - 387)) | (1 << (InceptorOracleParser.KW_CACHE - 387)) | (1 << (InceptorOracleParser.KW_CACHEDMETRIC - 387)) | (1 << (InceptorOracleParser.KW_CACHEDMETRICS - 387)) | (1 << (InceptorOracleParser.KW_NOCACHE - 387)) | (1 << (InceptorOracleParser.KW_NOORDER - 387)) | (1 << (InceptorOracleParser.KW_MERGE - 387)) | (1 << (InceptorOracleParser.KW_PLANT - 387)) | (1 << (InceptorOracleParser.KW_IMMEDIATE - 387)) | (1 << (InceptorOracleParser.KW_COMPACT - 387)) | (1 << (InceptorOracleParser.KW_STOP - 387)) | (1 << (InceptorOracleParser.KW_LIST - 387)))) !== 0) || ((((_la - 419)) & ~0x1f) == 0 && ((1 << (_la - 419)) & ((1 << (InceptorOracleParser.KW_TRANSACTION - 419)) | (1 << (InceptorOracleParser.KW_WORK - 419)) | (1 << (InceptorOracleParser.KW_SPACE - 419)) | (1 << (InceptorOracleParser.KW_CONF - 419)) | (1 << (InceptorOracleParser.KW_DEFINED - 419)) | (1 << (InceptorOracleParser.KW_INTEGER - 419)) | (1 << (InceptorOracleParser.KW_ONLY - 419)) | (1 << (InceptorOracleParser.KW_SERVER - 419)) | (1 << (InceptorOracleParser.KW_TRANSACTIONS - 419)) | (1 << (InceptorOracleParser.KW_URI - 419)) | (1 << (InceptorOracleParser.KW_WRITE - 419)) | (1 << (InceptorOracleParser.KW_FACL - 419)) | (1 << (InceptorOracleParser.KW_FOUND - 419)) | (1 << (InceptorOracleParser.KW_LEVEL - 419)) | (1 << (InceptorOracleParser.KW_PUBLIC - 419)) | (1 << (InceptorOracleParser.KW_LINKS - 419)) | (1 << (InceptorOracleParser.KW_CONNECT - 419)) | (1 << (InceptorOracleParser.KW_APPLICATION - 419)) | (1 << (InceptorOracleParser.KW_APPLICATIONS - 419)) | (1 << (InceptorOracleParser.KW_APP - 419)) | (1 << (InceptorOracleParser.KW_APPS - 419)) | (1 << (InceptorOracleParser.KW_INFINITE - 419)))) !== 0) || ((((_la - 451)) & ~0x1f) == 0 && ((1 << (_la - 451)) & ((1 << (InceptorOracleParser.KW_WAIT - 451)) | (1 << (InceptorOracleParser.KW_PRIMARY - 451)) | (1 << (InceptorOracleParser.KW_FOREIGN - 451)) | (1 << (InceptorOracleParser.KW_REFERENCES - 451)) | (1 << (InceptorOracleParser.KW_VALIDATE - 451)) | (1 << (InceptorOracleParser.KW_NOVALIDATE - 451)) | (1 << (InceptorOracleParser.KW_RELY - 451)) | (1 << (InceptorOracleParser.KW_NORELY - 451)) | (1 << (InceptorOracleParser.KW_KEY - 451)) | (1 << (InceptorOracleParser.KW_SEGMENT - 451)) | (1 << (InceptorOracleParser.KW_LENGTH - 451)) | (1 << (InceptorOracleParser.KW_ATTACH - 451)) | (1 << (InceptorOracleParser.KW_DETTACH - 451)) | (1 << (InceptorOracleParser.KW_SHARD - 451)) | (1 << (InceptorOracleParser.KW_NUM - 451)) | (1 << (InceptorOracleParser.KW_FULLTEXT - 451)) | (1 << (InceptorOracleParser.KW_TABLESIZE - 451)) | (1 << (InceptorOracleParser.KW_TABLET - 451)) | (1 << (InceptorOracleParser.KW_CAPACITY - 451)) | (1 << (InceptorOracleParser.KW_ANALYZER - 451)) | (1 << (InceptorOracleParser.KW_SYNC - 451)) | (1 << (InceptorOracleParser.KW_NO_INDEX - 451)) | (1 << (InceptorOracleParser.KW_LOG - 451)) | (1 << (InceptorOracleParser.KW_FILE - 451)) | (1 << (InceptorOracleParser.KW_JAR - 451)) | (1 << (InceptorOracleParser.KW_PERMANENT - 451)))) !== 0) || _la===InceptorOracleParser.KW_SCHEDULER || _la===InceptorOracleParser.KW_MODE || ((((_la - 537)) & ~0x1f) == 0 && ((1 << (_la - 537)) & ((1 << (InceptorOracleParser.Identifier - 537)) | (1 << (InceptorOracleParser.KW_NOCOPY - 537)) | (1 << (InceptorOracleParser.KW_VARRAY - 537)) | (1 << (InceptorOracleParser.KW_PACKAGE - 537)) | (1 << (InceptorOracleParser.KW_PACKAGES - 537)) | (1 << (InceptorOracleParser.KW_BODY - 537)) | (1 << (InceptorOracleParser.KW_ISOPEN - 537)) | (1 << (InceptorOracleParser.KW_NOTFOUND - 537)) | (1 << (InceptorOracleParser.KW_ROWCOUNT - 537)) | (1 << (InceptorOracleParser.KW_BULK_ROWCOUNT - 537)) | (1 << (InceptorOracleParser.KW_BULK_EXCEPTIONS - 537)) | (1 << (InceptorOracleParser.KW_REVERSE - 537)) | (1 << (InceptorOracleParser.KW_SAVE - 537)) | (1 << (InceptorOracleParser.KW_EXCEPTIONS - 537)) | (1 << (InceptorOracleParser.KW_INDICES - 537)) | (1 << (InceptorOracleParser.KW_REF - 537)) | (1 << (InceptorOracleParser.KW_YEARS - 537)))) !== 0) || ((((_la - 569)) & ~0x1f) == 0 && ((1 << (_la - 569)) & ((1 << (InceptorOracleParser.KW_MONTHS - 569)) | (1 << (InceptorOracleParser.KW_DAYS - 569)) | (1 << (InceptorOracleParser.KW_HOURS - 569)) | (1 << (InceptorOracleParser.KW_MINUTES - 569)) | (1 << (InceptorOracleParser.KW_SECONDS - 569)))) !== 0)) {
	            this.state = 7123;
	            this.identifier();
	            this.state = 7128;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dynamicSqlParserStart() {
	    let localctx = new DynamicSqlParserStartContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1278, InceptorOracleParser.RULE_dynamicSqlParserStart);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7129;
	        this.dynamicSqlStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	executeImmediateStatement() {
	    let localctx = new ExecuteImmediateStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1280, InceptorOracleParser.RULE_executeImmediateStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7131;
	        this.match(InceptorOracleParser.KW_EXEC);
	        this.state = 7132;
	        this.match(InceptorOracleParser.KW_IMMEDIATE);
	        this.state = 7133;
	        this.dynamicSqlStatement();
	        this.state = 7138;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_INTO || _la===InceptorOracleParser.KW_BULK) {
	            this.state = 7135;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_BULK) {
	                this.state = 7134;
	                this.bulkCollect();
	            }

	            this.state = 7137;
	            localctx.into = this.intoClause();
	        }

	        this.state = 7141;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,793,this._ctx);
	        if(la_===1) {
	            this.state = 7140;
	            this.usingClause();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dynamicSqlStatement() {
	    let localctx = new DynamicSqlStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1282, InceptorOracleParser.RULE_dynamicSqlStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7143;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	usingClause() {
	    let localctx = new UsingClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1284, InceptorOracleParser.RULE_usingClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7145;
	        this.match(InceptorOracleParser.KW_USING);
	        this.state = 7146;
	        this.dynamicSqlBindArgs();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dynamicSqlBindArgs() {
	    let localctx = new DynamicSqlBindArgsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1286, InceptorOracleParser.RULE_dynamicSqlBindArgs);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7148;
	        this.dynamicSqlBindArg();
	        this.state = 7153;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===InceptorOracleParser.COMMA) {
	            this.state = 7149;
	            this.match(InceptorOracleParser.COMMA);
	            this.state = 7150;
	            this.dynamicSqlBindArg();
	            this.state = 7155;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dynamicSqlBindArg() {
	    let localctx = new DynamicSqlBindArgContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1288, InceptorOracleParser.RULE_dynamicSqlBindArg);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7159;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,795,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 7156;
	                this.parameter_attribute(); 
	            }
	            this.state = 7161;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,795,this._ctx);
	        }

	        this.state = 7162;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignStatement() {
	    let localctx = new AssignStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1290, InceptorOracleParser.RULE_assignStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7164;
	        this.leftValue();
	        this.state = 7167;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.ASSIGN_OP) {
	            this.state = 7165;
	            localctx.a = this.match(InceptorOracleParser.ASSIGN_OP);
	            this.state = 7166;
	            this.expression();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nullStatement() {
	    let localctx = new NullStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1292, InceptorOracleParser.RULE_nullStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7169;
	        this.match(InceptorOracleParser.KW_NULL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exceptionParserStart() {
	    let localctx = new ExceptionParserStartContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1294, InceptorOracleParser.RULE_exceptionParserStart);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7171;
	        this.raiseStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	raiseStatement() {
	    let localctx = new RaiseStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1296, InceptorOracleParser.RULE_raiseStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7173;
	        this.match(InceptorOracleParser.KW_RAISE);
	        this.state = 7175;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,797,this._ctx);
	        if(la_===1) {
	            this.state = 7174;
	            this.leftValue();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exceptionHandlers() {
	    let localctx = new ExceptionHandlersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1298, InceptorOracleParser.RULE_exceptionHandlers);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7177;
	        this.match(InceptorOracleParser.KW_EXCEPTION);
	        this.state = 7179; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 7178;
	            this.exceptionHandler();
	            this.state = 7181; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===InceptorOracleParser.KW_WHEN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exceptionHandler() {
	    let localctx = new ExceptionHandlerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1300, InceptorOracleParser.RULE_exceptionHandler);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7183;
	        this.match(InceptorOracleParser.KW_WHEN);
	        this.state = 7184;
	        this.leftValue();
	        this.state = 7189;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===InceptorOracleParser.KW_OR) {
	            this.state = 7185;
	            this.match(InceptorOracleParser.KW_OR);
	            this.state = 7186;
	            this.leftValue();
	            this.state = 7191;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 7192;
	        this.match(InceptorOracleParser.KW_THEN);
	        this.state = 7193;
	        this.plBlockBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	loopStatement() {
	    let localctx = new LoopStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1302, InceptorOracleParser.RULE_loopStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7202;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case InceptorOracleParser.KW_WHILE:
	        	this.state = 7195;
	        	this.match(InceptorOracleParser.KW_WHILE);
	        	this.state = 7196;
	        	this.condition();
	        	break;
	        case InceptorOracleParser.KW_FOR:
	        	this.state = 7197;
	        	this.match(InceptorOracleParser.KW_FOR);
	        	this.state = 7198;
	        	this.identifier();
	        	this.state = 7199;
	        	this.match(InceptorOracleParser.KW_IN);
	        	this.state = 7200;
	        	this.forLoopBound();
	        	break;
	        case InceptorOracleParser.KW_LOOP:
	        	break;
	        default:
	        	break;
	        }
	        this.state = 7204;
	        this.match(InceptorOracleParser.KW_LOOP);
	        this.state = 7206; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 7205;
	            this.labeledStatement();
	            this.state = 7208; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << InceptorOracleParser.KW_TRUE) | (1 << InceptorOracleParser.KW_FALSE) | (1 << InceptorOracleParser.KW_ALL) | (1 << InceptorOracleParser.KW_LIKE) | (1 << InceptorOracleParser.KW_NO) | (1 << InceptorOracleParser.KW_ANY) | (1 << InceptorOracleParser.KW_IF) | (1 << InceptorOracleParser.KW_EXISTS) | (1 << InceptorOracleParser.KW_ASC) | (1 << InceptorOracleParser.KW_DESC) | (1 << InceptorOracleParser.KW_ORDER) | (1 << InceptorOracleParser.KW_GROUP) | (1 << InceptorOracleParser.KW_INCREMENT) | (1 << InceptorOracleParser.KW_BY) | (1 << InceptorOracleParser.KW_HASH) | (1 << InceptorOracleParser.KW_FROM) | (1 << InceptorOracleParser.KW_SELECT) | (1 << InceptorOracleParser.KW_INSERT) | (1 << InceptorOracleParser.KW_BATCH_INSERT) | (1 << InceptorOracleParser.KW_OVERWRITE) | (1 << InceptorOracleParser.KW_OUTER))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (InceptorOracleParser.KW_STREAMJOB - 33)) | (1 << (InceptorOracleParser.KW_STREAMJOBS - 33)) | (1 << (InceptorOracleParser.KW_AT - 33)) | (1 << (InceptorOracleParser.KW_LEFT - 33)) | (1 << (InceptorOracleParser.KW_RIGHT - 33)) | (1 << (InceptorOracleParser.KW_FULL - 33)) | (1 << (InceptorOracleParser.KW_PARTITION - 33)) | (1 << (InceptorOracleParser.KW_PARTITIONS - 33)) | (1 << (InceptorOracleParser.KW_PATTERN - 33)) | (1 << (InceptorOracleParser.KW_TABLE - 33)) | (1 << (InceptorOracleParser.KW_TABLES - 33)) | (1 << (InceptorOracleParser.KW_SEQUENCE - 33)) | (1 << (InceptorOracleParser.KW_SEQUENCES - 33)) | (1 << (InceptorOracleParser.KW_COLUMNS - 33)) | (1 << (InceptorOracleParser.KW_INDEX - 33)) | (1 << (InceptorOracleParser.KW_INDEXES - 33)) | (1 << (InceptorOracleParser.KW_REBUILD - 33)) | (1 << (InceptorOracleParser.KW_FUNCTIONS - 33)) | (1 << (InceptorOracleParser.KW_SHOW - 33)) | (1 << (InceptorOracleParser.KW_MSCK - 33)) | (1 << (InceptorOracleParser.KW_REPAIR - 33)) | (1 << (InceptorOracleParser.KW_DIRECTORY - 33)) | (1 << (InceptorOracleParser.KW_LOCAL - 33)) | (1 << (InceptorOracleParser.KW_GLOBAL - 33)) | (1 << (InceptorOracleParser.KW_USING - 33)) | (1 << (InceptorOracleParser.KW_CLUSTER - 33)) | (1 << (InceptorOracleParser.KW_DISTRIBUTE - 33)) | (1 << (InceptorOracleParser.KW_SORT - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (InceptorOracleParser.KW_UNION - 65)) | (1 << (InceptorOracleParser.KW_LOAD - 65)) | (1 << (InceptorOracleParser.KW_EXPORT - 65)) | (1 << (InceptorOracleParser.KW_IMPORT - 65)) | (1 << (InceptorOracleParser.KW_DATA - 65)) | (1 << (InceptorOracleParser.KW_INPATH - 65)) | (1 << (InceptorOracleParser.KW_IS - 65)) | (1 << (InceptorOracleParser.KW_NULL - 65)) | (1 << (InceptorOracleParser.KW_NULLS - 65)) | (1 << (InceptorOracleParser.KW_CREATE - 65)) | (1 << (InceptorOracleParser.KW_EXTERNAL - 65)) | (1 << (InceptorOracleParser.KW_ALTER - 65)) | (1 << (InceptorOracleParser.KW_CHANGE - 65)) | (1 << (InceptorOracleParser.KW_FIRST - 65)) | (1 << (InceptorOracleParser.KW_LAST - 65)) | (1 << (InceptorOracleParser.KW_AFTER - 65)) | (1 << (InceptorOracleParser.KW_DESCRIBE - 65)) | (1 << (InceptorOracleParser.KW_DROP - 65)) | (1 << (InceptorOracleParser.KW_RENAME - 65)) | (1 << (InceptorOracleParser.KW_IGNORE - 65)) | (1 << (InceptorOracleParser.KW_RESPECT - 65)) | (1 << (InceptorOracleParser.KW_PROTECTION - 65)) | (1 << (InceptorOracleParser.KW_TO - 65)) | (1 << (InceptorOracleParser.KW_COMMENT - 65)) | (1 << (InceptorOracleParser.KW_PROMPT - 65)) | (1 << (InceptorOracleParser.KW_SPOOL - 65)) | (1 << (InceptorOracleParser.KW_BOOLEAN - 65)) | (1 << (InceptorOracleParser.KW_TINYINT - 65)) | (1 << (InceptorOracleParser.KW_BYTE - 65)) | (1 << (InceptorOracleParser.KW_SMALLINT - 65)) | (1 << (InceptorOracleParser.KW_INT - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (InceptorOracleParser.KW_BIGINT - 97)) | (1 << (InceptorOracleParser.KW_FLOAT - 97)) | (1 << (InceptorOracleParser.KW_DOUBLE - 97)) | (1 << (InceptorOracleParser.KW_DATE - 97)) | (1 << (InceptorOracleParser.KW_DATETIME - 97)) | (1 << (InceptorOracleParser.KW_TIMESTAMP - 97)) | (1 << (InceptorOracleParser.KW_TIME - 97)) | (1 << (InceptorOracleParser.KW_DECIMAL - 97)) | (1 << (InceptorOracleParser.KW_STRING - 97)) | (1 << (InceptorOracleParser.KW_GEO - 97)) | (1 << (InceptorOracleParser.KW_ARRAY - 97)) | (1 << (InceptorOracleParser.KW_STRUCT - 97)) | (1 << (InceptorOracleParser.KW_MAP - 97)) | (1 << (InceptorOracleParser.KW_UNIONTYPE - 97)) | (1 << (InceptorOracleParser.KW_REDUCE - 97)) | (1 << (InceptorOracleParser.KW_PARTITIONED - 97)) | (1 << (InceptorOracleParser.KW_ROUTED - 97)) | (1 << (InceptorOracleParser.KW_CLUSTERED - 97)) | (1 << (InceptorOracleParser.KW_SORTED - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (InceptorOracleParser.KW_NEXT - 129)) | (1 << (InceptorOracleParser.KW_NEXTVALUE - 129)) | (1 << (InceptorOracleParser.KW_UNLIMITED - 129)) | (1 << (InceptorOracleParser.KW_WIDCARD - 129)) | (1 << (InceptorOracleParser.KW_BUCKETS - 129)) | (1 << (InceptorOracleParser.KW_ROW - 129)) | (1 << (InceptorOracleParser.KW_ROWS - 129)) | (1 << (InceptorOracleParser.KW_FORMAT - 129)) | (1 << (InceptorOracleParser.KW_DELIMITED - 129)) | (1 << (InceptorOracleParser.KW_FIELDS - 129)) | (1 << (InceptorOracleParser.KW_TERMINATED - 129)) | (1 << (InceptorOracleParser.KW_ESCAPED - 129)) | (1 << (InceptorOracleParser.KW_COLLECTION - 129)) | (1 << (InceptorOracleParser.KW_ITEMS - 129)) | (1 << (InceptorOracleParser.KW_KEYS - 129)) | (1 << (InceptorOracleParser.KW_KEY_TYPE - 129)) | (1 << (InceptorOracleParser.KW_LINES - 129)) | (1 << (InceptorOracleParser.KW_STORED - 129)) | (1 << (InceptorOracleParser.KW_FILEFORMAT - 129)) | (1 << (InceptorOracleParser.KW_SEQUENCEFILE - 129)) | (1 << (InceptorOracleParser.KW_TEXTFILE - 129)) | (1 << (InceptorOracleParser.KW_CSVFILE - 129)) | (1 << (InceptorOracleParser.KW_FWCFILE - 129)) | (1 << (InceptorOracleParser.KW_RCFILE - 129)) | (1 << (InceptorOracleParser.KW_ORCFILE - 129)) | (1 << (InceptorOracleParser.KW_HOLODESK - 129)) | (1 << (InceptorOracleParser.KW_STELLARDB - 129)) | (1 << (InceptorOracleParser.KW_ORCTRANSACTIONFILE - 129)) | (1 << (InceptorOracleParser.KW_PARQUET - 129)))) !== 0) || ((((_la - 161)) & ~0x1f) == 0 && ((1 << (_la - 161)) & ((1 << (InceptorOracleParser.KW_HYPERDRIVE - 161)) | (1 << (InceptorOracleParser.KW_ESDRIVE - 161)) | (1 << (InceptorOracleParser.KW_INPUTFORMAT - 161)) | (1 << (InceptorOracleParser.KW_OUTPUTFORMAT - 161)) | (1 << (InceptorOracleParser.KW_INPUTDRIVER - 161)) | (1 << (InceptorOracleParser.KW_OUTPUTDRIVER - 161)) | (1 << (InceptorOracleParser.KW_OFFLINE - 161)) | (1 << (InceptorOracleParser.KW_ENABLE - 161)) | (1 << (InceptorOracleParser.KW_DISABLE - 161)) | (1 << (InceptorOracleParser.KW_READONLY - 161)) | (1 << (InceptorOracleParser.KW_NO_DROP - 161)) | (1 << (InceptorOracleParser.KW_LOCATION - 161)) | (1 << (InceptorOracleParser.KW_BUCKET - 161)) | (1 << (InceptorOracleParser.KW_OUT - 161)) | (1 << (InceptorOracleParser.KW_OF - 161)) | (1 << (InceptorOracleParser.KW_PERCENT - 161)) | (1 << (InceptorOracleParser.KW_CAST - 161)) | (1 << (InceptorOracleParser.KW_ADD - 161)) | (1 << (InceptorOracleParser.KW_REPLACE - 161)) | (1 << (InceptorOracleParser.KW_RLIKE - 161)) | (1 << (InceptorOracleParser.KW_REGEXP - 161)) | (1 << (InceptorOracleParser.KW_TEMPORARY - 161)) | (1 << (InceptorOracleParser.KW_RESOURCE - 161)) | (1 << (InceptorOracleParser.KW_RELOAD - 161)) | (1 << (InceptorOracleParser.KW_EXPLAIN - 161)) | (1 << (InceptorOracleParser.KW_FORMATTED - 161)) | (1 << (InceptorOracleParser.KW_PRETTY - 161)) | (1 << (InceptorOracleParser.KW_DEPENDENCY - 161)))) !== 0) || ((((_la - 193)) & ~0x1f) == 0 && ((1 << (_la - 193)) & ((1 << (InceptorOracleParser.KW_LOGICAL - 193)) | (1 << (InceptorOracleParser.KW_COST - 193)) | (1 << (InceptorOracleParser.KW_SERDE - 193)) | (1 << (InceptorOracleParser.KW_WITH - 193)) | (1 << (InceptorOracleParser.KW_WITHIN - 193)) | (1 << (InceptorOracleParser.KW_DEFERRED - 193)) | (1 << (InceptorOracleParser.KW_SERDEPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_DBPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_LIMIT - 193)) | (1 << (InceptorOracleParser.KW_SET - 193)) | (1 << (InceptorOracleParser.KW_UNSET - 193)) | (1 << (InceptorOracleParser.KW_TBLPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_IDXPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_VALUE_TYPE - 193)) | (1 << (InceptorOracleParser.KW_ELEM_TYPE - 193)) | (1 << (InceptorOracleParser.KW_CASE - 193)) | (1 << (InceptorOracleParser.KW_GOTO - 193)) | (1 << (InceptorOracleParser.KW_EXIT - 193)) | (1 << (InceptorOracleParser.KW_OPEN - 193)) | (1 << (InceptorOracleParser.KW_CLOSE - 193)) | (1 << (InceptorOracleParser.KW_PRIOR - 193)) | (1 << (InceptorOracleParser.KW_NOCYCLE - 193)) | (1 << (InceptorOracleParser.KW_MAPJOIN - 193)) | (1 << (InceptorOracleParser.KW_COMBINE - 193)) | (1 << (InceptorOracleParser.KW_COMBINE_STRUCT_INDEX - 193)) | (1 << (InceptorOracleParser.KW_GLKJOIN - 193)) | (1 << (InceptorOracleParser.KW_USE_INDEX - 193)))) !== 0) || ((((_la - 225)) & ~0x1f) == 0 && ((1 << (_la - 225)) & ((1 << (InceptorOracleParser.KW_STARGATE - 225)) | (1 << (InceptorOracleParser.KW_USE_BULKLOAD - 225)) | (1 << (InceptorOracleParser.KW_ADHOC - 225)) | (1 << (InceptorOracleParser.KW_PRECOMPILE - 225)) | (1 << (InceptorOracleParser.KW_STREAMTABLE - 225)) | (1 << (InceptorOracleParser.KW_STREAM - 225)) | (1 << (InceptorOracleParser.KW_RULEBASE - 225)) | (1 << (InceptorOracleParser.KW_RULEBASES - 225)) | (1 << (InceptorOracleParser.KW_RULE - 225)) | (1 << (InceptorOracleParser.KW_RULES - 225)) | (1 << (InceptorOracleParser.KW_MEET - 225)) | (1 << (InceptorOracleParser.KW_MUST - 225)) | (1 << (InceptorOracleParser.KW_MUSTNOT - 225)) | (1 << (InceptorOracleParser.KW_POLICY - 225)) | (1 << (InceptorOracleParser.KW_POLICIES - 225)) | (1 << (InceptorOracleParser.KW_REMOVE - 225)) | (1 << (InceptorOracleParser.KW_POLICYKEY - 225)) | (1 << (InceptorOracleParser.KW_POLICY_RULE - 225)) | (1 << (InceptorOracleParser.KW_LOOKUP - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTION - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTIONS - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTION_PROPERTIES - 225)) | (1 << (InceptorOracleParser.KW_HOLD_DDLTIME - 225)) | (1 << (InceptorOracleParser.KW_CLUSTERSTATUS - 225)))) !== 0) || ((((_la - 257)) & ~0x1f) == 0 && ((1 << (_la - 257)) & ((1 << (InceptorOracleParser.KW_UTC - 257)) | (1 << (InceptorOracleParser.KW_UTCTIMESTAMP - 257)) | (1 << (InceptorOracleParser.KW_LONG - 257)) | (1 << (InceptorOracleParser.KW_DELETE - 257)) | (1 << (InceptorOracleParser.KW_PLUS - 257)) | (1 << (InceptorOracleParser.KW_MINUS - 257)) | (1 << (InceptorOracleParser.KW_OP_CONCAT - 257)) | (1 << (InceptorOracleParser.KW_FETCH - 257)) | (1 << (InceptorOracleParser.KW_INTERSECT - 257)) | (1 << (InceptorOracleParser.KW_VIEW - 257)) | (1 << (InceptorOracleParser.KW_IN - 257)) | (1 << (InceptorOracleParser.KW_DATABASES - 257)) | (1 << (InceptorOracleParser.KW_MATERIALIZED - 257)) | (1 << (InceptorOracleParser.KW_SCHEMA - 257)) | (1 << (InceptorOracleParser.KW_SCHEMAS - 257)) | (1 << (InceptorOracleParser.KW_GRANT - 257)) | (1 << (InceptorOracleParser.KW_REVOKE - 257)) | (1 << (InceptorOracleParser.KW_SSL - 257)) | (1 << (InceptorOracleParser.KW_UNDO - 257)) | (1 << (InceptorOracleParser.KW_LOCK - 257)) | (1 << (InceptorOracleParser.KW_LOCKS - 257)) | (1 << (InceptorOracleParser.KW_UNLOCK - 257)) | (1 << (InceptorOracleParser.KW_SHARED - 257)) | (1 << (InceptorOracleParser.KW_EXCLUSIVE - 257)) | (1 << (InceptorOracleParser.KW_PROCEDURE - 257)) | (1 << (InceptorOracleParser.KW_UNSIGNED - 257)) | (1 << (InceptorOracleParser.KW_WHILE - 257)) | (1 << (InceptorOracleParser.KW_READ - 257)) | (1 << (InceptorOracleParser.KW_READS - 257)))) !== 0) || ((((_la - 289)) & ~0x1f) == 0 && ((1 << (_la - 289)) & ((1 << (InceptorOracleParser.KW_PURGE - 289)) | (1 << (InceptorOracleParser.KW_RANGE - 289)) | (1 << (InceptorOracleParser.KW_ANALYZE - 289)) | (1 << (InceptorOracleParser.KW_BEFORE - 289)) | (1 << (InceptorOracleParser.KW_BETWEEN - 289)) | (1 << (InceptorOracleParser.KW_BOTH - 289)) | (1 << (InceptorOracleParser.KW_BINARY - 289)) | (1 << (InceptorOracleParser.KW_DEFAULT - 289)) | (1 << (InceptorOracleParser.KW_TYPE - 289)) | (1 << (InceptorOracleParser.KW_TRIGGER - 289)) | (1 << (InceptorOracleParser.KW_RECORDREADER - 289)) | (1 << (InceptorOracleParser.KW_RECORDWRITER - 289)) | (1 << (InceptorOracleParser.KW_SEMI - 289)) | (1 << (InceptorOracleParser.KW_LATERAL - 289)) | (1 << (InceptorOracleParser.KW_TOUCH - 289)) | (1 << (InceptorOracleParser.KW_ARCHIVE - 289)) | (1 << (InceptorOracleParser.KW_UNARCHIVE - 289)) | (1 << (InceptorOracleParser.KW_COMPUTE - 289)) | (1 << (InceptorOracleParser.KW_STATISTICS - 289)) | (1 << (InceptorOracleParser.KW_USE - 289)) | (1 << (InceptorOracleParser.KW_OPTION - 289)) | (1 << (InceptorOracleParser.KW_CONCATENATE - 289)) | (1 << (InceptorOracleParser.KW_SHOW_DATABASE - 289)) | (1 << (InceptorOracleParser.KW_UPDATE - 289)) | (1 << (InceptorOracleParser.KW_BATCHUPDATE - 289)) | (1 << (InceptorOracleParser.KW_RESTRICT - 289)) | (1 << (InceptorOracleParser.KW_CASCADE - 289)) | (1 << (InceptorOracleParser.KW_SKEWED - 289)))) !== 0) || ((((_la - 323)) & ~0x1f) == 0 && ((1 << (_la - 323)) & ((1 << (InceptorOracleParser.KW_DIRECTORIES - 323)) | (1 << (InceptorOracleParser.KW_FOR - 323)) | (1 << (InceptorOracleParser.KW_LOOP - 323)) | (1 << (InceptorOracleParser.KW_WINDOWRESET - 323)) | (1 << (InceptorOracleParser.KW_SESSIONSTART - 323)) | (1 << (InceptorOracleParser.KW_SESSIONSTOP - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE_DISCARD - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE_COMPLETE - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOW - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOWSLIDELENGTH - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOWSEPARATED - 323)) | (1 << (InceptorOracleParser.KW_FOLLOWEDBY - 323)) | (1 << (InceptorOracleParser.KW_NOTFOLLOWEDBY - 323)) | (1 << (InceptorOracleParser.KW_NOTNEXT - 323)) | (1 << (InceptorOracleParser.KW_PATTERN_TIMES - 323)) | (1 << (InceptorOracleParser.KW_CURRVALUE - 323)) | (1 << (InceptorOracleParser.KW_GROUPING - 323)) | (1 << (InceptorOracleParser.KW_SETS - 323)))) !== 0) || ((((_la - 355)) & ~0x1f) == 0 && ((1 << (_la - 355)) & ((1 << (InceptorOracleParser.KW_TRUNCATE - 355)) | (1 << (InceptorOracleParser.KW_NOSCAN - 355)) | (1 << (InceptorOracleParser.KW_USER - 355)) | (1 << (InceptorOracleParser.KW_QUOTA - 355)) | (1 << (InceptorOracleParser.KW_PERMISSION - 355)) | (1 << (InceptorOracleParser.KW_ROLE - 355)) | (1 << (InceptorOracleParser.KW_ROLES - 355)) | (1 << (InceptorOracleParser.KW_INNER - 355)) | (1 << (InceptorOracleParser.KW_ADMIN - 355)) | (1 << (InceptorOracleParser.KW_OWNER - 355)) | (1 << (InceptorOracleParser.KW_PRINCIPALS - 355)) | (1 << (InceptorOracleParser.KW_RETURN - 355)) | (1 << (InceptorOracleParser.KW_CONTINUE - 355)) | (1 << (InceptorOracleParser.KW_BEGIN - 355)) | (1 << (InceptorOracleParser.KW_DECLARE - 355)) | (1 << (InceptorOracleParser.KW_CONSTANT - 355)) | (1 << (InceptorOracleParser.KW_CONSTRAINT - 355)) | (1 << (InceptorOracleParser.KW_VALUES - 355)) | (1 << (InceptorOracleParser.KW_YEAR - 355)) | (1 << (InceptorOracleParser.KW_MONTH - 355)) | (1 << (InceptorOracleParser.KW_DAY - 355)) | (1 << (InceptorOracleParser.KW_MINUTE - 355)) | (1 << (InceptorOracleParser.KW_HOUR - 355)))) !== 0) || ((((_la - 387)) & ~0x1f) == 0 && ((1 << (_la - 387)) & ((1 << (InceptorOracleParser.KW_SECOND - 387)) | (1 << (InceptorOracleParser.KW_INTERVAL - 387)) | (1 << (InceptorOracleParser.KW_EXTRACT - 387)) | (1 << (InceptorOracleParser.KW_SUBSTRING - 387)) | (1 << (InceptorOracleParser.KW_SYSDATE - 387)) | (1 << (InceptorOracleParser.KW_SYSTIMESTAMP - 387)) | (1 << (InceptorOracleParser.KW_SYSTIME - 387)) | (1 << (InceptorOracleParser.KW_EXEC - 387)) | (1 << (InceptorOracleParser.KW_MAXVALUE - 387)) | (1 << (InceptorOracleParser.KW_NOMAXVALUE - 387)) | (1 << (InceptorOracleParser.KW_MINVALUE - 387)) | (1 << (InceptorOracleParser.KW_NOMINVALUE - 387)) | (1 << (InceptorOracleParser.KW_CYCLE - 387)) | (1 << (InceptorOracleParser.KW_CACHE - 387)) | (1 << (InceptorOracleParser.KW_CACHEDMETRIC - 387)) | (1 << (InceptorOracleParser.KW_CACHEDMETRICS - 387)) | (1 << (InceptorOracleParser.KW_NOCACHE - 387)) | (1 << (InceptorOracleParser.KW_NOORDER - 387)) | (1 << (InceptorOracleParser.KW_MERGE - 387)) | (1 << (InceptorOracleParser.KW_PLANT - 387)) | (1 << (InceptorOracleParser.KW_IMMEDIATE - 387)) | (1 << (InceptorOracleParser.KW_COMPACT - 387)) | (1 << (InceptorOracleParser.KW_START - 387)) | (1 << (InceptorOracleParser.KW_STOP - 387)) | (1 << (InceptorOracleParser.KW_LIST - 387)))) !== 0) || ((((_la - 419)) & ~0x1f) == 0 && ((1 << (_la - 419)) & ((1 << (InceptorOracleParser.KW_TRANSACTION - 419)) | (1 << (InceptorOracleParser.KW_COMMIT - 419)) | (1 << (InceptorOracleParser.KW_ROLLBACK - 419)) | (1 << (InceptorOracleParser.KW_WORK - 419)) | (1 << (InceptorOracleParser.KW_SPACE - 419)) | (1 << (InceptorOracleParser.KW_CONF - 419)) | (1 << (InceptorOracleParser.KW_DEFINED - 419)) | (1 << (InceptorOracleParser.KW_INTEGER - 419)) | (1 << (InceptorOracleParser.KW_ONLY - 419)) | (1 << (InceptorOracleParser.KW_SERVER - 419)) | (1 << (InceptorOracleParser.KW_TRANSACTIONS - 419)) | (1 << (InceptorOracleParser.KW_URI - 419)) | (1 << (InceptorOracleParser.KW_WRITE - 419)) | (1 << (InceptorOracleParser.KW_FACL - 419)) | (1 << (InceptorOracleParser.KW_FOUND - 419)) | (1 << (InceptorOracleParser.KW_LEVEL - 419)) | (1 << (InceptorOracleParser.KW_PUBLIC - 419)) | (1 << (InceptorOracleParser.KW_LINKS - 419)) | (1 << (InceptorOracleParser.KW_CONNECT - 419)) | (1 << (InceptorOracleParser.KW_APPLICATION - 419)) | (1 << (InceptorOracleParser.KW_APPLICATIONS - 419)) | (1 << (InceptorOracleParser.KW_APP - 419)) | (1 << (InceptorOracleParser.KW_APPS - 419)) | (1 << (InceptorOracleParser.KW_INFINITE - 419)))) !== 0) || ((((_la - 451)) & ~0x1f) == 0 && ((1 << (_la - 451)) & ((1 << (InceptorOracleParser.KW_WAIT - 451)) | (1 << (InceptorOracleParser.KW_PRIMARY - 451)) | (1 << (InceptorOracleParser.KW_FOREIGN - 451)) | (1 << (InceptorOracleParser.KW_REFERENCES - 451)) | (1 << (InceptorOracleParser.KW_VALIDATE - 451)) | (1 << (InceptorOracleParser.KW_NOVALIDATE - 451)) | (1 << (InceptorOracleParser.KW_RELY - 451)) | (1 << (InceptorOracleParser.KW_NORELY - 451)) | (1 << (InceptorOracleParser.KW_KEY - 451)) | (1 << (InceptorOracleParser.KW_SEGMENT - 451)) | (1 << (InceptorOracleParser.KW_LENGTH - 451)) | (1 << (InceptorOracleParser.KW_ATTACH - 451)) | (1 << (InceptorOracleParser.KW_DETTACH - 451)) | (1 << (InceptorOracleParser.KW_SHARD - 451)) | (1 << (InceptorOracleParser.KW_NUM - 451)) | (1 << (InceptorOracleParser.KW_FULLTEXT - 451)) | (1 << (InceptorOracleParser.KW_TABLESIZE - 451)) | (1 << (InceptorOracleParser.KW_TABLET - 451)) | (1 << (InceptorOracleParser.KW_CAPACITY - 451)) | (1 << (InceptorOracleParser.KW_ANALYZER - 451)) | (1 << (InceptorOracleParser.KW_SYNC - 451)) | (1 << (InceptorOracleParser.KW_NO_INDEX - 451)) | (1 << (InceptorOracleParser.KW_LOG - 451)) | (1 << (InceptorOracleParser.KW_FILE - 451)) | (1 << (InceptorOracleParser.KW_JAR - 451)) | (1 << (InceptorOracleParser.KW_PERMANENT - 451)))) !== 0) || ((((_la - 485)) & ~0x1f) == 0 && ((1 << (_la - 485)) & ((1 << (InceptorOracleParser.KW_SCHEDULER - 485)) | (1 << (InceptorOracleParser.KW_MODE - 485)) | (1 << (InceptorOracleParser.LPAREN - 485)) | (1 << (InceptorOracleParser.DOUBLELESSTHAN - 485)))) !== 0) || ((((_la - 528)) & ~0x1f) == 0 && ((1 << (_la - 528)) & ((1 << (InceptorOracleParser.StringLiteral - 528)) | (1 << (InceptorOracleParser.CharSetLiteral - 528)) | (1 << (InceptorOracleParser.BigintLiteral - 528)) | (1 << (InceptorOracleParser.SmallintLiteral - 528)) | (1 << (InceptorOracleParser.TinyintLiteral - 528)) | (1 << (InceptorOracleParser.DecimalLiteral - 528)) | (1 << (InceptorOracleParser.Number - 528)) | (1 << (InceptorOracleParser.Identifier - 528)) | (1 << (InceptorOracleParser.CharSetName - 528)) | (1 << (InceptorOracleParser.HINT_LEFT - 528)) | (1 << (InceptorOracleParser.KW_NOCOPY - 528)) | (1 << (InceptorOracleParser.KW_VARRAY - 528)) | (1 << (InceptorOracleParser.KW_PACKAGE - 528)) | (1 << (InceptorOracleParser.KW_PACKAGES - 528)) | (1 << (InceptorOracleParser.KW_BODY - 528)) | (1 << (InceptorOracleParser.KW_ISOPEN - 528)) | (1 << (InceptorOracleParser.KW_NOTFOUND - 528)) | (1 << (InceptorOracleParser.KW_ROWCOUNT - 528)) | (1 << (InceptorOracleParser.KW_BULK_ROWCOUNT - 528)) | (1 << (InceptorOracleParser.KW_BULK_EXCEPTIONS - 528)) | (1 << (InceptorOracleParser.KW_REVERSE - 528)) | (1 << (InceptorOracleParser.KW_FORALL - 528)) | (1 << (InceptorOracleParser.KW_SAVE - 528)) | (1 << (InceptorOracleParser.KW_EXCEPTIONS - 528)))) !== 0) || ((((_la - 560)) & ~0x1f) == 0 && ((1 << (_la - 560)) & ((1 << (InceptorOracleParser.KW_INDICES - 560)) | (1 << (InceptorOracleParser.KW_REF - 560)) | (1 << (InceptorOracleParser.KW_RAISE - 560)) | (1 << (InceptorOracleParser.KW_YEARS - 560)) | (1 << (InceptorOracleParser.KW_MONTHS - 560)) | (1 << (InceptorOracleParser.KW_DAYS - 560)) | (1 << (InceptorOracleParser.KW_HOURS - 560)) | (1 << (InceptorOracleParser.KW_MINUTES - 560)) | (1 << (InceptorOracleParser.KW_SECONDS - 560)))) !== 0));
	        this.state = 7210;
	        this.match(InceptorOracleParser.KW_END);
	        this.state = 7211;
	        this.match(InceptorOracleParser.KW_LOOP);
	        this.state = 7213;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,802,this._ctx);
	        if(la_===1) {
	            this.state = 7212;
	            this.match(InceptorOracleParser.Identifier);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forLoopBound() {
	    let localctx = new ForLoopBoundContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1304, InceptorOracleParser.RULE_forLoopBound);
	    try {
	        this.state = 7217;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,803,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7215;
	            this.rangeBound();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7216;
	            this.cursorBound();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rangeBound() {
	    let localctx = new RangeBoundContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1306, InceptorOracleParser.RULE_rangeBound);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7220;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,804,this._ctx);
	        if(la_===1) {
	            this.state = 7219;
	            this.match(InceptorOracleParser.KW_REVERSE);

	        }
	        this.state = 7222;
	        this.rangeBoundMin();
	        this.state = 7223;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rangeBoundMin() {
	    let localctx = new RangeBoundMinContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1308, InceptorOracleParser.RULE_rangeBoundMin);
	    try {
	        this.state = 7229;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case InceptorOracleParser.IntRangeMin:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7225;
	            this.match(InceptorOracleParser.IntRangeMin);
	            break;
	        case InceptorOracleParser.KW_TRUE:
	        case InceptorOracleParser.KW_FALSE:
	        case InceptorOracleParser.KW_ALL:
	        case InceptorOracleParser.KW_NOT:
	        case InceptorOracleParser.KW_LIKE:
	        case InceptorOracleParser.KW_NO:
	        case InceptorOracleParser.KW_ANY:
	        case InceptorOracleParser.KW_IF:
	        case InceptorOracleParser.KW_EXISTS:
	        case InceptorOracleParser.KW_ASC:
	        case InceptorOracleParser.KW_DESC:
	        case InceptorOracleParser.KW_ORDER:
	        case InceptorOracleParser.KW_GROUP:
	        case InceptorOracleParser.KW_INCREMENT:
	        case InceptorOracleParser.KW_BY:
	        case InceptorOracleParser.KW_HASH:
	        case InceptorOracleParser.KW_INSERT:
	        case InceptorOracleParser.KW_OVERWRITE:
	        case InceptorOracleParser.KW_OUTER:
	        case InceptorOracleParser.KW_STREAMJOB:
	        case InceptorOracleParser.KW_STREAMJOBS:
	        case InceptorOracleParser.KW_AT:
	        case InceptorOracleParser.KW_LEFT:
	        case InceptorOracleParser.KW_RIGHT:
	        case InceptorOracleParser.KW_FULL:
	        case InceptorOracleParser.KW_PARTITION:
	        case InceptorOracleParser.KW_PARTITIONS:
	        case InceptorOracleParser.KW_PATTERN:
	        case InceptorOracleParser.KW_TABLE:
	        case InceptorOracleParser.KW_TABLES:
	        case InceptorOracleParser.KW_SEQUENCE:
	        case InceptorOracleParser.KW_SEQUENCES:
	        case InceptorOracleParser.KW_COLUMNS:
	        case InceptorOracleParser.KW_INDEX:
	        case InceptorOracleParser.KW_INDEXES:
	        case InceptorOracleParser.KW_REBUILD:
	        case InceptorOracleParser.KW_FUNCTIONS:
	        case InceptorOracleParser.KW_SHOW:
	        case InceptorOracleParser.KW_MSCK:
	        case InceptorOracleParser.KW_REPAIR:
	        case InceptorOracleParser.KW_DIRECTORY:
	        case InceptorOracleParser.KW_LOCAL:
	        case InceptorOracleParser.KW_GLOBAL:
	        case InceptorOracleParser.KW_USING:
	        case InceptorOracleParser.KW_CLUSTER:
	        case InceptorOracleParser.KW_DISTRIBUTE:
	        case InceptorOracleParser.KW_SORT:
	        case InceptorOracleParser.KW_UNION:
	        case InceptorOracleParser.KW_LOAD:
	        case InceptorOracleParser.KW_EXPORT:
	        case InceptorOracleParser.KW_IMPORT:
	        case InceptorOracleParser.KW_DATA:
	        case InceptorOracleParser.KW_INPATH:
	        case InceptorOracleParser.KW_IS:
	        case InceptorOracleParser.KW_NULL:
	        case InceptorOracleParser.KW_NULLS:
	        case InceptorOracleParser.KW_CREATE:
	        case InceptorOracleParser.KW_EXTERNAL:
	        case InceptorOracleParser.KW_ALTER:
	        case InceptorOracleParser.KW_CHANGE:
	        case InceptorOracleParser.KW_FIRST:
	        case InceptorOracleParser.KW_LAST:
	        case InceptorOracleParser.KW_AFTER:
	        case InceptorOracleParser.KW_DESCRIBE:
	        case InceptorOracleParser.KW_DROP:
	        case InceptorOracleParser.KW_RENAME:
	        case InceptorOracleParser.KW_IGNORE:
	        case InceptorOracleParser.KW_RESPECT:
	        case InceptorOracleParser.KW_PROTECTION:
	        case InceptorOracleParser.KW_TO:
	        case InceptorOracleParser.KW_COMMENT:
	        case InceptorOracleParser.KW_PROMPT:
	        case InceptorOracleParser.KW_SPOOL:
	        case InceptorOracleParser.KW_BOOLEAN:
	        case InceptorOracleParser.KW_TINYINT:
	        case InceptorOracleParser.KW_BYTE:
	        case InceptorOracleParser.KW_SMALLINT:
	        case InceptorOracleParser.KW_INT:
	        case InceptorOracleParser.KW_BIGINT:
	        case InceptorOracleParser.KW_FLOAT:
	        case InceptorOracleParser.KW_DOUBLE:
	        case InceptorOracleParser.KW_DATE:
	        case InceptorOracleParser.KW_DATETIME:
	        case InceptorOracleParser.KW_TIMESTAMP:
	        case InceptorOracleParser.KW_TIME:
	        case InceptorOracleParser.KW_DECIMAL:
	        case InceptorOracleParser.KW_STRING:
	        case InceptorOracleParser.KW_GEO:
	        case InceptorOracleParser.KW_ARRAY:
	        case InceptorOracleParser.KW_STRUCT:
	        case InceptorOracleParser.KW_MAP:
	        case InceptorOracleParser.KW_UNIONTYPE:
	        case InceptorOracleParser.KW_PARTITIONED:
	        case InceptorOracleParser.KW_ROUTED:
	        case InceptorOracleParser.KW_CLUSTERED:
	        case InceptorOracleParser.KW_SORTED:
	        case InceptorOracleParser.KW_NEXT:
	        case InceptorOracleParser.KW_NEXTVALUE:
	        case InceptorOracleParser.KW_UNLIMITED:
	        case InceptorOracleParser.KW_WIDCARD:
	        case InceptorOracleParser.KW_BUCKETS:
	        case InceptorOracleParser.KW_ROW:
	        case InceptorOracleParser.KW_ROWS:
	        case InceptorOracleParser.KW_FORMAT:
	        case InceptorOracleParser.KW_DELIMITED:
	        case InceptorOracleParser.KW_FIELDS:
	        case InceptorOracleParser.KW_TERMINATED:
	        case InceptorOracleParser.KW_ESCAPED:
	        case InceptorOracleParser.KW_COLLECTION:
	        case InceptorOracleParser.KW_ITEMS:
	        case InceptorOracleParser.KW_KEYS:
	        case InceptorOracleParser.KW_KEY_TYPE:
	        case InceptorOracleParser.KW_LINES:
	        case InceptorOracleParser.KW_STORED:
	        case InceptorOracleParser.KW_FILEFORMAT:
	        case InceptorOracleParser.KW_SEQUENCEFILE:
	        case InceptorOracleParser.KW_TEXTFILE:
	        case InceptorOracleParser.KW_CSVFILE:
	        case InceptorOracleParser.KW_FWCFILE:
	        case InceptorOracleParser.KW_RCFILE:
	        case InceptorOracleParser.KW_ORCFILE:
	        case InceptorOracleParser.KW_HOLODESK:
	        case InceptorOracleParser.KW_STELLARDB:
	        case InceptorOracleParser.KW_ORCTRANSACTIONFILE:
	        case InceptorOracleParser.KW_PARQUET:
	        case InceptorOracleParser.KW_HYPERDRIVE:
	        case InceptorOracleParser.KW_ESDRIVE:
	        case InceptorOracleParser.KW_INPUTFORMAT:
	        case InceptorOracleParser.KW_OUTPUTFORMAT:
	        case InceptorOracleParser.KW_INPUTDRIVER:
	        case InceptorOracleParser.KW_OUTPUTDRIVER:
	        case InceptorOracleParser.KW_OFFLINE:
	        case InceptorOracleParser.KW_ENABLE:
	        case InceptorOracleParser.KW_DISABLE:
	        case InceptorOracleParser.KW_READONLY:
	        case InceptorOracleParser.KW_NO_DROP:
	        case InceptorOracleParser.KW_LOCATION:
	        case InceptorOracleParser.KW_BUCKET:
	        case InceptorOracleParser.KW_OUT:
	        case InceptorOracleParser.KW_OF:
	        case InceptorOracleParser.KW_PERCENT:
	        case InceptorOracleParser.KW_CAST:
	        case InceptorOracleParser.KW_ADD:
	        case InceptorOracleParser.KW_REPLACE:
	        case InceptorOracleParser.KW_RLIKE:
	        case InceptorOracleParser.KW_REGEXP:
	        case InceptorOracleParser.KW_TEMPORARY:
	        case InceptorOracleParser.KW_RESOURCE:
	        case InceptorOracleParser.KW_RELOAD:
	        case InceptorOracleParser.KW_EXPLAIN:
	        case InceptorOracleParser.KW_FORMATTED:
	        case InceptorOracleParser.KW_PRETTY:
	        case InceptorOracleParser.KW_DEPENDENCY:
	        case InceptorOracleParser.KW_LOGICAL:
	        case InceptorOracleParser.KW_COST:
	        case InceptorOracleParser.KW_SERDE:
	        case InceptorOracleParser.KW_WITH:
	        case InceptorOracleParser.KW_WITHIN:
	        case InceptorOracleParser.KW_DEFERRED:
	        case InceptorOracleParser.KW_SERDEPROPERTIES:
	        case InceptorOracleParser.KW_DBPROPERTIES:
	        case InceptorOracleParser.KW_LIMIT:
	        case InceptorOracleParser.KW_SET:
	        case InceptorOracleParser.KW_UNSET:
	        case InceptorOracleParser.KW_TBLPROPERTIES:
	        case InceptorOracleParser.KW_IDXPROPERTIES:
	        case InceptorOracleParser.KW_VALUE_TYPE:
	        case InceptorOracleParser.KW_ELEM_TYPE:
	        case InceptorOracleParser.KW_CASE:
	        case InceptorOracleParser.KW_PRIOR:
	        case InceptorOracleParser.KW_NOCYCLE:
	        case InceptorOracleParser.KW_MAPJOIN:
	        case InceptorOracleParser.KW_COMBINE:
	        case InceptorOracleParser.KW_COMBINE_STRUCT_INDEX:
	        case InceptorOracleParser.KW_GLKJOIN:
	        case InceptorOracleParser.KW_USE_INDEX:
	        case InceptorOracleParser.KW_STARGATE:
	        case InceptorOracleParser.KW_USE_BULKLOAD:
	        case InceptorOracleParser.KW_ADHOC:
	        case InceptorOracleParser.KW_PRECOMPILE:
	        case InceptorOracleParser.KW_STREAMTABLE:
	        case InceptorOracleParser.KW_STREAM:
	        case InceptorOracleParser.KW_RULEBASE:
	        case InceptorOracleParser.KW_RULEBASES:
	        case InceptorOracleParser.KW_RULE:
	        case InceptorOracleParser.KW_RULES:
	        case InceptorOracleParser.KW_MEET:
	        case InceptorOracleParser.KW_MUST:
	        case InceptorOracleParser.KW_MUSTNOT:
	        case InceptorOracleParser.KW_POLICY:
	        case InceptorOracleParser.KW_POLICIES:
	        case InceptorOracleParser.KW_REMOVE:
	        case InceptorOracleParser.KW_POLICYKEY:
	        case InceptorOracleParser.KW_POLICY_RULE:
	        case InceptorOracleParser.KW_LOOKUP:
	        case InceptorOracleParser.KW_RULE_FUNCTION:
	        case InceptorOracleParser.KW_RULE_FUNCTIONS:
	        case InceptorOracleParser.KW_RULE_FUNCTION_PROPERTIES:
	        case InceptorOracleParser.KW_HOLD_DDLTIME:
	        case InceptorOracleParser.KW_CLUSTERSTATUS:
	        case InceptorOracleParser.KW_UTC:
	        case InceptorOracleParser.KW_UTCTIMESTAMP:
	        case InceptorOracleParser.KW_LONG:
	        case InceptorOracleParser.KW_DELETE:
	        case InceptorOracleParser.KW_PLUS:
	        case InceptorOracleParser.KW_MINUS:
	        case InceptorOracleParser.KW_OP_CONCAT:
	        case InceptorOracleParser.KW_FETCH:
	        case InceptorOracleParser.KW_INTERSECT:
	        case InceptorOracleParser.KW_VIEW:
	        case InceptorOracleParser.KW_IN:
	        case InceptorOracleParser.KW_DATABASES:
	        case InceptorOracleParser.KW_MATERIALIZED:
	        case InceptorOracleParser.KW_SCHEMA:
	        case InceptorOracleParser.KW_SCHEMAS:
	        case InceptorOracleParser.KW_GRANT:
	        case InceptorOracleParser.KW_REVOKE:
	        case InceptorOracleParser.KW_SSL:
	        case InceptorOracleParser.KW_UNDO:
	        case InceptorOracleParser.KW_LOCK:
	        case InceptorOracleParser.KW_LOCKS:
	        case InceptorOracleParser.KW_UNLOCK:
	        case InceptorOracleParser.KW_SHARED:
	        case InceptorOracleParser.KW_EXCLUSIVE:
	        case InceptorOracleParser.KW_PROCEDURE:
	        case InceptorOracleParser.KW_UNSIGNED:
	        case InceptorOracleParser.KW_WHILE:
	        case InceptorOracleParser.KW_READ:
	        case InceptorOracleParser.KW_READS:
	        case InceptorOracleParser.KW_PURGE:
	        case InceptorOracleParser.KW_RANGE:
	        case InceptorOracleParser.KW_ANALYZE:
	        case InceptorOracleParser.KW_BEFORE:
	        case InceptorOracleParser.KW_BETWEEN:
	        case InceptorOracleParser.KW_BOTH:
	        case InceptorOracleParser.KW_BINARY:
	        case InceptorOracleParser.KW_DEFAULT:
	        case InceptorOracleParser.KW_TYPE:
	        case InceptorOracleParser.KW_TRIGGER:
	        case InceptorOracleParser.KW_RECORDREADER:
	        case InceptorOracleParser.KW_RECORDWRITER:
	        case InceptorOracleParser.KW_SEMI:
	        case InceptorOracleParser.KW_LATERAL:
	        case InceptorOracleParser.KW_TOUCH:
	        case InceptorOracleParser.KW_ARCHIVE:
	        case InceptorOracleParser.KW_UNARCHIVE:
	        case InceptorOracleParser.KW_COMPUTE:
	        case InceptorOracleParser.KW_STATISTICS:
	        case InceptorOracleParser.KW_USE:
	        case InceptorOracleParser.KW_OPTION:
	        case InceptorOracleParser.KW_CONCATENATE:
	        case InceptorOracleParser.KW_SHOW_DATABASE:
	        case InceptorOracleParser.KW_UPDATE:
	        case InceptorOracleParser.KW_RESTRICT:
	        case InceptorOracleParser.KW_CASCADE:
	        case InceptorOracleParser.KW_SKEWED:
	        case InceptorOracleParser.KW_DIRECTORIES:
	        case InceptorOracleParser.KW_WINDOWRESET:
	        case InceptorOracleParser.KW_SESSIONSTART:
	        case InceptorOracleParser.KW_SESSIONSTOP:
	        case InceptorOracleParser.KW_SESSIONEXPIRE:
	        case InceptorOracleParser.KW_SESSIONEXPIRE_DISCARD:
	        case InceptorOracleParser.KW_SESSIONEXPIRE_COMPLETE:
	        case InceptorOracleParser.KW_STREAMWINDOW:
	        case InceptorOracleParser.KW_STREAMWINDOWSLIDELENGTH:
	        case InceptorOracleParser.KW_STREAMWINDOWSEPARATED:
	        case InceptorOracleParser.KW_FOLLOWEDBY:
	        case InceptorOracleParser.KW_NOTFOLLOWEDBY:
	        case InceptorOracleParser.KW_NOTNEXT:
	        case InceptorOracleParser.KW_PATTERN_TIMES:
	        case InceptorOracleParser.KW_CURRVALUE:
	        case InceptorOracleParser.KW_GROUPING:
	        case InceptorOracleParser.KW_SETS:
	        case InceptorOracleParser.KW_TRUNCATE:
	        case InceptorOracleParser.KW_NOSCAN:
	        case InceptorOracleParser.KW_USER:
	        case InceptorOracleParser.KW_QUOTA:
	        case InceptorOracleParser.KW_PERMISSION:
	        case InceptorOracleParser.KW_ROLE:
	        case InceptorOracleParser.KW_ROLES:
	        case InceptorOracleParser.KW_INNER:
	        case InceptorOracleParser.KW_ADMIN:
	        case InceptorOracleParser.KW_OWNER:
	        case InceptorOracleParser.KW_PRINCIPALS:
	        case InceptorOracleParser.KW_CONSTANT:
	        case InceptorOracleParser.KW_CONSTRAINT:
	        case InceptorOracleParser.KW_VALUES:
	        case InceptorOracleParser.KW_YEAR:
	        case InceptorOracleParser.KW_MONTH:
	        case InceptorOracleParser.KW_DAY:
	        case InceptorOracleParser.KW_MINUTE:
	        case InceptorOracleParser.KW_HOUR:
	        case InceptorOracleParser.KW_SECOND:
	        case InceptorOracleParser.KW_INTERVAL:
	        case InceptorOracleParser.KW_EXTRACT:
	        case InceptorOracleParser.KW_SUBSTRING:
	        case InceptorOracleParser.KW_SYSDATE:
	        case InceptorOracleParser.KW_SYSTIMESTAMP:
	        case InceptorOracleParser.KW_SYSTIME:
	        case InceptorOracleParser.KW_MAXVALUE:
	        case InceptorOracleParser.KW_NOMAXVALUE:
	        case InceptorOracleParser.KW_MINVALUE:
	        case InceptorOracleParser.KW_NOMINVALUE:
	        case InceptorOracleParser.KW_CYCLE:
	        case InceptorOracleParser.KW_CACHE:
	        case InceptorOracleParser.KW_CACHEDMETRIC:
	        case InceptorOracleParser.KW_CACHEDMETRICS:
	        case InceptorOracleParser.KW_NOCACHE:
	        case InceptorOracleParser.KW_NOORDER:
	        case InceptorOracleParser.KW_MERGE:
	        case InceptorOracleParser.KW_PLANT:
	        case InceptorOracleParser.KW_IMMEDIATE:
	        case InceptorOracleParser.KW_COMPACT:
	        case InceptorOracleParser.KW_STOP:
	        case InceptorOracleParser.KW_LIST:
	        case InceptorOracleParser.KW_TRANSACTION:
	        case InceptorOracleParser.KW_WORK:
	        case InceptorOracleParser.KW_SPACE:
	        case InceptorOracleParser.KW_CONF:
	        case InceptorOracleParser.KW_DEFINED:
	        case InceptorOracleParser.KW_INTEGER:
	        case InceptorOracleParser.KW_ONLY:
	        case InceptorOracleParser.KW_SERVER:
	        case InceptorOracleParser.KW_TRANSACTIONS:
	        case InceptorOracleParser.KW_URI:
	        case InceptorOracleParser.KW_WRITE:
	        case InceptorOracleParser.KW_FACL:
	        case InceptorOracleParser.KW_FOUND:
	        case InceptorOracleParser.KW_LEVEL:
	        case InceptorOracleParser.KW_PUBLIC:
	        case InceptorOracleParser.KW_LINKS:
	        case InceptorOracleParser.KW_CONNECT:
	        case InceptorOracleParser.KW_APPLICATION:
	        case InceptorOracleParser.KW_APPLICATIONS:
	        case InceptorOracleParser.KW_APP:
	        case InceptorOracleParser.KW_APPS:
	        case InceptorOracleParser.KW_INFINITE:
	        case InceptorOracleParser.KW_WAIT:
	        case InceptorOracleParser.KW_PRIMARY:
	        case InceptorOracleParser.KW_FOREIGN:
	        case InceptorOracleParser.KW_REFERENCES:
	        case InceptorOracleParser.KW_VALIDATE:
	        case InceptorOracleParser.KW_NOVALIDATE:
	        case InceptorOracleParser.KW_RELY:
	        case InceptorOracleParser.KW_NORELY:
	        case InceptorOracleParser.KW_KEY:
	        case InceptorOracleParser.KW_SEGMENT:
	        case InceptorOracleParser.KW_LENGTH:
	        case InceptorOracleParser.KW_ATTACH:
	        case InceptorOracleParser.KW_DETTACH:
	        case InceptorOracleParser.KW_SHARD:
	        case InceptorOracleParser.KW_NUM:
	        case InceptorOracleParser.KW_FULLTEXT:
	        case InceptorOracleParser.KW_TABLESIZE:
	        case InceptorOracleParser.KW_TABLET:
	        case InceptorOracleParser.KW_CAPACITY:
	        case InceptorOracleParser.KW_ANALYZER:
	        case InceptorOracleParser.KW_SYNC:
	        case InceptorOracleParser.KW_NO_INDEX:
	        case InceptorOracleParser.KW_LOG:
	        case InceptorOracleParser.KW_FILE:
	        case InceptorOracleParser.KW_JAR:
	        case InceptorOracleParser.KW_PERMANENT:
	        case InceptorOracleParser.KW_SCHEDULER:
	        case InceptorOracleParser.KW_MODE:
	        case InceptorOracleParser.LPAREN:
	        case InceptorOracleParser.PLUS:
	        case InceptorOracleParser.MINUS:
	        case InceptorOracleParser.TILDE:
	        case InceptorOracleParser.StringLiteral:
	        case InceptorOracleParser.CharSetLiteral:
	        case InceptorOracleParser.BigintLiteral:
	        case InceptorOracleParser.SmallintLiteral:
	        case InceptorOracleParser.TinyintLiteral:
	        case InceptorOracleParser.DecimalLiteral:
	        case InceptorOracleParser.Number:
	        case InceptorOracleParser.Identifier:
	        case InceptorOracleParser.CharSetName:
	        case InceptorOracleParser.KW_NOCOPY:
	        case InceptorOracleParser.KW_VARRAY:
	        case InceptorOracleParser.KW_PACKAGE:
	        case InceptorOracleParser.KW_PACKAGES:
	        case InceptorOracleParser.KW_BODY:
	        case InceptorOracleParser.KW_ISOPEN:
	        case InceptorOracleParser.KW_NOTFOUND:
	        case InceptorOracleParser.KW_ROWCOUNT:
	        case InceptorOracleParser.KW_BULK_ROWCOUNT:
	        case InceptorOracleParser.KW_BULK_EXCEPTIONS:
	        case InceptorOracleParser.KW_REVERSE:
	        case InceptorOracleParser.KW_SAVE:
	        case InceptorOracleParser.KW_EXCEPTIONS:
	        case InceptorOracleParser.KW_INDICES:
	        case InceptorOracleParser.KW_REF:
	        case InceptorOracleParser.KW_YEARS:
	        case InceptorOracleParser.KW_MONTHS:
	        case InceptorOracleParser.KW_DAYS:
	        case InceptorOracleParser.KW_HOURS:
	        case InceptorOracleParser.KW_MINUTES:
	        case InceptorOracleParser.KW_SECONDS:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7226;
	            this.expression();
	            this.state = 7227;
	            this.match(InceptorOracleParser.RANGE_OP);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cursorBound() {
	    let localctx = new CursorBoundContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1310, InceptorOracleParser.RULE_cursorBound);
	    var _la = 0; // Token type
	    try {
	        this.state = 7249;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,808,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7231;
	            this.match(InceptorOracleParser.LPAREN);
	            this.state = 7232;
	            this.selectStatement();
	            this.state = 7233;
	            this.match(InceptorOracleParser.RPAREN);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7235;
	            this.leftValue();
	            this.state = 7247;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.LPAREN) {
	                this.state = 7236;
	                this.match(InceptorOracleParser.LPAREN);
	                this.state = 7237;
	                this.expression();
	                this.state = 7242;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===InceptorOracleParser.COMMA) {
	                    this.state = 7238;
	                    this.match(InceptorOracleParser.COMMA);
	                    this.state = 7239;
	                    this.expression();
	                    this.state = 7244;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 7245;
	                this.match(InceptorOracleParser.RPAREN);
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forAllStatement() {
	    let localctx = new ForAllStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1312, InceptorOracleParser.RULE_forAllStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7251;
	        this.match(InceptorOracleParser.KW_FORALL);
	        this.state = 7252;
	        this.identifier();
	        this.state = 7253;
	        this.match(InceptorOracleParser.KW_IN);
	        this.state = 7254;
	        this.forAllBound();
	        this.state = 7256;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_SAVE) {
	            this.state = 7255;
	            this.saveExceptions();
	        }

	        this.state = 7258;
	        this.queryStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	saveExceptions() {
	    let localctx = new SaveExceptionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1314, InceptorOracleParser.RULE_saveExceptions);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7260;
	        this.match(InceptorOracleParser.KW_SAVE);
	        this.state = 7261;
	        this.match(InceptorOracleParser.KW_EXCEPTIONS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forAllBound() {
	    let localctx = new ForAllBoundContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1316, InceptorOracleParser.RULE_forAllBound);
	    try {
	        this.state = 7265;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,810,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7263;
	            this.rangeBound();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7264;
	            this.indicesBound();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	indicesBound() {
	    let localctx = new IndicesBoundContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1318, InceptorOracleParser.RULE_indicesBound);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7267;
	        this.match(InceptorOracleParser.KW_INDICES);
	        this.state = 7268;
	        this.match(InceptorOracleParser.KW_OF);
	        this.state = 7269;
	        this.leftValue();
	        this.state = 7275;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_BETWEEN) {
	            this.state = 7270;
	            this.match(InceptorOracleParser.KW_BETWEEN);
	            this.state = 7271;
	            localctx.low = this.precedenceNotExpression();
	            this.state = 7272;
	            this.match(InceptorOracleParser.KW_AND);
	            this.state = 7273;
	            localctx.high = this.precedenceNotExpression();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attr() {
	    let localctx = new AttrContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1320, InceptorOracleParser.RULE_attr);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7277;
	        _la = this._input.LA(1);
	        if(!(_la===InceptorOracleParser.KW_FOUND || ((((_la - 551)) & ~0x1f) == 0 && ((1 << (_la - 551)) & ((1 << (InceptorOracleParser.KW_ISOPEN - 551)) | (1 << (InceptorOracleParser.KW_NOTFOUND - 551)) | (1 << (InceptorOracleParser.KW_ROWCOUNT - 551)) | (1 << (InceptorOracleParser.KW_BULK_ROWCOUNT - 551)) | (1 << (InceptorOracleParser.KW_BULK_EXCEPTIONS - 551)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attrs() {
	    let localctx = new AttrsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1322, InceptorOracleParser.RULE_attrs);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7279;
	        this.match(InceptorOracleParser.MOD);
	        this.state = 7280;
	        this.attr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	moleculeExpression() {
	    let localctx = new MoleculeExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1324, InceptorOracleParser.RULE_moleculeExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7284;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,812,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 7282;
	            this.atomExpression();
	            break;

	        case 2:
	            this.state = 7283;
	            this.dialectFunctionName();
	            break;

	        }
	        this.state = 7311;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,817,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 7309;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case InceptorOracleParser.MOD:
	                    this.state = 7286;
	                    this.attrs();
	                    break;
	                case InceptorOracleParser.DOT:
	                    this.state = 7287;
	                    this.match(InceptorOracleParser.DOT);
	                    this.state = 7288;
	                    this.atomExpression();
	                    break;
	                case InceptorOracleParser.LSQUARE:
	                    this.state = 7289;
	                    this.match(InceptorOracleParser.LSQUARE);
	                    this.state = 7290;
	                    this.expression();
	                    this.state = 7291;
	                    this.match(InceptorOracleParser.RSQUARE);
	                    break;
	                case InceptorOracleParser.LPAREN:
	                    this.state = 7293;
	                    this.funcOp();
	                    this.state = 7302;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << InceptorOracleParser.KW_TRUE) | (1 << InceptorOracleParser.KW_FALSE) | (1 << InceptorOracleParser.KW_ALL) | (1 << InceptorOracleParser.KW_NOT) | (1 << InceptorOracleParser.KW_LIKE) | (1 << InceptorOracleParser.KW_NO) | (1 << InceptorOracleParser.KW_ANY) | (1 << InceptorOracleParser.KW_IF) | (1 << InceptorOracleParser.KW_EXISTS) | (1 << InceptorOracleParser.KW_ASC) | (1 << InceptorOracleParser.KW_DESC) | (1 << InceptorOracleParser.KW_ORDER) | (1 << InceptorOracleParser.KW_GROUP) | (1 << InceptorOracleParser.KW_INCREMENT) | (1 << InceptorOracleParser.KW_BY) | (1 << InceptorOracleParser.KW_HASH) | (1 << InceptorOracleParser.KW_INSERT) | (1 << InceptorOracleParser.KW_OVERWRITE) | (1 << InceptorOracleParser.KW_OUTER))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (InceptorOracleParser.KW_STREAMJOB - 33)) | (1 << (InceptorOracleParser.KW_STREAMJOBS - 33)) | (1 << (InceptorOracleParser.KW_AT - 33)) | (1 << (InceptorOracleParser.KW_LEFT - 33)) | (1 << (InceptorOracleParser.KW_RIGHT - 33)) | (1 << (InceptorOracleParser.KW_FULL - 33)) | (1 << (InceptorOracleParser.KW_PARTITION - 33)) | (1 << (InceptorOracleParser.KW_PARTITIONS - 33)) | (1 << (InceptorOracleParser.KW_PATTERN - 33)) | (1 << (InceptorOracleParser.KW_TABLE - 33)) | (1 << (InceptorOracleParser.KW_TABLES - 33)) | (1 << (InceptorOracleParser.KW_SEQUENCE - 33)) | (1 << (InceptorOracleParser.KW_SEQUENCES - 33)) | (1 << (InceptorOracleParser.KW_COLUMNS - 33)) | (1 << (InceptorOracleParser.KW_INDEX - 33)) | (1 << (InceptorOracleParser.KW_INDEXES - 33)) | (1 << (InceptorOracleParser.KW_REBUILD - 33)) | (1 << (InceptorOracleParser.KW_FUNCTIONS - 33)) | (1 << (InceptorOracleParser.KW_SHOW - 33)) | (1 << (InceptorOracleParser.KW_MSCK - 33)) | (1 << (InceptorOracleParser.KW_REPAIR - 33)) | (1 << (InceptorOracleParser.KW_DIRECTORY - 33)) | (1 << (InceptorOracleParser.KW_LOCAL - 33)) | (1 << (InceptorOracleParser.KW_GLOBAL - 33)) | (1 << (InceptorOracleParser.KW_USING - 33)) | (1 << (InceptorOracleParser.KW_CLUSTER - 33)) | (1 << (InceptorOracleParser.KW_DISTRIBUTE - 33)) | (1 << (InceptorOracleParser.KW_SORT - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (InceptorOracleParser.KW_UNION - 65)) | (1 << (InceptorOracleParser.KW_LOAD - 65)) | (1 << (InceptorOracleParser.KW_EXPORT - 65)) | (1 << (InceptorOracleParser.KW_IMPORT - 65)) | (1 << (InceptorOracleParser.KW_DATA - 65)) | (1 << (InceptorOracleParser.KW_INPATH - 65)) | (1 << (InceptorOracleParser.KW_IS - 65)) | (1 << (InceptorOracleParser.KW_NULL - 65)) | (1 << (InceptorOracleParser.KW_NULLS - 65)) | (1 << (InceptorOracleParser.KW_CREATE - 65)) | (1 << (InceptorOracleParser.KW_EXTERNAL - 65)) | (1 << (InceptorOracleParser.KW_ALTER - 65)) | (1 << (InceptorOracleParser.KW_CHANGE - 65)) | (1 << (InceptorOracleParser.KW_FIRST - 65)) | (1 << (InceptorOracleParser.KW_LAST - 65)) | (1 << (InceptorOracleParser.KW_AFTER - 65)) | (1 << (InceptorOracleParser.KW_DESCRIBE - 65)) | (1 << (InceptorOracleParser.KW_DROP - 65)) | (1 << (InceptorOracleParser.KW_RENAME - 65)) | (1 << (InceptorOracleParser.KW_IGNORE - 65)) | (1 << (InceptorOracleParser.KW_RESPECT - 65)) | (1 << (InceptorOracleParser.KW_PROTECTION - 65)) | (1 << (InceptorOracleParser.KW_TO - 65)) | (1 << (InceptorOracleParser.KW_COMMENT - 65)) | (1 << (InceptorOracleParser.KW_PROMPT - 65)) | (1 << (InceptorOracleParser.KW_SPOOL - 65)) | (1 << (InceptorOracleParser.KW_BOOLEAN - 65)) | (1 << (InceptorOracleParser.KW_TINYINT - 65)) | (1 << (InceptorOracleParser.KW_BYTE - 65)) | (1 << (InceptorOracleParser.KW_SMALLINT - 65)) | (1 << (InceptorOracleParser.KW_INT - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (InceptorOracleParser.KW_BIGINT - 97)) | (1 << (InceptorOracleParser.KW_FLOAT - 97)) | (1 << (InceptorOracleParser.KW_DOUBLE - 97)) | (1 << (InceptorOracleParser.KW_DATE - 97)) | (1 << (InceptorOracleParser.KW_DATETIME - 97)) | (1 << (InceptorOracleParser.KW_TIMESTAMP - 97)) | (1 << (InceptorOracleParser.KW_TIME - 97)) | (1 << (InceptorOracleParser.KW_DECIMAL - 97)) | (1 << (InceptorOracleParser.KW_STRING - 97)) | (1 << (InceptorOracleParser.KW_GEO - 97)) | (1 << (InceptorOracleParser.KW_ARRAY - 97)) | (1 << (InceptorOracleParser.KW_STRUCT - 97)) | (1 << (InceptorOracleParser.KW_MAP - 97)) | (1 << (InceptorOracleParser.KW_UNIONTYPE - 97)) | (1 << (InceptorOracleParser.KW_PARTITIONED - 97)) | (1 << (InceptorOracleParser.KW_ROUTED - 97)) | (1 << (InceptorOracleParser.KW_CLUSTERED - 97)) | (1 << (InceptorOracleParser.KW_SORTED - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (InceptorOracleParser.KW_NEXT - 129)) | (1 << (InceptorOracleParser.KW_NEXTVALUE - 129)) | (1 << (InceptorOracleParser.KW_UNLIMITED - 129)) | (1 << (InceptorOracleParser.KW_WIDCARD - 129)) | (1 << (InceptorOracleParser.KW_BUCKETS - 129)) | (1 << (InceptorOracleParser.KW_ROW - 129)) | (1 << (InceptorOracleParser.KW_ROWS - 129)) | (1 << (InceptorOracleParser.KW_FORMAT - 129)) | (1 << (InceptorOracleParser.KW_DELIMITED - 129)) | (1 << (InceptorOracleParser.KW_FIELDS - 129)) | (1 << (InceptorOracleParser.KW_TERMINATED - 129)) | (1 << (InceptorOracleParser.KW_ESCAPED - 129)) | (1 << (InceptorOracleParser.KW_COLLECTION - 129)) | (1 << (InceptorOracleParser.KW_ITEMS - 129)) | (1 << (InceptorOracleParser.KW_KEYS - 129)) | (1 << (InceptorOracleParser.KW_KEY_TYPE - 129)) | (1 << (InceptorOracleParser.KW_LINES - 129)) | (1 << (InceptorOracleParser.KW_STORED - 129)) | (1 << (InceptorOracleParser.KW_FILEFORMAT - 129)) | (1 << (InceptorOracleParser.KW_SEQUENCEFILE - 129)) | (1 << (InceptorOracleParser.KW_TEXTFILE - 129)) | (1 << (InceptorOracleParser.KW_CSVFILE - 129)) | (1 << (InceptorOracleParser.KW_FWCFILE - 129)) | (1 << (InceptorOracleParser.KW_RCFILE - 129)) | (1 << (InceptorOracleParser.KW_ORCFILE - 129)) | (1 << (InceptorOracleParser.KW_HOLODESK - 129)) | (1 << (InceptorOracleParser.KW_STELLARDB - 129)) | (1 << (InceptorOracleParser.KW_ORCTRANSACTIONFILE - 129)) | (1 << (InceptorOracleParser.KW_PARQUET - 129)))) !== 0) || ((((_la - 161)) & ~0x1f) == 0 && ((1 << (_la - 161)) & ((1 << (InceptorOracleParser.KW_HYPERDRIVE - 161)) | (1 << (InceptorOracleParser.KW_ESDRIVE - 161)) | (1 << (InceptorOracleParser.KW_INPUTFORMAT - 161)) | (1 << (InceptorOracleParser.KW_OUTPUTFORMAT - 161)) | (1 << (InceptorOracleParser.KW_INPUTDRIVER - 161)) | (1 << (InceptorOracleParser.KW_OUTPUTDRIVER - 161)) | (1 << (InceptorOracleParser.KW_OFFLINE - 161)) | (1 << (InceptorOracleParser.KW_ENABLE - 161)) | (1 << (InceptorOracleParser.KW_DISABLE - 161)) | (1 << (InceptorOracleParser.KW_READONLY - 161)) | (1 << (InceptorOracleParser.KW_NO_DROP - 161)) | (1 << (InceptorOracleParser.KW_LOCATION - 161)) | (1 << (InceptorOracleParser.KW_BUCKET - 161)) | (1 << (InceptorOracleParser.KW_OUT - 161)) | (1 << (InceptorOracleParser.KW_OF - 161)) | (1 << (InceptorOracleParser.KW_PERCENT - 161)) | (1 << (InceptorOracleParser.KW_CAST - 161)) | (1 << (InceptorOracleParser.KW_ADD - 161)) | (1 << (InceptorOracleParser.KW_REPLACE - 161)) | (1 << (InceptorOracleParser.KW_RLIKE - 161)) | (1 << (InceptorOracleParser.KW_REGEXP - 161)) | (1 << (InceptorOracleParser.KW_TEMPORARY - 161)) | (1 << (InceptorOracleParser.KW_RESOURCE - 161)) | (1 << (InceptorOracleParser.KW_RELOAD - 161)) | (1 << (InceptorOracleParser.KW_EXPLAIN - 161)) | (1 << (InceptorOracleParser.KW_FORMATTED - 161)) | (1 << (InceptorOracleParser.KW_PRETTY - 161)) | (1 << (InceptorOracleParser.KW_DEPENDENCY - 161)))) !== 0) || ((((_la - 193)) & ~0x1f) == 0 && ((1 << (_la - 193)) & ((1 << (InceptorOracleParser.KW_LOGICAL - 193)) | (1 << (InceptorOracleParser.KW_COST - 193)) | (1 << (InceptorOracleParser.KW_SERDE - 193)) | (1 << (InceptorOracleParser.KW_WITH - 193)) | (1 << (InceptorOracleParser.KW_WITHIN - 193)) | (1 << (InceptorOracleParser.KW_DEFERRED - 193)) | (1 << (InceptorOracleParser.KW_SERDEPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_DBPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_LIMIT - 193)) | (1 << (InceptorOracleParser.KW_SET - 193)) | (1 << (InceptorOracleParser.KW_UNSET - 193)) | (1 << (InceptorOracleParser.KW_TBLPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_IDXPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_VALUE_TYPE - 193)) | (1 << (InceptorOracleParser.KW_ELEM_TYPE - 193)) | (1 << (InceptorOracleParser.KW_CASE - 193)) | (1 << (InceptorOracleParser.KW_PRIOR - 193)) | (1 << (InceptorOracleParser.KW_NOCYCLE - 193)) | (1 << (InceptorOracleParser.KW_MAPJOIN - 193)) | (1 << (InceptorOracleParser.KW_COMBINE - 193)) | (1 << (InceptorOracleParser.KW_COMBINE_STRUCT_INDEX - 193)) | (1 << (InceptorOracleParser.KW_GLKJOIN - 193)) | (1 << (InceptorOracleParser.KW_USE_INDEX - 193)))) !== 0) || ((((_la - 225)) & ~0x1f) == 0 && ((1 << (_la - 225)) & ((1 << (InceptorOracleParser.KW_STARGATE - 225)) | (1 << (InceptorOracleParser.KW_USE_BULKLOAD - 225)) | (1 << (InceptorOracleParser.KW_ADHOC - 225)) | (1 << (InceptorOracleParser.KW_PRECOMPILE - 225)) | (1 << (InceptorOracleParser.KW_STREAMTABLE - 225)) | (1 << (InceptorOracleParser.KW_STREAM - 225)) | (1 << (InceptorOracleParser.KW_RULEBASE - 225)) | (1 << (InceptorOracleParser.KW_RULEBASES - 225)) | (1 << (InceptorOracleParser.KW_RULE - 225)) | (1 << (InceptorOracleParser.KW_RULES - 225)) | (1 << (InceptorOracleParser.KW_MEET - 225)) | (1 << (InceptorOracleParser.KW_MUST - 225)) | (1 << (InceptorOracleParser.KW_MUSTNOT - 225)) | (1 << (InceptorOracleParser.KW_POLICY - 225)) | (1 << (InceptorOracleParser.KW_POLICIES - 225)) | (1 << (InceptorOracleParser.KW_REMOVE - 225)) | (1 << (InceptorOracleParser.KW_POLICYKEY - 225)) | (1 << (InceptorOracleParser.KW_POLICY_RULE - 225)) | (1 << (InceptorOracleParser.KW_LOOKUP - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTION - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTIONS - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTION_PROPERTIES - 225)) | (1 << (InceptorOracleParser.KW_HOLD_DDLTIME - 225)) | (1 << (InceptorOracleParser.KW_CLUSTERSTATUS - 225)))) !== 0) || ((((_la - 257)) & ~0x1f) == 0 && ((1 << (_la - 257)) & ((1 << (InceptorOracleParser.KW_UTC - 257)) | (1 << (InceptorOracleParser.KW_UTCTIMESTAMP - 257)) | (1 << (InceptorOracleParser.KW_LONG - 257)) | (1 << (InceptorOracleParser.KW_DELETE - 257)) | (1 << (InceptorOracleParser.KW_PLUS - 257)) | (1 << (InceptorOracleParser.KW_MINUS - 257)) | (1 << (InceptorOracleParser.KW_OP_CONCAT - 257)) | (1 << (InceptorOracleParser.KW_FETCH - 257)) | (1 << (InceptorOracleParser.KW_INTERSECT - 257)) | (1 << (InceptorOracleParser.KW_VIEW - 257)) | (1 << (InceptorOracleParser.KW_IN - 257)) | (1 << (InceptorOracleParser.KW_DATABASES - 257)) | (1 << (InceptorOracleParser.KW_MATERIALIZED - 257)) | (1 << (InceptorOracleParser.KW_SCHEMA - 257)) | (1 << (InceptorOracleParser.KW_SCHEMAS - 257)) | (1 << (InceptorOracleParser.KW_GRANT - 257)) | (1 << (InceptorOracleParser.KW_REVOKE - 257)) | (1 << (InceptorOracleParser.KW_SSL - 257)) | (1 << (InceptorOracleParser.KW_UNDO - 257)) | (1 << (InceptorOracleParser.KW_LOCK - 257)) | (1 << (InceptorOracleParser.KW_LOCKS - 257)) | (1 << (InceptorOracleParser.KW_UNLOCK - 257)) | (1 << (InceptorOracleParser.KW_SHARED - 257)) | (1 << (InceptorOracleParser.KW_EXCLUSIVE - 257)) | (1 << (InceptorOracleParser.KW_PROCEDURE - 257)) | (1 << (InceptorOracleParser.KW_UNSIGNED - 257)) | (1 << (InceptorOracleParser.KW_WHILE - 257)) | (1 << (InceptorOracleParser.KW_READ - 257)) | (1 << (InceptorOracleParser.KW_READS - 257)))) !== 0) || ((((_la - 289)) & ~0x1f) == 0 && ((1 << (_la - 289)) & ((1 << (InceptorOracleParser.KW_PURGE - 289)) | (1 << (InceptorOracleParser.KW_RANGE - 289)) | (1 << (InceptorOracleParser.KW_ANALYZE - 289)) | (1 << (InceptorOracleParser.KW_BEFORE - 289)) | (1 << (InceptorOracleParser.KW_BETWEEN - 289)) | (1 << (InceptorOracleParser.KW_BOTH - 289)) | (1 << (InceptorOracleParser.KW_BINARY - 289)) | (1 << (InceptorOracleParser.KW_DEFAULT - 289)) | (1 << (InceptorOracleParser.KW_TYPE - 289)) | (1 << (InceptorOracleParser.KW_TRIGGER - 289)) | (1 << (InceptorOracleParser.KW_RECORDREADER - 289)) | (1 << (InceptorOracleParser.KW_RECORDWRITER - 289)) | (1 << (InceptorOracleParser.KW_SEMI - 289)) | (1 << (InceptorOracleParser.KW_LATERAL - 289)) | (1 << (InceptorOracleParser.KW_TOUCH - 289)) | (1 << (InceptorOracleParser.KW_ARCHIVE - 289)) | (1 << (InceptorOracleParser.KW_UNARCHIVE - 289)) | (1 << (InceptorOracleParser.KW_COMPUTE - 289)) | (1 << (InceptorOracleParser.KW_STATISTICS - 289)) | (1 << (InceptorOracleParser.KW_USE - 289)) | (1 << (InceptorOracleParser.KW_OPTION - 289)) | (1 << (InceptorOracleParser.KW_CONCATENATE - 289)) | (1 << (InceptorOracleParser.KW_SHOW_DATABASE - 289)) | (1 << (InceptorOracleParser.KW_UPDATE - 289)) | (1 << (InceptorOracleParser.KW_RESTRICT - 289)) | (1 << (InceptorOracleParser.KW_CASCADE - 289)) | (1 << (InceptorOracleParser.KW_SKEWED - 289)))) !== 0) || ((((_la - 323)) & ~0x1f) == 0 && ((1 << (_la - 323)) & ((1 << (InceptorOracleParser.KW_DIRECTORIES - 323)) | (1 << (InceptorOracleParser.KW_WINDOWRESET - 323)) | (1 << (InceptorOracleParser.KW_SESSIONSTART - 323)) | (1 << (InceptorOracleParser.KW_SESSIONSTOP - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE_DISCARD - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE_COMPLETE - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOW - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOWSLIDELENGTH - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOWSEPARATED - 323)) | (1 << (InceptorOracleParser.KW_FOLLOWEDBY - 323)) | (1 << (InceptorOracleParser.KW_NOTFOLLOWEDBY - 323)) | (1 << (InceptorOracleParser.KW_NOTNEXT - 323)) | (1 << (InceptorOracleParser.KW_PATTERN_TIMES - 323)) | (1 << (InceptorOracleParser.KW_CURRVALUE - 323)) | (1 << (InceptorOracleParser.KW_GROUPING - 323)) | (1 << (InceptorOracleParser.KW_SETS - 323)))) !== 0) || ((((_la - 355)) & ~0x1f) == 0 && ((1 << (_la - 355)) & ((1 << (InceptorOracleParser.KW_TRUNCATE - 355)) | (1 << (InceptorOracleParser.KW_NOSCAN - 355)) | (1 << (InceptorOracleParser.KW_USER - 355)) | (1 << (InceptorOracleParser.KW_QUOTA - 355)) | (1 << (InceptorOracleParser.KW_PERMISSION - 355)) | (1 << (InceptorOracleParser.KW_ROLE - 355)) | (1 << (InceptorOracleParser.KW_ROLES - 355)) | (1 << (InceptorOracleParser.KW_INNER - 355)) | (1 << (InceptorOracleParser.KW_ADMIN - 355)) | (1 << (InceptorOracleParser.KW_OWNER - 355)) | (1 << (InceptorOracleParser.KW_PRINCIPALS - 355)) | (1 << (InceptorOracleParser.KW_CONSTANT - 355)) | (1 << (InceptorOracleParser.KW_CONSTRAINT - 355)) | (1 << (InceptorOracleParser.KW_VALUES - 355)) | (1 << (InceptorOracleParser.KW_YEAR - 355)) | (1 << (InceptorOracleParser.KW_MONTH - 355)) | (1 << (InceptorOracleParser.KW_DAY - 355)) | (1 << (InceptorOracleParser.KW_MINUTE - 355)) | (1 << (InceptorOracleParser.KW_HOUR - 355)))) !== 0) || ((((_la - 387)) & ~0x1f) == 0 && ((1 << (_la - 387)) & ((1 << (InceptorOracleParser.KW_SECOND - 387)) | (1 << (InceptorOracleParser.KW_INTERVAL - 387)) | (1 << (InceptorOracleParser.KW_EXTRACT - 387)) | (1 << (InceptorOracleParser.KW_SUBSTRING - 387)) | (1 << (InceptorOracleParser.KW_SYSDATE - 387)) | (1 << (InceptorOracleParser.KW_SYSTIMESTAMP - 387)) | (1 << (InceptorOracleParser.KW_SYSTIME - 387)) | (1 << (InceptorOracleParser.KW_MAXVALUE - 387)) | (1 << (InceptorOracleParser.KW_NOMAXVALUE - 387)) | (1 << (InceptorOracleParser.KW_MINVALUE - 387)) | (1 << (InceptorOracleParser.KW_NOMINVALUE - 387)) | (1 << (InceptorOracleParser.KW_CYCLE - 387)) | (1 << (InceptorOracleParser.KW_CACHE - 387)) | (1 << (InceptorOracleParser.KW_CACHEDMETRIC - 387)) | (1 << (InceptorOracleParser.KW_CACHEDMETRICS - 387)) | (1 << (InceptorOracleParser.KW_NOCACHE - 387)) | (1 << (InceptorOracleParser.KW_NOORDER - 387)) | (1 << (InceptorOracleParser.KW_MERGE - 387)) | (1 << (InceptorOracleParser.KW_PLANT - 387)) | (1 << (InceptorOracleParser.KW_IMMEDIATE - 387)) | (1 << (InceptorOracleParser.KW_COMPACT - 387)) | (1 << (InceptorOracleParser.KW_STOP - 387)) | (1 << (InceptorOracleParser.KW_LIST - 387)))) !== 0) || ((((_la - 419)) & ~0x1f) == 0 && ((1 << (_la - 419)) & ((1 << (InceptorOracleParser.KW_TRANSACTION - 419)) | (1 << (InceptorOracleParser.KW_WORK - 419)) | (1 << (InceptorOracleParser.KW_SPACE - 419)) | (1 << (InceptorOracleParser.KW_CONF - 419)) | (1 << (InceptorOracleParser.KW_DEFINED - 419)) | (1 << (InceptorOracleParser.KW_INTEGER - 419)) | (1 << (InceptorOracleParser.KW_ONLY - 419)) | (1 << (InceptorOracleParser.KW_SERVER - 419)) | (1 << (InceptorOracleParser.KW_TRANSACTIONS - 419)) | (1 << (InceptorOracleParser.KW_URI - 419)) | (1 << (InceptorOracleParser.KW_WRITE - 419)) | (1 << (InceptorOracleParser.KW_FACL - 419)) | (1 << (InceptorOracleParser.KW_FOUND - 419)) | (1 << (InceptorOracleParser.KW_LEVEL - 419)) | (1 << (InceptorOracleParser.KW_PUBLIC - 419)) | (1 << (InceptorOracleParser.KW_LINKS - 419)) | (1 << (InceptorOracleParser.KW_CONNECT - 419)) | (1 << (InceptorOracleParser.KW_APPLICATION - 419)) | (1 << (InceptorOracleParser.KW_APPLICATIONS - 419)) | (1 << (InceptorOracleParser.KW_APP - 419)) | (1 << (InceptorOracleParser.KW_APPS - 419)) | (1 << (InceptorOracleParser.KW_INFINITE - 419)))) !== 0) || ((((_la - 451)) & ~0x1f) == 0 && ((1 << (_la - 451)) & ((1 << (InceptorOracleParser.KW_WAIT - 451)) | (1 << (InceptorOracleParser.KW_PRIMARY - 451)) | (1 << (InceptorOracleParser.KW_FOREIGN - 451)) | (1 << (InceptorOracleParser.KW_REFERENCES - 451)) | (1 << (InceptorOracleParser.KW_VALIDATE - 451)) | (1 << (InceptorOracleParser.KW_NOVALIDATE - 451)) | (1 << (InceptorOracleParser.KW_RELY - 451)) | (1 << (InceptorOracleParser.KW_NORELY - 451)) | (1 << (InceptorOracleParser.KW_KEY - 451)) | (1 << (InceptorOracleParser.KW_SEGMENT - 451)) | (1 << (InceptorOracleParser.KW_LENGTH - 451)) | (1 << (InceptorOracleParser.KW_ATTACH - 451)) | (1 << (InceptorOracleParser.KW_DETTACH - 451)) | (1 << (InceptorOracleParser.KW_SHARD - 451)) | (1 << (InceptorOracleParser.KW_NUM - 451)) | (1 << (InceptorOracleParser.KW_FULLTEXT - 451)) | (1 << (InceptorOracleParser.KW_TABLESIZE - 451)) | (1 << (InceptorOracleParser.KW_TABLET - 451)) | (1 << (InceptorOracleParser.KW_CAPACITY - 451)) | (1 << (InceptorOracleParser.KW_ANALYZER - 451)) | (1 << (InceptorOracleParser.KW_SYNC - 451)) | (1 << (InceptorOracleParser.KW_NO_INDEX - 451)) | (1 << (InceptorOracleParser.KW_LOG - 451)) | (1 << (InceptorOracleParser.KW_FILE - 451)) | (1 << (InceptorOracleParser.KW_JAR - 451)) | (1 << (InceptorOracleParser.KW_PERMANENT - 451)))) !== 0) || ((((_la - 485)) & ~0x1f) == 0 && ((1 << (_la - 485)) & ((1 << (InceptorOracleParser.KW_SCHEDULER - 485)) | (1 << (InceptorOracleParser.KW_MODE - 485)) | (1 << (InceptorOracleParser.LPAREN - 485)) | (1 << (InceptorOracleParser.PLUS - 485)) | (1 << (InceptorOracleParser.MINUS - 485)) | (1 << (InceptorOracleParser.STAR - 485)))) !== 0) || ((((_la - 517)) & ~0x1f) == 0 && ((1 << (_la - 517)) & ((1 << (InceptorOracleParser.TILDE - 517)) | (1 << (InceptorOracleParser.StringLiteral - 517)) | (1 << (InceptorOracleParser.CharSetLiteral - 517)) | (1 << (InceptorOracleParser.BigintLiteral - 517)) | (1 << (InceptorOracleParser.SmallintLiteral - 517)) | (1 << (InceptorOracleParser.TinyintLiteral - 517)) | (1 << (InceptorOracleParser.DecimalLiteral - 517)) | (1 << (InceptorOracleParser.Number - 517)) | (1 << (InceptorOracleParser.Identifier - 517)) | (1 << (InceptorOracleParser.CharSetName - 517)) | (1 << (InceptorOracleParser.KW_NOCOPY - 517)) | (1 << (InceptorOracleParser.KW_VARRAY - 517)) | (1 << (InceptorOracleParser.KW_PACKAGE - 517)))) !== 0) || ((((_la - 549)) & ~0x1f) == 0 && ((1 << (_la - 549)) & ((1 << (InceptorOracleParser.KW_PACKAGES - 549)) | (1 << (InceptorOracleParser.KW_BODY - 549)) | (1 << (InceptorOracleParser.KW_ISOPEN - 549)) | (1 << (InceptorOracleParser.KW_NOTFOUND - 549)) | (1 << (InceptorOracleParser.KW_ROWCOUNT - 549)) | (1 << (InceptorOracleParser.KW_BULK_ROWCOUNT - 549)) | (1 << (InceptorOracleParser.KW_BULK_EXCEPTIONS - 549)) | (1 << (InceptorOracleParser.KW_REVERSE - 549)) | (1 << (InceptorOracleParser.KW_SAVE - 549)) | (1 << (InceptorOracleParser.KW_EXCEPTIONS - 549)) | (1 << (InceptorOracleParser.KW_INDICES - 549)) | (1 << (InceptorOracleParser.KW_REF - 549)) | (1 << (InceptorOracleParser.KW_YEARS - 549)) | (1 << (InceptorOracleParser.KW_MONTHS - 549)) | (1 << (InceptorOracleParser.KW_DAYS - 549)) | (1 << (InceptorOracleParser.KW_HOURS - 549)) | (1 << (InceptorOracleParser.KW_MINUTES - 549)) | (1 << (InceptorOracleParser.KW_SECONDS - 549)))) !== 0)) {
	                        this.state = 7294;
	                        this.paramExpression();
	                        this.state = 7299;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                        while(_la===InceptorOracleParser.COMMA) {
	                            this.state = 7295;
	                            this.match(InceptorOracleParser.COMMA);
	                            this.state = 7296;
	                            this.paramExpression();
	                            this.state = 7301;
	                            this._errHandler.sync(this);
	                            _la = this._input.LA(1);
	                        }
	                    }

	                    this.state = 7304;
	                    this.match(InceptorOracleParser.RPAREN);
	                    this.state = 7307;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===InceptorOracleParser.KW_OVER) {
	                        this.state = 7305;
	                        this.match(InceptorOracleParser.KW_OVER);
	                        this.state = 7306;
	                        this.window_specification();
	                    }

	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                } 
	            }
	            this.state = 7313;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,817,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifStatement() {
	    let localctx = new IfStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1326, InceptorOracleParser.RULE_ifStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7314;
	        this.match(InceptorOracleParser.KW_IF);
	        this.state = 7315;
	        this.condition();
	        this.state = 7316;
	        this.match(InceptorOracleParser.KW_THEN);
	        this.state = 7320;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << InceptorOracleParser.KW_TRUE) | (1 << InceptorOracleParser.KW_FALSE) | (1 << InceptorOracleParser.KW_ALL) | (1 << InceptorOracleParser.KW_LIKE) | (1 << InceptorOracleParser.KW_NO) | (1 << InceptorOracleParser.KW_ANY) | (1 << InceptorOracleParser.KW_IF) | (1 << InceptorOracleParser.KW_EXISTS) | (1 << InceptorOracleParser.KW_ASC) | (1 << InceptorOracleParser.KW_DESC) | (1 << InceptorOracleParser.KW_ORDER) | (1 << InceptorOracleParser.KW_GROUP) | (1 << InceptorOracleParser.KW_INCREMENT) | (1 << InceptorOracleParser.KW_BY) | (1 << InceptorOracleParser.KW_HASH) | (1 << InceptorOracleParser.KW_FROM) | (1 << InceptorOracleParser.KW_SELECT) | (1 << InceptorOracleParser.KW_INSERT) | (1 << InceptorOracleParser.KW_BATCH_INSERT) | (1 << InceptorOracleParser.KW_OVERWRITE) | (1 << InceptorOracleParser.KW_OUTER))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (InceptorOracleParser.KW_STREAMJOB - 33)) | (1 << (InceptorOracleParser.KW_STREAMJOBS - 33)) | (1 << (InceptorOracleParser.KW_AT - 33)) | (1 << (InceptorOracleParser.KW_LEFT - 33)) | (1 << (InceptorOracleParser.KW_RIGHT - 33)) | (1 << (InceptorOracleParser.KW_FULL - 33)) | (1 << (InceptorOracleParser.KW_PARTITION - 33)) | (1 << (InceptorOracleParser.KW_PARTITIONS - 33)) | (1 << (InceptorOracleParser.KW_PATTERN - 33)) | (1 << (InceptorOracleParser.KW_TABLE - 33)) | (1 << (InceptorOracleParser.KW_TABLES - 33)) | (1 << (InceptorOracleParser.KW_SEQUENCE - 33)) | (1 << (InceptorOracleParser.KW_SEQUENCES - 33)) | (1 << (InceptorOracleParser.KW_COLUMNS - 33)) | (1 << (InceptorOracleParser.KW_INDEX - 33)) | (1 << (InceptorOracleParser.KW_INDEXES - 33)) | (1 << (InceptorOracleParser.KW_REBUILD - 33)) | (1 << (InceptorOracleParser.KW_FUNCTIONS - 33)) | (1 << (InceptorOracleParser.KW_SHOW - 33)) | (1 << (InceptorOracleParser.KW_MSCK - 33)) | (1 << (InceptorOracleParser.KW_REPAIR - 33)) | (1 << (InceptorOracleParser.KW_DIRECTORY - 33)) | (1 << (InceptorOracleParser.KW_LOCAL - 33)) | (1 << (InceptorOracleParser.KW_GLOBAL - 33)) | (1 << (InceptorOracleParser.KW_USING - 33)) | (1 << (InceptorOracleParser.KW_CLUSTER - 33)) | (1 << (InceptorOracleParser.KW_DISTRIBUTE - 33)) | (1 << (InceptorOracleParser.KW_SORT - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (InceptorOracleParser.KW_UNION - 65)) | (1 << (InceptorOracleParser.KW_LOAD - 65)) | (1 << (InceptorOracleParser.KW_EXPORT - 65)) | (1 << (InceptorOracleParser.KW_IMPORT - 65)) | (1 << (InceptorOracleParser.KW_DATA - 65)) | (1 << (InceptorOracleParser.KW_INPATH - 65)) | (1 << (InceptorOracleParser.KW_IS - 65)) | (1 << (InceptorOracleParser.KW_NULL - 65)) | (1 << (InceptorOracleParser.KW_NULLS - 65)) | (1 << (InceptorOracleParser.KW_CREATE - 65)) | (1 << (InceptorOracleParser.KW_EXTERNAL - 65)) | (1 << (InceptorOracleParser.KW_ALTER - 65)) | (1 << (InceptorOracleParser.KW_CHANGE - 65)) | (1 << (InceptorOracleParser.KW_FIRST - 65)) | (1 << (InceptorOracleParser.KW_LAST - 65)) | (1 << (InceptorOracleParser.KW_AFTER - 65)) | (1 << (InceptorOracleParser.KW_DESCRIBE - 65)) | (1 << (InceptorOracleParser.KW_DROP - 65)) | (1 << (InceptorOracleParser.KW_RENAME - 65)) | (1 << (InceptorOracleParser.KW_IGNORE - 65)) | (1 << (InceptorOracleParser.KW_RESPECT - 65)) | (1 << (InceptorOracleParser.KW_PROTECTION - 65)) | (1 << (InceptorOracleParser.KW_TO - 65)) | (1 << (InceptorOracleParser.KW_COMMENT - 65)) | (1 << (InceptorOracleParser.KW_PROMPT - 65)) | (1 << (InceptorOracleParser.KW_SPOOL - 65)) | (1 << (InceptorOracleParser.KW_BOOLEAN - 65)) | (1 << (InceptorOracleParser.KW_TINYINT - 65)) | (1 << (InceptorOracleParser.KW_BYTE - 65)) | (1 << (InceptorOracleParser.KW_SMALLINT - 65)) | (1 << (InceptorOracleParser.KW_INT - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (InceptorOracleParser.KW_BIGINT - 97)) | (1 << (InceptorOracleParser.KW_FLOAT - 97)) | (1 << (InceptorOracleParser.KW_DOUBLE - 97)) | (1 << (InceptorOracleParser.KW_DATE - 97)) | (1 << (InceptorOracleParser.KW_DATETIME - 97)) | (1 << (InceptorOracleParser.KW_TIMESTAMP - 97)) | (1 << (InceptorOracleParser.KW_TIME - 97)) | (1 << (InceptorOracleParser.KW_DECIMAL - 97)) | (1 << (InceptorOracleParser.KW_STRING - 97)) | (1 << (InceptorOracleParser.KW_GEO - 97)) | (1 << (InceptorOracleParser.KW_ARRAY - 97)) | (1 << (InceptorOracleParser.KW_STRUCT - 97)) | (1 << (InceptorOracleParser.KW_MAP - 97)) | (1 << (InceptorOracleParser.KW_UNIONTYPE - 97)) | (1 << (InceptorOracleParser.KW_REDUCE - 97)) | (1 << (InceptorOracleParser.KW_PARTITIONED - 97)) | (1 << (InceptorOracleParser.KW_ROUTED - 97)) | (1 << (InceptorOracleParser.KW_CLUSTERED - 97)) | (1 << (InceptorOracleParser.KW_SORTED - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (InceptorOracleParser.KW_NEXT - 129)) | (1 << (InceptorOracleParser.KW_NEXTVALUE - 129)) | (1 << (InceptorOracleParser.KW_UNLIMITED - 129)) | (1 << (InceptorOracleParser.KW_WIDCARD - 129)) | (1 << (InceptorOracleParser.KW_BUCKETS - 129)) | (1 << (InceptorOracleParser.KW_ROW - 129)) | (1 << (InceptorOracleParser.KW_ROWS - 129)) | (1 << (InceptorOracleParser.KW_FORMAT - 129)) | (1 << (InceptorOracleParser.KW_DELIMITED - 129)) | (1 << (InceptorOracleParser.KW_FIELDS - 129)) | (1 << (InceptorOracleParser.KW_TERMINATED - 129)) | (1 << (InceptorOracleParser.KW_ESCAPED - 129)) | (1 << (InceptorOracleParser.KW_COLLECTION - 129)) | (1 << (InceptorOracleParser.KW_ITEMS - 129)) | (1 << (InceptorOracleParser.KW_KEYS - 129)) | (1 << (InceptorOracleParser.KW_KEY_TYPE - 129)) | (1 << (InceptorOracleParser.KW_LINES - 129)) | (1 << (InceptorOracleParser.KW_STORED - 129)) | (1 << (InceptorOracleParser.KW_FILEFORMAT - 129)) | (1 << (InceptorOracleParser.KW_SEQUENCEFILE - 129)) | (1 << (InceptorOracleParser.KW_TEXTFILE - 129)) | (1 << (InceptorOracleParser.KW_CSVFILE - 129)) | (1 << (InceptorOracleParser.KW_FWCFILE - 129)) | (1 << (InceptorOracleParser.KW_RCFILE - 129)) | (1 << (InceptorOracleParser.KW_ORCFILE - 129)) | (1 << (InceptorOracleParser.KW_HOLODESK - 129)) | (1 << (InceptorOracleParser.KW_STELLARDB - 129)) | (1 << (InceptorOracleParser.KW_ORCTRANSACTIONFILE - 129)) | (1 << (InceptorOracleParser.KW_PARQUET - 129)))) !== 0) || ((((_la - 161)) & ~0x1f) == 0 && ((1 << (_la - 161)) & ((1 << (InceptorOracleParser.KW_HYPERDRIVE - 161)) | (1 << (InceptorOracleParser.KW_ESDRIVE - 161)) | (1 << (InceptorOracleParser.KW_INPUTFORMAT - 161)) | (1 << (InceptorOracleParser.KW_OUTPUTFORMAT - 161)) | (1 << (InceptorOracleParser.KW_INPUTDRIVER - 161)) | (1 << (InceptorOracleParser.KW_OUTPUTDRIVER - 161)) | (1 << (InceptorOracleParser.KW_OFFLINE - 161)) | (1 << (InceptorOracleParser.KW_ENABLE - 161)) | (1 << (InceptorOracleParser.KW_DISABLE - 161)) | (1 << (InceptorOracleParser.KW_READONLY - 161)) | (1 << (InceptorOracleParser.KW_NO_DROP - 161)) | (1 << (InceptorOracleParser.KW_LOCATION - 161)) | (1 << (InceptorOracleParser.KW_BUCKET - 161)) | (1 << (InceptorOracleParser.KW_OUT - 161)) | (1 << (InceptorOracleParser.KW_OF - 161)) | (1 << (InceptorOracleParser.KW_PERCENT - 161)) | (1 << (InceptorOracleParser.KW_CAST - 161)) | (1 << (InceptorOracleParser.KW_ADD - 161)) | (1 << (InceptorOracleParser.KW_REPLACE - 161)) | (1 << (InceptorOracleParser.KW_RLIKE - 161)) | (1 << (InceptorOracleParser.KW_REGEXP - 161)) | (1 << (InceptorOracleParser.KW_TEMPORARY - 161)) | (1 << (InceptorOracleParser.KW_RESOURCE - 161)) | (1 << (InceptorOracleParser.KW_RELOAD - 161)) | (1 << (InceptorOracleParser.KW_EXPLAIN - 161)) | (1 << (InceptorOracleParser.KW_FORMATTED - 161)) | (1 << (InceptorOracleParser.KW_PRETTY - 161)) | (1 << (InceptorOracleParser.KW_DEPENDENCY - 161)))) !== 0) || ((((_la - 193)) & ~0x1f) == 0 && ((1 << (_la - 193)) & ((1 << (InceptorOracleParser.KW_LOGICAL - 193)) | (1 << (InceptorOracleParser.KW_COST - 193)) | (1 << (InceptorOracleParser.KW_SERDE - 193)) | (1 << (InceptorOracleParser.KW_WITH - 193)) | (1 << (InceptorOracleParser.KW_WITHIN - 193)) | (1 << (InceptorOracleParser.KW_DEFERRED - 193)) | (1 << (InceptorOracleParser.KW_SERDEPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_DBPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_LIMIT - 193)) | (1 << (InceptorOracleParser.KW_SET - 193)) | (1 << (InceptorOracleParser.KW_UNSET - 193)) | (1 << (InceptorOracleParser.KW_TBLPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_IDXPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_VALUE_TYPE - 193)) | (1 << (InceptorOracleParser.KW_ELEM_TYPE - 193)) | (1 << (InceptorOracleParser.KW_CASE - 193)) | (1 << (InceptorOracleParser.KW_GOTO - 193)) | (1 << (InceptorOracleParser.KW_EXIT - 193)) | (1 << (InceptorOracleParser.KW_OPEN - 193)) | (1 << (InceptorOracleParser.KW_CLOSE - 193)) | (1 << (InceptorOracleParser.KW_PRIOR - 193)) | (1 << (InceptorOracleParser.KW_NOCYCLE - 193)) | (1 << (InceptorOracleParser.KW_MAPJOIN - 193)) | (1 << (InceptorOracleParser.KW_COMBINE - 193)) | (1 << (InceptorOracleParser.KW_COMBINE_STRUCT_INDEX - 193)) | (1 << (InceptorOracleParser.KW_GLKJOIN - 193)) | (1 << (InceptorOracleParser.KW_USE_INDEX - 193)))) !== 0) || ((((_la - 225)) & ~0x1f) == 0 && ((1 << (_la - 225)) & ((1 << (InceptorOracleParser.KW_STARGATE - 225)) | (1 << (InceptorOracleParser.KW_USE_BULKLOAD - 225)) | (1 << (InceptorOracleParser.KW_ADHOC - 225)) | (1 << (InceptorOracleParser.KW_PRECOMPILE - 225)) | (1 << (InceptorOracleParser.KW_STREAMTABLE - 225)) | (1 << (InceptorOracleParser.KW_STREAM - 225)) | (1 << (InceptorOracleParser.KW_RULEBASE - 225)) | (1 << (InceptorOracleParser.KW_RULEBASES - 225)) | (1 << (InceptorOracleParser.KW_RULE - 225)) | (1 << (InceptorOracleParser.KW_RULES - 225)) | (1 << (InceptorOracleParser.KW_MEET - 225)) | (1 << (InceptorOracleParser.KW_MUST - 225)) | (1 << (InceptorOracleParser.KW_MUSTNOT - 225)) | (1 << (InceptorOracleParser.KW_POLICY - 225)) | (1 << (InceptorOracleParser.KW_POLICIES - 225)) | (1 << (InceptorOracleParser.KW_REMOVE - 225)) | (1 << (InceptorOracleParser.KW_POLICYKEY - 225)) | (1 << (InceptorOracleParser.KW_POLICY_RULE - 225)) | (1 << (InceptorOracleParser.KW_LOOKUP - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTION - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTIONS - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTION_PROPERTIES - 225)) | (1 << (InceptorOracleParser.KW_HOLD_DDLTIME - 225)) | (1 << (InceptorOracleParser.KW_CLUSTERSTATUS - 225)))) !== 0) || ((((_la - 257)) & ~0x1f) == 0 && ((1 << (_la - 257)) & ((1 << (InceptorOracleParser.KW_UTC - 257)) | (1 << (InceptorOracleParser.KW_UTCTIMESTAMP - 257)) | (1 << (InceptorOracleParser.KW_LONG - 257)) | (1 << (InceptorOracleParser.KW_DELETE - 257)) | (1 << (InceptorOracleParser.KW_PLUS - 257)) | (1 << (InceptorOracleParser.KW_MINUS - 257)) | (1 << (InceptorOracleParser.KW_OP_CONCAT - 257)) | (1 << (InceptorOracleParser.KW_FETCH - 257)) | (1 << (InceptorOracleParser.KW_INTERSECT - 257)) | (1 << (InceptorOracleParser.KW_VIEW - 257)) | (1 << (InceptorOracleParser.KW_IN - 257)) | (1 << (InceptorOracleParser.KW_DATABASES - 257)) | (1 << (InceptorOracleParser.KW_MATERIALIZED - 257)) | (1 << (InceptorOracleParser.KW_SCHEMA - 257)) | (1 << (InceptorOracleParser.KW_SCHEMAS - 257)) | (1 << (InceptorOracleParser.KW_GRANT - 257)) | (1 << (InceptorOracleParser.KW_REVOKE - 257)) | (1 << (InceptorOracleParser.KW_SSL - 257)) | (1 << (InceptorOracleParser.KW_UNDO - 257)) | (1 << (InceptorOracleParser.KW_LOCK - 257)) | (1 << (InceptorOracleParser.KW_LOCKS - 257)) | (1 << (InceptorOracleParser.KW_UNLOCK - 257)) | (1 << (InceptorOracleParser.KW_SHARED - 257)) | (1 << (InceptorOracleParser.KW_EXCLUSIVE - 257)) | (1 << (InceptorOracleParser.KW_PROCEDURE - 257)) | (1 << (InceptorOracleParser.KW_UNSIGNED - 257)) | (1 << (InceptorOracleParser.KW_WHILE - 257)) | (1 << (InceptorOracleParser.KW_READ - 257)) | (1 << (InceptorOracleParser.KW_READS - 257)))) !== 0) || ((((_la - 289)) & ~0x1f) == 0 && ((1 << (_la - 289)) & ((1 << (InceptorOracleParser.KW_PURGE - 289)) | (1 << (InceptorOracleParser.KW_RANGE - 289)) | (1 << (InceptorOracleParser.KW_ANALYZE - 289)) | (1 << (InceptorOracleParser.KW_BEFORE - 289)) | (1 << (InceptorOracleParser.KW_BETWEEN - 289)) | (1 << (InceptorOracleParser.KW_BOTH - 289)) | (1 << (InceptorOracleParser.KW_BINARY - 289)) | (1 << (InceptorOracleParser.KW_DEFAULT - 289)) | (1 << (InceptorOracleParser.KW_TYPE - 289)) | (1 << (InceptorOracleParser.KW_TRIGGER - 289)) | (1 << (InceptorOracleParser.KW_RECORDREADER - 289)) | (1 << (InceptorOracleParser.KW_RECORDWRITER - 289)) | (1 << (InceptorOracleParser.KW_SEMI - 289)) | (1 << (InceptorOracleParser.KW_LATERAL - 289)) | (1 << (InceptorOracleParser.KW_TOUCH - 289)) | (1 << (InceptorOracleParser.KW_ARCHIVE - 289)) | (1 << (InceptorOracleParser.KW_UNARCHIVE - 289)) | (1 << (InceptorOracleParser.KW_COMPUTE - 289)) | (1 << (InceptorOracleParser.KW_STATISTICS - 289)) | (1 << (InceptorOracleParser.KW_USE - 289)) | (1 << (InceptorOracleParser.KW_OPTION - 289)) | (1 << (InceptorOracleParser.KW_CONCATENATE - 289)) | (1 << (InceptorOracleParser.KW_SHOW_DATABASE - 289)) | (1 << (InceptorOracleParser.KW_UPDATE - 289)) | (1 << (InceptorOracleParser.KW_BATCHUPDATE - 289)) | (1 << (InceptorOracleParser.KW_RESTRICT - 289)) | (1 << (InceptorOracleParser.KW_CASCADE - 289)) | (1 << (InceptorOracleParser.KW_SKEWED - 289)))) !== 0) || ((((_la - 323)) & ~0x1f) == 0 && ((1 << (_la - 323)) & ((1 << (InceptorOracleParser.KW_DIRECTORIES - 323)) | (1 << (InceptorOracleParser.KW_FOR - 323)) | (1 << (InceptorOracleParser.KW_LOOP - 323)) | (1 << (InceptorOracleParser.KW_WINDOWRESET - 323)) | (1 << (InceptorOracleParser.KW_SESSIONSTART - 323)) | (1 << (InceptorOracleParser.KW_SESSIONSTOP - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE_DISCARD - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE_COMPLETE - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOW - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOWSLIDELENGTH - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOWSEPARATED - 323)) | (1 << (InceptorOracleParser.KW_FOLLOWEDBY - 323)) | (1 << (InceptorOracleParser.KW_NOTFOLLOWEDBY - 323)) | (1 << (InceptorOracleParser.KW_NOTNEXT - 323)) | (1 << (InceptorOracleParser.KW_PATTERN_TIMES - 323)) | (1 << (InceptorOracleParser.KW_CURRVALUE - 323)) | (1 << (InceptorOracleParser.KW_GROUPING - 323)) | (1 << (InceptorOracleParser.KW_SETS - 323)))) !== 0) || ((((_la - 355)) & ~0x1f) == 0 && ((1 << (_la - 355)) & ((1 << (InceptorOracleParser.KW_TRUNCATE - 355)) | (1 << (InceptorOracleParser.KW_NOSCAN - 355)) | (1 << (InceptorOracleParser.KW_USER - 355)) | (1 << (InceptorOracleParser.KW_QUOTA - 355)) | (1 << (InceptorOracleParser.KW_PERMISSION - 355)) | (1 << (InceptorOracleParser.KW_ROLE - 355)) | (1 << (InceptorOracleParser.KW_ROLES - 355)) | (1 << (InceptorOracleParser.KW_INNER - 355)) | (1 << (InceptorOracleParser.KW_ADMIN - 355)) | (1 << (InceptorOracleParser.KW_OWNER - 355)) | (1 << (InceptorOracleParser.KW_PRINCIPALS - 355)) | (1 << (InceptorOracleParser.KW_RETURN - 355)) | (1 << (InceptorOracleParser.KW_CONTINUE - 355)) | (1 << (InceptorOracleParser.KW_BEGIN - 355)) | (1 << (InceptorOracleParser.KW_DECLARE - 355)) | (1 << (InceptorOracleParser.KW_CONSTANT - 355)) | (1 << (InceptorOracleParser.KW_CONSTRAINT - 355)) | (1 << (InceptorOracleParser.KW_VALUES - 355)) | (1 << (InceptorOracleParser.KW_YEAR - 355)) | (1 << (InceptorOracleParser.KW_MONTH - 355)) | (1 << (InceptorOracleParser.KW_DAY - 355)) | (1 << (InceptorOracleParser.KW_MINUTE - 355)) | (1 << (InceptorOracleParser.KW_HOUR - 355)))) !== 0) || ((((_la - 387)) & ~0x1f) == 0 && ((1 << (_la - 387)) & ((1 << (InceptorOracleParser.KW_SECOND - 387)) | (1 << (InceptorOracleParser.KW_INTERVAL - 387)) | (1 << (InceptorOracleParser.KW_EXTRACT - 387)) | (1 << (InceptorOracleParser.KW_SUBSTRING - 387)) | (1 << (InceptorOracleParser.KW_SYSDATE - 387)) | (1 << (InceptorOracleParser.KW_SYSTIMESTAMP - 387)) | (1 << (InceptorOracleParser.KW_SYSTIME - 387)) | (1 << (InceptorOracleParser.KW_EXEC - 387)) | (1 << (InceptorOracleParser.KW_MAXVALUE - 387)) | (1 << (InceptorOracleParser.KW_NOMAXVALUE - 387)) | (1 << (InceptorOracleParser.KW_MINVALUE - 387)) | (1 << (InceptorOracleParser.KW_NOMINVALUE - 387)) | (1 << (InceptorOracleParser.KW_CYCLE - 387)) | (1 << (InceptorOracleParser.KW_CACHE - 387)) | (1 << (InceptorOracleParser.KW_CACHEDMETRIC - 387)) | (1 << (InceptorOracleParser.KW_CACHEDMETRICS - 387)) | (1 << (InceptorOracleParser.KW_NOCACHE - 387)) | (1 << (InceptorOracleParser.KW_NOORDER - 387)) | (1 << (InceptorOracleParser.KW_MERGE - 387)) | (1 << (InceptorOracleParser.KW_PLANT - 387)) | (1 << (InceptorOracleParser.KW_IMMEDIATE - 387)) | (1 << (InceptorOracleParser.KW_COMPACT - 387)) | (1 << (InceptorOracleParser.KW_START - 387)) | (1 << (InceptorOracleParser.KW_STOP - 387)) | (1 << (InceptorOracleParser.KW_LIST - 387)))) !== 0) || ((((_la - 419)) & ~0x1f) == 0 && ((1 << (_la - 419)) & ((1 << (InceptorOracleParser.KW_TRANSACTION - 419)) | (1 << (InceptorOracleParser.KW_COMMIT - 419)) | (1 << (InceptorOracleParser.KW_ROLLBACK - 419)) | (1 << (InceptorOracleParser.KW_WORK - 419)) | (1 << (InceptorOracleParser.KW_SPACE - 419)) | (1 << (InceptorOracleParser.KW_CONF - 419)) | (1 << (InceptorOracleParser.KW_DEFINED - 419)) | (1 << (InceptorOracleParser.KW_INTEGER - 419)) | (1 << (InceptorOracleParser.KW_ONLY - 419)) | (1 << (InceptorOracleParser.KW_SERVER - 419)) | (1 << (InceptorOracleParser.KW_TRANSACTIONS - 419)) | (1 << (InceptorOracleParser.KW_URI - 419)) | (1 << (InceptorOracleParser.KW_WRITE - 419)) | (1 << (InceptorOracleParser.KW_FACL - 419)) | (1 << (InceptorOracleParser.KW_FOUND - 419)) | (1 << (InceptorOracleParser.KW_LEVEL - 419)) | (1 << (InceptorOracleParser.KW_PUBLIC - 419)) | (1 << (InceptorOracleParser.KW_LINKS - 419)) | (1 << (InceptorOracleParser.KW_CONNECT - 419)) | (1 << (InceptorOracleParser.KW_APPLICATION - 419)) | (1 << (InceptorOracleParser.KW_APPLICATIONS - 419)) | (1 << (InceptorOracleParser.KW_APP - 419)) | (1 << (InceptorOracleParser.KW_APPS - 419)) | (1 << (InceptorOracleParser.KW_INFINITE - 419)))) !== 0) || ((((_la - 451)) & ~0x1f) == 0 && ((1 << (_la - 451)) & ((1 << (InceptorOracleParser.KW_WAIT - 451)) | (1 << (InceptorOracleParser.KW_PRIMARY - 451)) | (1 << (InceptorOracleParser.KW_FOREIGN - 451)) | (1 << (InceptorOracleParser.KW_REFERENCES - 451)) | (1 << (InceptorOracleParser.KW_VALIDATE - 451)) | (1 << (InceptorOracleParser.KW_NOVALIDATE - 451)) | (1 << (InceptorOracleParser.KW_RELY - 451)) | (1 << (InceptorOracleParser.KW_NORELY - 451)) | (1 << (InceptorOracleParser.KW_KEY - 451)) | (1 << (InceptorOracleParser.KW_SEGMENT - 451)) | (1 << (InceptorOracleParser.KW_LENGTH - 451)) | (1 << (InceptorOracleParser.KW_ATTACH - 451)) | (1 << (InceptorOracleParser.KW_DETTACH - 451)) | (1 << (InceptorOracleParser.KW_SHARD - 451)) | (1 << (InceptorOracleParser.KW_NUM - 451)) | (1 << (InceptorOracleParser.KW_FULLTEXT - 451)) | (1 << (InceptorOracleParser.KW_TABLESIZE - 451)) | (1 << (InceptorOracleParser.KW_TABLET - 451)) | (1 << (InceptorOracleParser.KW_CAPACITY - 451)) | (1 << (InceptorOracleParser.KW_ANALYZER - 451)) | (1 << (InceptorOracleParser.KW_SYNC - 451)) | (1 << (InceptorOracleParser.KW_NO_INDEX - 451)) | (1 << (InceptorOracleParser.KW_LOG - 451)) | (1 << (InceptorOracleParser.KW_FILE - 451)) | (1 << (InceptorOracleParser.KW_JAR - 451)) | (1 << (InceptorOracleParser.KW_PERMANENT - 451)))) !== 0) || ((((_la - 485)) & ~0x1f) == 0 && ((1 << (_la - 485)) & ((1 << (InceptorOracleParser.KW_SCHEDULER - 485)) | (1 << (InceptorOracleParser.KW_MODE - 485)) | (1 << (InceptorOracleParser.LPAREN - 485)) | (1 << (InceptorOracleParser.DOUBLELESSTHAN - 485)))) !== 0) || ((((_la - 528)) & ~0x1f) == 0 && ((1 << (_la - 528)) & ((1 << (InceptorOracleParser.StringLiteral - 528)) | (1 << (InceptorOracleParser.CharSetLiteral - 528)) | (1 << (InceptorOracleParser.BigintLiteral - 528)) | (1 << (InceptorOracleParser.SmallintLiteral - 528)) | (1 << (InceptorOracleParser.TinyintLiteral - 528)) | (1 << (InceptorOracleParser.DecimalLiteral - 528)) | (1 << (InceptorOracleParser.Number - 528)) | (1 << (InceptorOracleParser.Identifier - 528)) | (1 << (InceptorOracleParser.CharSetName - 528)) | (1 << (InceptorOracleParser.HINT_LEFT - 528)) | (1 << (InceptorOracleParser.KW_NOCOPY - 528)) | (1 << (InceptorOracleParser.KW_VARRAY - 528)) | (1 << (InceptorOracleParser.KW_PACKAGE - 528)) | (1 << (InceptorOracleParser.KW_PACKAGES - 528)) | (1 << (InceptorOracleParser.KW_BODY - 528)) | (1 << (InceptorOracleParser.KW_ISOPEN - 528)) | (1 << (InceptorOracleParser.KW_NOTFOUND - 528)) | (1 << (InceptorOracleParser.KW_ROWCOUNT - 528)) | (1 << (InceptorOracleParser.KW_BULK_ROWCOUNT - 528)) | (1 << (InceptorOracleParser.KW_BULK_EXCEPTIONS - 528)) | (1 << (InceptorOracleParser.KW_REVERSE - 528)) | (1 << (InceptorOracleParser.KW_FORALL - 528)) | (1 << (InceptorOracleParser.KW_SAVE - 528)) | (1 << (InceptorOracleParser.KW_EXCEPTIONS - 528)))) !== 0) || ((((_la - 560)) & ~0x1f) == 0 && ((1 << (_la - 560)) & ((1 << (InceptorOracleParser.KW_INDICES - 560)) | (1 << (InceptorOracleParser.KW_REF - 560)) | (1 << (InceptorOracleParser.KW_RAISE - 560)) | (1 << (InceptorOracleParser.KW_YEARS - 560)) | (1 << (InceptorOracleParser.KW_MONTHS - 560)) | (1 << (InceptorOracleParser.KW_DAYS - 560)) | (1 << (InceptorOracleParser.KW_HOURS - 560)) | (1 << (InceptorOracleParser.KW_MINUTES - 560)) | (1 << (InceptorOracleParser.KW_SECONDS - 560)))) !== 0)) {
	            this.state = 7317;
	            this.labeledStatement();
	            this.state = 7322;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 7326;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===InceptorOracleParser.KW_ELSIF) {
	            this.state = 7323;
	            this.elsifStatement();
	            this.state = 7328;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 7330;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_ELSE) {
	            this.state = 7329;
	            this.elseStatement();
	        }

	        this.state = 7332;
	        this.match(InceptorOracleParser.KW_END);
	        this.state = 7334;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,821,this._ctx);
	        if(la_===1) {
	            this.state = 7333;
	            this.match(InceptorOracleParser.KW_IF);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elsifStatement() {
	    let localctx = new ElsifStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1328, InceptorOracleParser.RULE_elsifStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7336;
	        this.match(InceptorOracleParser.KW_ELSIF);
	        this.state = 7337;
	        this.condition();
	        this.state = 7338;
	        this.match(InceptorOracleParser.KW_THEN);
	        this.state = 7342;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << InceptorOracleParser.KW_TRUE) | (1 << InceptorOracleParser.KW_FALSE) | (1 << InceptorOracleParser.KW_ALL) | (1 << InceptorOracleParser.KW_LIKE) | (1 << InceptorOracleParser.KW_NO) | (1 << InceptorOracleParser.KW_ANY) | (1 << InceptorOracleParser.KW_IF) | (1 << InceptorOracleParser.KW_EXISTS) | (1 << InceptorOracleParser.KW_ASC) | (1 << InceptorOracleParser.KW_DESC) | (1 << InceptorOracleParser.KW_ORDER) | (1 << InceptorOracleParser.KW_GROUP) | (1 << InceptorOracleParser.KW_INCREMENT) | (1 << InceptorOracleParser.KW_BY) | (1 << InceptorOracleParser.KW_HASH) | (1 << InceptorOracleParser.KW_FROM) | (1 << InceptorOracleParser.KW_SELECT) | (1 << InceptorOracleParser.KW_INSERT) | (1 << InceptorOracleParser.KW_BATCH_INSERT) | (1 << InceptorOracleParser.KW_OVERWRITE) | (1 << InceptorOracleParser.KW_OUTER))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (InceptorOracleParser.KW_STREAMJOB - 33)) | (1 << (InceptorOracleParser.KW_STREAMJOBS - 33)) | (1 << (InceptorOracleParser.KW_AT - 33)) | (1 << (InceptorOracleParser.KW_LEFT - 33)) | (1 << (InceptorOracleParser.KW_RIGHT - 33)) | (1 << (InceptorOracleParser.KW_FULL - 33)) | (1 << (InceptorOracleParser.KW_PARTITION - 33)) | (1 << (InceptorOracleParser.KW_PARTITIONS - 33)) | (1 << (InceptorOracleParser.KW_PATTERN - 33)) | (1 << (InceptorOracleParser.KW_TABLE - 33)) | (1 << (InceptorOracleParser.KW_TABLES - 33)) | (1 << (InceptorOracleParser.KW_SEQUENCE - 33)) | (1 << (InceptorOracleParser.KW_SEQUENCES - 33)) | (1 << (InceptorOracleParser.KW_COLUMNS - 33)) | (1 << (InceptorOracleParser.KW_INDEX - 33)) | (1 << (InceptorOracleParser.KW_INDEXES - 33)) | (1 << (InceptorOracleParser.KW_REBUILD - 33)) | (1 << (InceptorOracleParser.KW_FUNCTIONS - 33)) | (1 << (InceptorOracleParser.KW_SHOW - 33)) | (1 << (InceptorOracleParser.KW_MSCK - 33)) | (1 << (InceptorOracleParser.KW_REPAIR - 33)) | (1 << (InceptorOracleParser.KW_DIRECTORY - 33)) | (1 << (InceptorOracleParser.KW_LOCAL - 33)) | (1 << (InceptorOracleParser.KW_GLOBAL - 33)) | (1 << (InceptorOracleParser.KW_USING - 33)) | (1 << (InceptorOracleParser.KW_CLUSTER - 33)) | (1 << (InceptorOracleParser.KW_DISTRIBUTE - 33)) | (1 << (InceptorOracleParser.KW_SORT - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (InceptorOracleParser.KW_UNION - 65)) | (1 << (InceptorOracleParser.KW_LOAD - 65)) | (1 << (InceptorOracleParser.KW_EXPORT - 65)) | (1 << (InceptorOracleParser.KW_IMPORT - 65)) | (1 << (InceptorOracleParser.KW_DATA - 65)) | (1 << (InceptorOracleParser.KW_INPATH - 65)) | (1 << (InceptorOracleParser.KW_IS - 65)) | (1 << (InceptorOracleParser.KW_NULL - 65)) | (1 << (InceptorOracleParser.KW_NULLS - 65)) | (1 << (InceptorOracleParser.KW_CREATE - 65)) | (1 << (InceptorOracleParser.KW_EXTERNAL - 65)) | (1 << (InceptorOracleParser.KW_ALTER - 65)) | (1 << (InceptorOracleParser.KW_CHANGE - 65)) | (1 << (InceptorOracleParser.KW_FIRST - 65)) | (1 << (InceptorOracleParser.KW_LAST - 65)) | (1 << (InceptorOracleParser.KW_AFTER - 65)) | (1 << (InceptorOracleParser.KW_DESCRIBE - 65)) | (1 << (InceptorOracleParser.KW_DROP - 65)) | (1 << (InceptorOracleParser.KW_RENAME - 65)) | (1 << (InceptorOracleParser.KW_IGNORE - 65)) | (1 << (InceptorOracleParser.KW_RESPECT - 65)) | (1 << (InceptorOracleParser.KW_PROTECTION - 65)) | (1 << (InceptorOracleParser.KW_TO - 65)) | (1 << (InceptorOracleParser.KW_COMMENT - 65)) | (1 << (InceptorOracleParser.KW_PROMPT - 65)) | (1 << (InceptorOracleParser.KW_SPOOL - 65)) | (1 << (InceptorOracleParser.KW_BOOLEAN - 65)) | (1 << (InceptorOracleParser.KW_TINYINT - 65)) | (1 << (InceptorOracleParser.KW_BYTE - 65)) | (1 << (InceptorOracleParser.KW_SMALLINT - 65)) | (1 << (InceptorOracleParser.KW_INT - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (InceptorOracleParser.KW_BIGINT - 97)) | (1 << (InceptorOracleParser.KW_FLOAT - 97)) | (1 << (InceptorOracleParser.KW_DOUBLE - 97)) | (1 << (InceptorOracleParser.KW_DATE - 97)) | (1 << (InceptorOracleParser.KW_DATETIME - 97)) | (1 << (InceptorOracleParser.KW_TIMESTAMP - 97)) | (1 << (InceptorOracleParser.KW_TIME - 97)) | (1 << (InceptorOracleParser.KW_DECIMAL - 97)) | (1 << (InceptorOracleParser.KW_STRING - 97)) | (1 << (InceptorOracleParser.KW_GEO - 97)) | (1 << (InceptorOracleParser.KW_ARRAY - 97)) | (1 << (InceptorOracleParser.KW_STRUCT - 97)) | (1 << (InceptorOracleParser.KW_MAP - 97)) | (1 << (InceptorOracleParser.KW_UNIONTYPE - 97)) | (1 << (InceptorOracleParser.KW_REDUCE - 97)) | (1 << (InceptorOracleParser.KW_PARTITIONED - 97)) | (1 << (InceptorOracleParser.KW_ROUTED - 97)) | (1 << (InceptorOracleParser.KW_CLUSTERED - 97)) | (1 << (InceptorOracleParser.KW_SORTED - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (InceptorOracleParser.KW_NEXT - 129)) | (1 << (InceptorOracleParser.KW_NEXTVALUE - 129)) | (1 << (InceptorOracleParser.KW_UNLIMITED - 129)) | (1 << (InceptorOracleParser.KW_WIDCARD - 129)) | (1 << (InceptorOracleParser.KW_BUCKETS - 129)) | (1 << (InceptorOracleParser.KW_ROW - 129)) | (1 << (InceptorOracleParser.KW_ROWS - 129)) | (1 << (InceptorOracleParser.KW_FORMAT - 129)) | (1 << (InceptorOracleParser.KW_DELIMITED - 129)) | (1 << (InceptorOracleParser.KW_FIELDS - 129)) | (1 << (InceptorOracleParser.KW_TERMINATED - 129)) | (1 << (InceptorOracleParser.KW_ESCAPED - 129)) | (1 << (InceptorOracleParser.KW_COLLECTION - 129)) | (1 << (InceptorOracleParser.KW_ITEMS - 129)) | (1 << (InceptorOracleParser.KW_KEYS - 129)) | (1 << (InceptorOracleParser.KW_KEY_TYPE - 129)) | (1 << (InceptorOracleParser.KW_LINES - 129)) | (1 << (InceptorOracleParser.KW_STORED - 129)) | (1 << (InceptorOracleParser.KW_FILEFORMAT - 129)) | (1 << (InceptorOracleParser.KW_SEQUENCEFILE - 129)) | (1 << (InceptorOracleParser.KW_TEXTFILE - 129)) | (1 << (InceptorOracleParser.KW_CSVFILE - 129)) | (1 << (InceptorOracleParser.KW_FWCFILE - 129)) | (1 << (InceptorOracleParser.KW_RCFILE - 129)) | (1 << (InceptorOracleParser.KW_ORCFILE - 129)) | (1 << (InceptorOracleParser.KW_HOLODESK - 129)) | (1 << (InceptorOracleParser.KW_STELLARDB - 129)) | (1 << (InceptorOracleParser.KW_ORCTRANSACTIONFILE - 129)) | (1 << (InceptorOracleParser.KW_PARQUET - 129)))) !== 0) || ((((_la - 161)) & ~0x1f) == 0 && ((1 << (_la - 161)) & ((1 << (InceptorOracleParser.KW_HYPERDRIVE - 161)) | (1 << (InceptorOracleParser.KW_ESDRIVE - 161)) | (1 << (InceptorOracleParser.KW_INPUTFORMAT - 161)) | (1 << (InceptorOracleParser.KW_OUTPUTFORMAT - 161)) | (1 << (InceptorOracleParser.KW_INPUTDRIVER - 161)) | (1 << (InceptorOracleParser.KW_OUTPUTDRIVER - 161)) | (1 << (InceptorOracleParser.KW_OFFLINE - 161)) | (1 << (InceptorOracleParser.KW_ENABLE - 161)) | (1 << (InceptorOracleParser.KW_DISABLE - 161)) | (1 << (InceptorOracleParser.KW_READONLY - 161)) | (1 << (InceptorOracleParser.KW_NO_DROP - 161)) | (1 << (InceptorOracleParser.KW_LOCATION - 161)) | (1 << (InceptorOracleParser.KW_BUCKET - 161)) | (1 << (InceptorOracleParser.KW_OUT - 161)) | (1 << (InceptorOracleParser.KW_OF - 161)) | (1 << (InceptorOracleParser.KW_PERCENT - 161)) | (1 << (InceptorOracleParser.KW_CAST - 161)) | (1 << (InceptorOracleParser.KW_ADD - 161)) | (1 << (InceptorOracleParser.KW_REPLACE - 161)) | (1 << (InceptorOracleParser.KW_RLIKE - 161)) | (1 << (InceptorOracleParser.KW_REGEXP - 161)) | (1 << (InceptorOracleParser.KW_TEMPORARY - 161)) | (1 << (InceptorOracleParser.KW_RESOURCE - 161)) | (1 << (InceptorOracleParser.KW_RELOAD - 161)) | (1 << (InceptorOracleParser.KW_EXPLAIN - 161)) | (1 << (InceptorOracleParser.KW_FORMATTED - 161)) | (1 << (InceptorOracleParser.KW_PRETTY - 161)) | (1 << (InceptorOracleParser.KW_DEPENDENCY - 161)))) !== 0) || ((((_la - 193)) & ~0x1f) == 0 && ((1 << (_la - 193)) & ((1 << (InceptorOracleParser.KW_LOGICAL - 193)) | (1 << (InceptorOracleParser.KW_COST - 193)) | (1 << (InceptorOracleParser.KW_SERDE - 193)) | (1 << (InceptorOracleParser.KW_WITH - 193)) | (1 << (InceptorOracleParser.KW_WITHIN - 193)) | (1 << (InceptorOracleParser.KW_DEFERRED - 193)) | (1 << (InceptorOracleParser.KW_SERDEPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_DBPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_LIMIT - 193)) | (1 << (InceptorOracleParser.KW_SET - 193)) | (1 << (InceptorOracleParser.KW_UNSET - 193)) | (1 << (InceptorOracleParser.KW_TBLPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_IDXPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_VALUE_TYPE - 193)) | (1 << (InceptorOracleParser.KW_ELEM_TYPE - 193)) | (1 << (InceptorOracleParser.KW_CASE - 193)) | (1 << (InceptorOracleParser.KW_GOTO - 193)) | (1 << (InceptorOracleParser.KW_EXIT - 193)) | (1 << (InceptorOracleParser.KW_OPEN - 193)) | (1 << (InceptorOracleParser.KW_CLOSE - 193)) | (1 << (InceptorOracleParser.KW_PRIOR - 193)) | (1 << (InceptorOracleParser.KW_NOCYCLE - 193)) | (1 << (InceptorOracleParser.KW_MAPJOIN - 193)) | (1 << (InceptorOracleParser.KW_COMBINE - 193)) | (1 << (InceptorOracleParser.KW_COMBINE_STRUCT_INDEX - 193)) | (1 << (InceptorOracleParser.KW_GLKJOIN - 193)) | (1 << (InceptorOracleParser.KW_USE_INDEX - 193)))) !== 0) || ((((_la - 225)) & ~0x1f) == 0 && ((1 << (_la - 225)) & ((1 << (InceptorOracleParser.KW_STARGATE - 225)) | (1 << (InceptorOracleParser.KW_USE_BULKLOAD - 225)) | (1 << (InceptorOracleParser.KW_ADHOC - 225)) | (1 << (InceptorOracleParser.KW_PRECOMPILE - 225)) | (1 << (InceptorOracleParser.KW_STREAMTABLE - 225)) | (1 << (InceptorOracleParser.KW_STREAM - 225)) | (1 << (InceptorOracleParser.KW_RULEBASE - 225)) | (1 << (InceptorOracleParser.KW_RULEBASES - 225)) | (1 << (InceptorOracleParser.KW_RULE - 225)) | (1 << (InceptorOracleParser.KW_RULES - 225)) | (1 << (InceptorOracleParser.KW_MEET - 225)) | (1 << (InceptorOracleParser.KW_MUST - 225)) | (1 << (InceptorOracleParser.KW_MUSTNOT - 225)) | (1 << (InceptorOracleParser.KW_POLICY - 225)) | (1 << (InceptorOracleParser.KW_POLICIES - 225)) | (1 << (InceptorOracleParser.KW_REMOVE - 225)) | (1 << (InceptorOracleParser.KW_POLICYKEY - 225)) | (1 << (InceptorOracleParser.KW_POLICY_RULE - 225)) | (1 << (InceptorOracleParser.KW_LOOKUP - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTION - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTIONS - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTION_PROPERTIES - 225)) | (1 << (InceptorOracleParser.KW_HOLD_DDLTIME - 225)) | (1 << (InceptorOracleParser.KW_CLUSTERSTATUS - 225)))) !== 0) || ((((_la - 257)) & ~0x1f) == 0 && ((1 << (_la - 257)) & ((1 << (InceptorOracleParser.KW_UTC - 257)) | (1 << (InceptorOracleParser.KW_UTCTIMESTAMP - 257)) | (1 << (InceptorOracleParser.KW_LONG - 257)) | (1 << (InceptorOracleParser.KW_DELETE - 257)) | (1 << (InceptorOracleParser.KW_PLUS - 257)) | (1 << (InceptorOracleParser.KW_MINUS - 257)) | (1 << (InceptorOracleParser.KW_OP_CONCAT - 257)) | (1 << (InceptorOracleParser.KW_FETCH - 257)) | (1 << (InceptorOracleParser.KW_INTERSECT - 257)) | (1 << (InceptorOracleParser.KW_VIEW - 257)) | (1 << (InceptorOracleParser.KW_IN - 257)) | (1 << (InceptorOracleParser.KW_DATABASES - 257)) | (1 << (InceptorOracleParser.KW_MATERIALIZED - 257)) | (1 << (InceptorOracleParser.KW_SCHEMA - 257)) | (1 << (InceptorOracleParser.KW_SCHEMAS - 257)) | (1 << (InceptorOracleParser.KW_GRANT - 257)) | (1 << (InceptorOracleParser.KW_REVOKE - 257)) | (1 << (InceptorOracleParser.KW_SSL - 257)) | (1 << (InceptorOracleParser.KW_UNDO - 257)) | (1 << (InceptorOracleParser.KW_LOCK - 257)) | (1 << (InceptorOracleParser.KW_LOCKS - 257)) | (1 << (InceptorOracleParser.KW_UNLOCK - 257)) | (1 << (InceptorOracleParser.KW_SHARED - 257)) | (1 << (InceptorOracleParser.KW_EXCLUSIVE - 257)) | (1 << (InceptorOracleParser.KW_PROCEDURE - 257)) | (1 << (InceptorOracleParser.KW_UNSIGNED - 257)) | (1 << (InceptorOracleParser.KW_WHILE - 257)) | (1 << (InceptorOracleParser.KW_READ - 257)) | (1 << (InceptorOracleParser.KW_READS - 257)))) !== 0) || ((((_la - 289)) & ~0x1f) == 0 && ((1 << (_la - 289)) & ((1 << (InceptorOracleParser.KW_PURGE - 289)) | (1 << (InceptorOracleParser.KW_RANGE - 289)) | (1 << (InceptorOracleParser.KW_ANALYZE - 289)) | (1 << (InceptorOracleParser.KW_BEFORE - 289)) | (1 << (InceptorOracleParser.KW_BETWEEN - 289)) | (1 << (InceptorOracleParser.KW_BOTH - 289)) | (1 << (InceptorOracleParser.KW_BINARY - 289)) | (1 << (InceptorOracleParser.KW_DEFAULT - 289)) | (1 << (InceptorOracleParser.KW_TYPE - 289)) | (1 << (InceptorOracleParser.KW_TRIGGER - 289)) | (1 << (InceptorOracleParser.KW_RECORDREADER - 289)) | (1 << (InceptorOracleParser.KW_RECORDWRITER - 289)) | (1 << (InceptorOracleParser.KW_SEMI - 289)) | (1 << (InceptorOracleParser.KW_LATERAL - 289)) | (1 << (InceptorOracleParser.KW_TOUCH - 289)) | (1 << (InceptorOracleParser.KW_ARCHIVE - 289)) | (1 << (InceptorOracleParser.KW_UNARCHIVE - 289)) | (1 << (InceptorOracleParser.KW_COMPUTE - 289)) | (1 << (InceptorOracleParser.KW_STATISTICS - 289)) | (1 << (InceptorOracleParser.KW_USE - 289)) | (1 << (InceptorOracleParser.KW_OPTION - 289)) | (1 << (InceptorOracleParser.KW_CONCATENATE - 289)) | (1 << (InceptorOracleParser.KW_SHOW_DATABASE - 289)) | (1 << (InceptorOracleParser.KW_UPDATE - 289)) | (1 << (InceptorOracleParser.KW_BATCHUPDATE - 289)) | (1 << (InceptorOracleParser.KW_RESTRICT - 289)) | (1 << (InceptorOracleParser.KW_CASCADE - 289)) | (1 << (InceptorOracleParser.KW_SKEWED - 289)))) !== 0) || ((((_la - 323)) & ~0x1f) == 0 && ((1 << (_la - 323)) & ((1 << (InceptorOracleParser.KW_DIRECTORIES - 323)) | (1 << (InceptorOracleParser.KW_FOR - 323)) | (1 << (InceptorOracleParser.KW_LOOP - 323)) | (1 << (InceptorOracleParser.KW_WINDOWRESET - 323)) | (1 << (InceptorOracleParser.KW_SESSIONSTART - 323)) | (1 << (InceptorOracleParser.KW_SESSIONSTOP - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE_DISCARD - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE_COMPLETE - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOW - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOWSLIDELENGTH - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOWSEPARATED - 323)) | (1 << (InceptorOracleParser.KW_FOLLOWEDBY - 323)) | (1 << (InceptorOracleParser.KW_NOTFOLLOWEDBY - 323)) | (1 << (InceptorOracleParser.KW_NOTNEXT - 323)) | (1 << (InceptorOracleParser.KW_PATTERN_TIMES - 323)) | (1 << (InceptorOracleParser.KW_CURRVALUE - 323)) | (1 << (InceptorOracleParser.KW_GROUPING - 323)) | (1 << (InceptorOracleParser.KW_SETS - 323)))) !== 0) || ((((_la - 355)) & ~0x1f) == 0 && ((1 << (_la - 355)) & ((1 << (InceptorOracleParser.KW_TRUNCATE - 355)) | (1 << (InceptorOracleParser.KW_NOSCAN - 355)) | (1 << (InceptorOracleParser.KW_USER - 355)) | (1 << (InceptorOracleParser.KW_QUOTA - 355)) | (1 << (InceptorOracleParser.KW_PERMISSION - 355)) | (1 << (InceptorOracleParser.KW_ROLE - 355)) | (1 << (InceptorOracleParser.KW_ROLES - 355)) | (1 << (InceptorOracleParser.KW_INNER - 355)) | (1 << (InceptorOracleParser.KW_ADMIN - 355)) | (1 << (InceptorOracleParser.KW_OWNER - 355)) | (1 << (InceptorOracleParser.KW_PRINCIPALS - 355)) | (1 << (InceptorOracleParser.KW_RETURN - 355)) | (1 << (InceptorOracleParser.KW_CONTINUE - 355)) | (1 << (InceptorOracleParser.KW_BEGIN - 355)) | (1 << (InceptorOracleParser.KW_DECLARE - 355)) | (1 << (InceptorOracleParser.KW_CONSTANT - 355)) | (1 << (InceptorOracleParser.KW_CONSTRAINT - 355)) | (1 << (InceptorOracleParser.KW_VALUES - 355)) | (1 << (InceptorOracleParser.KW_YEAR - 355)) | (1 << (InceptorOracleParser.KW_MONTH - 355)) | (1 << (InceptorOracleParser.KW_DAY - 355)) | (1 << (InceptorOracleParser.KW_MINUTE - 355)) | (1 << (InceptorOracleParser.KW_HOUR - 355)))) !== 0) || ((((_la - 387)) & ~0x1f) == 0 && ((1 << (_la - 387)) & ((1 << (InceptorOracleParser.KW_SECOND - 387)) | (1 << (InceptorOracleParser.KW_INTERVAL - 387)) | (1 << (InceptorOracleParser.KW_EXTRACT - 387)) | (1 << (InceptorOracleParser.KW_SUBSTRING - 387)) | (1 << (InceptorOracleParser.KW_SYSDATE - 387)) | (1 << (InceptorOracleParser.KW_SYSTIMESTAMP - 387)) | (1 << (InceptorOracleParser.KW_SYSTIME - 387)) | (1 << (InceptorOracleParser.KW_EXEC - 387)) | (1 << (InceptorOracleParser.KW_MAXVALUE - 387)) | (1 << (InceptorOracleParser.KW_NOMAXVALUE - 387)) | (1 << (InceptorOracleParser.KW_MINVALUE - 387)) | (1 << (InceptorOracleParser.KW_NOMINVALUE - 387)) | (1 << (InceptorOracleParser.KW_CYCLE - 387)) | (1 << (InceptorOracleParser.KW_CACHE - 387)) | (1 << (InceptorOracleParser.KW_CACHEDMETRIC - 387)) | (1 << (InceptorOracleParser.KW_CACHEDMETRICS - 387)) | (1 << (InceptorOracleParser.KW_NOCACHE - 387)) | (1 << (InceptorOracleParser.KW_NOORDER - 387)) | (1 << (InceptorOracleParser.KW_MERGE - 387)) | (1 << (InceptorOracleParser.KW_PLANT - 387)) | (1 << (InceptorOracleParser.KW_IMMEDIATE - 387)) | (1 << (InceptorOracleParser.KW_COMPACT - 387)) | (1 << (InceptorOracleParser.KW_START - 387)) | (1 << (InceptorOracleParser.KW_STOP - 387)) | (1 << (InceptorOracleParser.KW_LIST - 387)))) !== 0) || ((((_la - 419)) & ~0x1f) == 0 && ((1 << (_la - 419)) & ((1 << (InceptorOracleParser.KW_TRANSACTION - 419)) | (1 << (InceptorOracleParser.KW_COMMIT - 419)) | (1 << (InceptorOracleParser.KW_ROLLBACK - 419)) | (1 << (InceptorOracleParser.KW_WORK - 419)) | (1 << (InceptorOracleParser.KW_SPACE - 419)) | (1 << (InceptorOracleParser.KW_CONF - 419)) | (1 << (InceptorOracleParser.KW_DEFINED - 419)) | (1 << (InceptorOracleParser.KW_INTEGER - 419)) | (1 << (InceptorOracleParser.KW_ONLY - 419)) | (1 << (InceptorOracleParser.KW_SERVER - 419)) | (1 << (InceptorOracleParser.KW_TRANSACTIONS - 419)) | (1 << (InceptorOracleParser.KW_URI - 419)) | (1 << (InceptorOracleParser.KW_WRITE - 419)) | (1 << (InceptorOracleParser.KW_FACL - 419)) | (1 << (InceptorOracleParser.KW_FOUND - 419)) | (1 << (InceptorOracleParser.KW_LEVEL - 419)) | (1 << (InceptorOracleParser.KW_PUBLIC - 419)) | (1 << (InceptorOracleParser.KW_LINKS - 419)) | (1 << (InceptorOracleParser.KW_CONNECT - 419)) | (1 << (InceptorOracleParser.KW_APPLICATION - 419)) | (1 << (InceptorOracleParser.KW_APPLICATIONS - 419)) | (1 << (InceptorOracleParser.KW_APP - 419)) | (1 << (InceptorOracleParser.KW_APPS - 419)) | (1 << (InceptorOracleParser.KW_INFINITE - 419)))) !== 0) || ((((_la - 451)) & ~0x1f) == 0 && ((1 << (_la - 451)) & ((1 << (InceptorOracleParser.KW_WAIT - 451)) | (1 << (InceptorOracleParser.KW_PRIMARY - 451)) | (1 << (InceptorOracleParser.KW_FOREIGN - 451)) | (1 << (InceptorOracleParser.KW_REFERENCES - 451)) | (1 << (InceptorOracleParser.KW_VALIDATE - 451)) | (1 << (InceptorOracleParser.KW_NOVALIDATE - 451)) | (1 << (InceptorOracleParser.KW_RELY - 451)) | (1 << (InceptorOracleParser.KW_NORELY - 451)) | (1 << (InceptorOracleParser.KW_KEY - 451)) | (1 << (InceptorOracleParser.KW_SEGMENT - 451)) | (1 << (InceptorOracleParser.KW_LENGTH - 451)) | (1 << (InceptorOracleParser.KW_ATTACH - 451)) | (1 << (InceptorOracleParser.KW_DETTACH - 451)) | (1 << (InceptorOracleParser.KW_SHARD - 451)) | (1 << (InceptorOracleParser.KW_NUM - 451)) | (1 << (InceptorOracleParser.KW_FULLTEXT - 451)) | (1 << (InceptorOracleParser.KW_TABLESIZE - 451)) | (1 << (InceptorOracleParser.KW_TABLET - 451)) | (1 << (InceptorOracleParser.KW_CAPACITY - 451)) | (1 << (InceptorOracleParser.KW_ANALYZER - 451)) | (1 << (InceptorOracleParser.KW_SYNC - 451)) | (1 << (InceptorOracleParser.KW_NO_INDEX - 451)) | (1 << (InceptorOracleParser.KW_LOG - 451)) | (1 << (InceptorOracleParser.KW_FILE - 451)) | (1 << (InceptorOracleParser.KW_JAR - 451)) | (1 << (InceptorOracleParser.KW_PERMANENT - 451)))) !== 0) || ((((_la - 485)) & ~0x1f) == 0 && ((1 << (_la - 485)) & ((1 << (InceptorOracleParser.KW_SCHEDULER - 485)) | (1 << (InceptorOracleParser.KW_MODE - 485)) | (1 << (InceptorOracleParser.LPAREN - 485)) | (1 << (InceptorOracleParser.DOUBLELESSTHAN - 485)))) !== 0) || ((((_la - 528)) & ~0x1f) == 0 && ((1 << (_la - 528)) & ((1 << (InceptorOracleParser.StringLiteral - 528)) | (1 << (InceptorOracleParser.CharSetLiteral - 528)) | (1 << (InceptorOracleParser.BigintLiteral - 528)) | (1 << (InceptorOracleParser.SmallintLiteral - 528)) | (1 << (InceptorOracleParser.TinyintLiteral - 528)) | (1 << (InceptorOracleParser.DecimalLiteral - 528)) | (1 << (InceptorOracleParser.Number - 528)) | (1 << (InceptorOracleParser.Identifier - 528)) | (1 << (InceptorOracleParser.CharSetName - 528)) | (1 << (InceptorOracleParser.HINT_LEFT - 528)) | (1 << (InceptorOracleParser.KW_NOCOPY - 528)) | (1 << (InceptorOracleParser.KW_VARRAY - 528)) | (1 << (InceptorOracleParser.KW_PACKAGE - 528)) | (1 << (InceptorOracleParser.KW_PACKAGES - 528)) | (1 << (InceptorOracleParser.KW_BODY - 528)) | (1 << (InceptorOracleParser.KW_ISOPEN - 528)) | (1 << (InceptorOracleParser.KW_NOTFOUND - 528)) | (1 << (InceptorOracleParser.KW_ROWCOUNT - 528)) | (1 << (InceptorOracleParser.KW_BULK_ROWCOUNT - 528)) | (1 << (InceptorOracleParser.KW_BULK_EXCEPTIONS - 528)) | (1 << (InceptorOracleParser.KW_REVERSE - 528)) | (1 << (InceptorOracleParser.KW_FORALL - 528)) | (1 << (InceptorOracleParser.KW_SAVE - 528)) | (1 << (InceptorOracleParser.KW_EXCEPTIONS - 528)))) !== 0) || ((((_la - 560)) & ~0x1f) == 0 && ((1 << (_la - 560)) & ((1 << (InceptorOracleParser.KW_INDICES - 560)) | (1 << (InceptorOracleParser.KW_REF - 560)) | (1 << (InceptorOracleParser.KW_RAISE - 560)) | (1 << (InceptorOracleParser.KW_YEARS - 560)) | (1 << (InceptorOracleParser.KW_MONTHS - 560)) | (1 << (InceptorOracleParser.KW_DAYS - 560)) | (1 << (InceptorOracleParser.KW_HOURS - 560)) | (1 << (InceptorOracleParser.KW_MINUTES - 560)) | (1 << (InceptorOracleParser.KW_SECONDS - 560)))) !== 0)) {
	            this.state = 7339;
	            this.labeledStatement();
	            this.state = 7344;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elseStatement() {
	    let localctx = new ElseStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1330, InceptorOracleParser.RULE_elseStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7345;
	        this.match(InceptorOracleParser.KW_ELSE);
	        this.state = 7349;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << InceptorOracleParser.KW_TRUE) | (1 << InceptorOracleParser.KW_FALSE) | (1 << InceptorOracleParser.KW_ALL) | (1 << InceptorOracleParser.KW_LIKE) | (1 << InceptorOracleParser.KW_NO) | (1 << InceptorOracleParser.KW_ANY) | (1 << InceptorOracleParser.KW_IF) | (1 << InceptorOracleParser.KW_EXISTS) | (1 << InceptorOracleParser.KW_ASC) | (1 << InceptorOracleParser.KW_DESC) | (1 << InceptorOracleParser.KW_ORDER) | (1 << InceptorOracleParser.KW_GROUP) | (1 << InceptorOracleParser.KW_INCREMENT) | (1 << InceptorOracleParser.KW_BY) | (1 << InceptorOracleParser.KW_HASH) | (1 << InceptorOracleParser.KW_FROM) | (1 << InceptorOracleParser.KW_SELECT) | (1 << InceptorOracleParser.KW_INSERT) | (1 << InceptorOracleParser.KW_BATCH_INSERT) | (1 << InceptorOracleParser.KW_OVERWRITE) | (1 << InceptorOracleParser.KW_OUTER))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (InceptorOracleParser.KW_STREAMJOB - 33)) | (1 << (InceptorOracleParser.KW_STREAMJOBS - 33)) | (1 << (InceptorOracleParser.KW_AT - 33)) | (1 << (InceptorOracleParser.KW_LEFT - 33)) | (1 << (InceptorOracleParser.KW_RIGHT - 33)) | (1 << (InceptorOracleParser.KW_FULL - 33)) | (1 << (InceptorOracleParser.KW_PARTITION - 33)) | (1 << (InceptorOracleParser.KW_PARTITIONS - 33)) | (1 << (InceptorOracleParser.KW_PATTERN - 33)) | (1 << (InceptorOracleParser.KW_TABLE - 33)) | (1 << (InceptorOracleParser.KW_TABLES - 33)) | (1 << (InceptorOracleParser.KW_SEQUENCE - 33)) | (1 << (InceptorOracleParser.KW_SEQUENCES - 33)) | (1 << (InceptorOracleParser.KW_COLUMNS - 33)) | (1 << (InceptorOracleParser.KW_INDEX - 33)) | (1 << (InceptorOracleParser.KW_INDEXES - 33)) | (1 << (InceptorOracleParser.KW_REBUILD - 33)) | (1 << (InceptorOracleParser.KW_FUNCTIONS - 33)) | (1 << (InceptorOracleParser.KW_SHOW - 33)) | (1 << (InceptorOracleParser.KW_MSCK - 33)) | (1 << (InceptorOracleParser.KW_REPAIR - 33)) | (1 << (InceptorOracleParser.KW_DIRECTORY - 33)) | (1 << (InceptorOracleParser.KW_LOCAL - 33)) | (1 << (InceptorOracleParser.KW_GLOBAL - 33)) | (1 << (InceptorOracleParser.KW_USING - 33)) | (1 << (InceptorOracleParser.KW_CLUSTER - 33)) | (1 << (InceptorOracleParser.KW_DISTRIBUTE - 33)) | (1 << (InceptorOracleParser.KW_SORT - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (InceptorOracleParser.KW_UNION - 65)) | (1 << (InceptorOracleParser.KW_LOAD - 65)) | (1 << (InceptorOracleParser.KW_EXPORT - 65)) | (1 << (InceptorOracleParser.KW_IMPORT - 65)) | (1 << (InceptorOracleParser.KW_DATA - 65)) | (1 << (InceptorOracleParser.KW_INPATH - 65)) | (1 << (InceptorOracleParser.KW_IS - 65)) | (1 << (InceptorOracleParser.KW_NULL - 65)) | (1 << (InceptorOracleParser.KW_NULLS - 65)) | (1 << (InceptorOracleParser.KW_CREATE - 65)) | (1 << (InceptorOracleParser.KW_EXTERNAL - 65)) | (1 << (InceptorOracleParser.KW_ALTER - 65)) | (1 << (InceptorOracleParser.KW_CHANGE - 65)) | (1 << (InceptorOracleParser.KW_FIRST - 65)) | (1 << (InceptorOracleParser.KW_LAST - 65)) | (1 << (InceptorOracleParser.KW_AFTER - 65)) | (1 << (InceptorOracleParser.KW_DESCRIBE - 65)) | (1 << (InceptorOracleParser.KW_DROP - 65)) | (1 << (InceptorOracleParser.KW_RENAME - 65)) | (1 << (InceptorOracleParser.KW_IGNORE - 65)) | (1 << (InceptorOracleParser.KW_RESPECT - 65)) | (1 << (InceptorOracleParser.KW_PROTECTION - 65)) | (1 << (InceptorOracleParser.KW_TO - 65)) | (1 << (InceptorOracleParser.KW_COMMENT - 65)) | (1 << (InceptorOracleParser.KW_PROMPT - 65)) | (1 << (InceptorOracleParser.KW_SPOOL - 65)) | (1 << (InceptorOracleParser.KW_BOOLEAN - 65)) | (1 << (InceptorOracleParser.KW_TINYINT - 65)) | (1 << (InceptorOracleParser.KW_BYTE - 65)) | (1 << (InceptorOracleParser.KW_SMALLINT - 65)) | (1 << (InceptorOracleParser.KW_INT - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (InceptorOracleParser.KW_BIGINT - 97)) | (1 << (InceptorOracleParser.KW_FLOAT - 97)) | (1 << (InceptorOracleParser.KW_DOUBLE - 97)) | (1 << (InceptorOracleParser.KW_DATE - 97)) | (1 << (InceptorOracleParser.KW_DATETIME - 97)) | (1 << (InceptorOracleParser.KW_TIMESTAMP - 97)) | (1 << (InceptorOracleParser.KW_TIME - 97)) | (1 << (InceptorOracleParser.KW_DECIMAL - 97)) | (1 << (InceptorOracleParser.KW_STRING - 97)) | (1 << (InceptorOracleParser.KW_GEO - 97)) | (1 << (InceptorOracleParser.KW_ARRAY - 97)) | (1 << (InceptorOracleParser.KW_STRUCT - 97)) | (1 << (InceptorOracleParser.KW_MAP - 97)) | (1 << (InceptorOracleParser.KW_UNIONTYPE - 97)) | (1 << (InceptorOracleParser.KW_REDUCE - 97)) | (1 << (InceptorOracleParser.KW_PARTITIONED - 97)) | (1 << (InceptorOracleParser.KW_ROUTED - 97)) | (1 << (InceptorOracleParser.KW_CLUSTERED - 97)) | (1 << (InceptorOracleParser.KW_SORTED - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (InceptorOracleParser.KW_NEXT - 129)) | (1 << (InceptorOracleParser.KW_NEXTVALUE - 129)) | (1 << (InceptorOracleParser.KW_UNLIMITED - 129)) | (1 << (InceptorOracleParser.KW_WIDCARD - 129)) | (1 << (InceptorOracleParser.KW_BUCKETS - 129)) | (1 << (InceptorOracleParser.KW_ROW - 129)) | (1 << (InceptorOracleParser.KW_ROWS - 129)) | (1 << (InceptorOracleParser.KW_FORMAT - 129)) | (1 << (InceptorOracleParser.KW_DELIMITED - 129)) | (1 << (InceptorOracleParser.KW_FIELDS - 129)) | (1 << (InceptorOracleParser.KW_TERMINATED - 129)) | (1 << (InceptorOracleParser.KW_ESCAPED - 129)) | (1 << (InceptorOracleParser.KW_COLLECTION - 129)) | (1 << (InceptorOracleParser.KW_ITEMS - 129)) | (1 << (InceptorOracleParser.KW_KEYS - 129)) | (1 << (InceptorOracleParser.KW_KEY_TYPE - 129)) | (1 << (InceptorOracleParser.KW_LINES - 129)) | (1 << (InceptorOracleParser.KW_STORED - 129)) | (1 << (InceptorOracleParser.KW_FILEFORMAT - 129)) | (1 << (InceptorOracleParser.KW_SEQUENCEFILE - 129)) | (1 << (InceptorOracleParser.KW_TEXTFILE - 129)) | (1 << (InceptorOracleParser.KW_CSVFILE - 129)) | (1 << (InceptorOracleParser.KW_FWCFILE - 129)) | (1 << (InceptorOracleParser.KW_RCFILE - 129)) | (1 << (InceptorOracleParser.KW_ORCFILE - 129)) | (1 << (InceptorOracleParser.KW_HOLODESK - 129)) | (1 << (InceptorOracleParser.KW_STELLARDB - 129)) | (1 << (InceptorOracleParser.KW_ORCTRANSACTIONFILE - 129)) | (1 << (InceptorOracleParser.KW_PARQUET - 129)))) !== 0) || ((((_la - 161)) & ~0x1f) == 0 && ((1 << (_la - 161)) & ((1 << (InceptorOracleParser.KW_HYPERDRIVE - 161)) | (1 << (InceptorOracleParser.KW_ESDRIVE - 161)) | (1 << (InceptorOracleParser.KW_INPUTFORMAT - 161)) | (1 << (InceptorOracleParser.KW_OUTPUTFORMAT - 161)) | (1 << (InceptorOracleParser.KW_INPUTDRIVER - 161)) | (1 << (InceptorOracleParser.KW_OUTPUTDRIVER - 161)) | (1 << (InceptorOracleParser.KW_OFFLINE - 161)) | (1 << (InceptorOracleParser.KW_ENABLE - 161)) | (1 << (InceptorOracleParser.KW_DISABLE - 161)) | (1 << (InceptorOracleParser.KW_READONLY - 161)) | (1 << (InceptorOracleParser.KW_NO_DROP - 161)) | (1 << (InceptorOracleParser.KW_LOCATION - 161)) | (1 << (InceptorOracleParser.KW_BUCKET - 161)) | (1 << (InceptorOracleParser.KW_OUT - 161)) | (1 << (InceptorOracleParser.KW_OF - 161)) | (1 << (InceptorOracleParser.KW_PERCENT - 161)) | (1 << (InceptorOracleParser.KW_CAST - 161)) | (1 << (InceptorOracleParser.KW_ADD - 161)) | (1 << (InceptorOracleParser.KW_REPLACE - 161)) | (1 << (InceptorOracleParser.KW_RLIKE - 161)) | (1 << (InceptorOracleParser.KW_REGEXP - 161)) | (1 << (InceptorOracleParser.KW_TEMPORARY - 161)) | (1 << (InceptorOracleParser.KW_RESOURCE - 161)) | (1 << (InceptorOracleParser.KW_RELOAD - 161)) | (1 << (InceptorOracleParser.KW_EXPLAIN - 161)) | (1 << (InceptorOracleParser.KW_FORMATTED - 161)) | (1 << (InceptorOracleParser.KW_PRETTY - 161)) | (1 << (InceptorOracleParser.KW_DEPENDENCY - 161)))) !== 0) || ((((_la - 193)) & ~0x1f) == 0 && ((1 << (_la - 193)) & ((1 << (InceptorOracleParser.KW_LOGICAL - 193)) | (1 << (InceptorOracleParser.KW_COST - 193)) | (1 << (InceptorOracleParser.KW_SERDE - 193)) | (1 << (InceptorOracleParser.KW_WITH - 193)) | (1 << (InceptorOracleParser.KW_WITHIN - 193)) | (1 << (InceptorOracleParser.KW_DEFERRED - 193)) | (1 << (InceptorOracleParser.KW_SERDEPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_DBPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_LIMIT - 193)) | (1 << (InceptorOracleParser.KW_SET - 193)) | (1 << (InceptorOracleParser.KW_UNSET - 193)) | (1 << (InceptorOracleParser.KW_TBLPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_IDXPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_VALUE_TYPE - 193)) | (1 << (InceptorOracleParser.KW_ELEM_TYPE - 193)) | (1 << (InceptorOracleParser.KW_CASE - 193)) | (1 << (InceptorOracleParser.KW_GOTO - 193)) | (1 << (InceptorOracleParser.KW_EXIT - 193)) | (1 << (InceptorOracleParser.KW_OPEN - 193)) | (1 << (InceptorOracleParser.KW_CLOSE - 193)) | (1 << (InceptorOracleParser.KW_PRIOR - 193)) | (1 << (InceptorOracleParser.KW_NOCYCLE - 193)) | (1 << (InceptorOracleParser.KW_MAPJOIN - 193)) | (1 << (InceptorOracleParser.KW_COMBINE - 193)) | (1 << (InceptorOracleParser.KW_COMBINE_STRUCT_INDEX - 193)) | (1 << (InceptorOracleParser.KW_GLKJOIN - 193)) | (1 << (InceptorOracleParser.KW_USE_INDEX - 193)))) !== 0) || ((((_la - 225)) & ~0x1f) == 0 && ((1 << (_la - 225)) & ((1 << (InceptorOracleParser.KW_STARGATE - 225)) | (1 << (InceptorOracleParser.KW_USE_BULKLOAD - 225)) | (1 << (InceptorOracleParser.KW_ADHOC - 225)) | (1 << (InceptorOracleParser.KW_PRECOMPILE - 225)) | (1 << (InceptorOracleParser.KW_STREAMTABLE - 225)) | (1 << (InceptorOracleParser.KW_STREAM - 225)) | (1 << (InceptorOracleParser.KW_RULEBASE - 225)) | (1 << (InceptorOracleParser.KW_RULEBASES - 225)) | (1 << (InceptorOracleParser.KW_RULE - 225)) | (1 << (InceptorOracleParser.KW_RULES - 225)) | (1 << (InceptorOracleParser.KW_MEET - 225)) | (1 << (InceptorOracleParser.KW_MUST - 225)) | (1 << (InceptorOracleParser.KW_MUSTNOT - 225)) | (1 << (InceptorOracleParser.KW_POLICY - 225)) | (1 << (InceptorOracleParser.KW_POLICIES - 225)) | (1 << (InceptorOracleParser.KW_REMOVE - 225)) | (1 << (InceptorOracleParser.KW_POLICYKEY - 225)) | (1 << (InceptorOracleParser.KW_POLICY_RULE - 225)) | (1 << (InceptorOracleParser.KW_LOOKUP - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTION - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTIONS - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTION_PROPERTIES - 225)) | (1 << (InceptorOracleParser.KW_HOLD_DDLTIME - 225)) | (1 << (InceptorOracleParser.KW_CLUSTERSTATUS - 225)))) !== 0) || ((((_la - 257)) & ~0x1f) == 0 && ((1 << (_la - 257)) & ((1 << (InceptorOracleParser.KW_UTC - 257)) | (1 << (InceptorOracleParser.KW_UTCTIMESTAMP - 257)) | (1 << (InceptorOracleParser.KW_LONG - 257)) | (1 << (InceptorOracleParser.KW_DELETE - 257)) | (1 << (InceptorOracleParser.KW_PLUS - 257)) | (1 << (InceptorOracleParser.KW_MINUS - 257)) | (1 << (InceptorOracleParser.KW_OP_CONCAT - 257)) | (1 << (InceptorOracleParser.KW_FETCH - 257)) | (1 << (InceptorOracleParser.KW_INTERSECT - 257)) | (1 << (InceptorOracleParser.KW_VIEW - 257)) | (1 << (InceptorOracleParser.KW_IN - 257)) | (1 << (InceptorOracleParser.KW_DATABASES - 257)) | (1 << (InceptorOracleParser.KW_MATERIALIZED - 257)) | (1 << (InceptorOracleParser.KW_SCHEMA - 257)) | (1 << (InceptorOracleParser.KW_SCHEMAS - 257)) | (1 << (InceptorOracleParser.KW_GRANT - 257)) | (1 << (InceptorOracleParser.KW_REVOKE - 257)) | (1 << (InceptorOracleParser.KW_SSL - 257)) | (1 << (InceptorOracleParser.KW_UNDO - 257)) | (1 << (InceptorOracleParser.KW_LOCK - 257)) | (1 << (InceptorOracleParser.KW_LOCKS - 257)) | (1 << (InceptorOracleParser.KW_UNLOCK - 257)) | (1 << (InceptorOracleParser.KW_SHARED - 257)) | (1 << (InceptorOracleParser.KW_EXCLUSIVE - 257)) | (1 << (InceptorOracleParser.KW_PROCEDURE - 257)) | (1 << (InceptorOracleParser.KW_UNSIGNED - 257)) | (1 << (InceptorOracleParser.KW_WHILE - 257)) | (1 << (InceptorOracleParser.KW_READ - 257)) | (1 << (InceptorOracleParser.KW_READS - 257)))) !== 0) || ((((_la - 289)) & ~0x1f) == 0 && ((1 << (_la - 289)) & ((1 << (InceptorOracleParser.KW_PURGE - 289)) | (1 << (InceptorOracleParser.KW_RANGE - 289)) | (1 << (InceptorOracleParser.KW_ANALYZE - 289)) | (1 << (InceptorOracleParser.KW_BEFORE - 289)) | (1 << (InceptorOracleParser.KW_BETWEEN - 289)) | (1 << (InceptorOracleParser.KW_BOTH - 289)) | (1 << (InceptorOracleParser.KW_BINARY - 289)) | (1 << (InceptorOracleParser.KW_DEFAULT - 289)) | (1 << (InceptorOracleParser.KW_TYPE - 289)) | (1 << (InceptorOracleParser.KW_TRIGGER - 289)) | (1 << (InceptorOracleParser.KW_RECORDREADER - 289)) | (1 << (InceptorOracleParser.KW_RECORDWRITER - 289)) | (1 << (InceptorOracleParser.KW_SEMI - 289)) | (1 << (InceptorOracleParser.KW_LATERAL - 289)) | (1 << (InceptorOracleParser.KW_TOUCH - 289)) | (1 << (InceptorOracleParser.KW_ARCHIVE - 289)) | (1 << (InceptorOracleParser.KW_UNARCHIVE - 289)) | (1 << (InceptorOracleParser.KW_COMPUTE - 289)) | (1 << (InceptorOracleParser.KW_STATISTICS - 289)) | (1 << (InceptorOracleParser.KW_USE - 289)) | (1 << (InceptorOracleParser.KW_OPTION - 289)) | (1 << (InceptorOracleParser.KW_CONCATENATE - 289)) | (1 << (InceptorOracleParser.KW_SHOW_DATABASE - 289)) | (1 << (InceptorOracleParser.KW_UPDATE - 289)) | (1 << (InceptorOracleParser.KW_BATCHUPDATE - 289)) | (1 << (InceptorOracleParser.KW_RESTRICT - 289)) | (1 << (InceptorOracleParser.KW_CASCADE - 289)) | (1 << (InceptorOracleParser.KW_SKEWED - 289)))) !== 0) || ((((_la - 323)) & ~0x1f) == 0 && ((1 << (_la - 323)) & ((1 << (InceptorOracleParser.KW_DIRECTORIES - 323)) | (1 << (InceptorOracleParser.KW_FOR - 323)) | (1 << (InceptorOracleParser.KW_LOOP - 323)) | (1 << (InceptorOracleParser.KW_WINDOWRESET - 323)) | (1 << (InceptorOracleParser.KW_SESSIONSTART - 323)) | (1 << (InceptorOracleParser.KW_SESSIONSTOP - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE_DISCARD - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE_COMPLETE - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOW - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOWSLIDELENGTH - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOWSEPARATED - 323)) | (1 << (InceptorOracleParser.KW_FOLLOWEDBY - 323)) | (1 << (InceptorOracleParser.KW_NOTFOLLOWEDBY - 323)) | (1 << (InceptorOracleParser.KW_NOTNEXT - 323)) | (1 << (InceptorOracleParser.KW_PATTERN_TIMES - 323)) | (1 << (InceptorOracleParser.KW_CURRVALUE - 323)) | (1 << (InceptorOracleParser.KW_GROUPING - 323)) | (1 << (InceptorOracleParser.KW_SETS - 323)))) !== 0) || ((((_la - 355)) & ~0x1f) == 0 && ((1 << (_la - 355)) & ((1 << (InceptorOracleParser.KW_TRUNCATE - 355)) | (1 << (InceptorOracleParser.KW_NOSCAN - 355)) | (1 << (InceptorOracleParser.KW_USER - 355)) | (1 << (InceptorOracleParser.KW_QUOTA - 355)) | (1 << (InceptorOracleParser.KW_PERMISSION - 355)) | (1 << (InceptorOracleParser.KW_ROLE - 355)) | (1 << (InceptorOracleParser.KW_ROLES - 355)) | (1 << (InceptorOracleParser.KW_INNER - 355)) | (1 << (InceptorOracleParser.KW_ADMIN - 355)) | (1 << (InceptorOracleParser.KW_OWNER - 355)) | (1 << (InceptorOracleParser.KW_PRINCIPALS - 355)) | (1 << (InceptorOracleParser.KW_RETURN - 355)) | (1 << (InceptorOracleParser.KW_CONTINUE - 355)) | (1 << (InceptorOracleParser.KW_BEGIN - 355)) | (1 << (InceptorOracleParser.KW_DECLARE - 355)) | (1 << (InceptorOracleParser.KW_CONSTANT - 355)) | (1 << (InceptorOracleParser.KW_CONSTRAINT - 355)) | (1 << (InceptorOracleParser.KW_VALUES - 355)) | (1 << (InceptorOracleParser.KW_YEAR - 355)) | (1 << (InceptorOracleParser.KW_MONTH - 355)) | (1 << (InceptorOracleParser.KW_DAY - 355)) | (1 << (InceptorOracleParser.KW_MINUTE - 355)) | (1 << (InceptorOracleParser.KW_HOUR - 355)))) !== 0) || ((((_la - 387)) & ~0x1f) == 0 && ((1 << (_la - 387)) & ((1 << (InceptorOracleParser.KW_SECOND - 387)) | (1 << (InceptorOracleParser.KW_INTERVAL - 387)) | (1 << (InceptorOracleParser.KW_EXTRACT - 387)) | (1 << (InceptorOracleParser.KW_SUBSTRING - 387)) | (1 << (InceptorOracleParser.KW_SYSDATE - 387)) | (1 << (InceptorOracleParser.KW_SYSTIMESTAMP - 387)) | (1 << (InceptorOracleParser.KW_SYSTIME - 387)) | (1 << (InceptorOracleParser.KW_EXEC - 387)) | (1 << (InceptorOracleParser.KW_MAXVALUE - 387)) | (1 << (InceptorOracleParser.KW_NOMAXVALUE - 387)) | (1 << (InceptorOracleParser.KW_MINVALUE - 387)) | (1 << (InceptorOracleParser.KW_NOMINVALUE - 387)) | (1 << (InceptorOracleParser.KW_CYCLE - 387)) | (1 << (InceptorOracleParser.KW_CACHE - 387)) | (1 << (InceptorOracleParser.KW_CACHEDMETRIC - 387)) | (1 << (InceptorOracleParser.KW_CACHEDMETRICS - 387)) | (1 << (InceptorOracleParser.KW_NOCACHE - 387)) | (1 << (InceptorOracleParser.KW_NOORDER - 387)) | (1 << (InceptorOracleParser.KW_MERGE - 387)) | (1 << (InceptorOracleParser.KW_PLANT - 387)) | (1 << (InceptorOracleParser.KW_IMMEDIATE - 387)) | (1 << (InceptorOracleParser.KW_COMPACT - 387)) | (1 << (InceptorOracleParser.KW_START - 387)) | (1 << (InceptorOracleParser.KW_STOP - 387)) | (1 << (InceptorOracleParser.KW_LIST - 387)))) !== 0) || ((((_la - 419)) & ~0x1f) == 0 && ((1 << (_la - 419)) & ((1 << (InceptorOracleParser.KW_TRANSACTION - 419)) | (1 << (InceptorOracleParser.KW_COMMIT - 419)) | (1 << (InceptorOracleParser.KW_ROLLBACK - 419)) | (1 << (InceptorOracleParser.KW_WORK - 419)) | (1 << (InceptorOracleParser.KW_SPACE - 419)) | (1 << (InceptorOracleParser.KW_CONF - 419)) | (1 << (InceptorOracleParser.KW_DEFINED - 419)) | (1 << (InceptorOracleParser.KW_INTEGER - 419)) | (1 << (InceptorOracleParser.KW_ONLY - 419)) | (1 << (InceptorOracleParser.KW_SERVER - 419)) | (1 << (InceptorOracleParser.KW_TRANSACTIONS - 419)) | (1 << (InceptorOracleParser.KW_URI - 419)) | (1 << (InceptorOracleParser.KW_WRITE - 419)) | (1 << (InceptorOracleParser.KW_FACL - 419)) | (1 << (InceptorOracleParser.KW_FOUND - 419)) | (1 << (InceptorOracleParser.KW_LEVEL - 419)) | (1 << (InceptorOracleParser.KW_PUBLIC - 419)) | (1 << (InceptorOracleParser.KW_LINKS - 419)) | (1 << (InceptorOracleParser.KW_CONNECT - 419)) | (1 << (InceptorOracleParser.KW_APPLICATION - 419)) | (1 << (InceptorOracleParser.KW_APPLICATIONS - 419)) | (1 << (InceptorOracleParser.KW_APP - 419)) | (1 << (InceptorOracleParser.KW_APPS - 419)) | (1 << (InceptorOracleParser.KW_INFINITE - 419)))) !== 0) || ((((_la - 451)) & ~0x1f) == 0 && ((1 << (_la - 451)) & ((1 << (InceptorOracleParser.KW_WAIT - 451)) | (1 << (InceptorOracleParser.KW_PRIMARY - 451)) | (1 << (InceptorOracleParser.KW_FOREIGN - 451)) | (1 << (InceptorOracleParser.KW_REFERENCES - 451)) | (1 << (InceptorOracleParser.KW_VALIDATE - 451)) | (1 << (InceptorOracleParser.KW_NOVALIDATE - 451)) | (1 << (InceptorOracleParser.KW_RELY - 451)) | (1 << (InceptorOracleParser.KW_NORELY - 451)) | (1 << (InceptorOracleParser.KW_KEY - 451)) | (1 << (InceptorOracleParser.KW_SEGMENT - 451)) | (1 << (InceptorOracleParser.KW_LENGTH - 451)) | (1 << (InceptorOracleParser.KW_ATTACH - 451)) | (1 << (InceptorOracleParser.KW_DETTACH - 451)) | (1 << (InceptorOracleParser.KW_SHARD - 451)) | (1 << (InceptorOracleParser.KW_NUM - 451)) | (1 << (InceptorOracleParser.KW_FULLTEXT - 451)) | (1 << (InceptorOracleParser.KW_TABLESIZE - 451)) | (1 << (InceptorOracleParser.KW_TABLET - 451)) | (1 << (InceptorOracleParser.KW_CAPACITY - 451)) | (1 << (InceptorOracleParser.KW_ANALYZER - 451)) | (1 << (InceptorOracleParser.KW_SYNC - 451)) | (1 << (InceptorOracleParser.KW_NO_INDEX - 451)) | (1 << (InceptorOracleParser.KW_LOG - 451)) | (1 << (InceptorOracleParser.KW_FILE - 451)) | (1 << (InceptorOracleParser.KW_JAR - 451)) | (1 << (InceptorOracleParser.KW_PERMANENT - 451)))) !== 0) || ((((_la - 485)) & ~0x1f) == 0 && ((1 << (_la - 485)) & ((1 << (InceptorOracleParser.KW_SCHEDULER - 485)) | (1 << (InceptorOracleParser.KW_MODE - 485)) | (1 << (InceptorOracleParser.LPAREN - 485)) | (1 << (InceptorOracleParser.DOUBLELESSTHAN - 485)))) !== 0) || ((((_la - 528)) & ~0x1f) == 0 && ((1 << (_la - 528)) & ((1 << (InceptorOracleParser.StringLiteral - 528)) | (1 << (InceptorOracleParser.CharSetLiteral - 528)) | (1 << (InceptorOracleParser.BigintLiteral - 528)) | (1 << (InceptorOracleParser.SmallintLiteral - 528)) | (1 << (InceptorOracleParser.TinyintLiteral - 528)) | (1 << (InceptorOracleParser.DecimalLiteral - 528)) | (1 << (InceptorOracleParser.Number - 528)) | (1 << (InceptorOracleParser.Identifier - 528)) | (1 << (InceptorOracleParser.CharSetName - 528)) | (1 << (InceptorOracleParser.HINT_LEFT - 528)) | (1 << (InceptorOracleParser.KW_NOCOPY - 528)) | (1 << (InceptorOracleParser.KW_VARRAY - 528)) | (1 << (InceptorOracleParser.KW_PACKAGE - 528)) | (1 << (InceptorOracleParser.KW_PACKAGES - 528)) | (1 << (InceptorOracleParser.KW_BODY - 528)) | (1 << (InceptorOracleParser.KW_ISOPEN - 528)) | (1 << (InceptorOracleParser.KW_NOTFOUND - 528)) | (1 << (InceptorOracleParser.KW_ROWCOUNT - 528)) | (1 << (InceptorOracleParser.KW_BULK_ROWCOUNT - 528)) | (1 << (InceptorOracleParser.KW_BULK_EXCEPTIONS - 528)) | (1 << (InceptorOracleParser.KW_REVERSE - 528)) | (1 << (InceptorOracleParser.KW_FORALL - 528)) | (1 << (InceptorOracleParser.KW_SAVE - 528)) | (1 << (InceptorOracleParser.KW_EXCEPTIONS - 528)))) !== 0) || ((((_la - 560)) & ~0x1f) == 0 && ((1 << (_la - 560)) & ((1 << (InceptorOracleParser.KW_INDICES - 560)) | (1 << (InceptorOracleParser.KW_REF - 560)) | (1 << (InceptorOracleParser.KW_RAISE - 560)) | (1 << (InceptorOracleParser.KW_YEARS - 560)) | (1 << (InceptorOracleParser.KW_MONTHS - 560)) | (1 << (InceptorOracleParser.KW_DAYS - 560)) | (1 << (InceptorOracleParser.KW_HOURS - 560)) | (1 << (InceptorOracleParser.KW_MINUTES - 560)) | (1 << (InceptorOracleParser.KW_SECONDS - 560)))) !== 0)) {
	            this.state = 7346;
	            this.labeledStatement();
	            this.state = 7351;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dialectNonReserved() {
	    let localctx = new DialectNonReservedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1332, InceptorOracleParser.RULE_dialectNonReserved);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7352;
	        _la = this._input.LA(1);
	        if(!(_la===InceptorOracleParser.KW_SET || _la===InceptorOracleParser.KW_VALUES || _la===InceptorOracleParser.KW_SYSDATE || _la===InceptorOracleParser.KW_FOUND || ((((_la - 546)) & ~0x1f) == 0 && ((1 << (_la - 546)) & ((1 << (InceptorOracleParser.KW_NOCOPY - 546)) | (1 << (InceptorOracleParser.KW_VARRAY - 546)) | (1 << (InceptorOracleParser.KW_PACKAGE - 546)) | (1 << (InceptorOracleParser.KW_PACKAGES - 546)) | (1 << (InceptorOracleParser.KW_BODY - 546)) | (1 << (InceptorOracleParser.KW_ISOPEN - 546)) | (1 << (InceptorOracleParser.KW_NOTFOUND - 546)) | (1 << (InceptorOracleParser.KW_ROWCOUNT - 546)) | (1 << (InceptorOracleParser.KW_BULK_ROWCOUNT - 546)) | (1 << (InceptorOracleParser.KW_BULK_EXCEPTIONS - 546)) | (1 << (InceptorOracleParser.KW_REVERSE - 546)) | (1 << (InceptorOracleParser.KW_SAVE - 546)) | (1 << (InceptorOracleParser.KW_EXCEPTIONS - 546)) | (1 << (InceptorOracleParser.KW_INDICES - 546)) | (1 << (InceptorOracleParser.KW_REF - 546)) | (1 << (InceptorOracleParser.KW_YEARS - 546)) | (1 << (InceptorOracleParser.KW_MONTHS - 546)) | (1 << (InceptorOracleParser.KW_DAYS - 546)) | (1 << (InceptorOracleParser.KW_HOURS - 546)) | (1 << (InceptorOracleParser.KW_MINUTES - 546)) | (1 << (InceptorOracleParser.KW_SECONDS - 546)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dialectFunctionName() {
	    let localctx = new DialectFunctionNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1334, InceptorOracleParser.RULE_dialectFunctionName);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7354;
	        _la = this._input.LA(1);
	        if(!(_la===InceptorOracleParser.KW_IF || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (InceptorOracleParser.KW_ARRAY - 113)) | (1 << (InceptorOracleParser.KW_STRUCT - 113)) | (1 << (InceptorOracleParser.KW_MAP - 113)) | (1 << (InceptorOracleParser.KW_UNIONTYPE - 113)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (InceptorOracleParser.KW_SYSDATE - 391)) | (1 << (InceptorOracleParser.KW_SYSTIMESTAMP - 391)) | (1 << (InceptorOracleParser.KW_SYSTIME - 391)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nonSqlStatement() {
	    let localctx = new NonSqlStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1336, InceptorOracleParser.RULE_nonSqlStatement);
	    try {
	        this.state = 7372;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,824,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7356;
	            this.nullStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7357;
	            this.ifStatement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7358;
	            this.loopStatement();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 7359;
	            this.forAllStatement();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 7360;
	            this.continueStatement();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 7361;
	            this.exitStatement();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 7362;
	            this.returnStatement();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 7363;
	            this.gotoStatement();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 7364;
	            this.openForOrOpenCursorStatement();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 7365;
	            this.fetchCursorIntoStatement();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 7366;
	            this.closeCursorStatement();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 7367;
	            this.assignStatement();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 7368;
	            this.raiseStatement();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 7369;
	            this.dclStatement();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 7370;
	            this.plBlockStatement();
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 7371;
	            this.executeImmediateStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statements() {
	    let localctx = new StatementsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1338, InceptorOracleParser.RULE_statements);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7377;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,825,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 7374;
	                this.sqlStatement(); 
	            }
	            this.state = 7379;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,825,this._ctx);
	        }

	        this.state = 7380;
	        this.sqlStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sqlStatementEmpty() {
	    let localctx = new SqlStatementEmptyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1340, InceptorOracleParser.RULE_sqlStatementEmpty);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7382;
	        this.sqlStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sqlStatement() {
	    let localctx = new SqlStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1342, InceptorOracleParser.RULE_sqlStatement);
	    var _la = 0; // Token type
	    try {
	        this.state = 7399;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case InceptorOracleParser.KW_PLANT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7384;
	            this.plantStatement();
	            this.state = 7386;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.SEMICOLON) {
	                this.state = 7385;
	                this.match(InceptorOracleParser.SEMICOLON);
	            }

	            this.state = 7388;
	            this.match(InceptorOracleParser.EOF);
	            break;
	        case InceptorOracleParser.KW_EXPLAIN:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7390;
	            this.explainStatement();
	            this.state = 7391;
	            this.match(InceptorOracleParser.EOF);
	            break;
	        case InceptorOracleParser.KW_DESC:
	        case InceptorOracleParser.KW_FROM:
	        case InceptorOracleParser.KW_SELECT:
	        case InceptorOracleParser.KW_INSERT:
	        case InceptorOracleParser.KW_BATCH_INSERT:
	        case InceptorOracleParser.KW_REBUILD:
	        case InceptorOracleParser.KW_SHOW:
	        case InceptorOracleParser.KW_MSCK:
	        case InceptorOracleParser.KW_LOAD:
	        case InceptorOracleParser.KW_EXPORT:
	        case InceptorOracleParser.KW_IMPORT:
	        case InceptorOracleParser.KW_CREATE:
	        case InceptorOracleParser.KW_ALTER:
	        case InceptorOracleParser.KW_DESCRIBE:
	        case InceptorOracleParser.KW_DROP:
	        case InceptorOracleParser.KW_MAP:
	        case InceptorOracleParser.KW_REDUCE:
	        case InceptorOracleParser.KW_ADD:
	        case InceptorOracleParser.KW_RELOAD:
	        case InceptorOracleParser.KW_WITH:
	        case InceptorOracleParser.KW_SET:
	        case InceptorOracleParser.KW_RULE:
	        case InceptorOracleParser.KW_POLICY:
	        case InceptorOracleParser.KW_REMOVE:
	        case InceptorOracleParser.KW_DELETE:
	        case InceptorOracleParser.KW_GRANT:
	        case InceptorOracleParser.KW_REVOKE:
	        case InceptorOracleParser.KW_LOCK:
	        case InceptorOracleParser.KW_UNLOCK:
	        case InceptorOracleParser.KW_ANALYZE:
	        case InceptorOracleParser.KW_USE:
	        case InceptorOracleParser.KW_UPDATE:
	        case InceptorOracleParser.KW_BATCHUPDATE:
	        case InceptorOracleParser.KW_TRUNCATE:
	        case InceptorOracleParser.KW_BEGIN:
	        case InceptorOracleParser.KW_DECLARE:
	        case InceptorOracleParser.KW_CALL:
	        case InceptorOracleParser.KW_EXEC:
	        case InceptorOracleParser.KW_MERGE:
	        case InceptorOracleParser.KW_COMPACT:
	        case InceptorOracleParser.KW_START:
	        case InceptorOracleParser.KW_COMMIT:
	        case InceptorOracleParser.KW_ROLLBACK:
	        case InceptorOracleParser.LPAREN:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7393;
	            this.execStatement();
	            this.state = 7395;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.SEMICOLON) {
	                this.state = 7394;
	                this.match(InceptorOracleParser.SEMICOLON);
	            }

	            this.state = 7397;
	            this.match(InceptorOracleParser.EOF);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	plantStatement() {
	    let localctx = new PlantStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1344, InceptorOracleParser.RULE_plantStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7401;
	        this.match(InceptorOracleParser.KW_PLANT);
	        this.state = 7402;
	        this.execStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	explainStatement() {
	    let localctx = new ExplainStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1346, InceptorOracleParser.RULE_explainStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7404;
	        this.match(InceptorOracleParser.KW_EXPLAIN);
	        this.state = 7411;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case InceptorOracleParser.KW_EXTENDED:
	        	this.state = 7405;
	        	localctx.explainOptions = this.match(InceptorOracleParser.KW_EXTENDED);
	        	break;
	        case InceptorOracleParser.KW_FORMATTED:
	        	this.state = 7406;
	        	localctx.explainOptions = this.match(InceptorOracleParser.KW_FORMATTED);
	        	break;
	        case InceptorOracleParser.KW_DEPENDENCY:
	        	this.state = 7407;
	        	localctx.explainOptions = this.match(InceptorOracleParser.KW_DEPENDENCY);
	        	break;
	        case InceptorOracleParser.KW_LOGICAL:
	        	this.state = 7408;
	        	localctx.explainOptions = this.match(InceptorOracleParser.KW_LOGICAL);
	        	break;
	        case InceptorOracleParser.KW_COST:
	        	this.state = 7409;
	        	localctx.explainOptions = this.match(InceptorOracleParser.KW_COST);
	        	break;
	        case InceptorOracleParser.KW_STARGATE:
	        	this.state = 7410;
	        	localctx.explainOptions = this.match(InceptorOracleParser.KW_STARGATE);
	        	break;
	        case InceptorOracleParser.KW_DESC:
	        case InceptorOracleParser.KW_FROM:
	        case InceptorOracleParser.KW_SELECT:
	        case InceptorOracleParser.KW_INSERT:
	        case InceptorOracleParser.KW_BATCH_INSERT:
	        case InceptorOracleParser.KW_REBUILD:
	        case InceptorOracleParser.KW_SHOW:
	        case InceptorOracleParser.KW_MSCK:
	        case InceptorOracleParser.KW_LOAD:
	        case InceptorOracleParser.KW_EXPORT:
	        case InceptorOracleParser.KW_IMPORT:
	        case InceptorOracleParser.KW_CREATE:
	        case InceptorOracleParser.KW_ALTER:
	        case InceptorOracleParser.KW_DESCRIBE:
	        case InceptorOracleParser.KW_DROP:
	        case InceptorOracleParser.KW_MAP:
	        case InceptorOracleParser.KW_REDUCE:
	        case InceptorOracleParser.KW_ADD:
	        case InceptorOracleParser.KW_RELOAD:
	        case InceptorOracleParser.KW_WITH:
	        case InceptorOracleParser.KW_SET:
	        case InceptorOracleParser.KW_RULE:
	        case InceptorOracleParser.KW_POLICY:
	        case InceptorOracleParser.KW_REMOVE:
	        case InceptorOracleParser.KW_DELETE:
	        case InceptorOracleParser.KW_GRANT:
	        case InceptorOracleParser.KW_REVOKE:
	        case InceptorOracleParser.KW_LOCK:
	        case InceptorOracleParser.KW_UNLOCK:
	        case InceptorOracleParser.KW_ANALYZE:
	        case InceptorOracleParser.KW_USE:
	        case InceptorOracleParser.KW_UPDATE:
	        case InceptorOracleParser.KW_BATCHUPDATE:
	        case InceptorOracleParser.KW_TRUNCATE:
	        case InceptorOracleParser.KW_BEGIN:
	        case InceptorOracleParser.KW_DECLARE:
	        case InceptorOracleParser.KW_CALL:
	        case InceptorOracleParser.KW_EXEC:
	        case InceptorOracleParser.KW_MERGE:
	        case InceptorOracleParser.KW_COMPACT:
	        case InceptorOracleParser.KW_START:
	        case InceptorOracleParser.KW_COMMIT:
	        case InceptorOracleParser.KW_ROLLBACK:
	        case InceptorOracleParser.LPAREN:
	        	break;
	        default:
	        	break;
	        }
	        this.state = 7413;
	        this.execStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	execStatement() {
	    let localctx = new ExecStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1348, InceptorOracleParser.RULE_execStatement);
	    try {
	        this.state = 7417;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,830,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7415;
	            this.mandarinStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7416;
	            this.anonExecStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pkgName() {
	    let localctx = new PkgNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1350, InceptorOracleParser.RULE_pkgName);
	    try {
	        this.state = 7424;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,831,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7419;
	            localctx.db = this.identifier();
	            this.state = 7420;
	            this.match(InceptorOracleParser.DOT);
	            this.state = 7421;
	            localctx.pkg = this.match(InceptorOracleParser.Identifier);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7423;
	            localctx.pkg = this.match(InceptorOracleParser.Identifier);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createPackageStatement() {
	    let localctx = new CreatePackageStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1352, InceptorOracleParser.RULE_createPackageStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7426;
	        this.match(InceptorOracleParser.KW_PACKAGE);
	        this.state = 7428;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_IF) {
	            this.state = 7427;
	            this.ifNotExists();
	        }

	        this.state = 7430;
	        this.pkgName();
	        this.state = 7431;
	        _la = this._input.LA(1);
	        if(!(_la===InceptorOracleParser.KW_AS || _la===InceptorOracleParser.KW_IS)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 7433;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_DECLARE) {
	            this.state = 7432;
	            this.match(InceptorOracleParser.KW_DECLARE);
	        }

	        this.state = 7438;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << InceptorOracleParser.KW_TRUE) | (1 << InceptorOracleParser.KW_FALSE) | (1 << InceptorOracleParser.KW_ALL) | (1 << InceptorOracleParser.KW_LIKE) | (1 << InceptorOracleParser.KW_NO) | (1 << InceptorOracleParser.KW_ANY) | (1 << InceptorOracleParser.KW_EXISTS) | (1 << InceptorOracleParser.KW_ASC) | (1 << InceptorOracleParser.KW_DESC) | (1 << InceptorOracleParser.KW_ORDER) | (1 << InceptorOracleParser.KW_GROUP) | (1 << InceptorOracleParser.KW_INCREMENT) | (1 << InceptorOracleParser.KW_BY) | (1 << InceptorOracleParser.KW_HASH) | (1 << InceptorOracleParser.KW_INSERT) | (1 << InceptorOracleParser.KW_OVERWRITE) | (1 << InceptorOracleParser.KW_OUTER))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (InceptorOracleParser.KW_STREAMJOB - 33)) | (1 << (InceptorOracleParser.KW_STREAMJOBS - 33)) | (1 << (InceptorOracleParser.KW_AT - 33)) | (1 << (InceptorOracleParser.KW_LEFT - 33)) | (1 << (InceptorOracleParser.KW_RIGHT - 33)) | (1 << (InceptorOracleParser.KW_FULL - 33)) | (1 << (InceptorOracleParser.KW_PARTITION - 33)) | (1 << (InceptorOracleParser.KW_PARTITIONS - 33)) | (1 << (InceptorOracleParser.KW_PATTERN - 33)) | (1 << (InceptorOracleParser.KW_TABLE - 33)) | (1 << (InceptorOracleParser.KW_TABLES - 33)) | (1 << (InceptorOracleParser.KW_SEQUENCE - 33)) | (1 << (InceptorOracleParser.KW_SEQUENCES - 33)) | (1 << (InceptorOracleParser.KW_COLUMNS - 33)) | (1 << (InceptorOracleParser.KW_INDEX - 33)) | (1 << (InceptorOracleParser.KW_INDEXES - 33)) | (1 << (InceptorOracleParser.KW_REBUILD - 33)) | (1 << (InceptorOracleParser.KW_FUNCTIONS - 33)) | (1 << (InceptorOracleParser.KW_SHOW - 33)) | (1 << (InceptorOracleParser.KW_MSCK - 33)) | (1 << (InceptorOracleParser.KW_REPAIR - 33)) | (1 << (InceptorOracleParser.KW_DIRECTORY - 33)) | (1 << (InceptorOracleParser.KW_LOCAL - 33)) | (1 << (InceptorOracleParser.KW_GLOBAL - 33)) | (1 << (InceptorOracleParser.KW_USING - 33)) | (1 << (InceptorOracleParser.KW_CLUSTER - 33)) | (1 << (InceptorOracleParser.KW_DISTRIBUTE - 33)) | (1 << (InceptorOracleParser.KW_SORT - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (InceptorOracleParser.KW_UNION - 65)) | (1 << (InceptorOracleParser.KW_LOAD - 65)) | (1 << (InceptorOracleParser.KW_EXPORT - 65)) | (1 << (InceptorOracleParser.KW_IMPORT - 65)) | (1 << (InceptorOracleParser.KW_DATA - 65)) | (1 << (InceptorOracleParser.KW_INPATH - 65)) | (1 << (InceptorOracleParser.KW_IS - 65)) | (1 << (InceptorOracleParser.KW_NULLS - 65)) | (1 << (InceptorOracleParser.KW_CREATE - 65)) | (1 << (InceptorOracleParser.KW_EXTERNAL - 65)) | (1 << (InceptorOracleParser.KW_ALTER - 65)) | (1 << (InceptorOracleParser.KW_CHANGE - 65)) | (1 << (InceptorOracleParser.KW_FIRST - 65)) | (1 << (InceptorOracleParser.KW_LAST - 65)) | (1 << (InceptorOracleParser.KW_AFTER - 65)) | (1 << (InceptorOracleParser.KW_DESCRIBE - 65)) | (1 << (InceptorOracleParser.KW_DROP - 65)) | (1 << (InceptorOracleParser.KW_RENAME - 65)) | (1 << (InceptorOracleParser.KW_IGNORE - 65)) | (1 << (InceptorOracleParser.KW_RESPECT - 65)) | (1 << (InceptorOracleParser.KW_PROTECTION - 65)) | (1 << (InceptorOracleParser.KW_TO - 65)) | (1 << (InceptorOracleParser.KW_COMMENT - 65)) | (1 << (InceptorOracleParser.KW_PROMPT - 65)) | (1 << (InceptorOracleParser.KW_SPOOL - 65)) | (1 << (InceptorOracleParser.KW_BOOLEAN - 65)) | (1 << (InceptorOracleParser.KW_TINYINT - 65)) | (1 << (InceptorOracleParser.KW_BYTE - 65)) | (1 << (InceptorOracleParser.KW_SMALLINT - 65)) | (1 << (InceptorOracleParser.KW_INT - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (InceptorOracleParser.KW_BIGINT - 97)) | (1 << (InceptorOracleParser.KW_FLOAT - 97)) | (1 << (InceptorOracleParser.KW_DOUBLE - 97)) | (1 << (InceptorOracleParser.KW_DATE - 97)) | (1 << (InceptorOracleParser.KW_DATETIME - 97)) | (1 << (InceptorOracleParser.KW_TIMESTAMP - 97)) | (1 << (InceptorOracleParser.KW_TIME - 97)) | (1 << (InceptorOracleParser.KW_DECIMAL - 97)) | (1 << (InceptorOracleParser.KW_STRING - 97)) | (1 << (InceptorOracleParser.KW_GEO - 97)) | (1 << (InceptorOracleParser.KW_ARRAY - 97)) | (1 << (InceptorOracleParser.KW_STRUCT - 97)) | (1 << (InceptorOracleParser.KW_UNIONTYPE - 97)) | (1 << (InceptorOracleParser.KW_PARTITIONED - 97)) | (1 << (InceptorOracleParser.KW_ROUTED - 97)) | (1 << (InceptorOracleParser.KW_CLUSTERED - 97)) | (1 << (InceptorOracleParser.KW_SORTED - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (InceptorOracleParser.KW_NEXT - 129)) | (1 << (InceptorOracleParser.KW_NEXTVALUE - 129)) | (1 << (InceptorOracleParser.KW_BUCKETS - 129)) | (1 << (InceptorOracleParser.KW_ROW - 129)) | (1 << (InceptorOracleParser.KW_ROWS - 129)) | (1 << (InceptorOracleParser.KW_FORMAT - 129)) | (1 << (InceptorOracleParser.KW_DELIMITED - 129)) | (1 << (InceptorOracleParser.KW_FIELDS - 129)) | (1 << (InceptorOracleParser.KW_TERMINATED - 129)) | (1 << (InceptorOracleParser.KW_ESCAPED - 129)) | (1 << (InceptorOracleParser.KW_COLLECTION - 129)) | (1 << (InceptorOracleParser.KW_ITEMS - 129)) | (1 << (InceptorOracleParser.KW_KEYS - 129)) | (1 << (InceptorOracleParser.KW_KEY_TYPE - 129)) | (1 << (InceptorOracleParser.KW_LINES - 129)) | (1 << (InceptorOracleParser.KW_STORED - 129)) | (1 << (InceptorOracleParser.KW_FILEFORMAT - 129)) | (1 << (InceptorOracleParser.KW_SEQUENCEFILE - 129)) | (1 << (InceptorOracleParser.KW_TEXTFILE - 129)) | (1 << (InceptorOracleParser.KW_CSVFILE - 129)) | (1 << (InceptorOracleParser.KW_FWCFILE - 129)) | (1 << (InceptorOracleParser.KW_RCFILE - 129)) | (1 << (InceptorOracleParser.KW_ORCFILE - 129)) | (1 << (InceptorOracleParser.KW_HOLODESK - 129)) | (1 << (InceptorOracleParser.KW_STELLARDB - 129)) | (1 << (InceptorOracleParser.KW_ORCTRANSACTIONFILE - 129)) | (1 << (InceptorOracleParser.KW_PARQUET - 129)))) !== 0) || ((((_la - 161)) & ~0x1f) == 0 && ((1 << (_la - 161)) & ((1 << (InceptorOracleParser.KW_HYPERDRIVE - 161)) | (1 << (InceptorOracleParser.KW_ESDRIVE - 161)) | (1 << (InceptorOracleParser.KW_INPUTFORMAT - 161)) | (1 << (InceptorOracleParser.KW_OUTPUTFORMAT - 161)) | (1 << (InceptorOracleParser.KW_INPUTDRIVER - 161)) | (1 << (InceptorOracleParser.KW_OUTPUTDRIVER - 161)) | (1 << (InceptorOracleParser.KW_OFFLINE - 161)) | (1 << (InceptorOracleParser.KW_ENABLE - 161)) | (1 << (InceptorOracleParser.KW_DISABLE - 161)) | (1 << (InceptorOracleParser.KW_READONLY - 161)) | (1 << (InceptorOracleParser.KW_NO_DROP - 161)) | (1 << (InceptorOracleParser.KW_LOCATION - 161)) | (1 << (InceptorOracleParser.KW_BUCKET - 161)) | (1 << (InceptorOracleParser.KW_OUT - 161)) | (1 << (InceptorOracleParser.KW_OF - 161)) | (1 << (InceptorOracleParser.KW_PERCENT - 161)) | (1 << (InceptorOracleParser.KW_ADD - 161)) | (1 << (InceptorOracleParser.KW_REPLACE - 161)) | (1 << (InceptorOracleParser.KW_RLIKE - 161)) | (1 << (InceptorOracleParser.KW_REGEXP - 161)) | (1 << (InceptorOracleParser.KW_TEMPORARY - 161)) | (1 << (InceptorOracleParser.KW_FUNCTION - 161)) | (1 << (InceptorOracleParser.KW_RESOURCE - 161)) | (1 << (InceptorOracleParser.KW_RELOAD - 161)) | (1 << (InceptorOracleParser.KW_EXPLAIN - 161)) | (1 << (InceptorOracleParser.KW_FORMATTED - 161)) | (1 << (InceptorOracleParser.KW_PRETTY - 161)) | (1 << (InceptorOracleParser.KW_DEPENDENCY - 161)))) !== 0) || ((((_la - 193)) & ~0x1f) == 0 && ((1 << (_la - 193)) & ((1 << (InceptorOracleParser.KW_LOGICAL - 193)) | (1 << (InceptorOracleParser.KW_COST - 193)) | (1 << (InceptorOracleParser.KW_SERDE - 193)) | (1 << (InceptorOracleParser.KW_WITH - 193)) | (1 << (InceptorOracleParser.KW_WITHIN - 193)) | (1 << (InceptorOracleParser.KW_DEFERRED - 193)) | (1 << (InceptorOracleParser.KW_SERDEPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_DBPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_LIMIT - 193)) | (1 << (InceptorOracleParser.KW_SET - 193)) | (1 << (InceptorOracleParser.KW_UNSET - 193)) | (1 << (InceptorOracleParser.KW_TBLPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_IDXPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_VALUE_TYPE - 193)) | (1 << (InceptorOracleParser.KW_ELEM_TYPE - 193)) | (1 << (InceptorOracleParser.KW_PRIOR - 193)) | (1 << (InceptorOracleParser.KW_NOCYCLE - 193)) | (1 << (InceptorOracleParser.KW_MAPJOIN - 193)) | (1 << (InceptorOracleParser.KW_COMBINE - 193)) | (1 << (InceptorOracleParser.KW_COMBINE_STRUCT_INDEX - 193)) | (1 << (InceptorOracleParser.KW_GLKJOIN - 193)) | (1 << (InceptorOracleParser.KW_USE_INDEX - 193)))) !== 0) || ((((_la - 225)) & ~0x1f) == 0 && ((1 << (_la - 225)) & ((1 << (InceptorOracleParser.KW_STARGATE - 225)) | (1 << (InceptorOracleParser.KW_USE_BULKLOAD - 225)) | (1 << (InceptorOracleParser.KW_ADHOC - 225)) | (1 << (InceptorOracleParser.KW_PRECOMPILE - 225)) | (1 << (InceptorOracleParser.KW_STREAMTABLE - 225)) | (1 << (InceptorOracleParser.KW_STREAM - 225)) | (1 << (InceptorOracleParser.KW_RULEBASE - 225)) | (1 << (InceptorOracleParser.KW_RULEBASES - 225)) | (1 << (InceptorOracleParser.KW_RULE - 225)) | (1 << (InceptorOracleParser.KW_RULES - 225)) | (1 << (InceptorOracleParser.KW_MEET - 225)) | (1 << (InceptorOracleParser.KW_MUST - 225)) | (1 << (InceptorOracleParser.KW_MUSTNOT - 225)) | (1 << (InceptorOracleParser.KW_POLICY - 225)) | (1 << (InceptorOracleParser.KW_POLICIES - 225)) | (1 << (InceptorOracleParser.KW_REMOVE - 225)) | (1 << (InceptorOracleParser.KW_POLICYKEY - 225)) | (1 << (InceptorOracleParser.KW_POLICY_RULE - 225)) | (1 << (InceptorOracleParser.KW_LOOKUP - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTION - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTIONS - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTION_PROPERTIES - 225)) | (1 << (InceptorOracleParser.KW_HOLD_DDLTIME - 225)) | (1 << (InceptorOracleParser.KW_CLUSTERSTATUS - 225)))) !== 0) || ((((_la - 257)) & ~0x1f) == 0 && ((1 << (_la - 257)) & ((1 << (InceptorOracleParser.KW_UTC - 257)) | (1 << (InceptorOracleParser.KW_UTCTIMESTAMP - 257)) | (1 << (InceptorOracleParser.KW_LONG - 257)) | (1 << (InceptorOracleParser.KW_DELETE - 257)) | (1 << (InceptorOracleParser.KW_PLUS - 257)) | (1 << (InceptorOracleParser.KW_MINUS - 257)) | (1 << (InceptorOracleParser.KW_OP_CONCAT - 257)) | (1 << (InceptorOracleParser.KW_FETCH - 257)) | (1 << (InceptorOracleParser.KW_INTERSECT - 257)) | (1 << (InceptorOracleParser.KW_VIEW - 257)) | (1 << (InceptorOracleParser.KW_IN - 257)) | (1 << (InceptorOracleParser.KW_DATABASES - 257)) | (1 << (InceptorOracleParser.KW_MATERIALIZED - 257)) | (1 << (InceptorOracleParser.KW_SCHEMA - 257)) | (1 << (InceptorOracleParser.KW_SCHEMAS - 257)) | (1 << (InceptorOracleParser.KW_GRANT - 257)) | (1 << (InceptorOracleParser.KW_REVOKE - 257)) | (1 << (InceptorOracleParser.KW_SSL - 257)) | (1 << (InceptorOracleParser.KW_UNDO - 257)) | (1 << (InceptorOracleParser.KW_LOCK - 257)) | (1 << (InceptorOracleParser.KW_LOCKS - 257)) | (1 << (InceptorOracleParser.KW_UNLOCK - 257)) | (1 << (InceptorOracleParser.KW_SHARED - 257)) | (1 << (InceptorOracleParser.KW_EXCLUSIVE - 257)) | (1 << (InceptorOracleParser.KW_PROCEDURE - 257)) | (1 << (InceptorOracleParser.KW_UNSIGNED - 257)) | (1 << (InceptorOracleParser.KW_WHILE - 257)) | (1 << (InceptorOracleParser.KW_READ - 257)) | (1 << (InceptorOracleParser.KW_READS - 257)))) !== 0) || ((((_la - 289)) & ~0x1f) == 0 && ((1 << (_la - 289)) & ((1 << (InceptorOracleParser.KW_PURGE - 289)) | (1 << (InceptorOracleParser.KW_RANGE - 289)) | (1 << (InceptorOracleParser.KW_ANALYZE - 289)) | (1 << (InceptorOracleParser.KW_BEFORE - 289)) | (1 << (InceptorOracleParser.KW_BETWEEN - 289)) | (1 << (InceptorOracleParser.KW_BOTH - 289)) | (1 << (InceptorOracleParser.KW_BINARY - 289)) | (1 << (InceptorOracleParser.KW_CURSOR - 289)) | (1 << (InceptorOracleParser.KW_DEFAULT - 289)) | (1 << (InceptorOracleParser.KW_TYPE - 289)) | (1 << (InceptorOracleParser.KW_TRIGGER - 289)) | (1 << (InceptorOracleParser.KW_RECORDREADER - 289)) | (1 << (InceptorOracleParser.KW_RECORDWRITER - 289)) | (1 << (InceptorOracleParser.KW_SEMI - 289)) | (1 << (InceptorOracleParser.KW_LATERAL - 289)) | (1 << (InceptorOracleParser.KW_TOUCH - 289)) | (1 << (InceptorOracleParser.KW_ARCHIVE - 289)) | (1 << (InceptorOracleParser.KW_UNARCHIVE - 289)) | (1 << (InceptorOracleParser.KW_COMPUTE - 289)) | (1 << (InceptorOracleParser.KW_STATISTICS - 289)) | (1 << (InceptorOracleParser.KW_USE - 289)) | (1 << (InceptorOracleParser.KW_OPTION - 289)) | (1 << (InceptorOracleParser.KW_CONCATENATE - 289)) | (1 << (InceptorOracleParser.KW_SHOW_DATABASE - 289)) | (1 << (InceptorOracleParser.KW_UPDATE - 289)) | (1 << (InceptorOracleParser.KW_RESTRICT - 289)) | (1 << (InceptorOracleParser.KW_CASCADE - 289)) | (1 << (InceptorOracleParser.KW_SKEWED - 289)))) !== 0) || ((((_la - 323)) & ~0x1f) == 0 && ((1 << (_la - 323)) & ((1 << (InceptorOracleParser.KW_DIRECTORIES - 323)) | (1 << (InceptorOracleParser.KW_WINDOWRESET - 323)) | (1 << (InceptorOracleParser.KW_SESSIONSTART - 323)) | (1 << (InceptorOracleParser.KW_SESSIONSTOP - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE_DISCARD - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE_COMPLETE - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOW - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOWSLIDELENGTH - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOWSEPARATED - 323)) | (1 << (InceptorOracleParser.KW_FOLLOWEDBY - 323)) | (1 << (InceptorOracleParser.KW_NOTFOLLOWEDBY - 323)) | (1 << (InceptorOracleParser.KW_NOTNEXT - 323)) | (1 << (InceptorOracleParser.KW_PATTERN_TIMES - 323)) | (1 << (InceptorOracleParser.KW_CURRVALUE - 323)) | (1 << (InceptorOracleParser.KW_GROUPING - 323)) | (1 << (InceptorOracleParser.KW_SETS - 323)))) !== 0) || ((((_la - 355)) & ~0x1f) == 0 && ((1 << (_la - 355)) & ((1 << (InceptorOracleParser.KW_TRUNCATE - 355)) | (1 << (InceptorOracleParser.KW_NOSCAN - 355)) | (1 << (InceptorOracleParser.KW_USER - 355)) | (1 << (InceptorOracleParser.KW_QUOTA - 355)) | (1 << (InceptorOracleParser.KW_PERMISSION - 355)) | (1 << (InceptorOracleParser.KW_ROLE - 355)) | (1 << (InceptorOracleParser.KW_ROLES - 355)) | (1 << (InceptorOracleParser.KW_INNER - 355)) | (1 << (InceptorOracleParser.KW_ADMIN - 355)) | (1 << (InceptorOracleParser.KW_OWNER - 355)) | (1 << (InceptorOracleParser.KW_PRINCIPALS - 355)) | (1 << (InceptorOracleParser.KW_CONSTANT - 355)) | (1 << (InceptorOracleParser.KW_CONSTRAINT - 355)) | (1 << (InceptorOracleParser.KW_VALUES - 355)) | (1 << (InceptorOracleParser.KW_YEAR - 355)) | (1 << (InceptorOracleParser.KW_MONTH - 355)) | (1 << (InceptorOracleParser.KW_DAY - 355)) | (1 << (InceptorOracleParser.KW_MINUTE - 355)) | (1 << (InceptorOracleParser.KW_HOUR - 355)))) !== 0) || ((((_la - 387)) & ~0x1f) == 0 && ((1 << (_la - 387)) & ((1 << (InceptorOracleParser.KW_SECOND - 387)) | (1 << (InceptorOracleParser.KW_INTERVAL - 387)) | (1 << (InceptorOracleParser.KW_SYSDATE - 387)) | (1 << (InceptorOracleParser.KW_NOMAXVALUE - 387)) | (1 << (InceptorOracleParser.KW_MINVALUE - 387)) | (1 << (InceptorOracleParser.KW_NOMINVALUE - 387)) | (1 << (InceptorOracleParser.KW_CYCLE - 387)) | (1 << (InceptorOracleParser.KW_CACHE - 387)) | (1 << (InceptorOracleParser.KW_CACHEDMETRIC - 387)) | (1 << (InceptorOracleParser.KW_CACHEDMETRICS - 387)) | (1 << (InceptorOracleParser.KW_NOCACHE - 387)) | (1 << (InceptorOracleParser.KW_NOORDER - 387)) | (1 << (InceptorOracleParser.KW_MERGE - 387)) | (1 << (InceptorOracleParser.KW_PLANT - 387)) | (1 << (InceptorOracleParser.KW_IMMEDIATE - 387)) | (1 << (InceptorOracleParser.KW_COMPACT - 387)) | (1 << (InceptorOracleParser.KW_STOP - 387)) | (1 << (InceptorOracleParser.KW_LIST - 387)))) !== 0) || ((((_la - 419)) & ~0x1f) == 0 && ((1 << (_la - 419)) & ((1 << (InceptorOracleParser.KW_TRANSACTION - 419)) | (1 << (InceptorOracleParser.KW_WORK - 419)) | (1 << (InceptorOracleParser.KW_SPACE - 419)) | (1 << (InceptorOracleParser.KW_CONF - 419)) | (1 << (InceptorOracleParser.KW_DEFINED - 419)) | (1 << (InceptorOracleParser.KW_INTEGER - 419)) | (1 << (InceptorOracleParser.KW_ONLY - 419)) | (1 << (InceptorOracleParser.KW_SERVER - 419)) | (1 << (InceptorOracleParser.KW_TRANSACTIONS - 419)) | (1 << (InceptorOracleParser.KW_URI - 419)) | (1 << (InceptorOracleParser.KW_WRITE - 419)) | (1 << (InceptorOracleParser.KW_FACL - 419)) | (1 << (InceptorOracleParser.KW_FOUND - 419)) | (1 << (InceptorOracleParser.KW_LEVEL - 419)) | (1 << (InceptorOracleParser.KW_PUBLIC - 419)) | (1 << (InceptorOracleParser.KW_LINKS - 419)) | (1 << (InceptorOracleParser.KW_CONNECT - 419)) | (1 << (InceptorOracleParser.KW_APPLICATION - 419)) | (1 << (InceptorOracleParser.KW_APPLICATIONS - 419)) | (1 << (InceptorOracleParser.KW_APP - 419)) | (1 << (InceptorOracleParser.KW_APPS - 419)) | (1 << (InceptorOracleParser.KW_INFINITE - 419)))) !== 0) || ((((_la - 451)) & ~0x1f) == 0 && ((1 << (_la - 451)) & ((1 << (InceptorOracleParser.KW_WAIT - 451)) | (1 << (InceptorOracleParser.KW_PRIMARY - 451)) | (1 << (InceptorOracleParser.KW_FOREIGN - 451)) | (1 << (InceptorOracleParser.KW_REFERENCES - 451)) | (1 << (InceptorOracleParser.KW_VALIDATE - 451)) | (1 << (InceptorOracleParser.KW_NOVALIDATE - 451)) | (1 << (InceptorOracleParser.KW_RELY - 451)) | (1 << (InceptorOracleParser.KW_NORELY - 451)) | (1 << (InceptorOracleParser.KW_KEY - 451)) | (1 << (InceptorOracleParser.KW_SEGMENT - 451)) | (1 << (InceptorOracleParser.KW_LENGTH - 451)) | (1 << (InceptorOracleParser.KW_ATTACH - 451)) | (1 << (InceptorOracleParser.KW_DETTACH - 451)) | (1 << (InceptorOracleParser.KW_SHARD - 451)) | (1 << (InceptorOracleParser.KW_NUM - 451)) | (1 << (InceptorOracleParser.KW_FULLTEXT - 451)) | (1 << (InceptorOracleParser.KW_TABLESIZE - 451)) | (1 << (InceptorOracleParser.KW_TABLET - 451)) | (1 << (InceptorOracleParser.KW_CAPACITY - 451)) | (1 << (InceptorOracleParser.KW_ANALYZER - 451)) | (1 << (InceptorOracleParser.KW_SYNC - 451)) | (1 << (InceptorOracleParser.KW_NO_INDEX - 451)) | (1 << (InceptorOracleParser.KW_LOG - 451)) | (1 << (InceptorOracleParser.KW_FILE - 451)) | (1 << (InceptorOracleParser.KW_JAR - 451)) | (1 << (InceptorOracleParser.KW_PERMANENT - 451)))) !== 0) || _la===InceptorOracleParser.KW_SCHEDULER || _la===InceptorOracleParser.KW_MODE || ((((_la - 523)) & ~0x1f) == 0 && ((1 << (_la - 523)) & ((1 << (InceptorOracleParser.AT - 523)) | (1 << (InceptorOracleParser.Identifier - 523)) | (1 << (InceptorOracleParser.KW_NOCOPY - 523)) | (1 << (InceptorOracleParser.KW_VARRAY - 523)) | (1 << (InceptorOracleParser.KW_PACKAGE - 523)) | (1 << (InceptorOracleParser.KW_PACKAGES - 523)) | (1 << (InceptorOracleParser.KW_BODY - 523)) | (1 << (InceptorOracleParser.KW_ISOPEN - 523)) | (1 << (InceptorOracleParser.KW_NOTFOUND - 523)) | (1 << (InceptorOracleParser.KW_ROWCOUNT - 523)) | (1 << (InceptorOracleParser.KW_BULK_ROWCOUNT - 523)))) !== 0) || ((((_la - 555)) & ~0x1f) == 0 && ((1 << (_la - 555)) & ((1 << (InceptorOracleParser.KW_BULK_EXCEPTIONS - 555)) | (1 << (InceptorOracleParser.KW_REVERSE - 555)) | (1 << (InceptorOracleParser.KW_SAVE - 555)) | (1 << (InceptorOracleParser.KW_EXCEPTIONS - 555)) | (1 << (InceptorOracleParser.KW_INDICES - 555)) | (1 << (InceptorOracleParser.KW_REF - 555)) | (1 << (InceptorOracleParser.KW_PRAGMA - 555)) | (1 << (InceptorOracleParser.KW_YEARS - 555)) | (1 << (InceptorOracleParser.KW_MONTHS - 555)) | (1 << (InceptorOracleParser.KW_DAYS - 555)) | (1 << (InceptorOracleParser.KW_HOURS - 555)) | (1 << (InceptorOracleParser.KW_MINUTES - 555)) | (1 << (InceptorOracleParser.KW_SECONDS - 555)))) !== 0)) {
	            this.state = 7435;
	            this.pkgDeclSpecItem();
	            this.state = 7440;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 7441;
	        this.match(InceptorOracleParser.KW_END);
	        this.state = 7443;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.Identifier) {
	            this.state = 7442;
	            this.match(InceptorOracleParser.Identifier);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createPackageBodyStatement() {
	    let localctx = new CreatePackageBodyStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1354, InceptorOracleParser.RULE_createPackageBodyStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7445;
	        this.match(InceptorOracleParser.KW_PACKAGE);
	        this.state = 7446;
	        this.match(InceptorOracleParser.KW_BODY);
	        this.state = 7448;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_IF) {
	            this.state = 7447;
	            this.ifNotExists();
	        }

	        this.state = 7450;
	        this.pkgName();
	        this.state = 7451;
	        _la = this._input.LA(1);
	        if(!(_la===InceptorOracleParser.KW_AS || _la===InceptorOracleParser.KW_IS)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 7453;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_DECLARE) {
	            this.state = 7452;
	            this.match(InceptorOracleParser.KW_DECLARE);
	        }

	        this.state = 7458;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << InceptorOracleParser.KW_TRUE) | (1 << InceptorOracleParser.KW_FALSE) | (1 << InceptorOracleParser.KW_ALL) | (1 << InceptorOracleParser.KW_LIKE) | (1 << InceptorOracleParser.KW_NO) | (1 << InceptorOracleParser.KW_ANY) | (1 << InceptorOracleParser.KW_EXISTS) | (1 << InceptorOracleParser.KW_ASC) | (1 << InceptorOracleParser.KW_DESC) | (1 << InceptorOracleParser.KW_ORDER) | (1 << InceptorOracleParser.KW_GROUP) | (1 << InceptorOracleParser.KW_INCREMENT) | (1 << InceptorOracleParser.KW_BY) | (1 << InceptorOracleParser.KW_HASH) | (1 << InceptorOracleParser.KW_INSERT) | (1 << InceptorOracleParser.KW_OVERWRITE) | (1 << InceptorOracleParser.KW_OUTER))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (InceptorOracleParser.KW_STREAMJOB - 33)) | (1 << (InceptorOracleParser.KW_STREAMJOBS - 33)) | (1 << (InceptorOracleParser.KW_AT - 33)) | (1 << (InceptorOracleParser.KW_LEFT - 33)) | (1 << (InceptorOracleParser.KW_RIGHT - 33)) | (1 << (InceptorOracleParser.KW_FULL - 33)) | (1 << (InceptorOracleParser.KW_PARTITION - 33)) | (1 << (InceptorOracleParser.KW_PARTITIONS - 33)) | (1 << (InceptorOracleParser.KW_PATTERN - 33)) | (1 << (InceptorOracleParser.KW_TABLE - 33)) | (1 << (InceptorOracleParser.KW_TABLES - 33)) | (1 << (InceptorOracleParser.KW_SEQUENCE - 33)) | (1 << (InceptorOracleParser.KW_SEQUENCES - 33)) | (1 << (InceptorOracleParser.KW_COLUMNS - 33)) | (1 << (InceptorOracleParser.KW_INDEX - 33)) | (1 << (InceptorOracleParser.KW_INDEXES - 33)) | (1 << (InceptorOracleParser.KW_REBUILD - 33)) | (1 << (InceptorOracleParser.KW_FUNCTIONS - 33)) | (1 << (InceptorOracleParser.KW_SHOW - 33)) | (1 << (InceptorOracleParser.KW_MSCK - 33)) | (1 << (InceptorOracleParser.KW_REPAIR - 33)) | (1 << (InceptorOracleParser.KW_DIRECTORY - 33)) | (1 << (InceptorOracleParser.KW_LOCAL - 33)) | (1 << (InceptorOracleParser.KW_GLOBAL - 33)) | (1 << (InceptorOracleParser.KW_USING - 33)) | (1 << (InceptorOracleParser.KW_CLUSTER - 33)) | (1 << (InceptorOracleParser.KW_DISTRIBUTE - 33)) | (1 << (InceptorOracleParser.KW_SORT - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (InceptorOracleParser.KW_UNION - 65)) | (1 << (InceptorOracleParser.KW_LOAD - 65)) | (1 << (InceptorOracleParser.KW_EXPORT - 65)) | (1 << (InceptorOracleParser.KW_IMPORT - 65)) | (1 << (InceptorOracleParser.KW_DATA - 65)) | (1 << (InceptorOracleParser.KW_INPATH - 65)) | (1 << (InceptorOracleParser.KW_IS - 65)) | (1 << (InceptorOracleParser.KW_NULLS - 65)) | (1 << (InceptorOracleParser.KW_CREATE - 65)) | (1 << (InceptorOracleParser.KW_EXTERNAL - 65)) | (1 << (InceptorOracleParser.KW_ALTER - 65)) | (1 << (InceptorOracleParser.KW_CHANGE - 65)) | (1 << (InceptorOracleParser.KW_FIRST - 65)) | (1 << (InceptorOracleParser.KW_LAST - 65)) | (1 << (InceptorOracleParser.KW_AFTER - 65)) | (1 << (InceptorOracleParser.KW_DESCRIBE - 65)) | (1 << (InceptorOracleParser.KW_DROP - 65)) | (1 << (InceptorOracleParser.KW_RENAME - 65)) | (1 << (InceptorOracleParser.KW_IGNORE - 65)) | (1 << (InceptorOracleParser.KW_RESPECT - 65)) | (1 << (InceptorOracleParser.KW_PROTECTION - 65)) | (1 << (InceptorOracleParser.KW_TO - 65)) | (1 << (InceptorOracleParser.KW_COMMENT - 65)) | (1 << (InceptorOracleParser.KW_PROMPT - 65)) | (1 << (InceptorOracleParser.KW_SPOOL - 65)) | (1 << (InceptorOracleParser.KW_BOOLEAN - 65)) | (1 << (InceptorOracleParser.KW_TINYINT - 65)) | (1 << (InceptorOracleParser.KW_BYTE - 65)) | (1 << (InceptorOracleParser.KW_SMALLINT - 65)) | (1 << (InceptorOracleParser.KW_INT - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (InceptorOracleParser.KW_BIGINT - 97)) | (1 << (InceptorOracleParser.KW_FLOAT - 97)) | (1 << (InceptorOracleParser.KW_DOUBLE - 97)) | (1 << (InceptorOracleParser.KW_DATE - 97)) | (1 << (InceptorOracleParser.KW_DATETIME - 97)) | (1 << (InceptorOracleParser.KW_TIMESTAMP - 97)) | (1 << (InceptorOracleParser.KW_TIME - 97)) | (1 << (InceptorOracleParser.KW_DECIMAL - 97)) | (1 << (InceptorOracleParser.KW_STRING - 97)) | (1 << (InceptorOracleParser.KW_GEO - 97)) | (1 << (InceptorOracleParser.KW_ARRAY - 97)) | (1 << (InceptorOracleParser.KW_STRUCT - 97)) | (1 << (InceptorOracleParser.KW_UNIONTYPE - 97)) | (1 << (InceptorOracleParser.KW_PARTITIONED - 97)) | (1 << (InceptorOracleParser.KW_ROUTED - 97)) | (1 << (InceptorOracleParser.KW_CLUSTERED - 97)) | (1 << (InceptorOracleParser.KW_SORTED - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (InceptorOracleParser.KW_NEXT - 129)) | (1 << (InceptorOracleParser.KW_NEXTVALUE - 129)) | (1 << (InceptorOracleParser.KW_BUCKETS - 129)) | (1 << (InceptorOracleParser.KW_ROW - 129)) | (1 << (InceptorOracleParser.KW_ROWS - 129)) | (1 << (InceptorOracleParser.KW_FORMAT - 129)) | (1 << (InceptorOracleParser.KW_DELIMITED - 129)) | (1 << (InceptorOracleParser.KW_FIELDS - 129)) | (1 << (InceptorOracleParser.KW_TERMINATED - 129)) | (1 << (InceptorOracleParser.KW_ESCAPED - 129)) | (1 << (InceptorOracleParser.KW_COLLECTION - 129)) | (1 << (InceptorOracleParser.KW_ITEMS - 129)) | (1 << (InceptorOracleParser.KW_KEYS - 129)) | (1 << (InceptorOracleParser.KW_KEY_TYPE - 129)) | (1 << (InceptorOracleParser.KW_LINES - 129)) | (1 << (InceptorOracleParser.KW_STORED - 129)) | (1 << (InceptorOracleParser.KW_FILEFORMAT - 129)) | (1 << (InceptorOracleParser.KW_SEQUENCEFILE - 129)) | (1 << (InceptorOracleParser.KW_TEXTFILE - 129)) | (1 << (InceptorOracleParser.KW_CSVFILE - 129)) | (1 << (InceptorOracleParser.KW_FWCFILE - 129)) | (1 << (InceptorOracleParser.KW_RCFILE - 129)) | (1 << (InceptorOracleParser.KW_ORCFILE - 129)) | (1 << (InceptorOracleParser.KW_HOLODESK - 129)) | (1 << (InceptorOracleParser.KW_STELLARDB - 129)) | (1 << (InceptorOracleParser.KW_ORCTRANSACTIONFILE - 129)) | (1 << (InceptorOracleParser.KW_PARQUET - 129)))) !== 0) || ((((_la - 161)) & ~0x1f) == 0 && ((1 << (_la - 161)) & ((1 << (InceptorOracleParser.KW_HYPERDRIVE - 161)) | (1 << (InceptorOracleParser.KW_ESDRIVE - 161)) | (1 << (InceptorOracleParser.KW_INPUTFORMAT - 161)) | (1 << (InceptorOracleParser.KW_OUTPUTFORMAT - 161)) | (1 << (InceptorOracleParser.KW_INPUTDRIVER - 161)) | (1 << (InceptorOracleParser.KW_OUTPUTDRIVER - 161)) | (1 << (InceptorOracleParser.KW_OFFLINE - 161)) | (1 << (InceptorOracleParser.KW_ENABLE - 161)) | (1 << (InceptorOracleParser.KW_DISABLE - 161)) | (1 << (InceptorOracleParser.KW_READONLY - 161)) | (1 << (InceptorOracleParser.KW_NO_DROP - 161)) | (1 << (InceptorOracleParser.KW_LOCATION - 161)) | (1 << (InceptorOracleParser.KW_BUCKET - 161)) | (1 << (InceptorOracleParser.KW_OUT - 161)) | (1 << (InceptorOracleParser.KW_OF - 161)) | (1 << (InceptorOracleParser.KW_PERCENT - 161)) | (1 << (InceptorOracleParser.KW_ADD - 161)) | (1 << (InceptorOracleParser.KW_REPLACE - 161)) | (1 << (InceptorOracleParser.KW_RLIKE - 161)) | (1 << (InceptorOracleParser.KW_REGEXP - 161)) | (1 << (InceptorOracleParser.KW_TEMPORARY - 161)) | (1 << (InceptorOracleParser.KW_FUNCTION - 161)) | (1 << (InceptorOracleParser.KW_RESOURCE - 161)) | (1 << (InceptorOracleParser.KW_RELOAD - 161)) | (1 << (InceptorOracleParser.KW_EXPLAIN - 161)) | (1 << (InceptorOracleParser.KW_FORMATTED - 161)) | (1 << (InceptorOracleParser.KW_PRETTY - 161)) | (1 << (InceptorOracleParser.KW_DEPENDENCY - 161)))) !== 0) || ((((_la - 193)) & ~0x1f) == 0 && ((1 << (_la - 193)) & ((1 << (InceptorOracleParser.KW_LOGICAL - 193)) | (1 << (InceptorOracleParser.KW_COST - 193)) | (1 << (InceptorOracleParser.KW_SERDE - 193)) | (1 << (InceptorOracleParser.KW_WITH - 193)) | (1 << (InceptorOracleParser.KW_WITHIN - 193)) | (1 << (InceptorOracleParser.KW_DEFERRED - 193)) | (1 << (InceptorOracleParser.KW_SERDEPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_DBPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_LIMIT - 193)) | (1 << (InceptorOracleParser.KW_SET - 193)) | (1 << (InceptorOracleParser.KW_UNSET - 193)) | (1 << (InceptorOracleParser.KW_TBLPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_IDXPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_VALUE_TYPE - 193)) | (1 << (InceptorOracleParser.KW_ELEM_TYPE - 193)) | (1 << (InceptorOracleParser.KW_PRIOR - 193)) | (1 << (InceptorOracleParser.KW_NOCYCLE - 193)) | (1 << (InceptorOracleParser.KW_MAPJOIN - 193)) | (1 << (InceptorOracleParser.KW_COMBINE - 193)) | (1 << (InceptorOracleParser.KW_COMBINE_STRUCT_INDEX - 193)) | (1 << (InceptorOracleParser.KW_GLKJOIN - 193)) | (1 << (InceptorOracleParser.KW_USE_INDEX - 193)))) !== 0) || ((((_la - 225)) & ~0x1f) == 0 && ((1 << (_la - 225)) & ((1 << (InceptorOracleParser.KW_STARGATE - 225)) | (1 << (InceptorOracleParser.KW_USE_BULKLOAD - 225)) | (1 << (InceptorOracleParser.KW_ADHOC - 225)) | (1 << (InceptorOracleParser.KW_PRECOMPILE - 225)) | (1 << (InceptorOracleParser.KW_STREAMTABLE - 225)) | (1 << (InceptorOracleParser.KW_STREAM - 225)) | (1 << (InceptorOracleParser.KW_RULEBASE - 225)) | (1 << (InceptorOracleParser.KW_RULEBASES - 225)) | (1 << (InceptorOracleParser.KW_RULE - 225)) | (1 << (InceptorOracleParser.KW_RULES - 225)) | (1 << (InceptorOracleParser.KW_MEET - 225)) | (1 << (InceptorOracleParser.KW_MUST - 225)) | (1 << (InceptorOracleParser.KW_MUSTNOT - 225)) | (1 << (InceptorOracleParser.KW_POLICY - 225)) | (1 << (InceptorOracleParser.KW_POLICIES - 225)) | (1 << (InceptorOracleParser.KW_REMOVE - 225)) | (1 << (InceptorOracleParser.KW_POLICYKEY - 225)) | (1 << (InceptorOracleParser.KW_POLICY_RULE - 225)) | (1 << (InceptorOracleParser.KW_LOOKUP - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTION - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTIONS - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTION_PROPERTIES - 225)) | (1 << (InceptorOracleParser.KW_HOLD_DDLTIME - 225)) | (1 << (InceptorOracleParser.KW_CLUSTERSTATUS - 225)))) !== 0) || ((((_la - 257)) & ~0x1f) == 0 && ((1 << (_la - 257)) & ((1 << (InceptorOracleParser.KW_UTC - 257)) | (1 << (InceptorOracleParser.KW_UTCTIMESTAMP - 257)) | (1 << (InceptorOracleParser.KW_LONG - 257)) | (1 << (InceptorOracleParser.KW_DELETE - 257)) | (1 << (InceptorOracleParser.KW_PLUS - 257)) | (1 << (InceptorOracleParser.KW_MINUS - 257)) | (1 << (InceptorOracleParser.KW_OP_CONCAT - 257)) | (1 << (InceptorOracleParser.KW_FETCH - 257)) | (1 << (InceptorOracleParser.KW_INTERSECT - 257)) | (1 << (InceptorOracleParser.KW_VIEW - 257)) | (1 << (InceptorOracleParser.KW_IN - 257)) | (1 << (InceptorOracleParser.KW_DATABASES - 257)) | (1 << (InceptorOracleParser.KW_MATERIALIZED - 257)) | (1 << (InceptorOracleParser.KW_SCHEMA - 257)) | (1 << (InceptorOracleParser.KW_SCHEMAS - 257)) | (1 << (InceptorOracleParser.KW_GRANT - 257)) | (1 << (InceptorOracleParser.KW_REVOKE - 257)) | (1 << (InceptorOracleParser.KW_SSL - 257)) | (1 << (InceptorOracleParser.KW_UNDO - 257)) | (1 << (InceptorOracleParser.KW_LOCK - 257)) | (1 << (InceptorOracleParser.KW_LOCKS - 257)) | (1 << (InceptorOracleParser.KW_UNLOCK - 257)) | (1 << (InceptorOracleParser.KW_SHARED - 257)) | (1 << (InceptorOracleParser.KW_EXCLUSIVE - 257)) | (1 << (InceptorOracleParser.KW_PROCEDURE - 257)) | (1 << (InceptorOracleParser.KW_UNSIGNED - 257)) | (1 << (InceptorOracleParser.KW_WHILE - 257)) | (1 << (InceptorOracleParser.KW_READ - 257)) | (1 << (InceptorOracleParser.KW_READS - 257)))) !== 0) || ((((_la - 289)) & ~0x1f) == 0 && ((1 << (_la - 289)) & ((1 << (InceptorOracleParser.KW_PURGE - 289)) | (1 << (InceptorOracleParser.KW_RANGE - 289)) | (1 << (InceptorOracleParser.KW_ANALYZE - 289)) | (1 << (InceptorOracleParser.KW_BEFORE - 289)) | (1 << (InceptorOracleParser.KW_BETWEEN - 289)) | (1 << (InceptorOracleParser.KW_BOTH - 289)) | (1 << (InceptorOracleParser.KW_BINARY - 289)) | (1 << (InceptorOracleParser.KW_CURSOR - 289)) | (1 << (InceptorOracleParser.KW_DEFAULT - 289)) | (1 << (InceptorOracleParser.KW_TYPE - 289)) | (1 << (InceptorOracleParser.KW_TRIGGER - 289)) | (1 << (InceptorOracleParser.KW_RECORDREADER - 289)) | (1 << (InceptorOracleParser.KW_RECORDWRITER - 289)) | (1 << (InceptorOracleParser.KW_SEMI - 289)) | (1 << (InceptorOracleParser.KW_LATERAL - 289)) | (1 << (InceptorOracleParser.KW_TOUCH - 289)) | (1 << (InceptorOracleParser.KW_ARCHIVE - 289)) | (1 << (InceptorOracleParser.KW_UNARCHIVE - 289)) | (1 << (InceptorOracleParser.KW_COMPUTE - 289)) | (1 << (InceptorOracleParser.KW_STATISTICS - 289)) | (1 << (InceptorOracleParser.KW_USE - 289)) | (1 << (InceptorOracleParser.KW_OPTION - 289)) | (1 << (InceptorOracleParser.KW_CONCATENATE - 289)) | (1 << (InceptorOracleParser.KW_SHOW_DATABASE - 289)) | (1 << (InceptorOracleParser.KW_UPDATE - 289)) | (1 << (InceptorOracleParser.KW_RESTRICT - 289)) | (1 << (InceptorOracleParser.KW_CASCADE - 289)) | (1 << (InceptorOracleParser.KW_SKEWED - 289)))) !== 0) || ((((_la - 323)) & ~0x1f) == 0 && ((1 << (_la - 323)) & ((1 << (InceptorOracleParser.KW_DIRECTORIES - 323)) | (1 << (InceptorOracleParser.KW_WINDOWRESET - 323)) | (1 << (InceptorOracleParser.KW_SESSIONSTART - 323)) | (1 << (InceptorOracleParser.KW_SESSIONSTOP - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE_DISCARD - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE_COMPLETE - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOW - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOWSLIDELENGTH - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOWSEPARATED - 323)) | (1 << (InceptorOracleParser.KW_FOLLOWEDBY - 323)) | (1 << (InceptorOracleParser.KW_NOTFOLLOWEDBY - 323)) | (1 << (InceptorOracleParser.KW_NOTNEXT - 323)) | (1 << (InceptorOracleParser.KW_PATTERN_TIMES - 323)) | (1 << (InceptorOracleParser.KW_CURRVALUE - 323)) | (1 << (InceptorOracleParser.KW_GROUPING - 323)) | (1 << (InceptorOracleParser.KW_SETS - 323)))) !== 0) || ((((_la - 355)) & ~0x1f) == 0 && ((1 << (_la - 355)) & ((1 << (InceptorOracleParser.KW_TRUNCATE - 355)) | (1 << (InceptorOracleParser.KW_NOSCAN - 355)) | (1 << (InceptorOracleParser.KW_USER - 355)) | (1 << (InceptorOracleParser.KW_QUOTA - 355)) | (1 << (InceptorOracleParser.KW_PERMISSION - 355)) | (1 << (InceptorOracleParser.KW_ROLE - 355)) | (1 << (InceptorOracleParser.KW_ROLES - 355)) | (1 << (InceptorOracleParser.KW_INNER - 355)) | (1 << (InceptorOracleParser.KW_ADMIN - 355)) | (1 << (InceptorOracleParser.KW_OWNER - 355)) | (1 << (InceptorOracleParser.KW_PRINCIPALS - 355)) | (1 << (InceptorOracleParser.KW_CONSTANT - 355)) | (1 << (InceptorOracleParser.KW_CONSTRAINT - 355)) | (1 << (InceptorOracleParser.KW_VALUES - 355)) | (1 << (InceptorOracleParser.KW_YEAR - 355)) | (1 << (InceptorOracleParser.KW_MONTH - 355)) | (1 << (InceptorOracleParser.KW_DAY - 355)) | (1 << (InceptorOracleParser.KW_MINUTE - 355)) | (1 << (InceptorOracleParser.KW_HOUR - 355)))) !== 0) || ((((_la - 387)) & ~0x1f) == 0 && ((1 << (_la - 387)) & ((1 << (InceptorOracleParser.KW_SECOND - 387)) | (1 << (InceptorOracleParser.KW_INTERVAL - 387)) | (1 << (InceptorOracleParser.KW_SYSDATE - 387)) | (1 << (InceptorOracleParser.KW_NOMAXVALUE - 387)) | (1 << (InceptorOracleParser.KW_MINVALUE - 387)) | (1 << (InceptorOracleParser.KW_NOMINVALUE - 387)) | (1 << (InceptorOracleParser.KW_CYCLE - 387)) | (1 << (InceptorOracleParser.KW_CACHE - 387)) | (1 << (InceptorOracleParser.KW_CACHEDMETRIC - 387)) | (1 << (InceptorOracleParser.KW_CACHEDMETRICS - 387)) | (1 << (InceptorOracleParser.KW_NOCACHE - 387)) | (1 << (InceptorOracleParser.KW_NOORDER - 387)) | (1 << (InceptorOracleParser.KW_MERGE - 387)) | (1 << (InceptorOracleParser.KW_PLANT - 387)) | (1 << (InceptorOracleParser.KW_IMMEDIATE - 387)) | (1 << (InceptorOracleParser.KW_COMPACT - 387)) | (1 << (InceptorOracleParser.KW_STOP - 387)) | (1 << (InceptorOracleParser.KW_LIST - 387)))) !== 0) || ((((_la - 419)) & ~0x1f) == 0 && ((1 << (_la - 419)) & ((1 << (InceptorOracleParser.KW_TRANSACTION - 419)) | (1 << (InceptorOracleParser.KW_WORK - 419)) | (1 << (InceptorOracleParser.KW_SPACE - 419)) | (1 << (InceptorOracleParser.KW_CONF - 419)) | (1 << (InceptorOracleParser.KW_DEFINED - 419)) | (1 << (InceptorOracleParser.KW_INTEGER - 419)) | (1 << (InceptorOracleParser.KW_ONLY - 419)) | (1 << (InceptorOracleParser.KW_SERVER - 419)) | (1 << (InceptorOracleParser.KW_TRANSACTIONS - 419)) | (1 << (InceptorOracleParser.KW_URI - 419)) | (1 << (InceptorOracleParser.KW_WRITE - 419)) | (1 << (InceptorOracleParser.KW_FACL - 419)) | (1 << (InceptorOracleParser.KW_FOUND - 419)) | (1 << (InceptorOracleParser.KW_LEVEL - 419)) | (1 << (InceptorOracleParser.KW_PUBLIC - 419)) | (1 << (InceptorOracleParser.KW_LINKS - 419)) | (1 << (InceptorOracleParser.KW_CONNECT - 419)) | (1 << (InceptorOracleParser.KW_APPLICATION - 419)) | (1 << (InceptorOracleParser.KW_APPLICATIONS - 419)) | (1 << (InceptorOracleParser.KW_APP - 419)) | (1 << (InceptorOracleParser.KW_APPS - 419)) | (1 << (InceptorOracleParser.KW_INFINITE - 419)))) !== 0) || ((((_la - 451)) & ~0x1f) == 0 && ((1 << (_la - 451)) & ((1 << (InceptorOracleParser.KW_WAIT - 451)) | (1 << (InceptorOracleParser.KW_PRIMARY - 451)) | (1 << (InceptorOracleParser.KW_FOREIGN - 451)) | (1 << (InceptorOracleParser.KW_REFERENCES - 451)) | (1 << (InceptorOracleParser.KW_VALIDATE - 451)) | (1 << (InceptorOracleParser.KW_NOVALIDATE - 451)) | (1 << (InceptorOracleParser.KW_RELY - 451)) | (1 << (InceptorOracleParser.KW_NORELY - 451)) | (1 << (InceptorOracleParser.KW_KEY - 451)) | (1 << (InceptorOracleParser.KW_SEGMENT - 451)) | (1 << (InceptorOracleParser.KW_LENGTH - 451)) | (1 << (InceptorOracleParser.KW_ATTACH - 451)) | (1 << (InceptorOracleParser.KW_DETTACH - 451)) | (1 << (InceptorOracleParser.KW_SHARD - 451)) | (1 << (InceptorOracleParser.KW_NUM - 451)) | (1 << (InceptorOracleParser.KW_FULLTEXT - 451)) | (1 << (InceptorOracleParser.KW_TABLESIZE - 451)) | (1 << (InceptorOracleParser.KW_TABLET - 451)) | (1 << (InceptorOracleParser.KW_CAPACITY - 451)) | (1 << (InceptorOracleParser.KW_ANALYZER - 451)) | (1 << (InceptorOracleParser.KW_SYNC - 451)) | (1 << (InceptorOracleParser.KW_NO_INDEX - 451)) | (1 << (InceptorOracleParser.KW_LOG - 451)) | (1 << (InceptorOracleParser.KW_FILE - 451)) | (1 << (InceptorOracleParser.KW_JAR - 451)) | (1 << (InceptorOracleParser.KW_PERMANENT - 451)))) !== 0) || _la===InceptorOracleParser.KW_SCHEDULER || _la===InceptorOracleParser.KW_MODE || ((((_la - 523)) & ~0x1f) == 0 && ((1 << (_la - 523)) & ((1 << (InceptorOracleParser.AT - 523)) | (1 << (InceptorOracleParser.Identifier - 523)) | (1 << (InceptorOracleParser.KW_NOCOPY - 523)) | (1 << (InceptorOracleParser.KW_VARRAY - 523)) | (1 << (InceptorOracleParser.KW_PACKAGE - 523)) | (1 << (InceptorOracleParser.KW_PACKAGES - 523)) | (1 << (InceptorOracleParser.KW_BODY - 523)) | (1 << (InceptorOracleParser.KW_ISOPEN - 523)) | (1 << (InceptorOracleParser.KW_NOTFOUND - 523)) | (1 << (InceptorOracleParser.KW_ROWCOUNT - 523)) | (1 << (InceptorOracleParser.KW_BULK_ROWCOUNT - 523)))) !== 0) || ((((_la - 555)) & ~0x1f) == 0 && ((1 << (_la - 555)) & ((1 << (InceptorOracleParser.KW_BULK_EXCEPTIONS - 555)) | (1 << (InceptorOracleParser.KW_REVERSE - 555)) | (1 << (InceptorOracleParser.KW_SAVE - 555)) | (1 << (InceptorOracleParser.KW_EXCEPTIONS - 555)) | (1 << (InceptorOracleParser.KW_INDICES - 555)) | (1 << (InceptorOracleParser.KW_REF - 555)) | (1 << (InceptorOracleParser.KW_PRAGMA - 555)) | (1 << (InceptorOracleParser.KW_YEARS - 555)) | (1 << (InceptorOracleParser.KW_MONTHS - 555)) | (1 << (InceptorOracleParser.KW_DAYS - 555)) | (1 << (InceptorOracleParser.KW_HOURS - 555)) | (1 << (InceptorOracleParser.KW_MINUTES - 555)) | (1 << (InceptorOracleParser.KW_SECONDS - 555)))) !== 0)) {
	            this.state = 7455;
	            this.pkgBodyDeclSpecItem();
	            this.state = 7460;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 7466;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_BEGIN) {
	            this.state = 7461;
	            localctx.begin = this.match(InceptorOracleParser.KW_BEGIN);
	            this.state = 7462;
	            this.plBlockBody();
	            this.state = 7464;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_EXCEPTION) {
	                this.state = 7463;
	                this.exceptionHandlers();
	            }

	        }

	        this.state = 7468;
	        this.match(InceptorOracleParser.KW_END);
	        this.state = 7470;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.Identifier) {
	            this.state = 7469;
	            this.match(InceptorOracleParser.Identifier);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropPackageStatement() {
	    let localctx = new DropPackageStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1356, InceptorOracleParser.RULE_dropPackageStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7472;
	        this.match(InceptorOracleParser.KW_DROP);
	        this.state = 7474;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_PLSQL) {
	            this.state = 7473;
	            this.match(InceptorOracleParser.KW_PLSQL);
	        }

	        this.state = 7476;
	        this.match(InceptorOracleParser.KW_PACKAGE);
	        this.state = 7478;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_IF) {
	            this.state = 7477;
	            this.ifExists();
	        }

	        this.state = 7480;
	        this.pkgName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pkgDeclSpecItem() {
	    let localctx = new PkgDeclSpecItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1358, InceptorOracleParser.RULE_pkgDeclSpecItem);
	    try {
	        this.state = 7485;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,844,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7482;
	            this.declFunctionSpec();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7483;
	            this.declProcedureSpec();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7484;
	            this.declareSpecItem();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pkgBodyDeclSpecItem() {
	    let localctx = new PkgBodyDeclSpecItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1360, InceptorOracleParser.RULE_pkgBodyDeclSpecItem);
	    var _la = 0; // Token type
	    try {
	        this.state = 7496;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,847,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7487;
	            this.createSQL92FunctionStatement();
	            this.state = 7489;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.SEMICOLON) {
	                this.state = 7488;
	                this.match(InceptorOracleParser.SEMICOLON);
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7491;
	            this.createSQL92ProcedureStatement();
	            this.state = 7493;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.SEMICOLON) {
	                this.state = 7492;
	                this.match(InceptorOracleParser.SEMICOLON);
	            }

	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7495;
	            this.declareSpecItem();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declFunctionSpec() {
	    let localctx = new DeclFunctionSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1362, InceptorOracleParser.RULE_declFunctionSpec);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7498;
	        this.match(InceptorOracleParser.KW_FUNCTION);
	        this.state = 7499;
	        this.identifier();
	        this.state = 7500;
	        this.parameters();
	        this.state = 7501;
	        this.match(InceptorOracleParser.KW_RETURN);
	        this.state = 7502;
	        this.return_type_spec();
	        this.state = 7504;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.SEMICOLON) {
	            this.state = 7503;
	            this.match(InceptorOracleParser.SEMICOLON);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declProcedureSpec() {
	    let localctx = new DeclProcedureSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1364, InceptorOracleParser.RULE_declProcedureSpec);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7506;
	        this.match(InceptorOracleParser.KW_PROCEDURE);
	        this.state = 7507;
	        this.identifier();
	        this.state = 7508;
	        this.parameters();
	        this.state = 7510;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.SEMICOLON) {
	            this.state = 7509;
	            this.match(InceptorOracleParser.SEMICOLON);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	anonExecStatement() {
	    let localctx = new AnonExecStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1366, InceptorOracleParser.RULE_anonExecStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7512;
	        this.plBlockStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	plBlockStatement() {
	    let localctx = new PlBlockStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1368, InceptorOracleParser.RULE_plBlockStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7521;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_DECLARE) {
	            this.state = 7514;
	            this.match(InceptorOracleParser.KW_DECLARE);
	            this.state = 7518;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << InceptorOracleParser.KW_TRUE) | (1 << InceptorOracleParser.KW_FALSE) | (1 << InceptorOracleParser.KW_ALL) | (1 << InceptorOracleParser.KW_LIKE) | (1 << InceptorOracleParser.KW_NO) | (1 << InceptorOracleParser.KW_ANY) | (1 << InceptorOracleParser.KW_EXISTS) | (1 << InceptorOracleParser.KW_ASC) | (1 << InceptorOracleParser.KW_DESC) | (1 << InceptorOracleParser.KW_ORDER) | (1 << InceptorOracleParser.KW_GROUP) | (1 << InceptorOracleParser.KW_INCREMENT) | (1 << InceptorOracleParser.KW_BY) | (1 << InceptorOracleParser.KW_HASH) | (1 << InceptorOracleParser.KW_INSERT) | (1 << InceptorOracleParser.KW_OVERWRITE) | (1 << InceptorOracleParser.KW_OUTER))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (InceptorOracleParser.KW_STREAMJOB - 33)) | (1 << (InceptorOracleParser.KW_STREAMJOBS - 33)) | (1 << (InceptorOracleParser.KW_AT - 33)) | (1 << (InceptorOracleParser.KW_LEFT - 33)) | (1 << (InceptorOracleParser.KW_RIGHT - 33)) | (1 << (InceptorOracleParser.KW_FULL - 33)) | (1 << (InceptorOracleParser.KW_PARTITION - 33)) | (1 << (InceptorOracleParser.KW_PARTITIONS - 33)) | (1 << (InceptorOracleParser.KW_PATTERN - 33)) | (1 << (InceptorOracleParser.KW_TABLE - 33)) | (1 << (InceptorOracleParser.KW_TABLES - 33)) | (1 << (InceptorOracleParser.KW_SEQUENCE - 33)) | (1 << (InceptorOracleParser.KW_SEQUENCES - 33)) | (1 << (InceptorOracleParser.KW_COLUMNS - 33)) | (1 << (InceptorOracleParser.KW_INDEX - 33)) | (1 << (InceptorOracleParser.KW_INDEXES - 33)) | (1 << (InceptorOracleParser.KW_REBUILD - 33)) | (1 << (InceptorOracleParser.KW_FUNCTIONS - 33)) | (1 << (InceptorOracleParser.KW_SHOW - 33)) | (1 << (InceptorOracleParser.KW_MSCK - 33)) | (1 << (InceptorOracleParser.KW_REPAIR - 33)) | (1 << (InceptorOracleParser.KW_DIRECTORY - 33)) | (1 << (InceptorOracleParser.KW_LOCAL - 33)) | (1 << (InceptorOracleParser.KW_GLOBAL - 33)) | (1 << (InceptorOracleParser.KW_USING - 33)) | (1 << (InceptorOracleParser.KW_CLUSTER - 33)) | (1 << (InceptorOracleParser.KW_DISTRIBUTE - 33)) | (1 << (InceptorOracleParser.KW_SORT - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (InceptorOracleParser.KW_UNION - 65)) | (1 << (InceptorOracleParser.KW_LOAD - 65)) | (1 << (InceptorOracleParser.KW_EXPORT - 65)) | (1 << (InceptorOracleParser.KW_IMPORT - 65)) | (1 << (InceptorOracleParser.KW_DATA - 65)) | (1 << (InceptorOracleParser.KW_INPATH - 65)) | (1 << (InceptorOracleParser.KW_IS - 65)) | (1 << (InceptorOracleParser.KW_NULLS - 65)) | (1 << (InceptorOracleParser.KW_CREATE - 65)) | (1 << (InceptorOracleParser.KW_EXTERNAL - 65)) | (1 << (InceptorOracleParser.KW_ALTER - 65)) | (1 << (InceptorOracleParser.KW_CHANGE - 65)) | (1 << (InceptorOracleParser.KW_FIRST - 65)) | (1 << (InceptorOracleParser.KW_LAST - 65)) | (1 << (InceptorOracleParser.KW_AFTER - 65)) | (1 << (InceptorOracleParser.KW_DESCRIBE - 65)) | (1 << (InceptorOracleParser.KW_DROP - 65)) | (1 << (InceptorOracleParser.KW_RENAME - 65)) | (1 << (InceptorOracleParser.KW_IGNORE - 65)) | (1 << (InceptorOracleParser.KW_RESPECT - 65)) | (1 << (InceptorOracleParser.KW_PROTECTION - 65)) | (1 << (InceptorOracleParser.KW_TO - 65)) | (1 << (InceptorOracleParser.KW_COMMENT - 65)) | (1 << (InceptorOracleParser.KW_PROMPT - 65)) | (1 << (InceptorOracleParser.KW_SPOOL - 65)) | (1 << (InceptorOracleParser.KW_BOOLEAN - 65)) | (1 << (InceptorOracleParser.KW_TINYINT - 65)) | (1 << (InceptorOracleParser.KW_BYTE - 65)) | (1 << (InceptorOracleParser.KW_SMALLINT - 65)) | (1 << (InceptorOracleParser.KW_INT - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (InceptorOracleParser.KW_BIGINT - 97)) | (1 << (InceptorOracleParser.KW_FLOAT - 97)) | (1 << (InceptorOracleParser.KW_DOUBLE - 97)) | (1 << (InceptorOracleParser.KW_DATE - 97)) | (1 << (InceptorOracleParser.KW_DATETIME - 97)) | (1 << (InceptorOracleParser.KW_TIMESTAMP - 97)) | (1 << (InceptorOracleParser.KW_TIME - 97)) | (1 << (InceptorOracleParser.KW_DECIMAL - 97)) | (1 << (InceptorOracleParser.KW_STRING - 97)) | (1 << (InceptorOracleParser.KW_GEO - 97)) | (1 << (InceptorOracleParser.KW_ARRAY - 97)) | (1 << (InceptorOracleParser.KW_STRUCT - 97)) | (1 << (InceptorOracleParser.KW_UNIONTYPE - 97)) | (1 << (InceptorOracleParser.KW_PARTITIONED - 97)) | (1 << (InceptorOracleParser.KW_ROUTED - 97)) | (1 << (InceptorOracleParser.KW_CLUSTERED - 97)) | (1 << (InceptorOracleParser.KW_SORTED - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (InceptorOracleParser.KW_NEXT - 129)) | (1 << (InceptorOracleParser.KW_NEXTVALUE - 129)) | (1 << (InceptorOracleParser.KW_BUCKETS - 129)) | (1 << (InceptorOracleParser.KW_ROW - 129)) | (1 << (InceptorOracleParser.KW_ROWS - 129)) | (1 << (InceptorOracleParser.KW_FORMAT - 129)) | (1 << (InceptorOracleParser.KW_DELIMITED - 129)) | (1 << (InceptorOracleParser.KW_FIELDS - 129)) | (1 << (InceptorOracleParser.KW_TERMINATED - 129)) | (1 << (InceptorOracleParser.KW_ESCAPED - 129)) | (1 << (InceptorOracleParser.KW_COLLECTION - 129)) | (1 << (InceptorOracleParser.KW_ITEMS - 129)) | (1 << (InceptorOracleParser.KW_KEYS - 129)) | (1 << (InceptorOracleParser.KW_KEY_TYPE - 129)) | (1 << (InceptorOracleParser.KW_LINES - 129)) | (1 << (InceptorOracleParser.KW_STORED - 129)) | (1 << (InceptorOracleParser.KW_FILEFORMAT - 129)) | (1 << (InceptorOracleParser.KW_SEQUENCEFILE - 129)) | (1 << (InceptorOracleParser.KW_TEXTFILE - 129)) | (1 << (InceptorOracleParser.KW_CSVFILE - 129)) | (1 << (InceptorOracleParser.KW_FWCFILE - 129)) | (1 << (InceptorOracleParser.KW_RCFILE - 129)) | (1 << (InceptorOracleParser.KW_ORCFILE - 129)) | (1 << (InceptorOracleParser.KW_HOLODESK - 129)) | (1 << (InceptorOracleParser.KW_STELLARDB - 129)) | (1 << (InceptorOracleParser.KW_ORCTRANSACTIONFILE - 129)) | (1 << (InceptorOracleParser.KW_PARQUET - 129)))) !== 0) || ((((_la - 161)) & ~0x1f) == 0 && ((1 << (_la - 161)) & ((1 << (InceptorOracleParser.KW_HYPERDRIVE - 161)) | (1 << (InceptorOracleParser.KW_ESDRIVE - 161)) | (1 << (InceptorOracleParser.KW_INPUTFORMAT - 161)) | (1 << (InceptorOracleParser.KW_OUTPUTFORMAT - 161)) | (1 << (InceptorOracleParser.KW_INPUTDRIVER - 161)) | (1 << (InceptorOracleParser.KW_OUTPUTDRIVER - 161)) | (1 << (InceptorOracleParser.KW_OFFLINE - 161)) | (1 << (InceptorOracleParser.KW_ENABLE - 161)) | (1 << (InceptorOracleParser.KW_DISABLE - 161)) | (1 << (InceptorOracleParser.KW_READONLY - 161)) | (1 << (InceptorOracleParser.KW_NO_DROP - 161)) | (1 << (InceptorOracleParser.KW_LOCATION - 161)) | (1 << (InceptorOracleParser.KW_BUCKET - 161)) | (1 << (InceptorOracleParser.KW_OUT - 161)) | (1 << (InceptorOracleParser.KW_OF - 161)) | (1 << (InceptorOracleParser.KW_PERCENT - 161)) | (1 << (InceptorOracleParser.KW_ADD - 161)) | (1 << (InceptorOracleParser.KW_REPLACE - 161)) | (1 << (InceptorOracleParser.KW_RLIKE - 161)) | (1 << (InceptorOracleParser.KW_REGEXP - 161)) | (1 << (InceptorOracleParser.KW_TEMPORARY - 161)) | (1 << (InceptorOracleParser.KW_RESOURCE - 161)) | (1 << (InceptorOracleParser.KW_RELOAD - 161)) | (1 << (InceptorOracleParser.KW_EXPLAIN - 161)) | (1 << (InceptorOracleParser.KW_FORMATTED - 161)) | (1 << (InceptorOracleParser.KW_PRETTY - 161)) | (1 << (InceptorOracleParser.KW_DEPENDENCY - 161)))) !== 0) || ((((_la - 193)) & ~0x1f) == 0 && ((1 << (_la - 193)) & ((1 << (InceptorOracleParser.KW_LOGICAL - 193)) | (1 << (InceptorOracleParser.KW_COST - 193)) | (1 << (InceptorOracleParser.KW_SERDE - 193)) | (1 << (InceptorOracleParser.KW_WITH - 193)) | (1 << (InceptorOracleParser.KW_WITHIN - 193)) | (1 << (InceptorOracleParser.KW_DEFERRED - 193)) | (1 << (InceptorOracleParser.KW_SERDEPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_DBPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_LIMIT - 193)) | (1 << (InceptorOracleParser.KW_SET - 193)) | (1 << (InceptorOracleParser.KW_UNSET - 193)) | (1 << (InceptorOracleParser.KW_TBLPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_IDXPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_VALUE_TYPE - 193)) | (1 << (InceptorOracleParser.KW_ELEM_TYPE - 193)) | (1 << (InceptorOracleParser.KW_PRIOR - 193)) | (1 << (InceptorOracleParser.KW_NOCYCLE - 193)) | (1 << (InceptorOracleParser.KW_MAPJOIN - 193)) | (1 << (InceptorOracleParser.KW_COMBINE - 193)) | (1 << (InceptorOracleParser.KW_COMBINE_STRUCT_INDEX - 193)) | (1 << (InceptorOracleParser.KW_GLKJOIN - 193)) | (1 << (InceptorOracleParser.KW_USE_INDEX - 193)))) !== 0) || ((((_la - 225)) & ~0x1f) == 0 && ((1 << (_la - 225)) & ((1 << (InceptorOracleParser.KW_STARGATE - 225)) | (1 << (InceptorOracleParser.KW_USE_BULKLOAD - 225)) | (1 << (InceptorOracleParser.KW_ADHOC - 225)) | (1 << (InceptorOracleParser.KW_PRECOMPILE - 225)) | (1 << (InceptorOracleParser.KW_STREAMTABLE - 225)) | (1 << (InceptorOracleParser.KW_STREAM - 225)) | (1 << (InceptorOracleParser.KW_RULEBASE - 225)) | (1 << (InceptorOracleParser.KW_RULEBASES - 225)) | (1 << (InceptorOracleParser.KW_RULE - 225)) | (1 << (InceptorOracleParser.KW_RULES - 225)) | (1 << (InceptorOracleParser.KW_MEET - 225)) | (1 << (InceptorOracleParser.KW_MUST - 225)) | (1 << (InceptorOracleParser.KW_MUSTNOT - 225)) | (1 << (InceptorOracleParser.KW_POLICY - 225)) | (1 << (InceptorOracleParser.KW_POLICIES - 225)) | (1 << (InceptorOracleParser.KW_REMOVE - 225)) | (1 << (InceptorOracleParser.KW_POLICYKEY - 225)) | (1 << (InceptorOracleParser.KW_POLICY_RULE - 225)) | (1 << (InceptorOracleParser.KW_LOOKUP - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTION - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTIONS - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTION_PROPERTIES - 225)) | (1 << (InceptorOracleParser.KW_HOLD_DDLTIME - 225)) | (1 << (InceptorOracleParser.KW_CLUSTERSTATUS - 225)))) !== 0) || ((((_la - 257)) & ~0x1f) == 0 && ((1 << (_la - 257)) & ((1 << (InceptorOracleParser.KW_UTC - 257)) | (1 << (InceptorOracleParser.KW_UTCTIMESTAMP - 257)) | (1 << (InceptorOracleParser.KW_LONG - 257)) | (1 << (InceptorOracleParser.KW_DELETE - 257)) | (1 << (InceptorOracleParser.KW_PLUS - 257)) | (1 << (InceptorOracleParser.KW_MINUS - 257)) | (1 << (InceptorOracleParser.KW_OP_CONCAT - 257)) | (1 << (InceptorOracleParser.KW_FETCH - 257)) | (1 << (InceptorOracleParser.KW_INTERSECT - 257)) | (1 << (InceptorOracleParser.KW_VIEW - 257)) | (1 << (InceptorOracleParser.KW_IN - 257)) | (1 << (InceptorOracleParser.KW_DATABASES - 257)) | (1 << (InceptorOracleParser.KW_MATERIALIZED - 257)) | (1 << (InceptorOracleParser.KW_SCHEMA - 257)) | (1 << (InceptorOracleParser.KW_SCHEMAS - 257)) | (1 << (InceptorOracleParser.KW_GRANT - 257)) | (1 << (InceptorOracleParser.KW_REVOKE - 257)) | (1 << (InceptorOracleParser.KW_SSL - 257)) | (1 << (InceptorOracleParser.KW_UNDO - 257)) | (1 << (InceptorOracleParser.KW_LOCK - 257)) | (1 << (InceptorOracleParser.KW_LOCKS - 257)) | (1 << (InceptorOracleParser.KW_UNLOCK - 257)) | (1 << (InceptorOracleParser.KW_SHARED - 257)) | (1 << (InceptorOracleParser.KW_EXCLUSIVE - 257)) | (1 << (InceptorOracleParser.KW_PROCEDURE - 257)) | (1 << (InceptorOracleParser.KW_UNSIGNED - 257)) | (1 << (InceptorOracleParser.KW_WHILE - 257)) | (1 << (InceptorOracleParser.KW_READ - 257)) | (1 << (InceptorOracleParser.KW_READS - 257)))) !== 0) || ((((_la - 289)) & ~0x1f) == 0 && ((1 << (_la - 289)) & ((1 << (InceptorOracleParser.KW_PURGE - 289)) | (1 << (InceptorOracleParser.KW_RANGE - 289)) | (1 << (InceptorOracleParser.KW_ANALYZE - 289)) | (1 << (InceptorOracleParser.KW_BEFORE - 289)) | (1 << (InceptorOracleParser.KW_BETWEEN - 289)) | (1 << (InceptorOracleParser.KW_BOTH - 289)) | (1 << (InceptorOracleParser.KW_BINARY - 289)) | (1 << (InceptorOracleParser.KW_CURSOR - 289)) | (1 << (InceptorOracleParser.KW_DEFAULT - 289)) | (1 << (InceptorOracleParser.KW_TYPE - 289)) | (1 << (InceptorOracleParser.KW_TRIGGER - 289)) | (1 << (InceptorOracleParser.KW_RECORDREADER - 289)) | (1 << (InceptorOracleParser.KW_RECORDWRITER - 289)) | (1 << (InceptorOracleParser.KW_SEMI - 289)) | (1 << (InceptorOracleParser.KW_LATERAL - 289)) | (1 << (InceptorOracleParser.KW_TOUCH - 289)) | (1 << (InceptorOracleParser.KW_ARCHIVE - 289)) | (1 << (InceptorOracleParser.KW_UNARCHIVE - 289)) | (1 << (InceptorOracleParser.KW_COMPUTE - 289)) | (1 << (InceptorOracleParser.KW_STATISTICS - 289)) | (1 << (InceptorOracleParser.KW_USE - 289)) | (1 << (InceptorOracleParser.KW_OPTION - 289)) | (1 << (InceptorOracleParser.KW_CONCATENATE - 289)) | (1 << (InceptorOracleParser.KW_SHOW_DATABASE - 289)) | (1 << (InceptorOracleParser.KW_UPDATE - 289)) | (1 << (InceptorOracleParser.KW_RESTRICT - 289)) | (1 << (InceptorOracleParser.KW_CASCADE - 289)) | (1 << (InceptorOracleParser.KW_SKEWED - 289)))) !== 0) || ((((_la - 323)) & ~0x1f) == 0 && ((1 << (_la - 323)) & ((1 << (InceptorOracleParser.KW_DIRECTORIES - 323)) | (1 << (InceptorOracleParser.KW_WINDOWRESET - 323)) | (1 << (InceptorOracleParser.KW_SESSIONSTART - 323)) | (1 << (InceptorOracleParser.KW_SESSIONSTOP - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE_DISCARD - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE_COMPLETE - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOW - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOWSLIDELENGTH - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOWSEPARATED - 323)) | (1 << (InceptorOracleParser.KW_FOLLOWEDBY - 323)) | (1 << (InceptorOracleParser.KW_NOTFOLLOWEDBY - 323)) | (1 << (InceptorOracleParser.KW_NOTNEXT - 323)) | (1 << (InceptorOracleParser.KW_PATTERN_TIMES - 323)) | (1 << (InceptorOracleParser.KW_CURRVALUE - 323)) | (1 << (InceptorOracleParser.KW_GROUPING - 323)) | (1 << (InceptorOracleParser.KW_SETS - 323)))) !== 0) || ((((_la - 355)) & ~0x1f) == 0 && ((1 << (_la - 355)) & ((1 << (InceptorOracleParser.KW_TRUNCATE - 355)) | (1 << (InceptorOracleParser.KW_NOSCAN - 355)) | (1 << (InceptorOracleParser.KW_USER - 355)) | (1 << (InceptorOracleParser.KW_QUOTA - 355)) | (1 << (InceptorOracleParser.KW_PERMISSION - 355)) | (1 << (InceptorOracleParser.KW_ROLE - 355)) | (1 << (InceptorOracleParser.KW_ROLES - 355)) | (1 << (InceptorOracleParser.KW_INNER - 355)) | (1 << (InceptorOracleParser.KW_ADMIN - 355)) | (1 << (InceptorOracleParser.KW_OWNER - 355)) | (1 << (InceptorOracleParser.KW_PRINCIPALS - 355)) | (1 << (InceptorOracleParser.KW_CONSTANT - 355)) | (1 << (InceptorOracleParser.KW_CONSTRAINT - 355)) | (1 << (InceptorOracleParser.KW_VALUES - 355)) | (1 << (InceptorOracleParser.KW_YEAR - 355)) | (1 << (InceptorOracleParser.KW_MONTH - 355)) | (1 << (InceptorOracleParser.KW_DAY - 355)) | (1 << (InceptorOracleParser.KW_MINUTE - 355)) | (1 << (InceptorOracleParser.KW_HOUR - 355)))) !== 0) || ((((_la - 387)) & ~0x1f) == 0 && ((1 << (_la - 387)) & ((1 << (InceptorOracleParser.KW_SECOND - 387)) | (1 << (InceptorOracleParser.KW_INTERVAL - 387)) | (1 << (InceptorOracleParser.KW_SYSDATE - 387)) | (1 << (InceptorOracleParser.KW_NOMAXVALUE - 387)) | (1 << (InceptorOracleParser.KW_MINVALUE - 387)) | (1 << (InceptorOracleParser.KW_NOMINVALUE - 387)) | (1 << (InceptorOracleParser.KW_CYCLE - 387)) | (1 << (InceptorOracleParser.KW_CACHE - 387)) | (1 << (InceptorOracleParser.KW_CACHEDMETRIC - 387)) | (1 << (InceptorOracleParser.KW_CACHEDMETRICS - 387)) | (1 << (InceptorOracleParser.KW_NOCACHE - 387)) | (1 << (InceptorOracleParser.KW_NOORDER - 387)) | (1 << (InceptorOracleParser.KW_MERGE - 387)) | (1 << (InceptorOracleParser.KW_PLANT - 387)) | (1 << (InceptorOracleParser.KW_IMMEDIATE - 387)) | (1 << (InceptorOracleParser.KW_COMPACT - 387)) | (1 << (InceptorOracleParser.KW_STOP - 387)) | (1 << (InceptorOracleParser.KW_LIST - 387)))) !== 0) || ((((_la - 419)) & ~0x1f) == 0 && ((1 << (_la - 419)) & ((1 << (InceptorOracleParser.KW_TRANSACTION - 419)) | (1 << (InceptorOracleParser.KW_WORK - 419)) | (1 << (InceptorOracleParser.KW_SPACE - 419)) | (1 << (InceptorOracleParser.KW_CONF - 419)) | (1 << (InceptorOracleParser.KW_DEFINED - 419)) | (1 << (InceptorOracleParser.KW_INTEGER - 419)) | (1 << (InceptorOracleParser.KW_ONLY - 419)) | (1 << (InceptorOracleParser.KW_SERVER - 419)) | (1 << (InceptorOracleParser.KW_TRANSACTIONS - 419)) | (1 << (InceptorOracleParser.KW_URI - 419)) | (1 << (InceptorOracleParser.KW_WRITE - 419)) | (1 << (InceptorOracleParser.KW_FACL - 419)) | (1 << (InceptorOracleParser.KW_FOUND - 419)) | (1 << (InceptorOracleParser.KW_LEVEL - 419)) | (1 << (InceptorOracleParser.KW_PUBLIC - 419)) | (1 << (InceptorOracleParser.KW_LINKS - 419)) | (1 << (InceptorOracleParser.KW_CONNECT - 419)) | (1 << (InceptorOracleParser.KW_APPLICATION - 419)) | (1 << (InceptorOracleParser.KW_APPLICATIONS - 419)) | (1 << (InceptorOracleParser.KW_APP - 419)) | (1 << (InceptorOracleParser.KW_APPS - 419)) | (1 << (InceptorOracleParser.KW_INFINITE - 419)))) !== 0) || ((((_la - 451)) & ~0x1f) == 0 && ((1 << (_la - 451)) & ((1 << (InceptorOracleParser.KW_WAIT - 451)) | (1 << (InceptorOracleParser.KW_PRIMARY - 451)) | (1 << (InceptorOracleParser.KW_FOREIGN - 451)) | (1 << (InceptorOracleParser.KW_REFERENCES - 451)) | (1 << (InceptorOracleParser.KW_VALIDATE - 451)) | (1 << (InceptorOracleParser.KW_NOVALIDATE - 451)) | (1 << (InceptorOracleParser.KW_RELY - 451)) | (1 << (InceptorOracleParser.KW_NORELY - 451)) | (1 << (InceptorOracleParser.KW_KEY - 451)) | (1 << (InceptorOracleParser.KW_SEGMENT - 451)) | (1 << (InceptorOracleParser.KW_LENGTH - 451)) | (1 << (InceptorOracleParser.KW_ATTACH - 451)) | (1 << (InceptorOracleParser.KW_DETTACH - 451)) | (1 << (InceptorOracleParser.KW_SHARD - 451)) | (1 << (InceptorOracleParser.KW_NUM - 451)) | (1 << (InceptorOracleParser.KW_FULLTEXT - 451)) | (1 << (InceptorOracleParser.KW_TABLESIZE - 451)) | (1 << (InceptorOracleParser.KW_TABLET - 451)) | (1 << (InceptorOracleParser.KW_CAPACITY - 451)) | (1 << (InceptorOracleParser.KW_ANALYZER - 451)) | (1 << (InceptorOracleParser.KW_SYNC - 451)) | (1 << (InceptorOracleParser.KW_NO_INDEX - 451)) | (1 << (InceptorOracleParser.KW_LOG - 451)) | (1 << (InceptorOracleParser.KW_FILE - 451)) | (1 << (InceptorOracleParser.KW_JAR - 451)) | (1 << (InceptorOracleParser.KW_PERMANENT - 451)))) !== 0) || _la===InceptorOracleParser.KW_SCHEDULER || _la===InceptorOracleParser.KW_MODE || ((((_la - 523)) & ~0x1f) == 0 && ((1 << (_la - 523)) & ((1 << (InceptorOracleParser.AT - 523)) | (1 << (InceptorOracleParser.Identifier - 523)) | (1 << (InceptorOracleParser.KW_NOCOPY - 523)) | (1 << (InceptorOracleParser.KW_VARRAY - 523)) | (1 << (InceptorOracleParser.KW_PACKAGE - 523)) | (1 << (InceptorOracleParser.KW_PACKAGES - 523)) | (1 << (InceptorOracleParser.KW_BODY - 523)) | (1 << (InceptorOracleParser.KW_ISOPEN - 523)) | (1 << (InceptorOracleParser.KW_NOTFOUND - 523)) | (1 << (InceptorOracleParser.KW_ROWCOUNT - 523)) | (1 << (InceptorOracleParser.KW_BULK_ROWCOUNT - 523)))) !== 0) || ((((_la - 555)) & ~0x1f) == 0 && ((1 << (_la - 555)) & ((1 << (InceptorOracleParser.KW_BULK_EXCEPTIONS - 555)) | (1 << (InceptorOracleParser.KW_REVERSE - 555)) | (1 << (InceptorOracleParser.KW_SAVE - 555)) | (1 << (InceptorOracleParser.KW_EXCEPTIONS - 555)) | (1 << (InceptorOracleParser.KW_INDICES - 555)) | (1 << (InceptorOracleParser.KW_REF - 555)) | (1 << (InceptorOracleParser.KW_PRAGMA - 555)) | (1 << (InceptorOracleParser.KW_YEARS - 555)) | (1 << (InceptorOracleParser.KW_MONTHS - 555)) | (1 << (InceptorOracleParser.KW_DAYS - 555)) | (1 << (InceptorOracleParser.KW_HOURS - 555)) | (1 << (InceptorOracleParser.KW_MINUTES - 555)) | (1 << (InceptorOracleParser.KW_SECONDS - 555)))) !== 0)) {
	                this.state = 7515;
	                this.declareSpecItem();
	                this.state = 7520;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 7523;
	        this.match(InceptorOracleParser.KW_BEGIN);
	        this.state = 7524;
	        this.plBlockBody();
	        this.state = 7526;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_EXCEPTION) {
	            this.state = 7525;
	            this.exceptionHandlers();
	        }

	        this.state = 7528;
	        this.match(InceptorOracleParser.KW_END);
	        this.state = 7530;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,853,this._ctx);
	        if(la_===1) {
	            this.state = 7529;
	            this.match(InceptorOracleParser.Identifier);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	plBlockBody() {
	    let localctx = new PlBlockBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1370, InceptorOracleParser.RULE_plBlockBody);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7533; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 7532;
	            this.labeledStatement();
	            this.state = 7535; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << InceptorOracleParser.KW_TRUE) | (1 << InceptorOracleParser.KW_FALSE) | (1 << InceptorOracleParser.KW_ALL) | (1 << InceptorOracleParser.KW_LIKE) | (1 << InceptorOracleParser.KW_NO) | (1 << InceptorOracleParser.KW_ANY) | (1 << InceptorOracleParser.KW_IF) | (1 << InceptorOracleParser.KW_EXISTS) | (1 << InceptorOracleParser.KW_ASC) | (1 << InceptorOracleParser.KW_DESC) | (1 << InceptorOracleParser.KW_ORDER) | (1 << InceptorOracleParser.KW_GROUP) | (1 << InceptorOracleParser.KW_INCREMENT) | (1 << InceptorOracleParser.KW_BY) | (1 << InceptorOracleParser.KW_HASH) | (1 << InceptorOracleParser.KW_FROM) | (1 << InceptorOracleParser.KW_SELECT) | (1 << InceptorOracleParser.KW_INSERT) | (1 << InceptorOracleParser.KW_BATCH_INSERT) | (1 << InceptorOracleParser.KW_OVERWRITE) | (1 << InceptorOracleParser.KW_OUTER))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (InceptorOracleParser.KW_STREAMJOB - 33)) | (1 << (InceptorOracleParser.KW_STREAMJOBS - 33)) | (1 << (InceptorOracleParser.KW_AT - 33)) | (1 << (InceptorOracleParser.KW_LEFT - 33)) | (1 << (InceptorOracleParser.KW_RIGHT - 33)) | (1 << (InceptorOracleParser.KW_FULL - 33)) | (1 << (InceptorOracleParser.KW_PARTITION - 33)) | (1 << (InceptorOracleParser.KW_PARTITIONS - 33)) | (1 << (InceptorOracleParser.KW_PATTERN - 33)) | (1 << (InceptorOracleParser.KW_TABLE - 33)) | (1 << (InceptorOracleParser.KW_TABLES - 33)) | (1 << (InceptorOracleParser.KW_SEQUENCE - 33)) | (1 << (InceptorOracleParser.KW_SEQUENCES - 33)) | (1 << (InceptorOracleParser.KW_COLUMNS - 33)) | (1 << (InceptorOracleParser.KW_INDEX - 33)) | (1 << (InceptorOracleParser.KW_INDEXES - 33)) | (1 << (InceptorOracleParser.KW_REBUILD - 33)) | (1 << (InceptorOracleParser.KW_FUNCTIONS - 33)) | (1 << (InceptorOracleParser.KW_SHOW - 33)) | (1 << (InceptorOracleParser.KW_MSCK - 33)) | (1 << (InceptorOracleParser.KW_REPAIR - 33)) | (1 << (InceptorOracleParser.KW_DIRECTORY - 33)) | (1 << (InceptorOracleParser.KW_LOCAL - 33)) | (1 << (InceptorOracleParser.KW_GLOBAL - 33)) | (1 << (InceptorOracleParser.KW_USING - 33)) | (1 << (InceptorOracleParser.KW_CLUSTER - 33)) | (1 << (InceptorOracleParser.KW_DISTRIBUTE - 33)) | (1 << (InceptorOracleParser.KW_SORT - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (InceptorOracleParser.KW_UNION - 65)) | (1 << (InceptorOracleParser.KW_LOAD - 65)) | (1 << (InceptorOracleParser.KW_EXPORT - 65)) | (1 << (InceptorOracleParser.KW_IMPORT - 65)) | (1 << (InceptorOracleParser.KW_DATA - 65)) | (1 << (InceptorOracleParser.KW_INPATH - 65)) | (1 << (InceptorOracleParser.KW_IS - 65)) | (1 << (InceptorOracleParser.KW_NULL - 65)) | (1 << (InceptorOracleParser.KW_NULLS - 65)) | (1 << (InceptorOracleParser.KW_CREATE - 65)) | (1 << (InceptorOracleParser.KW_EXTERNAL - 65)) | (1 << (InceptorOracleParser.KW_ALTER - 65)) | (1 << (InceptorOracleParser.KW_CHANGE - 65)) | (1 << (InceptorOracleParser.KW_FIRST - 65)) | (1 << (InceptorOracleParser.KW_LAST - 65)) | (1 << (InceptorOracleParser.KW_AFTER - 65)) | (1 << (InceptorOracleParser.KW_DESCRIBE - 65)) | (1 << (InceptorOracleParser.KW_DROP - 65)) | (1 << (InceptorOracleParser.KW_RENAME - 65)) | (1 << (InceptorOracleParser.KW_IGNORE - 65)) | (1 << (InceptorOracleParser.KW_RESPECT - 65)) | (1 << (InceptorOracleParser.KW_PROTECTION - 65)) | (1 << (InceptorOracleParser.KW_TO - 65)) | (1 << (InceptorOracleParser.KW_COMMENT - 65)) | (1 << (InceptorOracleParser.KW_PROMPT - 65)) | (1 << (InceptorOracleParser.KW_SPOOL - 65)) | (1 << (InceptorOracleParser.KW_BOOLEAN - 65)) | (1 << (InceptorOracleParser.KW_TINYINT - 65)) | (1 << (InceptorOracleParser.KW_BYTE - 65)) | (1 << (InceptorOracleParser.KW_SMALLINT - 65)) | (1 << (InceptorOracleParser.KW_INT - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (InceptorOracleParser.KW_BIGINT - 97)) | (1 << (InceptorOracleParser.KW_FLOAT - 97)) | (1 << (InceptorOracleParser.KW_DOUBLE - 97)) | (1 << (InceptorOracleParser.KW_DATE - 97)) | (1 << (InceptorOracleParser.KW_DATETIME - 97)) | (1 << (InceptorOracleParser.KW_TIMESTAMP - 97)) | (1 << (InceptorOracleParser.KW_TIME - 97)) | (1 << (InceptorOracleParser.KW_DECIMAL - 97)) | (1 << (InceptorOracleParser.KW_STRING - 97)) | (1 << (InceptorOracleParser.KW_GEO - 97)) | (1 << (InceptorOracleParser.KW_ARRAY - 97)) | (1 << (InceptorOracleParser.KW_STRUCT - 97)) | (1 << (InceptorOracleParser.KW_MAP - 97)) | (1 << (InceptorOracleParser.KW_UNIONTYPE - 97)) | (1 << (InceptorOracleParser.KW_REDUCE - 97)) | (1 << (InceptorOracleParser.KW_PARTITIONED - 97)) | (1 << (InceptorOracleParser.KW_ROUTED - 97)) | (1 << (InceptorOracleParser.KW_CLUSTERED - 97)) | (1 << (InceptorOracleParser.KW_SORTED - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (InceptorOracleParser.KW_NEXT - 129)) | (1 << (InceptorOracleParser.KW_NEXTVALUE - 129)) | (1 << (InceptorOracleParser.KW_UNLIMITED - 129)) | (1 << (InceptorOracleParser.KW_WIDCARD - 129)) | (1 << (InceptorOracleParser.KW_BUCKETS - 129)) | (1 << (InceptorOracleParser.KW_ROW - 129)) | (1 << (InceptorOracleParser.KW_ROWS - 129)) | (1 << (InceptorOracleParser.KW_FORMAT - 129)) | (1 << (InceptorOracleParser.KW_DELIMITED - 129)) | (1 << (InceptorOracleParser.KW_FIELDS - 129)) | (1 << (InceptorOracleParser.KW_TERMINATED - 129)) | (1 << (InceptorOracleParser.KW_ESCAPED - 129)) | (1 << (InceptorOracleParser.KW_COLLECTION - 129)) | (1 << (InceptorOracleParser.KW_ITEMS - 129)) | (1 << (InceptorOracleParser.KW_KEYS - 129)) | (1 << (InceptorOracleParser.KW_KEY_TYPE - 129)) | (1 << (InceptorOracleParser.KW_LINES - 129)) | (1 << (InceptorOracleParser.KW_STORED - 129)) | (1 << (InceptorOracleParser.KW_FILEFORMAT - 129)) | (1 << (InceptorOracleParser.KW_SEQUENCEFILE - 129)) | (1 << (InceptorOracleParser.KW_TEXTFILE - 129)) | (1 << (InceptorOracleParser.KW_CSVFILE - 129)) | (1 << (InceptorOracleParser.KW_FWCFILE - 129)) | (1 << (InceptorOracleParser.KW_RCFILE - 129)) | (1 << (InceptorOracleParser.KW_ORCFILE - 129)) | (1 << (InceptorOracleParser.KW_HOLODESK - 129)) | (1 << (InceptorOracleParser.KW_STELLARDB - 129)) | (1 << (InceptorOracleParser.KW_ORCTRANSACTIONFILE - 129)) | (1 << (InceptorOracleParser.KW_PARQUET - 129)))) !== 0) || ((((_la - 161)) & ~0x1f) == 0 && ((1 << (_la - 161)) & ((1 << (InceptorOracleParser.KW_HYPERDRIVE - 161)) | (1 << (InceptorOracleParser.KW_ESDRIVE - 161)) | (1 << (InceptorOracleParser.KW_INPUTFORMAT - 161)) | (1 << (InceptorOracleParser.KW_OUTPUTFORMAT - 161)) | (1 << (InceptorOracleParser.KW_INPUTDRIVER - 161)) | (1 << (InceptorOracleParser.KW_OUTPUTDRIVER - 161)) | (1 << (InceptorOracleParser.KW_OFFLINE - 161)) | (1 << (InceptorOracleParser.KW_ENABLE - 161)) | (1 << (InceptorOracleParser.KW_DISABLE - 161)) | (1 << (InceptorOracleParser.KW_READONLY - 161)) | (1 << (InceptorOracleParser.KW_NO_DROP - 161)) | (1 << (InceptorOracleParser.KW_LOCATION - 161)) | (1 << (InceptorOracleParser.KW_BUCKET - 161)) | (1 << (InceptorOracleParser.KW_OUT - 161)) | (1 << (InceptorOracleParser.KW_OF - 161)) | (1 << (InceptorOracleParser.KW_PERCENT - 161)) | (1 << (InceptorOracleParser.KW_CAST - 161)) | (1 << (InceptorOracleParser.KW_ADD - 161)) | (1 << (InceptorOracleParser.KW_REPLACE - 161)) | (1 << (InceptorOracleParser.KW_RLIKE - 161)) | (1 << (InceptorOracleParser.KW_REGEXP - 161)) | (1 << (InceptorOracleParser.KW_TEMPORARY - 161)) | (1 << (InceptorOracleParser.KW_RESOURCE - 161)) | (1 << (InceptorOracleParser.KW_RELOAD - 161)) | (1 << (InceptorOracleParser.KW_EXPLAIN - 161)) | (1 << (InceptorOracleParser.KW_FORMATTED - 161)) | (1 << (InceptorOracleParser.KW_PRETTY - 161)) | (1 << (InceptorOracleParser.KW_DEPENDENCY - 161)))) !== 0) || ((((_la - 193)) & ~0x1f) == 0 && ((1 << (_la - 193)) & ((1 << (InceptorOracleParser.KW_LOGICAL - 193)) | (1 << (InceptorOracleParser.KW_COST - 193)) | (1 << (InceptorOracleParser.KW_SERDE - 193)) | (1 << (InceptorOracleParser.KW_WITH - 193)) | (1 << (InceptorOracleParser.KW_WITHIN - 193)) | (1 << (InceptorOracleParser.KW_DEFERRED - 193)) | (1 << (InceptorOracleParser.KW_SERDEPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_DBPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_LIMIT - 193)) | (1 << (InceptorOracleParser.KW_SET - 193)) | (1 << (InceptorOracleParser.KW_UNSET - 193)) | (1 << (InceptorOracleParser.KW_TBLPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_IDXPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_VALUE_TYPE - 193)) | (1 << (InceptorOracleParser.KW_ELEM_TYPE - 193)) | (1 << (InceptorOracleParser.KW_CASE - 193)) | (1 << (InceptorOracleParser.KW_GOTO - 193)) | (1 << (InceptorOracleParser.KW_EXIT - 193)) | (1 << (InceptorOracleParser.KW_OPEN - 193)) | (1 << (InceptorOracleParser.KW_CLOSE - 193)) | (1 << (InceptorOracleParser.KW_PRIOR - 193)) | (1 << (InceptorOracleParser.KW_NOCYCLE - 193)) | (1 << (InceptorOracleParser.KW_MAPJOIN - 193)) | (1 << (InceptorOracleParser.KW_COMBINE - 193)) | (1 << (InceptorOracleParser.KW_COMBINE_STRUCT_INDEX - 193)) | (1 << (InceptorOracleParser.KW_GLKJOIN - 193)) | (1 << (InceptorOracleParser.KW_USE_INDEX - 193)))) !== 0) || ((((_la - 225)) & ~0x1f) == 0 && ((1 << (_la - 225)) & ((1 << (InceptorOracleParser.KW_STARGATE - 225)) | (1 << (InceptorOracleParser.KW_USE_BULKLOAD - 225)) | (1 << (InceptorOracleParser.KW_ADHOC - 225)) | (1 << (InceptorOracleParser.KW_PRECOMPILE - 225)) | (1 << (InceptorOracleParser.KW_STREAMTABLE - 225)) | (1 << (InceptorOracleParser.KW_STREAM - 225)) | (1 << (InceptorOracleParser.KW_RULEBASE - 225)) | (1 << (InceptorOracleParser.KW_RULEBASES - 225)) | (1 << (InceptorOracleParser.KW_RULE - 225)) | (1 << (InceptorOracleParser.KW_RULES - 225)) | (1 << (InceptorOracleParser.KW_MEET - 225)) | (1 << (InceptorOracleParser.KW_MUST - 225)) | (1 << (InceptorOracleParser.KW_MUSTNOT - 225)) | (1 << (InceptorOracleParser.KW_POLICY - 225)) | (1 << (InceptorOracleParser.KW_POLICIES - 225)) | (1 << (InceptorOracleParser.KW_REMOVE - 225)) | (1 << (InceptorOracleParser.KW_POLICYKEY - 225)) | (1 << (InceptorOracleParser.KW_POLICY_RULE - 225)) | (1 << (InceptorOracleParser.KW_LOOKUP - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTION - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTIONS - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTION_PROPERTIES - 225)) | (1 << (InceptorOracleParser.KW_HOLD_DDLTIME - 225)) | (1 << (InceptorOracleParser.KW_CLUSTERSTATUS - 225)))) !== 0) || ((((_la - 257)) & ~0x1f) == 0 && ((1 << (_la - 257)) & ((1 << (InceptorOracleParser.KW_UTC - 257)) | (1 << (InceptorOracleParser.KW_UTCTIMESTAMP - 257)) | (1 << (InceptorOracleParser.KW_LONG - 257)) | (1 << (InceptorOracleParser.KW_DELETE - 257)) | (1 << (InceptorOracleParser.KW_PLUS - 257)) | (1 << (InceptorOracleParser.KW_MINUS - 257)) | (1 << (InceptorOracleParser.KW_OP_CONCAT - 257)) | (1 << (InceptorOracleParser.KW_FETCH - 257)) | (1 << (InceptorOracleParser.KW_INTERSECT - 257)) | (1 << (InceptorOracleParser.KW_VIEW - 257)) | (1 << (InceptorOracleParser.KW_IN - 257)) | (1 << (InceptorOracleParser.KW_DATABASES - 257)) | (1 << (InceptorOracleParser.KW_MATERIALIZED - 257)) | (1 << (InceptorOracleParser.KW_SCHEMA - 257)) | (1 << (InceptorOracleParser.KW_SCHEMAS - 257)) | (1 << (InceptorOracleParser.KW_GRANT - 257)) | (1 << (InceptorOracleParser.KW_REVOKE - 257)) | (1 << (InceptorOracleParser.KW_SSL - 257)) | (1 << (InceptorOracleParser.KW_UNDO - 257)) | (1 << (InceptorOracleParser.KW_LOCK - 257)) | (1 << (InceptorOracleParser.KW_LOCKS - 257)) | (1 << (InceptorOracleParser.KW_UNLOCK - 257)) | (1 << (InceptorOracleParser.KW_SHARED - 257)) | (1 << (InceptorOracleParser.KW_EXCLUSIVE - 257)) | (1 << (InceptorOracleParser.KW_PROCEDURE - 257)) | (1 << (InceptorOracleParser.KW_UNSIGNED - 257)) | (1 << (InceptorOracleParser.KW_WHILE - 257)) | (1 << (InceptorOracleParser.KW_READ - 257)) | (1 << (InceptorOracleParser.KW_READS - 257)))) !== 0) || ((((_la - 289)) & ~0x1f) == 0 && ((1 << (_la - 289)) & ((1 << (InceptorOracleParser.KW_PURGE - 289)) | (1 << (InceptorOracleParser.KW_RANGE - 289)) | (1 << (InceptorOracleParser.KW_ANALYZE - 289)) | (1 << (InceptorOracleParser.KW_BEFORE - 289)) | (1 << (InceptorOracleParser.KW_BETWEEN - 289)) | (1 << (InceptorOracleParser.KW_BOTH - 289)) | (1 << (InceptorOracleParser.KW_BINARY - 289)) | (1 << (InceptorOracleParser.KW_DEFAULT - 289)) | (1 << (InceptorOracleParser.KW_TYPE - 289)) | (1 << (InceptorOracleParser.KW_TRIGGER - 289)) | (1 << (InceptorOracleParser.KW_RECORDREADER - 289)) | (1 << (InceptorOracleParser.KW_RECORDWRITER - 289)) | (1 << (InceptorOracleParser.KW_SEMI - 289)) | (1 << (InceptorOracleParser.KW_LATERAL - 289)) | (1 << (InceptorOracleParser.KW_TOUCH - 289)) | (1 << (InceptorOracleParser.KW_ARCHIVE - 289)) | (1 << (InceptorOracleParser.KW_UNARCHIVE - 289)) | (1 << (InceptorOracleParser.KW_COMPUTE - 289)) | (1 << (InceptorOracleParser.KW_STATISTICS - 289)) | (1 << (InceptorOracleParser.KW_USE - 289)) | (1 << (InceptorOracleParser.KW_OPTION - 289)) | (1 << (InceptorOracleParser.KW_CONCATENATE - 289)) | (1 << (InceptorOracleParser.KW_SHOW_DATABASE - 289)) | (1 << (InceptorOracleParser.KW_UPDATE - 289)) | (1 << (InceptorOracleParser.KW_BATCHUPDATE - 289)) | (1 << (InceptorOracleParser.KW_RESTRICT - 289)) | (1 << (InceptorOracleParser.KW_CASCADE - 289)) | (1 << (InceptorOracleParser.KW_SKEWED - 289)))) !== 0) || ((((_la - 323)) & ~0x1f) == 0 && ((1 << (_la - 323)) & ((1 << (InceptorOracleParser.KW_DIRECTORIES - 323)) | (1 << (InceptorOracleParser.KW_FOR - 323)) | (1 << (InceptorOracleParser.KW_LOOP - 323)) | (1 << (InceptorOracleParser.KW_WINDOWRESET - 323)) | (1 << (InceptorOracleParser.KW_SESSIONSTART - 323)) | (1 << (InceptorOracleParser.KW_SESSIONSTOP - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE_DISCARD - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE_COMPLETE - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOW - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOWSLIDELENGTH - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOWSEPARATED - 323)) | (1 << (InceptorOracleParser.KW_FOLLOWEDBY - 323)) | (1 << (InceptorOracleParser.KW_NOTFOLLOWEDBY - 323)) | (1 << (InceptorOracleParser.KW_NOTNEXT - 323)) | (1 << (InceptorOracleParser.KW_PATTERN_TIMES - 323)) | (1 << (InceptorOracleParser.KW_CURRVALUE - 323)) | (1 << (InceptorOracleParser.KW_GROUPING - 323)) | (1 << (InceptorOracleParser.KW_SETS - 323)))) !== 0) || ((((_la - 355)) & ~0x1f) == 0 && ((1 << (_la - 355)) & ((1 << (InceptorOracleParser.KW_TRUNCATE - 355)) | (1 << (InceptorOracleParser.KW_NOSCAN - 355)) | (1 << (InceptorOracleParser.KW_USER - 355)) | (1 << (InceptorOracleParser.KW_QUOTA - 355)) | (1 << (InceptorOracleParser.KW_PERMISSION - 355)) | (1 << (InceptorOracleParser.KW_ROLE - 355)) | (1 << (InceptorOracleParser.KW_ROLES - 355)) | (1 << (InceptorOracleParser.KW_INNER - 355)) | (1 << (InceptorOracleParser.KW_ADMIN - 355)) | (1 << (InceptorOracleParser.KW_OWNER - 355)) | (1 << (InceptorOracleParser.KW_PRINCIPALS - 355)) | (1 << (InceptorOracleParser.KW_RETURN - 355)) | (1 << (InceptorOracleParser.KW_CONTINUE - 355)) | (1 << (InceptorOracleParser.KW_BEGIN - 355)) | (1 << (InceptorOracleParser.KW_DECLARE - 355)) | (1 << (InceptorOracleParser.KW_CONSTANT - 355)) | (1 << (InceptorOracleParser.KW_CONSTRAINT - 355)) | (1 << (InceptorOracleParser.KW_VALUES - 355)) | (1 << (InceptorOracleParser.KW_YEAR - 355)) | (1 << (InceptorOracleParser.KW_MONTH - 355)) | (1 << (InceptorOracleParser.KW_DAY - 355)) | (1 << (InceptorOracleParser.KW_MINUTE - 355)) | (1 << (InceptorOracleParser.KW_HOUR - 355)))) !== 0) || ((((_la - 387)) & ~0x1f) == 0 && ((1 << (_la - 387)) & ((1 << (InceptorOracleParser.KW_SECOND - 387)) | (1 << (InceptorOracleParser.KW_INTERVAL - 387)) | (1 << (InceptorOracleParser.KW_EXTRACT - 387)) | (1 << (InceptorOracleParser.KW_SUBSTRING - 387)) | (1 << (InceptorOracleParser.KW_SYSDATE - 387)) | (1 << (InceptorOracleParser.KW_SYSTIMESTAMP - 387)) | (1 << (InceptorOracleParser.KW_SYSTIME - 387)) | (1 << (InceptorOracleParser.KW_EXEC - 387)) | (1 << (InceptorOracleParser.KW_MAXVALUE - 387)) | (1 << (InceptorOracleParser.KW_NOMAXVALUE - 387)) | (1 << (InceptorOracleParser.KW_MINVALUE - 387)) | (1 << (InceptorOracleParser.KW_NOMINVALUE - 387)) | (1 << (InceptorOracleParser.KW_CYCLE - 387)) | (1 << (InceptorOracleParser.KW_CACHE - 387)) | (1 << (InceptorOracleParser.KW_CACHEDMETRIC - 387)) | (1 << (InceptorOracleParser.KW_CACHEDMETRICS - 387)) | (1 << (InceptorOracleParser.KW_NOCACHE - 387)) | (1 << (InceptorOracleParser.KW_NOORDER - 387)) | (1 << (InceptorOracleParser.KW_MERGE - 387)) | (1 << (InceptorOracleParser.KW_PLANT - 387)) | (1 << (InceptorOracleParser.KW_IMMEDIATE - 387)) | (1 << (InceptorOracleParser.KW_COMPACT - 387)) | (1 << (InceptorOracleParser.KW_START - 387)) | (1 << (InceptorOracleParser.KW_STOP - 387)) | (1 << (InceptorOracleParser.KW_LIST - 387)))) !== 0) || ((((_la - 419)) & ~0x1f) == 0 && ((1 << (_la - 419)) & ((1 << (InceptorOracleParser.KW_TRANSACTION - 419)) | (1 << (InceptorOracleParser.KW_COMMIT - 419)) | (1 << (InceptorOracleParser.KW_ROLLBACK - 419)) | (1 << (InceptorOracleParser.KW_WORK - 419)) | (1 << (InceptorOracleParser.KW_SPACE - 419)) | (1 << (InceptorOracleParser.KW_CONF - 419)) | (1 << (InceptorOracleParser.KW_DEFINED - 419)) | (1 << (InceptorOracleParser.KW_INTEGER - 419)) | (1 << (InceptorOracleParser.KW_ONLY - 419)) | (1 << (InceptorOracleParser.KW_SERVER - 419)) | (1 << (InceptorOracleParser.KW_TRANSACTIONS - 419)) | (1 << (InceptorOracleParser.KW_URI - 419)) | (1 << (InceptorOracleParser.KW_WRITE - 419)) | (1 << (InceptorOracleParser.KW_FACL - 419)) | (1 << (InceptorOracleParser.KW_FOUND - 419)) | (1 << (InceptorOracleParser.KW_LEVEL - 419)) | (1 << (InceptorOracleParser.KW_PUBLIC - 419)) | (1 << (InceptorOracleParser.KW_LINKS - 419)) | (1 << (InceptorOracleParser.KW_CONNECT - 419)) | (1 << (InceptorOracleParser.KW_APPLICATION - 419)) | (1 << (InceptorOracleParser.KW_APPLICATIONS - 419)) | (1 << (InceptorOracleParser.KW_APP - 419)) | (1 << (InceptorOracleParser.KW_APPS - 419)) | (1 << (InceptorOracleParser.KW_INFINITE - 419)))) !== 0) || ((((_la - 451)) & ~0x1f) == 0 && ((1 << (_la - 451)) & ((1 << (InceptorOracleParser.KW_WAIT - 451)) | (1 << (InceptorOracleParser.KW_PRIMARY - 451)) | (1 << (InceptorOracleParser.KW_FOREIGN - 451)) | (1 << (InceptorOracleParser.KW_REFERENCES - 451)) | (1 << (InceptorOracleParser.KW_VALIDATE - 451)) | (1 << (InceptorOracleParser.KW_NOVALIDATE - 451)) | (1 << (InceptorOracleParser.KW_RELY - 451)) | (1 << (InceptorOracleParser.KW_NORELY - 451)) | (1 << (InceptorOracleParser.KW_KEY - 451)) | (1 << (InceptorOracleParser.KW_SEGMENT - 451)) | (1 << (InceptorOracleParser.KW_LENGTH - 451)) | (1 << (InceptorOracleParser.KW_ATTACH - 451)) | (1 << (InceptorOracleParser.KW_DETTACH - 451)) | (1 << (InceptorOracleParser.KW_SHARD - 451)) | (1 << (InceptorOracleParser.KW_NUM - 451)) | (1 << (InceptorOracleParser.KW_FULLTEXT - 451)) | (1 << (InceptorOracleParser.KW_TABLESIZE - 451)) | (1 << (InceptorOracleParser.KW_TABLET - 451)) | (1 << (InceptorOracleParser.KW_CAPACITY - 451)) | (1 << (InceptorOracleParser.KW_ANALYZER - 451)) | (1 << (InceptorOracleParser.KW_SYNC - 451)) | (1 << (InceptorOracleParser.KW_NO_INDEX - 451)) | (1 << (InceptorOracleParser.KW_LOG - 451)) | (1 << (InceptorOracleParser.KW_FILE - 451)) | (1 << (InceptorOracleParser.KW_JAR - 451)) | (1 << (InceptorOracleParser.KW_PERMANENT - 451)))) !== 0) || ((((_la - 485)) & ~0x1f) == 0 && ((1 << (_la - 485)) & ((1 << (InceptorOracleParser.KW_SCHEDULER - 485)) | (1 << (InceptorOracleParser.KW_MODE - 485)) | (1 << (InceptorOracleParser.LPAREN - 485)) | (1 << (InceptorOracleParser.DOUBLELESSTHAN - 485)))) !== 0) || ((((_la - 528)) & ~0x1f) == 0 && ((1 << (_la - 528)) & ((1 << (InceptorOracleParser.StringLiteral - 528)) | (1 << (InceptorOracleParser.CharSetLiteral - 528)) | (1 << (InceptorOracleParser.BigintLiteral - 528)) | (1 << (InceptorOracleParser.SmallintLiteral - 528)) | (1 << (InceptorOracleParser.TinyintLiteral - 528)) | (1 << (InceptorOracleParser.DecimalLiteral - 528)) | (1 << (InceptorOracleParser.Number - 528)) | (1 << (InceptorOracleParser.Identifier - 528)) | (1 << (InceptorOracleParser.CharSetName - 528)) | (1 << (InceptorOracleParser.HINT_LEFT - 528)) | (1 << (InceptorOracleParser.KW_NOCOPY - 528)) | (1 << (InceptorOracleParser.KW_VARRAY - 528)) | (1 << (InceptorOracleParser.KW_PACKAGE - 528)) | (1 << (InceptorOracleParser.KW_PACKAGES - 528)) | (1 << (InceptorOracleParser.KW_BODY - 528)) | (1 << (InceptorOracleParser.KW_ISOPEN - 528)) | (1 << (InceptorOracleParser.KW_NOTFOUND - 528)) | (1 << (InceptorOracleParser.KW_ROWCOUNT - 528)) | (1 << (InceptorOracleParser.KW_BULK_ROWCOUNT - 528)) | (1 << (InceptorOracleParser.KW_BULK_EXCEPTIONS - 528)) | (1 << (InceptorOracleParser.KW_REVERSE - 528)) | (1 << (InceptorOracleParser.KW_FORALL - 528)) | (1 << (InceptorOracleParser.KW_SAVE - 528)) | (1 << (InceptorOracleParser.KW_EXCEPTIONS - 528)))) !== 0) || ((((_la - 560)) & ~0x1f) == 0 && ((1 << (_la - 560)) & ((1 << (InceptorOracleParser.KW_INDICES - 560)) | (1 << (InceptorOracleParser.KW_REF - 560)) | (1 << (InceptorOracleParser.KW_RAISE - 560)) | (1 << (InceptorOracleParser.KW_YEARS - 560)) | (1 << (InceptorOracleParser.KW_MONTHS - 560)) | (1 << (InceptorOracleParser.KW_DAYS - 560)) | (1 << (InceptorOracleParser.KW_HOURS - 560)) | (1 << (InceptorOracleParser.KW_MINUTES - 560)) | (1 << (InceptorOracleParser.KW_SECONDS - 560)))) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	atomExecStatement() {
	    let localctx = new AtomExecStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1372, InceptorOracleParser.RULE_atomExecStatement);
	    try {
	        this.state = 7542;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,855,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7537;
	            this.updateStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7538;
	            this.deleteStatement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7539;
	            this.mergeStatement();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 7540;
	            this.queryStatementExpression();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 7541;
	            this.nonSqlStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	hintedStatement() {
	    let localctx = new HintedStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1374, InceptorOracleParser.RULE_hintedStatement);
	    try {
	        this.state = 7548;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case InceptorOracleParser.HINT_LEFT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7544;
	            this.hintClause();
	            this.state = 7545;
	            this.atomExecStatement();
	            break;
	        case InceptorOracleParser.KW_TRUE:
	        case InceptorOracleParser.KW_FALSE:
	        case InceptorOracleParser.KW_ALL:
	        case InceptorOracleParser.KW_LIKE:
	        case InceptorOracleParser.KW_NO:
	        case InceptorOracleParser.KW_ANY:
	        case InceptorOracleParser.KW_IF:
	        case InceptorOracleParser.KW_EXISTS:
	        case InceptorOracleParser.KW_ASC:
	        case InceptorOracleParser.KW_DESC:
	        case InceptorOracleParser.KW_ORDER:
	        case InceptorOracleParser.KW_GROUP:
	        case InceptorOracleParser.KW_INCREMENT:
	        case InceptorOracleParser.KW_BY:
	        case InceptorOracleParser.KW_HASH:
	        case InceptorOracleParser.KW_FROM:
	        case InceptorOracleParser.KW_SELECT:
	        case InceptorOracleParser.KW_INSERT:
	        case InceptorOracleParser.KW_BATCH_INSERT:
	        case InceptorOracleParser.KW_OVERWRITE:
	        case InceptorOracleParser.KW_OUTER:
	        case InceptorOracleParser.KW_STREAMJOB:
	        case InceptorOracleParser.KW_STREAMJOBS:
	        case InceptorOracleParser.KW_AT:
	        case InceptorOracleParser.KW_LEFT:
	        case InceptorOracleParser.KW_RIGHT:
	        case InceptorOracleParser.KW_FULL:
	        case InceptorOracleParser.KW_PARTITION:
	        case InceptorOracleParser.KW_PARTITIONS:
	        case InceptorOracleParser.KW_PATTERN:
	        case InceptorOracleParser.KW_TABLE:
	        case InceptorOracleParser.KW_TABLES:
	        case InceptorOracleParser.KW_SEQUENCE:
	        case InceptorOracleParser.KW_SEQUENCES:
	        case InceptorOracleParser.KW_COLUMNS:
	        case InceptorOracleParser.KW_INDEX:
	        case InceptorOracleParser.KW_INDEXES:
	        case InceptorOracleParser.KW_REBUILD:
	        case InceptorOracleParser.KW_FUNCTIONS:
	        case InceptorOracleParser.KW_SHOW:
	        case InceptorOracleParser.KW_MSCK:
	        case InceptorOracleParser.KW_REPAIR:
	        case InceptorOracleParser.KW_DIRECTORY:
	        case InceptorOracleParser.KW_LOCAL:
	        case InceptorOracleParser.KW_GLOBAL:
	        case InceptorOracleParser.KW_USING:
	        case InceptorOracleParser.KW_CLUSTER:
	        case InceptorOracleParser.KW_DISTRIBUTE:
	        case InceptorOracleParser.KW_SORT:
	        case InceptorOracleParser.KW_UNION:
	        case InceptorOracleParser.KW_LOAD:
	        case InceptorOracleParser.KW_EXPORT:
	        case InceptorOracleParser.KW_IMPORT:
	        case InceptorOracleParser.KW_DATA:
	        case InceptorOracleParser.KW_INPATH:
	        case InceptorOracleParser.KW_IS:
	        case InceptorOracleParser.KW_NULL:
	        case InceptorOracleParser.KW_NULLS:
	        case InceptorOracleParser.KW_CREATE:
	        case InceptorOracleParser.KW_EXTERNAL:
	        case InceptorOracleParser.KW_ALTER:
	        case InceptorOracleParser.KW_CHANGE:
	        case InceptorOracleParser.KW_FIRST:
	        case InceptorOracleParser.KW_LAST:
	        case InceptorOracleParser.KW_AFTER:
	        case InceptorOracleParser.KW_DESCRIBE:
	        case InceptorOracleParser.KW_DROP:
	        case InceptorOracleParser.KW_RENAME:
	        case InceptorOracleParser.KW_IGNORE:
	        case InceptorOracleParser.KW_RESPECT:
	        case InceptorOracleParser.KW_PROTECTION:
	        case InceptorOracleParser.KW_TO:
	        case InceptorOracleParser.KW_COMMENT:
	        case InceptorOracleParser.KW_PROMPT:
	        case InceptorOracleParser.KW_SPOOL:
	        case InceptorOracleParser.KW_BOOLEAN:
	        case InceptorOracleParser.KW_TINYINT:
	        case InceptorOracleParser.KW_BYTE:
	        case InceptorOracleParser.KW_SMALLINT:
	        case InceptorOracleParser.KW_INT:
	        case InceptorOracleParser.KW_BIGINT:
	        case InceptorOracleParser.KW_FLOAT:
	        case InceptorOracleParser.KW_DOUBLE:
	        case InceptorOracleParser.KW_DATE:
	        case InceptorOracleParser.KW_DATETIME:
	        case InceptorOracleParser.KW_TIMESTAMP:
	        case InceptorOracleParser.KW_TIME:
	        case InceptorOracleParser.KW_DECIMAL:
	        case InceptorOracleParser.KW_STRING:
	        case InceptorOracleParser.KW_GEO:
	        case InceptorOracleParser.KW_ARRAY:
	        case InceptorOracleParser.KW_STRUCT:
	        case InceptorOracleParser.KW_MAP:
	        case InceptorOracleParser.KW_UNIONTYPE:
	        case InceptorOracleParser.KW_REDUCE:
	        case InceptorOracleParser.KW_PARTITIONED:
	        case InceptorOracleParser.KW_ROUTED:
	        case InceptorOracleParser.KW_CLUSTERED:
	        case InceptorOracleParser.KW_SORTED:
	        case InceptorOracleParser.KW_NEXT:
	        case InceptorOracleParser.KW_NEXTVALUE:
	        case InceptorOracleParser.KW_UNLIMITED:
	        case InceptorOracleParser.KW_WIDCARD:
	        case InceptorOracleParser.KW_BUCKETS:
	        case InceptorOracleParser.KW_ROW:
	        case InceptorOracleParser.KW_ROWS:
	        case InceptorOracleParser.KW_FORMAT:
	        case InceptorOracleParser.KW_DELIMITED:
	        case InceptorOracleParser.KW_FIELDS:
	        case InceptorOracleParser.KW_TERMINATED:
	        case InceptorOracleParser.KW_ESCAPED:
	        case InceptorOracleParser.KW_COLLECTION:
	        case InceptorOracleParser.KW_ITEMS:
	        case InceptorOracleParser.KW_KEYS:
	        case InceptorOracleParser.KW_KEY_TYPE:
	        case InceptorOracleParser.KW_LINES:
	        case InceptorOracleParser.KW_STORED:
	        case InceptorOracleParser.KW_FILEFORMAT:
	        case InceptorOracleParser.KW_SEQUENCEFILE:
	        case InceptorOracleParser.KW_TEXTFILE:
	        case InceptorOracleParser.KW_CSVFILE:
	        case InceptorOracleParser.KW_FWCFILE:
	        case InceptorOracleParser.KW_RCFILE:
	        case InceptorOracleParser.KW_ORCFILE:
	        case InceptorOracleParser.KW_HOLODESK:
	        case InceptorOracleParser.KW_STELLARDB:
	        case InceptorOracleParser.KW_ORCTRANSACTIONFILE:
	        case InceptorOracleParser.KW_PARQUET:
	        case InceptorOracleParser.KW_HYPERDRIVE:
	        case InceptorOracleParser.KW_ESDRIVE:
	        case InceptorOracleParser.KW_INPUTFORMAT:
	        case InceptorOracleParser.KW_OUTPUTFORMAT:
	        case InceptorOracleParser.KW_INPUTDRIVER:
	        case InceptorOracleParser.KW_OUTPUTDRIVER:
	        case InceptorOracleParser.KW_OFFLINE:
	        case InceptorOracleParser.KW_ENABLE:
	        case InceptorOracleParser.KW_DISABLE:
	        case InceptorOracleParser.KW_READONLY:
	        case InceptorOracleParser.KW_NO_DROP:
	        case InceptorOracleParser.KW_LOCATION:
	        case InceptorOracleParser.KW_BUCKET:
	        case InceptorOracleParser.KW_OUT:
	        case InceptorOracleParser.KW_OF:
	        case InceptorOracleParser.KW_PERCENT:
	        case InceptorOracleParser.KW_CAST:
	        case InceptorOracleParser.KW_ADD:
	        case InceptorOracleParser.KW_REPLACE:
	        case InceptorOracleParser.KW_RLIKE:
	        case InceptorOracleParser.KW_REGEXP:
	        case InceptorOracleParser.KW_TEMPORARY:
	        case InceptorOracleParser.KW_RESOURCE:
	        case InceptorOracleParser.KW_RELOAD:
	        case InceptorOracleParser.KW_EXPLAIN:
	        case InceptorOracleParser.KW_FORMATTED:
	        case InceptorOracleParser.KW_PRETTY:
	        case InceptorOracleParser.KW_DEPENDENCY:
	        case InceptorOracleParser.KW_LOGICAL:
	        case InceptorOracleParser.KW_COST:
	        case InceptorOracleParser.KW_SERDE:
	        case InceptorOracleParser.KW_WITH:
	        case InceptorOracleParser.KW_WITHIN:
	        case InceptorOracleParser.KW_DEFERRED:
	        case InceptorOracleParser.KW_SERDEPROPERTIES:
	        case InceptorOracleParser.KW_DBPROPERTIES:
	        case InceptorOracleParser.KW_LIMIT:
	        case InceptorOracleParser.KW_SET:
	        case InceptorOracleParser.KW_UNSET:
	        case InceptorOracleParser.KW_TBLPROPERTIES:
	        case InceptorOracleParser.KW_IDXPROPERTIES:
	        case InceptorOracleParser.KW_VALUE_TYPE:
	        case InceptorOracleParser.KW_ELEM_TYPE:
	        case InceptorOracleParser.KW_CASE:
	        case InceptorOracleParser.KW_GOTO:
	        case InceptorOracleParser.KW_EXIT:
	        case InceptorOracleParser.KW_OPEN:
	        case InceptorOracleParser.KW_CLOSE:
	        case InceptorOracleParser.KW_PRIOR:
	        case InceptorOracleParser.KW_NOCYCLE:
	        case InceptorOracleParser.KW_MAPJOIN:
	        case InceptorOracleParser.KW_COMBINE:
	        case InceptorOracleParser.KW_COMBINE_STRUCT_INDEX:
	        case InceptorOracleParser.KW_GLKJOIN:
	        case InceptorOracleParser.KW_USE_INDEX:
	        case InceptorOracleParser.KW_STARGATE:
	        case InceptorOracleParser.KW_USE_BULKLOAD:
	        case InceptorOracleParser.KW_ADHOC:
	        case InceptorOracleParser.KW_PRECOMPILE:
	        case InceptorOracleParser.KW_STREAMTABLE:
	        case InceptorOracleParser.KW_STREAM:
	        case InceptorOracleParser.KW_RULEBASE:
	        case InceptorOracleParser.KW_RULEBASES:
	        case InceptorOracleParser.KW_RULE:
	        case InceptorOracleParser.KW_RULES:
	        case InceptorOracleParser.KW_MEET:
	        case InceptorOracleParser.KW_MUST:
	        case InceptorOracleParser.KW_MUSTNOT:
	        case InceptorOracleParser.KW_POLICY:
	        case InceptorOracleParser.KW_POLICIES:
	        case InceptorOracleParser.KW_REMOVE:
	        case InceptorOracleParser.KW_POLICYKEY:
	        case InceptorOracleParser.KW_POLICY_RULE:
	        case InceptorOracleParser.KW_LOOKUP:
	        case InceptorOracleParser.KW_RULE_FUNCTION:
	        case InceptorOracleParser.KW_RULE_FUNCTIONS:
	        case InceptorOracleParser.KW_RULE_FUNCTION_PROPERTIES:
	        case InceptorOracleParser.KW_HOLD_DDLTIME:
	        case InceptorOracleParser.KW_CLUSTERSTATUS:
	        case InceptorOracleParser.KW_UTC:
	        case InceptorOracleParser.KW_UTCTIMESTAMP:
	        case InceptorOracleParser.KW_LONG:
	        case InceptorOracleParser.KW_DELETE:
	        case InceptorOracleParser.KW_PLUS:
	        case InceptorOracleParser.KW_MINUS:
	        case InceptorOracleParser.KW_OP_CONCAT:
	        case InceptorOracleParser.KW_FETCH:
	        case InceptorOracleParser.KW_INTERSECT:
	        case InceptorOracleParser.KW_VIEW:
	        case InceptorOracleParser.KW_IN:
	        case InceptorOracleParser.KW_DATABASES:
	        case InceptorOracleParser.KW_MATERIALIZED:
	        case InceptorOracleParser.KW_SCHEMA:
	        case InceptorOracleParser.KW_SCHEMAS:
	        case InceptorOracleParser.KW_GRANT:
	        case InceptorOracleParser.KW_REVOKE:
	        case InceptorOracleParser.KW_SSL:
	        case InceptorOracleParser.KW_UNDO:
	        case InceptorOracleParser.KW_LOCK:
	        case InceptorOracleParser.KW_LOCKS:
	        case InceptorOracleParser.KW_UNLOCK:
	        case InceptorOracleParser.KW_SHARED:
	        case InceptorOracleParser.KW_EXCLUSIVE:
	        case InceptorOracleParser.KW_PROCEDURE:
	        case InceptorOracleParser.KW_UNSIGNED:
	        case InceptorOracleParser.KW_WHILE:
	        case InceptorOracleParser.KW_READ:
	        case InceptorOracleParser.KW_READS:
	        case InceptorOracleParser.KW_PURGE:
	        case InceptorOracleParser.KW_RANGE:
	        case InceptorOracleParser.KW_ANALYZE:
	        case InceptorOracleParser.KW_BEFORE:
	        case InceptorOracleParser.KW_BETWEEN:
	        case InceptorOracleParser.KW_BOTH:
	        case InceptorOracleParser.KW_BINARY:
	        case InceptorOracleParser.KW_DEFAULT:
	        case InceptorOracleParser.KW_TYPE:
	        case InceptorOracleParser.KW_TRIGGER:
	        case InceptorOracleParser.KW_RECORDREADER:
	        case InceptorOracleParser.KW_RECORDWRITER:
	        case InceptorOracleParser.KW_SEMI:
	        case InceptorOracleParser.KW_LATERAL:
	        case InceptorOracleParser.KW_TOUCH:
	        case InceptorOracleParser.KW_ARCHIVE:
	        case InceptorOracleParser.KW_UNARCHIVE:
	        case InceptorOracleParser.KW_COMPUTE:
	        case InceptorOracleParser.KW_STATISTICS:
	        case InceptorOracleParser.KW_USE:
	        case InceptorOracleParser.KW_OPTION:
	        case InceptorOracleParser.KW_CONCATENATE:
	        case InceptorOracleParser.KW_SHOW_DATABASE:
	        case InceptorOracleParser.KW_UPDATE:
	        case InceptorOracleParser.KW_BATCHUPDATE:
	        case InceptorOracleParser.KW_RESTRICT:
	        case InceptorOracleParser.KW_CASCADE:
	        case InceptorOracleParser.KW_SKEWED:
	        case InceptorOracleParser.KW_DIRECTORIES:
	        case InceptorOracleParser.KW_FOR:
	        case InceptorOracleParser.KW_LOOP:
	        case InceptorOracleParser.KW_WINDOWRESET:
	        case InceptorOracleParser.KW_SESSIONSTART:
	        case InceptorOracleParser.KW_SESSIONSTOP:
	        case InceptorOracleParser.KW_SESSIONEXPIRE:
	        case InceptorOracleParser.KW_SESSIONEXPIRE_DISCARD:
	        case InceptorOracleParser.KW_SESSIONEXPIRE_COMPLETE:
	        case InceptorOracleParser.KW_STREAMWINDOW:
	        case InceptorOracleParser.KW_STREAMWINDOWSLIDELENGTH:
	        case InceptorOracleParser.KW_STREAMWINDOWSEPARATED:
	        case InceptorOracleParser.KW_FOLLOWEDBY:
	        case InceptorOracleParser.KW_NOTFOLLOWEDBY:
	        case InceptorOracleParser.KW_NOTNEXT:
	        case InceptorOracleParser.KW_PATTERN_TIMES:
	        case InceptorOracleParser.KW_CURRVALUE:
	        case InceptorOracleParser.KW_GROUPING:
	        case InceptorOracleParser.KW_SETS:
	        case InceptorOracleParser.KW_TRUNCATE:
	        case InceptorOracleParser.KW_NOSCAN:
	        case InceptorOracleParser.KW_USER:
	        case InceptorOracleParser.KW_QUOTA:
	        case InceptorOracleParser.KW_PERMISSION:
	        case InceptorOracleParser.KW_ROLE:
	        case InceptorOracleParser.KW_ROLES:
	        case InceptorOracleParser.KW_INNER:
	        case InceptorOracleParser.KW_ADMIN:
	        case InceptorOracleParser.KW_OWNER:
	        case InceptorOracleParser.KW_PRINCIPALS:
	        case InceptorOracleParser.KW_RETURN:
	        case InceptorOracleParser.KW_CONTINUE:
	        case InceptorOracleParser.KW_BEGIN:
	        case InceptorOracleParser.KW_DECLARE:
	        case InceptorOracleParser.KW_CONSTANT:
	        case InceptorOracleParser.KW_CONSTRAINT:
	        case InceptorOracleParser.KW_VALUES:
	        case InceptorOracleParser.KW_YEAR:
	        case InceptorOracleParser.KW_MONTH:
	        case InceptorOracleParser.KW_DAY:
	        case InceptorOracleParser.KW_MINUTE:
	        case InceptorOracleParser.KW_HOUR:
	        case InceptorOracleParser.KW_SECOND:
	        case InceptorOracleParser.KW_INTERVAL:
	        case InceptorOracleParser.KW_EXTRACT:
	        case InceptorOracleParser.KW_SUBSTRING:
	        case InceptorOracleParser.KW_SYSDATE:
	        case InceptorOracleParser.KW_SYSTIMESTAMP:
	        case InceptorOracleParser.KW_SYSTIME:
	        case InceptorOracleParser.KW_EXEC:
	        case InceptorOracleParser.KW_MAXVALUE:
	        case InceptorOracleParser.KW_NOMAXVALUE:
	        case InceptorOracleParser.KW_MINVALUE:
	        case InceptorOracleParser.KW_NOMINVALUE:
	        case InceptorOracleParser.KW_CYCLE:
	        case InceptorOracleParser.KW_CACHE:
	        case InceptorOracleParser.KW_CACHEDMETRIC:
	        case InceptorOracleParser.KW_CACHEDMETRICS:
	        case InceptorOracleParser.KW_NOCACHE:
	        case InceptorOracleParser.KW_NOORDER:
	        case InceptorOracleParser.KW_MERGE:
	        case InceptorOracleParser.KW_PLANT:
	        case InceptorOracleParser.KW_IMMEDIATE:
	        case InceptorOracleParser.KW_COMPACT:
	        case InceptorOracleParser.KW_START:
	        case InceptorOracleParser.KW_STOP:
	        case InceptorOracleParser.KW_LIST:
	        case InceptorOracleParser.KW_TRANSACTION:
	        case InceptorOracleParser.KW_COMMIT:
	        case InceptorOracleParser.KW_ROLLBACK:
	        case InceptorOracleParser.KW_WORK:
	        case InceptorOracleParser.KW_SPACE:
	        case InceptorOracleParser.KW_CONF:
	        case InceptorOracleParser.KW_DEFINED:
	        case InceptorOracleParser.KW_INTEGER:
	        case InceptorOracleParser.KW_ONLY:
	        case InceptorOracleParser.KW_SERVER:
	        case InceptorOracleParser.KW_TRANSACTIONS:
	        case InceptorOracleParser.KW_URI:
	        case InceptorOracleParser.KW_WRITE:
	        case InceptorOracleParser.KW_FACL:
	        case InceptorOracleParser.KW_FOUND:
	        case InceptorOracleParser.KW_LEVEL:
	        case InceptorOracleParser.KW_PUBLIC:
	        case InceptorOracleParser.KW_LINKS:
	        case InceptorOracleParser.KW_CONNECT:
	        case InceptorOracleParser.KW_APPLICATION:
	        case InceptorOracleParser.KW_APPLICATIONS:
	        case InceptorOracleParser.KW_APP:
	        case InceptorOracleParser.KW_APPS:
	        case InceptorOracleParser.KW_INFINITE:
	        case InceptorOracleParser.KW_WAIT:
	        case InceptorOracleParser.KW_PRIMARY:
	        case InceptorOracleParser.KW_FOREIGN:
	        case InceptorOracleParser.KW_REFERENCES:
	        case InceptorOracleParser.KW_VALIDATE:
	        case InceptorOracleParser.KW_NOVALIDATE:
	        case InceptorOracleParser.KW_RELY:
	        case InceptorOracleParser.KW_NORELY:
	        case InceptorOracleParser.KW_KEY:
	        case InceptorOracleParser.KW_SEGMENT:
	        case InceptorOracleParser.KW_LENGTH:
	        case InceptorOracleParser.KW_ATTACH:
	        case InceptorOracleParser.KW_DETTACH:
	        case InceptorOracleParser.KW_SHARD:
	        case InceptorOracleParser.KW_NUM:
	        case InceptorOracleParser.KW_FULLTEXT:
	        case InceptorOracleParser.KW_TABLESIZE:
	        case InceptorOracleParser.KW_TABLET:
	        case InceptorOracleParser.KW_CAPACITY:
	        case InceptorOracleParser.KW_ANALYZER:
	        case InceptorOracleParser.KW_SYNC:
	        case InceptorOracleParser.KW_NO_INDEX:
	        case InceptorOracleParser.KW_LOG:
	        case InceptorOracleParser.KW_FILE:
	        case InceptorOracleParser.KW_JAR:
	        case InceptorOracleParser.KW_PERMANENT:
	        case InceptorOracleParser.KW_SCHEDULER:
	        case InceptorOracleParser.KW_MODE:
	        case InceptorOracleParser.LPAREN:
	        case InceptorOracleParser.StringLiteral:
	        case InceptorOracleParser.CharSetLiteral:
	        case InceptorOracleParser.BigintLiteral:
	        case InceptorOracleParser.SmallintLiteral:
	        case InceptorOracleParser.TinyintLiteral:
	        case InceptorOracleParser.DecimalLiteral:
	        case InceptorOracleParser.Number:
	        case InceptorOracleParser.Identifier:
	        case InceptorOracleParser.CharSetName:
	        case InceptorOracleParser.KW_NOCOPY:
	        case InceptorOracleParser.KW_VARRAY:
	        case InceptorOracleParser.KW_PACKAGE:
	        case InceptorOracleParser.KW_PACKAGES:
	        case InceptorOracleParser.KW_BODY:
	        case InceptorOracleParser.KW_ISOPEN:
	        case InceptorOracleParser.KW_NOTFOUND:
	        case InceptorOracleParser.KW_ROWCOUNT:
	        case InceptorOracleParser.KW_BULK_ROWCOUNT:
	        case InceptorOracleParser.KW_BULK_EXCEPTIONS:
	        case InceptorOracleParser.KW_REVERSE:
	        case InceptorOracleParser.KW_FORALL:
	        case InceptorOracleParser.KW_SAVE:
	        case InceptorOracleParser.KW_EXCEPTIONS:
	        case InceptorOracleParser.KW_INDICES:
	        case InceptorOracleParser.KW_REF:
	        case InceptorOracleParser.KW_RAISE:
	        case InceptorOracleParser.KW_YEARS:
	        case InceptorOracleParser.KW_MONTHS:
	        case InceptorOracleParser.KW_DAYS:
	        case InceptorOracleParser.KW_HOURS:
	        case InceptorOracleParser.KW_MINUTES:
	        case InceptorOracleParser.KW_SECONDS:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7547;
	            this.atomExecStatement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	label() {
	    let localctx = new LabelContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1376, InceptorOracleParser.RULE_label);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7550;
	        this.match(InceptorOracleParser.DOUBLELESSTHAN);
	        this.state = 7551;
	        this.match(InceptorOracleParser.Identifier);
	        this.state = 7552;
	        this.match(InceptorOracleParser.DOUBLEGREATERTHAN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labeledStatement() {
	    let localctx = new LabeledStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1378, InceptorOracleParser.RULE_labeledStatement);
	    var _la = 0; // Token type
	    try {
	        this.state = 7563;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case InceptorOracleParser.DOUBLELESSTHAN:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7554;
	            this.label();
	            this.state = 7555;
	            this.hintedStatement();
	            this.state = 7557;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.SEMICOLON) {
	                this.state = 7556;
	                this.match(InceptorOracleParser.SEMICOLON);
	            }

	            break;
	        case InceptorOracleParser.KW_TRUE:
	        case InceptorOracleParser.KW_FALSE:
	        case InceptorOracleParser.KW_ALL:
	        case InceptorOracleParser.KW_LIKE:
	        case InceptorOracleParser.KW_NO:
	        case InceptorOracleParser.KW_ANY:
	        case InceptorOracleParser.KW_IF:
	        case InceptorOracleParser.KW_EXISTS:
	        case InceptorOracleParser.KW_ASC:
	        case InceptorOracleParser.KW_DESC:
	        case InceptorOracleParser.KW_ORDER:
	        case InceptorOracleParser.KW_GROUP:
	        case InceptorOracleParser.KW_INCREMENT:
	        case InceptorOracleParser.KW_BY:
	        case InceptorOracleParser.KW_HASH:
	        case InceptorOracleParser.KW_FROM:
	        case InceptorOracleParser.KW_SELECT:
	        case InceptorOracleParser.KW_INSERT:
	        case InceptorOracleParser.KW_BATCH_INSERT:
	        case InceptorOracleParser.KW_OVERWRITE:
	        case InceptorOracleParser.KW_OUTER:
	        case InceptorOracleParser.KW_STREAMJOB:
	        case InceptorOracleParser.KW_STREAMJOBS:
	        case InceptorOracleParser.KW_AT:
	        case InceptorOracleParser.KW_LEFT:
	        case InceptorOracleParser.KW_RIGHT:
	        case InceptorOracleParser.KW_FULL:
	        case InceptorOracleParser.KW_PARTITION:
	        case InceptorOracleParser.KW_PARTITIONS:
	        case InceptorOracleParser.KW_PATTERN:
	        case InceptorOracleParser.KW_TABLE:
	        case InceptorOracleParser.KW_TABLES:
	        case InceptorOracleParser.KW_SEQUENCE:
	        case InceptorOracleParser.KW_SEQUENCES:
	        case InceptorOracleParser.KW_COLUMNS:
	        case InceptorOracleParser.KW_INDEX:
	        case InceptorOracleParser.KW_INDEXES:
	        case InceptorOracleParser.KW_REBUILD:
	        case InceptorOracleParser.KW_FUNCTIONS:
	        case InceptorOracleParser.KW_SHOW:
	        case InceptorOracleParser.KW_MSCK:
	        case InceptorOracleParser.KW_REPAIR:
	        case InceptorOracleParser.KW_DIRECTORY:
	        case InceptorOracleParser.KW_LOCAL:
	        case InceptorOracleParser.KW_GLOBAL:
	        case InceptorOracleParser.KW_USING:
	        case InceptorOracleParser.KW_CLUSTER:
	        case InceptorOracleParser.KW_DISTRIBUTE:
	        case InceptorOracleParser.KW_SORT:
	        case InceptorOracleParser.KW_UNION:
	        case InceptorOracleParser.KW_LOAD:
	        case InceptorOracleParser.KW_EXPORT:
	        case InceptorOracleParser.KW_IMPORT:
	        case InceptorOracleParser.KW_DATA:
	        case InceptorOracleParser.KW_INPATH:
	        case InceptorOracleParser.KW_IS:
	        case InceptorOracleParser.KW_NULL:
	        case InceptorOracleParser.KW_NULLS:
	        case InceptorOracleParser.KW_CREATE:
	        case InceptorOracleParser.KW_EXTERNAL:
	        case InceptorOracleParser.KW_ALTER:
	        case InceptorOracleParser.KW_CHANGE:
	        case InceptorOracleParser.KW_FIRST:
	        case InceptorOracleParser.KW_LAST:
	        case InceptorOracleParser.KW_AFTER:
	        case InceptorOracleParser.KW_DESCRIBE:
	        case InceptorOracleParser.KW_DROP:
	        case InceptorOracleParser.KW_RENAME:
	        case InceptorOracleParser.KW_IGNORE:
	        case InceptorOracleParser.KW_RESPECT:
	        case InceptorOracleParser.KW_PROTECTION:
	        case InceptorOracleParser.KW_TO:
	        case InceptorOracleParser.KW_COMMENT:
	        case InceptorOracleParser.KW_PROMPT:
	        case InceptorOracleParser.KW_SPOOL:
	        case InceptorOracleParser.KW_BOOLEAN:
	        case InceptorOracleParser.KW_TINYINT:
	        case InceptorOracleParser.KW_BYTE:
	        case InceptorOracleParser.KW_SMALLINT:
	        case InceptorOracleParser.KW_INT:
	        case InceptorOracleParser.KW_BIGINT:
	        case InceptorOracleParser.KW_FLOAT:
	        case InceptorOracleParser.KW_DOUBLE:
	        case InceptorOracleParser.KW_DATE:
	        case InceptorOracleParser.KW_DATETIME:
	        case InceptorOracleParser.KW_TIMESTAMP:
	        case InceptorOracleParser.KW_TIME:
	        case InceptorOracleParser.KW_DECIMAL:
	        case InceptorOracleParser.KW_STRING:
	        case InceptorOracleParser.KW_GEO:
	        case InceptorOracleParser.KW_ARRAY:
	        case InceptorOracleParser.KW_STRUCT:
	        case InceptorOracleParser.KW_MAP:
	        case InceptorOracleParser.KW_UNIONTYPE:
	        case InceptorOracleParser.KW_REDUCE:
	        case InceptorOracleParser.KW_PARTITIONED:
	        case InceptorOracleParser.KW_ROUTED:
	        case InceptorOracleParser.KW_CLUSTERED:
	        case InceptorOracleParser.KW_SORTED:
	        case InceptorOracleParser.KW_NEXT:
	        case InceptorOracleParser.KW_NEXTVALUE:
	        case InceptorOracleParser.KW_UNLIMITED:
	        case InceptorOracleParser.KW_WIDCARD:
	        case InceptorOracleParser.KW_BUCKETS:
	        case InceptorOracleParser.KW_ROW:
	        case InceptorOracleParser.KW_ROWS:
	        case InceptorOracleParser.KW_FORMAT:
	        case InceptorOracleParser.KW_DELIMITED:
	        case InceptorOracleParser.KW_FIELDS:
	        case InceptorOracleParser.KW_TERMINATED:
	        case InceptorOracleParser.KW_ESCAPED:
	        case InceptorOracleParser.KW_COLLECTION:
	        case InceptorOracleParser.KW_ITEMS:
	        case InceptorOracleParser.KW_KEYS:
	        case InceptorOracleParser.KW_KEY_TYPE:
	        case InceptorOracleParser.KW_LINES:
	        case InceptorOracleParser.KW_STORED:
	        case InceptorOracleParser.KW_FILEFORMAT:
	        case InceptorOracleParser.KW_SEQUENCEFILE:
	        case InceptorOracleParser.KW_TEXTFILE:
	        case InceptorOracleParser.KW_CSVFILE:
	        case InceptorOracleParser.KW_FWCFILE:
	        case InceptorOracleParser.KW_RCFILE:
	        case InceptorOracleParser.KW_ORCFILE:
	        case InceptorOracleParser.KW_HOLODESK:
	        case InceptorOracleParser.KW_STELLARDB:
	        case InceptorOracleParser.KW_ORCTRANSACTIONFILE:
	        case InceptorOracleParser.KW_PARQUET:
	        case InceptorOracleParser.KW_HYPERDRIVE:
	        case InceptorOracleParser.KW_ESDRIVE:
	        case InceptorOracleParser.KW_INPUTFORMAT:
	        case InceptorOracleParser.KW_OUTPUTFORMAT:
	        case InceptorOracleParser.KW_INPUTDRIVER:
	        case InceptorOracleParser.KW_OUTPUTDRIVER:
	        case InceptorOracleParser.KW_OFFLINE:
	        case InceptorOracleParser.KW_ENABLE:
	        case InceptorOracleParser.KW_DISABLE:
	        case InceptorOracleParser.KW_READONLY:
	        case InceptorOracleParser.KW_NO_DROP:
	        case InceptorOracleParser.KW_LOCATION:
	        case InceptorOracleParser.KW_BUCKET:
	        case InceptorOracleParser.KW_OUT:
	        case InceptorOracleParser.KW_OF:
	        case InceptorOracleParser.KW_PERCENT:
	        case InceptorOracleParser.KW_CAST:
	        case InceptorOracleParser.KW_ADD:
	        case InceptorOracleParser.KW_REPLACE:
	        case InceptorOracleParser.KW_RLIKE:
	        case InceptorOracleParser.KW_REGEXP:
	        case InceptorOracleParser.KW_TEMPORARY:
	        case InceptorOracleParser.KW_RESOURCE:
	        case InceptorOracleParser.KW_RELOAD:
	        case InceptorOracleParser.KW_EXPLAIN:
	        case InceptorOracleParser.KW_FORMATTED:
	        case InceptorOracleParser.KW_PRETTY:
	        case InceptorOracleParser.KW_DEPENDENCY:
	        case InceptorOracleParser.KW_LOGICAL:
	        case InceptorOracleParser.KW_COST:
	        case InceptorOracleParser.KW_SERDE:
	        case InceptorOracleParser.KW_WITH:
	        case InceptorOracleParser.KW_WITHIN:
	        case InceptorOracleParser.KW_DEFERRED:
	        case InceptorOracleParser.KW_SERDEPROPERTIES:
	        case InceptorOracleParser.KW_DBPROPERTIES:
	        case InceptorOracleParser.KW_LIMIT:
	        case InceptorOracleParser.KW_SET:
	        case InceptorOracleParser.KW_UNSET:
	        case InceptorOracleParser.KW_TBLPROPERTIES:
	        case InceptorOracleParser.KW_IDXPROPERTIES:
	        case InceptorOracleParser.KW_VALUE_TYPE:
	        case InceptorOracleParser.KW_ELEM_TYPE:
	        case InceptorOracleParser.KW_CASE:
	        case InceptorOracleParser.KW_GOTO:
	        case InceptorOracleParser.KW_EXIT:
	        case InceptorOracleParser.KW_OPEN:
	        case InceptorOracleParser.KW_CLOSE:
	        case InceptorOracleParser.KW_PRIOR:
	        case InceptorOracleParser.KW_NOCYCLE:
	        case InceptorOracleParser.KW_MAPJOIN:
	        case InceptorOracleParser.KW_COMBINE:
	        case InceptorOracleParser.KW_COMBINE_STRUCT_INDEX:
	        case InceptorOracleParser.KW_GLKJOIN:
	        case InceptorOracleParser.KW_USE_INDEX:
	        case InceptorOracleParser.KW_STARGATE:
	        case InceptorOracleParser.KW_USE_BULKLOAD:
	        case InceptorOracleParser.KW_ADHOC:
	        case InceptorOracleParser.KW_PRECOMPILE:
	        case InceptorOracleParser.KW_STREAMTABLE:
	        case InceptorOracleParser.KW_STREAM:
	        case InceptorOracleParser.KW_RULEBASE:
	        case InceptorOracleParser.KW_RULEBASES:
	        case InceptorOracleParser.KW_RULE:
	        case InceptorOracleParser.KW_RULES:
	        case InceptorOracleParser.KW_MEET:
	        case InceptorOracleParser.KW_MUST:
	        case InceptorOracleParser.KW_MUSTNOT:
	        case InceptorOracleParser.KW_POLICY:
	        case InceptorOracleParser.KW_POLICIES:
	        case InceptorOracleParser.KW_REMOVE:
	        case InceptorOracleParser.KW_POLICYKEY:
	        case InceptorOracleParser.KW_POLICY_RULE:
	        case InceptorOracleParser.KW_LOOKUP:
	        case InceptorOracleParser.KW_RULE_FUNCTION:
	        case InceptorOracleParser.KW_RULE_FUNCTIONS:
	        case InceptorOracleParser.KW_RULE_FUNCTION_PROPERTIES:
	        case InceptorOracleParser.KW_HOLD_DDLTIME:
	        case InceptorOracleParser.KW_CLUSTERSTATUS:
	        case InceptorOracleParser.KW_UTC:
	        case InceptorOracleParser.KW_UTCTIMESTAMP:
	        case InceptorOracleParser.KW_LONG:
	        case InceptorOracleParser.KW_DELETE:
	        case InceptorOracleParser.KW_PLUS:
	        case InceptorOracleParser.KW_MINUS:
	        case InceptorOracleParser.KW_OP_CONCAT:
	        case InceptorOracleParser.KW_FETCH:
	        case InceptorOracleParser.KW_INTERSECT:
	        case InceptorOracleParser.KW_VIEW:
	        case InceptorOracleParser.KW_IN:
	        case InceptorOracleParser.KW_DATABASES:
	        case InceptorOracleParser.KW_MATERIALIZED:
	        case InceptorOracleParser.KW_SCHEMA:
	        case InceptorOracleParser.KW_SCHEMAS:
	        case InceptorOracleParser.KW_GRANT:
	        case InceptorOracleParser.KW_REVOKE:
	        case InceptorOracleParser.KW_SSL:
	        case InceptorOracleParser.KW_UNDO:
	        case InceptorOracleParser.KW_LOCK:
	        case InceptorOracleParser.KW_LOCKS:
	        case InceptorOracleParser.KW_UNLOCK:
	        case InceptorOracleParser.KW_SHARED:
	        case InceptorOracleParser.KW_EXCLUSIVE:
	        case InceptorOracleParser.KW_PROCEDURE:
	        case InceptorOracleParser.KW_UNSIGNED:
	        case InceptorOracleParser.KW_WHILE:
	        case InceptorOracleParser.KW_READ:
	        case InceptorOracleParser.KW_READS:
	        case InceptorOracleParser.KW_PURGE:
	        case InceptorOracleParser.KW_RANGE:
	        case InceptorOracleParser.KW_ANALYZE:
	        case InceptorOracleParser.KW_BEFORE:
	        case InceptorOracleParser.KW_BETWEEN:
	        case InceptorOracleParser.KW_BOTH:
	        case InceptorOracleParser.KW_BINARY:
	        case InceptorOracleParser.KW_DEFAULT:
	        case InceptorOracleParser.KW_TYPE:
	        case InceptorOracleParser.KW_TRIGGER:
	        case InceptorOracleParser.KW_RECORDREADER:
	        case InceptorOracleParser.KW_RECORDWRITER:
	        case InceptorOracleParser.KW_SEMI:
	        case InceptorOracleParser.KW_LATERAL:
	        case InceptorOracleParser.KW_TOUCH:
	        case InceptorOracleParser.KW_ARCHIVE:
	        case InceptorOracleParser.KW_UNARCHIVE:
	        case InceptorOracleParser.KW_COMPUTE:
	        case InceptorOracleParser.KW_STATISTICS:
	        case InceptorOracleParser.KW_USE:
	        case InceptorOracleParser.KW_OPTION:
	        case InceptorOracleParser.KW_CONCATENATE:
	        case InceptorOracleParser.KW_SHOW_DATABASE:
	        case InceptorOracleParser.KW_UPDATE:
	        case InceptorOracleParser.KW_BATCHUPDATE:
	        case InceptorOracleParser.KW_RESTRICT:
	        case InceptorOracleParser.KW_CASCADE:
	        case InceptorOracleParser.KW_SKEWED:
	        case InceptorOracleParser.KW_DIRECTORIES:
	        case InceptorOracleParser.KW_FOR:
	        case InceptorOracleParser.KW_LOOP:
	        case InceptorOracleParser.KW_WINDOWRESET:
	        case InceptorOracleParser.KW_SESSIONSTART:
	        case InceptorOracleParser.KW_SESSIONSTOP:
	        case InceptorOracleParser.KW_SESSIONEXPIRE:
	        case InceptorOracleParser.KW_SESSIONEXPIRE_DISCARD:
	        case InceptorOracleParser.KW_SESSIONEXPIRE_COMPLETE:
	        case InceptorOracleParser.KW_STREAMWINDOW:
	        case InceptorOracleParser.KW_STREAMWINDOWSLIDELENGTH:
	        case InceptorOracleParser.KW_STREAMWINDOWSEPARATED:
	        case InceptorOracleParser.KW_FOLLOWEDBY:
	        case InceptorOracleParser.KW_NOTFOLLOWEDBY:
	        case InceptorOracleParser.KW_NOTNEXT:
	        case InceptorOracleParser.KW_PATTERN_TIMES:
	        case InceptorOracleParser.KW_CURRVALUE:
	        case InceptorOracleParser.KW_GROUPING:
	        case InceptorOracleParser.KW_SETS:
	        case InceptorOracleParser.KW_TRUNCATE:
	        case InceptorOracleParser.KW_NOSCAN:
	        case InceptorOracleParser.KW_USER:
	        case InceptorOracleParser.KW_QUOTA:
	        case InceptorOracleParser.KW_PERMISSION:
	        case InceptorOracleParser.KW_ROLE:
	        case InceptorOracleParser.KW_ROLES:
	        case InceptorOracleParser.KW_INNER:
	        case InceptorOracleParser.KW_ADMIN:
	        case InceptorOracleParser.KW_OWNER:
	        case InceptorOracleParser.KW_PRINCIPALS:
	        case InceptorOracleParser.KW_RETURN:
	        case InceptorOracleParser.KW_CONTINUE:
	        case InceptorOracleParser.KW_BEGIN:
	        case InceptorOracleParser.KW_DECLARE:
	        case InceptorOracleParser.KW_CONSTANT:
	        case InceptorOracleParser.KW_CONSTRAINT:
	        case InceptorOracleParser.KW_VALUES:
	        case InceptorOracleParser.KW_YEAR:
	        case InceptorOracleParser.KW_MONTH:
	        case InceptorOracleParser.KW_DAY:
	        case InceptorOracleParser.KW_MINUTE:
	        case InceptorOracleParser.KW_HOUR:
	        case InceptorOracleParser.KW_SECOND:
	        case InceptorOracleParser.KW_INTERVAL:
	        case InceptorOracleParser.KW_EXTRACT:
	        case InceptorOracleParser.KW_SUBSTRING:
	        case InceptorOracleParser.KW_SYSDATE:
	        case InceptorOracleParser.KW_SYSTIMESTAMP:
	        case InceptorOracleParser.KW_SYSTIME:
	        case InceptorOracleParser.KW_EXEC:
	        case InceptorOracleParser.KW_MAXVALUE:
	        case InceptorOracleParser.KW_NOMAXVALUE:
	        case InceptorOracleParser.KW_MINVALUE:
	        case InceptorOracleParser.KW_NOMINVALUE:
	        case InceptorOracleParser.KW_CYCLE:
	        case InceptorOracleParser.KW_CACHE:
	        case InceptorOracleParser.KW_CACHEDMETRIC:
	        case InceptorOracleParser.KW_CACHEDMETRICS:
	        case InceptorOracleParser.KW_NOCACHE:
	        case InceptorOracleParser.KW_NOORDER:
	        case InceptorOracleParser.KW_MERGE:
	        case InceptorOracleParser.KW_PLANT:
	        case InceptorOracleParser.KW_IMMEDIATE:
	        case InceptorOracleParser.KW_COMPACT:
	        case InceptorOracleParser.KW_START:
	        case InceptorOracleParser.KW_STOP:
	        case InceptorOracleParser.KW_LIST:
	        case InceptorOracleParser.KW_TRANSACTION:
	        case InceptorOracleParser.KW_COMMIT:
	        case InceptorOracleParser.KW_ROLLBACK:
	        case InceptorOracleParser.KW_WORK:
	        case InceptorOracleParser.KW_SPACE:
	        case InceptorOracleParser.KW_CONF:
	        case InceptorOracleParser.KW_DEFINED:
	        case InceptorOracleParser.KW_INTEGER:
	        case InceptorOracleParser.KW_ONLY:
	        case InceptorOracleParser.KW_SERVER:
	        case InceptorOracleParser.KW_TRANSACTIONS:
	        case InceptorOracleParser.KW_URI:
	        case InceptorOracleParser.KW_WRITE:
	        case InceptorOracleParser.KW_FACL:
	        case InceptorOracleParser.KW_FOUND:
	        case InceptorOracleParser.KW_LEVEL:
	        case InceptorOracleParser.KW_PUBLIC:
	        case InceptorOracleParser.KW_LINKS:
	        case InceptorOracleParser.KW_CONNECT:
	        case InceptorOracleParser.KW_APPLICATION:
	        case InceptorOracleParser.KW_APPLICATIONS:
	        case InceptorOracleParser.KW_APP:
	        case InceptorOracleParser.KW_APPS:
	        case InceptorOracleParser.KW_INFINITE:
	        case InceptorOracleParser.KW_WAIT:
	        case InceptorOracleParser.KW_PRIMARY:
	        case InceptorOracleParser.KW_FOREIGN:
	        case InceptorOracleParser.KW_REFERENCES:
	        case InceptorOracleParser.KW_VALIDATE:
	        case InceptorOracleParser.KW_NOVALIDATE:
	        case InceptorOracleParser.KW_RELY:
	        case InceptorOracleParser.KW_NORELY:
	        case InceptorOracleParser.KW_KEY:
	        case InceptorOracleParser.KW_SEGMENT:
	        case InceptorOracleParser.KW_LENGTH:
	        case InceptorOracleParser.KW_ATTACH:
	        case InceptorOracleParser.KW_DETTACH:
	        case InceptorOracleParser.KW_SHARD:
	        case InceptorOracleParser.KW_NUM:
	        case InceptorOracleParser.KW_FULLTEXT:
	        case InceptorOracleParser.KW_TABLESIZE:
	        case InceptorOracleParser.KW_TABLET:
	        case InceptorOracleParser.KW_CAPACITY:
	        case InceptorOracleParser.KW_ANALYZER:
	        case InceptorOracleParser.KW_SYNC:
	        case InceptorOracleParser.KW_NO_INDEX:
	        case InceptorOracleParser.KW_LOG:
	        case InceptorOracleParser.KW_FILE:
	        case InceptorOracleParser.KW_JAR:
	        case InceptorOracleParser.KW_PERMANENT:
	        case InceptorOracleParser.KW_SCHEDULER:
	        case InceptorOracleParser.KW_MODE:
	        case InceptorOracleParser.LPAREN:
	        case InceptorOracleParser.StringLiteral:
	        case InceptorOracleParser.CharSetLiteral:
	        case InceptorOracleParser.BigintLiteral:
	        case InceptorOracleParser.SmallintLiteral:
	        case InceptorOracleParser.TinyintLiteral:
	        case InceptorOracleParser.DecimalLiteral:
	        case InceptorOracleParser.Number:
	        case InceptorOracleParser.Identifier:
	        case InceptorOracleParser.CharSetName:
	        case InceptorOracleParser.HINT_LEFT:
	        case InceptorOracleParser.KW_NOCOPY:
	        case InceptorOracleParser.KW_VARRAY:
	        case InceptorOracleParser.KW_PACKAGE:
	        case InceptorOracleParser.KW_PACKAGES:
	        case InceptorOracleParser.KW_BODY:
	        case InceptorOracleParser.KW_ISOPEN:
	        case InceptorOracleParser.KW_NOTFOUND:
	        case InceptorOracleParser.KW_ROWCOUNT:
	        case InceptorOracleParser.KW_BULK_ROWCOUNT:
	        case InceptorOracleParser.KW_BULK_EXCEPTIONS:
	        case InceptorOracleParser.KW_REVERSE:
	        case InceptorOracleParser.KW_FORALL:
	        case InceptorOracleParser.KW_SAVE:
	        case InceptorOracleParser.KW_EXCEPTIONS:
	        case InceptorOracleParser.KW_INDICES:
	        case InceptorOracleParser.KW_REF:
	        case InceptorOracleParser.KW_RAISE:
	        case InceptorOracleParser.KW_YEARS:
	        case InceptorOracleParser.KW_MONTHS:
	        case InceptorOracleParser.KW_DAYS:
	        case InceptorOracleParser.KW_HOURS:
	        case InceptorOracleParser.KW_MINUTES:
	        case InceptorOracleParser.KW_SECONDS:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7559;
	            this.hintedStatement();
	            this.state = 7561;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.SEMICOLON) {
	                this.state = 7560;
	                this.match(InceptorOracleParser.SEMICOLON);
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dialectCreateOrReplaceStatement() {
	    let localctx = new DialectCreateOrReplaceStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1380, InceptorOracleParser.RULE_dialectCreateOrReplaceStatement);
	    try {
	        this.state = 7569;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,860,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7565;
	            this.createSQL92FunctionStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7566;
	            this.createSQL92ProcedureStatement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7567;
	            this.createPackageStatement();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 7568;
	            this.createPackageBodyStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dialectDropStatement() {
	    let localctx = new DialectDropStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1382, InceptorOracleParser.RULE_dialectDropStatement);
	    try {
	        this.state = 7574;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,861,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7571;
	            this.dropSQL92FunctionStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7572;
	            this.dropSQL92ProcedureStatement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7573;
	            this.dropPackageStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createSQL92FunctionStatement() {
	    let localctx = new CreateSQL92FunctionStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1384, InceptorOracleParser.RULE_createSQL92FunctionStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7576;
	        this.match(InceptorOracleParser.KW_FUNCTION);
	        this.state = 7578;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_IF) {
	            this.state = 7577;
	            this.ifNotExists();
	        }

	        this.state = 7580;
	        localctx.func_name = this.plFuncProcName();
	        this.state = 7581;
	        this.parameters();
	        this.state = 7582;
	        this.match(InceptorOracleParser.KW_RETURN);
	        this.state = 7583;
	        this.return_type_spec();
	        this.state = 7584;
	        _la = this._input.LA(1);
	        if(!(_la===InceptorOracleParser.KW_AS || _la===InceptorOracleParser.KW_IS)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 7586;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_DECLARE) {
	            this.state = 7585;
	            this.match(InceptorOracleParser.KW_DECLARE);
	        }

	        this.state = 7591;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << InceptorOracleParser.KW_TRUE) | (1 << InceptorOracleParser.KW_FALSE) | (1 << InceptorOracleParser.KW_ALL) | (1 << InceptorOracleParser.KW_LIKE) | (1 << InceptorOracleParser.KW_NO) | (1 << InceptorOracleParser.KW_ANY) | (1 << InceptorOracleParser.KW_EXISTS) | (1 << InceptorOracleParser.KW_ASC) | (1 << InceptorOracleParser.KW_DESC) | (1 << InceptorOracleParser.KW_ORDER) | (1 << InceptorOracleParser.KW_GROUP) | (1 << InceptorOracleParser.KW_INCREMENT) | (1 << InceptorOracleParser.KW_BY) | (1 << InceptorOracleParser.KW_HASH) | (1 << InceptorOracleParser.KW_INSERT) | (1 << InceptorOracleParser.KW_OVERWRITE) | (1 << InceptorOracleParser.KW_OUTER))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (InceptorOracleParser.KW_STREAMJOB - 33)) | (1 << (InceptorOracleParser.KW_STREAMJOBS - 33)) | (1 << (InceptorOracleParser.KW_AT - 33)) | (1 << (InceptorOracleParser.KW_LEFT - 33)) | (1 << (InceptorOracleParser.KW_RIGHT - 33)) | (1 << (InceptorOracleParser.KW_FULL - 33)) | (1 << (InceptorOracleParser.KW_PARTITION - 33)) | (1 << (InceptorOracleParser.KW_PARTITIONS - 33)) | (1 << (InceptorOracleParser.KW_PATTERN - 33)) | (1 << (InceptorOracleParser.KW_TABLE - 33)) | (1 << (InceptorOracleParser.KW_TABLES - 33)) | (1 << (InceptorOracleParser.KW_SEQUENCE - 33)) | (1 << (InceptorOracleParser.KW_SEQUENCES - 33)) | (1 << (InceptorOracleParser.KW_COLUMNS - 33)) | (1 << (InceptorOracleParser.KW_INDEX - 33)) | (1 << (InceptorOracleParser.KW_INDEXES - 33)) | (1 << (InceptorOracleParser.KW_REBUILD - 33)) | (1 << (InceptorOracleParser.KW_FUNCTIONS - 33)) | (1 << (InceptorOracleParser.KW_SHOW - 33)) | (1 << (InceptorOracleParser.KW_MSCK - 33)) | (1 << (InceptorOracleParser.KW_REPAIR - 33)) | (1 << (InceptorOracleParser.KW_DIRECTORY - 33)) | (1 << (InceptorOracleParser.KW_LOCAL - 33)) | (1 << (InceptorOracleParser.KW_GLOBAL - 33)) | (1 << (InceptorOracleParser.KW_USING - 33)) | (1 << (InceptorOracleParser.KW_CLUSTER - 33)) | (1 << (InceptorOracleParser.KW_DISTRIBUTE - 33)) | (1 << (InceptorOracleParser.KW_SORT - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (InceptorOracleParser.KW_UNION - 65)) | (1 << (InceptorOracleParser.KW_LOAD - 65)) | (1 << (InceptorOracleParser.KW_EXPORT - 65)) | (1 << (InceptorOracleParser.KW_IMPORT - 65)) | (1 << (InceptorOracleParser.KW_DATA - 65)) | (1 << (InceptorOracleParser.KW_INPATH - 65)) | (1 << (InceptorOracleParser.KW_IS - 65)) | (1 << (InceptorOracleParser.KW_NULLS - 65)) | (1 << (InceptorOracleParser.KW_CREATE - 65)) | (1 << (InceptorOracleParser.KW_EXTERNAL - 65)) | (1 << (InceptorOracleParser.KW_ALTER - 65)) | (1 << (InceptorOracleParser.KW_CHANGE - 65)) | (1 << (InceptorOracleParser.KW_FIRST - 65)) | (1 << (InceptorOracleParser.KW_LAST - 65)) | (1 << (InceptorOracleParser.KW_AFTER - 65)) | (1 << (InceptorOracleParser.KW_DESCRIBE - 65)) | (1 << (InceptorOracleParser.KW_DROP - 65)) | (1 << (InceptorOracleParser.KW_RENAME - 65)) | (1 << (InceptorOracleParser.KW_IGNORE - 65)) | (1 << (InceptorOracleParser.KW_RESPECT - 65)) | (1 << (InceptorOracleParser.KW_PROTECTION - 65)) | (1 << (InceptorOracleParser.KW_TO - 65)) | (1 << (InceptorOracleParser.KW_COMMENT - 65)) | (1 << (InceptorOracleParser.KW_PROMPT - 65)) | (1 << (InceptorOracleParser.KW_SPOOL - 65)) | (1 << (InceptorOracleParser.KW_BOOLEAN - 65)) | (1 << (InceptorOracleParser.KW_TINYINT - 65)) | (1 << (InceptorOracleParser.KW_BYTE - 65)) | (1 << (InceptorOracleParser.KW_SMALLINT - 65)) | (1 << (InceptorOracleParser.KW_INT - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (InceptorOracleParser.KW_BIGINT - 97)) | (1 << (InceptorOracleParser.KW_FLOAT - 97)) | (1 << (InceptorOracleParser.KW_DOUBLE - 97)) | (1 << (InceptorOracleParser.KW_DATE - 97)) | (1 << (InceptorOracleParser.KW_DATETIME - 97)) | (1 << (InceptorOracleParser.KW_TIMESTAMP - 97)) | (1 << (InceptorOracleParser.KW_TIME - 97)) | (1 << (InceptorOracleParser.KW_DECIMAL - 97)) | (1 << (InceptorOracleParser.KW_STRING - 97)) | (1 << (InceptorOracleParser.KW_GEO - 97)) | (1 << (InceptorOracleParser.KW_ARRAY - 97)) | (1 << (InceptorOracleParser.KW_STRUCT - 97)) | (1 << (InceptorOracleParser.KW_UNIONTYPE - 97)) | (1 << (InceptorOracleParser.KW_PARTITIONED - 97)) | (1 << (InceptorOracleParser.KW_ROUTED - 97)) | (1 << (InceptorOracleParser.KW_CLUSTERED - 97)) | (1 << (InceptorOracleParser.KW_SORTED - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (InceptorOracleParser.KW_NEXT - 129)) | (1 << (InceptorOracleParser.KW_NEXTVALUE - 129)) | (1 << (InceptorOracleParser.KW_BUCKETS - 129)) | (1 << (InceptorOracleParser.KW_ROW - 129)) | (1 << (InceptorOracleParser.KW_ROWS - 129)) | (1 << (InceptorOracleParser.KW_FORMAT - 129)) | (1 << (InceptorOracleParser.KW_DELIMITED - 129)) | (1 << (InceptorOracleParser.KW_FIELDS - 129)) | (1 << (InceptorOracleParser.KW_TERMINATED - 129)) | (1 << (InceptorOracleParser.KW_ESCAPED - 129)) | (1 << (InceptorOracleParser.KW_COLLECTION - 129)) | (1 << (InceptorOracleParser.KW_ITEMS - 129)) | (1 << (InceptorOracleParser.KW_KEYS - 129)) | (1 << (InceptorOracleParser.KW_KEY_TYPE - 129)) | (1 << (InceptorOracleParser.KW_LINES - 129)) | (1 << (InceptorOracleParser.KW_STORED - 129)) | (1 << (InceptorOracleParser.KW_FILEFORMAT - 129)) | (1 << (InceptorOracleParser.KW_SEQUENCEFILE - 129)) | (1 << (InceptorOracleParser.KW_TEXTFILE - 129)) | (1 << (InceptorOracleParser.KW_CSVFILE - 129)) | (1 << (InceptorOracleParser.KW_FWCFILE - 129)) | (1 << (InceptorOracleParser.KW_RCFILE - 129)) | (1 << (InceptorOracleParser.KW_ORCFILE - 129)) | (1 << (InceptorOracleParser.KW_HOLODESK - 129)) | (1 << (InceptorOracleParser.KW_STELLARDB - 129)) | (1 << (InceptorOracleParser.KW_ORCTRANSACTIONFILE - 129)) | (1 << (InceptorOracleParser.KW_PARQUET - 129)))) !== 0) || ((((_la - 161)) & ~0x1f) == 0 && ((1 << (_la - 161)) & ((1 << (InceptorOracleParser.KW_HYPERDRIVE - 161)) | (1 << (InceptorOracleParser.KW_ESDRIVE - 161)) | (1 << (InceptorOracleParser.KW_INPUTFORMAT - 161)) | (1 << (InceptorOracleParser.KW_OUTPUTFORMAT - 161)) | (1 << (InceptorOracleParser.KW_INPUTDRIVER - 161)) | (1 << (InceptorOracleParser.KW_OUTPUTDRIVER - 161)) | (1 << (InceptorOracleParser.KW_OFFLINE - 161)) | (1 << (InceptorOracleParser.KW_ENABLE - 161)) | (1 << (InceptorOracleParser.KW_DISABLE - 161)) | (1 << (InceptorOracleParser.KW_READONLY - 161)) | (1 << (InceptorOracleParser.KW_NO_DROP - 161)) | (1 << (InceptorOracleParser.KW_LOCATION - 161)) | (1 << (InceptorOracleParser.KW_BUCKET - 161)) | (1 << (InceptorOracleParser.KW_OUT - 161)) | (1 << (InceptorOracleParser.KW_OF - 161)) | (1 << (InceptorOracleParser.KW_PERCENT - 161)) | (1 << (InceptorOracleParser.KW_ADD - 161)) | (1 << (InceptorOracleParser.KW_REPLACE - 161)) | (1 << (InceptorOracleParser.KW_RLIKE - 161)) | (1 << (InceptorOracleParser.KW_REGEXP - 161)) | (1 << (InceptorOracleParser.KW_TEMPORARY - 161)) | (1 << (InceptorOracleParser.KW_RESOURCE - 161)) | (1 << (InceptorOracleParser.KW_RELOAD - 161)) | (1 << (InceptorOracleParser.KW_EXPLAIN - 161)) | (1 << (InceptorOracleParser.KW_FORMATTED - 161)) | (1 << (InceptorOracleParser.KW_PRETTY - 161)) | (1 << (InceptorOracleParser.KW_DEPENDENCY - 161)))) !== 0) || ((((_la - 193)) & ~0x1f) == 0 && ((1 << (_la - 193)) & ((1 << (InceptorOracleParser.KW_LOGICAL - 193)) | (1 << (InceptorOracleParser.KW_COST - 193)) | (1 << (InceptorOracleParser.KW_SERDE - 193)) | (1 << (InceptorOracleParser.KW_WITH - 193)) | (1 << (InceptorOracleParser.KW_WITHIN - 193)) | (1 << (InceptorOracleParser.KW_DEFERRED - 193)) | (1 << (InceptorOracleParser.KW_SERDEPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_DBPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_LIMIT - 193)) | (1 << (InceptorOracleParser.KW_SET - 193)) | (1 << (InceptorOracleParser.KW_UNSET - 193)) | (1 << (InceptorOracleParser.KW_TBLPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_IDXPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_VALUE_TYPE - 193)) | (1 << (InceptorOracleParser.KW_ELEM_TYPE - 193)) | (1 << (InceptorOracleParser.KW_PRIOR - 193)) | (1 << (InceptorOracleParser.KW_NOCYCLE - 193)) | (1 << (InceptorOracleParser.KW_MAPJOIN - 193)) | (1 << (InceptorOracleParser.KW_COMBINE - 193)) | (1 << (InceptorOracleParser.KW_COMBINE_STRUCT_INDEX - 193)) | (1 << (InceptorOracleParser.KW_GLKJOIN - 193)) | (1 << (InceptorOracleParser.KW_USE_INDEX - 193)))) !== 0) || ((((_la - 225)) & ~0x1f) == 0 && ((1 << (_la - 225)) & ((1 << (InceptorOracleParser.KW_STARGATE - 225)) | (1 << (InceptorOracleParser.KW_USE_BULKLOAD - 225)) | (1 << (InceptorOracleParser.KW_ADHOC - 225)) | (1 << (InceptorOracleParser.KW_PRECOMPILE - 225)) | (1 << (InceptorOracleParser.KW_STREAMTABLE - 225)) | (1 << (InceptorOracleParser.KW_STREAM - 225)) | (1 << (InceptorOracleParser.KW_RULEBASE - 225)) | (1 << (InceptorOracleParser.KW_RULEBASES - 225)) | (1 << (InceptorOracleParser.KW_RULE - 225)) | (1 << (InceptorOracleParser.KW_RULES - 225)) | (1 << (InceptorOracleParser.KW_MEET - 225)) | (1 << (InceptorOracleParser.KW_MUST - 225)) | (1 << (InceptorOracleParser.KW_MUSTNOT - 225)) | (1 << (InceptorOracleParser.KW_POLICY - 225)) | (1 << (InceptorOracleParser.KW_POLICIES - 225)) | (1 << (InceptorOracleParser.KW_REMOVE - 225)) | (1 << (InceptorOracleParser.KW_POLICYKEY - 225)) | (1 << (InceptorOracleParser.KW_POLICY_RULE - 225)) | (1 << (InceptorOracleParser.KW_LOOKUP - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTION - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTIONS - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTION_PROPERTIES - 225)) | (1 << (InceptorOracleParser.KW_HOLD_DDLTIME - 225)) | (1 << (InceptorOracleParser.KW_CLUSTERSTATUS - 225)))) !== 0) || ((((_la - 257)) & ~0x1f) == 0 && ((1 << (_la - 257)) & ((1 << (InceptorOracleParser.KW_UTC - 257)) | (1 << (InceptorOracleParser.KW_UTCTIMESTAMP - 257)) | (1 << (InceptorOracleParser.KW_LONG - 257)) | (1 << (InceptorOracleParser.KW_DELETE - 257)) | (1 << (InceptorOracleParser.KW_PLUS - 257)) | (1 << (InceptorOracleParser.KW_MINUS - 257)) | (1 << (InceptorOracleParser.KW_OP_CONCAT - 257)) | (1 << (InceptorOracleParser.KW_FETCH - 257)) | (1 << (InceptorOracleParser.KW_INTERSECT - 257)) | (1 << (InceptorOracleParser.KW_VIEW - 257)) | (1 << (InceptorOracleParser.KW_IN - 257)) | (1 << (InceptorOracleParser.KW_DATABASES - 257)) | (1 << (InceptorOracleParser.KW_MATERIALIZED - 257)) | (1 << (InceptorOracleParser.KW_SCHEMA - 257)) | (1 << (InceptorOracleParser.KW_SCHEMAS - 257)) | (1 << (InceptorOracleParser.KW_GRANT - 257)) | (1 << (InceptorOracleParser.KW_REVOKE - 257)) | (1 << (InceptorOracleParser.KW_SSL - 257)) | (1 << (InceptorOracleParser.KW_UNDO - 257)) | (1 << (InceptorOracleParser.KW_LOCK - 257)) | (1 << (InceptorOracleParser.KW_LOCKS - 257)) | (1 << (InceptorOracleParser.KW_UNLOCK - 257)) | (1 << (InceptorOracleParser.KW_SHARED - 257)) | (1 << (InceptorOracleParser.KW_EXCLUSIVE - 257)) | (1 << (InceptorOracleParser.KW_PROCEDURE - 257)) | (1 << (InceptorOracleParser.KW_UNSIGNED - 257)) | (1 << (InceptorOracleParser.KW_WHILE - 257)) | (1 << (InceptorOracleParser.KW_READ - 257)) | (1 << (InceptorOracleParser.KW_READS - 257)))) !== 0) || ((((_la - 289)) & ~0x1f) == 0 && ((1 << (_la - 289)) & ((1 << (InceptorOracleParser.KW_PURGE - 289)) | (1 << (InceptorOracleParser.KW_RANGE - 289)) | (1 << (InceptorOracleParser.KW_ANALYZE - 289)) | (1 << (InceptorOracleParser.KW_BEFORE - 289)) | (1 << (InceptorOracleParser.KW_BETWEEN - 289)) | (1 << (InceptorOracleParser.KW_BOTH - 289)) | (1 << (InceptorOracleParser.KW_BINARY - 289)) | (1 << (InceptorOracleParser.KW_CURSOR - 289)) | (1 << (InceptorOracleParser.KW_DEFAULT - 289)) | (1 << (InceptorOracleParser.KW_TYPE - 289)) | (1 << (InceptorOracleParser.KW_TRIGGER - 289)) | (1 << (InceptorOracleParser.KW_RECORDREADER - 289)) | (1 << (InceptorOracleParser.KW_RECORDWRITER - 289)) | (1 << (InceptorOracleParser.KW_SEMI - 289)) | (1 << (InceptorOracleParser.KW_LATERAL - 289)) | (1 << (InceptorOracleParser.KW_TOUCH - 289)) | (1 << (InceptorOracleParser.KW_ARCHIVE - 289)) | (1 << (InceptorOracleParser.KW_UNARCHIVE - 289)) | (1 << (InceptorOracleParser.KW_COMPUTE - 289)) | (1 << (InceptorOracleParser.KW_STATISTICS - 289)) | (1 << (InceptorOracleParser.KW_USE - 289)) | (1 << (InceptorOracleParser.KW_OPTION - 289)) | (1 << (InceptorOracleParser.KW_CONCATENATE - 289)) | (1 << (InceptorOracleParser.KW_SHOW_DATABASE - 289)) | (1 << (InceptorOracleParser.KW_UPDATE - 289)) | (1 << (InceptorOracleParser.KW_RESTRICT - 289)) | (1 << (InceptorOracleParser.KW_CASCADE - 289)) | (1 << (InceptorOracleParser.KW_SKEWED - 289)))) !== 0) || ((((_la - 323)) & ~0x1f) == 0 && ((1 << (_la - 323)) & ((1 << (InceptorOracleParser.KW_DIRECTORIES - 323)) | (1 << (InceptorOracleParser.KW_WINDOWRESET - 323)) | (1 << (InceptorOracleParser.KW_SESSIONSTART - 323)) | (1 << (InceptorOracleParser.KW_SESSIONSTOP - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE_DISCARD - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE_COMPLETE - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOW - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOWSLIDELENGTH - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOWSEPARATED - 323)) | (1 << (InceptorOracleParser.KW_FOLLOWEDBY - 323)) | (1 << (InceptorOracleParser.KW_NOTFOLLOWEDBY - 323)) | (1 << (InceptorOracleParser.KW_NOTNEXT - 323)) | (1 << (InceptorOracleParser.KW_PATTERN_TIMES - 323)) | (1 << (InceptorOracleParser.KW_CURRVALUE - 323)) | (1 << (InceptorOracleParser.KW_GROUPING - 323)) | (1 << (InceptorOracleParser.KW_SETS - 323)))) !== 0) || ((((_la - 355)) & ~0x1f) == 0 && ((1 << (_la - 355)) & ((1 << (InceptorOracleParser.KW_TRUNCATE - 355)) | (1 << (InceptorOracleParser.KW_NOSCAN - 355)) | (1 << (InceptorOracleParser.KW_USER - 355)) | (1 << (InceptorOracleParser.KW_QUOTA - 355)) | (1 << (InceptorOracleParser.KW_PERMISSION - 355)) | (1 << (InceptorOracleParser.KW_ROLE - 355)) | (1 << (InceptorOracleParser.KW_ROLES - 355)) | (1 << (InceptorOracleParser.KW_INNER - 355)) | (1 << (InceptorOracleParser.KW_ADMIN - 355)) | (1 << (InceptorOracleParser.KW_OWNER - 355)) | (1 << (InceptorOracleParser.KW_PRINCIPALS - 355)) | (1 << (InceptorOracleParser.KW_CONSTANT - 355)) | (1 << (InceptorOracleParser.KW_CONSTRAINT - 355)) | (1 << (InceptorOracleParser.KW_VALUES - 355)) | (1 << (InceptorOracleParser.KW_YEAR - 355)) | (1 << (InceptorOracleParser.KW_MONTH - 355)) | (1 << (InceptorOracleParser.KW_DAY - 355)) | (1 << (InceptorOracleParser.KW_MINUTE - 355)) | (1 << (InceptorOracleParser.KW_HOUR - 355)))) !== 0) || ((((_la - 387)) & ~0x1f) == 0 && ((1 << (_la - 387)) & ((1 << (InceptorOracleParser.KW_SECOND - 387)) | (1 << (InceptorOracleParser.KW_INTERVAL - 387)) | (1 << (InceptorOracleParser.KW_SYSDATE - 387)) | (1 << (InceptorOracleParser.KW_NOMAXVALUE - 387)) | (1 << (InceptorOracleParser.KW_MINVALUE - 387)) | (1 << (InceptorOracleParser.KW_NOMINVALUE - 387)) | (1 << (InceptorOracleParser.KW_CYCLE - 387)) | (1 << (InceptorOracleParser.KW_CACHE - 387)) | (1 << (InceptorOracleParser.KW_CACHEDMETRIC - 387)) | (1 << (InceptorOracleParser.KW_CACHEDMETRICS - 387)) | (1 << (InceptorOracleParser.KW_NOCACHE - 387)) | (1 << (InceptorOracleParser.KW_NOORDER - 387)) | (1 << (InceptorOracleParser.KW_MERGE - 387)) | (1 << (InceptorOracleParser.KW_PLANT - 387)) | (1 << (InceptorOracleParser.KW_IMMEDIATE - 387)) | (1 << (InceptorOracleParser.KW_COMPACT - 387)) | (1 << (InceptorOracleParser.KW_STOP - 387)) | (1 << (InceptorOracleParser.KW_LIST - 387)))) !== 0) || ((((_la - 419)) & ~0x1f) == 0 && ((1 << (_la - 419)) & ((1 << (InceptorOracleParser.KW_TRANSACTION - 419)) | (1 << (InceptorOracleParser.KW_WORK - 419)) | (1 << (InceptorOracleParser.KW_SPACE - 419)) | (1 << (InceptorOracleParser.KW_CONF - 419)) | (1 << (InceptorOracleParser.KW_DEFINED - 419)) | (1 << (InceptorOracleParser.KW_INTEGER - 419)) | (1 << (InceptorOracleParser.KW_ONLY - 419)) | (1 << (InceptorOracleParser.KW_SERVER - 419)) | (1 << (InceptorOracleParser.KW_TRANSACTIONS - 419)) | (1 << (InceptorOracleParser.KW_URI - 419)) | (1 << (InceptorOracleParser.KW_WRITE - 419)) | (1 << (InceptorOracleParser.KW_FACL - 419)) | (1 << (InceptorOracleParser.KW_FOUND - 419)) | (1 << (InceptorOracleParser.KW_LEVEL - 419)) | (1 << (InceptorOracleParser.KW_PUBLIC - 419)) | (1 << (InceptorOracleParser.KW_LINKS - 419)) | (1 << (InceptorOracleParser.KW_CONNECT - 419)) | (1 << (InceptorOracleParser.KW_APPLICATION - 419)) | (1 << (InceptorOracleParser.KW_APPLICATIONS - 419)) | (1 << (InceptorOracleParser.KW_APP - 419)) | (1 << (InceptorOracleParser.KW_APPS - 419)) | (1 << (InceptorOracleParser.KW_INFINITE - 419)))) !== 0) || ((((_la - 451)) & ~0x1f) == 0 && ((1 << (_la - 451)) & ((1 << (InceptorOracleParser.KW_WAIT - 451)) | (1 << (InceptorOracleParser.KW_PRIMARY - 451)) | (1 << (InceptorOracleParser.KW_FOREIGN - 451)) | (1 << (InceptorOracleParser.KW_REFERENCES - 451)) | (1 << (InceptorOracleParser.KW_VALIDATE - 451)) | (1 << (InceptorOracleParser.KW_NOVALIDATE - 451)) | (1 << (InceptorOracleParser.KW_RELY - 451)) | (1 << (InceptorOracleParser.KW_NORELY - 451)) | (1 << (InceptorOracleParser.KW_KEY - 451)) | (1 << (InceptorOracleParser.KW_SEGMENT - 451)) | (1 << (InceptorOracleParser.KW_LENGTH - 451)) | (1 << (InceptorOracleParser.KW_ATTACH - 451)) | (1 << (InceptorOracleParser.KW_DETTACH - 451)) | (1 << (InceptorOracleParser.KW_SHARD - 451)) | (1 << (InceptorOracleParser.KW_NUM - 451)) | (1 << (InceptorOracleParser.KW_FULLTEXT - 451)) | (1 << (InceptorOracleParser.KW_TABLESIZE - 451)) | (1 << (InceptorOracleParser.KW_TABLET - 451)) | (1 << (InceptorOracleParser.KW_CAPACITY - 451)) | (1 << (InceptorOracleParser.KW_ANALYZER - 451)) | (1 << (InceptorOracleParser.KW_SYNC - 451)) | (1 << (InceptorOracleParser.KW_NO_INDEX - 451)) | (1 << (InceptorOracleParser.KW_LOG - 451)) | (1 << (InceptorOracleParser.KW_FILE - 451)) | (1 << (InceptorOracleParser.KW_JAR - 451)) | (1 << (InceptorOracleParser.KW_PERMANENT - 451)))) !== 0) || _la===InceptorOracleParser.KW_SCHEDULER || _la===InceptorOracleParser.KW_MODE || ((((_la - 523)) & ~0x1f) == 0 && ((1 << (_la - 523)) & ((1 << (InceptorOracleParser.AT - 523)) | (1 << (InceptorOracleParser.Identifier - 523)) | (1 << (InceptorOracleParser.KW_NOCOPY - 523)) | (1 << (InceptorOracleParser.KW_VARRAY - 523)) | (1 << (InceptorOracleParser.KW_PACKAGE - 523)) | (1 << (InceptorOracleParser.KW_PACKAGES - 523)) | (1 << (InceptorOracleParser.KW_BODY - 523)) | (1 << (InceptorOracleParser.KW_ISOPEN - 523)) | (1 << (InceptorOracleParser.KW_NOTFOUND - 523)) | (1 << (InceptorOracleParser.KW_ROWCOUNT - 523)) | (1 << (InceptorOracleParser.KW_BULK_ROWCOUNT - 523)))) !== 0) || ((((_la - 555)) & ~0x1f) == 0 && ((1 << (_la - 555)) & ((1 << (InceptorOracleParser.KW_BULK_EXCEPTIONS - 555)) | (1 << (InceptorOracleParser.KW_REVERSE - 555)) | (1 << (InceptorOracleParser.KW_SAVE - 555)) | (1 << (InceptorOracleParser.KW_EXCEPTIONS - 555)) | (1 << (InceptorOracleParser.KW_INDICES - 555)) | (1 << (InceptorOracleParser.KW_REF - 555)) | (1 << (InceptorOracleParser.KW_PRAGMA - 555)) | (1 << (InceptorOracleParser.KW_YEARS - 555)) | (1 << (InceptorOracleParser.KW_MONTHS - 555)) | (1 << (InceptorOracleParser.KW_DAYS - 555)) | (1 << (InceptorOracleParser.KW_HOURS - 555)) | (1 << (InceptorOracleParser.KW_MINUTES - 555)) | (1 << (InceptorOracleParser.KW_SECONDS - 555)))) !== 0)) {
	            this.state = 7588;
	            this.declareSpecItem();
	            this.state = 7593;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 7594;
	        this.match(InceptorOracleParser.KW_BEGIN);
	        this.state = 7595;
	        this.plBlockBody();
	        this.state = 7597;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_EXCEPTION) {
	            this.state = 7596;
	            this.exceptionHandlers();
	        }

	        this.state = 7599;
	        this.match(InceptorOracleParser.KW_END);
	        this.state = 7601;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,866,this._ctx);
	        if(la_===1) {
	            this.state = 7600;
	            this.match(InceptorOracleParser.Identifier);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropSQL92FunctionStatement() {
	    let localctx = new DropSQL92FunctionStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1386, InceptorOracleParser.RULE_dropSQL92FunctionStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7603;
	        this.match(InceptorOracleParser.KW_DROP);
	        this.state = 7605;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_PLSQL) {
	            this.state = 7604;
	            this.match(InceptorOracleParser.KW_PLSQL);
	        }

	        this.state = 7607;
	        this.match(InceptorOracleParser.KW_FUNCTION);
	        this.state = 7609;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_IF) {
	            this.state = 7608;
	            this.ifExists();
	        }

	        this.state = 7611;
	        localctx.func_name = this.plFuncProcName();
	        this.state = 7613;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.LPAREN) {
	            this.state = 7612;
	            this.parameters();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createSQL92ProcedureStatement() {
	    let localctx = new CreateSQL92ProcedureStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1388, InceptorOracleParser.RULE_createSQL92ProcedureStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7615;
	        this.match(InceptorOracleParser.KW_PROCEDURE);
	        this.state = 7617;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_IF) {
	            this.state = 7616;
	            this.ifNotExists();
	        }

	        this.state = 7619;
	        localctx.procedure_name = this.plFuncProcName();
	        this.state = 7620;
	        this.parameters();
	        this.state = 7621;
	        _la = this._input.LA(1);
	        if(!(_la===InceptorOracleParser.KW_AS || _la===InceptorOracleParser.KW_IS)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 7623;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_DECLARE) {
	            this.state = 7622;
	            this.match(InceptorOracleParser.KW_DECLARE);
	        }

	        this.state = 7628;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << InceptorOracleParser.KW_TRUE) | (1 << InceptorOracleParser.KW_FALSE) | (1 << InceptorOracleParser.KW_ALL) | (1 << InceptorOracleParser.KW_LIKE) | (1 << InceptorOracleParser.KW_NO) | (1 << InceptorOracleParser.KW_ANY) | (1 << InceptorOracleParser.KW_EXISTS) | (1 << InceptorOracleParser.KW_ASC) | (1 << InceptorOracleParser.KW_DESC) | (1 << InceptorOracleParser.KW_ORDER) | (1 << InceptorOracleParser.KW_GROUP) | (1 << InceptorOracleParser.KW_INCREMENT) | (1 << InceptorOracleParser.KW_BY) | (1 << InceptorOracleParser.KW_HASH) | (1 << InceptorOracleParser.KW_INSERT) | (1 << InceptorOracleParser.KW_OVERWRITE) | (1 << InceptorOracleParser.KW_OUTER))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (InceptorOracleParser.KW_STREAMJOB - 33)) | (1 << (InceptorOracleParser.KW_STREAMJOBS - 33)) | (1 << (InceptorOracleParser.KW_AT - 33)) | (1 << (InceptorOracleParser.KW_LEFT - 33)) | (1 << (InceptorOracleParser.KW_RIGHT - 33)) | (1 << (InceptorOracleParser.KW_FULL - 33)) | (1 << (InceptorOracleParser.KW_PARTITION - 33)) | (1 << (InceptorOracleParser.KW_PARTITIONS - 33)) | (1 << (InceptorOracleParser.KW_PATTERN - 33)) | (1 << (InceptorOracleParser.KW_TABLE - 33)) | (1 << (InceptorOracleParser.KW_TABLES - 33)) | (1 << (InceptorOracleParser.KW_SEQUENCE - 33)) | (1 << (InceptorOracleParser.KW_SEQUENCES - 33)) | (1 << (InceptorOracleParser.KW_COLUMNS - 33)) | (1 << (InceptorOracleParser.KW_INDEX - 33)) | (1 << (InceptorOracleParser.KW_INDEXES - 33)) | (1 << (InceptorOracleParser.KW_REBUILD - 33)) | (1 << (InceptorOracleParser.KW_FUNCTIONS - 33)) | (1 << (InceptorOracleParser.KW_SHOW - 33)) | (1 << (InceptorOracleParser.KW_MSCK - 33)) | (1 << (InceptorOracleParser.KW_REPAIR - 33)) | (1 << (InceptorOracleParser.KW_DIRECTORY - 33)) | (1 << (InceptorOracleParser.KW_LOCAL - 33)) | (1 << (InceptorOracleParser.KW_GLOBAL - 33)) | (1 << (InceptorOracleParser.KW_USING - 33)) | (1 << (InceptorOracleParser.KW_CLUSTER - 33)) | (1 << (InceptorOracleParser.KW_DISTRIBUTE - 33)) | (1 << (InceptorOracleParser.KW_SORT - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (InceptorOracleParser.KW_UNION - 65)) | (1 << (InceptorOracleParser.KW_LOAD - 65)) | (1 << (InceptorOracleParser.KW_EXPORT - 65)) | (1 << (InceptorOracleParser.KW_IMPORT - 65)) | (1 << (InceptorOracleParser.KW_DATA - 65)) | (1 << (InceptorOracleParser.KW_INPATH - 65)) | (1 << (InceptorOracleParser.KW_IS - 65)) | (1 << (InceptorOracleParser.KW_NULLS - 65)) | (1 << (InceptorOracleParser.KW_CREATE - 65)) | (1 << (InceptorOracleParser.KW_EXTERNAL - 65)) | (1 << (InceptorOracleParser.KW_ALTER - 65)) | (1 << (InceptorOracleParser.KW_CHANGE - 65)) | (1 << (InceptorOracleParser.KW_FIRST - 65)) | (1 << (InceptorOracleParser.KW_LAST - 65)) | (1 << (InceptorOracleParser.KW_AFTER - 65)) | (1 << (InceptorOracleParser.KW_DESCRIBE - 65)) | (1 << (InceptorOracleParser.KW_DROP - 65)) | (1 << (InceptorOracleParser.KW_RENAME - 65)) | (1 << (InceptorOracleParser.KW_IGNORE - 65)) | (1 << (InceptorOracleParser.KW_RESPECT - 65)) | (1 << (InceptorOracleParser.KW_PROTECTION - 65)) | (1 << (InceptorOracleParser.KW_TO - 65)) | (1 << (InceptorOracleParser.KW_COMMENT - 65)) | (1 << (InceptorOracleParser.KW_PROMPT - 65)) | (1 << (InceptorOracleParser.KW_SPOOL - 65)) | (1 << (InceptorOracleParser.KW_BOOLEAN - 65)) | (1 << (InceptorOracleParser.KW_TINYINT - 65)) | (1 << (InceptorOracleParser.KW_BYTE - 65)) | (1 << (InceptorOracleParser.KW_SMALLINT - 65)) | (1 << (InceptorOracleParser.KW_INT - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (InceptorOracleParser.KW_BIGINT - 97)) | (1 << (InceptorOracleParser.KW_FLOAT - 97)) | (1 << (InceptorOracleParser.KW_DOUBLE - 97)) | (1 << (InceptorOracleParser.KW_DATE - 97)) | (1 << (InceptorOracleParser.KW_DATETIME - 97)) | (1 << (InceptorOracleParser.KW_TIMESTAMP - 97)) | (1 << (InceptorOracleParser.KW_TIME - 97)) | (1 << (InceptorOracleParser.KW_DECIMAL - 97)) | (1 << (InceptorOracleParser.KW_STRING - 97)) | (1 << (InceptorOracleParser.KW_GEO - 97)) | (1 << (InceptorOracleParser.KW_ARRAY - 97)) | (1 << (InceptorOracleParser.KW_STRUCT - 97)) | (1 << (InceptorOracleParser.KW_UNIONTYPE - 97)) | (1 << (InceptorOracleParser.KW_PARTITIONED - 97)) | (1 << (InceptorOracleParser.KW_ROUTED - 97)) | (1 << (InceptorOracleParser.KW_CLUSTERED - 97)) | (1 << (InceptorOracleParser.KW_SORTED - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (InceptorOracleParser.KW_NEXT - 129)) | (1 << (InceptorOracleParser.KW_NEXTVALUE - 129)) | (1 << (InceptorOracleParser.KW_BUCKETS - 129)) | (1 << (InceptorOracleParser.KW_ROW - 129)) | (1 << (InceptorOracleParser.KW_ROWS - 129)) | (1 << (InceptorOracleParser.KW_FORMAT - 129)) | (1 << (InceptorOracleParser.KW_DELIMITED - 129)) | (1 << (InceptorOracleParser.KW_FIELDS - 129)) | (1 << (InceptorOracleParser.KW_TERMINATED - 129)) | (1 << (InceptorOracleParser.KW_ESCAPED - 129)) | (1 << (InceptorOracleParser.KW_COLLECTION - 129)) | (1 << (InceptorOracleParser.KW_ITEMS - 129)) | (1 << (InceptorOracleParser.KW_KEYS - 129)) | (1 << (InceptorOracleParser.KW_KEY_TYPE - 129)) | (1 << (InceptorOracleParser.KW_LINES - 129)) | (1 << (InceptorOracleParser.KW_STORED - 129)) | (1 << (InceptorOracleParser.KW_FILEFORMAT - 129)) | (1 << (InceptorOracleParser.KW_SEQUENCEFILE - 129)) | (1 << (InceptorOracleParser.KW_TEXTFILE - 129)) | (1 << (InceptorOracleParser.KW_CSVFILE - 129)) | (1 << (InceptorOracleParser.KW_FWCFILE - 129)) | (1 << (InceptorOracleParser.KW_RCFILE - 129)) | (1 << (InceptorOracleParser.KW_ORCFILE - 129)) | (1 << (InceptorOracleParser.KW_HOLODESK - 129)) | (1 << (InceptorOracleParser.KW_STELLARDB - 129)) | (1 << (InceptorOracleParser.KW_ORCTRANSACTIONFILE - 129)) | (1 << (InceptorOracleParser.KW_PARQUET - 129)))) !== 0) || ((((_la - 161)) & ~0x1f) == 0 && ((1 << (_la - 161)) & ((1 << (InceptorOracleParser.KW_HYPERDRIVE - 161)) | (1 << (InceptorOracleParser.KW_ESDRIVE - 161)) | (1 << (InceptorOracleParser.KW_INPUTFORMAT - 161)) | (1 << (InceptorOracleParser.KW_OUTPUTFORMAT - 161)) | (1 << (InceptorOracleParser.KW_INPUTDRIVER - 161)) | (1 << (InceptorOracleParser.KW_OUTPUTDRIVER - 161)) | (1 << (InceptorOracleParser.KW_OFFLINE - 161)) | (1 << (InceptorOracleParser.KW_ENABLE - 161)) | (1 << (InceptorOracleParser.KW_DISABLE - 161)) | (1 << (InceptorOracleParser.KW_READONLY - 161)) | (1 << (InceptorOracleParser.KW_NO_DROP - 161)) | (1 << (InceptorOracleParser.KW_LOCATION - 161)) | (1 << (InceptorOracleParser.KW_BUCKET - 161)) | (1 << (InceptorOracleParser.KW_OUT - 161)) | (1 << (InceptorOracleParser.KW_OF - 161)) | (1 << (InceptorOracleParser.KW_PERCENT - 161)) | (1 << (InceptorOracleParser.KW_ADD - 161)) | (1 << (InceptorOracleParser.KW_REPLACE - 161)) | (1 << (InceptorOracleParser.KW_RLIKE - 161)) | (1 << (InceptorOracleParser.KW_REGEXP - 161)) | (1 << (InceptorOracleParser.KW_TEMPORARY - 161)) | (1 << (InceptorOracleParser.KW_RESOURCE - 161)) | (1 << (InceptorOracleParser.KW_RELOAD - 161)) | (1 << (InceptorOracleParser.KW_EXPLAIN - 161)) | (1 << (InceptorOracleParser.KW_FORMATTED - 161)) | (1 << (InceptorOracleParser.KW_PRETTY - 161)) | (1 << (InceptorOracleParser.KW_DEPENDENCY - 161)))) !== 0) || ((((_la - 193)) & ~0x1f) == 0 && ((1 << (_la - 193)) & ((1 << (InceptorOracleParser.KW_LOGICAL - 193)) | (1 << (InceptorOracleParser.KW_COST - 193)) | (1 << (InceptorOracleParser.KW_SERDE - 193)) | (1 << (InceptorOracleParser.KW_WITH - 193)) | (1 << (InceptorOracleParser.KW_WITHIN - 193)) | (1 << (InceptorOracleParser.KW_DEFERRED - 193)) | (1 << (InceptorOracleParser.KW_SERDEPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_DBPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_LIMIT - 193)) | (1 << (InceptorOracleParser.KW_SET - 193)) | (1 << (InceptorOracleParser.KW_UNSET - 193)) | (1 << (InceptorOracleParser.KW_TBLPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_IDXPROPERTIES - 193)) | (1 << (InceptorOracleParser.KW_VALUE_TYPE - 193)) | (1 << (InceptorOracleParser.KW_ELEM_TYPE - 193)) | (1 << (InceptorOracleParser.KW_PRIOR - 193)) | (1 << (InceptorOracleParser.KW_NOCYCLE - 193)) | (1 << (InceptorOracleParser.KW_MAPJOIN - 193)) | (1 << (InceptorOracleParser.KW_COMBINE - 193)) | (1 << (InceptorOracleParser.KW_COMBINE_STRUCT_INDEX - 193)) | (1 << (InceptorOracleParser.KW_GLKJOIN - 193)) | (1 << (InceptorOracleParser.KW_USE_INDEX - 193)))) !== 0) || ((((_la - 225)) & ~0x1f) == 0 && ((1 << (_la - 225)) & ((1 << (InceptorOracleParser.KW_STARGATE - 225)) | (1 << (InceptorOracleParser.KW_USE_BULKLOAD - 225)) | (1 << (InceptorOracleParser.KW_ADHOC - 225)) | (1 << (InceptorOracleParser.KW_PRECOMPILE - 225)) | (1 << (InceptorOracleParser.KW_STREAMTABLE - 225)) | (1 << (InceptorOracleParser.KW_STREAM - 225)) | (1 << (InceptorOracleParser.KW_RULEBASE - 225)) | (1 << (InceptorOracleParser.KW_RULEBASES - 225)) | (1 << (InceptorOracleParser.KW_RULE - 225)) | (1 << (InceptorOracleParser.KW_RULES - 225)) | (1 << (InceptorOracleParser.KW_MEET - 225)) | (1 << (InceptorOracleParser.KW_MUST - 225)) | (1 << (InceptorOracleParser.KW_MUSTNOT - 225)) | (1 << (InceptorOracleParser.KW_POLICY - 225)) | (1 << (InceptorOracleParser.KW_POLICIES - 225)) | (1 << (InceptorOracleParser.KW_REMOVE - 225)) | (1 << (InceptorOracleParser.KW_POLICYKEY - 225)) | (1 << (InceptorOracleParser.KW_POLICY_RULE - 225)) | (1 << (InceptorOracleParser.KW_LOOKUP - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTION - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTIONS - 225)) | (1 << (InceptorOracleParser.KW_RULE_FUNCTION_PROPERTIES - 225)) | (1 << (InceptorOracleParser.KW_HOLD_DDLTIME - 225)) | (1 << (InceptorOracleParser.KW_CLUSTERSTATUS - 225)))) !== 0) || ((((_la - 257)) & ~0x1f) == 0 && ((1 << (_la - 257)) & ((1 << (InceptorOracleParser.KW_UTC - 257)) | (1 << (InceptorOracleParser.KW_UTCTIMESTAMP - 257)) | (1 << (InceptorOracleParser.KW_LONG - 257)) | (1 << (InceptorOracleParser.KW_DELETE - 257)) | (1 << (InceptorOracleParser.KW_PLUS - 257)) | (1 << (InceptorOracleParser.KW_MINUS - 257)) | (1 << (InceptorOracleParser.KW_OP_CONCAT - 257)) | (1 << (InceptorOracleParser.KW_FETCH - 257)) | (1 << (InceptorOracleParser.KW_INTERSECT - 257)) | (1 << (InceptorOracleParser.KW_VIEW - 257)) | (1 << (InceptorOracleParser.KW_IN - 257)) | (1 << (InceptorOracleParser.KW_DATABASES - 257)) | (1 << (InceptorOracleParser.KW_MATERIALIZED - 257)) | (1 << (InceptorOracleParser.KW_SCHEMA - 257)) | (1 << (InceptorOracleParser.KW_SCHEMAS - 257)) | (1 << (InceptorOracleParser.KW_GRANT - 257)) | (1 << (InceptorOracleParser.KW_REVOKE - 257)) | (1 << (InceptorOracleParser.KW_SSL - 257)) | (1 << (InceptorOracleParser.KW_UNDO - 257)) | (1 << (InceptorOracleParser.KW_LOCK - 257)) | (1 << (InceptorOracleParser.KW_LOCKS - 257)) | (1 << (InceptorOracleParser.KW_UNLOCK - 257)) | (1 << (InceptorOracleParser.KW_SHARED - 257)) | (1 << (InceptorOracleParser.KW_EXCLUSIVE - 257)) | (1 << (InceptorOracleParser.KW_PROCEDURE - 257)) | (1 << (InceptorOracleParser.KW_UNSIGNED - 257)) | (1 << (InceptorOracleParser.KW_WHILE - 257)) | (1 << (InceptorOracleParser.KW_READ - 257)) | (1 << (InceptorOracleParser.KW_READS - 257)))) !== 0) || ((((_la - 289)) & ~0x1f) == 0 && ((1 << (_la - 289)) & ((1 << (InceptorOracleParser.KW_PURGE - 289)) | (1 << (InceptorOracleParser.KW_RANGE - 289)) | (1 << (InceptorOracleParser.KW_ANALYZE - 289)) | (1 << (InceptorOracleParser.KW_BEFORE - 289)) | (1 << (InceptorOracleParser.KW_BETWEEN - 289)) | (1 << (InceptorOracleParser.KW_BOTH - 289)) | (1 << (InceptorOracleParser.KW_BINARY - 289)) | (1 << (InceptorOracleParser.KW_CURSOR - 289)) | (1 << (InceptorOracleParser.KW_DEFAULT - 289)) | (1 << (InceptorOracleParser.KW_TYPE - 289)) | (1 << (InceptorOracleParser.KW_TRIGGER - 289)) | (1 << (InceptorOracleParser.KW_RECORDREADER - 289)) | (1 << (InceptorOracleParser.KW_RECORDWRITER - 289)) | (1 << (InceptorOracleParser.KW_SEMI - 289)) | (1 << (InceptorOracleParser.KW_LATERAL - 289)) | (1 << (InceptorOracleParser.KW_TOUCH - 289)) | (1 << (InceptorOracleParser.KW_ARCHIVE - 289)) | (1 << (InceptorOracleParser.KW_UNARCHIVE - 289)) | (1 << (InceptorOracleParser.KW_COMPUTE - 289)) | (1 << (InceptorOracleParser.KW_STATISTICS - 289)) | (1 << (InceptorOracleParser.KW_USE - 289)) | (1 << (InceptorOracleParser.KW_OPTION - 289)) | (1 << (InceptorOracleParser.KW_CONCATENATE - 289)) | (1 << (InceptorOracleParser.KW_SHOW_DATABASE - 289)) | (1 << (InceptorOracleParser.KW_UPDATE - 289)) | (1 << (InceptorOracleParser.KW_RESTRICT - 289)) | (1 << (InceptorOracleParser.KW_CASCADE - 289)) | (1 << (InceptorOracleParser.KW_SKEWED - 289)))) !== 0) || ((((_la - 323)) & ~0x1f) == 0 && ((1 << (_la - 323)) & ((1 << (InceptorOracleParser.KW_DIRECTORIES - 323)) | (1 << (InceptorOracleParser.KW_WINDOWRESET - 323)) | (1 << (InceptorOracleParser.KW_SESSIONSTART - 323)) | (1 << (InceptorOracleParser.KW_SESSIONSTOP - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE_DISCARD - 323)) | (1 << (InceptorOracleParser.KW_SESSIONEXPIRE_COMPLETE - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOW - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOWSLIDELENGTH - 323)) | (1 << (InceptorOracleParser.KW_STREAMWINDOWSEPARATED - 323)) | (1 << (InceptorOracleParser.KW_FOLLOWEDBY - 323)) | (1 << (InceptorOracleParser.KW_NOTFOLLOWEDBY - 323)) | (1 << (InceptorOracleParser.KW_NOTNEXT - 323)) | (1 << (InceptorOracleParser.KW_PATTERN_TIMES - 323)) | (1 << (InceptorOracleParser.KW_CURRVALUE - 323)) | (1 << (InceptorOracleParser.KW_GROUPING - 323)) | (1 << (InceptorOracleParser.KW_SETS - 323)))) !== 0) || ((((_la - 355)) & ~0x1f) == 0 && ((1 << (_la - 355)) & ((1 << (InceptorOracleParser.KW_TRUNCATE - 355)) | (1 << (InceptorOracleParser.KW_NOSCAN - 355)) | (1 << (InceptorOracleParser.KW_USER - 355)) | (1 << (InceptorOracleParser.KW_QUOTA - 355)) | (1 << (InceptorOracleParser.KW_PERMISSION - 355)) | (1 << (InceptorOracleParser.KW_ROLE - 355)) | (1 << (InceptorOracleParser.KW_ROLES - 355)) | (1 << (InceptorOracleParser.KW_INNER - 355)) | (1 << (InceptorOracleParser.KW_ADMIN - 355)) | (1 << (InceptorOracleParser.KW_OWNER - 355)) | (1 << (InceptorOracleParser.KW_PRINCIPALS - 355)) | (1 << (InceptorOracleParser.KW_CONSTANT - 355)) | (1 << (InceptorOracleParser.KW_CONSTRAINT - 355)) | (1 << (InceptorOracleParser.KW_VALUES - 355)) | (1 << (InceptorOracleParser.KW_YEAR - 355)) | (1 << (InceptorOracleParser.KW_MONTH - 355)) | (1 << (InceptorOracleParser.KW_DAY - 355)) | (1 << (InceptorOracleParser.KW_MINUTE - 355)) | (1 << (InceptorOracleParser.KW_HOUR - 355)))) !== 0) || ((((_la - 387)) & ~0x1f) == 0 && ((1 << (_la - 387)) & ((1 << (InceptorOracleParser.KW_SECOND - 387)) | (1 << (InceptorOracleParser.KW_INTERVAL - 387)) | (1 << (InceptorOracleParser.KW_SYSDATE - 387)) | (1 << (InceptorOracleParser.KW_NOMAXVALUE - 387)) | (1 << (InceptorOracleParser.KW_MINVALUE - 387)) | (1 << (InceptorOracleParser.KW_NOMINVALUE - 387)) | (1 << (InceptorOracleParser.KW_CYCLE - 387)) | (1 << (InceptorOracleParser.KW_CACHE - 387)) | (1 << (InceptorOracleParser.KW_CACHEDMETRIC - 387)) | (1 << (InceptorOracleParser.KW_CACHEDMETRICS - 387)) | (1 << (InceptorOracleParser.KW_NOCACHE - 387)) | (1 << (InceptorOracleParser.KW_NOORDER - 387)) | (1 << (InceptorOracleParser.KW_MERGE - 387)) | (1 << (InceptorOracleParser.KW_PLANT - 387)) | (1 << (InceptorOracleParser.KW_IMMEDIATE - 387)) | (1 << (InceptorOracleParser.KW_COMPACT - 387)) | (1 << (InceptorOracleParser.KW_STOP - 387)) | (1 << (InceptorOracleParser.KW_LIST - 387)))) !== 0) || ((((_la - 419)) & ~0x1f) == 0 && ((1 << (_la - 419)) & ((1 << (InceptorOracleParser.KW_TRANSACTION - 419)) | (1 << (InceptorOracleParser.KW_WORK - 419)) | (1 << (InceptorOracleParser.KW_SPACE - 419)) | (1 << (InceptorOracleParser.KW_CONF - 419)) | (1 << (InceptorOracleParser.KW_DEFINED - 419)) | (1 << (InceptorOracleParser.KW_INTEGER - 419)) | (1 << (InceptorOracleParser.KW_ONLY - 419)) | (1 << (InceptorOracleParser.KW_SERVER - 419)) | (1 << (InceptorOracleParser.KW_TRANSACTIONS - 419)) | (1 << (InceptorOracleParser.KW_URI - 419)) | (1 << (InceptorOracleParser.KW_WRITE - 419)) | (1 << (InceptorOracleParser.KW_FACL - 419)) | (1 << (InceptorOracleParser.KW_FOUND - 419)) | (1 << (InceptorOracleParser.KW_LEVEL - 419)) | (1 << (InceptorOracleParser.KW_PUBLIC - 419)) | (1 << (InceptorOracleParser.KW_LINKS - 419)) | (1 << (InceptorOracleParser.KW_CONNECT - 419)) | (1 << (InceptorOracleParser.KW_APPLICATION - 419)) | (1 << (InceptorOracleParser.KW_APPLICATIONS - 419)) | (1 << (InceptorOracleParser.KW_APP - 419)) | (1 << (InceptorOracleParser.KW_APPS - 419)) | (1 << (InceptorOracleParser.KW_INFINITE - 419)))) !== 0) || ((((_la - 451)) & ~0x1f) == 0 && ((1 << (_la - 451)) & ((1 << (InceptorOracleParser.KW_WAIT - 451)) | (1 << (InceptorOracleParser.KW_PRIMARY - 451)) | (1 << (InceptorOracleParser.KW_FOREIGN - 451)) | (1 << (InceptorOracleParser.KW_REFERENCES - 451)) | (1 << (InceptorOracleParser.KW_VALIDATE - 451)) | (1 << (InceptorOracleParser.KW_NOVALIDATE - 451)) | (1 << (InceptorOracleParser.KW_RELY - 451)) | (1 << (InceptorOracleParser.KW_NORELY - 451)) | (1 << (InceptorOracleParser.KW_KEY - 451)) | (1 << (InceptorOracleParser.KW_SEGMENT - 451)) | (1 << (InceptorOracleParser.KW_LENGTH - 451)) | (1 << (InceptorOracleParser.KW_ATTACH - 451)) | (1 << (InceptorOracleParser.KW_DETTACH - 451)) | (1 << (InceptorOracleParser.KW_SHARD - 451)) | (1 << (InceptorOracleParser.KW_NUM - 451)) | (1 << (InceptorOracleParser.KW_FULLTEXT - 451)) | (1 << (InceptorOracleParser.KW_TABLESIZE - 451)) | (1 << (InceptorOracleParser.KW_TABLET - 451)) | (1 << (InceptorOracleParser.KW_CAPACITY - 451)) | (1 << (InceptorOracleParser.KW_ANALYZER - 451)) | (1 << (InceptorOracleParser.KW_SYNC - 451)) | (1 << (InceptorOracleParser.KW_NO_INDEX - 451)) | (1 << (InceptorOracleParser.KW_LOG - 451)) | (1 << (InceptorOracleParser.KW_FILE - 451)) | (1 << (InceptorOracleParser.KW_JAR - 451)) | (1 << (InceptorOracleParser.KW_PERMANENT - 451)))) !== 0) || _la===InceptorOracleParser.KW_SCHEDULER || _la===InceptorOracleParser.KW_MODE || ((((_la - 523)) & ~0x1f) == 0 && ((1 << (_la - 523)) & ((1 << (InceptorOracleParser.AT - 523)) | (1 << (InceptorOracleParser.Identifier - 523)) | (1 << (InceptorOracleParser.KW_NOCOPY - 523)) | (1 << (InceptorOracleParser.KW_VARRAY - 523)) | (1 << (InceptorOracleParser.KW_PACKAGE - 523)) | (1 << (InceptorOracleParser.KW_PACKAGES - 523)) | (1 << (InceptorOracleParser.KW_BODY - 523)) | (1 << (InceptorOracleParser.KW_ISOPEN - 523)) | (1 << (InceptorOracleParser.KW_NOTFOUND - 523)) | (1 << (InceptorOracleParser.KW_ROWCOUNT - 523)) | (1 << (InceptorOracleParser.KW_BULK_ROWCOUNT - 523)))) !== 0) || ((((_la - 555)) & ~0x1f) == 0 && ((1 << (_la - 555)) & ((1 << (InceptorOracleParser.KW_BULK_EXCEPTIONS - 555)) | (1 << (InceptorOracleParser.KW_REVERSE - 555)) | (1 << (InceptorOracleParser.KW_SAVE - 555)) | (1 << (InceptorOracleParser.KW_EXCEPTIONS - 555)) | (1 << (InceptorOracleParser.KW_INDICES - 555)) | (1 << (InceptorOracleParser.KW_REF - 555)) | (1 << (InceptorOracleParser.KW_PRAGMA - 555)) | (1 << (InceptorOracleParser.KW_YEARS - 555)) | (1 << (InceptorOracleParser.KW_MONTHS - 555)) | (1 << (InceptorOracleParser.KW_DAYS - 555)) | (1 << (InceptorOracleParser.KW_HOURS - 555)) | (1 << (InceptorOracleParser.KW_MINUTES - 555)) | (1 << (InceptorOracleParser.KW_SECONDS - 555)))) !== 0)) {
	            this.state = 7625;
	            this.declareSpecItem();
	            this.state = 7630;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 7631;
	        this.match(InceptorOracleParser.KW_BEGIN);
	        this.state = 7632;
	        this.plBlockBody();
	        this.state = 7634;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_EXCEPTION) {
	            this.state = 7633;
	            this.exceptionHandlers();
	        }

	        this.state = 7636;
	        this.match(InceptorOracleParser.KW_END);
	        this.state = 7638;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,874,this._ctx);
	        if(la_===1) {
	            this.state = 7637;
	            this.match(InceptorOracleParser.Identifier);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropSQL92ProcedureStatement() {
	    let localctx = new DropSQL92ProcedureStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1390, InceptorOracleParser.RULE_dropSQL92ProcedureStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7640;
	        this.match(InceptorOracleParser.KW_DROP);
	        this.state = 7642;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_PLSQL) {
	            this.state = 7641;
	            this.match(InceptorOracleParser.KW_PLSQL);
	        }

	        this.state = 7644;
	        this.match(InceptorOracleParser.KW_PROCEDURE);
	        this.state = 7646;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_IF) {
	            this.state = 7645;
	            this.ifExists();
	        }

	        this.state = 7648;
	        localctx.procedure_name = this.plFuncProcName();
	        this.state = 7650;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.LPAREN) {
	            this.state = 7649;
	            this.parameters();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dialectLimitClause() {
	    let localctx = new DialectLimitClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1392, InceptorOracleParser.RULE_dialectLimitClause);
	    var _la = 0; // Token type
	    try {
	        this.state = 7673;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,880,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7652;
	            this.match(InceptorOracleParser.KW_LIMIT);
	            this.state = 7655;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,878,this._ctx);
	            if(la_===1) {
	                this.state = 7653;
	                localctx.offset = this.match(InceptorOracleParser.Number);
	                this.state = 7654;
	                this.match(InceptorOracleParser.COMMA);

	            }
	            this.state = 7657;
	            localctx.num = this.match(InceptorOracleParser.Number);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7658;
	            this.match(InceptorOracleParser.KW_FETCH);
	            this.state = 7659;
	            this.match(InceptorOracleParser.KW_FIRST);
	            this.state = 7660;
	            localctx.num = this.match(InceptorOracleParser.Number);
	            this.state = 7661;
	            this.match(InceptorOracleParser.KW_ROWS);
	            this.state = 7662;
	            this.match(InceptorOracleParser.KW_ONLY);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7666;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_OFFSET) {
	                this.state = 7663;
	                this.match(InceptorOracleParser.KW_OFFSET);
	                this.state = 7664;
	                localctx.value = this.match(InceptorOracleParser.Number);
	                this.state = 7665;
	                this.match(InceptorOracleParser.KW_ROWS);
	            }

	            this.state = 7668;
	            this.match(InceptorOracleParser.KW_FETCH);
	            this.state = 7669;
	            this.match(InceptorOracleParser.KW_NEXT);
	            this.state = 7670;
	            localctx.num = this.match(InceptorOracleParser.Number);
	            this.state = 7671;
	            this.match(InceptorOracleParser.KW_ROWS);
	            this.state = 7672;
	            this.match(InceptorOracleParser.KW_ONLY);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dialectCreateTemporaryTableStatement() {
	    let localctx = new DialectCreateTemporaryTableStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1394, InceptorOracleParser.RULE_dialectCreateTemporaryTableStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7675;
	        this.match(InceptorOracleParser.KW_CREATE);
	        this.state = 7676;
	        localctx.temp = this.match(InceptorOracleParser.KW_TEMPORARY);
	        this.state = 7678;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_EXTERNAL) {
	            this.state = 7677;
	            localctx.ext = this.match(InceptorOracleParser.KW_EXTERNAL);
	        }

	        this.state = 7680;
	        this.match(InceptorOracleParser.KW_TABLE);
	        this.state = 7682;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_IF) {
	            this.state = 7681;
	            this.ifNotExists();
	        }

	        this.state = 7684;
	        localctx.name = this.tableName();
	        this.state = 7685;
	        this.tableDefinitionClause();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dialectCreateTableStatement() {
	    let localctx = new DialectCreateTableStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1396, InceptorOracleParser.RULE_dialectCreateTableStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7687;
	        this.match(InceptorOracleParser.KW_CREATE);
	        this.state = 7689;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_EXTERNAL) {
	            this.state = 7688;
	            localctx.ext = this.match(InceptorOracleParser.KW_EXTERNAL);
	        }

	        this.state = 7691;
	        this.match(InceptorOracleParser.KW_TABLE);
	        this.state = 7693;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_IF) {
	            this.state = 7692;
	            this.ifNotExists();
	        }

	        this.state = 7695;
	        localctx.name = this.tableName();
	        this.state = 7696;
	        this.tableDefinitionClause();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dialectWithNoData() {
	    let localctx = new DialectWithNoDataContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1398, InceptorOracleParser.RULE_dialectWithNoData);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7698;
	        this.match(InceptorOracleParser.KW_WITH);
	        this.state = 7699;
	        this.match(InceptorOracleParser.KW_NO);
	        this.state = 7700;
	        this.match(InceptorOracleParser.KW_DATA);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dialectcolumnConstraint() {
	    let localctx = new DialectcolumnConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1400, InceptorOracleParser.RULE_dialectcolumnConstraint);
	    try {
	        this.state = 7705;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case InceptorOracleParser.KW_NOT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7702;
	            this.match(InceptorOracleParser.KW_NOT);
	            this.state = 7703;
	            this.match(InceptorOracleParser.KW_NULL);
	            break;
	        case InceptorOracleParser.KW_UNIQUE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7704;
	            this.match(InceptorOracleParser.KW_UNIQUE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dialectTableDefinitionClause() {
	    let localctx = new DialectTableDefinitionClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1402, InceptorOracleParser.RULE_dialectTableDefinitionClause);
	    var _la = 0; // Token type
	    try {
	        this.state = 7767;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case InceptorOracleParser.KW_LIKE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7707;
	            localctx.like = this.match(InceptorOracleParser.KW_LIKE);
	            this.state = 7708;
	            localctx.likeName = this.tableName();
	            this.state = 7710;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_LOCATION) {
	                this.state = 7709;
	                this.tableLocation();
	            }

	            this.state = 7713;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_TBLPROPERTIES) {
	                this.state = 7712;
	                this.tablePropertiesPrefixed();
	            }

	            break;
	        case InceptorOracleParser.EOF:
	        case InceptorOracleParser.KW_AS:
	        case InceptorOracleParser.KW_COMMENT:
	        case InceptorOracleParser.KW_PARTITIONED:
	        case InceptorOracleParser.KW_ROUTED:
	        case InceptorOracleParser.KW_CLUSTERED:
	        case InceptorOracleParser.KW_ROW:
	        case InceptorOracleParser.KW_STORED:
	        case InceptorOracleParser.KW_LOCATION:
	        case InceptorOracleParser.KW_WITH:
	        case InceptorOracleParser.KW_TBLPROPERTIES:
	        case InceptorOracleParser.KW_SKEWED:
	        case InceptorOracleParser.KW_LOG:
	        case InceptorOracleParser.SEMICOLON:
	        case InceptorOracleParser.LPAREN:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7719;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.LPAREN) {
	                this.state = 7715;
	                this.match(InceptorOracleParser.LPAREN);
	                this.state = 7716;
	                this.columnNameTypeOrConstraintList();
	                this.state = 7717;
	                this.match(InceptorOracleParser.RPAREN);
	            }

	            this.state = 7722;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_COMMENT) {
	                this.state = 7721;
	                this.tableComment();
	            }

	            this.state = 7725;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_PARTITIONED) {
	                this.state = 7724;
	                this.tablePartition();
	            }

	            this.state = 7728;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_ROUTED) {
	                this.state = 7727;
	                this.tableRoute();
	            }

	            this.state = 7731;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_CLUSTERED) {
	                this.state = 7730;
	                this.tableBuckets();
	            }

	            this.state = 7734;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_SKEWED) {
	                this.state = 7733;
	                this.tableSkewed();
	            }

	            this.state = 7737;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_ROW) {
	                this.state = 7736;
	                this.tableRowFormat();
	            }

	            this.state = 7740;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_STORED) {
	                this.state = 7739;
	                this.tableFileFormat();
	            }

	            this.state = 7743;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,896,this._ctx);
	            if(la_===1) {
	                this.state = 7742;
	                this.esProps();

	            }
	            this.state = 7746;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,897,this._ctx);
	            if(la_===1) {
	                this.state = 7745;
	                this.holoProps();

	            }
	            this.state = 7749;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,898,this._ctx);
	            if(la_===1) {
	                this.state = 7748;
	                this.holoTableSize();

	            }
	            this.state = 7752;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_LOCATION) {
	                this.state = 7751;
	                this.tableLocation();
	            }

	            this.state = 7755;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_TBLPROPERTIES) {
	                this.state = 7754;
	                this.tablePropertiesPrefixed();
	            }

	            this.state = 7758;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_LOG) {
	                this.state = 7757;
	                this.erroLogTableSpec();
	            }

	            this.state = 7762;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_AS) {
	                this.state = 7760;
	                this.match(InceptorOracleParser.KW_AS);
	                this.state = 7761;
	                this.ctasTargetStatement();
	            }

	            this.state = 7765;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===InceptorOracleParser.KW_WITH) {
	                this.state = 7764;
	                this.noDataCopyQuery();
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dialectPrimitiveType() {
	    let localctx = new DialectPrimitiveTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1404, InceptorOracleParser.RULE_dialectPrimitiveType);
	    try {
	        this.state = 7780;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case InceptorOracleParser.KW_NVARCHAR:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7769;
	            this.match(InceptorOracleParser.KW_NVARCHAR);
	            break;
	        case InceptorOracleParser.KW_VARCHAR2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7770;
	            this.match(InceptorOracleParser.KW_VARCHAR2);
	            this.state = 7774;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,905,this._ctx);
	            if(la_===1) {
	                this.state = 7771;
	                this.match(InceptorOracleParser.LPAREN);
	                this.state = 7772;
	                localctx.length = this.match(InceptorOracleParser.Number);
	                this.state = 7773;
	                this.match(InceptorOracleParser.RPAREN);

	            }
	            break;
	        case InceptorOracleParser.KW_VARCHAR:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7776;
	            this.match(InceptorOracleParser.KW_VARCHAR);
	            this.state = 7777;
	            this.match(InceptorOracleParser.LPAREN);
	            this.state = 7778;
	            localctx.length = this.match(InceptorOracleParser.Number);
	            this.state = 7779;
	            this.match(InceptorOracleParser.RPAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	timeTypeLiteral() {
	    let localctx = new TimeTypeLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1406, InceptorOracleParser.RULE_timeTypeLiteral);
	    try {
	        this.state = 7786;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case InceptorOracleParser.KW_DATE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7782;
	            this.dateLiteral();
	            break;
	        case InceptorOracleParser.KW_TIMESTAMP:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7783;
	            this.timestampLiteral();
	            break;
	        case InceptorOracleParser.KW_SYSDATE:
	        case InceptorOracleParser.KW_SYSTIMESTAMP:
	        case InceptorOracleParser.KW_SYSTIME:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7784;
	            this.sysdateortimestampLiteral();
	            break;
	        case InceptorOracleParser.KW_INTERVAL:
	        case InceptorOracleParser.StringLiteral:
	        case InceptorOracleParser.Number:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 7785;
	            this.intervalLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateLiteral() {
	    let localctx = new DateLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1408, InceptorOracleParser.RULE_dateLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7788;
	        this.match(InceptorOracleParser.KW_DATE);
	        this.state = 7789;
	        this.match(InceptorOracleParser.StringLiteral);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	timestampLiteral() {
	    let localctx = new TimestampLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1410, InceptorOracleParser.RULE_timestampLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7791;
	        this.match(InceptorOracleParser.KW_TIMESTAMP);
	        this.state = 7792;
	        this.match(InceptorOracleParser.StringLiteral);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sysdateortimestampLiteral() {
	    let localctx = new SysdateortimestampLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1412, InceptorOracleParser.RULE_sysdateortimestampLiteral);
	    try {
	        this.state = 7809;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case InceptorOracleParser.KW_SYSDATE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7794;
	            this.match(InceptorOracleParser.KW_SYSDATE);
	            this.state = 7797;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,908,this._ctx);
	            if(la_===1) {
	                this.state = 7795;
	                this.match(InceptorOracleParser.LPAREN);
	                this.state = 7796;
	                this.match(InceptorOracleParser.RPAREN);

	            }
	            break;
	        case InceptorOracleParser.KW_SYSTIMESTAMP:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7799;
	            this.match(InceptorOracleParser.KW_SYSTIMESTAMP);
	            this.state = 7802;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,909,this._ctx);
	            if(la_===1) {
	                this.state = 7800;
	                this.match(InceptorOracleParser.LPAREN);
	                this.state = 7801;
	                this.match(InceptorOracleParser.RPAREN);

	            }
	            break;
	        case InceptorOracleParser.KW_SYSTIME:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7804;
	            this.match(InceptorOracleParser.KW_SYSTIME);
	            this.state = 7807;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,910,this._ctx);
	            if(la_===1) {
	                this.state = 7805;
	                this.match(InceptorOracleParser.LPAREN);
	                this.state = 7806;
	                this.match(InceptorOracleParser.RPAREN);

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateTimeExpression() {
	    let localctx = new DateTimeExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1414, InceptorOracleParser.RULE_dateTimeExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7811;
	        _la = this._input.LA(1);
	        if(!(((((_la - 384)) & ~0x1f) == 0 && ((1 << (_la - 384)) & ((1 << (InceptorOracleParser.KW_DAY - 384)) | (1 << (InceptorOracleParser.KW_MINUTE - 384)) | (1 << (InceptorOracleParser.KW_HOUR - 384)) | (1 << (InceptorOracleParser.KW_SECOND - 384)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	monthExpression() {
	    let localctx = new MonthExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1416, InceptorOracleParser.RULE_monthExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7813;
	        _la = this._input.LA(1);
	        if(!(_la===InceptorOracleParser.KW_YEAR || _la===InceptorOracleParser.KW_MONTH)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	intervalValue() {
	    let localctx = new IntervalValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1418, InceptorOracleParser.RULE_intervalValue);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7815;
	        _la = this._input.LA(1);
	        if(!(_la===InceptorOracleParser.StringLiteral || _la===InceptorOracleParser.Number)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	intervalLiteral() {
	    let localctx = new IntervalLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1420, InceptorOracleParser.RULE_intervalLiteral);
	    try {
	        this.state = 7828;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case InceptorOracleParser.StringLiteral:
	        case InceptorOracleParser.Number:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7817;
	            localctx.value = this.intervalValue();
	            this.state = 7818;
	            localctx.qualifiers = this.intervalQualifiers();
	            break;
	        case InceptorOracleParser.KW_INTERVAL:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7820;
	            this.match(InceptorOracleParser.KW_INTERVAL);
	            this.state = 7821;
	            localctx.value = this.intervalValue();
	            this.state = 7822;
	            localctx.qualifiers = this.intervalQualifiers();
	            this.state = 7826;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,912,this._ctx);
	            if(la_===1) {
	                this.state = 7823;
	                this.match(InceptorOracleParser.LPAREN);
	                this.state = 7824;
	                this.match(InceptorOracleParser.Number);
	                this.state = 7825;
	                this.match(InceptorOracleParser.RPAREN);

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	intervalQualifiers() {
	    let localctx = new IntervalQualifiersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1422, InceptorOracleParser.RULE_intervalQualifiers);
	    var _la = 0; // Token type
	    try {
	        this.state = 7842;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,914,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7830;
	            this.match(InceptorOracleParser.KW_YEAR);
	            this.state = 7831;
	            this.match(InceptorOracleParser.KW_TO);
	            this.state = 7832;
	            this.match(InceptorOracleParser.KW_MONTH);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7833;
	            this.match(InceptorOracleParser.KW_DAY);
	            this.state = 7834;
	            this.match(InceptorOracleParser.KW_TO);
	            this.state = 7835;
	            this.match(InceptorOracleParser.KW_SECOND);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7836;
	            _la = this._input.LA(1);
	            if(!(_la===InceptorOracleParser.KW_YEAR || _la===InceptorOracleParser.KW_YEARS)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 7837;
	            _la = this._input.LA(1);
	            if(!(_la===InceptorOracleParser.KW_MONTH || _la===InceptorOracleParser.KW_MONTHS)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 7838;
	            _la = this._input.LA(1);
	            if(!(_la===InceptorOracleParser.KW_DAY || _la===InceptorOracleParser.KW_DAYS)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 7839;
	            _la = this._input.LA(1);
	            if(!(_la===InceptorOracleParser.KW_HOUR || _la===InceptorOracleParser.KW_HOURS)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 7840;
	            _la = this._input.LA(1);
	            if(!(_la===InceptorOracleParser.KW_MINUTE || _la===InceptorOracleParser.KW_MINUTES)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 7841;
	            _la = this._input.LA(1);
	            if(!(_la===InceptorOracleParser.KW_SECOND || _la===InceptorOracleParser.KW_SECONDS)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeParserStart() {
	    let localctx = new TypeParserStartContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1424, InceptorOracleParser.RULE_typeParserStart);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7844;
	        this.datatype();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	datatype() {
	    let localctx = new DatatypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1426, InceptorOracleParser.RULE_datatype);
	    try {
	        this.state = 7848;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,915,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7846;
	            this.scalarType();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7847;
	            this.otherType();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	otherType() {
	    let localctx = new OtherTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1428, InceptorOracleParser.RULE_otherType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7850;
	        this.leftValue();
	        this.state = 7853;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.MOD) {
	            this.state = 7851;
	            this.match(InceptorOracleParser.MOD);
	            this.state = 7852;
	            _la = this._input.LA(1);
	            if(!(_la===InceptorOracleParser.KW_ROWTYPE || _la===InceptorOracleParser.KW_TYPE)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	scalarType() {
	    let localctx = new ScalarTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1430, InceptorOracleParser.RULE_scalarType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7855;
	        this.scalarTypes();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	scalarTypes() {
	    let localctx = new ScalarTypesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1432, InceptorOracleParser.RULE_scalarTypes);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7857;
	        this.primitiveType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeDeclStatement() {
	    let localctx = new TypeDeclStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1434, InceptorOracleParser.RULE_typeDeclStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7859;
	        this.match(InceptorOracleParser.KW_TYPE);
	        this.state = 7860;
	        this.match(InceptorOracleParser.Identifier);
	        this.state = 7861;
	        this.match(InceptorOracleParser.KW_IS);
	        this.state = 7867;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,917,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 7862;
	            this.assocArrayOrNestedTableTypeDef();
	            break;

	        case 2:
	            this.state = 7863;
	            this.varrayTypeDef();
	            break;

	        case 3:
	            this.state = 7864;
	            this.recordTypeDef();
	            break;

	        case 4:
	            this.state = 7865;
	            this.refCursorTypeDef();
	            break;

	        case 5:
	            this.state = 7866;
	            this.datatype();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordTypeDef() {
	    let localctx = new RecordTypeDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1436, InceptorOracleParser.RULE_recordTypeDef);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7869;
	        this.match(InceptorOracleParser.KW_RECORD);
	        this.state = 7870;
	        this.match(InceptorOracleParser.LPAREN);
	        this.state = 7871;
	        this.declareVariable();
	        this.state = 7876;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===InceptorOracleParser.COMMA) {
	            this.state = 7872;
	            this.match(InceptorOracleParser.COMMA);
	            this.state = 7873;
	            this.declareVariable();
	            this.state = 7878;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 7879;
	        this.match(InceptorOracleParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assocArrayOrNestedTableTypeDef() {
	    let localctx = new AssocArrayOrNestedTableTypeDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1438, InceptorOracleParser.RULE_assocArrayOrNestedTableTypeDef);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7881;
	        this.match(InceptorOracleParser.KW_TABLE);
	        this.state = 7882;
	        this.match(InceptorOracleParser.KW_OF);
	        this.state = 7883;
	        this.elementType();
	        this.state = 7886;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_NOT) {
	            this.state = 7884;
	            this.match(InceptorOracleParser.KW_NOT);
	            this.state = 7885;
	            this.match(InceptorOracleParser.KW_NULL);
	        }

	        this.state = 7891;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,920,this._ctx);
	        if(la_===1) {
	            this.state = 7888;
	            localctx.idx = this.match(InceptorOracleParser.KW_INDEX);
	            this.state = 7889;
	            this.match(InceptorOracleParser.KW_BY);
	            this.state = 7890;
	            this.indexType();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	indexType() {
	    let localctx = new IndexTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1440, InceptorOracleParser.RULE_indexType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7893;
	        _la = this._input.LA(1);
	        if(!(_la===InceptorOracleParser.KW_INT || _la===InceptorOracleParser.KW_STRING)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	varrayTypeDef() {
	    let localctx = new VarrayTypeDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1442, InceptorOracleParser.RULE_varrayTypeDef);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7898;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case InceptorOracleParser.KW_VARRAY:
	            this.state = 7895;
	            this.match(InceptorOracleParser.KW_VARRAY);
	            break;
	        case InceptorOracleParser.KW_VARYING:
	            this.state = 7896;
	            this.match(InceptorOracleParser.KW_VARYING);
	            this.state = 7897;
	            this.match(InceptorOracleParser.KW_ARRAY);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 7900;
	        this.match(InceptorOracleParser.LPAREN);
	        this.state = 7901;
	        this.match(InceptorOracleParser.Number);
	        this.state = 7902;
	        this.match(InceptorOracleParser.RPAREN);
	        this.state = 7903;
	        this.match(InceptorOracleParser.KW_OF);
	        this.state = 7904;
	        this.elementType();
	        this.state = 7907;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_NOT) {
	            this.state = 7905;
	            this.match(InceptorOracleParser.KW_NOT);
	            this.state = 7906;
	            this.match(InceptorOracleParser.KW_NULL);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementType() {
	    let localctx = new ElementTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1444, InceptorOracleParser.RULE_elementType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7909;
	        this.datatype();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	refCursorTypeDef() {
	    let localctx = new RefCursorTypeDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1446, InceptorOracleParser.RULE_refCursorTypeDef);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7911;
	        this.match(InceptorOracleParser.KW_REF);
	        this.state = 7912;
	        this.match(InceptorOracleParser.KW_CURSOR);
	        this.state = 7915;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===InceptorOracleParser.KW_RETURN) {
	            this.state = 7913;
	            this.match(InceptorOracleParser.KW_RETURN);
	            this.state = 7914;
	            this.otherType();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

InceptorOracleParser.EOF = antlr4.Token.EOF;
InceptorOracleParser.KW_TRUE = 1;
InceptorOracleParser.KW_FALSE = 2;
InceptorOracleParser.KW_ALL = 3;
InceptorOracleParser.KW_AND = 4;
InceptorOracleParser.KW_OR = 5;
InceptorOracleParser.KW_NOT = 6;
InceptorOracleParser.KW_LIKE = 7;
InceptorOracleParser.KW_NO = 8;
InceptorOracleParser.KW_ANY = 9;
InceptorOracleParser.KW_IF = 10;
InceptorOracleParser.KW_EXISTS = 11;
InceptorOracleParser.KW_ASC = 12;
InceptorOracleParser.KW_DESC = 13;
InceptorOracleParser.KW_ORDER = 14;
InceptorOracleParser.KW_GROUP = 15;
InceptorOracleParser.KW_INCREMENT = 16;
InceptorOracleParser.KW_BY = 17;
InceptorOracleParser.KW_HAVING = 18;
InceptorOracleParser.KW_HASH = 19;
InceptorOracleParser.KW_WHERE = 20;
InceptorOracleParser.KW_FROM = 21;
InceptorOracleParser.KW_AS = 22;
InceptorOracleParser.KW_SELECT = 23;
InceptorOracleParser.KW_DISTINCT = 24;
InceptorOracleParser.KW_INSERT = 25;
InceptorOracleParser.KW_BATCH_INSERT = 26;
InceptorOracleParser.KW_BATCH_VALUES = 27;
InceptorOracleParser.KW_OVERWRITE = 28;
InceptorOracleParser.KW_OUTER = 29;
InceptorOracleParser.KW_UNIQUEJOIN = 30;
InceptorOracleParser.KW_PRESERVE = 31;
InceptorOracleParser.KW_JOIN = 32;
InceptorOracleParser.KW_STREAMJOB = 33;
InceptorOracleParser.KW_STREAMJOBS = 34;
InceptorOracleParser.KW_AT = 35;
InceptorOracleParser.KW_LEFT = 36;
InceptorOracleParser.KW_RIGHT = 37;
InceptorOracleParser.KW_FULL = 38;
InceptorOracleParser.KW_ON = 39;
InceptorOracleParser.KW_OFF = 40;
InceptorOracleParser.KW_PARTITION = 41;
InceptorOracleParser.KW_PARTITIONS = 42;
InceptorOracleParser.KW_PATTERN = 43;
InceptorOracleParser.KW_TABLE = 44;
InceptorOracleParser.KW_TABLES = 45;
InceptorOracleParser.KW_SEQUENCE = 46;
InceptorOracleParser.KW_SEQUENCES = 47;
InceptorOracleParser.KW_COLUMNS = 48;
InceptorOracleParser.KW_INDEX = 49;
InceptorOracleParser.KW_INDEXES = 50;
InceptorOracleParser.KW_REBUILD = 51;
InceptorOracleParser.KW_FUNCTIONS = 52;
InceptorOracleParser.KW_PLSQL = 53;
InceptorOracleParser.KW_SHOW = 54;
InceptorOracleParser.KW_MSCK = 55;
InceptorOracleParser.KW_REPAIR = 56;
InceptorOracleParser.KW_DIRECTORY = 57;
InceptorOracleParser.KW_LOCAL = 58;
InceptorOracleParser.KW_GLOBAL = 59;
InceptorOracleParser.KW_TRANSFORM = 60;
InceptorOracleParser.KW_USING = 61;
InceptorOracleParser.KW_CLUSTER = 62;
InceptorOracleParser.KW_DISTRIBUTE = 63;
InceptorOracleParser.KW_SORT = 64;
InceptorOracleParser.KW_UNION = 65;
InceptorOracleParser.KW_LOAD = 66;
InceptorOracleParser.KW_EXPORT = 67;
InceptorOracleParser.KW_IMPORT = 68;
InceptorOracleParser.KW_DATA = 69;
InceptorOracleParser.KW_INPATH = 70;
InceptorOracleParser.KW_IS = 71;
InceptorOracleParser.KW_NULL = 72;
InceptorOracleParser.KW_NULLS = 73;
InceptorOracleParser.KW_CREATE = 74;
InceptorOracleParser.KW_EXTERNAL = 75;
InceptorOracleParser.KW_ALTER = 76;
InceptorOracleParser.KW_CHANGE = 77;
InceptorOracleParser.KW_COLUMN = 78;
InceptorOracleParser.KW_FIRST = 79;
InceptorOracleParser.KW_LAST = 80;
InceptorOracleParser.KW_AFTER = 81;
InceptorOracleParser.KW_DESCRIBE = 82;
InceptorOracleParser.KW_DROP = 83;
InceptorOracleParser.KW_RENAME = 84;
InceptorOracleParser.KW_IGNORE = 85;
InceptorOracleParser.KW_RESPECT = 86;
InceptorOracleParser.KW_PROTECTION = 87;
InceptorOracleParser.KW_TO = 88;
InceptorOracleParser.KW_COMMENT = 89;
InceptorOracleParser.KW_PROMPT = 90;
InceptorOracleParser.KW_SPOOL = 91;
InceptorOracleParser.KW_BOOLEAN = 92;
InceptorOracleParser.KW_TINYINT = 93;
InceptorOracleParser.KW_BYTE = 94;
InceptorOracleParser.KW_SMALLINT = 95;
InceptorOracleParser.KW_INT = 96;
InceptorOracleParser.KW_BIGINT = 97;
InceptorOracleParser.KW_FLOAT = 98;
InceptorOracleParser.KW_DOUBLE = 99;
InceptorOracleParser.KW_DATE = 100;
InceptorOracleParser.KW_DATETIME = 101;
InceptorOracleParser.KW_TIMESTAMP = 102;
InceptorOracleParser.KW_TIME = 103;
InceptorOracleParser.KW_DECIMAL = 104;
InceptorOracleParser.KW_NUMERIC = 105;
InceptorOracleParser.KW_DEC = 106;
InceptorOracleParser.KW_STRING = 107;
InceptorOracleParser.KW_CHAR = 108;
InceptorOracleParser.KW_VARCHAR = 109;
InceptorOracleParser.KW_GEO = 110;
InceptorOracleParser.KW_VARCHAR2 = 111;
InceptorOracleParser.KW_NVARCHAR = 112;
InceptorOracleParser.KW_ARRAY = 113;
InceptorOracleParser.KW_STRUCT = 114;
InceptorOracleParser.KW_MAP = 115;
InceptorOracleParser.KW_UNIONTYPE = 116;
InceptorOracleParser.KW_REDUCE = 117;
InceptorOracleParser.KW_PARTITIONED = 118;
InceptorOracleParser.KW_ROUTED = 119;
InceptorOracleParser.KW_CLUSTERED = 120;
InceptorOracleParser.KW_SORTED = 121;
InceptorOracleParser.KW_TABLESPACE = 122;
InceptorOracleParser.KW_PCTFREE = 123;
InceptorOracleParser.KW_PCTUSED = 124;
InceptorOracleParser.KW_INITRANS = 125;
InceptorOracleParser.KW_MAXTRANS = 126;
InceptorOracleParser.KW_STORAGE = 127;
InceptorOracleParser.KW_INITIAL = 128;
InceptorOracleParser.KW_NEXT = 129;
InceptorOracleParser.KW_NEXTVALUE = 130;
InceptorOracleParser.KW_MINEXTENTS = 131;
InceptorOracleParser.KW_MAXEXTENTS = 132;
InceptorOracleParser.KW_UNLIMITED = 133;
InceptorOracleParser.KW_WIDCARD = 134;
InceptorOracleParser.KW_INTO = 135;
InceptorOracleParser.KW_BUCKETS = 136;
InceptorOracleParser.KW_ROW = 137;
InceptorOracleParser.KW_ROWS = 138;
InceptorOracleParser.KW_FORMAT = 139;
InceptorOracleParser.KW_DELIMITED = 140;
InceptorOracleParser.KW_FIELDS = 141;
InceptorOracleParser.KW_TERMINATED = 142;
InceptorOracleParser.KW_ESCAPED = 143;
InceptorOracleParser.KW_COLLECTION = 144;
InceptorOracleParser.KW_ITEMS = 145;
InceptorOracleParser.KW_KEYS = 146;
InceptorOracleParser.KW_KEY_TYPE = 147;
InceptorOracleParser.KW_LINES = 148;
InceptorOracleParser.KW_STORED = 149;
InceptorOracleParser.KW_FILEFORMAT = 150;
InceptorOracleParser.KW_SEQUENCEFILE = 151;
InceptorOracleParser.KW_TEXTFILE = 152;
InceptorOracleParser.KW_CSVFILE = 153;
InceptorOracleParser.KW_FWCFILE = 154;
InceptorOracleParser.KW_RCFILE = 155;
InceptorOracleParser.KW_ORCFILE = 156;
InceptorOracleParser.KW_HOLODESK = 157;
InceptorOracleParser.KW_STELLARDB = 158;
InceptorOracleParser.KW_ORCTRANSACTIONFILE = 159;
InceptorOracleParser.KW_PARQUET = 160;
InceptorOracleParser.KW_HYPERDRIVE = 161;
InceptorOracleParser.KW_ESDRIVE = 162;
InceptorOracleParser.KW_INPUTFORMAT = 163;
InceptorOracleParser.KW_OUTPUTFORMAT = 164;
InceptorOracleParser.KW_INPUTDRIVER = 165;
InceptorOracleParser.KW_OUTPUTDRIVER = 166;
InceptorOracleParser.KW_OFFLINE = 167;
InceptorOracleParser.KW_ENABLE = 168;
InceptorOracleParser.KW_DISABLE = 169;
InceptorOracleParser.KW_READONLY = 170;
InceptorOracleParser.KW_NO_DROP = 171;
InceptorOracleParser.KW_LOCATION = 172;
InceptorOracleParser.KW_TABLESAMPLE = 173;
InceptorOracleParser.KW_BUCKET = 174;
InceptorOracleParser.KW_OUT = 175;
InceptorOracleParser.KW_OF = 176;
InceptorOracleParser.KW_PERCENT = 177;
InceptorOracleParser.KW_CAST = 178;
InceptorOracleParser.KW_ADD = 179;
InceptorOracleParser.KW_REPLACE = 180;
InceptorOracleParser.KW_RLIKE = 181;
InceptorOracleParser.KW_REGEXP = 182;
InceptorOracleParser.KW_TEMPORARY = 183;
InceptorOracleParser.KW_FUNCTION = 184;
InceptorOracleParser.KW_RESOURCE = 185;
InceptorOracleParser.KW_RELOAD = 186;
InceptorOracleParser.KW_MACRO = 187;
InceptorOracleParser.KW_EXPLAIN = 188;
InceptorOracleParser.KW_EXTENDED = 189;
InceptorOracleParser.KW_FORMATTED = 190;
InceptorOracleParser.KW_PRETTY = 191;
InceptorOracleParser.KW_DEPENDENCY = 192;
InceptorOracleParser.KW_LOGICAL = 193;
InceptorOracleParser.KW_COST = 194;
InceptorOracleParser.KW_SERDE = 195;
InceptorOracleParser.KW_WITH = 196;
InceptorOracleParser.KW_WITHIN = 197;
InceptorOracleParser.KW_DEFERRED = 198;
InceptorOracleParser.KW_SERDEPROPERTIES = 199;
InceptorOracleParser.KW_DBPROPERTIES = 200;
InceptorOracleParser.KW_LIMIT = 201;
InceptorOracleParser.KW_SET = 202;
InceptorOracleParser.KW_UNSET = 203;
InceptorOracleParser.KW_TBLPROPERTIES = 204;
InceptorOracleParser.KW_IDXPROPERTIES = 205;
InceptorOracleParser.KW_VALUE_TYPE = 206;
InceptorOracleParser.KW_ELEM_TYPE = 207;
InceptorOracleParser.KW_CASE = 208;
InceptorOracleParser.KW_WHEN = 209;
InceptorOracleParser.KW_THEN = 210;
InceptorOracleParser.KW_ELSE = 211;
InceptorOracleParser.KW_ELSIF = 212;
InceptorOracleParser.KW_END = 213;
InceptorOracleParser.KW_GOTO = 214;
InceptorOracleParser.KW_EXIT = 215;
InceptorOracleParser.KW_OPEN = 216;
InceptorOracleParser.KW_CLOSE = 217;
InceptorOracleParser.KW_PRIOR = 218;
InceptorOracleParser.KW_NOCYCLE = 219;
InceptorOracleParser.KW_MAPJOIN = 220;
InceptorOracleParser.KW_COMBINE = 221;
InceptorOracleParser.KW_COMBINE_STRUCT_INDEX = 222;
InceptorOracleParser.KW_GLKJOIN = 223;
InceptorOracleParser.KW_USE_INDEX = 224;
InceptorOracleParser.KW_STARGATE = 225;
InceptorOracleParser.KW_USE_BULKLOAD = 226;
InceptorOracleParser.KW_ADHOC = 227;
InceptorOracleParser.KW_PRECOMPILE = 228;
InceptorOracleParser.KW_STREAMTABLE = 229;
InceptorOracleParser.KW_STREAM = 230;
InceptorOracleParser.KW_STREAMS = 231;
InceptorOracleParser.KW_METRIC = 232;
InceptorOracleParser.KW_METRICS = 233;
InceptorOracleParser.KW_RULEBASE = 234;
InceptorOracleParser.KW_RULEBASES = 235;
InceptorOracleParser.KW_RULE = 236;
InceptorOracleParser.KW_RULES = 237;
InceptorOracleParser.KW_RULEPROPERTIES = 238;
InceptorOracleParser.KW_MEET = 239;
InceptorOracleParser.KW_MUST = 240;
InceptorOracleParser.KW_MUSTNOT = 241;
InceptorOracleParser.KW_NONE = 242;
InceptorOracleParser.KW_POLICY = 243;
InceptorOracleParser.KW_POLICIES = 244;
InceptorOracleParser.KW_REMOVE = 245;
InceptorOracleParser.KW_POLICYKEY = 246;
InceptorOracleParser.KW_POLICY_RULE = 247;
InceptorOracleParser.KW_LOOKUP = 248;
InceptorOracleParser.KW_POLICYPROPERTIES = 249;
InceptorOracleParser.KW_RULE_FUNCTION = 250;
InceptorOracleParser.KW_RULE_FUNCTIONS = 251;
InceptorOracleParser.KW_APPPROPERTIES = 252;
InceptorOracleParser.KW_JOBPROPERTIES = 253;
InceptorOracleParser.KW_RULE_FUNCTION_PROPERTIES = 254;
InceptorOracleParser.KW_HOLD_DDLTIME = 255;
InceptorOracleParser.KW_CLUSTERSTATUS = 256;
InceptorOracleParser.KW_UTC = 257;
InceptorOracleParser.KW_UTCTIMESTAMP = 258;
InceptorOracleParser.KW_LONG = 259;
InceptorOracleParser.KW_DELETE = 260;
InceptorOracleParser.KW_PLUS = 261;
InceptorOracleParser.KW_MINUS = 262;
InceptorOracleParser.KW_OP_CONCAT = 263;
InceptorOracleParser.KW_FETCH = 264;
InceptorOracleParser.KW_INTERSECT = 265;
InceptorOracleParser.KW_EXCEPT = 266;
InceptorOracleParser.KW_VIEW = 267;
InceptorOracleParser.KW_VIEWS = 268;
InceptorOracleParser.KW_IN = 269;
InceptorOracleParser.KW_DATABASE = 270;
InceptorOracleParser.KW_DATABASES = 271;
InceptorOracleParser.KW_MATERIALIZED = 272;
InceptorOracleParser.KW_SCHEMA = 273;
InceptorOracleParser.KW_SCHEMAS = 274;
InceptorOracleParser.KW_GRANT = 275;
InceptorOracleParser.KW_REVOKE = 276;
InceptorOracleParser.KW_SSL = 277;
InceptorOracleParser.KW_UNDO = 278;
InceptorOracleParser.KW_LOCK = 279;
InceptorOracleParser.KW_LOCKS = 280;
InceptorOracleParser.KW_UNLOCK = 281;
InceptorOracleParser.KW_SHARED = 282;
InceptorOracleParser.KW_EXCLUSIVE = 283;
InceptorOracleParser.KW_PROCEDURE = 284;
InceptorOracleParser.KW_UNSIGNED = 285;
InceptorOracleParser.KW_WHILE = 286;
InceptorOracleParser.KW_READ = 287;
InceptorOracleParser.KW_READS = 288;
InceptorOracleParser.KW_PURGE = 289;
InceptorOracleParser.KW_RANGE = 290;
InceptorOracleParser.KW_ANALYZE = 291;
InceptorOracleParser.KW_BEFORE = 292;
InceptorOracleParser.KW_BETWEEN = 293;
InceptorOracleParser.KW_BOTH = 294;
InceptorOracleParser.KW_BINARY = 295;
InceptorOracleParser.KW_CROSS = 296;
InceptorOracleParser.KW_CURSOR = 297;
InceptorOracleParser.KW_DEFAULT = 298;
InceptorOracleParser.KW_ROWTYPE = 299;
InceptorOracleParser.KW_TYPE = 300;
InceptorOracleParser.KW_TRIGGER = 301;
InceptorOracleParser.KW_RECORDREADER = 302;
InceptorOracleParser.KW_RECORDWRITER = 303;
InceptorOracleParser.KW_SEMI = 304;
InceptorOracleParser.KW_ANTISEMI = 305;
InceptorOracleParser.KW_LATERAL = 306;
InceptorOracleParser.KW_TOUCH = 307;
InceptorOracleParser.KW_ARCHIVE = 308;
InceptorOracleParser.KW_UNARCHIVE = 309;
InceptorOracleParser.KW_COMPUTE = 310;
InceptorOracleParser.KW_STATISTICS = 311;
InceptorOracleParser.KW_USE = 312;
InceptorOracleParser.KW_OPTION = 313;
InceptorOracleParser.KW_CONCATENATE = 314;
InceptorOracleParser.KW_SHOW_DATABASE = 315;
InceptorOracleParser.KW_UPDATE = 316;
InceptorOracleParser.KW_BATCHUPDATE = 317;
InceptorOracleParser.KW_RESTRICT = 318;
InceptorOracleParser.KW_CASCADE = 319;
InceptorOracleParser.KW_SKEWED = 320;
InceptorOracleParser.KW_ROLLUP = 321;
InceptorOracleParser.KW_CUBE = 322;
InceptorOracleParser.KW_DIRECTORIES = 323;
InceptorOracleParser.KW_FOR = 324;
InceptorOracleParser.KW_LOOP = 325;
InceptorOracleParser.KW_WINDOW = 326;
InceptorOracleParser.KW_WINDOWRESET = 327;
InceptorOracleParser.KW_SESSIONWINDOW = 328;
InceptorOracleParser.KW_SESSIONSTART = 329;
InceptorOracleParser.KW_SESSIONSTOP = 330;
InceptorOracleParser.KW_SESSIONEXPIRE = 331;
InceptorOracleParser.KW_SESSIONEXPIRE_DISCARD = 332;
InceptorOracleParser.KW_SESSIONEXPIRE_COMPLETE = 333;
InceptorOracleParser.KW_SESSIONPARTITION = 334;
InceptorOracleParser.KW_STREAMWINDOW = 335;
InceptorOracleParser.KW_STREAMWINDOWSLIDELENGTH = 336;
InceptorOracleParser.KW_STREAMWINDOWSEPARATED = 337;
InceptorOracleParser.KW_SESSIONWINDOW_INCLUDE = 338;
InceptorOracleParser.KW_SESSIONWINDOW_EXCLUDE = 339;
InceptorOracleParser.KW_UNBOUNDED = 340;
InceptorOracleParser.KW_PRECEDING = 341;
InceptorOracleParser.KW_FOLLOWING = 342;
InceptorOracleParser.KW_FOLLOWEDBY = 343;
InceptorOracleParser.KW_NOTFOLLOWEDBY = 344;
InceptorOracleParser.KW_NOTNEXT = 345;
InceptorOracleParser.KW_PATTERN_TIMES = 346;
InceptorOracleParser.KW_CURRENT = 347;
InceptorOracleParser.KW_CURRVALUE = 348;
InceptorOracleParser.KW_LESS = 349;
InceptorOracleParser.KW_MORE = 350;
InceptorOracleParser.KW_THAN = 351;
InceptorOracleParser.KW_OVER = 352;
InceptorOracleParser.KW_GROUPING = 353;
InceptorOracleParser.KW_SETS = 354;
InceptorOracleParser.KW_TRUNCATE = 355;
InceptorOracleParser.KW_NOSCAN = 356;
InceptorOracleParser.KW_PARTIALSCAN = 357;
InceptorOracleParser.KW_USER = 358;
InceptorOracleParser.KW_QUOTA = 359;
InceptorOracleParser.KW_PERMISSION = 360;
InceptorOracleParser.KW_ROLE = 361;
InceptorOracleParser.KW_ROLES = 362;
InceptorOracleParser.KW_INNER = 363;
InceptorOracleParser.KW_EXCHANGE = 364;
InceptorOracleParser.KW_ADMIN = 365;
InceptorOracleParser.KW_OWNER = 366;
InceptorOracleParser.KW_PRINCIPALS = 367;
InceptorOracleParser.KW_NATURAL = 368;
InceptorOracleParser.KW_RETURN = 369;
InceptorOracleParser.KW_BREAK = 370;
InceptorOracleParser.KW_CONTINUE = 371;
InceptorOracleParser.KW_BEGIN = 372;
InceptorOracleParser.KW_NUMBER = 373;
InceptorOracleParser.KW_BLOB = 374;
InceptorOracleParser.KW_CLOB = 375;
InceptorOracleParser.KW_BFILE = 376;
InceptorOracleParser.KW_DECLARE = 377;
InceptorOracleParser.KW_CONSTANT = 378;
InceptorOracleParser.KW_CONSTRAINT = 379;
InceptorOracleParser.KW_INOUT = 380;
InceptorOracleParser.KW_VALUES = 381;
InceptorOracleParser.KW_YEAR = 382;
InceptorOracleParser.KW_MONTH = 383;
InceptorOracleParser.KW_DAY = 384;
InceptorOracleParser.KW_MINUTE = 385;
InceptorOracleParser.KW_HOUR = 386;
InceptorOracleParser.KW_SECOND = 387;
InceptorOracleParser.KW_INTERVAL = 388;
InceptorOracleParser.KW_EXTRACT = 389;
InceptorOracleParser.KW_SUBSTRING = 390;
InceptorOracleParser.KW_SYSDATE = 391;
InceptorOracleParser.KW_SYSTIMESTAMP = 392;
InceptorOracleParser.KW_SYSTIME = 393;
InceptorOracleParser.KW_CALL = 394;
InceptorOracleParser.KW_EXEC = 395;
InceptorOracleParser.KW_MAXVALUE = 396;
InceptorOracleParser.KW_NOMAXVALUE = 397;
InceptorOracleParser.KW_MINVALUE = 398;
InceptorOracleParser.KW_NOMINVALUE = 399;
InceptorOracleParser.KW_CYCLE = 400;
InceptorOracleParser.KW_CACHE = 401;
InceptorOracleParser.KW_CACHEDMETRIC = 402;
InceptorOracleParser.KW_CACHEDMETRICS = 403;
InceptorOracleParser.KW_NOCACHE = 404;
InceptorOracleParser.KW_NOORDER = 405;
InceptorOracleParser.KW_BULK = 406;
InceptorOracleParser.KW_COLLECT = 407;
InceptorOracleParser.KW_VARYING = 408;
InceptorOracleParser.KW_EXCEPTION = 409;
InceptorOracleParser.KW_MERGE = 410;
InceptorOracleParser.KW_MATCHED = 411;
InceptorOracleParser.KW_PLANT = 412;
InceptorOracleParser.KW_IMMEDIATE = 413;
InceptorOracleParser.KW_COMPACT = 414;
InceptorOracleParser.KW_COMPACTIONS = 415;
InceptorOracleParser.KW_START = 416;
InceptorOracleParser.KW_STOP = 417;
InceptorOracleParser.KW_LIST = 418;
InceptorOracleParser.KW_TRANSACTION = 419;
InceptorOracleParser.KW_COMMIT = 420;
InceptorOracleParser.KW_ROLLBACK = 421;
InceptorOracleParser.KW_WORK = 422;
InceptorOracleParser.KW_SPACE = 423;
InceptorOracleParser.KW_ISOLATION = 424;
InceptorOracleParser.KW_COMMITTED = 425;
InceptorOracleParser.KW_SERIALIZABLE = 426;
InceptorOracleParser.KW_UNIQUE = 427;
InceptorOracleParser.KW_CONF = 428;
InceptorOracleParser.KW_DEFINED = 429;
InceptorOracleParser.KW_INTEGER = 430;
InceptorOracleParser.KW_ONLY = 431;
InceptorOracleParser.KW_SERVER = 432;
InceptorOracleParser.KW_TRANSACTIONS = 433;
InceptorOracleParser.KW_URI = 434;
InceptorOracleParser.KW_WRITE = 435;
InceptorOracleParser.KW_FACL = 436;
InceptorOracleParser.KW_FOUND = 437;
InceptorOracleParser.KW_LEVEL = 438;
InceptorOracleParser.KW_PUBLIC = 439;
InceptorOracleParser.KW_LINK = 440;
InceptorOracleParser.KW_LINKS = 441;
InceptorOracleParser.KW_CONNECT = 442;
InceptorOracleParser.KW_IDENTIFIED = 443;
InceptorOracleParser.KW_APPLICATION = 444;
InceptorOracleParser.KW_APPLICATIONS = 445;
InceptorOracleParser.KW_APP = 446;
InceptorOracleParser.KW_APPS = 447;
InceptorOracleParser.KW_INFINITE = 448;
InceptorOracleParser.KW_REWRITE = 449;
InceptorOracleParser.KW_NO_REWRITE = 450;
InceptorOracleParser.KW_WAIT = 451;
InceptorOracleParser.KW_PRIMARY = 452;
InceptorOracleParser.KW_FOREIGN = 453;
InceptorOracleParser.KW_REFERENCES = 454;
InceptorOracleParser.KW_VALIDATE = 455;
InceptorOracleParser.KW_NOVALIDATE = 456;
InceptorOracleParser.KW_RELY = 457;
InceptorOracleParser.KW_NORELY = 458;
InceptorOracleParser.KW_KEY = 459;
InceptorOracleParser.KW_SEGMENT = 460;
InceptorOracleParser.KW_LENGTH = 461;
InceptorOracleParser.KW_ATTACH = 462;
InceptorOracleParser.KW_DETTACH = 463;
InceptorOracleParser.KW_SHARD = 464;
InceptorOracleParser.KW_NUM = 465;
InceptorOracleParser.KW_FULLTEXT = 466;
InceptorOracleParser.KW_DOCVALUES = 467;
InceptorOracleParser.KW_TABLESIZE = 468;
InceptorOracleParser.KW_TABLET = 469;
InceptorOracleParser.KW_CAPACITY = 470;
InceptorOracleParser.KW_REPLICATION = 471;
InceptorOracleParser.KW_APPEND = 472;
InceptorOracleParser.KW_ANALYZER = 473;
InceptorOracleParser.KW_SYNC = 474;
InceptorOracleParser.KW_NO_INDEX = 475;
InceptorOracleParser.KW_LOG = 476;
InceptorOracleParser.KW_ERRORS = 477;
InceptorOracleParser.KW_REJECT = 478;
InceptorOracleParser.KW_OFFSET = 479;
InceptorOracleParser.KW_FILE = 480;
InceptorOracleParser.KW_JAR = 481;
InceptorOracleParser.KW_PERMANENT = 482;
InceptorOracleParser.KW_GRAPH_PATH = 483;
InceptorOracleParser.KW_BLACKLIST = 484;
InceptorOracleParser.KW_SCHEDULER = 485;
InceptorOracleParser.KW_MODE = 486;
InceptorOracleParser.KW_POLICYBASES = 487;
InceptorOracleParser.KW_QUALIFY = 488;
InceptorOracleParser.RARROW = 489;
InceptorOracleParser.DOT = 490;
InceptorOracleParser.COLON = 491;
InceptorOracleParser.COMMA = 492;
InceptorOracleParser.SEMICOLON = 493;
InceptorOracleParser.LPAREN = 494;
InceptorOracleParser.RPAREN = 495;
InceptorOracleParser.LSQUARE = 496;
InceptorOracleParser.RSQUARE = 497;
InceptorOracleParser.LCURLY = 498;
InceptorOracleParser.RCURLY = 499;
InceptorOracleParser.EQUAL = 500;
InceptorOracleParser.EQUAL_NS = 501;
InceptorOracleParser.NOTEQUAL = 502;
InceptorOracleParser.LESSTHANOREQUALTO = 503;
InceptorOracleParser.LESSTHAN = 504;
InceptorOracleParser.DOUBLELESSTHAN = 505;
InceptorOracleParser.GREATERTHANOREQUALTO = 506;
InceptorOracleParser.GREATERTHAN = 507;
InceptorOracleParser.DOUBLEGREATERTHAN = 508;
InceptorOracleParser.DIVIDE = 509;
InceptorOracleParser.PLUS = 510;
InceptorOracleParser.MINUS = 511;
InceptorOracleParser.STAR = 512;
InceptorOracleParser.MOD = 513;
InceptorOracleParser.DIV = 514;
InceptorOracleParser.OP_CONCAT = 515;
InceptorOracleParser.AMPERSAND = 516;
InceptorOracleParser.TILDE = 517;
InceptorOracleParser.BITWISEOR = 518;
InceptorOracleParser.BITWISEXOR = 519;
InceptorOracleParser.QUESTION = 520;
InceptorOracleParser.DOLLAR = 521;
InceptorOracleParser.ASSIGN_OP = 522;
InceptorOracleParser.AT = 523;
InceptorOracleParser.NAMED_NOTATION = 524;
InceptorOracleParser.RANGE_OP = 525;
InceptorOracleParser.OUTER_JOIN_SIGN = 526;
InceptorOracleParser.Digit = 527;
InceptorOracleParser.StringLiteral = 528;
InceptorOracleParser.CharSetLiteral = 529;
InceptorOracleParser.BigintLiteral = 530;
InceptorOracleParser.SmallintLiteral = 531;
InceptorOracleParser.TinyintLiteral = 532;
InceptorOracleParser.DecimalLiteral = 533;
InceptorOracleParser.ByteLengthLiteral = 534;
InceptorOracleParser.IntRangeMin = 535;
InceptorOracleParser.Number = 536;
InceptorOracleParser.Identifier = 537;
InceptorOracleParser.CharSetName = 538;
InceptorOracleParser.C_COMMENT_LEFT = 539;
InceptorOracleParser.C_COMMENT_RIGHT = 540;
InceptorOracleParser.C_COMMENT = 541;
InceptorOracleParser.HINT_LEFT = 542;
InceptorOracleParser.WS = 543;
InceptorOracleParser.COMMENT = 544;
InceptorOracleParser.CPP_COMMENT = 545;
InceptorOracleParser.KW_NOCOPY = 546;
InceptorOracleParser.KW_VARRAY = 547;
InceptorOracleParser.KW_PACKAGE = 548;
InceptorOracleParser.KW_PACKAGES = 549;
InceptorOracleParser.KW_BODY = 550;
InceptorOracleParser.KW_ISOPEN = 551;
InceptorOracleParser.KW_NOTFOUND = 552;
InceptorOracleParser.KW_ROWCOUNT = 553;
InceptorOracleParser.KW_BULK_ROWCOUNT = 554;
InceptorOracleParser.KW_BULK_EXCEPTIONS = 555;
InceptorOracleParser.KW_REVERSE = 556;
InceptorOracleParser.KW_FORALL = 557;
InceptorOracleParser.KW_SAVE = 558;
InceptorOracleParser.KW_EXCEPTIONS = 559;
InceptorOracleParser.KW_INDICES = 560;
InceptorOracleParser.KW_REF = 561;
InceptorOracleParser.KW_RAISE = 562;
InceptorOracleParser.KW_PRAGMA = 563;
InceptorOracleParser.KW_EXCEPTION_INIT = 564;
InceptorOracleParser.KW_AUTONOMOUS_TRANSACTION = 565;
InceptorOracleParser.KW_SERIALLY_REUSABLE = 566;
InceptorOracleParser.KW_RECORD = 567;
InceptorOracleParser.KW_YEARS = 568;
InceptorOracleParser.KW_MONTHS = 569;
InceptorOracleParser.KW_DAYS = 570;
InceptorOracleParser.KW_HOURS = 571;
InceptorOracleParser.KW_MINUTES = 572;
InceptorOracleParser.KW_SECONDS = 573;

InceptorOracleParser.RULE_aliasNonReserved = 0;
InceptorOracleParser.RULE_alias = 1;
InceptorOracleParser.RULE_identifier = 2;
InceptorOracleParser.RULE_columnAlias = 3;
InceptorOracleParser.RULE_commonNonReserved = 4;
InceptorOracleParser.RULE_keyValueProperty = 5;
InceptorOracleParser.RULE_keyProperty = 6;
InceptorOracleParser.RULE_tableName = 7;
InceptorOracleParser.RULE_valuesName = 8;
InceptorOracleParser.RULE_viewName = 9;
InceptorOracleParser.RULE_tableAlias = 10;
InceptorOracleParser.RULE_sequenceName = 11;
InceptorOracleParser.RULE_partitionSpec = 12;
InceptorOracleParser.RULE_partitionVal = 13;
InceptorOracleParser.RULE_storedAsDirs = 14;
InceptorOracleParser.RULE_orReplace = 15;
InceptorOracleParser.RULE_columnList = 16;
InceptorOracleParser.RULE_columnNameTypeList = 17;
InceptorOracleParser.RULE_columnNameColonTypeList = 18;
InceptorOracleParser.RULE_columnNameOrderList = 19;
InceptorOracleParser.RULE_columnNameOrder = 20;
InceptorOracleParser.RULE_columnNameCommentList = 21;
InceptorOracleParser.RULE_columnNameComment = 22;
InceptorOracleParser.RULE_nullsOrder = 23;
InceptorOracleParser.RULE_columnRefOrder = 24;
InceptorOracleParser.RULE_columnNameType = 25;
InceptorOracleParser.RULE_columnAnalyzer = 26;
InceptorOracleParser.RULE_defaultValueNode = 27;
InceptorOracleParser.RULE_constantOrNull = 28;
InceptorOracleParser.RULE_columnComment = 29;
InceptorOracleParser.RULE_columnNameList = 30;
InceptorOracleParser.RULE_columnName = 31;
InceptorOracleParser.RULE_columnOrtableDotColumnNameList = 32;
InceptorOracleParser.RULE_columnOrtableDotColumnName = 33;
InceptorOracleParser.RULE_columnOrtableDotColumnWithDBNameList = 34;
InceptorOracleParser.RULE_columnOrtableDotColumnWithDBName = 35;
InceptorOracleParser.RULE_tableOrPartition = 36;
InceptorOracleParser.RULE_tableOrColumnAliasOfValues = 37;
InceptorOracleParser.RULE_partitionTableFunctionSource = 38;
InceptorOracleParser.RULE_partitionedTableFunction = 39;
InceptorOracleParser.RULE_tableAllColumns = 40;
InceptorOracleParser.RULE_tableOrColumn = 41;
InceptorOracleParser.RULE_aliasList = 42;
InceptorOracleParser.RULE_capIdentifierList = 43;
InceptorOracleParser.RULE_identifierList = 44;
InceptorOracleParser.RULE_alterStatement = 45;
InceptorOracleParser.RULE_alterSequenceStatementSuffix = 46;
InceptorOracleParser.RULE_alterTableStatementSuffix = 47;
InceptorOracleParser.RULE_alterStatementPartitionKeyType = 48;
InceptorOracleParser.RULE_alterViewStatementSuffix = 49;
InceptorOracleParser.RULE_alterIndexStatementSuffix = 50;
InceptorOracleParser.RULE_alterApplicationStatementSuffix = 51;
InceptorOracleParser.RULE_alterJobStatementSuffix = 52;
InceptorOracleParser.RULE_alterJobSuffixProperties = 53;
InceptorOracleParser.RULE_alterApplicationSuffixProperties = 54;
InceptorOracleParser.RULE_alterApplicationSuffixSetOwner = 55;
InceptorOracleParser.RULE_alterPolicyStatementSuffix = 56;
InceptorOracleParser.RULE_alterPolicySuffixProperties = 57;
InceptorOracleParser.RULE_alterPolicySuffixRootGroupType = 58;
InceptorOracleParser.RULE_alterPolicyRuleGroupSuffix = 59;
InceptorOracleParser.RULE_alterRuleStatementSuffix = 60;
InceptorOracleParser.RULE_alterRuleSuffixProperties = 61;
InceptorOracleParser.RULE_alterRuleFunctionStatementSuffix = 62;
InceptorOracleParser.RULE_alterRuleFunctionSuffixProperties = 63;
InceptorOracleParser.RULE_alterDatabaseStatementSuffix = 64;
InceptorOracleParser.RULE_alterDatabaseSuffixProperties = 65;
InceptorOracleParser.RULE_alterDatabaseSuffixSetOwner = 66;
InceptorOracleParser.RULE_alterStatementSuffixRename = 67;
InceptorOracleParser.RULE_alterStatementErrorLogSetting = 68;
InceptorOracleParser.RULE_onOffOpt = 69;
InceptorOracleParser.RULE_errorIntoTableOpt = 70;
InceptorOracleParser.RULE_errorOverwriteOpt = 71;
InceptorOracleParser.RULE_errorRejectOpt = 72;
InceptorOracleParser.RULE_errorLimitOpt = 73;
InceptorOracleParser.RULE_alterStatementSuffixAddCol = 74;
InceptorOracleParser.RULE_alterStatementSuffixRenameCol = 75;
InceptorOracleParser.RULE_blocking = 76;
InceptorOracleParser.RULE_alterStatementSuffixCompact = 77;
InceptorOracleParser.RULE_alterStatementSuffixUpdateStatsCol = 78;
InceptorOracleParser.RULE_alterStatementChangeColPosition = 79;
InceptorOracleParser.RULE_alterStatementSuffixAddPartitions = 80;
InceptorOracleParser.RULE_alterStatementSuffixAddPartitionsElement = 81;
InceptorOracleParser.RULE_alterStatementSuffixAddRangePartitionsElement = 82;
InceptorOracleParser.RULE_alterStatementSuffixTouch = 83;
InceptorOracleParser.RULE_alterStatementSuffixArchive = 84;
InceptorOracleParser.RULE_alterStatementSuffixUnArchive = 85;
InceptorOracleParser.RULE_partitionLocation = 86;
InceptorOracleParser.RULE_alterStatementSuffixDropPartitions = 87;
InceptorOracleParser.RULE_alterStatementSuffixProperties = 88;
InceptorOracleParser.RULE_alterViewSuffixProperties = 89;
InceptorOracleParser.RULE_alterStatementSuffixSerdeProperties = 90;
InceptorOracleParser.RULE_alterTblPartitionStatement = 91;
InceptorOracleParser.RULE_alterTblPartitionStatementSuffix = 92;
InceptorOracleParser.RULE_alterStatementSuffixFileFormat = 93;
InceptorOracleParser.RULE_alterStatementSuffixClusterbySortby = 94;
InceptorOracleParser.RULE_alterTblPartitionStatementSuffixSkewedLocation = 95;
InceptorOracleParser.RULE_skewedLocations = 96;
InceptorOracleParser.RULE_skewedLocationsList = 97;
InceptorOracleParser.RULE_skewedLocationMap = 98;
InceptorOracleParser.RULE_alterStatementSuffixLocation = 99;
InceptorOracleParser.RULE_alterStatementSuffixSkewedby = 100;
InceptorOracleParser.RULE_alterStatementSuffixExchangePartition = 101;
InceptorOracleParser.RULE_alterStatementSuffixProtectMode = 102;
InceptorOracleParser.RULE_alterStatementSuffixRenamePart = 103;
InceptorOracleParser.RULE_alterStatementSuffixMergeFiles = 104;
InceptorOracleParser.RULE_alterProtectMode = 105;
InceptorOracleParser.RULE_alterProtectModeMode = 106;
InceptorOracleParser.RULE_alterStatementSuffixBucketNum = 107;
InceptorOracleParser.RULE_fileFormat = 108;
InceptorOracleParser.RULE_ignoreProtection = 109;
InceptorOracleParser.RULE_dropPartitionSpec = 110;
InceptorOracleParser.RULE_dropPartitionVal = 111;
InceptorOracleParser.RULE_dropPartitionOperator = 112;
InceptorOracleParser.RULE_alterBlacklistStatementSuffix = 113;
InceptorOracleParser.RULE_alterStatementSuffixDropConstraint = 114;
InceptorOracleParser.RULE_alterStatementSuffixAddConstraint = 115;
InceptorOracleParser.RULE_alterConstraintWithName = 116;
InceptorOracleParser.RULE_alterForeignKeyWithName = 117;
InceptorOracleParser.RULE_alterStatementIntervalValue = 118;
InceptorOracleParser.RULE_atomExpression = 119;
InceptorOracleParser.RULE_sqlCallStatement = 120;
InceptorOracleParser.RULE_constant = 121;
InceptorOracleParser.RULE_defaultConstantValue = 122;
InceptorOracleParser.RULE_nonNegativeDigitValue = 123;
InceptorOracleParser.RULE_stringLiteralSequence = 124;
InceptorOracleParser.RULE_charSetStringLiteral = 125;
InceptorOracleParser.RULE_booleanValue = 126;
InceptorOracleParser.RULE_columnNameTypeOrConstraintList = 127;
InceptorOracleParser.RULE_columnNameTypeOrConstraint = 128;
InceptorOracleParser.RULE_tableConstraint = 129;
InceptorOracleParser.RULE_createForeignKey = 130;
InceptorOracleParser.RULE_createConstraint = 131;
InceptorOracleParser.RULE_tableConstraintType = 132;
InceptorOracleParser.RULE_constraintOpts = 133;
InceptorOracleParser.RULE_enableSpecification = 134;
InceptorOracleParser.RULE_validateSpecification = 135;
InceptorOracleParser.RULE_relySpecification = 136;
InceptorOracleParser.RULE_columnConstraint = 137;
InceptorOracleParser.RULE_colPKConstraint = 138;
InceptorOracleParser.RULE_colFKConstraint = 139;
InceptorOracleParser.RULE_parenColumnNameList = 140;
InceptorOracleParser.RULE_defaultVauleOrColumnConstraint = 141;
InceptorOracleParser.RULE_columnAttribute = 142;
InceptorOracleParser.RULE_crudStatement = 143;
InceptorOracleParser.RULE_mergeStatement = 144;
InceptorOracleParser.RULE_mergeUpdateClause = 145;
InceptorOracleParser.RULE_mergeDeleteClause = 146;
InceptorOracleParser.RULE_mergeInsertClause = 147;
InceptorOracleParser.RULE_implicitInsertStatement = 148;
InceptorOracleParser.RULE_updateStatement = 149;
InceptorOracleParser.RULE_batchUpdateStatement = 150;
InceptorOracleParser.RULE_batchUpdate_set_clause = 151;
InceptorOracleParser.RULE_update_set_clause_suffix = 152;
InceptorOracleParser.RULE_update_set_clause_elements = 153;
InceptorOracleParser.RULE_update_set_clause_element = 154;
InceptorOracleParser.RULE_update_set_clause_element_part = 155;
InceptorOracleParser.RULE_update_set_elements = 156;
InceptorOracleParser.RULE_update_set_element = 157;
InceptorOracleParser.RULE_deleteStatement = 158;
InceptorOracleParser.RULE_crudTargetStatement = 159;
InceptorOracleParser.RULE_dclStatement = 160;
InceptorOracleParser.RULE_beginTransactionStatement = 161;
InceptorOracleParser.RULE_commitTransactionStatement = 162;
InceptorOracleParser.RULE_rollbackTransactionStatement = 163;
InceptorOracleParser.RULE_transactionSettingStatement = 164;
InceptorOracleParser.RULE_ddlAStatement = 165;
InceptorOracleParser.RULE_createDatabaseStatement = 166;
InceptorOracleParser.RULE_switchDatabaseStatement = 167;
InceptorOracleParser.RULE_switchApplicationStatement = 168;
InceptorOracleParser.RULE_dropDatabaseStatement = 169;
InceptorOracleParser.RULE_createDbLinkStatement = 170;
InceptorOracleParser.RULE_dropDbLinkStatement = 171;
InceptorOracleParser.RULE_dblink = 172;
InceptorOracleParser.RULE_dblinkUser = 173;
InceptorOracleParser.RULE_dblinkPwd = 174;
InceptorOracleParser.RULE_dblinkService = 175;
InceptorOracleParser.RULE_createTableStatement = 176;
InceptorOracleParser.RULE_createTemporaryTableStatement = 177;
InceptorOracleParser.RULE_tableDefinitionClause = 178;
InceptorOracleParser.RULE_noDataCopyQuery = 179;
InceptorOracleParser.RULE_createStreamStatement = 180;
InceptorOracleParser.RULE_createMetricStatement = 181;
InceptorOracleParser.RULE_streamJob = 182;
InceptorOracleParser.RULE_createJobStatement = 183;
InceptorOracleParser.RULE_streamRule = 184;
InceptorOracleParser.RULE_createRuleStatement = 185;
InceptorOracleParser.RULE_dropRuleStatement = 186;
InceptorOracleParser.RULE_createRuleBaseStatement = 187;
InceptorOracleParser.RULE_switchRuleBaseStatement = 188;
InceptorOracleParser.RULE_dropRuleBaseStatement = 189;
InceptorOracleParser.RULE_ruleGroupType = 190;
InceptorOracleParser.RULE_createPolicyStatement = 191;
InceptorOracleParser.RULE_createRuleGroupStatement = 192;
InceptorOracleParser.RULE_intoRuleGroupStatement = 193;
InceptorOracleParser.RULE_ruleConstraintType = 194;
InceptorOracleParser.RULE_policyKey = 195;
InceptorOracleParser.RULE_createPolicyRuleStatement = 196;
InceptorOracleParser.RULE_dropPolicyStatement = 197;
InceptorOracleParser.RULE_switchPolicyStatement = 198;
InceptorOracleParser.RULE_dropPolicyRuleStatement = 199;
InceptorOracleParser.RULE_createApplicationStatement = 200;
InceptorOracleParser.RULE_dropApplicationStatement = 201;
InceptorOracleParser.RULE_dropTableStatement = 202;
InceptorOracleParser.RULE_dropStreamStatement = 203;
InceptorOracleParser.RULE_dropMetricStatement = 204;
InceptorOracleParser.RULE_dropJobStatement = 205;
InceptorOracleParser.RULE_createRuleFunctionStatement = 206;
InceptorOracleParser.RULE_dropRuleFunctionStatement = 207;
InceptorOracleParser.RULE_dropCachedMetricStatement = 208;
InceptorOracleParser.RULE_truncateCachedMetricStatement = 209;
InceptorOracleParser.RULE_truncateTableStatement = 210;
InceptorOracleParser.RULE_tablePartitionPrefix = 211;
InceptorOracleParser.RULE_ctasTargetStatement = 212;
InceptorOracleParser.RULE_tableRowNullFormat = 213;
InceptorOracleParser.RULE_rowFormatSerde = 214;
InceptorOracleParser.RULE_rowFormatDelimited = 215;
InceptorOracleParser.RULE_tableRowFormat = 216;
InceptorOracleParser.RULE_tableComment = 217;
InceptorOracleParser.RULE_tablePartition = 218;
InceptorOracleParser.RULE_tableRoute = 219;
InceptorOracleParser.RULE_tableRouteSpec = 220;
InceptorOracleParser.RULE_tableRangeRoute = 221;
InceptorOracleParser.RULE_rangeRouteValues = 222;
InceptorOracleParser.RULE_tableHashRoute = 223;
InceptorOracleParser.RULE_tableBuckets = 224;
InceptorOracleParser.RULE_tableSkewed = 225;
InceptorOracleParser.RULE_skewedValueElement = 226;
InceptorOracleParser.RULE_skewedColumnValuePairList = 227;
InceptorOracleParser.RULE_skewedColumnValuePair = 228;
InceptorOracleParser.RULE_skewedColumnValues = 229;
InceptorOracleParser.RULE_skewedColumnValue = 230;
InceptorOracleParser.RULE_skewedValueLocationElement = 231;
InceptorOracleParser.RULE_tablePropertiesPrefixed = 232;
InceptorOracleParser.RULE_erroLogTableSpec = 233;
InceptorOracleParser.RULE_errorRejectSpec = 234;
InceptorOracleParser.RULE_tableProperties = 235;
InceptorOracleParser.RULE_tablePropertiesList = 236;
InceptorOracleParser.RULE_tableRowFormatFieldIdentifier = 237;
InceptorOracleParser.RULE_tableRowFormatCollItemsIdentifier = 238;
InceptorOracleParser.RULE_tableRowFormatMapKeysIdentifier = 239;
InceptorOracleParser.RULE_tableRowFormatLinesIdentifier = 240;
InceptorOracleParser.RULE_esProps = 241;
InceptorOracleParser.RULE_holoProps = 242;
InceptorOracleParser.RULE_holoTableSize = 243;
InceptorOracleParser.RULE_tableFileFormat = 244;
InceptorOracleParser.RULE_stargateIdentifier = 245;
InceptorOracleParser.RULE_storeArgs = 246;
InceptorOracleParser.RULE_storeArgName = 247;
InceptorOracleParser.RULE_tableLocation = 248;
InceptorOracleParser.RULE_restrictOrCascade = 249;
InceptorOracleParser.RULE_databaseComment = 250;
InceptorOracleParser.RULE_dbLocation = 251;
InceptorOracleParser.RULE_dbProperties = 252;
InceptorOracleParser.RULE_dbPropertiesList = 253;
InceptorOracleParser.RULE_ifExists = 254;
InceptorOracleParser.RULE_ifNotExists = 255;
InceptorOracleParser.RULE_createSequenceStatement = 256;
InceptorOracleParser.RULE_dropSequenceStatement = 257;
InceptorOracleParser.RULE_ddlBStatement = 258;
InceptorOracleParser.RULE_descStatement = 259;
InceptorOracleParser.RULE_showStatement = 260;
InceptorOracleParser.RULE_showStatementPartA = 261;
InceptorOracleParser.RULE_showStatementPartB = 262;
InceptorOracleParser.RULE_showStatementPartC = 263;
InceptorOracleParser.RULE_metastoreCheck = 264;
InceptorOracleParser.RULE_dropViewStatement = 265;
InceptorOracleParser.RULE_dropMaterializedViewStatement = 266;
InceptorOracleParser.RULE_createFunctionStatement = 267;
InceptorOracleParser.RULE_createMacroStatement = 268;
InceptorOracleParser.RULE_createIndexStatement = 269;
InceptorOracleParser.RULE_dropIndexStatement = 270;
InceptorOracleParser.RULE_dropFunctionStatement = 271;
InceptorOracleParser.RULE_reloadFunctionStatement = 272;
InceptorOracleParser.RULE_dropMacroStatement = 273;
InceptorOracleParser.RULE_functionType = 274;
InceptorOracleParser.RULE_cleanClassLoader = 275;
InceptorOracleParser.RULE_analyzeStatement = 276;
InceptorOracleParser.RULE_lockStatement = 277;
InceptorOracleParser.RULE_lockDatabase = 278;
InceptorOracleParser.RULE_unlockStatement = 279;
InceptorOracleParser.RULE_unlockDatabase = 280;
InceptorOracleParser.RULE_createRoleStatement = 281;
InceptorOracleParser.RULE_dropRoleStatement = 282;
InceptorOracleParser.RULE_grantPrivileges = 283;
InceptorOracleParser.RULE_revokePrivileges = 284;
InceptorOracleParser.RULE_showQuota = 285;
InceptorOracleParser.RULE_showFacl = 286;
InceptorOracleParser.RULE_showGrants = 287;
InceptorOracleParser.RULE_showRoleGrants = 288;
InceptorOracleParser.RULE_showRolePrincipals = 289;
InceptorOracleParser.RULE_showRoles = 290;
InceptorOracleParser.RULE_showBlacklist = 291;
InceptorOracleParser.RULE_showSchedulerMode = 292;
InceptorOracleParser.RULE_grantQuota = 293;
InceptorOracleParser.RULE_revokeQuota = 294;
InceptorOracleParser.RULE_faclSpec = 295;
InceptorOracleParser.RULE_grantFacl = 296;
InceptorOracleParser.RULE_revokeFacl = 297;
InceptorOracleParser.RULE_grantRole = 298;
InceptorOracleParser.RULE_revokeRole = 299;
InceptorOracleParser.RULE_showCurrentRole = 300;
InceptorOracleParser.RULE_syncIndex = 301;
InceptorOracleParser.RULE_syncRule = 302;
InceptorOracleParser.RULE_syncPolicy = 303;
InceptorOracleParser.RULE_setRole = 304;
InceptorOracleParser.RULE_quotaDb = 305;
InceptorOracleParser.RULE_quotaUser = 306;
InceptorOracleParser.RULE_userOrGroup = 307;
InceptorOracleParser.RULE_withGrantOption = 308;
InceptorOracleParser.RULE_withAdminOption = 309;
InceptorOracleParser.RULE_adminOptionFor = 310;
InceptorOracleParser.RULE_quotaSpec = 311;
InceptorOracleParser.RULE_privilegeIncludeColObject = 312;
InceptorOracleParser.RULE_allTablesInDB = 313;
InceptorOracleParser.RULE_privObjectCols = 314;
InceptorOracleParser.RULE_grantOptionFor = 315;
InceptorOracleParser.RULE_privilegeList = 316;
InceptorOracleParser.RULE_privlegeDef = 317;
InceptorOracleParser.RULE_privilegeType = 318;
InceptorOracleParser.RULE_privilegeObject = 319;
InceptorOracleParser.RULE_privObjectType = 320;
InceptorOracleParser.RULE_privObject = 321;
InceptorOracleParser.RULE_principalSpecification = 322;
InceptorOracleParser.RULE_principalName = 323;
InceptorOracleParser.RULE_lockMode = 324;
InceptorOracleParser.RULE_indexComment = 325;
InceptorOracleParser.RULE_autoRebuild = 326;
InceptorOracleParser.RULE_indexTblName = 327;
InceptorOracleParser.RULE_indexPropertiesPrefixed = 328;
InceptorOracleParser.RULE_indexProperties = 329;
InceptorOracleParser.RULE_indexPropertiesList = 330;
InceptorOracleParser.RULE_tabTypeExpr = 331;
InceptorOracleParser.RULE_descTabTypeExpr = 332;
InceptorOracleParser.RULE_partTypeExpr = 333;
InceptorOracleParser.RULE_descPartTypeExpr = 334;
InceptorOracleParser.RULE_showStmtIdentifier = 335;
InceptorOracleParser.RULE_sysFuncNames = 336;
InceptorOracleParser.RULE_descFuncNames = 337;
InceptorOracleParser.RULE_ddlCStatement = 338;
InceptorOracleParser.RULE_createOrReplaceStatement = 339;
InceptorOracleParser.RULE_createViewStatement = 340;
InceptorOracleParser.RULE_rewriteEnabled = 341;
InceptorOracleParser.RULE_rewriteDisabled = 342;
InceptorOracleParser.RULE_createMaterializedViewStatement = 343;
InceptorOracleParser.RULE_viewPartition = 344;
InceptorOracleParser.RULE_showPermission = 345;
InceptorOracleParser.RULE_grantPermission = 346;
InceptorOracleParser.RULE_revokePermission = 347;
InceptorOracleParser.RULE_grantDefinition = 348;
InceptorOracleParser.RULE_revokeDefinition = 349;
InceptorOracleParser.RULE_rclsObject = 350;
InceptorOracleParser.RULE_ddlStatement = 351;
InceptorOracleParser.RULE_compactStatement = 352;
InceptorOracleParser.RULE_precedenceUnaryOperator = 353;
InceptorOracleParser.RULE_precedenceUnaryPrefixExpression = 354;
InceptorOracleParser.RULE_precedenceUnarySuffixExpression = 355;
InceptorOracleParser.RULE_precedenceBitwiseXorOperator = 356;
InceptorOracleParser.RULE_precedenceBitwiseXorExpression = 357;
InceptorOracleParser.RULE_precedenceStarOperator = 358;
InceptorOracleParser.RULE_precedenceStarExpression = 359;
InceptorOracleParser.RULE_precedencePlusOperator = 360;
InceptorOracleParser.RULE_precedencePlusExpression = 361;
InceptorOracleParser.RULE_precedenceOPConcatOperator = 362;
InceptorOracleParser.RULE_precedenceOPConcatExpression = 363;
InceptorOracleParser.RULE_precedenceAmpersandOperator = 364;
InceptorOracleParser.RULE_precedenceAmpersandExpression = 365;
InceptorOracleParser.RULE_precedenceBitwiseOrOperator = 366;
InceptorOracleParser.RULE_precedenceBitwiseOrExpression = 367;
InceptorOracleParser.RULE_precedenceRegexpOperator = 368;
InceptorOracleParser.RULE_precedenceEqualOperator = 369;
InceptorOracleParser.RULE_expression = 370;
InceptorOracleParser.RULE_expressions = 371;
InceptorOracleParser.RULE_expressionsInParenthesis = 372;
InceptorOracleParser.RULE_expressionsNotInParenthesis = 373;
InceptorOracleParser.RULE_expressionPart = 374;
InceptorOracleParser.RULE_expressionList = 375;
InceptorOracleParser.RULE_outer_join_sign = 376;
InceptorOracleParser.RULE_nullCondition = 377;
InceptorOracleParser.RULE_precedenceSimilarExpression = 378;
InceptorOracleParser.RULE_precedenceSimilarExpressionPart = 379;
InceptorOracleParser.RULE_precedenceSimilarExpressionAtom = 380;
InceptorOracleParser.RULE_precedenceSimilarExpressionPartNot = 381;
InceptorOracleParser.RULE_precedenceNotOperator = 382;
InceptorOracleParser.RULE_precedenceNotExpression = 383;
InceptorOracleParser.RULE_precedenceAndOperator = 384;
InceptorOracleParser.RULE_precedenceAndExpression = 385;
InceptorOracleParser.RULE_precedenceOrOperator = 386;
InceptorOracleParser.RULE_precedenceOrExpression = 387;
InceptorOracleParser.RULE_precedenceEqualExpression = 388;
InceptorOracleParser.RULE_fromClause = 389;
InceptorOracleParser.RULE_joinSource = 390;
InceptorOracleParser.RULE_uniqueJoinSource = 391;
InceptorOracleParser.RULE_uniqueJoinExpr = 392;
InceptorOracleParser.RULE_uniqueJoinToken = 393;
InceptorOracleParser.RULE_joinToken = 394;
InceptorOracleParser.RULE_joinTokenRequireOn = 395;
InceptorOracleParser.RULE_lateralView = 396;
InceptorOracleParser.RULE_fromSource = 397;
InceptorOracleParser.RULE_tableSource = 398;
InceptorOracleParser.RULE_subQuerySource = 399;
InceptorOracleParser.RULE_valuesSource = 400;
InceptorOracleParser.RULE_patternSource = 401;
InceptorOracleParser.RULE_patternEvent = 402;
InceptorOracleParser.RULE_timesExpr = 403;
InceptorOracleParser.RULE_oneOrMoreExpr = 404;
InceptorOracleParser.RULE_patternExpression = 405;
InceptorOracleParser.RULE_eventOp = 406;
InceptorOracleParser.RULE_patternTimewindow = 407;
InceptorOracleParser.RULE_cepIntervalLiteral = 408;
InceptorOracleParser.RULE_cepIntervalQualifiers = 409;
InceptorOracleParser.RULE_tableBucketSample = 410;
InceptorOracleParser.RULE_splitSample = 411;
InceptorOracleParser.RULE_tableSample = 412;
InceptorOracleParser.RULE_normfunction = 413;
InceptorOracleParser.RULE_funcOp = 414;
InceptorOracleParser.RULE_functionName = 415;
InceptorOracleParser.RULE_windowFuncIgnoreNulls = 416;
InceptorOracleParser.RULE_paramExpression = 417;
InceptorOracleParser.RULE_castExpression = 418;
InceptorOracleParser.RULE_existExpression = 419;
InceptorOracleParser.RULE_widcardExpression = 420;
InceptorOracleParser.RULE_inRightOp = 421;
InceptorOracleParser.RULE_betweenRightOp = 422;
InceptorOracleParser.RULE_likeanyRightOp = 423;
InceptorOracleParser.RULE_likeallRightOp = 424;
InceptorOracleParser.RULE_extractExpression = 425;
InceptorOracleParser.RULE_substringExpression = 426;
InceptorOracleParser.RULE_extractTarget = 427;
InceptorOracleParser.RULE_seperatorFrom = 428;
InceptorOracleParser.RULE_seperatorFor = 429;
InceptorOracleParser.RULE_yearFuncExpression = 430;
InceptorOracleParser.RULE_monthFuncExpression = 431;
InceptorOracleParser.RULE_dayFuncExpression = 432;
InceptorOracleParser.RULE_hourFuncExpression = 433;
InceptorOracleParser.RULE_minuteFuncExpression = 434;
InceptorOracleParser.RULE_secondFuncExpression = 435;
InceptorOracleParser.RULE_caseExpression = 436;
InceptorOracleParser.RULE_whenExpression = 437;
InceptorOracleParser.RULE_condition = 438;
InceptorOracleParser.RULE_resourceList = 439;
InceptorOracleParser.RULE_resource = 440;
InceptorOracleParser.RULE_resourceType = 441;
InceptorOracleParser.RULE_graphPathStatement = 442;
InceptorOracleParser.RULE_graphReference = 443;
InceptorOracleParser.RULE_graphPattern = 444;
InceptorOracleParser.RULE_graphEdge = 445;
InceptorOracleParser.RULE_graphItem = 446;
InceptorOracleParser.RULE_graphSelectClause = 447;
InceptorOracleParser.RULE_graphSelectTable = 448;
InceptorOracleParser.RULE_groupingSetExpression = 449;
InceptorOracleParser.RULE_ordinaryGroupingSet = 450;
InceptorOracleParser.RULE_groupByExpressionList = 451;
InceptorOracleParser.RULE_groupByElements = 452;
InceptorOracleParser.RULE_rollupClause = 453;
InceptorOracleParser.RULE_cubeClause = 454;
InceptorOracleParser.RULE_groupingSetsClause = 455;
InceptorOracleParser.RULE_groupByClause = 456;
InceptorOracleParser.RULE_groupByExpression = 457;
InceptorOracleParser.RULE_hiveDataOpStatement = 458;
InceptorOracleParser.RULE_loadStatement = 459;
InceptorOracleParser.RULE_exportStatement = 460;
InceptorOracleParser.RULE_importStatement = 461;
InceptorOracleParser.RULE_createHyperbaseIndexStatement = 462;
InceptorOracleParser.RULE_rebuildHolodeskGlobalIndexStatement = 463;
InceptorOracleParser.RULE_fulltextColsList = 464;
InceptorOracleParser.RULE_fulltextIndexAndProps = 465;
InceptorOracleParser.RULE_fulltextIndexProps = 466;
InceptorOracleParser.RULE_shardNumber = 467;
InceptorOracleParser.RULE_dropHyperbaseIndexStatement = 468;
InceptorOracleParser.RULE_hyperbaseColumnNameList = 469;
InceptorOracleParser.RULE_indexWithLength = 470;
InceptorOracleParser.RULE_segmentLength = 471;
InceptorOracleParser.RULE_attachColumn = 472;
InceptorOracleParser.RULE_mandarinStatement = 473;
InceptorOracleParser.RULE_selectStatement = 474;
InceptorOracleParser.RULE_subSelectStatement = 475;
InceptorOracleParser.RULE_explicitInsertStatement = 476;
InceptorOracleParser.RULE_batchInsertStatement = 477;
InceptorOracleParser.RULE_withClause = 478;
InceptorOracleParser.RULE_withClauseElement = 479;
InceptorOracleParser.RULE_regular_body = 480;
InceptorOracleParser.RULE_bulkCollect = 481;
InceptorOracleParser.RULE_body = 482;
InceptorOracleParser.RULE_insertClause = 483;
InceptorOracleParser.RULE_whereClause = 484;
InceptorOracleParser.RULE_qualifyClause = 485;
InceptorOracleParser.RULE_havingClause = 486;
InceptorOracleParser.RULE_havingCondition = 487;
InceptorOracleParser.RULE_valuesClause = 488;
InceptorOracleParser.RULE_valuesRow = 489;
InceptorOracleParser.RULE_batchValuesRow = 490;
InceptorOracleParser.RULE_batchValuesClause = 491;
InceptorOracleParser.RULE_searchCondition = 492;
InceptorOracleParser.RULE_hierarchicalQueryClause = 493;
InceptorOracleParser.RULE_startWithCondition = 494;
InceptorOracleParser.RULE_connectByCondition = 495;
InceptorOracleParser.RULE_nocycle = 496;
InceptorOracleParser.RULE_destination = 497;
InceptorOracleParser.RULE_queryStatementExpression = 498;
InceptorOracleParser.RULE_queryStatementExpressionPlus = 499;
InceptorOracleParser.RULE_queryStatementMayInParenthese = 500;
InceptorOracleParser.RULE_queryOperator = 501;
InceptorOracleParser.RULE_queryStatement = 502;
InceptorOracleParser.RULE_tableRangePartition = 503;
InceptorOracleParser.RULE_intervalPartitionValue = 504;
InceptorOracleParser.RULE_rangePartitionList = 505;
InceptorOracleParser.RULE_rangePartition = 506;
InceptorOracleParser.RULE_rangeValues = 507;
InceptorOracleParser.RULE_tablePartitionDesc = 508;
InceptorOracleParser.RULE_segmentAttributesClause = 509;
InceptorOracleParser.RULE_segmentAttribute = 510;
InceptorOracleParser.RULE_physicalAttributesClause = 511;
InceptorOracleParser.RULE_physicalAttribute = 512;
InceptorOracleParser.RULE_storageClause = 513;
InceptorOracleParser.RULE_storageItem = 514;
InceptorOracleParser.RULE_selectClauseParserStart = 515;
InceptorOracleParser.RULE_selectClause = 516;
InceptorOracleParser.RULE_selectList = 517;
InceptorOracleParser.RULE_hintClause = 518;
InceptorOracleParser.RULE_hintList = 519;
InceptorOracleParser.RULE_hintItem = 520;
InceptorOracleParser.RULE_stargateHintName = 521;
InceptorOracleParser.RULE_stargateHintArgs = 522;
InceptorOracleParser.RULE_stargateHintArgName = 523;
InceptorOracleParser.RULE_hintName = 524;
InceptorOracleParser.RULE_indexHintName = 525;
InceptorOracleParser.RULE_mboHintName = 526;
InceptorOracleParser.RULE_indexHintArgs = 527;
InceptorOracleParser.RULE_mboHintArgs = 528;
InceptorOracleParser.RULE_indexHintArgName = 529;
InceptorOracleParser.RULE_mboHintArgName = 530;
InceptorOracleParser.RULE_hintArgs = 531;
InceptorOracleParser.RULE_hintArgName = 532;
InceptorOracleParser.RULE_selectItem = 533;
InceptorOracleParser.RULE_trfmClause = 534;
InceptorOracleParser.RULE_selectExpression = 535;
InceptorOracleParser.RULE_selectExpressionList = 536;
InceptorOracleParser.RULE_rowFormat = 537;
InceptorOracleParser.RULE_recordReader = 538;
InceptorOracleParser.RULE_recordWriter = 539;
InceptorOracleParser.RULE_selectTrfmClause = 540;
InceptorOracleParser.RULE_sequenceOption = 541;
InceptorOracleParser.RULE_sequenceOptionWithoutStart = 542;
InceptorOracleParser.RULE_sequenceIncrement = 543;
InceptorOracleParser.RULE_sequenceStartWith = 544;
InceptorOracleParser.RULE_sequenceMaxValue = 545;
InceptorOracleParser.RULE_sequenceMinValue = 546;
InceptorOracleParser.RULE_sequenceCycle = 547;
InceptorOracleParser.RULE_sequenceCache = 548;
InceptorOracleParser.RULE_sequenceOrder = 549;
InceptorOracleParser.RULE_orderByClause = 550;
InceptorOracleParser.RULE_clusterByClause = 551;
InceptorOracleParser.RULE_partitionByClause = 552;
InceptorOracleParser.RULE_distributeByClause = 553;
InceptorOracleParser.RULE_sortByClause = 554;
InceptorOracleParser.RULE_limitClause = 555;
InceptorOracleParser.RULE_partitioningSpec = 556;
InceptorOracleParser.RULE_forUpdateClause = 557;
InceptorOracleParser.RULE_window_clause = 558;
InceptorOracleParser.RULE_window_defn = 559;
InceptorOracleParser.RULE_window_specification = 560;
InceptorOracleParser.RULE_window_frame = 561;
InceptorOracleParser.RULE_window_range_expression = 562;
InceptorOracleParser.RULE_window_value_expression = 563;
InceptorOracleParser.RULE_window_timerange_expression = 564;
InceptorOracleParser.RULE_window_frame_start_boundary = 565;
InceptorOracleParser.RULE_window_frame_boundary = 566;
InceptorOracleParser.RULE_window_time_frame_start_boundary = 567;
InceptorOracleParser.RULE_window_time_frame_boundary = 568;
InceptorOracleParser.RULE_window_time_frame_interval = 569;
InceptorOracleParser.RULE_window_time_frame_resetinterval = 570;
InceptorOracleParser.RULE_window_time_frame_cache_clause = 571;
InceptorOracleParser.RULE_stream_window_clause = 572;
InceptorOracleParser.RULE_stream_window_defn = 573;
InceptorOracleParser.RULE_stream_window_specification = 574;
InceptorOracleParser.RULE_stream_window_frame = 575;
InceptorOracleParser.RULE_sessionwindow_expression = 576;
InceptorOracleParser.RULE_sessionwindow_start_expression = 577;
InceptorOracleParser.RULE_sessionwindow_stop_expression = 578;
InceptorOracleParser.RULE_session_boundary_interval_expr = 579;
InceptorOracleParser.RULE_sessionwindow_partition_expression = 580;
InceptorOracleParser.RULE_sessionwindow_expire_expression = 581;
InceptorOracleParser.RULE_sessionwindow_expire_operation_expression = 582;
InceptorOracleParser.RULE_streamwindow_range_expression = 583;
InceptorOracleParser.RULE_streamwindow_length = 584;
InceptorOracleParser.RULE_streamwindow_slide_expression = 585;
InceptorOracleParser.RULE_streamwindow_interval_expression = 586;
InceptorOracleParser.RULE_streamwindow_separated_expression = 587;
InceptorOracleParser.RULE_streamwindow_format_expression = 588;
InceptorOracleParser.RULE_streamwindow_zerotime_expression = 589;
InceptorOracleParser.RULE_streamIntervalLiteral = 590;
InceptorOracleParser.RULE_streamIntervalQualifiers = 591;
InceptorOracleParser.RULE_type = 592;
InceptorOracleParser.RULE_primitiveType = 593;
InceptorOracleParser.RULE_listType = 594;
InceptorOracleParser.RULE_structType = 595;
InceptorOracleParser.RULE_mapType = 596;
InceptorOracleParser.RULE_unionType = 597;
InceptorOracleParser.RULE_columnNameColonType = 598;
InceptorOracleParser.RULE_colType = 599;
InceptorOracleParser.RULE_colTypeList = 600;
InceptorOracleParser.RULE_gotoStatement = 601;
InceptorOracleParser.RULE_returnStatement = 602;
InceptorOracleParser.RULE_continueStatement = 603;
InceptorOracleParser.RULE_exitStatement = 604;
InceptorOracleParser.RULE_dialectEndCase = 605;
InceptorOracleParser.RULE_cursorParserStart = 606;
InceptorOracleParser.RULE_cursorName = 607;
InceptorOracleParser.RULE_cursorParamSpec = 608;
InceptorOracleParser.RULE_cursorParamList = 609;
InceptorOracleParser.RULE_cursorReturnSpec = 610;
InceptorOracleParser.RULE_cursorBodySpec = 611;
InceptorOracleParser.RULE_cursorDeclStatement = 612;
InceptorOracleParser.RULE_openForOrOpenCursorStatement = 613;
InceptorOracleParser.RULE_openForClause = 614;
InceptorOracleParser.RULE_fetchCursorIntoStatement = 615;
InceptorOracleParser.RULE_closeCursorStatement = 616;
InceptorOracleParser.RULE_intoClause = 617;
InceptorOracleParser.RULE_realParam = 618;
InceptorOracleParser.RULE_parameters = 619;
InceptorOracleParser.RULE_parameter = 620;
InceptorOracleParser.RULE_parameter_attribute = 621;
InceptorOracleParser.RULE_declareSpecItem = 622;
InceptorOracleParser.RULE_declareVariable = 623;
InceptorOracleParser.RULE_variable_name = 624;
InceptorOracleParser.RULE_default_value = 625;
InceptorOracleParser.RULE_return_type_spec = 626;
InceptorOracleParser.RULE_size = 627;
InceptorOracleParser.RULE_leftValue = 628;
InceptorOracleParser.RULE_plFuncProcName = 629;
InceptorOracleParser.RULE_declareException = 630;
InceptorOracleParser.RULE_pragmaStatement = 631;
InceptorOracleParser.RULE_pragmas = 632;
InceptorOracleParser.RULE_pragmaExceptionInit = 633;
InceptorOracleParser.RULE_pragmaAutonomousTransaction = 634;
InceptorOracleParser.RULE_pragmaSeriallyReusable = 635;
InceptorOracleParser.RULE_declare_pragma = 636;
InceptorOracleParser.RULE_declare_record = 637;
InceptorOracleParser.RULE_declare_table = 638;
InceptorOracleParser.RULE_dynamicSqlParserStart = 639;
InceptorOracleParser.RULE_executeImmediateStatement = 640;
InceptorOracleParser.RULE_dynamicSqlStatement = 641;
InceptorOracleParser.RULE_usingClause = 642;
InceptorOracleParser.RULE_dynamicSqlBindArgs = 643;
InceptorOracleParser.RULE_dynamicSqlBindArg = 644;
InceptorOracleParser.RULE_assignStatement = 645;
InceptorOracleParser.RULE_nullStatement = 646;
InceptorOracleParser.RULE_exceptionParserStart = 647;
InceptorOracleParser.RULE_raiseStatement = 648;
InceptorOracleParser.RULE_exceptionHandlers = 649;
InceptorOracleParser.RULE_exceptionHandler = 650;
InceptorOracleParser.RULE_loopStatement = 651;
InceptorOracleParser.RULE_forLoopBound = 652;
InceptorOracleParser.RULE_rangeBound = 653;
InceptorOracleParser.RULE_rangeBoundMin = 654;
InceptorOracleParser.RULE_cursorBound = 655;
InceptorOracleParser.RULE_forAllStatement = 656;
InceptorOracleParser.RULE_saveExceptions = 657;
InceptorOracleParser.RULE_forAllBound = 658;
InceptorOracleParser.RULE_indicesBound = 659;
InceptorOracleParser.RULE_attr = 660;
InceptorOracleParser.RULE_attrs = 661;
InceptorOracleParser.RULE_moleculeExpression = 662;
InceptorOracleParser.RULE_ifStatement = 663;
InceptorOracleParser.RULE_elsifStatement = 664;
InceptorOracleParser.RULE_elseStatement = 665;
InceptorOracleParser.RULE_dialectNonReserved = 666;
InceptorOracleParser.RULE_dialectFunctionName = 667;
InceptorOracleParser.RULE_nonSqlStatement = 668;
InceptorOracleParser.RULE_statements = 669;
InceptorOracleParser.RULE_sqlStatementEmpty = 670;
InceptorOracleParser.RULE_sqlStatement = 671;
InceptorOracleParser.RULE_plantStatement = 672;
InceptorOracleParser.RULE_explainStatement = 673;
InceptorOracleParser.RULE_execStatement = 674;
InceptorOracleParser.RULE_pkgName = 675;
InceptorOracleParser.RULE_createPackageStatement = 676;
InceptorOracleParser.RULE_createPackageBodyStatement = 677;
InceptorOracleParser.RULE_dropPackageStatement = 678;
InceptorOracleParser.RULE_pkgDeclSpecItem = 679;
InceptorOracleParser.RULE_pkgBodyDeclSpecItem = 680;
InceptorOracleParser.RULE_declFunctionSpec = 681;
InceptorOracleParser.RULE_declProcedureSpec = 682;
InceptorOracleParser.RULE_anonExecStatement = 683;
InceptorOracleParser.RULE_plBlockStatement = 684;
InceptorOracleParser.RULE_plBlockBody = 685;
InceptorOracleParser.RULE_atomExecStatement = 686;
InceptorOracleParser.RULE_hintedStatement = 687;
InceptorOracleParser.RULE_label = 688;
InceptorOracleParser.RULE_labeledStatement = 689;
InceptorOracleParser.RULE_dialectCreateOrReplaceStatement = 690;
InceptorOracleParser.RULE_dialectDropStatement = 691;
InceptorOracleParser.RULE_createSQL92FunctionStatement = 692;
InceptorOracleParser.RULE_dropSQL92FunctionStatement = 693;
InceptorOracleParser.RULE_createSQL92ProcedureStatement = 694;
InceptorOracleParser.RULE_dropSQL92ProcedureStatement = 695;
InceptorOracleParser.RULE_dialectLimitClause = 696;
InceptorOracleParser.RULE_dialectCreateTemporaryTableStatement = 697;
InceptorOracleParser.RULE_dialectCreateTableStatement = 698;
InceptorOracleParser.RULE_dialectWithNoData = 699;
InceptorOracleParser.RULE_dialectcolumnConstraint = 700;
InceptorOracleParser.RULE_dialectTableDefinitionClause = 701;
InceptorOracleParser.RULE_dialectPrimitiveType = 702;
InceptorOracleParser.RULE_timeTypeLiteral = 703;
InceptorOracleParser.RULE_dateLiteral = 704;
InceptorOracleParser.RULE_timestampLiteral = 705;
InceptorOracleParser.RULE_sysdateortimestampLiteral = 706;
InceptorOracleParser.RULE_dateTimeExpression = 707;
InceptorOracleParser.RULE_monthExpression = 708;
InceptorOracleParser.RULE_intervalValue = 709;
InceptorOracleParser.RULE_intervalLiteral = 710;
InceptorOracleParser.RULE_intervalQualifiers = 711;
InceptorOracleParser.RULE_typeParserStart = 712;
InceptorOracleParser.RULE_datatype = 713;
InceptorOracleParser.RULE_otherType = 714;
InceptorOracleParser.RULE_scalarType = 715;
InceptorOracleParser.RULE_scalarTypes = 716;
InceptorOracleParser.RULE_typeDeclStatement = 717;
InceptorOracleParser.RULE_recordTypeDef = 718;
InceptorOracleParser.RULE_assocArrayOrNestedTableTypeDef = 719;
InceptorOracleParser.RULE_indexType = 720;
InceptorOracleParser.RULE_varrayTypeDef = 721;
InceptorOracleParser.RULE_elementType = 722;
InceptorOracleParser.RULE_refCursorTypeDef = 723;

class AliasNonReservedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_aliasNonReserved;
    }

	KW_AT() {
	    return this.getToken(InceptorOracleParser.KW_AT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterAliasNonReserved(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitAliasNonReserved(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitAliasNonReserved(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AliasContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_alias;
        this.value = null; // Token
    }

	Identifier() {
	    return this.getToken(InceptorOracleParser.Identifier, 0);
	};

	aliasNonReserved() {
	    return this.getTypedRuleContext(AliasNonReservedContext,0);
	};

	StringLiteral() {
	    return this.getToken(InceptorOracleParser.StringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterAlias(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitAlias(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitAlias(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_identifier;
    }

	Identifier() {
	    return this.getToken(InceptorOracleParser.Identifier, 0);
	};

	commonNonReserved() {
	    return this.getTypedRuleContext(CommonNonReservedContext,0);
	};

	dialectNonReserved() {
	    return this.getTypedRuleContext(DialectNonReservedContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitIdentifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColumnAliasContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_columnAlias;
        this.value = null; // Token
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	StringLiteral() {
	    return this.getToken(InceptorOracleParser.StringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterColumnAlias(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitColumnAlias(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitColumnAlias(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CommonNonReservedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_commonNonReserved;
    }

	KW_TRUE() {
	    return this.getToken(InceptorOracleParser.KW_TRUE, 0);
	};

	KW_FALSE() {
	    return this.getToken(InceptorOracleParser.KW_FALSE, 0);
	};

	KW_LIKE() {
	    return this.getToken(InceptorOracleParser.KW_LIKE, 0);
	};

	KW_EXISTS() {
	    return this.getToken(InceptorOracleParser.KW_EXISTS, 0);
	};

	KW_ASC() {
	    return this.getToken(InceptorOracleParser.KW_ASC, 0);
	};

	KW_DESC() {
	    return this.getToken(InceptorOracleParser.KW_DESC, 0);
	};

	KW_ORDER() {
	    return this.getToken(InceptorOracleParser.KW_ORDER, 0);
	};

	KW_GROUP() {
	    return this.getToken(InceptorOracleParser.KW_GROUP, 0);
	};

	KW_BY() {
	    return this.getToken(InceptorOracleParser.KW_BY, 0);
	};

	KW_INSERT() {
	    return this.getToken(InceptorOracleParser.KW_INSERT, 0);
	};

	KW_OVERWRITE() {
	    return this.getToken(InceptorOracleParser.KW_OVERWRITE, 0);
	};

	KW_OUTER() {
	    return this.getToken(InceptorOracleParser.KW_OUTER, 0);
	};

	KW_LEFT() {
	    return this.getToken(InceptorOracleParser.KW_LEFT, 0);
	};

	KW_RIGHT() {
	    return this.getToken(InceptorOracleParser.KW_RIGHT, 0);
	};

	KW_FULL() {
	    return this.getToken(InceptorOracleParser.KW_FULL, 0);
	};

	KW_PARTITION() {
	    return this.getToken(InceptorOracleParser.KW_PARTITION, 0);
	};

	KW_PARTITIONS() {
	    return this.getToken(InceptorOracleParser.KW_PARTITIONS, 0);
	};

	KW_PATTERN() {
	    return this.getToken(InceptorOracleParser.KW_PATTERN, 0);
	};

	KW_FOLLOWEDBY() {
	    return this.getToken(InceptorOracleParser.KW_FOLLOWEDBY, 0);
	};

	KW_NOTFOLLOWEDBY() {
	    return this.getToken(InceptorOracleParser.KW_NOTFOLLOWEDBY, 0);
	};

	KW_NOTNEXT() {
	    return this.getToken(InceptorOracleParser.KW_NOTNEXT, 0);
	};

	KW_PATTERN_TIMES() {
	    return this.getToken(InceptorOracleParser.KW_PATTERN_TIMES, 0);
	};

	KW_WITHIN() {
	    return this.getToken(InceptorOracleParser.KW_WITHIN, 0);
	};

	KW_TABLE() {
	    return this.getToken(InceptorOracleParser.KW_TABLE, 0);
	};

	KW_TABLES() {
	    return this.getToken(InceptorOracleParser.KW_TABLES, 0);
	};

	KW_COLUMNS() {
	    return this.getToken(InceptorOracleParser.KW_COLUMNS, 0);
	};

	KW_INDEXES() {
	    return this.getToken(InceptorOracleParser.KW_INDEXES, 0);
	};

	KW_INDEX() {
	    return this.getToken(InceptorOracleParser.KW_INDEX, 0);
	};

	KW_REBUILD() {
	    return this.getToken(InceptorOracleParser.KW_REBUILD, 0);
	};

	KW_FUNCTIONS() {
	    return this.getToken(InceptorOracleParser.KW_FUNCTIONS, 0);
	};

	KW_RESOURCE() {
	    return this.getToken(InceptorOracleParser.KW_RESOURCE, 0);
	};

	KW_SHOW() {
	    return this.getToken(InceptorOracleParser.KW_SHOW, 0);
	};

	KW_MSCK() {
	    return this.getToken(InceptorOracleParser.KW_MSCK, 0);
	};

	KW_REPAIR() {
	    return this.getToken(InceptorOracleParser.KW_REPAIR, 0);
	};

	KW_DIRECTORY() {
	    return this.getToken(InceptorOracleParser.KW_DIRECTORY, 0);
	};

	KW_LOCAL() {
	    return this.getToken(InceptorOracleParser.KW_LOCAL, 0);
	};

	KW_USING() {
	    return this.getToken(InceptorOracleParser.KW_USING, 0);
	};

	KW_GLOBAL() {
	    return this.getToken(InceptorOracleParser.KW_GLOBAL, 0);
	};

	KW_FULLTEXT() {
	    return this.getToken(InceptorOracleParser.KW_FULLTEXT, 0);
	};

	KW_CLUSTER() {
	    return this.getToken(InceptorOracleParser.KW_CLUSTER, 0);
	};

	KW_DISTRIBUTE() {
	    return this.getToken(InceptorOracleParser.KW_DISTRIBUTE, 0);
	};

	KW_SORT() {
	    return this.getToken(InceptorOracleParser.KW_SORT, 0);
	};

	KW_UNION() {
	    return this.getToken(InceptorOracleParser.KW_UNION, 0);
	};

	KW_LOAD() {
	    return this.getToken(InceptorOracleParser.KW_LOAD, 0);
	};

	KW_EXPORT() {
	    return this.getToken(InceptorOracleParser.KW_EXPORT, 0);
	};

	KW_IMPORT() {
	    return this.getToken(InceptorOracleParser.KW_IMPORT, 0);
	};

	KW_DATA() {
	    return this.getToken(InceptorOracleParser.KW_DATA, 0);
	};

	KW_INPATH() {
	    return this.getToken(InceptorOracleParser.KW_INPATH, 0);
	};

	KW_IS() {
	    return this.getToken(InceptorOracleParser.KW_IS, 0);
	};

	KW_CREATE() {
	    return this.getToken(InceptorOracleParser.KW_CREATE, 0);
	};

	KW_EXTERNAL() {
	    return this.getToken(InceptorOracleParser.KW_EXTERNAL, 0);
	};

	KW_ALTER() {
	    return this.getToken(InceptorOracleParser.KW_ALTER, 0);
	};

	KW_CHANGE() {
	    return this.getToken(InceptorOracleParser.KW_CHANGE, 0);
	};

	KW_FIRST() {
	    return this.getToken(InceptorOracleParser.KW_FIRST, 0);
	};

	KW_LAST() {
	    return this.getToken(InceptorOracleParser.KW_LAST, 0);
	};

	KW_AFTER() {
	    return this.getToken(InceptorOracleParser.KW_AFTER, 0);
	};

	KW_DESCRIBE() {
	    return this.getToken(InceptorOracleParser.KW_DESCRIBE, 0);
	};

	KW_DROP() {
	    return this.getToken(InceptorOracleParser.KW_DROP, 0);
	};

	KW_RENAME() {
	    return this.getToken(InceptorOracleParser.KW_RENAME, 0);
	};

	KW_IGNORE() {
	    return this.getToken(InceptorOracleParser.KW_IGNORE, 0);
	};

	KW_RESPECT() {
	    return this.getToken(InceptorOracleParser.KW_RESPECT, 0);
	};

	KW_PROTECTION() {
	    return this.getToken(InceptorOracleParser.KW_PROTECTION, 0);
	};

	KW_TO() {
	    return this.getToken(InceptorOracleParser.KW_TO, 0);
	};

	KW_COMMENT() {
	    return this.getToken(InceptorOracleParser.KW_COMMENT, 0);
	};

	KW_PROMPT() {
	    return this.getToken(InceptorOracleParser.KW_PROMPT, 0);
	};

	KW_SPOOL() {
	    return this.getToken(InceptorOracleParser.KW_SPOOL, 0);
	};

	KW_BOOLEAN() {
	    return this.getToken(InceptorOracleParser.KW_BOOLEAN, 0);
	};

	KW_TINYINT() {
	    return this.getToken(InceptorOracleParser.KW_TINYINT, 0);
	};

	KW_BYTE() {
	    return this.getToken(InceptorOracleParser.KW_BYTE, 0);
	};

	KW_SMALLINT() {
	    return this.getToken(InceptorOracleParser.KW_SMALLINT, 0);
	};

	KW_INT() {
	    return this.getToken(InceptorOracleParser.KW_INT, 0);
	};

	KW_BIGINT() {
	    return this.getToken(InceptorOracleParser.KW_BIGINT, 0);
	};

	KW_FLOAT() {
	    return this.getToken(InceptorOracleParser.KW_FLOAT, 0);
	};

	KW_DOUBLE() {
	    return this.getToken(InceptorOracleParser.KW_DOUBLE, 0);
	};

	KW_DATE() {
	    return this.getToken(InceptorOracleParser.KW_DATE, 0);
	};

	KW_INTERVAL() {
	    return this.getToken(InceptorOracleParser.KW_INTERVAL, 0);
	};

	KW_DATETIME() {
	    return this.getToken(InceptorOracleParser.KW_DATETIME, 0);
	};

	KW_TIMESTAMP() {
	    return this.getToken(InceptorOracleParser.KW_TIMESTAMP, 0);
	};

	KW_TIME() {
	    return this.getToken(InceptorOracleParser.KW_TIME, 0);
	};

	KW_GEO() {
	    return this.getToken(InceptorOracleParser.KW_GEO, 0);
	};

	KW_DECIMAL() {
	    return this.getToken(InceptorOracleParser.KW_DECIMAL, 0);
	};

	KW_STRING() {
	    return this.getToken(InceptorOracleParser.KW_STRING, 0);
	};

	KW_ARRAY() {
	    return this.getToken(InceptorOracleParser.KW_ARRAY, 0);
	};

	KW_STRUCT() {
	    return this.getToken(InceptorOracleParser.KW_STRUCT, 0);
	};

	KW_UNIONTYPE() {
	    return this.getToken(InceptorOracleParser.KW_UNIONTYPE, 0);
	};

	KW_PARTITIONED() {
	    return this.getToken(InceptorOracleParser.KW_PARTITIONED, 0);
	};

	KW_CLUSTERED() {
	    return this.getToken(InceptorOracleParser.KW_CLUSTERED, 0);
	};

	KW_SORTED() {
	    return this.getToken(InceptorOracleParser.KW_SORTED, 0);
	};

	KW_BUCKETS() {
	    return this.getToken(InceptorOracleParser.KW_BUCKETS, 0);
	};

	KW_ROUTED() {
	    return this.getToken(InceptorOracleParser.KW_ROUTED, 0);
	};

	KW_HASH() {
	    return this.getToken(InceptorOracleParser.KW_HASH, 0);
	};

	KW_ROW() {
	    return this.getToken(InceptorOracleParser.KW_ROW, 0);
	};

	KW_ROWS() {
	    return this.getToken(InceptorOracleParser.KW_ROWS, 0);
	};

	KW_FORMAT() {
	    return this.getToken(InceptorOracleParser.KW_FORMAT, 0);
	};

	KW_DELIMITED() {
	    return this.getToken(InceptorOracleParser.KW_DELIMITED, 0);
	};

	KW_FIELDS() {
	    return this.getToken(InceptorOracleParser.KW_FIELDS, 0);
	};

	KW_TERMINATED() {
	    return this.getToken(InceptorOracleParser.KW_TERMINATED, 0);
	};

	KW_ESCAPED() {
	    return this.getToken(InceptorOracleParser.KW_ESCAPED, 0);
	};

	KW_COLLECTION() {
	    return this.getToken(InceptorOracleParser.KW_COLLECTION, 0);
	};

	KW_ITEMS() {
	    return this.getToken(InceptorOracleParser.KW_ITEMS, 0);
	};

	KW_KEYS() {
	    return this.getToken(InceptorOracleParser.KW_KEYS, 0);
	};

	KW_KEY_TYPE() {
	    return this.getToken(InceptorOracleParser.KW_KEY_TYPE, 0);
	};

	KW_LINES() {
	    return this.getToken(InceptorOracleParser.KW_LINES, 0);
	};

	KW_STORED() {
	    return this.getToken(InceptorOracleParser.KW_STORED, 0);
	};

	KW_FILEFORMAT() {
	    return this.getToken(InceptorOracleParser.KW_FILEFORMAT, 0);
	};

	KW_SEQUENCEFILE() {
	    return this.getToken(InceptorOracleParser.KW_SEQUENCEFILE, 0);
	};

	KW_TEXTFILE() {
	    return this.getToken(InceptorOracleParser.KW_TEXTFILE, 0);
	};

	KW_CSVFILE() {
	    return this.getToken(InceptorOracleParser.KW_CSVFILE, 0);
	};

	KW_FWCFILE() {
	    return this.getToken(InceptorOracleParser.KW_FWCFILE, 0);
	};

	KW_RCFILE() {
	    return this.getToken(InceptorOracleParser.KW_RCFILE, 0);
	};

	KW_ORCFILE() {
	    return this.getToken(InceptorOracleParser.KW_ORCFILE, 0);
	};

	KW_ORCTRANSACTIONFILE() {
	    return this.getToken(InceptorOracleParser.KW_ORCTRANSACTIONFILE, 0);
	};

	KW_PARQUET() {
	    return this.getToken(InceptorOracleParser.KW_PARQUET, 0);
	};

	KW_HYPERDRIVE() {
	    return this.getToken(InceptorOracleParser.KW_HYPERDRIVE, 0);
	};

	KW_INPUTFORMAT() {
	    return this.getToken(InceptorOracleParser.KW_INPUTFORMAT, 0);
	};

	KW_OUTPUTFORMAT() {
	    return this.getToken(InceptorOracleParser.KW_OUTPUTFORMAT, 0);
	};

	KW_INPUTDRIVER() {
	    return this.getToken(InceptorOracleParser.KW_INPUTDRIVER, 0);
	};

	KW_OUTPUTDRIVER() {
	    return this.getToken(InceptorOracleParser.KW_OUTPUTDRIVER, 0);
	};

	KW_OFFLINE() {
	    return this.getToken(InceptorOracleParser.KW_OFFLINE, 0);
	};

	KW_ENABLE() {
	    return this.getToken(InceptorOracleParser.KW_ENABLE, 0);
	};

	KW_DISABLE() {
	    return this.getToken(InceptorOracleParser.KW_DISABLE, 0);
	};

	KW_READONLY() {
	    return this.getToken(InceptorOracleParser.KW_READONLY, 0);
	};

	KW_NO_DROP() {
	    return this.getToken(InceptorOracleParser.KW_NO_DROP, 0);
	};

	KW_LOCATION() {
	    return this.getToken(InceptorOracleParser.KW_LOCATION, 0);
	};

	KW_BUCKET() {
	    return this.getToken(InceptorOracleParser.KW_BUCKET, 0);
	};

	KW_OUT() {
	    return this.getToken(InceptorOracleParser.KW_OUT, 0);
	};

	KW_OF() {
	    return this.getToken(InceptorOracleParser.KW_OF, 0);
	};

	KW_PERCENT() {
	    return this.getToken(InceptorOracleParser.KW_PERCENT, 0);
	};

	KW_ADD() {
	    return this.getToken(InceptorOracleParser.KW_ADD, 0);
	};

	KW_REPLACE() {
	    return this.getToken(InceptorOracleParser.KW_REPLACE, 0);
	};

	KW_RLIKE() {
	    return this.getToken(InceptorOracleParser.KW_RLIKE, 0);
	};

	KW_REGEXP() {
	    return this.getToken(InceptorOracleParser.KW_REGEXP, 0);
	};

	KW_TEMPORARY() {
	    return this.getToken(InceptorOracleParser.KW_TEMPORARY, 0);
	};

	KW_EXPLAIN() {
	    return this.getToken(InceptorOracleParser.KW_EXPLAIN, 0);
	};

	KW_FORMATTED() {
	    return this.getToken(InceptorOracleParser.KW_FORMATTED, 0);
	};

	KW_PRETTY() {
	    return this.getToken(InceptorOracleParser.KW_PRETTY, 0);
	};

	KW_DEPENDENCY() {
	    return this.getToken(InceptorOracleParser.KW_DEPENDENCY, 0);
	};

	KW_LOGICAL() {
	    return this.getToken(InceptorOracleParser.KW_LOGICAL, 0);
	};

	KW_COST() {
	    return this.getToken(InceptorOracleParser.KW_COST, 0);
	};

	KW_SERDE() {
	    return this.getToken(InceptorOracleParser.KW_SERDE, 0);
	};

	KW_WITH() {
	    return this.getToken(InceptorOracleParser.KW_WITH, 0);
	};

	KW_DEFERRED() {
	    return this.getToken(InceptorOracleParser.KW_DEFERRED, 0);
	};

	KW_SERDEPROPERTIES() {
	    return this.getToken(InceptorOracleParser.KW_SERDEPROPERTIES, 0);
	};

	KW_DBPROPERTIES() {
	    return this.getToken(InceptorOracleParser.KW_DBPROPERTIES, 0);
	};

	KW_LIMIT() {
	    return this.getToken(InceptorOracleParser.KW_LIMIT, 0);
	};

	KW_UNSET() {
	    return this.getToken(InceptorOracleParser.KW_UNSET, 0);
	};

	KW_TBLPROPERTIES() {
	    return this.getToken(InceptorOracleParser.KW_TBLPROPERTIES, 0);
	};

	KW_IDXPROPERTIES() {
	    return this.getToken(InceptorOracleParser.KW_IDXPROPERTIES, 0);
	};

	KW_VALUE_TYPE() {
	    return this.getToken(InceptorOracleParser.KW_VALUE_TYPE, 0);
	};

	KW_ELEM_TYPE() {
	    return this.getToken(InceptorOracleParser.KW_ELEM_TYPE, 0);
	};

	KW_MAPJOIN() {
	    return this.getToken(InceptorOracleParser.KW_MAPJOIN, 0);
	};

	KW_COMBINE() {
	    return this.getToken(InceptorOracleParser.KW_COMBINE, 0);
	};

	KW_COMBINE_STRUCT_INDEX() {
	    return this.getToken(InceptorOracleParser.KW_COMBINE_STRUCT_INDEX, 0);
	};

	KW_GLKJOIN() {
	    return this.getToken(InceptorOracleParser.KW_GLKJOIN, 0);
	};

	KW_USE_INDEX() {
	    return this.getToken(InceptorOracleParser.KW_USE_INDEX, 0);
	};

	KW_ADHOC() {
	    return this.getToken(InceptorOracleParser.KW_ADHOC, 0);
	};

	KW_STARGATE() {
	    return this.getToken(InceptorOracleParser.KW_STARGATE, 0);
	};

	KW_ESDRIVE() {
	    return this.getToken(InceptorOracleParser.KW_ESDRIVE, 0);
	};

	KW_WINDOWRESET() {
	    return this.getToken(InceptorOracleParser.KW_WINDOWRESET, 0);
	};

	KW_STREAMTABLE() {
	    return this.getToken(InceptorOracleParser.KW_STREAMTABLE, 0);
	};

	KW_STREAM() {
	    return this.getToken(InceptorOracleParser.KW_STREAM, 0);
	};

	KW_STREAMWINDOW() {
	    return this.getToken(InceptorOracleParser.KW_STREAMWINDOW, 0);
	};

	KW_STREAMWINDOWSLIDELENGTH() {
	    return this.getToken(InceptorOracleParser.KW_STREAMWINDOWSLIDELENGTH, 0);
	};

	KW_STREAMWINDOWSEPARATED() {
	    return this.getToken(InceptorOracleParser.KW_STREAMWINDOWSEPARATED, 0);
	};

	KW_INFINITE() {
	    return this.getToken(InceptorOracleParser.KW_INFINITE, 0);
	};

	KW_SESSIONSTART() {
	    return this.getToken(InceptorOracleParser.KW_SESSIONSTART, 0);
	};

	KW_SESSIONSTOP() {
	    return this.getToken(InceptorOracleParser.KW_SESSIONSTOP, 0);
	};

	KW_SESSIONEXPIRE() {
	    return this.getToken(InceptorOracleParser.KW_SESSIONEXPIRE, 0);
	};

	KW_SESSIONEXPIRE_DISCARD() {
	    return this.getToken(InceptorOracleParser.KW_SESSIONEXPIRE_DISCARD, 0);
	};

	KW_SESSIONEXPIRE_COMPLETE() {
	    return this.getToken(InceptorOracleParser.KW_SESSIONEXPIRE_COMPLETE, 0);
	};

	KW_APPLICATION() {
	    return this.getToken(InceptorOracleParser.KW_APPLICATION, 0);
	};

	KW_APPLICATIONS() {
	    return this.getToken(InceptorOracleParser.KW_APPLICATIONS, 0);
	};

	KW_APP() {
	    return this.getToken(InceptorOracleParser.KW_APP, 0);
	};

	KW_APPS() {
	    return this.getToken(InceptorOracleParser.KW_APPS, 0);
	};

	KW_STREAMJOB() {
	    return this.getToken(InceptorOracleParser.KW_STREAMJOB, 0);
	};

	KW_STREAMJOBS() {
	    return this.getToken(InceptorOracleParser.KW_STREAMJOBS, 0);
	};

	KW_RULE() {
	    return this.getToken(InceptorOracleParser.KW_RULE, 0);
	};

	KW_RULES() {
	    return this.getToken(InceptorOracleParser.KW_RULES, 0);
	};

	KW_RULEBASE() {
	    return this.getToken(InceptorOracleParser.KW_RULEBASE, 0);
	};

	KW_RULEBASES() {
	    return this.getToken(InceptorOracleParser.KW_RULEBASES, 0);
	};

	KW_POLICY() {
	    return this.getToken(InceptorOracleParser.KW_POLICY, 0);
	};

	KW_POLICIES() {
	    return this.getToken(InceptorOracleParser.KW_POLICIES, 0);
	};

	KW_POLICYKEY() {
	    return this.getToken(InceptorOracleParser.KW_POLICYKEY, 0);
	};

	KW_POLICY_RULE() {
	    return this.getToken(InceptorOracleParser.KW_POLICY_RULE, 0);
	};

	KW_MEET() {
	    return this.getToken(InceptorOracleParser.KW_MEET, 0);
	};

	KW_LOOKUP() {
	    return this.getToken(InceptorOracleParser.KW_LOOKUP, 0);
	};

	KW_MUST() {
	    return this.getToken(InceptorOracleParser.KW_MUST, 0);
	};

	KW_MUSTNOT() {
	    return this.getToken(InceptorOracleParser.KW_MUSTNOT, 0);
	};

	KW_REMOVE() {
	    return this.getToken(InceptorOracleParser.KW_REMOVE, 0);
	};

	KW_RULE_FUNCTION() {
	    return this.getToken(InceptorOracleParser.KW_RULE_FUNCTION, 0);
	};

	KW_RULE_FUNCTIONS() {
	    return this.getToken(InceptorOracleParser.KW_RULE_FUNCTIONS, 0);
	};

	KW_RULE_FUNCTION_PROPERTIES() {
	    return this.getToken(InceptorOracleParser.KW_RULE_FUNCTION_PROPERTIES, 0);
	};

	KW_STOP() {
	    return this.getToken(InceptorOracleParser.KW_STOP, 0);
	};

	KW_AT() {
	    return this.getToken(InceptorOracleParser.KW_AT, 0);
	};

	KW_LIST() {
	    return this.getToken(InceptorOracleParser.KW_LIST, 0);
	};

	KW_PRECOMPILE() {
	    return this.getToken(InceptorOracleParser.KW_PRECOMPILE, 0);
	};

	KW_HOLD_DDLTIME() {
	    return this.getToken(InceptorOracleParser.KW_HOLD_DDLTIME, 0);
	};

	KW_CLUSTERSTATUS() {
	    return this.getToken(InceptorOracleParser.KW_CLUSTERSTATUS, 0);
	};

	KW_UTC() {
	    return this.getToken(InceptorOracleParser.KW_UTC, 0);
	};

	KW_UTCTIMESTAMP() {
	    return this.getToken(InceptorOracleParser.KW_UTCTIMESTAMP, 0);
	};

	KW_LONG() {
	    return this.getToken(InceptorOracleParser.KW_LONG, 0);
	};

	KW_DELETE() {
	    return this.getToken(InceptorOracleParser.KW_DELETE, 0);
	};

	KW_PLUS() {
	    return this.getToken(InceptorOracleParser.KW_PLUS, 0);
	};

	KW_MINUS() {
	    return this.getToken(InceptorOracleParser.KW_MINUS, 0);
	};

	KW_OP_CONCAT() {
	    return this.getToken(InceptorOracleParser.KW_OP_CONCAT, 0);
	};

	KW_FETCH() {
	    return this.getToken(InceptorOracleParser.KW_FETCH, 0);
	};

	KW_INTERSECT() {
	    return this.getToken(InceptorOracleParser.KW_INTERSECT, 0);
	};

	KW_VIEW() {
	    return this.getToken(InceptorOracleParser.KW_VIEW, 0);
	};

	KW_IN() {
	    return this.getToken(InceptorOracleParser.KW_IN, 0);
	};

	KW_DATABASES() {
	    return this.getToken(InceptorOracleParser.KW_DATABASES, 0);
	};

	KW_MATERIALIZED() {
	    return this.getToken(InceptorOracleParser.KW_MATERIALIZED, 0);
	};

	KW_SCHEMA() {
	    return this.getToken(InceptorOracleParser.KW_SCHEMA, 0);
	};

	KW_SCHEMAS() {
	    return this.getToken(InceptorOracleParser.KW_SCHEMAS, 0);
	};

	KW_GRANT() {
	    return this.getToken(InceptorOracleParser.KW_GRANT, 0);
	};

	KW_REVOKE() {
	    return this.getToken(InceptorOracleParser.KW_REVOKE, 0);
	};

	KW_SSL() {
	    return this.getToken(InceptorOracleParser.KW_SSL, 0);
	};

	KW_UNDO() {
	    return this.getToken(InceptorOracleParser.KW_UNDO, 0);
	};

	KW_LOCK() {
	    return this.getToken(InceptorOracleParser.KW_LOCK, 0);
	};

	KW_LOCKS() {
	    return this.getToken(InceptorOracleParser.KW_LOCKS, 0);
	};

	KW_UNLOCK() {
	    return this.getToken(InceptorOracleParser.KW_UNLOCK, 0);
	};

	KW_SHARED() {
	    return this.getToken(InceptorOracleParser.KW_SHARED, 0);
	};

	KW_EXCLUSIVE() {
	    return this.getToken(InceptorOracleParser.KW_EXCLUSIVE, 0);
	};

	KW_PROCEDURE() {
	    return this.getToken(InceptorOracleParser.KW_PROCEDURE, 0);
	};

	KW_UNSIGNED() {
	    return this.getToken(InceptorOracleParser.KW_UNSIGNED, 0);
	};

	KW_WHILE() {
	    return this.getToken(InceptorOracleParser.KW_WHILE, 0);
	};

	KW_READ() {
	    return this.getToken(InceptorOracleParser.KW_READ, 0);
	};

	KW_READS() {
	    return this.getToken(InceptorOracleParser.KW_READS, 0);
	};

	KW_PURGE() {
	    return this.getToken(InceptorOracleParser.KW_PURGE, 0);
	};

	KW_RANGE() {
	    return this.getToken(InceptorOracleParser.KW_RANGE, 0);
	};

	KW_RELOAD() {
	    return this.getToken(InceptorOracleParser.KW_RELOAD, 0);
	};

	KW_ANALYZE() {
	    return this.getToken(InceptorOracleParser.KW_ANALYZE, 0);
	};

	KW_BEFORE() {
	    return this.getToken(InceptorOracleParser.KW_BEFORE, 0);
	};

	KW_BETWEEN() {
	    return this.getToken(InceptorOracleParser.KW_BETWEEN, 0);
	};

	KW_BOTH() {
	    return this.getToken(InceptorOracleParser.KW_BOTH, 0);
	};

	KW_BINARY() {
	    return this.getToken(InceptorOracleParser.KW_BINARY, 0);
	};

	KW_TRIGGER() {
	    return this.getToken(InceptorOracleParser.KW_TRIGGER, 0);
	};

	KW_RECORDREADER() {
	    return this.getToken(InceptorOracleParser.KW_RECORDREADER, 0);
	};

	KW_RECORDWRITER() {
	    return this.getToken(InceptorOracleParser.KW_RECORDWRITER, 0);
	};

	KW_SEMI() {
	    return this.getToken(InceptorOracleParser.KW_SEMI, 0);
	};

	KW_LATERAL() {
	    return this.getToken(InceptorOracleParser.KW_LATERAL, 0);
	};

	KW_TOUCH() {
	    return this.getToken(InceptorOracleParser.KW_TOUCH, 0);
	};

	KW_ARCHIVE() {
	    return this.getToken(InceptorOracleParser.KW_ARCHIVE, 0);
	};

	KW_UNARCHIVE() {
	    return this.getToken(InceptorOracleParser.KW_UNARCHIVE, 0);
	};

	KW_COMPUTE() {
	    return this.getToken(InceptorOracleParser.KW_COMPUTE, 0);
	};

	KW_STATISTICS() {
	    return this.getToken(InceptorOracleParser.KW_STATISTICS, 0);
	};

	KW_USE() {
	    return this.getToken(InceptorOracleParser.KW_USE, 0);
	};

	KW_OPTION() {
	    return this.getToken(InceptorOracleParser.KW_OPTION, 0);
	};

	KW_CONCATENATE() {
	    return this.getToken(InceptorOracleParser.KW_CONCATENATE, 0);
	};

	KW_SHOW_DATABASE() {
	    return this.getToken(InceptorOracleParser.KW_SHOW_DATABASE, 0);
	};

	KW_UPDATE() {
	    return this.getToken(InceptorOracleParser.KW_UPDATE, 0);
	};

	KW_RESTRICT() {
	    return this.getToken(InceptorOracleParser.KW_RESTRICT, 0);
	};

	KW_CASCADE() {
	    return this.getToken(InceptorOracleParser.KW_CASCADE, 0);
	};

	KW_SKEWED() {
	    return this.getToken(InceptorOracleParser.KW_SKEWED, 0);
	};

	KW_DIRECTORIES() {
	    return this.getToken(InceptorOracleParser.KW_DIRECTORIES, 0);
	};

	KW_GROUPING() {
	    return this.getToken(InceptorOracleParser.KW_GROUPING, 0);
	};

	KW_SETS() {
	    return this.getToken(InceptorOracleParser.KW_SETS, 0);
	};

	KW_TRUNCATE() {
	    return this.getToken(InceptorOracleParser.KW_TRUNCATE, 0);
	};

	KW_NOSCAN() {
	    return this.getToken(InceptorOracleParser.KW_NOSCAN, 0);
	};

	KW_USER() {
	    return this.getToken(InceptorOracleParser.KW_USER, 0);
	};

	KW_QUOTA() {
	    return this.getToken(InceptorOracleParser.KW_QUOTA, 0);
	};

	KW_ROLE() {
	    return this.getToken(InceptorOracleParser.KW_ROLE, 0);
	};

	KW_ROLES() {
	    return this.getToken(InceptorOracleParser.KW_ROLES, 0);
	};

	KW_INNER() {
	    return this.getToken(InceptorOracleParser.KW_INNER, 0);
	};

	KW_ADMIN() {
	    return this.getToken(InceptorOracleParser.KW_ADMIN, 0);
	};

	KW_OWNER() {
	    return this.getToken(InceptorOracleParser.KW_OWNER, 0);
	};

	KW_PRINCIPALS() {
	    return this.getToken(InceptorOracleParser.KW_PRINCIPALS, 0);
	};

	KW_ALL() {
	    return this.getToken(InceptorOracleParser.KW_ALL, 0);
	};

	KW_ANY() {
	    return this.getToken(InceptorOracleParser.KW_ANY, 0);
	};

	KW_YEAR() {
	    return this.getToken(InceptorOracleParser.KW_YEAR, 0);
	};

	KW_MONTH() {
	    return this.getToken(InceptorOracleParser.KW_MONTH, 0);
	};

	KW_DAY() {
	    return this.getToken(InceptorOracleParser.KW_DAY, 0);
	};

	KW_HOUR() {
	    return this.getToken(InceptorOracleParser.KW_HOUR, 0);
	};

	KW_MINUTE() {
	    return this.getToken(InceptorOracleParser.KW_MINUTE, 0);
	};

	KW_SECOND() {
	    return this.getToken(InceptorOracleParser.KW_SECOND, 0);
	};

	KW_DEFAULT() {
	    return this.getToken(InceptorOracleParser.KW_DEFAULT, 0);
	};

	KW_TYPE() {
	    return this.getToken(InceptorOracleParser.KW_TYPE, 0);
	};

	KW_NEXT() {
	    return this.getToken(InceptorOracleParser.KW_NEXT, 0);
	};

	KW_MERGE() {
	    return this.getToken(InceptorOracleParser.KW_MERGE, 0);
	};

	KW_PLANT() {
	    return this.getToken(InceptorOracleParser.KW_PLANT, 0);
	};

	KW_CONSTANT() {
	    return this.getToken(InceptorOracleParser.KW_CONSTANT, 0);
	};

	KW_CONSTRAINT() {
	    return this.getToken(InceptorOracleParser.KW_CONSTRAINT, 0);
	};

	KW_IMMEDIATE() {
	    return this.getToken(InceptorOracleParser.KW_IMMEDIATE, 0);
	};

	KW_TRANSACTION() {
	    return this.getToken(InceptorOracleParser.KW_TRANSACTION, 0);
	};

	KW_WORK() {
	    return this.getToken(InceptorOracleParser.KW_WORK, 0);
	};

	KW_USE_BULKLOAD() {
	    return this.getToken(InceptorOracleParser.KW_USE_BULKLOAD, 0);
	};

	KW_COMPACT() {
	    return this.getToken(InceptorOracleParser.KW_COMPACT, 0);
	};

	KW_CONF() {
	    return this.getToken(InceptorOracleParser.KW_CONF, 0);
	};

	KW_DEFINED() {
	    return this.getToken(InceptorOracleParser.KW_DEFINED, 0);
	};

	KW_INTEGER() {
	    return this.getToken(InceptorOracleParser.KW_INTEGER, 0);
	};

	KW_ONLY() {
	    return this.getToken(InceptorOracleParser.KW_ONLY, 0);
	};

	KW_SERVER() {
	    return this.getToken(InceptorOracleParser.KW_SERVER, 0);
	};

	KW_TRANSACTIONS() {
	    return this.getToken(InceptorOracleParser.KW_TRANSACTIONS, 0);
	};

	KW_URI() {
	    return this.getToken(InceptorOracleParser.KW_URI, 0);
	};

	KW_WRITE() {
	    return this.getToken(InceptorOracleParser.KW_WRITE, 0);
	};

	KW_SPACE() {
	    return this.getToken(InceptorOracleParser.KW_SPACE, 0);
	};

	KW_FACL() {
	    return this.getToken(InceptorOracleParser.KW_FACL, 0);
	};

	KW_NULLS() {
	    return this.getToken(InceptorOracleParser.KW_NULLS, 0);
	};

	KW_PERMISSION() {
	    return this.getToken(InceptorOracleParser.KW_PERMISSION, 0);
	};

	KW_LEVEL() {
	    return this.getToken(InceptorOracleParser.KW_LEVEL, 0);
	};

	KW_PUBLIC() {
	    return this.getToken(InceptorOracleParser.KW_PUBLIC, 0);
	};

	KW_CONNECT() {
	    return this.getToken(InceptorOracleParser.KW_CONNECT, 0);
	};

	KW_LINKS() {
	    return this.getToken(InceptorOracleParser.KW_LINKS, 0);
	};

	KW_SEGMENT() {
	    return this.getToken(InceptorOracleParser.KW_SEGMENT, 0);
	};

	KW_LENGTH() {
	    return this.getToken(InceptorOracleParser.KW_LENGTH, 0);
	};

	KW_ATTACH() {
	    return this.getToken(InceptorOracleParser.KW_ATTACH, 0);
	};

	KW_DETTACH() {
	    return this.getToken(InceptorOracleParser.KW_DETTACH, 0);
	};

	KW_SHARD() {
	    return this.getToken(InceptorOracleParser.KW_SHARD, 0);
	};

	KW_TABLESIZE() {
	    return this.getToken(InceptorOracleParser.KW_TABLESIZE, 0);
	};

	KW_TABLET() {
	    return this.getToken(InceptorOracleParser.KW_TABLET, 0);
	};

	KW_CAPACITY() {
	    return this.getToken(InceptorOracleParser.KW_CAPACITY, 0);
	};

	KW_NUM() {
	    return this.getToken(InceptorOracleParser.KW_NUM, 0);
	};

	KW_NO() {
	    return this.getToken(InceptorOracleParser.KW_NO, 0);
	};

	KW_LOG() {
	    return this.getToken(InceptorOracleParser.KW_LOG, 0);
	};

	KW_PRIOR() {
	    return this.getToken(InceptorOracleParser.KW_PRIOR, 0);
	};

	KW_NOCYCLE() {
	    return this.getToken(InceptorOracleParser.KW_NOCYCLE, 0);
	};

	KW_JAR() {
	    return this.getToken(InceptorOracleParser.KW_JAR, 0);
	};

	KW_FILE() {
	    return this.getToken(InceptorOracleParser.KW_FILE, 0);
	};

	KW_PERMANENT() {
	    return this.getToken(InceptorOracleParser.KW_PERMANENT, 0);
	};

	KW_CACHE() {
	    return this.getToken(InceptorOracleParser.KW_CACHE, 0);
	};

	KW_CACHEDMETRIC() {
	    return this.getToken(InceptorOracleParser.KW_CACHEDMETRIC, 0);
	};

	KW_CACHEDMETRICS() {
	    return this.getToken(InceptorOracleParser.KW_CACHEDMETRICS, 0);
	};

	KW_CYCLE() {
	    return this.getToken(InceptorOracleParser.KW_CYCLE, 0);
	};

	KW_INCREMENT() {
	    return this.getToken(InceptorOracleParser.KW_INCREMENT, 0);
	};

	KW_SEQUENCE() {
	    return this.getToken(InceptorOracleParser.KW_SEQUENCE, 0);
	};

	KW_SEQUENCES() {
	    return this.getToken(InceptorOracleParser.KW_SEQUENCES, 0);
	};

	KW_MINVALUE() {
	    return this.getToken(InceptorOracleParser.KW_MINVALUE, 0);
	};

	KW_NOCACHE() {
	    return this.getToken(InceptorOracleParser.KW_NOCACHE, 0);
	};

	KW_NOMAXVALUE() {
	    return this.getToken(InceptorOracleParser.KW_NOMAXVALUE, 0);
	};

	KW_NOMINVALUE() {
	    return this.getToken(InceptorOracleParser.KW_NOMINVALUE, 0);
	};

	KW_NOORDER() {
	    return this.getToken(InceptorOracleParser.KW_NOORDER, 0);
	};

	KW_CURRVALUE() {
	    return this.getToken(InceptorOracleParser.KW_CURRVALUE, 0);
	};

	KW_NEXTVALUE() {
	    return this.getToken(InceptorOracleParser.KW_NEXTVALUE, 0);
	};

	KW_RELY() {
	    return this.getToken(InceptorOracleParser.KW_RELY, 0);
	};

	KW_NORELY() {
	    return this.getToken(InceptorOracleParser.KW_NORELY, 0);
	};

	KW_VALIDATE() {
	    return this.getToken(InceptorOracleParser.KW_VALIDATE, 0);
	};

	KW_NOVALIDATE() {
	    return this.getToken(InceptorOracleParser.KW_NOVALIDATE, 0);
	};

	KW_KEY() {
	    return this.getToken(InceptorOracleParser.KW_KEY, 0);
	};

	KW_REFERENCES() {
	    return this.getToken(InceptorOracleParser.KW_REFERENCES, 0);
	};

	KW_FOREIGN() {
	    return this.getToken(InceptorOracleParser.KW_FOREIGN, 0);
	};

	KW_PRIMARY() {
	    return this.getToken(InceptorOracleParser.KW_PRIMARY, 0);
	};

	KW_HOLODESK() {
	    return this.getToken(InceptorOracleParser.KW_HOLODESK, 0);
	};

	KW_STELLARDB() {
	    return this.getToken(InceptorOracleParser.KW_STELLARDB, 0);
	};

	KW_ANALYZER() {
	    return this.getToken(InceptorOracleParser.KW_ANALYZER, 0);
	};

	KW_SYNC() {
	    return this.getToken(InceptorOracleParser.KW_SYNC, 0);
	};

	KW_NO_INDEX() {
	    return this.getToken(InceptorOracleParser.KW_NO_INDEX, 0);
	};

	KW_SCHEDULER() {
	    return this.getToken(InceptorOracleParser.KW_SCHEDULER, 0);
	};

	KW_MODE() {
	    return this.getToken(InceptorOracleParser.KW_MODE, 0);
	};

	KW_WAIT() {
	    return this.getToken(InceptorOracleParser.KW_WAIT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterCommonNonReserved(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitCommonNonReserved(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitCommonNonReserved(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class KeyValuePropertyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_keyValueProperty;
        this.key = null; // Token
        this.value = null; // Token
    }

	EQUAL() {
	    return this.getToken(InceptorOracleParser.EQUAL, 0);
	};

	StringLiteral = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.StringLiteral);
	    } else {
	        return this.getToken(InceptorOracleParser.StringLiteral, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterKeyValueProperty(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitKeyValueProperty(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitKeyValueProperty(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class KeyPropertyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_keyProperty;
        this.key = null; // Token
    }

	StringLiteral() {
	    return this.getToken(InceptorOracleParser.StringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterKeyProperty(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitKeyProperty(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitKeyProperty(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_tableName;
        this.db = null; // IdentifierContext
        this.tab = null; // IdentifierContext
        this.at = null; // Token
        this.link = null; // IdentifierContext
    }

	DOT() {
	    return this.getToken(InceptorOracleParser.DOT, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	AT() {
	    return this.getToken(InceptorOracleParser.AT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterTableName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitTableName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitTableName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ValuesNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_valuesName;
        this.tab = null; // IdentifierContext
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterValuesName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitValuesName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitValuesName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ViewNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_viewName;
    }

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterViewName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitViewName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitViewName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableAliasContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_tableAlias;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterTableAlias(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitTableAlias(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitTableAlias(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SequenceNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_sequenceName;
        this.db = null; // IdentifierContext
        this.seq = null; // IdentifierContext
    }

	DOT() {
	    return this.getToken(InceptorOracleParser.DOT, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterSequenceName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitSequenceName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitSequenceName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PartitionSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_partitionSpec;
    }

	KW_PARTITION() {
	    return this.getToken(InceptorOracleParser.KW_PARTITION, 0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	partitionVal = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PartitionValContext);
	    } else {
	        return this.getTypedRuleContext(PartitionValContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	identifierList() {
	    return this.getTypedRuleContext(IdentifierListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterPartitionSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitPartitionSpec(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitPartitionSpec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PartitionValContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_partitionVal;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	EQUAL() {
	    return this.getToken(InceptorOracleParser.EQUAL, 0);
	};

	constant() {
	    return this.getTypedRuleContext(ConstantContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterPartitionVal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitPartitionVal(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitPartitionVal(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StoredAsDirsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_storedAsDirs;
    }

	KW_STORED() {
	    return this.getToken(InceptorOracleParser.KW_STORED, 0);
	};

	KW_AS() {
	    return this.getToken(InceptorOracleParser.KW_AS, 0);
	};

	KW_DIRECTORIES() {
	    return this.getToken(InceptorOracleParser.KW_DIRECTORIES, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterStoredAsDirs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitStoredAsDirs(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitStoredAsDirs(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OrReplaceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_orReplace;
    }

	KW_OR() {
	    return this.getToken(InceptorOracleParser.KW_OR, 0);
	};

	KW_REPLACE() {
	    return this.getToken(InceptorOracleParser.KW_REPLACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterOrReplace(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitOrReplace(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitOrReplace(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColumnListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_columnList;
    }

	columnNameTypeList() {
	    return this.getTypedRuleContext(ColumnNameTypeListContext,0);
	};

	columnNameList() {
	    return this.getTypedRuleContext(ColumnNameListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterColumnList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitColumnList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitColumnList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColumnNameTypeListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_columnNameTypeList;
    }

	columnNameType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnNameTypeContext);
	    } else {
	        return this.getTypedRuleContext(ColumnNameTypeContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterColumnNameTypeList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitColumnNameTypeList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitColumnNameTypeList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColumnNameColonTypeListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_columnNameColonTypeList;
    }

	columnNameColonType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnNameColonTypeContext);
	    } else {
	        return this.getTypedRuleContext(ColumnNameColonTypeContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterColumnNameColonTypeList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitColumnNameColonTypeList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitColumnNameColonTypeList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColumnNameOrderListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_columnNameOrderList;
    }

	columnNameOrder = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnNameOrderContext);
	    } else {
	        return this.getTypedRuleContext(ColumnNameOrderContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterColumnNameOrderList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitColumnNameOrderList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitColumnNameOrderList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColumnNameOrderContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_columnNameOrder;
        this.asc = null; // Token
        this.desc = null; // Token
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	KW_ASC() {
	    return this.getToken(InceptorOracleParser.KW_ASC, 0);
	};

	KW_DESC() {
	    return this.getToken(InceptorOracleParser.KW_DESC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterColumnNameOrder(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitColumnNameOrder(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitColumnNameOrder(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColumnNameCommentListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_columnNameCommentList;
    }

	columnNameComment = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnNameCommentContext);
	    } else {
	        return this.getTypedRuleContext(ColumnNameCommentContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterColumnNameCommentList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitColumnNameCommentList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitColumnNameCommentList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColumnNameCommentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_columnNameComment;
        this.colName = null; // IdentifierContext
        this.comment = null; // ColumnCommentContext
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	columnComment() {
	    return this.getTypedRuleContext(ColumnCommentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterColumnNameComment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitColumnNameComment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitColumnNameComment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NullsOrderContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_nullsOrder;
    }

	KW_NULLS() {
	    return this.getToken(InceptorOracleParser.KW_NULLS, 0);
	};

	KW_FIRST() {
	    return this.getToken(InceptorOracleParser.KW_FIRST, 0);
	};

	KW_LAST() {
	    return this.getToken(InceptorOracleParser.KW_LAST, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterNullsOrder(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitNullsOrder(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitNullsOrder(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColumnRefOrderContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_columnRefOrder;
        this.asc = null; // Token
        this.desc = null; // Token
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	nullsOrder() {
	    return this.getTypedRuleContext(NullsOrderContext,0);
	};

	KW_ASC() {
	    return this.getToken(InceptorOracleParser.KW_ASC, 0);
	};

	KW_DESC() {
	    return this.getToken(InceptorOracleParser.KW_DESC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterColumnRefOrder(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitColumnRefOrder(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitColumnRefOrder(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColumnNameTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_columnNameType;
        this.colName = null; // IdentifierContext
    }

	colType() {
	    return this.getTypedRuleContext(ColTypeContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	columnAnalyzer() {
	    return this.getTypedRuleContext(ColumnAnalyzerContext,0);
	};

	defaultVauleOrColumnConstraint() {
	    return this.getTypedRuleContext(DefaultVauleOrColumnConstraintContext,0);
	};

	columnComment() {
	    return this.getTypedRuleContext(ColumnCommentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterColumnNameType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitColumnNameType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitColumnNameType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColumnAnalyzerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_columnAnalyzer;
        this.p = null; // Token
        this.analyzer = null; // Token
    }

	KW_WITH() {
	    return this.getToken(InceptorOracleParser.KW_WITH, 0);
	};

	KW_ANALYZER() {
	    return this.getToken(InceptorOracleParser.KW_ANALYZER, 0);
	};

	StringLiteral = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.StringLiteral);
	    } else {
	        return this.getToken(InceptorOracleParser.StringLiteral, i);
	    }
	};


	KW_APPEND() {
	    return this.getToken(InceptorOracleParser.KW_APPEND, 0);
	};

	KW_NO_INDEX() {
	    return this.getToken(InceptorOracleParser.KW_NO_INDEX, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterColumnAnalyzer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitColumnAnalyzer(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitColumnAnalyzer(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DefaultValueNodeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_defaultValueNode;
        this.defaultVal = null; // ConstantOrNullContext
    }

	KW_DEFAULT() {
	    return this.getToken(InceptorOracleParser.KW_DEFAULT, 0);
	};

	constantOrNull() {
	    return this.getTypedRuleContext(ConstantOrNullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDefaultValueNode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDefaultValueNode(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDefaultValueNode(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConstantOrNullContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_constantOrNull;
    }

	defaultConstantValue() {
	    return this.getTypedRuleContext(DefaultConstantValueContext,0);
	};

	KW_NULL() {
	    return this.getToken(InceptorOracleParser.KW_NULL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterConstantOrNull(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitConstantOrNull(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitConstantOrNull(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColumnCommentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_columnComment;
        this.comment = null; // Token
    }

	KW_COMMENT() {
	    return this.getToken(InceptorOracleParser.KW_COMMENT, 0);
	};

	StringLiteral() {
	    return this.getToken(InceptorOracleParser.StringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterColumnComment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitColumnComment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitColumnComment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColumnNameListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_columnNameList;
    }

	columnName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnNameContext);
	    } else {
	        return this.getTypedRuleContext(ColumnNameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterColumnNameList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitColumnNameList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitColumnNameList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColumnNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_columnName;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterColumnName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitColumnName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitColumnName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColumnOrtableDotColumnNameListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_columnOrtableDotColumnNameList;
    }

	columnOrtableDotColumnName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnOrtableDotColumnNameContext);
	    } else {
	        return this.getTypedRuleContext(ColumnOrtableDotColumnNameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterColumnOrtableDotColumnNameList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitColumnOrtableDotColumnNameList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitColumnOrtableDotColumnNameList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColumnOrtableDotColumnNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_columnOrtableDotColumnName;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	DOT() {
	    return this.getToken(InceptorOracleParser.DOT, 0);
	};

	columnName() {
	    return this.getTypedRuleContext(ColumnNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterColumnOrtableDotColumnName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitColumnOrtableDotColumnName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitColumnOrtableDotColumnName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColumnOrtableDotColumnWithDBNameListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_columnOrtableDotColumnWithDBNameList;
    }

	columnOrtableDotColumnWithDBName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnOrtableDotColumnWithDBNameContext);
	    } else {
	        return this.getTypedRuleContext(ColumnOrtableDotColumnWithDBNameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterColumnOrtableDotColumnWithDBNameList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitColumnOrtableDotColumnWithDBNameList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitColumnOrtableDotColumnWithDBNameList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColumnOrtableDotColumnWithDBNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_columnOrtableDotColumnWithDBName;
        this.db = null; // IdentifierContext
        this.tab = null; // IdentifierContext
        this.secondDot = null; // Token
        this.column = null; // IdentifierContext
    }

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.DOT);
	    } else {
	        return this.getToken(InceptorOracleParser.DOT, i);
	    }
	};


	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	columnName() {
	    return this.getTypedRuleContext(ColumnNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterColumnOrtableDotColumnWithDBName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitColumnOrtableDotColumnWithDBName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitColumnOrtableDotColumnWithDBName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableOrPartitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_tableOrPartition;
    }

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	partitionSpec() {
	    return this.getTypedRuleContext(PartitionSpecContext,0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	columnNameList() {
	    return this.getTypedRuleContext(ColumnNameListContext,0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterTableOrPartition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitTableOrPartition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitTableOrPartition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableOrColumnAliasOfValuesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_tableOrColumnAliasOfValues;
    }

	valuesName() {
	    return this.getTypedRuleContext(ValuesNameContext,0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	columnNameList() {
	    return this.getTypedRuleContext(ColumnNameListContext,0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterTableOrColumnAliasOfValues(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitTableOrColumnAliasOfValues(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitTableOrColumnAliasOfValues(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PartitionTableFunctionSourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_partitionTableFunctionSource;
    }

	subQuerySource() {
	    return this.getTypedRuleContext(SubQuerySourceContext,0);
	};

	tableSource() {
	    return this.getTypedRuleContext(TableSourceContext,0);
	};

	partitionedTableFunction() {
	    return this.getTypedRuleContext(PartitionedTableFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterPartitionTableFunctionSource(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitPartitionTableFunctionSource(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitPartitionTableFunctionSource(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PartitionedTableFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_partitionedTableFunction;
        this.name = null; // Token
        this.ptfsrc = null; // PartitionTableFunctionSourceContext
    }

	LPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.LPAREN);
	    } else {
	        return this.getToken(InceptorOracleParser.LPAREN, i);
	    }
	};


	KW_ON() {
	    return this.getToken(InceptorOracleParser.KW_ON, 0);
	};

	RPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.RPAREN);
	    } else {
	        return this.getToken(InceptorOracleParser.RPAREN, i);
	    }
	};


	Identifier = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.Identifier);
	    } else {
	        return this.getToken(InceptorOracleParser.Identifier, i);
	    }
	};


	partitionTableFunctionSource() {
	    return this.getTypedRuleContext(PartitionTableFunctionSourceContext,0);
	};

	partitioningSpec() {
	    return this.getTypedRuleContext(PartitioningSpecContext,0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	alias() {
	    return this.getTypedRuleContext(AliasContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterPartitionedTableFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitPartitionedTableFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitPartitionedTableFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableAllColumnsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_tableAllColumns;
    }

	STAR() {
	    return this.getToken(InceptorOracleParser.STAR, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	DOT() {
	    return this.getToken(InceptorOracleParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterTableAllColumns(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitTableAllColumns(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitTableAllColumns(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableOrColumnContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_tableOrColumn;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterTableOrColumn(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitTableOrColumn(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitTableOrColumn(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AliasListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_aliasList;
    }

	identifierList() {
	    return this.getTypedRuleContext(IdentifierListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterAliasList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitAliasList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitAliasList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CapIdentifierListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_capIdentifierList;
    }

	Identifier = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.Identifier);
	    } else {
	        return this.getToken(InceptorOracleParser.Identifier, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterCapIdentifierList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitCapIdentifierList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitCapIdentifierList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IdentifierListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_identifierList;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterIdentifierList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitIdentifierList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitIdentifierList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_alterStatement;
    }

	KW_ALTER() {
	    return this.getToken(InceptorOracleParser.KW_ALTER, 0);
	};

	KW_TABLE() {
	    return this.getToken(InceptorOracleParser.KW_TABLE, 0);
	};

	alterTableStatementSuffix() {
	    return this.getTypedRuleContext(AlterTableStatementSuffixContext,0);
	};

	KW_STREAM() {
	    return this.getToken(InceptorOracleParser.KW_STREAM, 0);
	};

	KW_VIEW() {
	    return this.getToken(InceptorOracleParser.KW_VIEW, 0);
	};

	alterViewStatementSuffix() {
	    return this.getTypedRuleContext(AlterViewStatementSuffixContext,0);
	};

	KW_MATERIALIZED() {
	    return this.getToken(InceptorOracleParser.KW_MATERIALIZED, 0);
	};

	KW_INDEX() {
	    return this.getToken(InceptorOracleParser.KW_INDEX, 0);
	};

	alterIndexStatementSuffix() {
	    return this.getTypedRuleContext(AlterIndexStatementSuffixContext,0);
	};

	KW_DATABASE() {
	    return this.getToken(InceptorOracleParser.KW_DATABASE, 0);
	};

	alterDatabaseStatementSuffix() {
	    return this.getTypedRuleContext(AlterDatabaseStatementSuffixContext,0);
	};

	alterApplicationStatementSuffix() {
	    return this.getTypedRuleContext(AlterApplicationStatementSuffixContext,0);
	};

	KW_STREAMJOB() {
	    return this.getToken(InceptorOracleParser.KW_STREAMJOB, 0);
	};

	alterJobStatementSuffix() {
	    return this.getTypedRuleContext(AlterJobStatementSuffixContext,0);
	};

	KW_POLICY() {
	    return this.getToken(InceptorOracleParser.KW_POLICY, 0);
	};

	alterPolicyStatementSuffix() {
	    return this.getTypedRuleContext(AlterPolicyStatementSuffixContext,0);
	};

	KW_RULE() {
	    return this.getToken(InceptorOracleParser.KW_RULE, 0);
	};

	KW_GROUP() {
	    return this.getToken(InceptorOracleParser.KW_GROUP, 0);
	};

	alterPolicyRuleGroupSuffix() {
	    return this.getTypedRuleContext(AlterPolicyRuleGroupSuffixContext,0);
	};

	alterRuleStatementSuffix() {
	    return this.getTypedRuleContext(AlterRuleStatementSuffixContext,0);
	};

	KW_SEQUENCE() {
	    return this.getToken(InceptorOracleParser.KW_SEQUENCE, 0);
	};

	alterSequenceStatementSuffix() {
	    return this.getTypedRuleContext(AlterSequenceStatementSuffixContext,0);
	};

	KW_BLACKLIST() {
	    return this.getToken(InceptorOracleParser.KW_BLACKLIST, 0);
	};

	alterBlacklistStatementSuffix() {
	    return this.getTypedRuleContext(AlterBlacklistStatementSuffixContext,0);
	};

	KW_RULE_FUNCTION() {
	    return this.getToken(InceptorOracleParser.KW_RULE_FUNCTION, 0);
	};

	alterRuleFunctionStatementSuffix() {
	    return this.getTypedRuleContext(AlterRuleFunctionStatementSuffixContext,0);
	};

	KW_APPLICATION() {
	    return this.getToken(InceptorOracleParser.KW_APPLICATION, 0);
	};

	KW_APP() {
	    return this.getToken(InceptorOracleParser.KW_APP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterAlterStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitAlterStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitAlterStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterSequenceStatementSuffixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_alterSequenceStatementSuffix;
        this.name = null; // SequenceNameContext
    }

	sequenceName() {
	    return this.getTypedRuleContext(SequenceNameContext,0);
	};

	sequenceOptionWithoutStart = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SequenceOptionWithoutStartContext);
	    } else {
	        return this.getTypedRuleContext(SequenceOptionWithoutStartContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterAlterSequenceStatementSuffix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitAlterSequenceStatementSuffix(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitAlterSequenceStatementSuffix(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterTableStatementSuffixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_alterTableStatementSuffix;
    }

	alterStatementSuffixRename() {
	    return this.getTypedRuleContext(AlterStatementSuffixRenameContext,0);
	};

	alterStatementSuffixAddCol() {
	    return this.getTypedRuleContext(AlterStatementSuffixAddColContext,0);
	};

	alterStatementSuffixRenameCol() {
	    return this.getTypedRuleContext(AlterStatementSuffixRenameColContext,0);
	};

	alterStatementSuffixDropPartitions() {
	    return this.getTypedRuleContext(AlterStatementSuffixDropPartitionsContext,0);
	};

	alterStatementSuffixAddPartitions() {
	    return this.getTypedRuleContext(AlterStatementSuffixAddPartitionsContext,0);
	};

	alterStatementSuffixTouch() {
	    return this.getTypedRuleContext(AlterStatementSuffixTouchContext,0);
	};

	alterStatementSuffixArchive() {
	    return this.getTypedRuleContext(AlterStatementSuffixArchiveContext,0);
	};

	alterStatementSuffixUnArchive() {
	    return this.getTypedRuleContext(AlterStatementSuffixUnArchiveContext,0);
	};

	alterStatementSuffixProperties() {
	    return this.getTypedRuleContext(AlterStatementSuffixPropertiesContext,0);
	};

	alterTblPartitionStatement() {
	    return this.getTypedRuleContext(AlterTblPartitionStatementContext,0);
	};

	alterStatementSuffixSkewedby() {
	    return this.getTypedRuleContext(AlterStatementSuffixSkewedbyContext,0);
	};

	alterStatementSuffixExchangePartition() {
	    return this.getTypedRuleContext(AlterStatementSuffixExchangePartitionContext,0);
	};

	alterStatementPartitionKeyType() {
	    return this.getTypedRuleContext(AlterStatementPartitionKeyTypeContext,0);
	};

	alterStatementErrorLogSetting() {
	    return this.getTypedRuleContext(AlterStatementErrorLogSettingContext,0);
	};

	alterStatementSuffixDropConstraint() {
	    return this.getTypedRuleContext(AlterStatementSuffixDropConstraintContext,0);
	};

	alterStatementSuffixAddConstraint() {
	    return this.getTypedRuleContext(AlterStatementSuffixAddConstraintContext,0);
	};

	alterStatementIntervalValue() {
	    return this.getTypedRuleContext(AlterStatementIntervalValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterAlterTableStatementSuffix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitAlterTableStatementSuffix(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitAlterTableStatementSuffix(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterStatementPartitionKeyTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_alterStatementPartitionKeyType;
    }

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	KW_PARTITION() {
	    return this.getToken(InceptorOracleParser.KW_PARTITION, 0);
	};

	KW_COLUMN() {
	    return this.getToken(InceptorOracleParser.KW_COLUMN, 0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	columnNameType() {
	    return this.getTypedRuleContext(ColumnNameTypeContext,0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterAlterStatementPartitionKeyType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitAlterStatementPartitionKeyType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitAlterStatementPartitionKeyType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterViewStatementSuffixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, materialized) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_alterViewStatementSuffix;
        this.materialized = null
        this.name = null; // TableNameContext
        this.materialized = materialized || null;
    }

	alterViewSuffixProperties() {
	    return this.getTypedRuleContext(AlterViewSuffixPropertiesContext,0);
	};

	alterStatementSuffixRename() {
	    return this.getTypedRuleContext(AlterStatementSuffixRenameContext,0);
	};

	alterStatementSuffixRenameCol() {
	    return this.getTypedRuleContext(AlterStatementSuffixRenameColContext,0);
	};

	alterStatementSuffixAddPartitions() {
	    return this.getTypedRuleContext(AlterStatementSuffixAddPartitionsContext,0);
	};

	alterStatementSuffixDropPartitions() {
	    return this.getTypedRuleContext(AlterStatementSuffixDropPartitionsContext,0);
	};

	KW_AS() {
	    return this.getToken(InceptorOracleParser.KW_AS, 0);
	};

	selectStatement() {
	    return this.getTypedRuleContext(SelectStatementContext,0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	KW_ENABLE() {
	    return this.getToken(InceptorOracleParser.KW_ENABLE, 0);
	};

	KW_REWRITE() {
	    return this.getToken(InceptorOracleParser.KW_REWRITE, 0);
	};

	KW_DISABLE() {
	    return this.getToken(InceptorOracleParser.KW_DISABLE, 0);
	};

	KW_REBUILD() {
	    return this.getToken(InceptorOracleParser.KW_REBUILD, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterAlterViewStatementSuffix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitAlterViewStatementSuffix(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitAlterViewStatementSuffix(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterIndexStatementSuffixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_alterIndexStatementSuffix;
        this.indexName = null; // IdentifierContext
        this.tableNameId = null; // IdentifierContext
        this.key = null; // IdentifierContext
        this.value = null; // Token
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	KW_ON() {
	    return this.getToken(InceptorOracleParser.KW_ON, 0);
	};

	KW_REBUILD() {
	    return this.getToken(InceptorOracleParser.KW_REBUILD, 0);
	};

	KW_SET() {
	    return this.getToken(InceptorOracleParser.KW_SET, 0);
	};

	EQUAL() {
	    return this.getToken(InceptorOracleParser.EQUAL, 0);
	};

	KW_UPDATE() {
	    return this.getToken(InceptorOracleParser.KW_UPDATE, 0);
	};

	KW_ATTACH() {
	    return this.getToken(InceptorOracleParser.KW_ATTACH, 0);
	};

	columnNameList() {
	    return this.getTypedRuleContext(ColumnNameListContext,0);
	};

	KW_DETTACH() {
	    return this.getToken(InceptorOracleParser.KW_DETTACH, 0);
	};

	partitionSpec() {
	    return this.getTypedRuleContext(PartitionSpecContext,0);
	};

	StringLiteral() {
	    return this.getToken(InceptorOracleParser.StringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterAlterIndexStatementSuffix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitAlterIndexStatementSuffix(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitAlterIndexStatementSuffix(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterApplicationStatementSuffixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_alterApplicationStatementSuffix;
    }

	alterApplicationSuffixProperties() {
	    return this.getTypedRuleContext(AlterApplicationSuffixPropertiesContext,0);
	};

	alterApplicationSuffixSetOwner() {
	    return this.getTypedRuleContext(AlterApplicationSuffixSetOwnerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterAlterApplicationStatementSuffix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitAlterApplicationStatementSuffix(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitAlterApplicationStatementSuffix(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterJobStatementSuffixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_alterJobStatementSuffix;
    }

	alterJobSuffixProperties() {
	    return this.getTypedRuleContext(AlterJobSuffixPropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterAlterJobStatementSuffix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitAlterJobStatementSuffix(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitAlterJobStatementSuffix(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterJobSuffixPropertiesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_alterJobSuffixProperties;
        this.name = null; // IdentifierContext
    }

	KW_SET() {
	    return this.getToken(InceptorOracleParser.KW_SET, 0);
	};

	KW_JOBPROPERTIES() {
	    return this.getToken(InceptorOracleParser.KW_JOBPROPERTIES, 0);
	};

	dbProperties() {
	    return this.getTypedRuleContext(DbPropertiesContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterAlterJobSuffixProperties(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitAlterJobSuffixProperties(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitAlterJobSuffixProperties(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterApplicationSuffixPropertiesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_alterApplicationSuffixProperties;
        this.name = null; // IdentifierContext
    }

	KW_SET() {
	    return this.getToken(InceptorOracleParser.KW_SET, 0);
	};

	KW_APPPROPERTIES() {
	    return this.getToken(InceptorOracleParser.KW_APPPROPERTIES, 0);
	};

	dbProperties() {
	    return this.getTypedRuleContext(DbPropertiesContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterAlterApplicationSuffixProperties(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitAlterApplicationSuffixProperties(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitAlterApplicationSuffixProperties(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterApplicationSuffixSetOwnerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_alterApplicationSuffixSetOwner;
        this.name = null; // IdentifierContext
    }

	KW_SET() {
	    return this.getToken(InceptorOracleParser.KW_SET, 0);
	};

	KW_OWNER() {
	    return this.getToken(InceptorOracleParser.KW_OWNER, 0);
	};

	principalName() {
	    return this.getTypedRuleContext(PrincipalNameContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterAlterApplicationSuffixSetOwner(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitAlterApplicationSuffixSetOwner(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitAlterApplicationSuffixSetOwner(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterPolicyStatementSuffixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_alterPolicyStatementSuffix;
    }

	alterPolicySuffixProperties() {
	    return this.getTypedRuleContext(AlterPolicySuffixPropertiesContext,0);
	};

	alterPolicySuffixRootGroupType() {
	    return this.getTypedRuleContext(AlterPolicySuffixRootGroupTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterAlterPolicyStatementSuffix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitAlterPolicyStatementSuffix(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitAlterPolicyStatementSuffix(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterPolicySuffixPropertiesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_alterPolicySuffixProperties;
        this.name = null; // IdentifierContext
    }

	KW_SET() {
	    return this.getToken(InceptorOracleParser.KW_SET, 0);
	};

	KW_POLICYPROPERTIES() {
	    return this.getToken(InceptorOracleParser.KW_POLICYPROPERTIES, 0);
	};

	dbProperties() {
	    return this.getTypedRuleContext(DbPropertiesContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterAlterPolicySuffixProperties(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitAlterPolicySuffixProperties(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitAlterPolicySuffixProperties(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterPolicySuffixRootGroupTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_alterPolicySuffixRootGroupType;
        this.name = null; // IdentifierContext
    }

	KW_WITH() {
	    return this.getToken(InceptorOracleParser.KW_WITH, 0);
	};

	KW_RULES() {
	    return this.getToken(InceptorOracleParser.KW_RULES, 0);
	};

	KW_MEET() {
	    return this.getToken(InceptorOracleParser.KW_MEET, 0);
	};

	ruleGroupType() {
	    return this.getTypedRuleContext(RuleGroupTypeContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterAlterPolicySuffixRootGroupType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitAlterPolicySuffixRootGroupType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitAlterPolicySuffixRootGroupType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterPolicyRuleGroupSuffixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_alterPolicyRuleGroupSuffix;
        this.name = null; // IdentifierContext
    }

	KW_WITH() {
	    return this.getToken(InceptorOracleParser.KW_WITH, 0);
	};

	KW_RULES() {
	    return this.getToken(InceptorOracleParser.KW_RULES, 0);
	};

	KW_MEET() {
	    return this.getToken(InceptorOracleParser.KW_MEET, 0);
	};

	ruleGroupType() {
	    return this.getTypedRuleContext(RuleGroupTypeContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterAlterPolicyRuleGroupSuffix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitAlterPolicyRuleGroupSuffix(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitAlterPolicyRuleGroupSuffix(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterRuleStatementSuffixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_alterRuleStatementSuffix;
    }

	alterRuleSuffixProperties() {
	    return this.getTypedRuleContext(AlterRuleSuffixPropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterAlterRuleStatementSuffix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitAlterRuleStatementSuffix(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitAlterRuleStatementSuffix(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterRuleSuffixPropertiesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_alterRuleSuffixProperties;
        this.name = null; // IdentifierContext
    }

	KW_SET() {
	    return this.getToken(InceptorOracleParser.KW_SET, 0);
	};

	KW_RULEPROPERTIES() {
	    return this.getToken(InceptorOracleParser.KW_RULEPROPERTIES, 0);
	};

	dbProperties() {
	    return this.getTypedRuleContext(DbPropertiesContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterAlterRuleSuffixProperties(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitAlterRuleSuffixProperties(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitAlterRuleSuffixProperties(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterRuleFunctionStatementSuffixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_alterRuleFunctionStatementSuffix;
    }

	alterRuleFunctionSuffixProperties() {
	    return this.getTypedRuleContext(AlterRuleFunctionSuffixPropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterAlterRuleFunctionStatementSuffix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitAlterRuleFunctionStatementSuffix(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitAlterRuleFunctionStatementSuffix(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterRuleFunctionSuffixPropertiesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_alterRuleFunctionSuffixProperties;
        this.name = null; // IdentifierContext
    }

	KW_SET() {
	    return this.getToken(InceptorOracleParser.KW_SET, 0);
	};

	KW_RULE_FUNCTION_PROPERTIES() {
	    return this.getToken(InceptorOracleParser.KW_RULE_FUNCTION_PROPERTIES, 0);
	};

	dbProperties() {
	    return this.getTypedRuleContext(DbPropertiesContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterAlterRuleFunctionSuffixProperties(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitAlterRuleFunctionSuffixProperties(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitAlterRuleFunctionSuffixProperties(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterDatabaseStatementSuffixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_alterDatabaseStatementSuffix;
    }

	alterDatabaseSuffixProperties() {
	    return this.getTypedRuleContext(AlterDatabaseSuffixPropertiesContext,0);
	};

	alterDatabaseSuffixSetOwner() {
	    return this.getTypedRuleContext(AlterDatabaseSuffixSetOwnerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterAlterDatabaseStatementSuffix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitAlterDatabaseStatementSuffix(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitAlterDatabaseStatementSuffix(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterDatabaseSuffixPropertiesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_alterDatabaseSuffixProperties;
        this.name = null; // IdentifierContext
    }

	KW_SET() {
	    return this.getToken(InceptorOracleParser.KW_SET, 0);
	};

	KW_DBPROPERTIES() {
	    return this.getToken(InceptorOracleParser.KW_DBPROPERTIES, 0);
	};

	dbProperties() {
	    return this.getTypedRuleContext(DbPropertiesContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterAlterDatabaseSuffixProperties(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitAlterDatabaseSuffixProperties(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitAlterDatabaseSuffixProperties(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterDatabaseSuffixSetOwnerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_alterDatabaseSuffixSetOwner;
        this.dbName = null; // IdentifierContext
    }

	KW_SET() {
	    return this.getToken(InceptorOracleParser.KW_SET, 0);
	};

	KW_OWNER() {
	    return this.getToken(InceptorOracleParser.KW_OWNER, 0);
	};

	principalName() {
	    return this.getTypedRuleContext(PrincipalNameContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterAlterDatabaseSuffixSetOwner(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitAlterDatabaseSuffixSetOwner(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitAlterDatabaseSuffixSetOwner(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterStatementSuffixRenameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_alterStatementSuffixRename;
        this.oldName = null; // TableNameContext
        this.newName = null; // TableNameContext
    }

	KW_RENAME() {
	    return this.getToken(InceptorOracleParser.KW_RENAME, 0);
	};

	KW_TO() {
	    return this.getToken(InceptorOracleParser.KW_TO, 0);
	};

	tableName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TableNameContext);
	    } else {
	        return this.getTypedRuleContext(TableNameContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterAlterStatementSuffixRename(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitAlterStatementSuffixRename(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitAlterStatementSuffixRename(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterStatementErrorLogSettingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_alterStatementErrorLogSetting;
    }

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	KW_SET() {
	    return this.getToken(InceptorOracleParser.KW_SET, 0);
	};

	KW_ERRORS() {
	    return this.getToken(InceptorOracleParser.KW_ERRORS, 0);
	};

	KW_LOG() {
	    return this.getToken(InceptorOracleParser.KW_LOG, 0);
	};

	onOffOpt() {
	    return this.getTypedRuleContext(OnOffOptContext,0);
	};

	errorIntoTableOpt() {
	    return this.getTypedRuleContext(ErrorIntoTableOptContext,0);
	};

	errorOverwriteOpt() {
	    return this.getTypedRuleContext(ErrorOverwriteOptContext,0);
	};

	errorRejectOpt() {
	    return this.getTypedRuleContext(ErrorRejectOptContext,0);
	};

	errorLimitOpt() {
	    return this.getTypedRuleContext(ErrorLimitOptContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterAlterStatementErrorLogSetting(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitAlterStatementErrorLogSetting(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitAlterStatementErrorLogSetting(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OnOffOptContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_onOffOpt;
    }

	KW_ON() {
	    return this.getToken(InceptorOracleParser.KW_ON, 0);
	};

	KW_OFF() {
	    return this.getToken(InceptorOracleParser.KW_OFF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterOnOffOpt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitOnOffOpt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitOnOffOpt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ErrorIntoTableOptContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_errorIntoTableOpt;
    }

	KW_INTO() {
	    return this.getToken(InceptorOracleParser.KW_INTO, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterErrorIntoTableOpt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitErrorIntoTableOpt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitErrorIntoTableOpt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ErrorOverwriteOptContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_errorOverwriteOpt;
    }

	KW_OVERWRITE() {
	    return this.getToken(InceptorOracleParser.KW_OVERWRITE, 0);
	};

	onOffOpt() {
	    return this.getTypedRuleContext(OnOffOptContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterErrorOverwriteOpt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitErrorOverwriteOpt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitErrorOverwriteOpt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ErrorRejectOptContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_errorRejectOpt;
    }

	KW_REJECT() {
	    return this.getToken(InceptorOracleParser.KW_REJECT, 0);
	};

	onOffOpt() {
	    return this.getTypedRuleContext(OnOffOptContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterErrorRejectOpt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitErrorRejectOpt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitErrorRejectOpt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ErrorLimitOptContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_errorLimitOpt;
        this.ways = null; // Token
    }

	KW_LIMIT() {
	    return this.getToken(InceptorOracleParser.KW_LIMIT, 0);
	};

	Number() {
	    return this.getToken(InceptorOracleParser.Number, 0);
	};

	KW_ROWS() {
	    return this.getToken(InceptorOracleParser.KW_ROWS, 0);
	};

	KW_PERCENT() {
	    return this.getToken(InceptorOracleParser.KW_PERCENT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterErrorLimitOpt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitErrorLimitOpt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitErrorLimitOpt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterStatementSuffixAddColContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_alterStatementSuffixAddCol;
        this.add = null; // Token
        this.replace = null; // Token
    }

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	KW_COLUMNS() {
	    return this.getToken(InceptorOracleParser.KW_COLUMNS, 0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	columnNameTypeList() {
	    return this.getTypedRuleContext(ColumnNameTypeListContext,0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	KW_ADD() {
	    return this.getToken(InceptorOracleParser.KW_ADD, 0);
	};

	KW_REPLACE() {
	    return this.getToken(InceptorOracleParser.KW_REPLACE, 0);
	};

	restrictOrCascade() {
	    return this.getTypedRuleContext(RestrictOrCascadeContext,0);
	};

	KW_DELETE() {
	    return this.getToken(InceptorOracleParser.KW_DELETE, 0);
	};

	identifierList() {
	    return this.getTypedRuleContext(IdentifierListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterAlterStatementSuffixAddCol(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitAlterStatementSuffixAddCol(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitAlterStatementSuffixAddCol(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterStatementSuffixRenameColContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_alterStatementSuffixRenameCol;
        this.oldName = null; // IdentifierContext
        this.newName = null; // IdentifierContext
        this.comment = null; // Token
    }

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	KW_CHANGE() {
	    return this.getToken(InceptorOracleParser.KW_CHANGE, 0);
	};

	colType() {
	    return this.getTypedRuleContext(ColTypeContext,0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	KW_COLUMN() {
	    return this.getToken(InceptorOracleParser.KW_COLUMN, 0);
	};

	defaultVauleOrColumnConstraint() {
	    return this.getTypedRuleContext(DefaultVauleOrColumnConstraintContext,0);
	};

	KW_COMMENT() {
	    return this.getToken(InceptorOracleParser.KW_COMMENT, 0);
	};

	alterStatementChangeColPosition() {
	    return this.getTypedRuleContext(AlterStatementChangeColPositionContext,0);
	};

	restrictOrCascade() {
	    return this.getTypedRuleContext(RestrictOrCascadeContext,0);
	};

	StringLiteral() {
	    return this.getToken(InceptorOracleParser.StringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterAlterStatementSuffixRenameCol(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitAlterStatementSuffixRenameCol(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitAlterStatementSuffixRenameCol(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BlockingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_blocking;
    }

	KW_AND() {
	    return this.getToken(InceptorOracleParser.KW_AND, 0);
	};

	KW_WAIT() {
	    return this.getToken(InceptorOracleParser.KW_WAIT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterBlocking(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitBlocking(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitBlocking(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterStatementSuffixCompactContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_alterStatementSuffixCompact;
        this.compactType = null; // Token
        this.reason = null; // Token
    }

	KW_COMPACT() {
	    return this.getToken(InceptorOracleParser.KW_COMPACT, 0);
	};

	StringLiteral() {
	    return this.getToken(InceptorOracleParser.StringLiteral, 0);
	};

	blocking() {
	    return this.getTypedRuleContext(BlockingContext,0);
	};

	KW_ENABLE() {
	    return this.getToken(InceptorOracleParser.KW_ENABLE, 0);
	};

	KW_DISABLE() {
	    return this.getToken(InceptorOracleParser.KW_DISABLE, 0);
	};

	KW_FOR() {
	    return this.getToken(InceptorOracleParser.KW_FOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterAlterStatementSuffixCompact(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitAlterStatementSuffixCompact(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitAlterStatementSuffixCompact(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterStatementSuffixUpdateStatsColContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_alterStatementSuffixUpdateStatsCol;
        this.colName = null; // IdentifierContext
        this.comment = null; // Token
    }

	KW_UPDATE() {
	    return this.getToken(InceptorOracleParser.KW_UPDATE, 0);
	};

	KW_STATISTICS() {
	    return this.getToken(InceptorOracleParser.KW_STATISTICS, 0);
	};

	KW_FOR() {
	    return this.getToken(InceptorOracleParser.KW_FOR, 0);
	};

	KW_SET() {
	    return this.getToken(InceptorOracleParser.KW_SET, 0);
	};

	tableProperties() {
	    return this.getTypedRuleContext(TablePropertiesContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	KW_COLUMN() {
	    return this.getToken(InceptorOracleParser.KW_COLUMN, 0);
	};

	KW_COMMENT() {
	    return this.getToken(InceptorOracleParser.KW_COMMENT, 0);
	};

	StringLiteral() {
	    return this.getToken(InceptorOracleParser.StringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterAlterStatementSuffixUpdateStatsCol(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitAlterStatementSuffixUpdateStatsCol(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitAlterStatementSuffixUpdateStatsCol(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterStatementChangeColPositionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_alterStatementChangeColPosition;
        this.first = null; // Token
        this.afterCol = null; // IdentifierContext
    }

	KW_FIRST() {
	    return this.getToken(InceptorOracleParser.KW_FIRST, 0);
	};

	KW_AFTER() {
	    return this.getToken(InceptorOracleParser.KW_AFTER, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterAlterStatementChangeColPosition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitAlterStatementChangeColPosition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitAlterStatementChangeColPosition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterStatementSuffixAddPartitionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_alterStatementSuffixAddPartitions;
    }

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	KW_ADD() {
	    return this.getToken(InceptorOracleParser.KW_ADD, 0);
	};

	ifNotExists() {
	    return this.getTypedRuleContext(IfNotExistsContext,0);
	};

	alterStatementSuffixAddPartitionsElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AlterStatementSuffixAddPartitionsElementContext);
	    } else {
	        return this.getTypedRuleContext(AlterStatementSuffixAddPartitionsElementContext,i);
	    }
	};

	alterStatementSuffixAddRangePartitionsElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AlterStatementSuffixAddRangePartitionsElementContext);
	    } else {
	        return this.getTypedRuleContext(AlterStatementSuffixAddRangePartitionsElementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterAlterStatementSuffixAddPartitions(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitAlterStatementSuffixAddPartitions(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitAlterStatementSuffixAddPartitions(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterStatementSuffixAddPartitionsElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_alterStatementSuffixAddPartitionsElement;
    }

	partitionSpec() {
	    return this.getTypedRuleContext(PartitionSpecContext,0);
	};

	partitionLocation() {
	    return this.getTypedRuleContext(PartitionLocationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterAlterStatementSuffixAddPartitionsElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitAlterStatementSuffixAddPartitionsElement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitAlterStatementSuffixAddPartitionsElement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterStatementSuffixAddRangePartitionsElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_alterStatementSuffixAddRangePartitionsElement;
    }

	rangePartition() {
	    return this.getTypedRuleContext(RangePartitionContext,0);
	};

	partitionLocation() {
	    return this.getTypedRuleContext(PartitionLocationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterAlterStatementSuffixAddRangePartitionsElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitAlterStatementSuffixAddRangePartitionsElement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitAlterStatementSuffixAddRangePartitionsElement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterStatementSuffixTouchContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_alterStatementSuffixTouch;
    }

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	KW_TOUCH() {
	    return this.getToken(InceptorOracleParser.KW_TOUCH, 0);
	};

	partitionSpec = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PartitionSpecContext);
	    } else {
	        return this.getTypedRuleContext(PartitionSpecContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterAlterStatementSuffixTouch(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitAlterStatementSuffixTouch(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitAlterStatementSuffixTouch(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterStatementSuffixArchiveContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_alterStatementSuffixArchive;
    }

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	KW_ARCHIVE() {
	    return this.getToken(InceptorOracleParser.KW_ARCHIVE, 0);
	};

	partitionSpec = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PartitionSpecContext);
	    } else {
	        return this.getTypedRuleContext(PartitionSpecContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterAlterStatementSuffixArchive(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitAlterStatementSuffixArchive(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitAlterStatementSuffixArchive(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterStatementSuffixUnArchiveContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_alterStatementSuffixUnArchive;
    }

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	KW_UNARCHIVE() {
	    return this.getToken(InceptorOracleParser.KW_UNARCHIVE, 0);
	};

	partitionSpec = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PartitionSpecContext);
	    } else {
	        return this.getTypedRuleContext(PartitionSpecContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterAlterStatementSuffixUnArchive(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitAlterStatementSuffixUnArchive(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitAlterStatementSuffixUnArchive(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PartitionLocationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_partitionLocation;
        this.locn = null; // Token
    }

	KW_LOCATION() {
	    return this.getToken(InceptorOracleParser.KW_LOCATION, 0);
	};

	StringLiteral() {
	    return this.getToken(InceptorOracleParser.StringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterPartitionLocation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitPartitionLocation(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitPartitionLocation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterStatementSuffixDropPartitionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_alterStatementSuffixDropPartitions;
    }

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	KW_DROP() {
	    return this.getToken(InceptorOracleParser.KW_DROP, 0);
	};

	dropPartitionSpec = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DropPartitionSpecContext);
	    } else {
	        return this.getTypedRuleContext(DropPartitionSpecContext,i);
	    }
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	ignoreProtection() {
	    return this.getTypedRuleContext(IgnoreProtectionContext,0);
	};

	KW_PURGE() {
	    return this.getToken(InceptorOracleParser.KW_PURGE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterAlterStatementSuffixDropPartitions(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitAlterStatementSuffixDropPartitions(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitAlterStatementSuffixDropPartitions(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterStatementSuffixPropertiesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_alterStatementSuffixProperties;
    }

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	KW_SET() {
	    return this.getToken(InceptorOracleParser.KW_SET, 0);
	};

	KW_TBLPROPERTIES() {
	    return this.getToken(InceptorOracleParser.KW_TBLPROPERTIES, 0);
	};

	tableProperties() {
	    return this.getTypedRuleContext(TablePropertiesContext,0);
	};

	KW_UNSET() {
	    return this.getToken(InceptorOracleParser.KW_UNSET, 0);
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterAlterStatementSuffixProperties(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitAlterStatementSuffixProperties(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitAlterStatementSuffixProperties(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterViewSuffixPropertiesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, materialized) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_alterViewSuffixProperties;
        this.materialized = null
        this.materialized = materialized || null;
    }

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	KW_SET() {
	    return this.getToken(InceptorOracleParser.KW_SET, 0);
	};

	KW_TBLPROPERTIES() {
	    return this.getToken(InceptorOracleParser.KW_TBLPROPERTIES, 0);
	};

	tableProperties() {
	    return this.getTypedRuleContext(TablePropertiesContext,0);
	};

	KW_UNSET() {
	    return this.getToken(InceptorOracleParser.KW_UNSET, 0);
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterAlterViewSuffixProperties(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitAlterViewSuffixProperties(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitAlterViewSuffixProperties(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterStatementSuffixSerdePropertiesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_alterStatementSuffixSerdeProperties;
        this.serdeName = null; // Token
    }

	KW_SET() {
	    return this.getToken(InceptorOracleParser.KW_SET, 0);
	};

	KW_SERDE() {
	    return this.getToken(InceptorOracleParser.KW_SERDE, 0);
	};

	StringLiteral() {
	    return this.getToken(InceptorOracleParser.StringLiteral, 0);
	};

	KW_WITH() {
	    return this.getToken(InceptorOracleParser.KW_WITH, 0);
	};

	KW_SERDEPROPERTIES() {
	    return this.getToken(InceptorOracleParser.KW_SERDEPROPERTIES, 0);
	};

	tableProperties() {
	    return this.getTypedRuleContext(TablePropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterAlterStatementSuffixSerdeProperties(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitAlterStatementSuffixSerdeProperties(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitAlterStatementSuffixSerdeProperties(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterTblPartitionStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_alterTblPartitionStatement;
    }

	tablePartitionPrefix() {
	    return this.getTypedRuleContext(TablePartitionPrefixContext,0);
	};

	alterTblPartitionStatementSuffix() {
	    return this.getTypedRuleContext(AlterTblPartitionStatementSuffixContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterAlterTblPartitionStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitAlterTblPartitionStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitAlterTblPartitionStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterTblPartitionStatementSuffixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_alterTblPartitionStatementSuffix;
    }

	alterStatementSuffixFileFormat() {
	    return this.getTypedRuleContext(AlterStatementSuffixFileFormatContext,0);
	};

	alterStatementSuffixLocation() {
	    return this.getTypedRuleContext(AlterStatementSuffixLocationContext,0);
	};

	alterStatementSuffixProtectMode() {
	    return this.getTypedRuleContext(AlterStatementSuffixProtectModeContext,0);
	};

	alterStatementSuffixMergeFiles() {
	    return this.getTypedRuleContext(AlterStatementSuffixMergeFilesContext,0);
	};

	alterStatementSuffixSerdeProperties() {
	    return this.getTypedRuleContext(AlterStatementSuffixSerdePropertiesContext,0);
	};

	alterStatementSuffixRenamePart() {
	    return this.getTypedRuleContext(AlterStatementSuffixRenamePartContext,0);
	};

	alterStatementSuffixBucketNum() {
	    return this.getTypedRuleContext(AlterStatementSuffixBucketNumContext,0);
	};

	alterTblPartitionStatementSuffixSkewedLocation() {
	    return this.getTypedRuleContext(AlterTblPartitionStatementSuffixSkewedLocationContext,0);
	};

	alterStatementSuffixClusterbySortby() {
	    return this.getTypedRuleContext(AlterStatementSuffixClusterbySortbyContext,0);
	};

	alterStatementSuffixCompact() {
	    return this.getTypedRuleContext(AlterStatementSuffixCompactContext,0);
	};

	alterStatementSuffixUpdateStatsCol() {
	    return this.getTypedRuleContext(AlterStatementSuffixUpdateStatsColContext,0);
	};

	alterStatementSuffixRenameCol() {
	    return this.getTypedRuleContext(AlterStatementSuffixRenameColContext,0);
	};

	alterStatementSuffixAddCol() {
	    return this.getTypedRuleContext(AlterStatementSuffixAddColContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterAlterTblPartitionStatementSuffix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitAlterTblPartitionStatementSuffix(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitAlterTblPartitionStatementSuffix(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterStatementSuffixFileFormatContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_alterStatementSuffixFileFormat;
    }

	KW_SET() {
	    return this.getToken(InceptorOracleParser.KW_SET, 0);
	};

	KW_FILEFORMAT() {
	    return this.getToken(InceptorOracleParser.KW_FILEFORMAT, 0);
	};

	fileFormat() {
	    return this.getTypedRuleContext(FileFormatContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterAlterStatementSuffixFileFormat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitAlterStatementSuffixFileFormat(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitAlterStatementSuffixFileFormat(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterStatementSuffixClusterbySortbyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_alterStatementSuffixClusterbySortby;
    }

	KW_NOT() {
	    return this.getToken(InceptorOracleParser.KW_NOT, 0);
	};

	KW_CLUSTERED() {
	    return this.getToken(InceptorOracleParser.KW_CLUSTERED, 0);
	};

	KW_SORTED() {
	    return this.getToken(InceptorOracleParser.KW_SORTED, 0);
	};

	tableBuckets() {
	    return this.getTypedRuleContext(TableBucketsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterAlterStatementSuffixClusterbySortby(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitAlterStatementSuffixClusterbySortby(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitAlterStatementSuffixClusterbySortby(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterTblPartitionStatementSuffixSkewedLocationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_alterTblPartitionStatementSuffixSkewedLocation;
    }

	KW_SET() {
	    return this.getToken(InceptorOracleParser.KW_SET, 0);
	};

	KW_SKEWED() {
	    return this.getToken(InceptorOracleParser.KW_SKEWED, 0);
	};

	KW_LOCATION() {
	    return this.getToken(InceptorOracleParser.KW_LOCATION, 0);
	};

	skewedLocations() {
	    return this.getTypedRuleContext(SkewedLocationsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterAlterTblPartitionStatementSuffixSkewedLocation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitAlterTblPartitionStatementSuffixSkewedLocation(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitAlterTblPartitionStatementSuffixSkewedLocation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SkewedLocationsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_skewedLocations;
    }

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	skewedLocationsList() {
	    return this.getTypedRuleContext(SkewedLocationsListContext,0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterSkewedLocations(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitSkewedLocations(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitSkewedLocations(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SkewedLocationsListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_skewedLocationsList;
    }

	skewedLocationMap = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SkewedLocationMapContext);
	    } else {
	        return this.getTypedRuleContext(SkewedLocationMapContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterSkewedLocationsList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitSkewedLocationsList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitSkewedLocationsList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SkewedLocationMapContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_skewedLocationMap;
        this.key = null; // SkewedValueLocationElementContext
        this.value = null; // Token
    }

	EQUAL() {
	    return this.getToken(InceptorOracleParser.EQUAL, 0);
	};

	skewedValueLocationElement() {
	    return this.getTypedRuleContext(SkewedValueLocationElementContext,0);
	};

	StringLiteral() {
	    return this.getToken(InceptorOracleParser.StringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterSkewedLocationMap(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitSkewedLocationMap(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitSkewedLocationMap(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterStatementSuffixLocationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_alterStatementSuffixLocation;
        this.newLoc = null; // Token
    }

	KW_SET() {
	    return this.getToken(InceptorOracleParser.KW_SET, 0);
	};

	KW_LOCATION() {
	    return this.getToken(InceptorOracleParser.KW_LOCATION, 0);
	};

	StringLiteral() {
	    return this.getToken(InceptorOracleParser.StringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterAlterStatementSuffixLocation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitAlterStatementSuffixLocation(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitAlterStatementSuffixLocation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterStatementSuffixSkewedbyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_alterStatementSuffixSkewedby;
    }

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	tableSkewed() {
	    return this.getTypedRuleContext(TableSkewedContext,0);
	};

	KW_NOT() {
	    return this.getToken(InceptorOracleParser.KW_NOT, 0);
	};

	KW_SKEWED() {
	    return this.getToken(InceptorOracleParser.KW_SKEWED, 0);
	};

	storedAsDirs() {
	    return this.getTypedRuleContext(StoredAsDirsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterAlterStatementSuffixSkewedby(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitAlterStatementSuffixSkewedby(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitAlterStatementSuffixSkewedby(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterStatementSuffixExchangePartitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_alterStatementSuffixExchangePartition;
        this.name = null; // TableNameContext
        this.exchangename = null; // TableNameContext
    }

	KW_EXCHANGE() {
	    return this.getToken(InceptorOracleParser.KW_EXCHANGE, 0);
	};

	partitionSpec() {
	    return this.getTypedRuleContext(PartitionSpecContext,0);
	};

	KW_WITH() {
	    return this.getToken(InceptorOracleParser.KW_WITH, 0);
	};

	KW_TABLE() {
	    return this.getToken(InceptorOracleParser.KW_TABLE, 0);
	};

	tableName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TableNameContext);
	    } else {
	        return this.getTypedRuleContext(TableNameContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterAlterStatementSuffixExchangePartition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitAlterStatementSuffixExchangePartition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitAlterStatementSuffixExchangePartition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterStatementSuffixProtectModeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_alterStatementSuffixProtectMode;
    }

	alterProtectMode() {
	    return this.getTypedRuleContext(AlterProtectModeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterAlterStatementSuffixProtectMode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitAlterStatementSuffixProtectMode(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitAlterStatementSuffixProtectMode(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterStatementSuffixRenamePartContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_alterStatementSuffixRenamePart;
    }

	KW_RENAME() {
	    return this.getToken(InceptorOracleParser.KW_RENAME, 0);
	};

	KW_TO() {
	    return this.getToken(InceptorOracleParser.KW_TO, 0);
	};

	partitionSpec() {
	    return this.getTypedRuleContext(PartitionSpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterAlterStatementSuffixRenamePart(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitAlterStatementSuffixRenamePart(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitAlterStatementSuffixRenamePart(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterStatementSuffixMergeFilesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_alterStatementSuffixMergeFiles;
    }

	KW_CONCATENATE() {
	    return this.getToken(InceptorOracleParser.KW_CONCATENATE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterAlterStatementSuffixMergeFiles(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitAlterStatementSuffixMergeFiles(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitAlterStatementSuffixMergeFiles(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterProtectModeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_alterProtectMode;
    }

	KW_ENABLE() {
	    return this.getToken(InceptorOracleParser.KW_ENABLE, 0);
	};

	alterProtectModeMode() {
	    return this.getTypedRuleContext(AlterProtectModeModeContext,0);
	};

	KW_DISABLE() {
	    return this.getToken(InceptorOracleParser.KW_DISABLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterAlterProtectMode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitAlterProtectMode(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitAlterProtectMode(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterProtectModeModeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_alterProtectModeMode;
    }

	KW_OFFLINE() {
	    return this.getToken(InceptorOracleParser.KW_OFFLINE, 0);
	};

	KW_NO_DROP() {
	    return this.getToken(InceptorOracleParser.KW_NO_DROP, 0);
	};

	KW_CASCADE() {
	    return this.getToken(InceptorOracleParser.KW_CASCADE, 0);
	};

	KW_READONLY() {
	    return this.getToken(InceptorOracleParser.KW_READONLY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterAlterProtectModeMode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitAlterProtectModeMode(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitAlterProtectModeMode(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterStatementSuffixBucketNumContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_alterStatementSuffixBucketNum;
        this.num = null; // Token
    }

	KW_INTO() {
	    return this.getToken(InceptorOracleParser.KW_INTO, 0);
	};

	KW_BUCKETS() {
	    return this.getToken(InceptorOracleParser.KW_BUCKETS, 0);
	};

	Number() {
	    return this.getToken(InceptorOracleParser.Number, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterAlterStatementSuffixBucketNum(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitAlterStatementSuffixBucketNum(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitAlterStatementSuffixBucketNum(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FileFormatContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_fileFormat;
        this.inFmt = null; // Token
        this.outFmt = null; // Token
        this.inDriver = null; // Token
        this.outDriver = null; // Token
        this.genericSpec = null; // IdentifierContext
    }

	KW_SEQUENCEFILE() {
	    return this.getToken(InceptorOracleParser.KW_SEQUENCEFILE, 0);
	};

	KW_TEXTFILE() {
	    return this.getToken(InceptorOracleParser.KW_TEXTFILE, 0);
	};

	KW_RCFILE() {
	    return this.getToken(InceptorOracleParser.KW_RCFILE, 0);
	};

	KW_ORCFILE() {
	    return this.getToken(InceptorOracleParser.KW_ORCFILE, 0);
	};

	KW_ORCTRANSACTIONFILE() {
	    return this.getToken(InceptorOracleParser.KW_ORCTRANSACTIONFILE, 0);
	};

	KW_PARQUET() {
	    return this.getToken(InceptorOracleParser.KW_PARQUET, 0);
	};

	KW_HYPERDRIVE() {
	    return this.getToken(InceptorOracleParser.KW_HYPERDRIVE, 0);
	};

	KW_INPUTFORMAT() {
	    return this.getToken(InceptorOracleParser.KW_INPUTFORMAT, 0);
	};

	KW_OUTPUTFORMAT() {
	    return this.getToken(InceptorOracleParser.KW_OUTPUTFORMAT, 0);
	};

	StringLiteral = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.StringLiteral);
	    } else {
	        return this.getToken(InceptorOracleParser.StringLiteral, i);
	    }
	};


	KW_INPUTDRIVER() {
	    return this.getToken(InceptorOracleParser.KW_INPUTDRIVER, 0);
	};

	KW_OUTPUTDRIVER() {
	    return this.getToken(InceptorOracleParser.KW_OUTPUTDRIVER, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterFileFormat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitFileFormat(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitFileFormat(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IgnoreProtectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_ignoreProtection;
    }

	KW_IGNORE() {
	    return this.getToken(InceptorOracleParser.KW_IGNORE, 0);
	};

	KW_PROTECTION() {
	    return this.getToken(InceptorOracleParser.KW_PROTECTION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterIgnoreProtection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitIgnoreProtection(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitIgnoreProtection(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropPartitionSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_dropPartitionSpec;
    }

	KW_PARTITION() {
	    return this.getToken(InceptorOracleParser.KW_PARTITION, 0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	dropPartitionVal = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DropPartitionValContext);
	    } else {
	        return this.getTypedRuleContext(DropPartitionValContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	identifierList() {
	    return this.getTypedRuleContext(IdentifierListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDropPartitionSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDropPartitionSpec(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDropPartitionSpec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropPartitionValContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_dropPartitionVal;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	dropPartitionOperator() {
	    return this.getTypedRuleContext(DropPartitionOperatorContext,0);
	};

	constant() {
	    return this.getTypedRuleContext(ConstantContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDropPartitionVal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDropPartitionVal(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDropPartitionVal(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropPartitionOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_dropPartitionOperator;
    }

	EQUAL() {
	    return this.getToken(InceptorOracleParser.EQUAL, 0);
	};

	NOTEQUAL() {
	    return this.getToken(InceptorOracleParser.NOTEQUAL, 0);
	};

	LESSTHANOREQUALTO() {
	    return this.getToken(InceptorOracleParser.LESSTHANOREQUALTO, 0);
	};

	LESSTHAN() {
	    return this.getToken(InceptorOracleParser.LESSTHAN, 0);
	};

	GREATERTHANOREQUALTO() {
	    return this.getToken(InceptorOracleParser.GREATERTHANOREQUALTO, 0);
	};

	GREATERTHAN() {
	    return this.getToken(InceptorOracleParser.GREATERTHAN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDropPartitionOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDropPartitionOperator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDropPartitionOperator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterBlacklistStatementSuffixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_alterBlacklistStatementSuffix;
    }

	KW_ADD() {
	    return this.getToken(InceptorOracleParser.KW_ADD, 0);
	};

	KW_USER() {
	    return this.getToken(InceptorOracleParser.KW_USER, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	KW_DELETE() {
	    return this.getToken(InceptorOracleParser.KW_DELETE, 0);
	};

	KW_ALL() {
	    return this.getToken(InceptorOracleParser.KW_ALL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterAlterBlacklistStatementSuffix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitAlterBlacklistStatementSuffix(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitAlterBlacklistStatementSuffix(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterStatementSuffixDropConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_alterStatementSuffixDropConstraint;
        this.cName = null; // IdentifierContext
    }

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	KW_DROP() {
	    return this.getToken(InceptorOracleParser.KW_DROP, 0);
	};

	KW_CONSTRAINT() {
	    return this.getToken(InceptorOracleParser.KW_CONSTRAINT, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterAlterStatementSuffixDropConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitAlterStatementSuffixDropConstraint(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitAlterStatementSuffixDropConstraint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterStatementSuffixAddConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_alterStatementSuffixAddConstraint;
        this.fk = null; // AlterForeignKeyWithNameContext
    }

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	KW_ADD() {
	    return this.getToken(InceptorOracleParser.KW_ADD, 0);
	};

	alterConstraintWithName() {
	    return this.getTypedRuleContext(AlterConstraintWithNameContext,0);
	};

	alterForeignKeyWithName() {
	    return this.getTypedRuleContext(AlterForeignKeyWithNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterAlterStatementSuffixAddConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitAlterStatementSuffixAddConstraint(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitAlterStatementSuffixAddConstraint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterConstraintWithNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_alterConstraintWithName;
        this.constraintName = null; // IdentifierContext
        this.pkCols = null; // ParenColumnNameListContext
    }

	KW_CONSTRAINT() {
	    return this.getToken(InceptorOracleParser.KW_CONSTRAINT, 0);
	};

	tableConstraintType() {
	    return this.getTypedRuleContext(TableConstraintTypeContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	parenColumnNameList() {
	    return this.getTypedRuleContext(ParenColumnNameListContext,0);
	};

	constraintOpts() {
	    return this.getTypedRuleContext(ConstraintOptsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterAlterConstraintWithName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitAlterConstraintWithName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitAlterConstraintWithName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterForeignKeyWithNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_alterForeignKeyWithName;
        this.constraintName = null; // IdentifierContext
        this.fkCols = null; // ParenColumnNameListContext
        this.tabName = null; // TableNameContext
        this.parCols = null; // ParenColumnNameListContext
    }

	KW_CONSTRAINT() {
	    return this.getToken(InceptorOracleParser.KW_CONSTRAINT, 0);
	};

	KW_FOREIGN() {
	    return this.getToken(InceptorOracleParser.KW_FOREIGN, 0);
	};

	KW_KEY() {
	    return this.getToken(InceptorOracleParser.KW_KEY, 0);
	};

	KW_REFERENCES() {
	    return this.getToken(InceptorOracleParser.KW_REFERENCES, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	parenColumnNameList = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ParenColumnNameListContext);
	    } else {
	        return this.getTypedRuleContext(ParenColumnNameListContext,i);
	    }
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	constraintOpts() {
	    return this.getTypedRuleContext(ConstraintOptsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterAlterForeignKeyWithName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitAlterForeignKeyWithName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitAlterForeignKeyWithName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterStatementIntervalValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_alterStatementIntervalValue;
        this.intervalConst = null; // ConstantContext
        this.intervalFunction = null; // NormfunctionContext
    }

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	KW_SET() {
	    return this.getToken(InceptorOracleParser.KW_SET, 0);
	};

	KW_INTERVAL() {
	    return this.getToken(InceptorOracleParser.KW_INTERVAL, 0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	constant() {
	    return this.getTypedRuleContext(ConstantContext,0);
	};

	normfunction() {
	    return this.getTypedRuleContext(NormfunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterAlterStatementIntervalValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitAlterStatementIntervalValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitAlterStatementIntervalValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AtomExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_atomExpression;
    }

	KW_NULL() {
	    return this.getToken(InceptorOracleParser.KW_NULL, 0);
	};

	constant() {
	    return this.getTypedRuleContext(ConstantContext,0);
	};

	widcardExpression() {
	    return this.getTypedRuleContext(WidcardExpressionContext,0);
	};

	existExpression() {
	    return this.getTypedRuleContext(ExistExpressionContext,0);
	};

	castExpression() {
	    return this.getTypedRuleContext(CastExpressionContext,0);
	};

	caseExpression() {
	    return this.getTypedRuleContext(CaseExpressionContext,0);
	};

	whenExpression() {
	    return this.getTypedRuleContext(WhenExpressionContext,0);
	};

	extractExpression() {
	    return this.getTypedRuleContext(ExtractExpressionContext,0);
	};

	substringExpression() {
	    return this.getTypedRuleContext(SubstringExpressionContext,0);
	};

	tableOrColumn() {
	    return this.getTypedRuleContext(TableOrColumnContext,0);
	};

	expressionsInParenthesis() {
	    return this.getTypedRuleContext(ExpressionsInParenthesisContext,0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	selectStatement() {
	    return this.getTypedRuleContext(SelectStatementContext,0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterAtomExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitAtomExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitAtomExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SqlCallStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_sqlCallStatement;
    }

	KW_CALL() {
	    return this.getToken(InceptorOracleParser.KW_CALL, 0);
	};

	leftValue() {
	    return this.getTypedRuleContext(LeftValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterSqlCallStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitSqlCallStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitSqlCallStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConstantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_constant;
    }

	timeTypeLiteral() {
	    return this.getTypedRuleContext(TimeTypeLiteralContext,0);
	};

	Number() {
	    return this.getToken(InceptorOracleParser.Number, 0);
	};

	StringLiteral() {
	    return this.getToken(InceptorOracleParser.StringLiteral, 0);
	};

	BigintLiteral() {
	    return this.getToken(InceptorOracleParser.BigintLiteral, 0);
	};

	SmallintLiteral() {
	    return this.getToken(InceptorOracleParser.SmallintLiteral, 0);
	};

	TinyintLiteral() {
	    return this.getToken(InceptorOracleParser.TinyintLiteral, 0);
	};

	DecimalLiteral() {
	    return this.getToken(InceptorOracleParser.DecimalLiteral, 0);
	};

	CharSetLiteral() {
	    return this.getToken(InceptorOracleParser.CharSetLiteral, 0);
	};

	charSetStringLiteral() {
	    return this.getTypedRuleContext(CharSetStringLiteralContext,0);
	};

	booleanValue() {
	    return this.getTypedRuleContext(BooleanValueContext,0);
	};

	KW_MAXVALUE() {
	    return this.getToken(InceptorOracleParser.KW_MAXVALUE, 0);
	};

	KW_UNLIMITED() {
	    return this.getToken(InceptorOracleParser.KW_UNLIMITED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterConstant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitConstant(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitConstant(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DefaultConstantValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_defaultConstantValue;
    }

	timeTypeLiteral() {
	    return this.getTypedRuleContext(TimeTypeLiteralContext,0);
	};

	MINUS() {
	    return this.getToken(InceptorOracleParser.MINUS, 0);
	};

	nonNegativeDigitValue() {
	    return this.getTypedRuleContext(NonNegativeDigitValueContext,0);
	};

	StringLiteral() {
	    return this.getToken(InceptorOracleParser.StringLiteral, 0);
	};

	CharSetLiteral() {
	    return this.getToken(InceptorOracleParser.CharSetLiteral, 0);
	};

	charSetStringLiteral() {
	    return this.getTypedRuleContext(CharSetStringLiteralContext,0);
	};

	booleanValue() {
	    return this.getTypedRuleContext(BooleanValueContext,0);
	};

	KW_MAXVALUE() {
	    return this.getToken(InceptorOracleParser.KW_MAXVALUE, 0);
	};

	KW_UNLIMITED() {
	    return this.getToken(InceptorOracleParser.KW_UNLIMITED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDefaultConstantValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDefaultConstantValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDefaultConstantValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NonNegativeDigitValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_nonNegativeDigitValue;
    }

	Number() {
	    return this.getToken(InceptorOracleParser.Number, 0);
	};

	BigintLiteral() {
	    return this.getToken(InceptorOracleParser.BigintLiteral, 0);
	};

	SmallintLiteral() {
	    return this.getToken(InceptorOracleParser.SmallintLiteral, 0);
	};

	TinyintLiteral() {
	    return this.getToken(InceptorOracleParser.TinyintLiteral, 0);
	};

	DecimalLiteral() {
	    return this.getToken(InceptorOracleParser.DecimalLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterNonNegativeDigitValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitNonNegativeDigitValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitNonNegativeDigitValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StringLiteralSequenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_stringLiteralSequence;
    }

	StringLiteral = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.StringLiteral);
	    } else {
	        return this.getToken(InceptorOracleParser.StringLiteral, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterStringLiteralSequence(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitStringLiteralSequence(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitStringLiteralSequence(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CharSetStringLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_charSetStringLiteral;
        this.csName = null; // Token
        this.csLiteral = null; // Token
    }

	CharSetName() {
	    return this.getToken(InceptorOracleParser.CharSetName, 0);
	};

	CharSetLiteral() {
	    return this.getToken(InceptorOracleParser.CharSetLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterCharSetStringLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitCharSetStringLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitCharSetStringLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BooleanValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_booleanValue;
    }

	KW_TRUE() {
	    return this.getToken(InceptorOracleParser.KW_TRUE, 0);
	};

	KW_FALSE() {
	    return this.getToken(InceptorOracleParser.KW_FALSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterBooleanValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitBooleanValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitBooleanValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColumnNameTypeOrConstraintListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_columnNameTypeOrConstraintList;
    }

	columnNameTypeOrConstraint = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnNameTypeOrConstraintContext);
	    } else {
	        return this.getTypedRuleContext(ColumnNameTypeOrConstraintContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterColumnNameTypeOrConstraintList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitColumnNameTypeOrConstraintList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitColumnNameTypeOrConstraintList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColumnNameTypeOrConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_columnNameTypeOrConstraint;
    }

	tableConstraint() {
	    return this.getTypedRuleContext(TableConstraintContext,0);
	};

	columnNameType() {
	    return this.getTypedRuleContext(ColumnNameTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterColumnNameTypeOrConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitColumnNameTypeOrConstraint(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitColumnNameTypeOrConstraint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_tableConstraint;
    }

	createForeignKey() {
	    return this.getTypedRuleContext(CreateForeignKeyContext,0);
	};

	createConstraint() {
	    return this.getTypedRuleContext(CreateConstraintContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterTableConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitTableConstraint(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitTableConstraint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateForeignKeyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_createForeignKey;
        this.constraintName = null; // IdentifierContext
        this.fkCols = null; // ParenColumnNameListContext
        this.tabName = null; // TableNameContext
        this.parCols = null; // ParenColumnNameListContext
    }

	KW_FOREIGN() {
	    return this.getToken(InceptorOracleParser.KW_FOREIGN, 0);
	};

	KW_KEY() {
	    return this.getToken(InceptorOracleParser.KW_KEY, 0);
	};

	KW_REFERENCES() {
	    return this.getToken(InceptorOracleParser.KW_REFERENCES, 0);
	};

	parenColumnNameList = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ParenColumnNameListContext);
	    } else {
	        return this.getTypedRuleContext(ParenColumnNameListContext,i);
	    }
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	KW_CONSTRAINT() {
	    return this.getToken(InceptorOracleParser.KW_CONSTRAINT, 0);
	};

	constraintOpts() {
	    return this.getTypedRuleContext(ConstraintOptsContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterCreateForeignKey(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitCreateForeignKey(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitCreateForeignKey(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_createConstraint;
        this.constraintName = null; // IdentifierContext
        this.pkCols = null; // ParenColumnNameListContext
    }

	tableConstraintType() {
	    return this.getTypedRuleContext(TableConstraintTypeContext,0);
	};

	parenColumnNameList() {
	    return this.getTypedRuleContext(ParenColumnNameListContext,0);
	};

	KW_CONSTRAINT() {
	    return this.getToken(InceptorOracleParser.KW_CONSTRAINT, 0);
	};

	constraintOpts() {
	    return this.getTypedRuleContext(ConstraintOptsContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterCreateConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitCreateConstraint(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitCreateConstraint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableConstraintTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_tableConstraintType;
    }

	KW_PRIMARY() {
	    return this.getToken(InceptorOracleParser.KW_PRIMARY, 0);
	};

	KW_KEY() {
	    return this.getToken(InceptorOracleParser.KW_KEY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterTableConstraintType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitTableConstraintType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitTableConstraintType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConstraintOptsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_constraintOpts;
    }

	enableSpecification() {
	    return this.getTypedRuleContext(EnableSpecificationContext,0);
	};

	validateSpecification() {
	    return this.getTypedRuleContext(ValidateSpecificationContext,0);
	};

	relySpecification() {
	    return this.getTypedRuleContext(RelySpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterConstraintOpts(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitConstraintOpts(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitConstraintOpts(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EnableSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_enableSpecification;
    }

	KW_ENABLE() {
	    return this.getToken(InceptorOracleParser.KW_ENABLE, 0);
	};

	KW_DISABLE() {
	    return this.getToken(InceptorOracleParser.KW_DISABLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterEnableSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitEnableSpecification(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitEnableSpecification(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ValidateSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_validateSpecification;
    }

	KW_VALIDATE() {
	    return this.getToken(InceptorOracleParser.KW_VALIDATE, 0);
	};

	KW_NOVALIDATE() {
	    return this.getToken(InceptorOracleParser.KW_NOVALIDATE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterValidateSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitValidateSpecification(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitValidateSpecification(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RelySpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_relySpecification;
    }

	KW_RELY() {
	    return this.getToken(InceptorOracleParser.KW_RELY, 0);
	};

	KW_NORELY() {
	    return this.getToken(InceptorOracleParser.KW_NORELY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterRelySpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitRelySpecification(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitRelySpecification(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColumnConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_columnConstraint;
    }

	colPKConstraint() {
	    return this.getTypedRuleContext(ColPKConstraintContext,0);
	};

	colFKConstraint() {
	    return this.getTypedRuleContext(ColFKConstraintContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterColumnConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitColumnConstraint(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitColumnConstraint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColPKConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_colPKConstraint;
        this.constraintName = null; // IdentifierContext
    }

	KW_PRIMARY() {
	    return this.getToken(InceptorOracleParser.KW_PRIMARY, 0);
	};

	KW_KEY() {
	    return this.getToken(InceptorOracleParser.KW_KEY, 0);
	};

	KW_CONSTRAINT() {
	    return this.getToken(InceptorOracleParser.KW_CONSTRAINT, 0);
	};

	constraintOpts() {
	    return this.getTypedRuleContext(ConstraintOptsContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterColPKConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitColPKConstraint(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitColPKConstraint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColFKConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_colFKConstraint;
        this.constraintName = null; // IdentifierContext
        this.tabName = null; // TableNameContext
        this.colName = null; // ColumnNameContext
    }

	KW_REFERENCES() {
	    return this.getToken(InceptorOracleParser.KW_REFERENCES, 0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	columnName() {
	    return this.getTypedRuleContext(ColumnNameContext,0);
	};

	KW_CONSTRAINT() {
	    return this.getToken(InceptorOracleParser.KW_CONSTRAINT, 0);
	};

	constraintOpts() {
	    return this.getTypedRuleContext(ConstraintOptsContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterColFKConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitColFKConstraint(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitColFKConstraint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ParenColumnNameListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_parenColumnNameList;
    }

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	columnNameList() {
	    return this.getTypedRuleContext(ColumnNameListContext,0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterParenColumnNameList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitParenColumnNameList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitParenColumnNameList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DefaultVauleOrColumnConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_defaultVauleOrColumnConstraint;
    }

	columnAttribute = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnAttributeContext);
	    } else {
	        return this.getTypedRuleContext(ColumnAttributeContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDefaultVauleOrColumnConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDefaultVauleOrColumnConstraint(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDefaultVauleOrColumnConstraint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColumnAttributeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_columnAttribute;
    }

	dialectcolumnConstraint() {
	    return this.getTypedRuleContext(DialectcolumnConstraintContext,0);
	};

	columnConstraint() {
	    return this.getTypedRuleContext(ColumnConstraintContext,0);
	};

	columnComment() {
	    return this.getTypedRuleContext(ColumnCommentContext,0);
	};

	defaultValueNode() {
	    return this.getTypedRuleContext(DefaultValueNodeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterColumnAttribute(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitColumnAttribute(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitColumnAttribute(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CrudStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_crudStatement;
    }

	updateStatement() {
	    return this.getTypedRuleContext(UpdateStatementContext,0);
	};

	batchUpdateStatement() {
	    return this.getTypedRuleContext(BatchUpdateStatementContext,0);
	};

	deleteStatement() {
	    return this.getTypedRuleContext(DeleteStatementContext,0);
	};

	mergeStatement() {
	    return this.getTypedRuleContext(MergeStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterCrudStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitCrudStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitCrudStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MergeStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_mergeStatement;
    }

	KW_MERGE() {
	    return this.getToken(InceptorOracleParser.KW_MERGE, 0);
	};

	KW_INTO() {
	    return this.getToken(InceptorOracleParser.KW_INTO, 0);
	};

	crudTargetStatement() {
	    return this.getTypedRuleContext(CrudTargetStatementContext,0);
	};

	KW_USING() {
	    return this.getToken(InceptorOracleParser.KW_USING, 0);
	};

	fromSource() {
	    return this.getTypedRuleContext(FromSourceContext,0);
	};

	KW_ON() {
	    return this.getToken(InceptorOracleParser.KW_ON, 0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	mergeUpdateClause() {
	    return this.getTypedRuleContext(MergeUpdateClauseContext,0);
	};

	mergeInsertClause() {
	    return this.getTypedRuleContext(MergeInsertClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterMergeStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitMergeStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitMergeStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MergeUpdateClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_mergeUpdateClause;
    }

	KW_WHEN() {
	    return this.getToken(InceptorOracleParser.KW_WHEN, 0);
	};

	KW_MATCHED() {
	    return this.getToken(InceptorOracleParser.KW_MATCHED, 0);
	};

	KW_THEN() {
	    return this.getToken(InceptorOracleParser.KW_THEN, 0);
	};

	KW_UPDATE() {
	    return this.getToken(InceptorOracleParser.KW_UPDATE, 0);
	};

	KW_SET() {
	    return this.getToken(InceptorOracleParser.KW_SET, 0);
	};

	update_set_elements() {
	    return this.getTypedRuleContext(Update_set_elementsContext,0);
	};

	whereClause() {
	    return this.getTypedRuleContext(WhereClauseContext,0);
	};

	mergeDeleteClause() {
	    return this.getTypedRuleContext(MergeDeleteClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterMergeUpdateClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitMergeUpdateClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitMergeUpdateClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MergeDeleteClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_mergeDeleteClause;
    }

	KW_DELETE() {
	    return this.getToken(InceptorOracleParser.KW_DELETE, 0);
	};

	whereClause() {
	    return this.getTypedRuleContext(WhereClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterMergeDeleteClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitMergeDeleteClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitMergeDeleteClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MergeInsertClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_mergeInsertClause;
    }

	KW_WHEN() {
	    return this.getToken(InceptorOracleParser.KW_WHEN, 0);
	};

	KW_NOT() {
	    return this.getToken(InceptorOracleParser.KW_NOT, 0);
	};

	KW_MATCHED() {
	    return this.getToken(InceptorOracleParser.KW_MATCHED, 0);
	};

	KW_THEN() {
	    return this.getToken(InceptorOracleParser.KW_THEN, 0);
	};

	KW_INSERT() {
	    return this.getToken(InceptorOracleParser.KW_INSERT, 0);
	};

	valuesClause() {
	    return this.getTypedRuleContext(ValuesClauseContext,0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	columnOrtableDotColumnNameList() {
	    return this.getTypedRuleContext(ColumnOrtableDotColumnNameListContext,0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	whereClause() {
	    return this.getTypedRuleContext(WhereClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterMergeInsertClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitMergeInsertClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitMergeInsertClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ImplicitInsertStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_implicitInsertStatement;
    }

	selectClause() {
	    return this.getTypedRuleContext(SelectClauseContext,0);
	};

	KW_INTO() {
	    return this.getToken(InceptorOracleParser.KW_INTO, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	fromClause() {
	    return this.getTypedRuleContext(FromClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterImplicitInsertStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitImplicitInsertStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitImplicitInsertStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UpdateStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_updateStatement;
    }

	KW_UPDATE() {
	    return this.getToken(InceptorOracleParser.KW_UPDATE, 0);
	};

	crudTargetStatement() {
	    return this.getTypedRuleContext(CrudTargetStatementContext,0);
	};

	KW_SET() {
	    return this.getToken(InceptorOracleParser.KW_SET, 0);
	};

	update_set_clause_suffix() {
	    return this.getTypedRuleContext(Update_set_clause_suffixContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterUpdateStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitUpdateStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitUpdateStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BatchUpdateStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_batchUpdateStatement;
    }

	KW_BATCHUPDATE() {
	    return this.getToken(InceptorOracleParser.KW_BATCHUPDATE, 0);
	};

	tableOrPartition() {
	    return this.getTypedRuleContext(TableOrPartitionContext,0);
	};

	batchUpdate_set_clause() {
	    return this.getTypedRuleContext(BatchUpdate_set_clauseContext,0);
	};

	KW_TABLE() {
	    return this.getToken(InceptorOracleParser.KW_TABLE, 0);
	};

	alias() {
	    return this.getTypedRuleContext(AliasContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterBatchUpdateStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitBatchUpdateStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitBatchUpdateStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BatchUpdate_set_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_batchUpdate_set_clause;
    }

	KW_SET() {
	    return this.getToken(InceptorOracleParser.KW_SET, 0);
	};

	LPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.LPAREN);
	    } else {
	        return this.getToken(InceptorOracleParser.LPAREN, i);
	    }
	};


	columnOrtableDotColumnNameList = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnOrtableDotColumnNameListContext);
	    } else {
	        return this.getTypedRuleContext(ColumnOrtableDotColumnNameListContext,i);
	    }
	};

	RPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.RPAREN);
	    } else {
	        return this.getToken(InceptorOracleParser.RPAREN, i);
	    }
	};


	EQUAL() {
	    return this.getToken(InceptorOracleParser.EQUAL, 0);
	};

	batchValuesClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BatchValuesClauseContext);
	    } else {
	        return this.getTypedRuleContext(BatchValuesClauseContext,i);
	    }
	};

	KW_WHERE() {
	    return this.getToken(InceptorOracleParser.KW_WHERE, 0);
	};

	KW_IN() {
	    return this.getToken(InceptorOracleParser.KW_IN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterBatchUpdate_set_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitBatchUpdate_set_clause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitBatchUpdate_set_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Update_set_clause_suffixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_update_set_clause_suffix;
    }

	LPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.LPAREN);
	    } else {
	        return this.getToken(InceptorOracleParser.LPAREN, i);
	    }
	};


	columnOrtableDotColumnNameList() {
	    return this.getTypedRuleContext(ColumnOrtableDotColumnNameListContext,0);
	};

	RPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.RPAREN);
	    } else {
	        return this.getToken(InceptorOracleParser.RPAREN, i);
	    }
	};


	EQUAL() {
	    return this.getToken(InceptorOracleParser.EQUAL, 0);
	};

	selectStatement() {
	    return this.getTypedRuleContext(SelectStatementContext,0);
	};

	whereClause() {
	    return this.getTypedRuleContext(WhereClauseContext,0);
	};

	update_set_clause_elements() {
	    return this.getTypedRuleContext(Update_set_clause_elementsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterUpdate_set_clause_suffix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitUpdate_set_clause_suffix(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitUpdate_set_clause_suffix(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Update_set_clause_elementsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_update_set_clause_elements;
    }

	update_set_clause_element = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Update_set_clause_elementContext);
	    } else {
	        return this.getTypedRuleContext(Update_set_clause_elementContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterUpdate_set_clause_elements(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitUpdate_set_clause_elements(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitUpdate_set_clause_elements(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Update_set_clause_elementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_update_set_clause_element;
        this.part = null; // Update_set_clause_element_partContext
    }

	columnOrtableDotColumnName() {
	    return this.getTypedRuleContext(ColumnOrtableDotColumnNameContext,0);
	};

	EQUAL() {
	    return this.getToken(InceptorOracleParser.EQUAL, 0);
	};

	update_set_clause_element_part() {
	    return this.getTypedRuleContext(Update_set_clause_element_partContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterUpdate_set_clause_element(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitUpdate_set_clause_element(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitUpdate_set_clause_element(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Update_set_clause_element_partContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_update_set_clause_element_part;
        this.srcValue = null; // ExpressionContext
    }

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	selectStatement() {
	    return this.getTypedRuleContext(SelectStatementContext,0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterUpdate_set_clause_element_part(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitUpdate_set_clause_element_part(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitUpdate_set_clause_element_part(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Update_set_elementsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_update_set_elements;
    }

	update_set_element = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Update_set_elementContext);
	    } else {
	        return this.getTypedRuleContext(Update_set_elementContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterUpdate_set_elements(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitUpdate_set_elements(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitUpdate_set_elements(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Update_set_elementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_update_set_element;
        this.srcValue = null; // ExpressionContext
    }

	columnOrtableDotColumnName() {
	    return this.getTypedRuleContext(ColumnOrtableDotColumnNameContext,0);
	};

	EQUAL() {
	    return this.getToken(InceptorOracleParser.EQUAL, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterUpdate_set_element(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitUpdate_set_element(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitUpdate_set_element(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DeleteStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_deleteStatement;
    }

	KW_DELETE() {
	    return this.getToken(InceptorOracleParser.KW_DELETE, 0);
	};

	crudTargetStatement() {
	    return this.getTypedRuleContext(CrudTargetStatementContext,0);
	};

	KW_FROM() {
	    return this.getToken(InceptorOracleParser.KW_FROM, 0);
	};

	whereClause() {
	    return this.getTypedRuleContext(WhereClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDeleteStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDeleteStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDeleteStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CrudTargetStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_crudTargetStatement;
    }

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	KW_TABLE() {
	    return this.getToken(InceptorOracleParser.KW_TABLE, 0);
	};

	partitionSpec() {
	    return this.getTypedRuleContext(PartitionSpecContext,0);
	};

	alias() {
	    return this.getTypedRuleContext(AliasContext,0);
	};

	KW_AS() {
	    return this.getToken(InceptorOracleParser.KW_AS, 0);
	};

	subQuerySource() {
	    return this.getTypedRuleContext(SubQuerySourceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterCrudTargetStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitCrudTargetStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitCrudTargetStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DclStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_dclStatement;
    }

	beginTransactionStatement() {
	    return this.getTypedRuleContext(BeginTransactionStatementContext,0);
	};

	commitTransactionStatement() {
	    return this.getTypedRuleContext(CommitTransactionStatementContext,0);
	};

	rollbackTransactionStatement() {
	    return this.getTypedRuleContext(RollbackTransactionStatementContext,0);
	};

	transactionSettingStatement() {
	    return this.getTypedRuleContext(TransactionSettingStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDclStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDclStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDclStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BeginTransactionStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_beginTransactionStatement;
    }

	KW_BEGIN() {
	    return this.getToken(InceptorOracleParser.KW_BEGIN, 0);
	};

	KW_START() {
	    return this.getToken(InceptorOracleParser.KW_START, 0);
	};

	KW_WORK() {
	    return this.getToken(InceptorOracleParser.KW_WORK, 0);
	};

	KW_TRANSACTION() {
	    return this.getToken(InceptorOracleParser.KW_TRANSACTION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterBeginTransactionStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitBeginTransactionStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitBeginTransactionStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CommitTransactionStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_commitTransactionStatement;
    }

	KW_COMMIT() {
	    return this.getToken(InceptorOracleParser.KW_COMMIT, 0);
	};

	KW_WORK() {
	    return this.getToken(InceptorOracleParser.KW_WORK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterCommitTransactionStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitCommitTransactionStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitCommitTransactionStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RollbackTransactionStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_rollbackTransactionStatement;
    }

	KW_ROLLBACK() {
	    return this.getToken(InceptorOracleParser.KW_ROLLBACK, 0);
	};

	KW_WORK() {
	    return this.getToken(InceptorOracleParser.KW_WORK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterRollbackTransactionStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitRollbackTransactionStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitRollbackTransactionStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TransactionSettingStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_transactionSettingStatement;
        this.readMode = null; // Token
    }

	KW_SET() {
	    return this.getToken(InceptorOracleParser.KW_SET, 0);
	};

	KW_TRANSACTION() {
	    return this.getToken(InceptorOracleParser.KW_TRANSACTION, 0);
	};

	KW_READ() {
	    return this.getToken(InceptorOracleParser.KW_READ, 0);
	};

	KW_ONLY() {
	    return this.getToken(InceptorOracleParser.KW_ONLY, 0);
	};

	KW_WRITE() {
	    return this.getToken(InceptorOracleParser.KW_WRITE, 0);
	};

	KW_ISOLATION() {
	    return this.getToken(InceptorOracleParser.KW_ISOLATION, 0);
	};

	KW_LEVEL() {
	    return this.getToken(InceptorOracleParser.KW_LEVEL, 0);
	};

	KW_SERIALIZABLE() {
	    return this.getToken(InceptorOracleParser.KW_SERIALIZABLE, 0);
	};

	KW_COMMITTED() {
	    return this.getToken(InceptorOracleParser.KW_COMMITTED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterTransactionSettingStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitTransactionSettingStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitTransactionSettingStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DdlAStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_ddlAStatement;
    }

	createDatabaseStatement() {
	    return this.getTypedRuleContext(CreateDatabaseStatementContext,0);
	};

	switchDatabaseStatement() {
	    return this.getTypedRuleContext(SwitchDatabaseStatementContext,0);
	};

	switchApplicationStatement() {
	    return this.getTypedRuleContext(SwitchApplicationStatementContext,0);
	};

	dropDatabaseStatement() {
	    return this.getTypedRuleContext(DropDatabaseStatementContext,0);
	};

	createDbLinkStatement() {
	    return this.getTypedRuleContext(CreateDbLinkStatementContext,0);
	};

	dropDbLinkStatement() {
	    return this.getTypedRuleContext(DropDbLinkStatementContext,0);
	};

	createTableStatement() {
	    return this.getTypedRuleContext(CreateTableStatementContext,0);
	};

	createTemporaryTableStatement() {
	    return this.getTypedRuleContext(CreateTemporaryTableStatementContext,0);
	};

	createStreamStatement() {
	    return this.getTypedRuleContext(CreateStreamStatementContext,0);
	};

	createMetricStatement() {
	    return this.getTypedRuleContext(CreateMetricStatementContext,0);
	};

	createApplicationStatement() {
	    return this.getTypedRuleContext(CreateApplicationStatementContext,0);
	};

	createJobStatement() {
	    return this.getTypedRuleContext(CreateJobStatementContext,0);
	};

	createRuleStatement() {
	    return this.getTypedRuleContext(CreateRuleStatementContext,0);
	};

	dropRuleStatement() {
	    return this.getTypedRuleContext(DropRuleStatementContext,0);
	};

	createRuleBaseStatement() {
	    return this.getTypedRuleContext(CreateRuleBaseStatementContext,0);
	};

	switchRuleBaseStatement() {
	    return this.getTypedRuleContext(SwitchRuleBaseStatementContext,0);
	};

	dropRuleBaseStatement() {
	    return this.getTypedRuleContext(DropRuleBaseStatementContext,0);
	};

	createPolicyStatement() {
	    return this.getTypedRuleContext(CreatePolicyStatementContext,0);
	};

	switchPolicyStatement() {
	    return this.getTypedRuleContext(SwitchPolicyStatementContext,0);
	};

	createRuleGroupStatement() {
	    return this.getTypedRuleContext(CreateRuleGroupStatementContext,0);
	};

	createPolicyRuleStatement() {
	    return this.getTypedRuleContext(CreatePolicyRuleStatementContext,0);
	};

	dropPolicyStatement() {
	    return this.getTypedRuleContext(DropPolicyStatementContext,0);
	};

	dropPolicyRuleStatement() {
	    return this.getTypedRuleContext(DropPolicyRuleStatementContext,0);
	};

	dropTableStatement() {
	    return this.getTypedRuleContext(DropTableStatementContext,0);
	};

	dropStreamStatement() {
	    return this.getTypedRuleContext(DropStreamStatementContext,0);
	};

	dropMetricStatement() {
	    return this.getTypedRuleContext(DropMetricStatementContext,0);
	};

	dropApplicationStatement() {
	    return this.getTypedRuleContext(DropApplicationStatementContext,0);
	};

	dropJobStatement() {
	    return this.getTypedRuleContext(DropJobStatementContext,0);
	};

	dropCachedMetricStatement() {
	    return this.getTypedRuleContext(DropCachedMetricStatementContext,0);
	};

	truncateCachedMetricStatement() {
	    return this.getTypedRuleContext(TruncateCachedMetricStatementContext,0);
	};

	truncateTableStatement() {
	    return this.getTypedRuleContext(TruncateTableStatementContext,0);
	};

	createSequenceStatement() {
	    return this.getTypedRuleContext(CreateSequenceStatementContext,0);
	};

	dropSequenceStatement() {
	    return this.getTypedRuleContext(DropSequenceStatementContext,0);
	};

	createRuleFunctionStatement() {
	    return this.getTypedRuleContext(CreateRuleFunctionStatementContext,0);
	};

	dropRuleFunctionStatement() {
	    return this.getTypedRuleContext(DropRuleFunctionStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDdlAStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDdlAStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDdlAStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateDatabaseStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_createDatabaseStatement;
        this.name = null; // IdentifierContext
        this.dbprops = null; // DbPropertiesContext
    }

	KW_CREATE() {
	    return this.getToken(InceptorOracleParser.KW_CREATE, 0);
	};

	KW_DATABASE() {
	    return this.getToken(InceptorOracleParser.KW_DATABASE, 0);
	};

	KW_SCHEMA() {
	    return this.getToken(InceptorOracleParser.KW_SCHEMA, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	ifNotExists() {
	    return this.getTypedRuleContext(IfNotExistsContext,0);
	};

	databaseComment() {
	    return this.getTypedRuleContext(DatabaseCommentContext,0);
	};

	dbLocation() {
	    return this.getTypedRuleContext(DbLocationContext,0);
	};

	KW_WITH() {
	    return this.getToken(InceptorOracleParser.KW_WITH, 0);
	};

	KW_DBPROPERTIES() {
	    return this.getToken(InceptorOracleParser.KW_DBPROPERTIES, 0);
	};

	dbProperties() {
	    return this.getTypedRuleContext(DbPropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterCreateDatabaseStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitCreateDatabaseStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitCreateDatabaseStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SwitchDatabaseStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_switchDatabaseStatement;
    }

	KW_USE() {
	    return this.getToken(InceptorOracleParser.KW_USE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterSwitchDatabaseStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitSwitchDatabaseStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitSwitchDatabaseStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SwitchApplicationStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_switchApplicationStatement;
    }

	KW_USE() {
	    return this.getToken(InceptorOracleParser.KW_USE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	KW_APPLICATION() {
	    return this.getToken(InceptorOracleParser.KW_APPLICATION, 0);
	};

	KW_APP() {
	    return this.getToken(InceptorOracleParser.KW_APP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterSwitchApplicationStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitSwitchApplicationStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitSwitchApplicationStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropDatabaseStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_dropDatabaseStatement;
    }

	KW_DROP() {
	    return this.getToken(InceptorOracleParser.KW_DROP, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	KW_DATABASE() {
	    return this.getToken(InceptorOracleParser.KW_DATABASE, 0);
	};

	KW_SCHEMA() {
	    return this.getToken(InceptorOracleParser.KW_SCHEMA, 0);
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	restrictOrCascade() {
	    return this.getTypedRuleContext(RestrictOrCascadeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDropDatabaseStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDropDatabaseStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDropDatabaseStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateDbLinkStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_createDbLinkStatement;
    }

	KW_CREATE() {
	    return this.getToken(InceptorOracleParser.KW_CREATE, 0);
	};

	KW_DATABASE() {
	    return this.getToken(InceptorOracleParser.KW_DATABASE, 0);
	};

	KW_LINK() {
	    return this.getToken(InceptorOracleParser.KW_LINK, 0);
	};

	dblink() {
	    return this.getTypedRuleContext(DblinkContext,0);
	};

	KW_USING() {
	    return this.getToken(InceptorOracleParser.KW_USING, 0);
	};

	dblinkService() {
	    return this.getTypedRuleContext(DblinkServiceContext,0);
	};

	KW_SHARED() {
	    return this.getToken(InceptorOracleParser.KW_SHARED, 0);
	};

	KW_PUBLIC() {
	    return this.getToken(InceptorOracleParser.KW_PUBLIC, 0);
	};

	KW_CONNECT() {
	    return this.getToken(InceptorOracleParser.KW_CONNECT, 0);
	};

	KW_TO() {
	    return this.getToken(InceptorOracleParser.KW_TO, 0);
	};

	dblinkUser() {
	    return this.getTypedRuleContext(DblinkUserContext,0);
	};

	KW_IDENTIFIED() {
	    return this.getToken(InceptorOracleParser.KW_IDENTIFIED, 0);
	};

	KW_BY() {
	    return this.getToken(InceptorOracleParser.KW_BY, 0);
	};

	dblinkPwd() {
	    return this.getTypedRuleContext(DblinkPwdContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterCreateDbLinkStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitCreateDbLinkStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitCreateDbLinkStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropDbLinkStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_dropDbLinkStatement;
    }

	KW_DROP() {
	    return this.getToken(InceptorOracleParser.KW_DROP, 0);
	};

	KW_DATABASE() {
	    return this.getToken(InceptorOracleParser.KW_DATABASE, 0);
	};

	KW_LINK() {
	    return this.getToken(InceptorOracleParser.KW_LINK, 0);
	};

	dblink() {
	    return this.getTypedRuleContext(DblinkContext,0);
	};

	KW_PUBLIC() {
	    return this.getToken(InceptorOracleParser.KW_PUBLIC, 0);
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDropDbLinkStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDropDbLinkStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDropDbLinkStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DblinkContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_dblink;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDblink(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDblink(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDblink(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DblinkUserContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_dblinkUser;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDblinkUser(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDblinkUser(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDblinkUser(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DblinkPwdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_dblinkPwd;
    }

	StringLiteral() {
	    return this.getToken(InceptorOracleParser.StringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDblinkPwd(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDblinkPwd(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDblinkPwd(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DblinkServiceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_dblinkService;
    }

	StringLiteral() {
	    return this.getToken(InceptorOracleParser.StringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDblinkService(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDblinkService(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDblinkService(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateTableStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_createTableStatement;
    }

	dialectCreateTableStatement() {
	    return this.getTypedRuleContext(DialectCreateTableStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterCreateTableStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitCreateTableStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitCreateTableStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateTemporaryTableStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_createTemporaryTableStatement;
    }

	dialectCreateTemporaryTableStatement() {
	    return this.getTypedRuleContext(DialectCreateTemporaryTableStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterCreateTemporaryTableStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitCreateTemporaryTableStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitCreateTemporaryTableStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableDefinitionClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_tableDefinitionClause;
        this.like = null; // Token
        this.likeName = null; // TableNameContext
    }

	KW_LIKE() {
	    return this.getToken(InceptorOracleParser.KW_LIKE, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	tableLocation() {
	    return this.getTypedRuleContext(TableLocationContext,0);
	};

	tablePropertiesPrefixed() {
	    return this.getTypedRuleContext(TablePropertiesPrefixedContext,0);
	};

	dialectTableDefinitionClause() {
	    return this.getTypedRuleContext(DialectTableDefinitionClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterTableDefinitionClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitTableDefinitionClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitTableDefinitionClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NoDataCopyQueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_noDataCopyQuery;
    }

	dialectWithNoData() {
	    return this.getTypedRuleContext(DialectWithNoDataContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterNoDataCopyQuery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitNoDataCopyQuery(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitNoDataCopyQuery(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateStreamStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_createStreamStatement;
        this.temp = null; // Token
        this.ext = null; // Token
        this.name = null; // TableNameContext
        this.like = null; // Token
        this.likeName = null; // TableNameContext
    }

	KW_CREATE() {
	    return this.getToken(InceptorOracleParser.KW_CREATE, 0);
	};

	KW_STREAM() {
	    return this.getToken(InceptorOracleParser.KW_STREAM, 0);
	};

	tableName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TableNameContext);
	    } else {
	        return this.getTypedRuleContext(TableNameContext,i);
	    }
	};

	ifNotExists() {
	    return this.getTypedRuleContext(IfNotExistsContext,0);
	};

	KW_LIKE() {
	    return this.getToken(InceptorOracleParser.KW_LIKE, 0);
	};

	KW_TEMPORARY() {
	    return this.getToken(InceptorOracleParser.KW_TEMPORARY, 0);
	};

	KW_EXTERNAL() {
	    return this.getToken(InceptorOracleParser.KW_EXTERNAL, 0);
	};

	tableLocation() {
	    return this.getTypedRuleContext(TableLocationContext,0);
	};

	tablePropertiesPrefixed() {
	    return this.getTypedRuleContext(TablePropertiesPrefixedContext,0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	columnNameTypeList() {
	    return this.getTypedRuleContext(ColumnNameTypeListContext,0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	tableComment() {
	    return this.getTypedRuleContext(TableCommentContext,0);
	};

	tablePartition() {
	    return this.getTypedRuleContext(TablePartitionContext,0);
	};

	tableBuckets() {
	    return this.getTypedRuleContext(TableBucketsContext,0);
	};

	tableSkewed() {
	    return this.getTypedRuleContext(TableSkewedContext,0);
	};

	tableRowFormat() {
	    return this.getTypedRuleContext(TableRowFormatContext,0);
	};

	tableFileFormat() {
	    return this.getTypedRuleContext(TableFileFormatContext,0);
	};

	KW_AS() {
	    return this.getToken(InceptorOracleParser.KW_AS, 0);
	};

	ctasTargetStatement() {
	    return this.getTypedRuleContext(CtasTargetStatementContext,0);
	};

	erroLogTableSpec() {
	    return this.getTypedRuleContext(ErroLogTableSpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterCreateStreamStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitCreateStreamStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitCreateStreamStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateMetricStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_createMetricStatement;
        this.temp = null; // Token
        this.ext = null; // Token
        this.name = null; // TableNameContext
        this.like = null; // Token
        this.likeName = null; // TableNameContext
    }

	KW_CREATE() {
	    return this.getToken(InceptorOracleParser.KW_CREATE, 0);
	};

	KW_METRIC() {
	    return this.getToken(InceptorOracleParser.KW_METRIC, 0);
	};

	tableName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TableNameContext);
	    } else {
	        return this.getTypedRuleContext(TableNameContext,i);
	    }
	};

	ifNotExists() {
	    return this.getTypedRuleContext(IfNotExistsContext,0);
	};

	KW_LIKE() {
	    return this.getToken(InceptorOracleParser.KW_LIKE, 0);
	};

	KW_TEMPORARY() {
	    return this.getToken(InceptorOracleParser.KW_TEMPORARY, 0);
	};

	KW_EXTERNAL() {
	    return this.getToken(InceptorOracleParser.KW_EXTERNAL, 0);
	};

	tableLocation() {
	    return this.getTypedRuleContext(TableLocationContext,0);
	};

	tablePropertiesPrefixed() {
	    return this.getTypedRuleContext(TablePropertiesPrefixedContext,0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	columnNameTypeList() {
	    return this.getTypedRuleContext(ColumnNameTypeListContext,0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	tableComment() {
	    return this.getTypedRuleContext(TableCommentContext,0);
	};

	tablePartition() {
	    return this.getTypedRuleContext(TablePartitionContext,0);
	};

	tableBuckets() {
	    return this.getTypedRuleContext(TableBucketsContext,0);
	};

	tableSkewed() {
	    return this.getTypedRuleContext(TableSkewedContext,0);
	};

	tableRowFormat() {
	    return this.getTypedRuleContext(TableRowFormatContext,0);
	};

	tableFileFormat() {
	    return this.getTypedRuleContext(TableFileFormatContext,0);
	};

	KW_AS() {
	    return this.getToken(InceptorOracleParser.KW_AS, 0);
	};

	ctasTargetStatement() {
	    return this.getTypedRuleContext(CtasTargetStatementContext,0);
	};

	erroLogTableSpec() {
	    return this.getTypedRuleContext(ErroLogTableSpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterCreateMetricStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitCreateMetricStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitCreateMetricStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StreamJobContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_streamJob;
        this.sql = null; // Token
    }

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	StringLiteral() {
	    return this.getToken(InceptorOracleParser.StringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterStreamJob(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitStreamJob(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitStreamJob(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateJobStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_createJobStatement;
        this.name = null; // TableNameContext
        this.job = null; // StreamJobContext
        this.dbprops = null; // DbPropertiesContext
    }

	KW_CREATE() {
	    return this.getToken(InceptorOracleParser.KW_CREATE, 0);
	};

	KW_STREAMJOB() {
	    return this.getToken(InceptorOracleParser.KW_STREAMJOB, 0);
	};

	KW_AS() {
	    return this.getToken(InceptorOracleParser.KW_AS, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	streamJob() {
	    return this.getTypedRuleContext(StreamJobContext,0);
	};

	ifNotExists() {
	    return this.getTypedRuleContext(IfNotExistsContext,0);
	};

	KW_JOBPROPERTIES() {
	    return this.getToken(InceptorOracleParser.KW_JOBPROPERTIES, 0);
	};

	dbProperties() {
	    return this.getTypedRuleContext(DbPropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterCreateJobStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitCreateJobStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitCreateJobStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StreamRuleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_streamRule;
        this.sql = null; // Token
    }

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	StringLiteral() {
	    return this.getToken(InceptorOracleParser.StringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterStreamRule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitStreamRule(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitStreamRule(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateRuleStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_createRuleStatement;
        this.name = null; // TableNameContext
        this.dbprops = null; // DbPropertiesContext
    }

	KW_RULE() {
	    return this.getToken(InceptorOracleParser.KW_RULE, 0);
	};

	KW_AS() {
	    return this.getToken(InceptorOracleParser.KW_AS, 0);
	};

	streamRule() {
	    return this.getTypedRuleContext(StreamRuleContext,0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	ifNotExists() {
	    return this.getTypedRuleContext(IfNotExistsContext,0);
	};

	KW_RULEPROPERTIES() {
	    return this.getToken(InceptorOracleParser.KW_RULEPROPERTIES, 0);
	};

	dbProperties() {
	    return this.getTypedRuleContext(DbPropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterCreateRuleStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitCreateRuleStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitCreateRuleStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropRuleStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_dropRuleStatement;
    }

	KW_DROP() {
	    return this.getToken(InceptorOracleParser.KW_DROP, 0);
	};

	KW_RULE() {
	    return this.getToken(InceptorOracleParser.KW_RULE, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDropRuleStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDropRuleStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDropRuleStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateRuleBaseStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_createRuleBaseStatement;
        this.name = null; // IdentifierContext
        this.dbprops = null; // DbPropertiesContext
    }

	KW_CREATE() {
	    return this.getToken(InceptorOracleParser.KW_CREATE, 0);
	};

	KW_RULEBASE() {
	    return this.getToken(InceptorOracleParser.KW_RULEBASE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	ifNotExists() {
	    return this.getTypedRuleContext(IfNotExistsContext,0);
	};

	databaseComment() {
	    return this.getTypedRuleContext(DatabaseCommentContext,0);
	};

	KW_WITH() {
	    return this.getToken(InceptorOracleParser.KW_WITH, 0);
	};

	KW_DBPROPERTIES() {
	    return this.getToken(InceptorOracleParser.KW_DBPROPERTIES, 0);
	};

	dbProperties() {
	    return this.getTypedRuleContext(DbPropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterCreateRuleBaseStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitCreateRuleBaseStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitCreateRuleBaseStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SwitchRuleBaseStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_switchRuleBaseStatement;
    }

	KW_USE() {
	    return this.getToken(InceptorOracleParser.KW_USE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	KW_RULEBASE() {
	    return this.getToken(InceptorOracleParser.KW_RULEBASE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterSwitchRuleBaseStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitSwitchRuleBaseStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitSwitchRuleBaseStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropRuleBaseStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_dropRuleBaseStatement;
    }

	KW_DROP() {
	    return this.getToken(InceptorOracleParser.KW_DROP, 0);
	};

	KW_RULEBASE() {
	    return this.getToken(InceptorOracleParser.KW_RULEBASE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	restrictOrCascade() {
	    return this.getTypedRuleContext(RestrictOrCascadeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDropRuleBaseStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDropRuleBaseStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDropRuleBaseStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RuleGroupTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_ruleGroupType;
        this.percent = null; // Token
    }

	KW_ANY() {
	    return this.getToken(InceptorOracleParser.KW_ANY, 0);
	};

	KW_ALL() {
	    return this.getToken(InceptorOracleParser.KW_ALL, 0);
	};

	KW_PERCENT() {
	    return this.getToken(InceptorOracleParser.KW_PERCENT, 0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	Number() {
	    return this.getToken(InceptorOracleParser.Number, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterRuleGroupType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitRuleGroupType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitRuleGroupType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreatePolicyStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_createPolicyStatement;
        this.name = null; // TableNameContext
        this.dbprops = null; // DbPropertiesContext
    }

	KW_POLICY() {
	    return this.getToken(InceptorOracleParser.KW_POLICY, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	ifNotExists() {
	    return this.getTypedRuleContext(IfNotExistsContext,0);
	};

	KW_WITH() {
	    return this.getToken(InceptorOracleParser.KW_WITH, 0);
	};

	KW_RULES() {
	    return this.getToken(InceptorOracleParser.KW_RULES, 0);
	};

	KW_MEET() {
	    return this.getToken(InceptorOracleParser.KW_MEET, 0);
	};

	ruleGroupType() {
	    return this.getTypedRuleContext(RuleGroupTypeContext,0);
	};

	KW_POLICYPROPERTIES() {
	    return this.getToken(InceptorOracleParser.KW_POLICYPROPERTIES, 0);
	};

	dbProperties() {
	    return this.getTypedRuleContext(DbPropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterCreatePolicyStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitCreatePolicyStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitCreatePolicyStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateRuleGroupStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_createRuleGroupStatement;
        this.name = null; // TableNameContext
    }

	KW_ADD() {
	    return this.getToken(InceptorOracleParser.KW_ADD, 0);
	};

	KW_RULE() {
	    return this.getToken(InceptorOracleParser.KW_RULE, 0);
	};

	KW_GROUP() {
	    return this.getToken(InceptorOracleParser.KW_GROUP, 0);
	};

	KW_WITH() {
	    return this.getToken(InceptorOracleParser.KW_WITH, 0);
	};

	KW_RULES() {
	    return this.getToken(InceptorOracleParser.KW_RULES, 0);
	};

	KW_MEET() {
	    return this.getToken(InceptorOracleParser.KW_MEET, 0);
	};

	ruleGroupType() {
	    return this.getTypedRuleContext(RuleGroupTypeContext,0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	ifNotExists() {
	    return this.getTypedRuleContext(IfNotExistsContext,0);
	};

	intoRuleGroupStatement() {
	    return this.getTypedRuleContext(IntoRuleGroupStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterCreateRuleGroupStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitCreateRuleGroupStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitCreateRuleGroupStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IntoRuleGroupStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_intoRuleGroupStatement;
        this.ruleGroup = null; // TableNameContext
    }

	KW_INTO() {
	    return this.getToken(InceptorOracleParser.KW_INTO, 0);
	};

	KW_GROUP() {
	    return this.getToken(InceptorOracleParser.KW_GROUP, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterIntoRuleGroupStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitIntoRuleGroupStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitIntoRuleGroupStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RuleConstraintTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_ruleConstraintType;
    }

	KW_MUST() {
	    return this.getToken(InceptorOracleParser.KW_MUST, 0);
	};

	KW_MUSTNOT() {
	    return this.getToken(InceptorOracleParser.KW_MUSTNOT, 0);
	};

	KW_NONE() {
	    return this.getToken(InceptorOracleParser.KW_NONE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterRuleConstraintType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitRuleConstraintType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitRuleConstraintType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PolicyKeyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_policyKey;
        this.key = null; // Token
    }

	KW_WITH() {
	    return this.getToken(InceptorOracleParser.KW_WITH, 0);
	};

	KW_POLICYKEY() {
	    return this.getToken(InceptorOracleParser.KW_POLICYKEY, 0);
	};

	StringLiteral() {
	    return this.getToken(InceptorOracleParser.StringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterPolicyKey(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitPolicyKey(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitPolicyKey(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreatePolicyRuleStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_createPolicyRuleStatement;
        this.name = null; // TableNameContext
    }

	KW_ADD() {
	    return this.getToken(InceptorOracleParser.KW_ADD, 0);
	};

	KW_RULE() {
	    return this.getToken(InceptorOracleParser.KW_RULE, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	KW_WITH() {
	    return this.getToken(InceptorOracleParser.KW_WITH, 0);
	};

	KW_CONSTRAINT() {
	    return this.getToken(InceptorOracleParser.KW_CONSTRAINT, 0);
	};

	ruleConstraintType() {
	    return this.getTypedRuleContext(RuleConstraintTypeContext,0);
	};

	policyKey() {
	    return this.getTypedRuleContext(PolicyKeyContext,0);
	};

	intoRuleGroupStatement() {
	    return this.getTypedRuleContext(IntoRuleGroupStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterCreatePolicyRuleStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitCreatePolicyRuleStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitCreatePolicyRuleStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropPolicyStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_dropPolicyStatement;
    }

	KW_DROP() {
	    return this.getToken(InceptorOracleParser.KW_DROP, 0);
	};

	KW_POLICY() {
	    return this.getToken(InceptorOracleParser.KW_POLICY, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDropPolicyStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDropPolicyStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDropPolicyStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SwitchPolicyStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_switchPolicyStatement;
    }

	KW_USE() {
	    return this.getToken(InceptorOracleParser.KW_USE, 0);
	};

	KW_POLICY() {
	    return this.getToken(InceptorOracleParser.KW_POLICY, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterSwitchPolicyStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitSwitchPolicyStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitSwitchPolicyStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropPolicyRuleStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_dropPolicyRuleStatement;
    }

	KW_REMOVE() {
	    return this.getToken(InceptorOracleParser.KW_REMOVE, 0);
	};

	KW_RULE() {
	    return this.getToken(InceptorOracleParser.KW_RULE, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	KW_GROUP() {
	    return this.getToken(InceptorOracleParser.KW_GROUP, 0);
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDropPolicyRuleStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDropPolicyRuleStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDropPolicyRuleStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateApplicationStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_createApplicationStatement;
        this.name = null; // IdentifierContext
        this.dbprops = null; // DbPropertiesContext
    }

	KW_CREATE() {
	    return this.getToken(InceptorOracleParser.KW_CREATE, 0);
	};

	KW_APPLICATION() {
	    return this.getToken(InceptorOracleParser.KW_APPLICATION, 0);
	};

	KW_APP() {
	    return this.getToken(InceptorOracleParser.KW_APP, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	ifNotExists() {
	    return this.getTypedRuleContext(IfNotExistsContext,0);
	};

	KW_APPPROPERTIES() {
	    return this.getToken(InceptorOracleParser.KW_APPPROPERTIES, 0);
	};

	dbProperties() {
	    return this.getTypedRuleContext(DbPropertiesContext,0);
	};

	KW_WITH() {
	    return this.getToken(InceptorOracleParser.KW_WITH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterCreateApplicationStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitCreateApplicationStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitCreateApplicationStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropApplicationStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_dropApplicationStatement;
    }

	KW_DROP() {
	    return this.getToken(InceptorOracleParser.KW_DROP, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	KW_APPLICATION() {
	    return this.getToken(InceptorOracleParser.KW_APPLICATION, 0);
	};

	KW_APP() {
	    return this.getToken(InceptorOracleParser.KW_APP, 0);
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	restrictOrCascade() {
	    return this.getTypedRuleContext(RestrictOrCascadeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDropApplicationStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDropApplicationStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDropApplicationStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropTableStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_dropTableStatement;
    }

	KW_DROP() {
	    return this.getToken(InceptorOracleParser.KW_DROP, 0);
	};

	KW_TABLE() {
	    return this.getToken(InceptorOracleParser.KW_TABLE, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	KW_PURGE() {
	    return this.getToken(InceptorOracleParser.KW_PURGE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDropTableStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDropTableStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDropTableStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropStreamStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_dropStreamStatement;
    }

	KW_DROP() {
	    return this.getToken(InceptorOracleParser.KW_DROP, 0);
	};

	KW_STREAM() {
	    return this.getToken(InceptorOracleParser.KW_STREAM, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDropStreamStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDropStreamStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDropStreamStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropMetricStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_dropMetricStatement;
    }

	KW_DROP() {
	    return this.getToken(InceptorOracleParser.KW_DROP, 0);
	};

	KW_METRIC() {
	    return this.getToken(InceptorOracleParser.KW_METRIC, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDropMetricStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDropMetricStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDropMetricStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropJobStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_dropJobStatement;
    }

	KW_DROP() {
	    return this.getToken(InceptorOracleParser.KW_DROP, 0);
	};

	KW_STREAMJOB() {
	    return this.getToken(InceptorOracleParser.KW_STREAMJOB, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDropJobStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDropJobStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDropJobStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateRuleFunctionStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_createRuleFunctionStatement;
        this.name = null; // IdentifierContext
        this.dbprops = null; // DbPropertiesContext
        this.rList = null; // ResourceListContext
    }

	KW_CREATE() {
	    return this.getToken(InceptorOracleParser.KW_CREATE, 0);
	};

	KW_RULE_FUNCTION() {
	    return this.getToken(InceptorOracleParser.KW_RULE_FUNCTION, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	ifNotExists() {
	    return this.getTypedRuleContext(IfNotExistsContext,0);
	};

	KW_RULE_FUNCTION_PROPERTIES() {
	    return this.getToken(InceptorOracleParser.KW_RULE_FUNCTION_PROPERTIES, 0);
	};

	KW_USING() {
	    return this.getToken(InceptorOracleParser.KW_USING, 0);
	};

	dbProperties() {
	    return this.getTypedRuleContext(DbPropertiesContext,0);
	};

	resourceList() {
	    return this.getTypedRuleContext(ResourceListContext,0);
	};

	KW_WITH() {
	    return this.getToken(InceptorOracleParser.KW_WITH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterCreateRuleFunctionStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitCreateRuleFunctionStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitCreateRuleFunctionStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropRuleFunctionStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_dropRuleFunctionStatement;
        this.metricName = null; // IdentifierContext
    }

	KW_DROP() {
	    return this.getToken(InceptorOracleParser.KW_DROP, 0);
	};

	KW_RULE_FUNCTION() {
	    return this.getToken(InceptorOracleParser.KW_RULE_FUNCTION, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDropRuleFunctionStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDropRuleFunctionStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDropRuleFunctionStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropCachedMetricStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_dropCachedMetricStatement;
        this.metricName = null; // IdentifierContext
    }

	KW_DROP() {
	    return this.getToken(InceptorOracleParser.KW_DROP, 0);
	};

	KW_CACHEDMETRIC() {
	    return this.getToken(InceptorOracleParser.KW_CACHEDMETRIC, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDropCachedMetricStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDropCachedMetricStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDropCachedMetricStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TruncateCachedMetricStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_truncateCachedMetricStatement;
        this.metricName = null; // IdentifierContext
    }

	KW_TRUNCATE() {
	    return this.getToken(InceptorOracleParser.KW_TRUNCATE, 0);
	};

	KW_CACHEDMETRIC() {
	    return this.getToken(InceptorOracleParser.KW_CACHEDMETRIC, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterTruncateCachedMetricStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitTruncateCachedMetricStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitTruncateCachedMetricStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TruncateTableStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_truncateTableStatement;
    }

	KW_TRUNCATE() {
	    return this.getToken(InceptorOracleParser.KW_TRUNCATE, 0);
	};

	KW_TABLE() {
	    return this.getToken(InceptorOracleParser.KW_TABLE, 0);
	};

	tablePartitionPrefix() {
	    return this.getTypedRuleContext(TablePartitionPrefixContext,0);
	};

	KW_COLUMNS() {
	    return this.getToken(InceptorOracleParser.KW_COLUMNS, 0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	columnNameList() {
	    return this.getTypedRuleContext(ColumnNameListContext,0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	KW_IMMEDIATE() {
	    return this.getToken(InceptorOracleParser.KW_IMMEDIATE, 0);
	};

	KW_PURGE() {
	    return this.getToken(InceptorOracleParser.KW_PURGE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterTruncateTableStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitTruncateTableStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitTruncateTableStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TablePartitionPrefixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_tablePartitionPrefix;
    }

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	partitionSpec() {
	    return this.getTypedRuleContext(PartitionSpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterTablePartitionPrefix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitTablePartitionPrefix(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitTablePartitionPrefix(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CtasTargetStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_ctasTargetStatement;
    }

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	queryStatementExpression() {
	    return this.getTypedRuleContext(QueryStatementExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterCtasTargetStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitCtasTargetStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitCtasTargetStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableRowNullFormatContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_tableRowNullFormat;
        this.nullIdnt = null; // Token
    }

	KW_NULL() {
	    return this.getToken(InceptorOracleParser.KW_NULL, 0);
	};

	KW_DEFINED() {
	    return this.getToken(InceptorOracleParser.KW_DEFINED, 0);
	};

	KW_AS() {
	    return this.getToken(InceptorOracleParser.KW_AS, 0);
	};

	StringLiteral() {
	    return this.getToken(InceptorOracleParser.StringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterTableRowNullFormat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitTableRowNullFormat(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitTableRowNullFormat(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RowFormatSerdeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_rowFormatSerde;
        this.name = null; // Token
        this.serdeprops = null; // TablePropertiesContext
    }

	KW_ROW() {
	    return this.getToken(InceptorOracleParser.KW_ROW, 0);
	};

	KW_FORMAT() {
	    return this.getToken(InceptorOracleParser.KW_FORMAT, 0);
	};

	KW_SERDE() {
	    return this.getToken(InceptorOracleParser.KW_SERDE, 0);
	};

	StringLiteral() {
	    return this.getToken(InceptorOracleParser.StringLiteral, 0);
	};

	KW_WITH() {
	    return this.getToken(InceptorOracleParser.KW_WITH, 0);
	};

	KW_SERDEPROPERTIES() {
	    return this.getToken(InceptorOracleParser.KW_SERDEPROPERTIES, 0);
	};

	tableProperties() {
	    return this.getTypedRuleContext(TablePropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterRowFormatSerde(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitRowFormatSerde(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitRowFormatSerde(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RowFormatDelimitedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_rowFormatDelimited;
    }

	KW_ROW() {
	    return this.getToken(InceptorOracleParser.KW_ROW, 0);
	};

	KW_FORMAT() {
	    return this.getToken(InceptorOracleParser.KW_FORMAT, 0);
	};

	KW_DELIMITED() {
	    return this.getToken(InceptorOracleParser.KW_DELIMITED, 0);
	};

	tableRowFormatFieldIdentifier() {
	    return this.getTypedRuleContext(TableRowFormatFieldIdentifierContext,0);
	};

	tableRowFormatCollItemsIdentifier() {
	    return this.getTypedRuleContext(TableRowFormatCollItemsIdentifierContext,0);
	};

	tableRowFormatMapKeysIdentifier() {
	    return this.getTypedRuleContext(TableRowFormatMapKeysIdentifierContext,0);
	};

	tableRowFormatLinesIdentifier() {
	    return this.getTypedRuleContext(TableRowFormatLinesIdentifierContext,0);
	};

	tableRowNullFormat() {
	    return this.getTypedRuleContext(TableRowNullFormatContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterRowFormatDelimited(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitRowFormatDelimited(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitRowFormatDelimited(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableRowFormatContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_tableRowFormat;
    }

	rowFormatDelimited() {
	    return this.getTypedRuleContext(RowFormatDelimitedContext,0);
	};

	rowFormatSerde() {
	    return this.getTypedRuleContext(RowFormatSerdeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterTableRowFormat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitTableRowFormat(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitTableRowFormat(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableCommentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_tableComment;
        this.comment = null; // Token
    }

	KW_COMMENT() {
	    return this.getToken(InceptorOracleParser.KW_COMMENT, 0);
	};

	StringLiteral() {
	    return this.getToken(InceptorOracleParser.StringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterTableComment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitTableComment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitTableComment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TablePartitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_tablePartition;
    }

	KW_PARTITIONED() {
	    return this.getToken(InceptorOracleParser.KW_PARTITIONED, 0);
	};

	KW_BY() {
	    return this.getToken(InceptorOracleParser.KW_BY, 0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	columnNameTypeList() {
	    return this.getTypedRuleContext(ColumnNameTypeListContext,0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	tableRangePartition() {
	    return this.getTypedRuleContext(TableRangePartitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterTablePartition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitTablePartition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitTablePartition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableRouteContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_tableRoute;
    }

	KW_ROUTED() {
	    return this.getToken(InceptorOracleParser.KW_ROUTED, 0);
	};

	KW_BY() {
	    return this.getToken(InceptorOracleParser.KW_BY, 0);
	};

	tableRouteSpec = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TableRouteSpecContext);
	    } else {
	        return this.getTypedRuleContext(TableRouteSpecContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterTableRoute(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitTableRoute(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitTableRoute(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableRouteSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_tableRouteSpec;
    }

	tableRangeRoute() {
	    return this.getTypedRuleContext(TableRangeRouteContext,0);
	};

	tableHashRoute() {
	    return this.getTypedRuleContext(TableHashRouteContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterTableRouteSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitTableRouteSpec(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitTableRouteSpec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableRangeRouteContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_tableRangeRoute;
        this.rangeRouteCol = null; // ColumnNameContext
    }

	KW_RANGE() {
	    return this.getToken(InceptorOracleParser.KW_RANGE, 0);
	};

	LPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.LPAREN);
	    } else {
	        return this.getToken(InceptorOracleParser.LPAREN, i);
	    }
	};


	RPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.RPAREN);
	    } else {
	        return this.getToken(InceptorOracleParser.RPAREN, i);
	    }
	};


	rangeRouteValues() {
	    return this.getTypedRuleContext(RangeRouteValuesContext,0);
	};

	columnName() {
	    return this.getTypedRuleContext(ColumnNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterTableRangeRoute(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitTableRangeRoute(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitTableRangeRoute(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RangeRouteValuesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_rangeRouteValues;
    }

	constant = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConstantContext);
	    } else {
	        return this.getTypedRuleContext(ConstantContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterRangeRouteValues(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitRangeRouteValues(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitRangeRouteValues(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableHashRouteContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_tableHashRoute;
        this.hashRouteCol = null; // ColumnNameContext
        this.num = null; // Token
    }

	KW_HASH() {
	    return this.getToken(InceptorOracleParser.KW_HASH, 0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	KW_BUCKET() {
	    return this.getToken(InceptorOracleParser.KW_BUCKET, 0);
	};

	columnName() {
	    return this.getTypedRuleContext(ColumnNameContext,0);
	};

	Number() {
	    return this.getToken(InceptorOracleParser.Number, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterTableHashRoute(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitTableHashRoute(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitTableHashRoute(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableBucketsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_tableBuckets;
        this.bucketCols = null; // ColumnNameListContext
        this.sortCols = null; // ColumnNameOrderListContext
        this.num = null; // Token
    }

	KW_CLUSTERED() {
	    return this.getToken(InceptorOracleParser.KW_CLUSTERED, 0);
	};

	KW_BY = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.KW_BY);
	    } else {
	        return this.getToken(InceptorOracleParser.KW_BY, i);
	    }
	};


	LPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.LPAREN);
	    } else {
	        return this.getToken(InceptorOracleParser.LPAREN, i);
	    }
	};


	RPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.RPAREN);
	    } else {
	        return this.getToken(InceptorOracleParser.RPAREN, i);
	    }
	};


	KW_INTO() {
	    return this.getToken(InceptorOracleParser.KW_INTO, 0);
	};

	KW_BUCKETS() {
	    return this.getToken(InceptorOracleParser.KW_BUCKETS, 0);
	};

	columnNameList() {
	    return this.getTypedRuleContext(ColumnNameListContext,0);
	};

	Number() {
	    return this.getToken(InceptorOracleParser.Number, 0);
	};

	KW_SORTED() {
	    return this.getToken(InceptorOracleParser.KW_SORTED, 0);
	};

	columnNameOrderList() {
	    return this.getTypedRuleContext(ColumnNameOrderListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterTableBuckets(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitTableBuckets(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitTableBuckets(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableSkewedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_tableSkewed;
        this.skewedCols = null; // ColumnNameListContext
        this.skewedValues = null; // SkewedValueElementContext
    }

	KW_SKEWED() {
	    return this.getToken(InceptorOracleParser.KW_SKEWED, 0);
	};

	KW_BY() {
	    return this.getToken(InceptorOracleParser.KW_BY, 0);
	};

	LPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.LPAREN);
	    } else {
	        return this.getToken(InceptorOracleParser.LPAREN, i);
	    }
	};


	RPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.RPAREN);
	    } else {
	        return this.getToken(InceptorOracleParser.RPAREN, i);
	    }
	};


	KW_ON() {
	    return this.getToken(InceptorOracleParser.KW_ON, 0);
	};

	columnNameList() {
	    return this.getTypedRuleContext(ColumnNameListContext,0);
	};

	skewedValueElement() {
	    return this.getTypedRuleContext(SkewedValueElementContext,0);
	};

	storedAsDirs() {
	    return this.getTypedRuleContext(StoredAsDirsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterTableSkewed(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitTableSkewed(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitTableSkewed(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SkewedValueElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_skewedValueElement;
    }

	skewedColumnValues() {
	    return this.getTypedRuleContext(SkewedColumnValuesContext,0);
	};

	skewedColumnValuePairList() {
	    return this.getTypedRuleContext(SkewedColumnValuePairListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterSkewedValueElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitSkewedValueElement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitSkewedValueElement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SkewedColumnValuePairListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_skewedColumnValuePairList;
    }

	skewedColumnValuePair = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SkewedColumnValuePairContext);
	    } else {
	        return this.getTypedRuleContext(SkewedColumnValuePairContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterSkewedColumnValuePairList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitSkewedColumnValuePairList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitSkewedColumnValuePairList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SkewedColumnValuePairContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_skewedColumnValuePair;
        this.colValues = null; // SkewedColumnValuesContext
    }

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	skewedColumnValues() {
	    return this.getTypedRuleContext(SkewedColumnValuesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterSkewedColumnValuePair(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitSkewedColumnValuePair(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitSkewedColumnValuePair(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SkewedColumnValuesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_skewedColumnValues;
    }

	skewedColumnValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SkewedColumnValueContext);
	    } else {
	        return this.getTypedRuleContext(SkewedColumnValueContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterSkewedColumnValues(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitSkewedColumnValues(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitSkewedColumnValues(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SkewedColumnValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_skewedColumnValue;
    }

	constant() {
	    return this.getTypedRuleContext(ConstantContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterSkewedColumnValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitSkewedColumnValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitSkewedColumnValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SkewedValueLocationElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_skewedValueLocationElement;
    }

	skewedColumnValue() {
	    return this.getTypedRuleContext(SkewedColumnValueContext,0);
	};

	skewedColumnValuePair() {
	    return this.getTypedRuleContext(SkewedColumnValuePairContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterSkewedValueLocationElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitSkewedValueLocationElement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitSkewedValueLocationElement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TablePropertiesPrefixedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_tablePropertiesPrefixed;
    }

	KW_TBLPROPERTIES() {
	    return this.getToken(InceptorOracleParser.KW_TBLPROPERTIES, 0);
	};

	tableProperties() {
	    return this.getTypedRuleContext(TablePropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterTablePropertiesPrefixed(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitTablePropertiesPrefixed(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitTablePropertiesPrefixed(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ErroLogTableSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_erroLogTableSpec;
        this.isoverwrite = null; // Token
    }

	KW_LOG() {
	    return this.getToken(InceptorOracleParser.KW_LOG, 0);
	};

	KW_ERRORS() {
	    return this.getToken(InceptorOracleParser.KW_ERRORS, 0);
	};

	KW_INTO() {
	    return this.getToken(InceptorOracleParser.KW_INTO, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	errorRejectSpec() {
	    return this.getTypedRuleContext(ErrorRejectSpecContext,0);
	};

	KW_OVERWRITE() {
	    return this.getToken(InceptorOracleParser.KW_OVERWRITE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterErroLogTableSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitErroLogTableSpec(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitErroLogTableSpec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ErrorRejectSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_errorRejectSpec;
        this.ways = null; // Token
    }

	KW_SEGMENT() {
	    return this.getToken(InceptorOracleParser.KW_SEGMENT, 0);
	};

	KW_REJECT() {
	    return this.getToken(InceptorOracleParser.KW_REJECT, 0);
	};

	KW_LIMIT() {
	    return this.getToken(InceptorOracleParser.KW_LIMIT, 0);
	};

	Number() {
	    return this.getToken(InceptorOracleParser.Number, 0);
	};

	KW_ROWS() {
	    return this.getToken(InceptorOracleParser.KW_ROWS, 0);
	};

	KW_PERCENT() {
	    return this.getToken(InceptorOracleParser.KW_PERCENT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterErrorRejectSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitErrorRejectSpec(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitErrorRejectSpec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TablePropertiesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_tableProperties;
    }

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	tablePropertiesList() {
	    return this.getTypedRuleContext(TablePropertiesListContext,0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterTableProperties(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitTableProperties(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitTableProperties(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TablePropertiesListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_tablePropertiesList;
    }

	keyValueProperty = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(KeyValuePropertyContext);
	    } else {
	        return this.getTypedRuleContext(KeyValuePropertyContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	keyProperty = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(KeyPropertyContext);
	    } else {
	        return this.getTypedRuleContext(KeyPropertyContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterTablePropertiesList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitTablePropertiesList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitTablePropertiesList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableRowFormatFieldIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_tableRowFormatFieldIdentifier;
        this.fldIdnt = null; // Token
        this.fldEscape = null; // Token
    }

	KW_FIELDS() {
	    return this.getToken(InceptorOracleParser.KW_FIELDS, 0);
	};

	KW_TERMINATED() {
	    return this.getToken(InceptorOracleParser.KW_TERMINATED, 0);
	};

	KW_BY = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.KW_BY);
	    } else {
	        return this.getToken(InceptorOracleParser.KW_BY, i);
	    }
	};


	StringLiteral = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.StringLiteral);
	    } else {
	        return this.getToken(InceptorOracleParser.StringLiteral, i);
	    }
	};


	KW_ESCAPED() {
	    return this.getToken(InceptorOracleParser.KW_ESCAPED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterTableRowFormatFieldIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitTableRowFormatFieldIdentifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitTableRowFormatFieldIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableRowFormatCollItemsIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_tableRowFormatCollItemsIdentifier;
        this.collIdnt = null; // Token
    }

	KW_COLLECTION() {
	    return this.getToken(InceptorOracleParser.KW_COLLECTION, 0);
	};

	KW_ITEMS() {
	    return this.getToken(InceptorOracleParser.KW_ITEMS, 0);
	};

	KW_TERMINATED() {
	    return this.getToken(InceptorOracleParser.KW_TERMINATED, 0);
	};

	KW_BY() {
	    return this.getToken(InceptorOracleParser.KW_BY, 0);
	};

	StringLiteral() {
	    return this.getToken(InceptorOracleParser.StringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterTableRowFormatCollItemsIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitTableRowFormatCollItemsIdentifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitTableRowFormatCollItemsIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableRowFormatMapKeysIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_tableRowFormatMapKeysIdentifier;
        this.mapKeysIdnt = null; // Token
    }

	KW_MAP() {
	    return this.getToken(InceptorOracleParser.KW_MAP, 0);
	};

	KW_KEYS() {
	    return this.getToken(InceptorOracleParser.KW_KEYS, 0);
	};

	KW_TERMINATED() {
	    return this.getToken(InceptorOracleParser.KW_TERMINATED, 0);
	};

	KW_BY() {
	    return this.getToken(InceptorOracleParser.KW_BY, 0);
	};

	StringLiteral() {
	    return this.getToken(InceptorOracleParser.StringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterTableRowFormatMapKeysIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitTableRowFormatMapKeysIdentifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitTableRowFormatMapKeysIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableRowFormatLinesIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_tableRowFormatLinesIdentifier;
        this.linesIdnt = null; // Token
    }

	KW_LINES() {
	    return this.getToken(InceptorOracleParser.KW_LINES, 0);
	};

	KW_TERMINATED() {
	    return this.getToken(InceptorOracleParser.KW_TERMINATED, 0);
	};

	KW_BY() {
	    return this.getToken(InceptorOracleParser.KW_BY, 0);
	};

	StringLiteral() {
	    return this.getToken(InceptorOracleParser.StringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterTableRowFormatLinesIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitTableRowFormatLinesIdentifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitTableRowFormatLinesIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EsPropsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_esProps;
        this.shard = null; // Token
        this.replica = null; // Token
        this.p = null; // Token
    }

	KW_WITH() {
	    return this.getToken(InceptorOracleParser.KW_WITH, 0);
	};

	KW_SHARD() {
	    return this.getToken(InceptorOracleParser.KW_SHARD, 0);
	};

	KW_NUMBER() {
	    return this.getToken(InceptorOracleParser.KW_NUMBER, 0);
	};

	KW_REPLICATION() {
	    return this.getToken(InceptorOracleParser.KW_REPLICATION, 0);
	};

	Number = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.Number);
	    } else {
	        return this.getToken(InceptorOracleParser.Number, i);
	    }
	};


	KW_ALL() {
	    return this.getToken(InceptorOracleParser.KW_ALL, 0);
	};

	KW_DISABLE() {
	    return this.getToken(InceptorOracleParser.KW_DISABLE, 0);
	};

	KW_ENABLE() {
	    return this.getToken(InceptorOracleParser.KW_ENABLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterEsProps(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitEsProps(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitEsProps(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class HoloPropsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_holoProps;
        this.tablet = null; // Token
        this.capacity = null; // Token
        this.replica = null; // Token
    }

	KW_WITH() {
	    return this.getToken(InceptorOracleParser.KW_WITH, 0);
	};

	KW_TABLET() {
	    return this.getToken(InceptorOracleParser.KW_TABLET, 0);
	};

	KW_NUMBER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.KW_NUMBER);
	    } else {
	        return this.getToken(InceptorOracleParser.KW_NUMBER, i);
	    }
	};


	KW_CAPACITY() {
	    return this.getToken(InceptorOracleParser.KW_CAPACITY, 0);
	};

	KW_REPLICATION() {
	    return this.getToken(InceptorOracleParser.KW_REPLICATION, 0);
	};

	Number = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.Number);
	    } else {
	        return this.getToken(InceptorOracleParser.Number, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterHoloProps(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitHoloProps(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitHoloProps(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class HoloTableSizeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_holoTableSize;
        this.value = null; // IdentifierContext
        this.replica = null; // Token
    }

	KW_WITH() {
	    return this.getToken(InceptorOracleParser.KW_WITH, 0);
	};

	KW_TABLESIZE() {
	    return this.getToken(InceptorOracleParser.KW_TABLESIZE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	KW_REPLICATION() {
	    return this.getToken(InceptorOracleParser.KW_REPLICATION, 0);
	};

	Number() {
	    return this.getToken(InceptorOracleParser.Number, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterHoloTableSize(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitHoloTableSize(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitHoloTableSize(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableFileFormatContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_tableFileFormat;
        this.inFmt = null; // Token
        this.outFmt = null; // Token
        this.inDriver = null; // Token
        this.outDriver = null; // Token
        this.storageHandler = null; // Token
        this.serdeprops = null; // TablePropertiesContext
        this.genericSpec = null; // IdentifierContext
    }

	KW_STORED() {
	    return this.getToken(InceptorOracleParser.KW_STORED, 0);
	};

	KW_AS() {
	    return this.getToken(InceptorOracleParser.KW_AS, 0);
	};

	KW_SEQUENCEFILE() {
	    return this.getToken(InceptorOracleParser.KW_SEQUENCEFILE, 0);
	};

	KW_TEXTFILE() {
	    return this.getToken(InceptorOracleParser.KW_TEXTFILE, 0);
	};

	KW_CSVFILE() {
	    return this.getToken(InceptorOracleParser.KW_CSVFILE, 0);
	};

	KW_FWCFILE() {
	    return this.getToken(InceptorOracleParser.KW_FWCFILE, 0);
	};

	KW_RCFILE() {
	    return this.getToken(InceptorOracleParser.KW_RCFILE, 0);
	};

	KW_ORCFILE() {
	    return this.getToken(InceptorOracleParser.KW_ORCFILE, 0);
	};

	stargateIdentifier() {
	    return this.getTypedRuleContext(StargateIdentifierContext,0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	storeArgs() {
	    return this.getTypedRuleContext(StoreArgsContext,0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	KW_HOLODESK() {
	    return this.getToken(InceptorOracleParser.KW_HOLODESK, 0);
	};

	KW_STELLARDB() {
	    return this.getToken(InceptorOracleParser.KW_STELLARDB, 0);
	};

	KW_ORCTRANSACTIONFILE() {
	    return this.getToken(InceptorOracleParser.KW_ORCTRANSACTIONFILE, 0);
	};

	KW_PARQUET() {
	    return this.getToken(InceptorOracleParser.KW_PARQUET, 0);
	};

	KW_HYPERDRIVE() {
	    return this.getToken(InceptorOracleParser.KW_HYPERDRIVE, 0);
	};

	KW_ESDRIVE() {
	    return this.getToken(InceptorOracleParser.KW_ESDRIVE, 0);
	};

	KW_INPUTFORMAT() {
	    return this.getToken(InceptorOracleParser.KW_INPUTFORMAT, 0);
	};

	KW_OUTPUTFORMAT() {
	    return this.getToken(InceptorOracleParser.KW_OUTPUTFORMAT, 0);
	};

	StringLiteral = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.StringLiteral);
	    } else {
	        return this.getToken(InceptorOracleParser.StringLiteral, i);
	    }
	};


	KW_INPUTDRIVER() {
	    return this.getToken(InceptorOracleParser.KW_INPUTDRIVER, 0);
	};

	KW_OUTPUTDRIVER() {
	    return this.getToken(InceptorOracleParser.KW_OUTPUTDRIVER, 0);
	};

	KW_BY() {
	    return this.getToken(InceptorOracleParser.KW_BY, 0);
	};

	KW_WITH() {
	    return this.getToken(InceptorOracleParser.KW_WITH, 0);
	};

	KW_SERDEPROPERTIES() {
	    return this.getToken(InceptorOracleParser.KW_SERDEPROPERTIES, 0);
	};

	tableProperties() {
	    return this.getTypedRuleContext(TablePropertiesContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterTableFileFormat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitTableFileFormat(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitTableFileFormat(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StargateIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_stargateIdentifier;
    }

	KW_STORED() {
	    return this.getToken(InceptorOracleParser.KW_STORED, 0);
	};

	KW_AS() {
	    return this.getToken(InceptorOracleParser.KW_AS, 0);
	};

	KW_STARGATE() {
	    return this.getToken(InceptorOracleParser.KW_STARGATE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterStargateIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitStargateIdentifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitStargateIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StoreArgsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_storeArgs;
    }

	storeArgName() {
	    return this.getTypedRuleContext(StoreArgNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterStoreArgs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitStoreArgs(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitStoreArgs(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StoreArgNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_storeArgName;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterStoreArgName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitStoreArgName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitStoreArgName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableLocationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_tableLocation;
        this.locn = null; // Token
    }

	KW_LOCATION() {
	    return this.getToken(InceptorOracleParser.KW_LOCATION, 0);
	};

	StringLiteral() {
	    return this.getToken(InceptorOracleParser.StringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterTableLocation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitTableLocation(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitTableLocation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RestrictOrCascadeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_restrictOrCascade;
    }

	KW_RESTRICT() {
	    return this.getToken(InceptorOracleParser.KW_RESTRICT, 0);
	};

	KW_CASCADE() {
	    return this.getToken(InceptorOracleParser.KW_CASCADE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterRestrictOrCascade(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitRestrictOrCascade(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitRestrictOrCascade(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DatabaseCommentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_databaseComment;
        this.comment = null; // Token
    }

	KW_COMMENT() {
	    return this.getToken(InceptorOracleParser.KW_COMMENT, 0);
	};

	StringLiteral() {
	    return this.getToken(InceptorOracleParser.StringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDatabaseComment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDatabaseComment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDatabaseComment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DbLocationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_dbLocation;
        this.locn = null; // Token
    }

	KW_LOCATION() {
	    return this.getToken(InceptorOracleParser.KW_LOCATION, 0);
	};

	StringLiteral() {
	    return this.getToken(InceptorOracleParser.StringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDbLocation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDbLocation(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDbLocation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DbPropertiesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_dbProperties;
    }

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	dbPropertiesList() {
	    return this.getTypedRuleContext(DbPropertiesListContext,0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDbProperties(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDbProperties(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDbProperties(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DbPropertiesListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_dbPropertiesList;
    }

	keyValueProperty = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(KeyValuePropertyContext);
	    } else {
	        return this.getTypedRuleContext(KeyValuePropertyContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDbPropertiesList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDbPropertiesList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDbPropertiesList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IfExistsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_ifExists;
    }

	KW_IF() {
	    return this.getToken(InceptorOracleParser.KW_IF, 0);
	};

	KW_EXISTS() {
	    return this.getToken(InceptorOracleParser.KW_EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterIfExists(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitIfExists(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitIfExists(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IfNotExistsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_ifNotExists;
    }

	KW_IF() {
	    return this.getToken(InceptorOracleParser.KW_IF, 0);
	};

	KW_NOT() {
	    return this.getToken(InceptorOracleParser.KW_NOT, 0);
	};

	KW_EXISTS() {
	    return this.getToken(InceptorOracleParser.KW_EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterIfNotExists(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitIfNotExists(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitIfNotExists(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateSequenceStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_createSequenceStatement;
        this.name = null; // SequenceNameContext
    }

	KW_CREATE() {
	    return this.getToken(InceptorOracleParser.KW_CREATE, 0);
	};

	KW_SEQUENCE() {
	    return this.getToken(InceptorOracleParser.KW_SEQUENCE, 0);
	};

	sequenceName() {
	    return this.getTypedRuleContext(SequenceNameContext,0);
	};

	sequenceOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SequenceOptionContext);
	    } else {
	        return this.getTypedRuleContext(SequenceOptionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterCreateSequenceStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitCreateSequenceStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitCreateSequenceStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropSequenceStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_dropSequenceStatement;
    }

	KW_DROP() {
	    return this.getToken(InceptorOracleParser.KW_DROP, 0);
	};

	KW_SEQUENCE() {
	    return this.getToken(InceptorOracleParser.KW_SEQUENCE, 0);
	};

	sequenceName() {
	    return this.getTypedRuleContext(SequenceNameContext,0);
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDropSequenceStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDropSequenceStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDropSequenceStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DdlBStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_ddlBStatement;
    }

	descStatement() {
	    return this.getTypedRuleContext(DescStatementContext,0);
	};

	showStatement() {
	    return this.getTypedRuleContext(ShowStatementContext,0);
	};

	metastoreCheck() {
	    return this.getTypedRuleContext(MetastoreCheckContext,0);
	};

	dropViewStatement() {
	    return this.getTypedRuleContext(DropViewStatementContext,0);
	};

	dropMaterializedViewStatement() {
	    return this.getTypedRuleContext(DropMaterializedViewStatementContext,0);
	};

	createMacroStatement() {
	    return this.getTypedRuleContext(CreateMacroStatementContext,0);
	};

	createIndexStatement() {
	    return this.getTypedRuleContext(CreateIndexStatementContext,0);
	};

	createHyperbaseIndexStatement() {
	    return this.getTypedRuleContext(CreateHyperbaseIndexStatementContext,0);
	};

	rebuildHolodeskGlobalIndexStatement() {
	    return this.getTypedRuleContext(RebuildHolodeskGlobalIndexStatementContext,0);
	};

	dropIndexStatement() {
	    return this.getTypedRuleContext(DropIndexStatementContext,0);
	};

	dropFunctionStatement() {
	    return this.getTypedRuleContext(DropFunctionStatementContext,0);
	};

	reloadFunctionStatement() {
	    return this.getTypedRuleContext(ReloadFunctionStatementContext,0);
	};

	dropMacroStatement() {
	    return this.getTypedRuleContext(DropMacroStatementContext,0);
	};

	analyzeStatement() {
	    return this.getTypedRuleContext(AnalyzeStatementContext,0);
	};

	lockStatement() {
	    return this.getTypedRuleContext(LockStatementContext,0);
	};

	unlockStatement() {
	    return this.getTypedRuleContext(UnlockStatementContext,0);
	};

	lockDatabase() {
	    return this.getTypedRuleContext(LockDatabaseContext,0);
	};

	unlockDatabase() {
	    return this.getTypedRuleContext(UnlockDatabaseContext,0);
	};

	createRoleStatement() {
	    return this.getTypedRuleContext(CreateRoleStatementContext,0);
	};

	dropRoleStatement() {
	    return this.getTypedRuleContext(DropRoleStatementContext,0);
	};

	grantPrivileges() {
	    return this.getTypedRuleContext(GrantPrivilegesContext,0);
	};

	revokePrivileges() {
	    return this.getTypedRuleContext(RevokePrivilegesContext,0);
	};

	showQuota() {
	    return this.getTypedRuleContext(ShowQuotaContext,0);
	};

	showGrants() {
	    return this.getTypedRuleContext(ShowGrantsContext,0);
	};

	showFacl() {
	    return this.getTypedRuleContext(ShowFaclContext,0);
	};

	showRoleGrants() {
	    return this.getTypedRuleContext(ShowRoleGrantsContext,0);
	};

	showRolePrincipals() {
	    return this.getTypedRuleContext(ShowRolePrincipalsContext,0);
	};

	showRoles() {
	    return this.getTypedRuleContext(ShowRolesContext,0);
	};

	showBlacklist() {
	    return this.getTypedRuleContext(ShowBlacklistContext,0);
	};

	showSchedulerMode() {
	    return this.getTypedRuleContext(ShowSchedulerModeContext,0);
	};

	grantQuota() {
	    return this.getTypedRuleContext(GrantQuotaContext,0);
	};

	revokeQuota() {
	    return this.getTypedRuleContext(RevokeQuotaContext,0);
	};

	grantFacl() {
	    return this.getTypedRuleContext(GrantFaclContext,0);
	};

	revokeFacl() {
	    return this.getTypedRuleContext(RevokeFaclContext,0);
	};

	grantRole() {
	    return this.getTypedRuleContext(GrantRoleContext,0);
	};

	revokeRole() {
	    return this.getTypedRuleContext(RevokeRoleContext,0);
	};

	setRole() {
	    return this.getTypedRuleContext(SetRoleContext,0);
	};

	showCurrentRole() {
	    return this.getTypedRuleContext(ShowCurrentRoleContext,0);
	};

	syncIndex() {
	    return this.getTypedRuleContext(SyncIndexContext,0);
	};

	syncRule() {
	    return this.getTypedRuleContext(SyncRuleContext,0);
	};

	syncPolicy() {
	    return this.getTypedRuleContext(SyncPolicyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDdlBStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDdlBStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDdlBStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DescStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_descStatement;
        this.descOptions = null; // Token
        this.indexName = null; // IdentifierContext
        this.appName = null; // IdentifierContext
        this.jobName = null; // IdentifierContext
        this.ruleName = null; // IdentifierContext
        this.policyName = null; // IdentifierContext
        this.rulefunction = null; // IdentifierContext
        this.cachedMetric = null; // IdentifierContext
        this.parttype = null; // DescPartTypeExprContext
        this.name = null; // DescFuncNamesContext
        this.plname = null; // PlFuncProcNameContext
        this.dbName = null; // IdentifierContext
    }

	KW_INDEX() {
	    return this.getToken(InceptorOracleParser.KW_INDEX, 0);
	};

	KW_ON() {
	    return this.getToken(InceptorOracleParser.KW_ON, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	KW_DESCRIBE() {
	    return this.getToken(InceptorOracleParser.KW_DESCRIBE, 0);
	};

	KW_DESC() {
	    return this.getToken(InceptorOracleParser.KW_DESC, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	KW_FORMATTED() {
	    return this.getToken(InceptorOracleParser.KW_FORMATTED, 0);
	};

	KW_APPLICATION() {
	    return this.getToken(InceptorOracleParser.KW_APPLICATION, 0);
	};

	KW_APP() {
	    return this.getToken(InceptorOracleParser.KW_APP, 0);
	};

	KW_STREAMJOB() {
	    return this.getToken(InceptorOracleParser.KW_STREAMJOB, 0);
	};

	KW_RULE() {
	    return this.getToken(InceptorOracleParser.KW_RULE, 0);
	};

	KW_POLICY() {
	    return this.getToken(InceptorOracleParser.KW_POLICY, 0);
	};

	KW_RULE_FUNCTION() {
	    return this.getToken(InceptorOracleParser.KW_RULE_FUNCTION, 0);
	};

	KW_CACHEDMETRIC() {
	    return this.getToken(InceptorOracleParser.KW_CACHEDMETRIC, 0);
	};

	descPartTypeExpr() {
	    return this.getTypedRuleContext(DescPartTypeExprContext,0);
	};

	KW_EXTENDED() {
	    return this.getToken(InceptorOracleParser.KW_EXTENDED, 0);
	};

	KW_PRETTY() {
	    return this.getToken(InceptorOracleParser.KW_PRETTY, 0);
	};

	KW_FUNCTION() {
	    return this.getToken(InceptorOracleParser.KW_FUNCTION, 0);
	};

	descFuncNames() {
	    return this.getTypedRuleContext(DescFuncNamesContext,0);
	};

	KW_PLSQL() {
	    return this.getToken(InceptorOracleParser.KW_PLSQL, 0);
	};

	plFuncProcName() {
	    return this.getTypedRuleContext(PlFuncProcNameContext,0);
	};

	KW_PACKAGE() {
	    return this.getToken(InceptorOracleParser.KW_PACKAGE, 0);
	};

	KW_DATABASE() {
	    return this.getToken(InceptorOracleParser.KW_DATABASE, 0);
	};

	KW_LINK() {
	    return this.getToken(InceptorOracleParser.KW_LINK, 0);
	};

	dblink() {
	    return this.getTypedRuleContext(DblinkContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDescStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDescStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDescStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ShowStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_showStatement;
    }

	KW_SHOW() {
	    return this.getToken(InceptorOracleParser.KW_SHOW, 0);
	};

	showStatementPartA() {
	    return this.getTypedRuleContext(ShowStatementPartAContext,0);
	};

	showStatementPartB() {
	    return this.getTypedRuleContext(ShowStatementPartBContext,0);
	};

	showStatementPartC() {
	    return this.getTypedRuleContext(ShowStatementPartCContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterShowStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitShowStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitShowStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ShowStatementPartAContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_showStatementPartA;
        this.db_name = null; // IdentifierContext
        this.tabname = null; // TableNameContext
    }

	KW_DATABASES() {
	    return this.getToken(InceptorOracleParser.KW_DATABASES, 0);
	};

	KW_SCHEMAS() {
	    return this.getToken(InceptorOracleParser.KW_SCHEMAS, 0);
	};

	KW_LIKE() {
	    return this.getToken(InceptorOracleParser.KW_LIKE, 0);
	};

	showStmtIdentifier() {
	    return this.getTypedRuleContext(ShowStmtIdentifierContext,0);
	};

	KW_TABLES() {
	    return this.getToken(InceptorOracleParser.KW_TABLES, 0);
	};

	KW_FROM = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.KW_FROM);
	    } else {
	        return this.getToken(InceptorOracleParser.KW_FROM, i);
	    }
	};


	KW_IN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.KW_IN);
	    } else {
	        return this.getToken(InceptorOracleParser.KW_IN, i);
	    }
	};


	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	KW_MATERIALIZED() {
	    return this.getToken(InceptorOracleParser.KW_MATERIALIZED, 0);
	};

	KW_VIEWS() {
	    return this.getToken(InceptorOracleParser.KW_VIEWS, 0);
	};

	KW_SEQUENCES() {
	    return this.getToken(InceptorOracleParser.KW_SEQUENCES, 0);
	};

	KW_STREAMS() {
	    return this.getToken(InceptorOracleParser.KW_STREAMS, 0);
	};

	KW_METRICS() {
	    return this.getToken(InceptorOracleParser.KW_METRICS, 0);
	};

	KW_APPLICATIONS() {
	    return this.getToken(InceptorOracleParser.KW_APPLICATIONS, 0);
	};

	KW_APPS() {
	    return this.getToken(InceptorOracleParser.KW_APPS, 0);
	};

	KW_CURRENT() {
	    return this.getToken(InceptorOracleParser.KW_CURRENT, 0);
	};

	KW_APPLICATION() {
	    return this.getToken(InceptorOracleParser.KW_APPLICATION, 0);
	};

	KW_APP() {
	    return this.getToken(InceptorOracleParser.KW_APP, 0);
	};

	KW_POLICY() {
	    return this.getToken(InceptorOracleParser.KW_POLICY, 0);
	};

	KW_RULEBASE() {
	    return this.getToken(InceptorOracleParser.KW_RULEBASE, 0);
	};

	KW_STREAMJOBS() {
	    return this.getToken(InceptorOracleParser.KW_STREAMJOBS, 0);
	};

	KW_RULES() {
	    return this.getToken(InceptorOracleParser.KW_RULES, 0);
	};

	KW_RULEBASES() {
	    return this.getToken(InceptorOracleParser.KW_RULEBASES, 0);
	};

	KW_POLICIES() {
	    return this.getToken(InceptorOracleParser.KW_POLICIES, 0);
	};

	KW_POLICYBASES() {
	    return this.getToken(InceptorOracleParser.KW_POLICYBASES, 0);
	};

	KW_RULE_FUNCTIONS() {
	    return this.getToken(InceptorOracleParser.KW_RULE_FUNCTIONS, 0);
	};

	KW_CACHEDMETRICS() {
	    return this.getToken(InceptorOracleParser.KW_CACHEDMETRICS, 0);
	};

	KW_COLUMNS() {
	    return this.getToken(InceptorOracleParser.KW_COLUMNS, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterShowStatementPartA(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitShowStatementPartA(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitShowStatementPartA(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ShowStatementPartBContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_showStatementPartB;
        this.tabName = null; // TableNameContext
        this.db_name = null; // IdentifierContext
    }

	KW_FUNCTIONS() {
	    return this.getToken(InceptorOracleParser.KW_FUNCTIONS, 0);
	};

	showStmtIdentifier() {
	    return this.getTypedRuleContext(ShowStmtIdentifierContext,0);
	};

	KW_PLSQL() {
	    return this.getToken(InceptorOracleParser.KW_PLSQL, 0);
	};

	KW_PACKAGES() {
	    return this.getToken(InceptorOracleParser.KW_PACKAGES, 0);
	};

	KW_PARTITIONS() {
	    return this.getToken(InceptorOracleParser.KW_PARTITIONS, 0);
	};

	tabTypeExpr() {
	    return this.getTypedRuleContext(TabTypeExprContext,0);
	};

	partitionSpec() {
	    return this.getTypedRuleContext(PartitionSpecContext,0);
	};

	KW_CREATE() {
	    return this.getToken(InceptorOracleParser.KW_CREATE, 0);
	};

	KW_TABLE() {
	    return this.getToken(InceptorOracleParser.KW_TABLE, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	KW_EXTENDED() {
	    return this.getToken(InceptorOracleParser.KW_EXTENDED, 0);
	};

	KW_LIKE() {
	    return this.getToken(InceptorOracleParser.KW_LIKE, 0);
	};

	KW_FROM() {
	    return this.getToken(InceptorOracleParser.KW_FROM, 0);
	};

	KW_IN() {
	    return this.getToken(InceptorOracleParser.KW_IN, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterShowStatementPartB(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitShowStatementPartB(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitShowStatementPartB(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ShowStatementPartCContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_showStatementPartC;
        this.tblName = null; // IdentifierContext
        this.prptyName = null; // Token
        this.parttype = null; // PartTypeExprContext
        this.isExtended = null; // Token
        this.dbName = null; // Token
        this.showOptions = null; // Token
        this.db_name = null; // IdentifierContext
    }

	KW_TBLPROPERTIES() {
	    return this.getToken(InceptorOracleParser.KW_TBLPROPERTIES, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	StringLiteral() {
	    return this.getToken(InceptorOracleParser.StringLiteral, 0);
	};

	KW_LOCKS() {
	    return this.getToken(InceptorOracleParser.KW_LOCKS, 0);
	};

	partTypeExpr() {
	    return this.getTypedRuleContext(PartTypeExprContext,0);
	};

	KW_EXTENDED() {
	    return this.getToken(InceptorOracleParser.KW_EXTENDED, 0);
	};

	KW_DATABASE() {
	    return this.getToken(InceptorOracleParser.KW_DATABASE, 0);
	};

	Identifier() {
	    return this.getToken(InceptorOracleParser.Identifier, 0);
	};

	KW_ON() {
	    return this.getToken(InceptorOracleParser.KW_ON, 0);
	};

	showStmtIdentifier() {
	    return this.getTypedRuleContext(ShowStmtIdentifierContext,0);
	};

	KW_INDEX() {
	    return this.getToken(InceptorOracleParser.KW_INDEX, 0);
	};

	KW_INDEXES() {
	    return this.getToken(InceptorOracleParser.KW_INDEXES, 0);
	};

	KW_FORMATTED() {
	    return this.getToken(InceptorOracleParser.KW_FORMATTED, 0);
	};

	KW_FROM() {
	    return this.getToken(InceptorOracleParser.KW_FROM, 0);
	};

	KW_IN() {
	    return this.getToken(InceptorOracleParser.KW_IN, 0);
	};

	KW_COMPACTIONS() {
	    return this.getToken(InceptorOracleParser.KW_COMPACTIONS, 0);
	};

	KW_TRANSACTIONS() {
	    return this.getToken(InceptorOracleParser.KW_TRANSACTIONS, 0);
	};

	KW_CONF() {
	    return this.getToken(InceptorOracleParser.KW_CONF, 0);
	};

	KW_LINKS() {
	    return this.getToken(InceptorOracleParser.KW_LINKS, 0);
	};

	KW_COMPACT() {
	    return this.getToken(InceptorOracleParser.KW_COMPACT, 0);
	};

	KW_BLACKLIST() {
	    return this.getToken(InceptorOracleParser.KW_BLACKLIST, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterShowStatementPartC(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitShowStatementPartC(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitShowStatementPartC(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MetastoreCheckContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_metastoreCheck;
        this.repair = null; // Token
        this.table = null; // IdentifierContext
    }

	KW_MSCK() {
	    return this.getToken(InceptorOracleParser.KW_MSCK, 0);
	};

	KW_TABLE() {
	    return this.getToken(InceptorOracleParser.KW_TABLE, 0);
	};

	KW_REPAIR() {
	    return this.getToken(InceptorOracleParser.KW_REPAIR, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	partitionSpec = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PartitionSpecContext);
	    } else {
	        return this.getTypedRuleContext(PartitionSpecContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterMetastoreCheck(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitMetastoreCheck(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitMetastoreCheck(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropViewStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_dropViewStatement;
    }

	KW_DROP() {
	    return this.getToken(InceptorOracleParser.KW_DROP, 0);
	};

	KW_VIEW() {
	    return this.getToken(InceptorOracleParser.KW_VIEW, 0);
	};

	viewName() {
	    return this.getTypedRuleContext(ViewNameContext,0);
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDropViewStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDropViewStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDropViewStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropMaterializedViewStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_dropMaterializedViewStatement;
    }

	KW_DROP() {
	    return this.getToken(InceptorOracleParser.KW_DROP, 0);
	};

	KW_MATERIALIZED() {
	    return this.getToken(InceptorOracleParser.KW_MATERIALIZED, 0);
	};

	KW_VIEW() {
	    return this.getToken(InceptorOracleParser.KW_VIEW, 0);
	};

	viewName() {
	    return this.getTypedRuleContext(ViewNameContext,0);
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDropMaterializedViewStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDropMaterializedViewStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDropMaterializedViewStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateFunctionStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_createFunctionStatement;
        this.rList = null; // ResourceListContext
    }

	functionType() {
	    return this.getTypedRuleContext(FunctionTypeContext,0);
	};

	KW_FUNCTION() {
	    return this.getToken(InceptorOracleParser.KW_FUNCTION, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	KW_AS() {
	    return this.getToken(InceptorOracleParser.KW_AS, 0);
	};

	StringLiteral() {
	    return this.getToken(InceptorOracleParser.StringLiteral, 0);
	};

	ifNotExists() {
	    return this.getTypedRuleContext(IfNotExistsContext,0);
	};

	KW_USING() {
	    return this.getToken(InceptorOracleParser.KW_USING, 0);
	};

	resourceList() {
	    return this.getTypedRuleContext(ResourceListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterCreateFunctionStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitCreateFunctionStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitCreateFunctionStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateMacroStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_createMacroStatement;
    }

	KW_CREATE() {
	    return this.getToken(InceptorOracleParser.KW_CREATE, 0);
	};

	KW_TEMPORARY() {
	    return this.getToken(InceptorOracleParser.KW_TEMPORARY, 0);
	};

	KW_MACRO() {
	    return this.getToken(InceptorOracleParser.KW_MACRO, 0);
	};

	Identifier() {
	    return this.getToken(InceptorOracleParser.Identifier, 0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	columnNameTypeList() {
	    return this.getTypedRuleContext(ColumnNameTypeListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterCreateMacroStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitCreateMacroStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitCreateMacroStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateIndexStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_createIndexStatement;
        this.indexName = null; // IdentifierContext
        this.tab = null; // TableNameContext
        this.indexedCols = null; // ColumnNameListContext
        this.typeName = null; // Token
    }

	KW_CREATE() {
	    return this.getToken(InceptorOracleParser.KW_CREATE, 0);
	};

	KW_INDEX() {
	    return this.getToken(InceptorOracleParser.KW_INDEX, 0);
	};

	KW_ON() {
	    return this.getToken(InceptorOracleParser.KW_ON, 0);
	};

	KW_TABLE() {
	    return this.getToken(InceptorOracleParser.KW_TABLE, 0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	KW_AS() {
	    return this.getToken(InceptorOracleParser.KW_AS, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	columnNameList() {
	    return this.getTypedRuleContext(ColumnNameListContext,0);
	};

	StringLiteral() {
	    return this.getToken(InceptorOracleParser.StringLiteral, 0);
	};

	autoRebuild() {
	    return this.getTypedRuleContext(AutoRebuildContext,0);
	};

	indexPropertiesPrefixed() {
	    return this.getTypedRuleContext(IndexPropertiesPrefixedContext,0);
	};

	indexTblName() {
	    return this.getTypedRuleContext(IndexTblNameContext,0);
	};

	tableRowFormat() {
	    return this.getTypedRuleContext(TableRowFormatContext,0);
	};

	tableFileFormat() {
	    return this.getTypedRuleContext(TableFileFormatContext,0);
	};

	tableLocation() {
	    return this.getTypedRuleContext(TableLocationContext,0);
	};

	tablePropertiesPrefixed() {
	    return this.getTypedRuleContext(TablePropertiesPrefixedContext,0);
	};

	indexComment() {
	    return this.getTypedRuleContext(IndexCommentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterCreateIndexStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitCreateIndexStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitCreateIndexStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropIndexStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_dropIndexStatement;
        this.indexName = null; // IdentifierContext
        this.tab = null; // TableNameContext
    }

	KW_DROP() {
	    return this.getToken(InceptorOracleParser.KW_DROP, 0);
	};

	KW_INDEX() {
	    return this.getToken(InceptorOracleParser.KW_INDEX, 0);
	};

	KW_ON() {
	    return this.getToken(InceptorOracleParser.KW_ON, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	KW_FULLTEXT() {
	    return this.getToken(InceptorOracleParser.KW_FULLTEXT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDropIndexStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDropIndexStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDropIndexStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropFunctionStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_dropFunctionStatement;
    }

	KW_DROP() {
	    return this.getToken(InceptorOracleParser.KW_DROP, 0);
	};

	functionType() {
	    return this.getTypedRuleContext(FunctionTypeContext,0);
	};

	KW_FUNCTION() {
	    return this.getToken(InceptorOracleParser.KW_FUNCTION, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	cleanClassLoader() {
	    return this.getTypedRuleContext(CleanClassLoaderContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDropFunctionStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDropFunctionStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDropFunctionStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReloadFunctionStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_reloadFunctionStatement;
    }

	KW_RELOAD() {
	    return this.getToken(InceptorOracleParser.KW_RELOAD, 0);
	};

	KW_FUNCTION() {
	    return this.getToken(InceptorOracleParser.KW_FUNCTION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterReloadFunctionStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitReloadFunctionStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitReloadFunctionStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropMacroStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_dropMacroStatement;
    }

	KW_DROP() {
	    return this.getToken(InceptorOracleParser.KW_DROP, 0);
	};

	KW_TEMPORARY() {
	    return this.getToken(InceptorOracleParser.KW_TEMPORARY, 0);
	};

	KW_MACRO() {
	    return this.getToken(InceptorOracleParser.KW_MACRO, 0);
	};

	Identifier() {
	    return this.getToken(InceptorOracleParser.Identifier, 0);
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDropMacroStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDropMacroStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDropMacroStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FunctionTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_functionType;
    }

	KW_TEMPORARY() {
	    return this.getToken(InceptorOracleParser.KW_TEMPORARY, 0);
	};

	KW_PERMANENT() {
	    return this.getToken(InceptorOracleParser.KW_PERMANENT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterFunctionType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitFunctionType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitFunctionType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CleanClassLoaderContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_cleanClassLoader;
    }

	KW_WITH() {
	    return this.getToken(InceptorOracleParser.KW_WITH, 0);
	};

	KW_RESOURCE() {
	    return this.getToken(InceptorOracleParser.KW_RESOURCE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterCleanClassLoader(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitCleanClassLoader(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitCleanClassLoader(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AnalyzeStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_analyzeStatement;
        this.parttype = null; // TableOrPartitionContext
        this.noscan = null; // Token
        this.partialscan = null; // Token
        this.statsColumnName = null; // ColumnNameListContext
    }

	KW_ANALYZE() {
	    return this.getToken(InceptorOracleParser.KW_ANALYZE, 0);
	};

	KW_TABLE() {
	    return this.getToken(InceptorOracleParser.KW_TABLE, 0);
	};

	KW_COMPUTE() {
	    return this.getToken(InceptorOracleParser.KW_COMPUTE, 0);
	};

	KW_STATISTICS() {
	    return this.getToken(InceptorOracleParser.KW_STATISTICS, 0);
	};

	tableOrPartition() {
	    return this.getTypedRuleContext(TableOrPartitionContext,0);
	};

	KW_FOR() {
	    return this.getToken(InceptorOracleParser.KW_FOR, 0);
	};

	KW_COLUMNS() {
	    return this.getToken(InceptorOracleParser.KW_COLUMNS, 0);
	};

	KW_NOSCAN() {
	    return this.getToken(InceptorOracleParser.KW_NOSCAN, 0);
	};

	KW_PARTIALSCAN() {
	    return this.getToken(InceptorOracleParser.KW_PARTIALSCAN, 0);
	};

	columnNameList() {
	    return this.getTypedRuleContext(ColumnNameListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterAnalyzeStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitAnalyzeStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitAnalyzeStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LockStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_lockStatement;
    }

	KW_LOCK() {
	    return this.getToken(InceptorOracleParser.KW_LOCK, 0);
	};

	KW_TABLE() {
	    return this.getToken(InceptorOracleParser.KW_TABLE, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	lockMode() {
	    return this.getTypedRuleContext(LockModeContext,0);
	};

	partitionSpec() {
	    return this.getTypedRuleContext(PartitionSpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterLockStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitLockStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitLockStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LockDatabaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_lockDatabase;
        this.dbName = null; // Token
    }

	KW_LOCK() {
	    return this.getToken(InceptorOracleParser.KW_LOCK, 0);
	};

	KW_DATABASE() {
	    return this.getToken(InceptorOracleParser.KW_DATABASE, 0);
	};

	lockMode() {
	    return this.getTypedRuleContext(LockModeContext,0);
	};

	Identifier() {
	    return this.getToken(InceptorOracleParser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterLockDatabase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitLockDatabase(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitLockDatabase(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UnlockStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_unlockStatement;
    }

	KW_UNLOCK() {
	    return this.getToken(InceptorOracleParser.KW_UNLOCK, 0);
	};

	KW_TABLE() {
	    return this.getToken(InceptorOracleParser.KW_TABLE, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	partitionSpec() {
	    return this.getTypedRuleContext(PartitionSpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterUnlockStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitUnlockStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitUnlockStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UnlockDatabaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_unlockDatabase;
        this.dbName = null; // Token
    }

	KW_UNLOCK() {
	    return this.getToken(InceptorOracleParser.KW_UNLOCK, 0);
	};

	KW_DATABASE() {
	    return this.getToken(InceptorOracleParser.KW_DATABASE, 0);
	};

	Identifier() {
	    return this.getToken(InceptorOracleParser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterUnlockDatabase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitUnlockDatabase(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitUnlockDatabase(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateRoleStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_createRoleStatement;
        this.roleName = null; // IdentifierContext
    }

	KW_CREATE() {
	    return this.getToken(InceptorOracleParser.KW_CREATE, 0);
	};

	KW_ROLE() {
	    return this.getToken(InceptorOracleParser.KW_ROLE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterCreateRoleStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitCreateRoleStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitCreateRoleStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropRoleStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_dropRoleStatement;
        this.roleName = null; // IdentifierContext
    }

	KW_DROP() {
	    return this.getToken(InceptorOracleParser.KW_DROP, 0);
	};

	KW_ROLE() {
	    return this.getToken(InceptorOracleParser.KW_ROLE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDropRoleStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDropRoleStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDropRoleStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GrantPrivilegesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_grantPrivileges;
        this.privList = null; // PrivilegeListContext
    }

	KW_GRANT() {
	    return this.getToken(InceptorOracleParser.KW_GRANT, 0);
	};

	KW_TO() {
	    return this.getToken(InceptorOracleParser.KW_TO, 0);
	};

	principalSpecification() {
	    return this.getTypedRuleContext(PrincipalSpecificationContext,0);
	};

	privilegeList() {
	    return this.getTypedRuleContext(PrivilegeListContext,0);
	};

	privilegeObject() {
	    return this.getTypedRuleContext(PrivilegeObjectContext,0);
	};

	withGrantOption() {
	    return this.getTypedRuleContext(WithGrantOptionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterGrantPrivileges(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitGrantPrivileges(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitGrantPrivileges(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RevokePrivilegesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_revokePrivileges;
    }

	KW_REVOKE() {
	    return this.getToken(InceptorOracleParser.KW_REVOKE, 0);
	};

	privilegeList() {
	    return this.getTypedRuleContext(PrivilegeListContext,0);
	};

	KW_FROM() {
	    return this.getToken(InceptorOracleParser.KW_FROM, 0);
	};

	principalSpecification() {
	    return this.getTypedRuleContext(PrincipalSpecificationContext,0);
	};

	grantOptionFor() {
	    return this.getTypedRuleContext(GrantOptionForContext,0);
	};

	privilegeObject() {
	    return this.getTypedRuleContext(PrivilegeObjectContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterRevokePrivileges(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitRevokePrivileges(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitRevokePrivileges(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ShowQuotaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_showQuota;
    }

	KW_SHOW() {
	    return this.getToken(InceptorOracleParser.KW_SHOW, 0);
	};

	KW_QUOTA() {
	    return this.getToken(InceptorOracleParser.KW_QUOTA, 0);
	};

	quotaUser() {
	    return this.getTypedRuleContext(QuotaUserContext,0);
	};

	KW_ON() {
	    return this.getToken(InceptorOracleParser.KW_ON, 0);
	};

	quotaDb() {
	    return this.getTypedRuleContext(QuotaDbContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterShowQuota(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitShowQuota(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitShowQuota(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ShowFaclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_showFacl;
    }

	KW_SHOW() {
	    return this.getToken(InceptorOracleParser.KW_SHOW, 0);
	};

	KW_FACL() {
	    return this.getToken(InceptorOracleParser.KW_FACL, 0);
	};

	KW_ON() {
	    return this.getToken(InceptorOracleParser.KW_ON, 0);
	};

	KW_TABLE() {
	    return this.getToken(InceptorOracleParser.KW_TABLE, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	userOrGroup() {
	    return this.getTypedRuleContext(UserOrGroupContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterShowFacl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitShowFacl(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitShowFacl(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ShowGrantsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_showGrants;
    }

	KW_SHOW() {
	    return this.getToken(InceptorOracleParser.KW_SHOW, 0);
	};

	KW_GRANT() {
	    return this.getToken(InceptorOracleParser.KW_GRANT, 0);
	};

	principalName() {
	    return this.getTypedRuleContext(PrincipalNameContext,0);
	};

	KW_ON() {
	    return this.getToken(InceptorOracleParser.KW_ON, 0);
	};

	privilegeIncludeColObject() {
	    return this.getTypedRuleContext(PrivilegeIncludeColObjectContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterShowGrants(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitShowGrants(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitShowGrants(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ShowRoleGrantsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_showRoleGrants;
    }

	KW_SHOW() {
	    return this.getToken(InceptorOracleParser.KW_SHOW, 0);
	};

	KW_ROLE() {
	    return this.getToken(InceptorOracleParser.KW_ROLE, 0);
	};

	KW_GRANT() {
	    return this.getToken(InceptorOracleParser.KW_GRANT, 0);
	};

	principalName() {
	    return this.getTypedRuleContext(PrincipalNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterShowRoleGrants(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitShowRoleGrants(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitShowRoleGrants(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ShowRolePrincipalsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_showRolePrincipals;
        this.roleName = null; // IdentifierContext
    }

	KW_SHOW() {
	    return this.getToken(InceptorOracleParser.KW_SHOW, 0);
	};

	KW_PRINCIPALS() {
	    return this.getToken(InceptorOracleParser.KW_PRINCIPALS, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterShowRolePrincipals(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitShowRolePrincipals(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitShowRolePrincipals(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ShowRolesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_showRoles;
    }

	KW_SHOW() {
	    return this.getToken(InceptorOracleParser.KW_SHOW, 0);
	};

	KW_ROLES() {
	    return this.getToken(InceptorOracleParser.KW_ROLES, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterShowRoles(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitShowRoles(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitShowRoles(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ShowBlacklistContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_showBlacklist;
    }

	KW_SHOW() {
	    return this.getToken(InceptorOracleParser.KW_SHOW, 0);
	};

	KW_BLACKLIST() {
	    return this.getToken(InceptorOracleParser.KW_BLACKLIST, 0);
	};

	KW_LIKE() {
	    return this.getToken(InceptorOracleParser.KW_LIKE, 0);
	};

	showStmtIdentifier() {
	    return this.getTypedRuleContext(ShowStmtIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterShowBlacklist(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitShowBlacklist(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitShowBlacklist(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ShowSchedulerModeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_showSchedulerMode;
    }

	KW_SHOW() {
	    return this.getToken(InceptorOracleParser.KW_SHOW, 0);
	};

	KW_SCHEDULER() {
	    return this.getToken(InceptorOracleParser.KW_SCHEDULER, 0);
	};

	KW_MODE() {
	    return this.getToken(InceptorOracleParser.KW_MODE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterShowSchedulerMode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitShowSchedulerMode(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitShowSchedulerMode(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GrantQuotaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_grantQuota;
    }

	KW_GRANT() {
	    return this.getToken(InceptorOracleParser.KW_GRANT, 0);
	};

	KW_QUOTA() {
	    return this.getToken(InceptorOracleParser.KW_QUOTA, 0);
	};

	quotaSpec() {
	    return this.getTypedRuleContext(QuotaSpecContext,0);
	};

	KW_ON() {
	    return this.getToken(InceptorOracleParser.KW_ON, 0);
	};

	quotaDb() {
	    return this.getTypedRuleContext(QuotaDbContext,0);
	};

	KW_TO() {
	    return this.getToken(InceptorOracleParser.KW_TO, 0);
	};

	quotaUser() {
	    return this.getTypedRuleContext(QuotaUserContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterGrantQuota(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitGrantQuota(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitGrantQuota(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RevokeQuotaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_revokeQuota;
    }

	KW_REVOKE() {
	    return this.getToken(InceptorOracleParser.KW_REVOKE, 0);
	};

	KW_QUOTA() {
	    return this.getToken(InceptorOracleParser.KW_QUOTA, 0);
	};

	KW_ON() {
	    return this.getToken(InceptorOracleParser.KW_ON, 0);
	};

	quotaDb() {
	    return this.getTypedRuleContext(QuotaDbContext,0);
	};

	KW_FROM() {
	    return this.getToken(InceptorOracleParser.KW_FROM, 0);
	};

	quotaUser() {
	    return this.getTypedRuleContext(QuotaUserContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterRevokeQuota(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitRevokeQuota(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitRevokeQuota(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FaclSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_faclSpec;
    }

	StringLiteral() {
	    return this.getToken(InceptorOracleParser.StringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterFaclSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitFaclSpec(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitFaclSpec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GrantFaclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_grantFacl;
    }

	KW_GRANT() {
	    return this.getToken(InceptorOracleParser.KW_GRANT, 0);
	};

	KW_FACL() {
	    return this.getToken(InceptorOracleParser.KW_FACL, 0);
	};

	faclSpec() {
	    return this.getTypedRuleContext(FaclSpecContext,0);
	};

	KW_ON() {
	    return this.getToken(InceptorOracleParser.KW_ON, 0);
	};

	KW_TABLE() {
	    return this.getToken(InceptorOracleParser.KW_TABLE, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	KW_TO() {
	    return this.getToken(InceptorOracleParser.KW_TO, 0);
	};

	userOrGroup() {
	    return this.getTypedRuleContext(UserOrGroupContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterGrantFacl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitGrantFacl(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitGrantFacl(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RevokeFaclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_revokeFacl;
    }

	KW_REVOKE() {
	    return this.getToken(InceptorOracleParser.KW_REVOKE, 0);
	};

	KW_FACL() {
	    return this.getToken(InceptorOracleParser.KW_FACL, 0);
	};

	KW_ON() {
	    return this.getToken(InceptorOracleParser.KW_ON, 0);
	};

	KW_TABLE() {
	    return this.getToken(InceptorOracleParser.KW_TABLE, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	KW_FROM() {
	    return this.getToken(InceptorOracleParser.KW_FROM, 0);
	};

	userOrGroup() {
	    return this.getTypedRuleContext(UserOrGroupContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterRevokeFacl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitRevokeFacl(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitRevokeFacl(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GrantRoleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_grantRole;
    }

	KW_GRANT() {
	    return this.getToken(InceptorOracleParser.KW_GRANT, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	KW_TO() {
	    return this.getToken(InceptorOracleParser.KW_TO, 0);
	};

	principalSpecification() {
	    return this.getTypedRuleContext(PrincipalSpecificationContext,0);
	};

	KW_ROLE() {
	    return this.getToken(InceptorOracleParser.KW_ROLE, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	withAdminOption() {
	    return this.getTypedRuleContext(WithAdminOptionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterGrantRole(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitGrantRole(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitGrantRole(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RevokeRoleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_revokeRole;
    }

	KW_REVOKE() {
	    return this.getToken(InceptorOracleParser.KW_REVOKE, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	KW_FROM() {
	    return this.getToken(InceptorOracleParser.KW_FROM, 0);
	};

	principalSpecification() {
	    return this.getTypedRuleContext(PrincipalSpecificationContext,0);
	};

	adminOptionFor() {
	    return this.getTypedRuleContext(AdminOptionForContext,0);
	};

	KW_ROLE() {
	    return this.getToken(InceptorOracleParser.KW_ROLE, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterRevokeRole(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitRevokeRole(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitRevokeRole(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ShowCurrentRoleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_showCurrentRole;
    }

	KW_SHOW() {
	    return this.getToken(InceptorOracleParser.KW_SHOW, 0);
	};

	KW_CURRENT() {
	    return this.getToken(InceptorOracleParser.KW_CURRENT, 0);
	};

	KW_ROLES() {
	    return this.getToken(InceptorOracleParser.KW_ROLES, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterShowCurrentRole(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitShowCurrentRole(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitShowCurrentRole(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SyncIndexContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_syncIndex;
        this.tab = null; // TableNameContext
    }

	KW_EXEC() {
	    return this.getToken(InceptorOracleParser.KW_EXEC, 0);
	};

	KW_SYNC() {
	    return this.getToken(InceptorOracleParser.KW_SYNC, 0);
	};

	KW_TABLE() {
	    return this.getToken(InceptorOracleParser.KW_TABLE, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterSyncIndex(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitSyncIndex(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitSyncIndex(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SyncRuleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_syncRule;
        this.tab = null; // TableNameContext
    }

	KW_EXEC() {
	    return this.getToken(InceptorOracleParser.KW_EXEC, 0);
	};

	KW_SYNC() {
	    return this.getToken(InceptorOracleParser.KW_SYNC, 0);
	};

	KW_RULE() {
	    return this.getToken(InceptorOracleParser.KW_RULE, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterSyncRule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitSyncRule(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitSyncRule(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SyncPolicyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_syncPolicy;
        this.tab = null; // TableNameContext
    }

	KW_EXEC() {
	    return this.getToken(InceptorOracleParser.KW_EXEC, 0);
	};

	KW_SYNC() {
	    return this.getToken(InceptorOracleParser.KW_SYNC, 0);
	};

	KW_POLICY() {
	    return this.getToken(InceptorOracleParser.KW_POLICY, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterSyncPolicy(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitSyncPolicy(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitSyncPolicy(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SetRoleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_setRole;
        this.roleName = null; // IdentifierContext
    }

	KW_SET() {
	    return this.getToken(InceptorOracleParser.KW_SET, 0);
	};

	KW_ROLE() {
	    return this.getToken(InceptorOracleParser.KW_ROLE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterSetRole(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitSetRole(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitSetRole(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class QuotaDbContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_quotaDb;
    }

	KW_DATABASE() {
	    return this.getToken(InceptorOracleParser.KW_DATABASE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	KW_TEMPORARY() {
	    return this.getToken(InceptorOracleParser.KW_TEMPORARY, 0);
	};

	KW_SPACE() {
	    return this.getToken(InceptorOracleParser.KW_SPACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterQuotaDb(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitQuotaDb(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitQuotaDb(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class QuotaUserContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_quotaUser;
    }

	KW_USER() {
	    return this.getToken(InceptorOracleParser.KW_USER, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterQuotaUser(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitQuotaUser(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitQuotaUser(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UserOrGroupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_userOrGroup;
    }

	KW_USER() {
	    return this.getToken(InceptorOracleParser.KW_USER, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	KW_GROUP() {
	    return this.getToken(InceptorOracleParser.KW_GROUP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterUserOrGroup(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitUserOrGroup(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitUserOrGroup(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WithGrantOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_withGrantOption;
    }

	KW_WITH() {
	    return this.getToken(InceptorOracleParser.KW_WITH, 0);
	};

	KW_GRANT() {
	    return this.getToken(InceptorOracleParser.KW_GRANT, 0);
	};

	KW_OPTION() {
	    return this.getToken(InceptorOracleParser.KW_OPTION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterWithGrantOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitWithGrantOption(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitWithGrantOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WithAdminOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_withAdminOption;
    }

	KW_WITH() {
	    return this.getToken(InceptorOracleParser.KW_WITH, 0);
	};

	KW_ADMIN() {
	    return this.getToken(InceptorOracleParser.KW_ADMIN, 0);
	};

	KW_OPTION() {
	    return this.getToken(InceptorOracleParser.KW_OPTION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterWithAdminOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitWithAdminOption(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitWithAdminOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AdminOptionForContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_adminOptionFor;
    }

	KW_ADMIN() {
	    return this.getToken(InceptorOracleParser.KW_ADMIN, 0);
	};

	KW_OPTION() {
	    return this.getToken(InceptorOracleParser.KW_OPTION, 0);
	};

	KW_FOR() {
	    return this.getToken(InceptorOracleParser.KW_FOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterAdminOptionFor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitAdminOptionFor(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitAdminOptionFor(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class QuotaSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_quotaSpec;
    }

	ByteLengthLiteral() {
	    return this.getToken(InceptorOracleParser.ByteLengthLiteral, 0);
	};

	KW_UNLIMITED() {
	    return this.getToken(InceptorOracleParser.KW_UNLIMITED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterQuotaSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitQuotaSpec(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitQuotaSpec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrivilegeIncludeColObjectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_privilegeIncludeColObject;
    }

	KW_ALL() {
	    return this.getToken(InceptorOracleParser.KW_ALL, 0);
	};

	KW_APP() {
	    return this.getToken(InceptorOracleParser.KW_APP, 0);
	};

	privObjectCols() {
	    return this.getTypedRuleContext(PrivObjectColsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterPrivilegeIncludeColObject(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitPrivilegeIncludeColObject(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitPrivilegeIncludeColObject(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AllTablesInDBContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_allTablesInDB;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	DOT() {
	    return this.getToken(InceptorOracleParser.DOT, 0);
	};

	STAR() {
	    return this.getToken(InceptorOracleParser.STAR, 0);
	};

	KW_TABLE() {
	    return this.getToken(InceptorOracleParser.KW_TABLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterAllTablesInDB(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitAllTablesInDB(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitAllTablesInDB(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrivObjectColsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_privObjectCols;
        this.cols = null; // ColumnNameListContext
        this.path = null; // Token
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	KW_DATABASE() {
	    return this.getToken(InceptorOracleParser.KW_DATABASE, 0);
	};

	KW_SCHEMA() {
	    return this.getToken(InceptorOracleParser.KW_SCHEMA, 0);
	};

	KW_APP() {
	    return this.getToken(InceptorOracleParser.KW_APP, 0);
	};

	KW_APPLICATION() {
	    return this.getToken(InceptorOracleParser.KW_APPLICATION, 0);
	};

	allTablesInDB() {
	    return this.getTypedRuleContext(AllTablesInDBContext,0);
	};

	STAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.STAR);
	    } else {
	        return this.getToken(InceptorOracleParser.STAR, i);
	    }
	};


	KW_TABLE() {
	    return this.getToken(InceptorOracleParser.KW_TABLE, 0);
	};

	DOT() {
	    return this.getToken(InceptorOracleParser.DOT, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	partitionSpec() {
	    return this.getTypedRuleContext(PartitionSpecContext,0);
	};

	columnNameList() {
	    return this.getTypedRuleContext(ColumnNameListContext,0);
	};

	KW_URI() {
	    return this.getToken(InceptorOracleParser.KW_URI, 0);
	};

	StringLiteral() {
	    return this.getToken(InceptorOracleParser.StringLiteral, 0);
	};

	KW_SERVER() {
	    return this.getToken(InceptorOracleParser.KW_SERVER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterPrivObjectCols(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitPrivObjectCols(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitPrivObjectCols(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GrantOptionForContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_grantOptionFor;
    }

	KW_GRANT() {
	    return this.getToken(InceptorOracleParser.KW_GRANT, 0);
	};

	KW_OPTION() {
	    return this.getToken(InceptorOracleParser.KW_OPTION, 0);
	};

	KW_FOR() {
	    return this.getToken(InceptorOracleParser.KW_FOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterGrantOptionFor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitGrantOptionFor(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitGrantOptionFor(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrivilegeListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_privilegeList;
    }

	privlegeDef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PrivlegeDefContext);
	    } else {
	        return this.getTypedRuleContext(PrivlegeDefContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterPrivilegeList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitPrivilegeList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitPrivilegeList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrivlegeDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_privlegeDef;
        this.cols = null; // ColumnNameListContext
    }

	privilegeType() {
	    return this.getTypedRuleContext(PrivilegeTypeContext,0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	columnNameList() {
	    return this.getTypedRuleContext(ColumnNameListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterPrivlegeDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitPrivlegeDef(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitPrivlegeDef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrivilegeTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_privilegeType;
    }

	KW_ALL() {
	    return this.getToken(InceptorOracleParser.KW_ALL, 0);
	};

	KW_ALTER() {
	    return this.getToken(InceptorOracleParser.KW_ALTER, 0);
	};

	KW_UPDATE() {
	    return this.getToken(InceptorOracleParser.KW_UPDATE, 0);
	};

	KW_CREATE() {
	    return this.getToken(InceptorOracleParser.KW_CREATE, 0);
	};

	KW_APP() {
	    return this.getToken(InceptorOracleParser.KW_APP, 0);
	};

	KW_APPLICATION() {
	    return this.getToken(InceptorOracleParser.KW_APPLICATION, 0);
	};

	KW_DROP() {
	    return this.getToken(InceptorOracleParser.KW_DROP, 0);
	};

	KW_INDEX() {
	    return this.getToken(InceptorOracleParser.KW_INDEX, 0);
	};

	KW_LOCK() {
	    return this.getToken(InceptorOracleParser.KW_LOCK, 0);
	};

	KW_SELECT() {
	    return this.getToken(InceptorOracleParser.KW_SELECT, 0);
	};

	KW_SHOW_DATABASE() {
	    return this.getToken(InceptorOracleParser.KW_SHOW_DATABASE, 0);
	};

	KW_INSERT() {
	    return this.getToken(InceptorOracleParser.KW_INSERT, 0);
	};

	KW_DELETE() {
	    return this.getToken(InceptorOracleParser.KW_DELETE, 0);
	};

	KW_START() {
	    return this.getToken(InceptorOracleParser.KW_START, 0);
	};

	KW_STOP() {
	    return this.getToken(InceptorOracleParser.KW_STOP, 0);
	};

	KW_LIST() {
	    return this.getToken(InceptorOracleParser.KW_LIST, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterPrivilegeType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitPrivilegeType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitPrivilegeType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrivilegeObjectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_privilegeObject;
    }

	KW_ON() {
	    return this.getToken(InceptorOracleParser.KW_ON, 0);
	};

	privObject() {
	    return this.getTypedRuleContext(PrivObjectContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterPrivilegeObject(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitPrivilegeObject(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitPrivilegeObject(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrivObjectTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_privObjectType;
    }

	KW_DATABASE() {
	    return this.getToken(InceptorOracleParser.KW_DATABASE, 0);
	};

	KW_TABLE() {
	    return this.getToken(InceptorOracleParser.KW_TABLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterPrivObjectType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitPrivObjectType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitPrivObjectType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrivObjectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_privObject;
        this.path = null; // Token
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	KW_DATABASE() {
	    return this.getToken(InceptorOracleParser.KW_DATABASE, 0);
	};

	KW_SCHEMA() {
	    return this.getToken(InceptorOracleParser.KW_SCHEMA, 0);
	};

	allTablesInDB() {
	    return this.getTypedRuleContext(AllTablesInDBContext,0);
	};

	STAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.STAR);
	    } else {
	        return this.getToken(InceptorOracleParser.STAR, i);
	    }
	};


	KW_TABLE() {
	    return this.getToken(InceptorOracleParser.KW_TABLE, 0);
	};

	DOT() {
	    return this.getToken(InceptorOracleParser.DOT, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	partitionSpec() {
	    return this.getTypedRuleContext(PartitionSpecContext,0);
	};

	KW_APP() {
	    return this.getToken(InceptorOracleParser.KW_APP, 0);
	};

	KW_APPLICATION() {
	    return this.getToken(InceptorOracleParser.KW_APPLICATION, 0);
	};

	KW_URI() {
	    return this.getToken(InceptorOracleParser.KW_URI, 0);
	};

	StringLiteral() {
	    return this.getToken(InceptorOracleParser.StringLiteral, 0);
	};

	KW_SERVER() {
	    return this.getToken(InceptorOracleParser.KW_SERVER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterPrivObject(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitPrivObject(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitPrivObject(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrincipalSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_principalSpecification;
    }

	principalName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PrincipalNameContext);
	    } else {
	        return this.getTypedRuleContext(PrincipalNameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterPrincipalSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitPrincipalSpecification(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitPrincipalSpecification(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrincipalNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_principalName;
    }

	KW_USER() {
	    return this.getToken(InceptorOracleParser.KW_USER, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	KW_GROUP() {
	    return this.getToken(InceptorOracleParser.KW_GROUP, 0);
	};

	KW_ROLE() {
	    return this.getToken(InceptorOracleParser.KW_ROLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterPrincipalName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitPrincipalName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitPrincipalName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LockModeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_lockMode;
    }

	KW_SHARED() {
	    return this.getToken(InceptorOracleParser.KW_SHARED, 0);
	};

	KW_EXCLUSIVE() {
	    return this.getToken(InceptorOracleParser.KW_EXCLUSIVE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterLockMode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitLockMode(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitLockMode(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IndexCommentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_indexComment;
        this.comment = null; // Token
    }

	KW_COMMENT() {
	    return this.getToken(InceptorOracleParser.KW_COMMENT, 0);
	};

	StringLiteral() {
	    return this.getToken(InceptorOracleParser.StringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterIndexComment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitIndexComment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitIndexComment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AutoRebuildContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_autoRebuild;
    }

	KW_WITH() {
	    return this.getToken(InceptorOracleParser.KW_WITH, 0);
	};

	KW_DEFERRED() {
	    return this.getToken(InceptorOracleParser.KW_DEFERRED, 0);
	};

	KW_REBUILD() {
	    return this.getToken(InceptorOracleParser.KW_REBUILD, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterAutoRebuild(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitAutoRebuild(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitAutoRebuild(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IndexTblNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_indexTblName;
        this.indexTbl = null; // TableNameContext
    }

	KW_IN() {
	    return this.getToken(InceptorOracleParser.KW_IN, 0);
	};

	KW_TABLE() {
	    return this.getToken(InceptorOracleParser.KW_TABLE, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterIndexTblName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitIndexTblName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitIndexTblName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IndexPropertiesPrefixedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_indexPropertiesPrefixed;
    }

	KW_IDXPROPERTIES() {
	    return this.getToken(InceptorOracleParser.KW_IDXPROPERTIES, 0);
	};

	indexProperties() {
	    return this.getTypedRuleContext(IndexPropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterIndexPropertiesPrefixed(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitIndexPropertiesPrefixed(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitIndexPropertiesPrefixed(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IndexPropertiesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_indexProperties;
    }

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	indexPropertiesList() {
	    return this.getTypedRuleContext(IndexPropertiesListContext,0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterIndexProperties(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitIndexProperties(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitIndexProperties(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IndexPropertiesListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_indexPropertiesList;
    }

	keyValueProperty = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(KeyValuePropertyContext);
	    } else {
	        return this.getTypedRuleContext(KeyValuePropertyContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterIndexPropertiesList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitIndexPropertiesList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitIndexPropertiesList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TabTypeExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_tabTypeExpr;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.DOT);
	    } else {
	        return this.getToken(InceptorOracleParser.DOT, i);
	    }
	};


	KW_ELEM_TYPE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.KW_ELEM_TYPE);
	    } else {
	        return this.getToken(InceptorOracleParser.KW_ELEM_TYPE, i);
	    }
	};


	KW_KEY_TYPE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.KW_KEY_TYPE);
	    } else {
	        return this.getToken(InceptorOracleParser.KW_KEY_TYPE, i);
	    }
	};


	KW_VALUE_TYPE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.KW_VALUE_TYPE);
	    } else {
	        return this.getToken(InceptorOracleParser.KW_VALUE_TYPE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterTabTypeExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitTabTypeExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitTabTypeExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DescTabTypeExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_descTabTypeExpr;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.DOT);
	    } else {
	        return this.getToken(InceptorOracleParser.DOT, i);
	    }
	};


	KW_ELEM_TYPE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.KW_ELEM_TYPE);
	    } else {
	        return this.getToken(InceptorOracleParser.KW_ELEM_TYPE, i);
	    }
	};


	KW_KEY_TYPE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.KW_KEY_TYPE);
	    } else {
	        return this.getToken(InceptorOracleParser.KW_KEY_TYPE, i);
	    }
	};


	KW_VALUE_TYPE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.KW_VALUE_TYPE);
	    } else {
	        return this.getToken(InceptorOracleParser.KW_VALUE_TYPE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDescTabTypeExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDescTabTypeExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDescTabTypeExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PartTypeExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_partTypeExpr;
    }

	tabTypeExpr() {
	    return this.getTypedRuleContext(TabTypeExprContext,0);
	};

	partitionSpec() {
	    return this.getTypedRuleContext(PartitionSpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterPartTypeExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitPartTypeExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitPartTypeExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DescPartTypeExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_descPartTypeExpr;
    }

	descTabTypeExpr() {
	    return this.getTypedRuleContext(DescTabTypeExprContext,0);
	};

	partitionSpec() {
	    return this.getTypedRuleContext(PartitionSpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDescPartTypeExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDescPartTypeExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDescPartTypeExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ShowStmtIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_showStmtIdentifier;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	StringLiteral() {
	    return this.getToken(InceptorOracleParser.StringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterShowStmtIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitShowStmtIdentifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitShowStmtIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SysFuncNamesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_sysFuncNames;
    }

	KW_AND() {
	    return this.getToken(InceptorOracleParser.KW_AND, 0);
	};

	KW_OR() {
	    return this.getToken(InceptorOracleParser.KW_OR, 0);
	};

	KW_NOT() {
	    return this.getToken(InceptorOracleParser.KW_NOT, 0);
	};

	KW_LIKE() {
	    return this.getToken(InceptorOracleParser.KW_LIKE, 0);
	};

	KW_IF() {
	    return this.getToken(InceptorOracleParser.KW_IF, 0);
	};

	KW_CASE() {
	    return this.getToken(InceptorOracleParser.KW_CASE, 0);
	};

	KW_WHEN() {
	    return this.getToken(InceptorOracleParser.KW_WHEN, 0);
	};

	KW_TINYINT() {
	    return this.getToken(InceptorOracleParser.KW_TINYINT, 0);
	};

	KW_SMALLINT() {
	    return this.getToken(InceptorOracleParser.KW_SMALLINT, 0);
	};

	KW_INT() {
	    return this.getToken(InceptorOracleParser.KW_INT, 0);
	};

	KW_BIGINT() {
	    return this.getToken(InceptorOracleParser.KW_BIGINT, 0);
	};

	KW_FLOAT() {
	    return this.getToken(InceptorOracleParser.KW_FLOAT, 0);
	};

	KW_DOUBLE() {
	    return this.getToken(InceptorOracleParser.KW_DOUBLE, 0);
	};

	KW_BOOLEAN() {
	    return this.getToken(InceptorOracleParser.KW_BOOLEAN, 0);
	};

	KW_STRING() {
	    return this.getToken(InceptorOracleParser.KW_STRING, 0);
	};

	KW_BINARY() {
	    return this.getToken(InceptorOracleParser.KW_BINARY, 0);
	};

	KW_ARRAY() {
	    return this.getToken(InceptorOracleParser.KW_ARRAY, 0);
	};

	KW_MAP() {
	    return this.getToken(InceptorOracleParser.KW_MAP, 0);
	};

	KW_STRUCT() {
	    return this.getToken(InceptorOracleParser.KW_STRUCT, 0);
	};

	KW_UNIONTYPE() {
	    return this.getToken(InceptorOracleParser.KW_UNIONTYPE, 0);
	};

	EQUAL() {
	    return this.getToken(InceptorOracleParser.EQUAL, 0);
	};

	EQUAL_NS() {
	    return this.getToken(InceptorOracleParser.EQUAL_NS, 0);
	};

	NOTEQUAL() {
	    return this.getToken(InceptorOracleParser.NOTEQUAL, 0);
	};

	LESSTHANOREQUALTO() {
	    return this.getToken(InceptorOracleParser.LESSTHANOREQUALTO, 0);
	};

	LESSTHAN() {
	    return this.getToken(InceptorOracleParser.LESSTHAN, 0);
	};

	GREATERTHANOREQUALTO() {
	    return this.getToken(InceptorOracleParser.GREATERTHANOREQUALTO, 0);
	};

	GREATERTHAN() {
	    return this.getToken(InceptorOracleParser.GREATERTHAN, 0);
	};

	DIVIDE() {
	    return this.getToken(InceptorOracleParser.DIVIDE, 0);
	};

	PLUS() {
	    return this.getToken(InceptorOracleParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(InceptorOracleParser.MINUS, 0);
	};

	OP_CONCAT() {
	    return this.getToken(InceptorOracleParser.OP_CONCAT, 0);
	};

	STAR() {
	    return this.getToken(InceptorOracleParser.STAR, 0);
	};

	MOD() {
	    return this.getToken(InceptorOracleParser.MOD, 0);
	};

	DIV() {
	    return this.getToken(InceptorOracleParser.DIV, 0);
	};

	AMPERSAND() {
	    return this.getToken(InceptorOracleParser.AMPERSAND, 0);
	};

	TILDE() {
	    return this.getToken(InceptorOracleParser.TILDE, 0);
	};

	BITWISEOR() {
	    return this.getToken(InceptorOracleParser.BITWISEOR, 0);
	};

	BITWISEXOR() {
	    return this.getToken(InceptorOracleParser.BITWISEXOR, 0);
	};

	KW_RLIKE() {
	    return this.getToken(InceptorOracleParser.KW_RLIKE, 0);
	};

	KW_REGEXP() {
	    return this.getToken(InceptorOracleParser.KW_REGEXP, 0);
	};

	KW_IN() {
	    return this.getToken(InceptorOracleParser.KW_IN, 0);
	};

	KW_BETWEEN() {
	    return this.getToken(InceptorOracleParser.KW_BETWEEN, 0);
	};

	KW_EXTRACT() {
	    return this.getToken(InceptorOracleParser.KW_EXTRACT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterSysFuncNames(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitSysFuncNames(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitSysFuncNames(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DescFuncNamesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_descFuncNames;
    }

	sysFuncNames() {
	    return this.getTypedRuleContext(SysFuncNamesContext,0);
	};

	StringLiteral() {
	    return this.getToken(InceptorOracleParser.StringLiteral, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDescFuncNames(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDescFuncNames(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDescFuncNames(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DdlCStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_ddlCStatement;
    }

	createOrReplaceStatement() {
	    return this.getTypedRuleContext(CreateOrReplaceStatementContext,0);
	};

	dialectDropStatement() {
	    return this.getTypedRuleContext(DialectDropStatementContext,0);
	};

	grantPermission() {
	    return this.getTypedRuleContext(GrantPermissionContext,0);
	};

	revokePermission() {
	    return this.getTypedRuleContext(RevokePermissionContext,0);
	};

	showPermission() {
	    return this.getTypedRuleContext(ShowPermissionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDdlCStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDdlCStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDdlCStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateOrReplaceStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_createOrReplaceStatement;
    }

	KW_CREATE() {
	    return this.getToken(InceptorOracleParser.KW_CREATE, 0);
	};

	createViewStatement() {
	    return this.getTypedRuleContext(CreateViewStatementContext,0);
	};

	createMaterializedViewStatement() {
	    return this.getTypedRuleContext(CreateMaterializedViewStatementContext,0);
	};

	createFunctionStatement() {
	    return this.getTypedRuleContext(CreateFunctionStatementContext,0);
	};

	createRuleStatement() {
	    return this.getTypedRuleContext(CreateRuleStatementContext,0);
	};

	createPolicyStatement() {
	    return this.getTypedRuleContext(CreatePolicyStatementContext,0);
	};

	dialectCreateOrReplaceStatement() {
	    return this.getTypedRuleContext(DialectCreateOrReplaceStatementContext,0);
	};

	orReplace() {
	    return this.getTypedRuleContext(OrReplaceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterCreateOrReplaceStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitCreateOrReplaceStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitCreateOrReplaceStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateViewStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_createViewStatement;
        this.name = null; // TableNameContext
    }

	KW_VIEW() {
	    return this.getToken(InceptorOracleParser.KW_VIEW, 0);
	};

	KW_AS() {
	    return this.getToken(InceptorOracleParser.KW_AS, 0);
	};

	queryStatementExpression() {
	    return this.getTypedRuleContext(QueryStatementExpressionContext,0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	ifNotExists() {
	    return this.getTypedRuleContext(IfNotExistsContext,0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	columnNameCommentList() {
	    return this.getTypedRuleContext(ColumnNameCommentListContext,0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	tableComment() {
	    return this.getTypedRuleContext(TableCommentContext,0);
	};

	viewPartition() {
	    return this.getTypedRuleContext(ViewPartitionContext,0);
	};

	tablePropertiesPrefixed() {
	    return this.getTypedRuleContext(TablePropertiesPrefixedContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterCreateViewStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitCreateViewStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitCreateViewStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RewriteEnabledContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_rewriteEnabled;
    }

	KW_ENABLE() {
	    return this.getToken(InceptorOracleParser.KW_ENABLE, 0);
	};

	KW_REWRITE() {
	    return this.getToken(InceptorOracleParser.KW_REWRITE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterRewriteEnabled(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitRewriteEnabled(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitRewriteEnabled(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RewriteDisabledContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_rewriteDisabled;
    }

	KW_DISABLE() {
	    return this.getToken(InceptorOracleParser.KW_DISABLE, 0);
	};

	KW_REWRITE() {
	    return this.getToken(InceptorOracleParser.KW_REWRITE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterRewriteDisabled(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitRewriteDisabled(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitRewriteDisabled(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateMaterializedViewStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_createMaterializedViewStatement;
        this.name = null; // TableNameContext
    }

	KW_MATERIALIZED() {
	    return this.getToken(InceptorOracleParser.KW_MATERIALIZED, 0);
	};

	KW_VIEW() {
	    return this.getToken(InceptorOracleParser.KW_VIEW, 0);
	};

	KW_AS() {
	    return this.getToken(InceptorOracleParser.KW_AS, 0);
	};

	queryStatementExpression() {
	    return this.getTypedRuleContext(QueryStatementExpressionContext,0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	ifNotExists() {
	    return this.getTypedRuleContext(IfNotExistsContext,0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	columnNameCommentList() {
	    return this.getTypedRuleContext(ColumnNameCommentListContext,0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	rewriteEnabled() {
	    return this.getTypedRuleContext(RewriteEnabledContext,0);
	};

	tableComment() {
	    return this.getTypedRuleContext(TableCommentContext,0);
	};

	viewPartition() {
	    return this.getTypedRuleContext(ViewPartitionContext,0);
	};

	tablePropertiesPrefixed() {
	    return this.getTypedRuleContext(TablePropertiesPrefixedContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterCreateMaterializedViewStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitCreateMaterializedViewStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitCreateMaterializedViewStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ViewPartitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_viewPartition;
    }

	KW_PARTITIONED() {
	    return this.getToken(InceptorOracleParser.KW_PARTITIONED, 0);
	};

	KW_ON() {
	    return this.getToken(InceptorOracleParser.KW_ON, 0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	columnNameList() {
	    return this.getTypedRuleContext(ColumnNameListContext,0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterViewPartition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitViewPartition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitViewPartition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ShowPermissionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_showPermission;
    }

	KW_SHOW() {
	    return this.getToken(InceptorOracleParser.KW_SHOW, 0);
	};

	KW_PERMISSION() {
	    return this.getToken(InceptorOracleParser.KW_PERMISSION, 0);
	};

	rclsObject() {
	    return this.getTypedRuleContext(RclsObjectContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterShowPermission(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitShowPermission(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitShowPermission(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GrantPermissionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_grantPermission;
    }

	KW_GRANT() {
	    return this.getToken(InceptorOracleParser.KW_GRANT, 0);
	};

	KW_PERMISSION() {
	    return this.getToken(InceptorOracleParser.KW_PERMISSION, 0);
	};

	rclsObject() {
	    return this.getTypedRuleContext(RclsObjectContext,0);
	};

	grantDefinition() {
	    return this.getTypedRuleContext(GrantDefinitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterGrantPermission(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitGrantPermission(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitGrantPermission(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RevokePermissionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_revokePermission;
    }

	KW_REVOKE() {
	    return this.getToken(InceptorOracleParser.KW_REVOKE, 0);
	};

	KW_PERMISSION() {
	    return this.getToken(InceptorOracleParser.KW_PERMISSION, 0);
	};

	rclsObject() {
	    return this.getTypedRuleContext(RclsObjectContext,0);
	};

	revokeDefinition() {
	    return this.getTypedRuleContext(RevokeDefinitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterRevokePermission(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitRevokePermission(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitRevokePermission(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GrantDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_grantDefinition;
    }

	KW_FOR() {
	    return this.getToken(InceptorOracleParser.KW_FOR, 0);
	};

	KW_ROWS() {
	    return this.getToken(InceptorOracleParser.KW_ROWS, 0);
	};

	whereClause() {
	    return this.getTypedRuleContext(WhereClauseContext,0);
	};

	KW_COLUMN() {
	    return this.getToken(InceptorOracleParser.KW_COLUMN, 0);
	};

	columnName() {
	    return this.getTypedRuleContext(ColumnNameContext,0);
	};

	whenExpression() {
	    return this.getTypedRuleContext(WhenExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterGrantDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitGrantDefinition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitGrantDefinition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RevokeDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_revokeDefinition;
    }

	KW_FOR() {
	    return this.getToken(InceptorOracleParser.KW_FOR, 0);
	};

	KW_ROWS() {
	    return this.getToken(InceptorOracleParser.KW_ROWS, 0);
	};

	KW_COLUMNS() {
	    return this.getToken(InceptorOracleParser.KW_COLUMNS, 0);
	};

	KW_COLUMN() {
	    return this.getToken(InceptorOracleParser.KW_COLUMN, 0);
	};

	columnName() {
	    return this.getTypedRuleContext(ColumnNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterRevokeDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitRevokeDefinition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitRevokeDefinition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RclsObjectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_rclsObject;
    }

	KW_ON() {
	    return this.getToken(InceptorOracleParser.KW_ON, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	KW_TABLE() {
	    return this.getToken(InceptorOracleParser.KW_TABLE, 0);
	};

	KW_VIEW() {
	    return this.getToken(InceptorOracleParser.KW_VIEW, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterRclsObject(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitRclsObject(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitRclsObject(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DdlStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_ddlStatement;
    }

	alterStatement() {
	    return this.getTypedRuleContext(AlterStatementContext,0);
	};

	ddlAStatement() {
	    return this.getTypedRuleContext(DdlAStatementContext,0);
	};

	ddlBStatement() {
	    return this.getTypedRuleContext(DdlBStatementContext,0);
	};

	ddlCStatement() {
	    return this.getTypedRuleContext(DdlCStatementContext,0);
	};

	compactStatement() {
	    return this.getTypedRuleContext(CompactStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDdlStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDdlStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDdlStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CompactStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_compactStatement;
        this.compactType = null; // Token
        this.compactId = null; // Token
        this.compactSubId = null; // Token
    }

	KW_COMPACT() {
	    return this.getToken(InceptorOracleParser.KW_COMPACT, 0);
	};

	KW_TABLE() {
	    return this.getToken(InceptorOracleParser.KW_TABLE, 0);
	};

	tablePartitionPrefix() {
	    return this.getTypedRuleContext(TablePartitionPrefixContext,0);
	};

	StringLiteral() {
	    return this.getToken(InceptorOracleParser.StringLiteral, 0);
	};

	Number = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.Number);
	    } else {
	        return this.getToken(InceptorOracleParser.Number, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterCompactStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitCompactStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitCompactStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrecedenceUnaryOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_precedenceUnaryOperator;
    }

	PLUS() {
	    return this.getToken(InceptorOracleParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(InceptorOracleParser.MINUS, 0);
	};

	TILDE() {
	    return this.getToken(InceptorOracleParser.TILDE, 0);
	};

	KW_PRIOR() {
	    return this.getToken(InceptorOracleParser.KW_PRIOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterPrecedenceUnaryOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitPrecedenceUnaryOperator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitPrecedenceUnaryOperator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrecedenceUnaryPrefixExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_precedenceUnaryPrefixExpression;
    }

	moleculeExpression() {
	    return this.getTypedRuleContext(MoleculeExpressionContext,0);
	};

	precedenceUnaryOperator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PrecedenceUnaryOperatorContext);
	    } else {
	        return this.getTypedRuleContext(PrecedenceUnaryOperatorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterPrecedenceUnaryPrefixExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitPrecedenceUnaryPrefixExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitPrecedenceUnaryPrefixExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrecedenceUnarySuffixExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_precedenceUnarySuffixExpression;
        this.a = null; // Token
    }

	precedenceUnaryPrefixExpression() {
	    return this.getTypedRuleContext(PrecedenceUnaryPrefixExpressionContext,0);
	};

	nullCondition() {
	    return this.getTypedRuleContext(NullConditionContext,0);
	};

	KW_IS() {
	    return this.getToken(InceptorOracleParser.KW_IS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterPrecedenceUnarySuffixExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitPrecedenceUnarySuffixExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitPrecedenceUnarySuffixExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrecedenceBitwiseXorOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_precedenceBitwiseXorOperator;
    }

	BITWISEXOR() {
	    return this.getToken(InceptorOracleParser.BITWISEXOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterPrecedenceBitwiseXorOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitPrecedenceBitwiseXorOperator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitPrecedenceBitwiseXorOperator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrecedenceBitwiseXorExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_precedenceBitwiseXorExpression;
    }

	precedenceUnarySuffixExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PrecedenceUnarySuffixExpressionContext);
	    } else {
	        return this.getTypedRuleContext(PrecedenceUnarySuffixExpressionContext,i);
	    }
	};

	precedenceBitwiseXorOperator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PrecedenceBitwiseXorOperatorContext);
	    } else {
	        return this.getTypedRuleContext(PrecedenceBitwiseXorOperatorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterPrecedenceBitwiseXorExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitPrecedenceBitwiseXorExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitPrecedenceBitwiseXorExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrecedenceStarOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_precedenceStarOperator;
    }

	STAR() {
	    return this.getToken(InceptorOracleParser.STAR, 0);
	};

	DIVIDE() {
	    return this.getToken(InceptorOracleParser.DIVIDE, 0);
	};

	MOD() {
	    return this.getToken(InceptorOracleParser.MOD, 0);
	};

	DIV() {
	    return this.getToken(InceptorOracleParser.DIV, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterPrecedenceStarOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitPrecedenceStarOperator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitPrecedenceStarOperator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrecedenceStarExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_precedenceStarExpression;
    }

	precedenceBitwiseXorExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PrecedenceBitwiseXorExpressionContext);
	    } else {
	        return this.getTypedRuleContext(PrecedenceBitwiseXorExpressionContext,i);
	    }
	};

	precedenceStarOperator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PrecedenceStarOperatorContext);
	    } else {
	        return this.getTypedRuleContext(PrecedenceStarOperatorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterPrecedenceStarExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitPrecedenceStarExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitPrecedenceStarExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrecedencePlusOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_precedencePlusOperator;
    }

	PLUS() {
	    return this.getToken(InceptorOracleParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(InceptorOracleParser.MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterPrecedencePlusOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitPrecedencePlusOperator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitPrecedencePlusOperator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrecedencePlusExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_precedencePlusExpression;
    }

	precedenceStarExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PrecedenceStarExpressionContext);
	    } else {
	        return this.getTypedRuleContext(PrecedenceStarExpressionContext,i);
	    }
	};

	precedencePlusOperator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PrecedencePlusOperatorContext);
	    } else {
	        return this.getTypedRuleContext(PrecedencePlusOperatorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterPrecedencePlusExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitPrecedencePlusExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitPrecedencePlusExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrecedenceOPConcatOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_precedenceOPConcatOperator;
    }

	OP_CONCAT() {
	    return this.getToken(InceptorOracleParser.OP_CONCAT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterPrecedenceOPConcatOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitPrecedenceOPConcatOperator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitPrecedenceOPConcatOperator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrecedenceOPConcatExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_precedenceOPConcatExpression;
    }

	precedencePlusExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PrecedencePlusExpressionContext);
	    } else {
	        return this.getTypedRuleContext(PrecedencePlusExpressionContext,i);
	    }
	};

	precedenceOPConcatOperator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PrecedenceOPConcatOperatorContext);
	    } else {
	        return this.getTypedRuleContext(PrecedenceOPConcatOperatorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterPrecedenceOPConcatExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitPrecedenceOPConcatExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitPrecedenceOPConcatExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrecedenceAmpersandOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_precedenceAmpersandOperator;
    }

	AMPERSAND() {
	    return this.getToken(InceptorOracleParser.AMPERSAND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterPrecedenceAmpersandOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitPrecedenceAmpersandOperator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitPrecedenceAmpersandOperator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrecedenceAmpersandExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_precedenceAmpersandExpression;
    }

	precedenceOPConcatExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PrecedenceOPConcatExpressionContext);
	    } else {
	        return this.getTypedRuleContext(PrecedenceOPConcatExpressionContext,i);
	    }
	};

	precedenceAmpersandOperator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PrecedenceAmpersandOperatorContext);
	    } else {
	        return this.getTypedRuleContext(PrecedenceAmpersandOperatorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterPrecedenceAmpersandExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitPrecedenceAmpersandExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitPrecedenceAmpersandExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrecedenceBitwiseOrOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_precedenceBitwiseOrOperator;
    }

	BITWISEOR() {
	    return this.getToken(InceptorOracleParser.BITWISEOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterPrecedenceBitwiseOrOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitPrecedenceBitwiseOrOperator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitPrecedenceBitwiseOrOperator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrecedenceBitwiseOrExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_precedenceBitwiseOrExpression;
    }

	precedenceAmpersandExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PrecedenceAmpersandExpressionContext);
	    } else {
	        return this.getTypedRuleContext(PrecedenceAmpersandExpressionContext,i);
	    }
	};

	precedenceBitwiseOrOperator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PrecedenceBitwiseOrOperatorContext);
	    } else {
	        return this.getTypedRuleContext(PrecedenceBitwiseOrOperatorContext,i);
	    }
	};

	outer_join_sign() {
	    return this.getTypedRuleContext(Outer_join_signContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterPrecedenceBitwiseOrExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitPrecedenceBitwiseOrExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitPrecedenceBitwiseOrExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrecedenceRegexpOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_precedenceRegexpOperator;
    }

	KW_LIKE() {
	    return this.getToken(InceptorOracleParser.KW_LIKE, 0);
	};

	KW_RLIKE() {
	    return this.getToken(InceptorOracleParser.KW_RLIKE, 0);
	};

	KW_REGEXP() {
	    return this.getToken(InceptorOracleParser.KW_REGEXP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterPrecedenceRegexpOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitPrecedenceRegexpOperator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitPrecedenceRegexpOperator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrecedenceEqualOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_precedenceEqualOperator;
    }

	precedenceRegexpOperator() {
	    return this.getTypedRuleContext(PrecedenceRegexpOperatorContext,0);
	};

	EQUAL() {
	    return this.getToken(InceptorOracleParser.EQUAL, 0);
	};

	EQUAL_NS() {
	    return this.getToken(InceptorOracleParser.EQUAL_NS, 0);
	};

	NOTEQUAL() {
	    return this.getToken(InceptorOracleParser.NOTEQUAL, 0);
	};

	LESSTHANOREQUALTO() {
	    return this.getToken(InceptorOracleParser.LESSTHANOREQUALTO, 0);
	};

	LESSTHAN() {
	    return this.getToken(InceptorOracleParser.LESSTHAN, 0);
	};

	GREATERTHANOREQUALTO() {
	    return this.getToken(InceptorOracleParser.GREATERTHANOREQUALTO, 0);
	};

	GREATERTHAN() {
	    return this.getToken(InceptorOracleParser.GREATERTHAN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterPrecedenceEqualOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitPrecedenceEqualOperator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitPrecedenceEqualOperator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_expression;
    }

	precedenceOrExpression() {
	    return this.getTypedRuleContext(PrecedenceOrExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExpressionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_expressions;
    }

	expressionsInParenthesis() {
	    return this.getTypedRuleContext(ExpressionsInParenthesisContext,0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	selectStatement() {
	    return this.getTypedRuleContext(SelectStatementContext,0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterExpressions(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitExpressions(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitExpressions(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExpressionsInParenthesisContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_expressionsInParenthesis;
    }

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	expressionsNotInParenthesis() {
	    return this.getTypedRuleContext(ExpressionsNotInParenthesisContext,0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterExpressionsInParenthesis(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitExpressionsInParenthesis(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitExpressionsInParenthesis(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExpressionsNotInParenthesisContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_expressionsNotInParenthesis;
        this.first = null; // ExpressionContext
        this.more = null; // ExpressionPartContext
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	expressionPart() {
	    return this.getTypedRuleContext(ExpressionPartContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterExpressionsNotInParenthesis(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitExpressionsNotInParenthesis(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitExpressionsNotInParenthesis(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExpressionPartContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_expressionPart;
    }

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterExpressionPart(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitExpressionPart(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitExpressionPart(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExpressionListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_expressionList;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterExpressionList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitExpressionList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitExpressionList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Outer_join_signContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_outer_join_sign;
    }

	OUTER_JOIN_SIGN() {
	    return this.getToken(InceptorOracleParser.OUTER_JOIN_SIGN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterOuter_join_sign(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitOuter_join_sign(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitOuter_join_sign(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NullConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_nullCondition;
    }

	KW_NULL() {
	    return this.getToken(InceptorOracleParser.KW_NULL, 0);
	};

	KW_NOT() {
	    return this.getToken(InceptorOracleParser.KW_NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterNullCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitNullCondition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitNullCondition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrecedenceSimilarExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_precedenceSimilarExpression;
        this.a = null; // PrecedenceBitwiseOrExpressionContext
        this.part = null; // PrecedenceSimilarExpressionPartContext
    }

	precedenceBitwiseOrExpression() {
	    return this.getTypedRuleContext(PrecedenceBitwiseOrExpressionContext,0);
	};

	precedenceSimilarExpressionPart() {
	    return this.getTypedRuleContext(PrecedenceSimilarExpressionPartContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterPrecedenceSimilarExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitPrecedenceSimilarExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitPrecedenceSimilarExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrecedenceSimilarExpressionPartContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_precedenceSimilarExpressionPart;
    }

	precedenceSimilarExpressionAtom() {
	    return this.getTypedRuleContext(PrecedenceSimilarExpressionAtomContext,0);
	};

	KW_NOT() {
	    return this.getToken(InceptorOracleParser.KW_NOT, 0);
	};

	precedenceSimilarExpressionPartNot() {
	    return this.getTypedRuleContext(PrecedenceSimilarExpressionPartNotContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterPrecedenceSimilarExpressionPart(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitPrecedenceSimilarExpressionPart(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitPrecedenceSimilarExpressionPart(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrecedenceSimilarExpressionAtomContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_precedenceSimilarExpressionAtom;
    }

	likeanyRightOp() {
	    return this.getTypedRuleContext(LikeanyRightOpContext,0);
	};

	likeallRightOp() {
	    return this.getTypedRuleContext(LikeallRightOpContext,0);
	};

	inRightOp() {
	    return this.getTypedRuleContext(InRightOpContext,0);
	};

	betweenRightOp() {
	    return this.getTypedRuleContext(BetweenRightOpContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterPrecedenceSimilarExpressionAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitPrecedenceSimilarExpressionAtom(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitPrecedenceSimilarExpressionAtom(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrecedenceSimilarExpressionPartNotContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_precedenceSimilarExpressionPartNot;
        this.notExpr = null; // PrecedenceBitwiseOrExpressionContext
    }

	precedenceSimilarExpressionAtom() {
	    return this.getTypedRuleContext(PrecedenceSimilarExpressionAtomContext,0);
	};

	precedenceRegexpOperator() {
	    return this.getTypedRuleContext(PrecedenceRegexpOperatorContext,0);
	};

	precedenceBitwiseOrExpression() {
	    return this.getTypedRuleContext(PrecedenceBitwiseOrExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterPrecedenceSimilarExpressionPartNot(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitPrecedenceSimilarExpressionPartNot(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitPrecedenceSimilarExpressionPartNot(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrecedenceNotOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_precedenceNotOperator;
    }

	KW_NOT() {
	    return this.getToken(InceptorOracleParser.KW_NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterPrecedenceNotOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitPrecedenceNotOperator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitPrecedenceNotOperator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrecedenceNotExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_precedenceNotExpression;
    }

	precedenceEqualExpression() {
	    return this.getTypedRuleContext(PrecedenceEqualExpressionContext,0);
	};

	precedenceNotOperator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PrecedenceNotOperatorContext);
	    } else {
	        return this.getTypedRuleContext(PrecedenceNotOperatorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterPrecedenceNotExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitPrecedenceNotExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitPrecedenceNotExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrecedenceAndOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_precedenceAndOperator;
    }

	KW_AND() {
	    return this.getToken(InceptorOracleParser.KW_AND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterPrecedenceAndOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitPrecedenceAndOperator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitPrecedenceAndOperator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrecedenceAndExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_precedenceAndExpression;
    }

	precedenceNotExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PrecedenceNotExpressionContext);
	    } else {
	        return this.getTypedRuleContext(PrecedenceNotExpressionContext,i);
	    }
	};

	precedenceAndOperator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PrecedenceAndOperatorContext);
	    } else {
	        return this.getTypedRuleContext(PrecedenceAndOperatorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterPrecedenceAndExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitPrecedenceAndExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitPrecedenceAndExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrecedenceOrOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_precedenceOrOperator;
    }

	KW_OR() {
	    return this.getToken(InceptorOracleParser.KW_OR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterPrecedenceOrOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitPrecedenceOrOperator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitPrecedenceOrOperator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrecedenceOrExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_precedenceOrExpression;
    }

	precedenceAndExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PrecedenceAndExpressionContext);
	    } else {
	        return this.getTypedRuleContext(PrecedenceAndExpressionContext,i);
	    }
	};

	precedenceOrOperator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PrecedenceOrOperatorContext);
	    } else {
	        return this.getTypedRuleContext(PrecedenceOrOperatorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterPrecedenceOrExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitPrecedenceOrExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitPrecedenceOrExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrecedenceEqualExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_precedenceEqualExpression;
    }

	precedenceSimilarExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PrecedenceSimilarExpressionContext);
	    } else {
	        return this.getTypedRuleContext(PrecedenceSimilarExpressionContext,i);
	    }
	};

	precedenceEqualOperator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PrecedenceEqualOperatorContext);
	    } else {
	        return this.getTypedRuleContext(PrecedenceEqualOperatorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterPrecedenceEqualExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitPrecedenceEqualExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitPrecedenceEqualExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FromClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_fromClause;
    }

	KW_FROM() {
	    return this.getToken(InceptorOracleParser.KW_FROM, 0);
	};

	joinSource() {
	    return this.getTypedRuleContext(JoinSourceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterFromClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitFromClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitFromClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class JoinSourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_joinSource;
    }

	fromSource = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FromSourceContext);
	    } else {
	        return this.getTypedRuleContext(FromSourceContext,i);
	    }
	};

	joinToken = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(JoinTokenContext);
	    } else {
	        return this.getTypedRuleContext(JoinTokenContext,i);
	    }
	};

	joinTokenRequireOn = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(JoinTokenRequireOnContext);
	    } else {
	        return this.getTypedRuleContext(JoinTokenRequireOnContext,i);
	    }
	};

	KW_ON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.KW_ON);
	    } else {
	        return this.getToken(InceptorOracleParser.KW_ON, i);
	    }
	};


	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	uniqueJoinToken() {
	    return this.getTypedRuleContext(UniqueJoinTokenContext,0);
	};

	uniqueJoinSource = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UniqueJoinSourceContext);
	    } else {
	        return this.getTypedRuleContext(UniqueJoinSourceContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterJoinSource(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitJoinSource(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitJoinSource(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UniqueJoinSourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_uniqueJoinSource;
    }

	fromSource() {
	    return this.getTypedRuleContext(FromSourceContext,0);
	};

	uniqueJoinExpr() {
	    return this.getTypedRuleContext(UniqueJoinExprContext,0);
	};

	KW_PRESERVE() {
	    return this.getToken(InceptorOracleParser.KW_PRESERVE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterUniqueJoinSource(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitUniqueJoinSource(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitUniqueJoinSource(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UniqueJoinExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_uniqueJoinExpr;
        this._expression = null; // ExpressionContext
        this.e1 = []; // of ExpressionContexts
    }

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterUniqueJoinExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitUniqueJoinExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitUniqueJoinExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UniqueJoinTokenContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_uniqueJoinToken;
    }

	KW_UNIQUEJOIN() {
	    return this.getToken(InceptorOracleParser.KW_UNIQUEJOIN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterUniqueJoinToken(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitUniqueJoinToken(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitUniqueJoinToken(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class JoinTokenContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_joinToken;
    }

	KW_NATURAL() {
	    return this.getToken(InceptorOracleParser.KW_NATURAL, 0);
	};

	KW_JOIN() {
	    return this.getToken(InceptorOracleParser.KW_JOIN, 0);
	};

	KW_CROSS() {
	    return this.getToken(InceptorOracleParser.KW_CROSS, 0);
	};

	COMMA() {
	    return this.getToken(InceptorOracleParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterJoinToken(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitJoinToken(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitJoinToken(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class JoinTokenRequireOnContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_joinTokenRequireOn;
    }

	KW_JOIN() {
	    return this.getToken(InceptorOracleParser.KW_JOIN, 0);
	};

	KW_INNER() {
	    return this.getToken(InceptorOracleParser.KW_INNER, 0);
	};

	KW_LEFT() {
	    return this.getToken(InceptorOracleParser.KW_LEFT, 0);
	};

	KW_OUTER() {
	    return this.getToken(InceptorOracleParser.KW_OUTER, 0);
	};

	KW_RIGHT() {
	    return this.getToken(InceptorOracleParser.KW_RIGHT, 0);
	};

	KW_FULL() {
	    return this.getToken(InceptorOracleParser.KW_FULL, 0);
	};

	KW_SEMI() {
	    return this.getToken(InceptorOracleParser.KW_SEMI, 0);
	};

	KW_ANTISEMI() {
	    return this.getToken(InceptorOracleParser.KW_ANTISEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterJoinTokenRequireOn(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitJoinTokenRequireOn(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitJoinTokenRequireOn(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LateralViewContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_lateralView;
    }

	KW_LATERAL() {
	    return this.getToken(InceptorOracleParser.KW_LATERAL, 0);
	};

	KW_VIEW() {
	    return this.getToken(InceptorOracleParser.KW_VIEW, 0);
	};

	KW_OUTER() {
	    return this.getToken(InceptorOracleParser.KW_OUTER, 0);
	};

	normfunction() {
	    return this.getTypedRuleContext(NormfunctionContext,0);
	};

	tableAlias() {
	    return this.getTypedRuleContext(TableAliasContext,0);
	};

	KW_AS() {
	    return this.getToken(InceptorOracleParser.KW_AS, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterLateralView(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitLateralView(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitLateralView(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FromSourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_fromSource;
    }

	patternSource() {
	    return this.getTypedRuleContext(PatternSourceContext,0);
	};

	partitionedTableFunction() {
	    return this.getTypedRuleContext(PartitionedTableFunctionContext,0);
	};

	tableSource() {
	    return this.getTypedRuleContext(TableSourceContext,0);
	};

	subQuerySource() {
	    return this.getTypedRuleContext(SubQuerySourceContext,0);
	};

	valuesSource() {
	    return this.getTypedRuleContext(ValuesSourceContext,0);
	};

	lateralView = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LateralViewContext);
	    } else {
	        return this.getTypedRuleContext(LateralViewContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterFromSource(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitFromSource(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitFromSource(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableSourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_tableSource;
        this.tabname = null; // TableNameContext
        this.props = null; // TablePropertiesContext
        this.ts = null; // TableSampleContext
        this.sw = null; // Stream_window_clauseContext
    }

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	alias() {
	    return this.getTypedRuleContext(AliasContext,0);
	};

	tableProperties() {
	    return this.getTypedRuleContext(TablePropertiesContext,0);
	};

	tableSample() {
	    return this.getTypedRuleContext(TableSampleContext,0);
	};

	stream_window_clause() {
	    return this.getTypedRuleContext(Stream_window_clauseContext,0);
	};

	KW_AS() {
	    return this.getToken(InceptorOracleParser.KW_AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterTableSource(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitTableSource(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitTableSource(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SubQuerySourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_subQuerySource;
    }

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	queryStatementExpression() {
	    return this.getTypedRuleContext(QueryStatementExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	alias() {
	    return this.getTypedRuleContext(AliasContext,0);
	};

	KW_AS() {
	    return this.getToken(InceptorOracleParser.KW_AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterSubQuerySource(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitSubQuerySource(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitSubQuerySource(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ValuesSourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_valuesSource;
    }

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	valuesClause() {
	    return this.getTypedRuleContext(ValuesClauseContext,0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	tableOrColumnAliasOfValues() {
	    return this.getTypedRuleContext(TableOrColumnAliasOfValuesContext,0);
	};

	KW_AS() {
	    return this.getToken(InceptorOracleParser.KW_AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterValuesSource(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitValuesSource(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitValuesSource(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PatternSourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_patternSource;
    }

	KW_PATTERN() {
	    return this.getToken(InceptorOracleParser.KW_PATTERN, 0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	patternExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PatternExpressionContext);
	    } else {
	        return this.getTypedRuleContext(PatternExpressionContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	patternTimewindow() {
	    return this.getTypedRuleContext(PatternTimewindowContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterPatternSource(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitPatternSource(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitPatternSource(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PatternEventContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_patternEvent;
        this.stream = null; // TableSourceContext
    }

	Identifier() {
	    return this.getToken(InceptorOracleParser.Identifier, 0);
	};

	EQUAL() {
	    return this.getToken(InceptorOracleParser.EQUAL, 0);
	};

	LSQUARE() {
	    return this.getToken(InceptorOracleParser.LSQUARE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RSQUARE() {
	    return this.getToken(InceptorOracleParser.RSQUARE, 0);
	};

	subQuerySource() {
	    return this.getTypedRuleContext(SubQuerySourceContext,0);
	};

	tableSource() {
	    return this.getTypedRuleContext(TableSourceContext,0);
	};

	timesExpr() {
	    return this.getTypedRuleContext(TimesExprContext,0);
	};

	oneOrMoreExpr() {
	    return this.getTypedRuleContext(OneOrMoreExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterPatternEvent(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitPatternEvent(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitPatternEvent(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TimesExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_timesExpr;
        this.numerator = null; // Token
    }

	LSQUARE() {
	    return this.getToken(InceptorOracleParser.LSQUARE, 0);
	};

	KW_PATTERN_TIMES() {
	    return this.getToken(InceptorOracleParser.KW_PATTERN_TIMES, 0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	RSQUARE() {
	    return this.getToken(InceptorOracleParser.RSQUARE, 0);
	};

	Number() {
	    return this.getToken(InceptorOracleParser.Number, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterTimesExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitTimesExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitTimesExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OneOrMoreExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_oneOrMoreExpr;
    }

	PLUS() {
	    return this.getToken(InceptorOracleParser.PLUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterOneOrMoreExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitOneOrMoreExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitOneOrMoreExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PatternExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_patternExpression;
    }

	patternEvent() {
	    return this.getTypedRuleContext(PatternEventContext,0);
	};

	eventOp = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EventOpContext);
	    } else {
	        return this.getTypedRuleContext(EventOpContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterPatternExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitPatternExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitPatternExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EventOpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_eventOp;
    }

	COMMA() {
	    return this.getToken(InceptorOracleParser.COMMA, 0);
	};

	KW_FOLLOWEDBY() {
	    return this.getToken(InceptorOracleParser.KW_FOLLOWEDBY, 0);
	};

	KW_NOTFOLLOWEDBY() {
	    return this.getToken(InceptorOracleParser.KW_NOTFOLLOWEDBY, 0);
	};

	KW_NOTNEXT() {
	    return this.getToken(InceptorOracleParser.KW_NOTNEXT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterEventOp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitEventOp(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitEventOp(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PatternTimewindowContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_patternTimewindow;
    }

	KW_WITHIN() {
	    return this.getToken(InceptorOracleParser.KW_WITHIN, 0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	cepIntervalLiteral() {
	    return this.getTypedRuleContext(CepIntervalLiteralContext,0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterPatternTimewindow(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitPatternTimewindow(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitPatternTimewindow(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CepIntervalLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_cepIntervalLiteral;
        this.qualifiers = null; // CepIntervalQualifiersContext
    }

	StringLiteral() {
	    return this.getToken(InceptorOracleParser.StringLiteral, 0);
	};

	cepIntervalQualifiers() {
	    return this.getTypedRuleContext(CepIntervalQualifiersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterCepIntervalLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitCepIntervalLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitCepIntervalLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CepIntervalQualifiersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_cepIntervalQualifiers;
    }

	KW_DAY() {
	    return this.getToken(InceptorOracleParser.KW_DAY, 0);
	};

	KW_HOUR() {
	    return this.getToken(InceptorOracleParser.KW_HOUR, 0);
	};

	KW_MINUTE() {
	    return this.getToken(InceptorOracleParser.KW_MINUTE, 0);
	};

	KW_SECOND() {
	    return this.getToken(InceptorOracleParser.KW_SECOND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterCepIntervalQualifiers(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitCepIntervalQualifiers(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitCepIntervalQualifiers(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableBucketSampleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_tableBucketSample;
        this.numerator = null; // Token
        this.denominator = null; // Token
        this._expression = null; // ExpressionContext
        this.expr = []; // of ExpressionContexts
    }

	KW_TABLESAMPLE() {
	    return this.getToken(InceptorOracleParser.KW_TABLESAMPLE, 0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	KW_BUCKET() {
	    return this.getToken(InceptorOracleParser.KW_BUCKET, 0);
	};

	KW_OUT() {
	    return this.getToken(InceptorOracleParser.KW_OUT, 0);
	};

	KW_OF() {
	    return this.getToken(InceptorOracleParser.KW_OF, 0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	Number = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.Number);
	    } else {
	        return this.getToken(InceptorOracleParser.Number, i);
	    }
	};


	KW_ON() {
	    return this.getToken(InceptorOracleParser.KW_ON, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterTableBucketSample(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitTableBucketSample(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitTableBucketSample(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SplitSampleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_splitSample;
        this.numerator = null; // Token
        this.percent = null; // Token
    }

	KW_TABLESAMPLE() {
	    return this.getToken(InceptorOracleParser.KW_TABLESAMPLE, 0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	KW_ROWS() {
	    return this.getToken(InceptorOracleParser.KW_ROWS, 0);
	};

	Number() {
	    return this.getToken(InceptorOracleParser.Number, 0);
	};

	KW_PERCENT() {
	    return this.getToken(InceptorOracleParser.KW_PERCENT, 0);
	};

	ByteLengthLiteral() {
	    return this.getToken(InceptorOracleParser.ByteLengthLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterSplitSample(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitSplitSample(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitSplitSample(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableSampleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_tableSample;
    }

	tableBucketSample() {
	    return this.getTypedRuleContext(TableBucketSampleContext,0);
	};

	splitSample() {
	    return this.getTypedRuleContext(SplitSampleContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterTableSample(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitTableSample(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitTableSample(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NormfunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_normfunction;
    }

	functionName() {
	    return this.getTypedRuleContext(FunctionNameContext,0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	STAR() {
	    return this.getToken(InceptorOracleParser.STAR, 0);
	};

	KW_OVER() {
	    return this.getToken(InceptorOracleParser.KW_OVER, 0);
	};

	window_specification() {
	    return this.getTypedRuleContext(Window_specificationContext,0);
	};

	KW_DISTINCT() {
	    return this.getToken(InceptorOracleParser.KW_DISTINCT, 0);
	};

	paramExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ParamExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ParamExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterNormfunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitNormfunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitNormfunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FuncOpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_funcOp;
    }

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	STAR() {
	    return this.getToken(InceptorOracleParser.STAR, 0);
	};

	KW_DISTINCT() {
	    return this.getToken(InceptorOracleParser.KW_DISTINCT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterFuncOp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitFuncOp(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitFuncOp(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FunctionNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_functionName;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	dialectFunctionName() {
	    return this.getTypedRuleContext(DialectFunctionNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterFunctionName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitFunctionName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitFunctionName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WindowFuncIgnoreNullsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_windowFuncIgnoreNulls;
        this.ignore = null; // Token
        this.respect = null; // Token
    }

	KW_NULLS() {
	    return this.getToken(InceptorOracleParser.KW_NULLS, 0);
	};

	KW_IGNORE() {
	    return this.getToken(InceptorOracleParser.KW_IGNORE, 0);
	};

	KW_RESPECT() {
	    return this.getToken(InceptorOracleParser.KW_RESPECT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterWindowFuncIgnoreNulls(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitWindowFuncIgnoreNulls(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitWindowFuncIgnoreNulls(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ParamExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_paramExpression;
        this.namedNotation = null; // Token
    }

	selectExpression() {
	    return this.getTypedRuleContext(SelectExpressionContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	windowFuncIgnoreNulls() {
	    return this.getTypedRuleContext(WindowFuncIgnoreNullsContext,0);
	};

	NAMED_NOTATION() {
	    return this.getToken(InceptorOracleParser.NAMED_NOTATION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterParamExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitParamExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitParamExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CastExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_castExpression;
    }

	KW_CAST() {
	    return this.getToken(InceptorOracleParser.KW_CAST, 0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	KW_AS() {
	    return this.getToken(InceptorOracleParser.KW_AS, 0);
	};

	primitiveType() {
	    return this.getTypedRuleContext(PrimitiveTypeContext,0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterCastExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitCastExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitCastExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExistExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_existExpression;
    }

	KW_EXISTS() {
	    return this.getToken(InceptorOracleParser.KW_EXISTS, 0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	selectStatement() {
	    return this.getTypedRuleContext(SelectStatementContext,0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterExistExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitExistExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitExistExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WidcardExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_widcardExpression;
    }

	KW_WIDCARD() {
	    return this.getToken(InceptorOracleParser.KW_WIDCARD, 0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	Number() {
	    return this.getToken(InceptorOracleParser.Number, 0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterWidcardExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitWidcardExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitWidcardExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InRightOpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_inRightOp;
        this.expr = null; // ExpressionsInParenthesisContext
    }

	KW_IN() {
	    return this.getToken(InceptorOracleParser.KW_IN, 0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	queryStatementExpression() {
	    return this.getTypedRuleContext(QueryStatementExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	expressionsInParenthesis() {
	    return this.getTypedRuleContext(ExpressionsInParenthesisContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterInRightOp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitInRightOp(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitInRightOp(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BetweenRightOpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_betweenRightOp;
        this.min = null; // PrecedenceBitwiseOrExpressionContext
        this.max = null; // PrecedenceBitwiseOrExpressionContext
    }

	KW_BETWEEN() {
	    return this.getToken(InceptorOracleParser.KW_BETWEEN, 0);
	};

	KW_AND() {
	    return this.getToken(InceptorOracleParser.KW_AND, 0);
	};

	precedenceBitwiseOrExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PrecedenceBitwiseOrExpressionContext);
	    } else {
	        return this.getTypedRuleContext(PrecedenceBitwiseOrExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterBetweenRightOp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitBetweenRightOp(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitBetweenRightOp(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LikeanyRightOpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_likeanyRightOp;
        this.expr = null; // ExpressionsInParenthesisContext
    }

	KW_LIKE() {
	    return this.getToken(InceptorOracleParser.KW_LIKE, 0);
	};

	KW_ANY() {
	    return this.getToken(InceptorOracleParser.KW_ANY, 0);
	};

	expressionsInParenthesis() {
	    return this.getTypedRuleContext(ExpressionsInParenthesisContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterLikeanyRightOp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitLikeanyRightOp(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitLikeanyRightOp(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LikeallRightOpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_likeallRightOp;
        this.expr = null; // ExpressionsInParenthesisContext
    }

	KW_LIKE() {
	    return this.getToken(InceptorOracleParser.KW_LIKE, 0);
	};

	KW_ALL() {
	    return this.getToken(InceptorOracleParser.KW_ALL, 0);
	};

	expressionsInParenthesis() {
	    return this.getTypedRuleContext(ExpressionsInParenthesisContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterLikeallRightOp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitLikeallRightOp(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitLikeallRightOp(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExtractExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_extractExpression;
    }

	KW_EXTRACT() {
	    return this.getToken(InceptorOracleParser.KW_EXTRACT, 0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	extractTarget() {
	    return this.getTypedRuleContext(ExtractTargetContext,0);
	};

	KW_FROM() {
	    return this.getToken(InceptorOracleParser.KW_FROM, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterExtractExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitExtractExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitExtractExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SubstringExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_substringExpression;
        this.startPos = null; // ExpressionContext
        this.length = null; // ExpressionContext
    }

	KW_SUBSTRING() {
	    return this.getToken(InceptorOracleParser.KW_SUBSTRING, 0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	seperatorFrom() {
	    return this.getTypedRuleContext(SeperatorFromContext,0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	seperatorFor() {
	    return this.getTypedRuleContext(SeperatorForContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterSubstringExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitSubstringExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitSubstringExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExtractTargetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_extractTarget;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterExtractTarget(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitExtractTarget(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitExtractTarget(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SeperatorFromContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_seperatorFrom;
    }

	KW_FROM() {
	    return this.getToken(InceptorOracleParser.KW_FROM, 0);
	};

	COMMA() {
	    return this.getToken(InceptorOracleParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterSeperatorFrom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitSeperatorFrom(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitSeperatorFrom(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SeperatorForContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_seperatorFor;
    }

	KW_FOR() {
	    return this.getToken(InceptorOracleParser.KW_FOR, 0);
	};

	COMMA() {
	    return this.getToken(InceptorOracleParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterSeperatorFor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitSeperatorFor(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitSeperatorFor(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class YearFuncExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_yearFuncExpression;
    }

	KW_YEAR() {
	    return this.getToken(InceptorOracleParser.KW_YEAR, 0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	tableOrColumn() {
	    return this.getTypedRuleContext(TableOrColumnContext,0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterYearFuncExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitYearFuncExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitYearFuncExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MonthFuncExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_monthFuncExpression;
    }

	KW_MONTH() {
	    return this.getToken(InceptorOracleParser.KW_MONTH, 0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	tableOrColumn() {
	    return this.getTypedRuleContext(TableOrColumnContext,0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterMonthFuncExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitMonthFuncExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitMonthFuncExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DayFuncExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_dayFuncExpression;
    }

	KW_DAY() {
	    return this.getToken(InceptorOracleParser.KW_DAY, 0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	tableOrColumn() {
	    return this.getTypedRuleContext(TableOrColumnContext,0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDayFuncExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDayFuncExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDayFuncExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class HourFuncExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_hourFuncExpression;
    }

	KW_HOUR() {
	    return this.getToken(InceptorOracleParser.KW_HOUR, 0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	tableOrColumn() {
	    return this.getTypedRuleContext(TableOrColumnContext,0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterHourFuncExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitHourFuncExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitHourFuncExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MinuteFuncExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_minuteFuncExpression;
    }

	KW_MINUTE() {
	    return this.getToken(InceptorOracleParser.KW_MINUTE, 0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	tableOrColumn() {
	    return this.getTypedRuleContext(TableOrColumnContext,0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterMinuteFuncExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitMinuteFuncExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitMinuteFuncExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SecondFuncExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_secondFuncExpression;
    }

	KW_SECOND() {
	    return this.getToken(InceptorOracleParser.KW_SECOND, 0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	tableOrColumn() {
	    return this.getTypedRuleContext(TableOrColumnContext,0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterSecondFuncExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitSecondFuncExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitSecondFuncExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CaseExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_caseExpression;
    }

	KW_CASE() {
	    return this.getToken(InceptorOracleParser.KW_CASE, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	dialectEndCase() {
	    return this.getTypedRuleContext(DialectEndCaseContext,0);
	};

	KW_WHEN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.KW_WHEN);
	    } else {
	        return this.getToken(InceptorOracleParser.KW_WHEN, i);
	    }
	};


	KW_THEN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.KW_THEN);
	    } else {
	        return this.getToken(InceptorOracleParser.KW_THEN, i);
	    }
	};


	KW_ELSE() {
	    return this.getToken(InceptorOracleParser.KW_ELSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterCaseExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitCaseExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitCaseExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WhenExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_whenExpression;
    }

	KW_CASE() {
	    return this.getToken(InceptorOracleParser.KW_CASE, 0);
	};

	dialectEndCase() {
	    return this.getTypedRuleContext(DialectEndCaseContext,0);
	};

	KW_WHEN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.KW_WHEN);
	    } else {
	        return this.getToken(InceptorOracleParser.KW_WHEN, i);
	    }
	};


	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	KW_THEN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.KW_THEN);
	    } else {
	        return this.getToken(InceptorOracleParser.KW_THEN, i);
	    }
	};


	KW_ELSE() {
	    return this.getToken(InceptorOracleParser.KW_ELSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterWhenExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitWhenExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitWhenExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_condition;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitCondition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitCondition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResourceListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_resourceList;
    }

	resource = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ResourceContext);
	    } else {
	        return this.getTypedRuleContext(ResourceContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterResourceList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitResourceList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitResourceList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_resource;
        this.resType = null; // ResourceTypeContext
        this.resPath = null; // Token
    }

	resourceType() {
	    return this.getTypedRuleContext(ResourceTypeContext,0);
	};

	StringLiteral() {
	    return this.getToken(InceptorOracleParser.StringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterResource(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitResource(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitResource(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResourceTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_resourceType;
    }

	KW_JAR() {
	    return this.getToken(InceptorOracleParser.KW_JAR, 0);
	};

	KW_FILE() {
	    return this.getToken(InceptorOracleParser.KW_FILE, 0);
	};

	KW_ARCHIVE() {
	    return this.getToken(InceptorOracleParser.KW_ARCHIVE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterResourceType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitResourceType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitResourceType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GraphPathStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_graphPathStatement;
        this.vertex = null; // GraphReferenceContext
        this.edge = null; // GraphReferenceContext
        this.pattern = null; // GraphPatternContext
        this.vertexIdCol = null; // IdentifierContext
        this.edgeSrcCol = null; // IdentifierContext
        this.edgeDstCol = null; // IdentifierContext
    }

	KW_SELECT() {
	    return this.getToken(InceptorOracleParser.KW_SELECT, 0);
	};

	graphSelectClause() {
	    return this.getTypedRuleContext(GraphSelectClauseContext,0);
	};

	KW_FROM() {
	    return this.getToken(InceptorOracleParser.KW_FROM, 0);
	};

	KW_GRAPH_PATH() {
	    return this.getToken(InceptorOracleParser.KW_GRAPH_PATH, 0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	graphReference = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GraphReferenceContext);
	    } else {
	        return this.getTypedRuleContext(GraphReferenceContext,i);
	    }
	};

	graphPattern() {
	    return this.getTypedRuleContext(GraphPatternContext,0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterGraphPathStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitGraphPathStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitGraphPathStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GraphReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_graphReference;
    }

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	selectStatement() {
	    return this.getTypedRuleContext(SelectStatementContext,0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	tableSource() {
	    return this.getTypedRuleContext(TableSourceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterGraphReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitGraphReference(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitGraphReference(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GraphPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_graphPattern;
    }

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	graphItem() {
	    return this.getTypedRuleContext(GraphItemContext,0);
	};

	graphEdge = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GraphEdgeContext);
	    } else {
	        return this.getTypedRuleContext(GraphEdgeContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterGraphPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitGraphPattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitGraphPattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GraphEdgeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_graphEdge;
        this.edge = null; // GraphItemContext
        this.dst = null; // GraphItemContext
    }

	MINUS() {
	    return this.getToken(InceptorOracleParser.MINUS, 0);
	};

	LSQUARE() {
	    return this.getToken(InceptorOracleParser.LSQUARE, 0);
	};

	RSQUARE() {
	    return this.getToken(InceptorOracleParser.RSQUARE, 0);
	};

	RARROW() {
	    return this.getToken(InceptorOracleParser.RARROW, 0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	graphItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GraphItemContext);
	    } else {
	        return this.getTypedRuleContext(GraphItemContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterGraphEdge(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitGraphEdge(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitGraphEdge(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GraphItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_graphItem;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	LCURLY() {
	    return this.getToken(InceptorOracleParser.LCURLY, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RCURLY() {
	    return this.getToken(InceptorOracleParser.RCURLY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterGraphItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitGraphItem(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitGraphItem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GraphSelectClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_graphSelectClause;
    }

	STAR() {
	    return this.getToken(InceptorOracleParser.STAR, 0);
	};

	graphSelectTable = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GraphSelectTableContext);
	    } else {
	        return this.getTypedRuleContext(GraphSelectTableContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterGraphSelectClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitGraphSelectClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitGraphSelectClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GraphSelectTableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_graphSelectTable;
        this.t = null; // IdentifierContext
        this.c = null; // IdentifierContext
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	DOT() {
	    return this.getToken(InceptorOracleParser.DOT, 0);
	};

	STAR() {
	    return this.getToken(InceptorOracleParser.STAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterGraphSelectTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitGraphSelectTable(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitGraphSelectTable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GroupingSetExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_groupingSetExpression;
    }

	rollupClause() {
	    return this.getTypedRuleContext(RollupClauseContext,0);
	};

	cubeClause() {
	    return this.getTypedRuleContext(CubeClauseContext,0);
	};

	groupingSetsClause() {
	    return this.getTypedRuleContext(GroupingSetsClauseContext,0);
	};

	groupByExpressionList() {
	    return this.getTypedRuleContext(GroupByExpressionListContext,0);
	};

	groupByExpression() {
	    return this.getTypedRuleContext(GroupByExpressionContext,0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterGroupingSetExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitGroupingSetExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitGroupingSetExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OrdinaryGroupingSetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_ordinaryGroupingSet;
    }

	groupByExpressionList() {
	    return this.getTypedRuleContext(GroupByExpressionListContext,0);
	};

	groupByExpression() {
	    return this.getTypedRuleContext(GroupByExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterOrdinaryGroupingSet(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitOrdinaryGroupingSet(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitOrdinaryGroupingSet(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GroupByExpressionListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_groupByExpressionList;
    }

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	groupByExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GroupByExpressionContext);
	    } else {
	        return this.getTypedRuleContext(GroupByExpressionContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterGroupByExpressionList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitGroupByExpressionList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitGroupByExpressionList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GroupByElementsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_groupByElements;
    }

	groupingSetsClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GroupingSetsClauseContext);
	    } else {
	        return this.getTypedRuleContext(GroupingSetsClauseContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	rollupClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RollupClauseContext);
	    } else {
	        return this.getTypedRuleContext(RollupClauseContext,i);
	    }
	};

	cubeClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CubeClauseContext);
	    } else {
	        return this.getTypedRuleContext(CubeClauseContext,i);
	    }
	};

	groupByExpression() {
	    return this.getTypedRuleContext(GroupByExpressionContext,0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterGroupByElements(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitGroupByElements(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitGroupByElements(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RollupClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_rollupClause;
    }

	KW_ROLLUP() {
	    return this.getToken(InceptorOracleParser.KW_ROLLUP, 0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	ordinaryGroupingSet = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OrdinaryGroupingSetContext);
	    } else {
	        return this.getTypedRuleContext(OrdinaryGroupingSetContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterRollupClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitRollupClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitRollupClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CubeClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_cubeClause;
    }

	KW_CUBE() {
	    return this.getToken(InceptorOracleParser.KW_CUBE, 0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	ordinaryGroupingSet = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OrdinaryGroupingSetContext);
	    } else {
	        return this.getTypedRuleContext(OrdinaryGroupingSetContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterCubeClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitCubeClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitCubeClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GroupingSetsClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_groupingSetsClause;
    }

	KW_GROUPING() {
	    return this.getToken(InceptorOracleParser.KW_GROUPING, 0);
	};

	KW_SETS() {
	    return this.getToken(InceptorOracleParser.KW_SETS, 0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	groupingSetExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GroupingSetExpressionContext);
	    } else {
	        return this.getTypedRuleContext(GroupingSetExpressionContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterGroupingSetsClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitGroupingSetsClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitGroupingSetsClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GroupByClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_groupByClause;
    }

	KW_GROUP() {
	    return this.getToken(InceptorOracleParser.KW_GROUP, 0);
	};

	KW_BY() {
	    return this.getToken(InceptorOracleParser.KW_BY, 0);
	};

	groupByElements = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GroupByElementsContext);
	    } else {
	        return this.getTypedRuleContext(GroupByElementsContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterGroupByClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitGroupByClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitGroupByClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GroupByExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_groupByExpression;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterGroupByExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitGroupByExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitGroupByExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class HiveDataOpStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_hiveDataOpStatement;
    }

	loadStatement() {
	    return this.getTypedRuleContext(LoadStatementContext,0);
	};

	exportStatement() {
	    return this.getTypedRuleContext(ExportStatementContext,0);
	};

	importStatement() {
	    return this.getTypedRuleContext(ImportStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterHiveDataOpStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitHiveDataOpStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitHiveDataOpStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LoadStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_loadStatement;
        this.islocal = null; // Token
        this.path = null; // Token
        this.isoverwrite = null; // Token
        this.tab = null; // TableOrPartitionContext
    }

	KW_LOAD() {
	    return this.getToken(InceptorOracleParser.KW_LOAD, 0);
	};

	KW_DATA() {
	    return this.getToken(InceptorOracleParser.KW_DATA, 0);
	};

	KW_INPATH() {
	    return this.getToken(InceptorOracleParser.KW_INPATH, 0);
	};

	KW_INTO() {
	    return this.getToken(InceptorOracleParser.KW_INTO, 0);
	};

	KW_TABLE() {
	    return this.getToken(InceptorOracleParser.KW_TABLE, 0);
	};

	StringLiteral() {
	    return this.getToken(InceptorOracleParser.StringLiteral, 0);
	};

	tableOrPartition() {
	    return this.getTypedRuleContext(TableOrPartitionContext,0);
	};

	KW_LOCAL() {
	    return this.getToken(InceptorOracleParser.KW_LOCAL, 0);
	};

	KW_OVERWRITE() {
	    return this.getToken(InceptorOracleParser.KW_OVERWRITE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterLoadStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitLoadStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitLoadStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExportStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_exportStatement;
        this.tab = null; // TableOrPartitionContext
        this.path = null; // Token
    }

	KW_EXPORT() {
	    return this.getToken(InceptorOracleParser.KW_EXPORT, 0);
	};

	KW_TABLE() {
	    return this.getToken(InceptorOracleParser.KW_TABLE, 0);
	};

	KW_TO() {
	    return this.getToken(InceptorOracleParser.KW_TO, 0);
	};

	tableOrPartition() {
	    return this.getTypedRuleContext(TableOrPartitionContext,0);
	};

	StringLiteral() {
	    return this.getToken(InceptorOracleParser.StringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterExportStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitExportStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitExportStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ImportStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_importStatement;
        this.ext = null; // Token
        this.tab = null; // TableOrPartitionContext
        this.path = null; // Token
    }

	KW_IMPORT() {
	    return this.getToken(InceptorOracleParser.KW_IMPORT, 0);
	};

	KW_FROM() {
	    return this.getToken(InceptorOracleParser.KW_FROM, 0);
	};

	KW_TABLE() {
	    return this.getToken(InceptorOracleParser.KW_TABLE, 0);
	};

	StringLiteral() {
	    return this.getToken(InceptorOracleParser.StringLiteral, 0);
	};

	tableLocation() {
	    return this.getTypedRuleContext(TableLocationContext,0);
	};

	tableOrPartition() {
	    return this.getTypedRuleContext(TableOrPartitionContext,0);
	};

	KW_EXTERNAL() {
	    return this.getToken(InceptorOracleParser.KW_EXTERNAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterImportStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitImportStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitImportStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateHyperbaseIndexStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_createHyperbaseIndexStatement;
        this.indexName = null; // IdentifierContext
        this.indexedCols = null; // HyperbaseColumnNameListContext
    }

	KW_CREATE() {
	    return this.getToken(InceptorOracleParser.KW_CREATE, 0);
	};

	KW_LOCAL() {
	    return this.getToken(InceptorOracleParser.KW_LOCAL, 0);
	};

	KW_INDEX() {
	    return this.getToken(InceptorOracleParser.KW_INDEX, 0);
	};

	KW_ON() {
	    return this.getToken(InceptorOracleParser.KW_ON, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	hyperbaseColumnNameList() {
	    return this.getTypedRuleContext(HyperbaseColumnNameListContext,0);
	};

	attachColumn() {
	    return this.getTypedRuleContext(AttachColumnContext,0);
	};

	KW_GLOBAL() {
	    return this.getToken(InceptorOracleParser.KW_GLOBAL, 0);
	};

	KW_FULLTEXT() {
	    return this.getToken(InceptorOracleParser.KW_FULLTEXT, 0);
	};

	fulltextColsList() {
	    return this.getTypedRuleContext(FulltextColsListContext,0);
	};

	shardNumber() {
	    return this.getTypedRuleContext(ShardNumberContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterCreateHyperbaseIndexStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitCreateHyperbaseIndexStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitCreateHyperbaseIndexStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RebuildHolodeskGlobalIndexStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_rebuildHolodeskGlobalIndexStatement;
        this.indexName = null; // IdentifierContext
        this.indexedCols = null; // HyperbaseColumnNameListContext
    }

	KW_REBUILD() {
	    return this.getToken(InceptorOracleParser.KW_REBUILD, 0);
	};

	KW_GLOBAL() {
	    return this.getToken(InceptorOracleParser.KW_GLOBAL, 0);
	};

	KW_INDEX() {
	    return this.getToken(InceptorOracleParser.KW_INDEX, 0);
	};

	KW_ON() {
	    return this.getToken(InceptorOracleParser.KW_ON, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	hyperbaseColumnNameList() {
	    return this.getTypedRuleContext(HyperbaseColumnNameListContext,0);
	};

	attachColumn() {
	    return this.getTypedRuleContext(AttachColumnContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterRebuildHolodeskGlobalIndexStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitRebuildHolodeskGlobalIndexStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitRebuildHolodeskGlobalIndexStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FulltextColsListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_fulltextColsList;
    }

	fulltextIndexAndProps = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FulltextIndexAndPropsContext);
	    } else {
	        return this.getTypedRuleContext(FulltextIndexAndPropsContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterFulltextColsList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitFulltextColsList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitFulltextColsList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FulltextIndexAndPropsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_fulltextIndexAndProps;
        this.coln = null; // IdentifierContext
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	fulltextIndexProps() {
	    return this.getTypedRuleContext(FulltextIndexPropsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterFulltextIndexAndProps(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitFulltextIndexAndProps(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitFulltextIndexAndProps(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FulltextIndexPropsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_fulltextIndexProps;
    }

	KW_DOCVALUES() {
	    return this.getToken(InceptorOracleParser.KW_DOCVALUES, 0);
	};

	LSQUARE() {
	    return this.getToken(InceptorOracleParser.LSQUARE, 0);
	};

	booleanValue() {
	    return this.getTypedRuleContext(BooleanValueContext,0);
	};

	RSQUARE() {
	    return this.getToken(InceptorOracleParser.RSQUARE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterFulltextIndexProps(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitFulltextIndexProps(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitFulltextIndexProps(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ShardNumberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_shardNumber;
    }

	KW_SHARD() {
	    return this.getToken(InceptorOracleParser.KW_SHARD, 0);
	};

	KW_NUM() {
	    return this.getToken(InceptorOracleParser.KW_NUM, 0);
	};

	Number() {
	    return this.getToken(InceptorOracleParser.Number, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterShardNumber(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitShardNumber(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitShardNumber(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropHyperbaseIndexStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_dropHyperbaseIndexStatement;
        this.indexName = null; // IdentifierContext
        this.tab = null; // TableNameContext
    }

	KW_DROP() {
	    return this.getToken(InceptorOracleParser.KW_DROP, 0);
	};

	KW_INDEX() {
	    return this.getToken(InceptorOracleParser.KW_INDEX, 0);
	};

	KW_ON() {
	    return this.getToken(InceptorOracleParser.KW_ON, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDropHyperbaseIndexStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDropHyperbaseIndexStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDropHyperbaseIndexStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class HyperbaseColumnNameListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_hyperbaseColumnNameList;
    }

	indexWithLength = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IndexWithLengthContext);
	    } else {
	        return this.getTypedRuleContext(IndexWithLengthContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterHyperbaseColumnNameList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitHyperbaseColumnNameList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitHyperbaseColumnNameList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IndexWithLengthContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_indexWithLength;
        this.coln = null; // IdentifierContext
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	segmentLength() {
	    return this.getTypedRuleContext(SegmentLengthContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterIndexWithLength(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitIndexWithLength(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitIndexWithLength(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SegmentLengthContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_segmentLength;
    }

	KW_SEGMENT() {
	    return this.getToken(InceptorOracleParser.KW_SEGMENT, 0);
	};

	KW_LENGTH() {
	    return this.getToken(InceptorOracleParser.KW_LENGTH, 0);
	};

	Number() {
	    return this.getToken(InceptorOracleParser.Number, 0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterSegmentLength(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitSegmentLength(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitSegmentLength(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AttachColumnContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_attachColumn;
        this.colNames = null; // ColumnNameListContext
    }

	KW_ATTACH() {
	    return this.getToken(InceptorOracleParser.KW_ATTACH, 0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	columnNameList() {
	    return this.getTypedRuleContext(ColumnNameListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterAttachColumn(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitAttachColumn(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitAttachColumn(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MandarinStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_mandarinStatement;
    }

	hiveDataOpStatement() {
	    return this.getTypedRuleContext(HiveDataOpStatementContext,0);
	};

	ddlStatement() {
	    return this.getTypedRuleContext(DdlStatementContext,0);
	};

	dclStatement() {
	    return this.getTypedRuleContext(DclStatementContext,0);
	};

	queryStatementExpression() {
	    return this.getTypedRuleContext(QueryStatementExpressionContext,0);
	};

	sqlCallStatement() {
	    return this.getTypedRuleContext(SqlCallStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterMandarinStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitMandarinStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitMandarinStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SelectStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_selectStatement;
        this.into = null; // Token
    }

	selectClause() {
	    return this.getTypedRuleContext(SelectClauseContext,0);
	};

	fromClause() {
	    return this.getTypedRuleContext(FromClauseContext,0);
	};

	leftValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LeftValueContext);
	    } else {
	        return this.getTypedRuleContext(LeftValueContext,i);
	    }
	};

	whereClause() {
	    return this.getTypedRuleContext(WhereClauseContext,0);
	};

	hierarchicalQueryClause() {
	    return this.getTypedRuleContext(HierarchicalQueryClauseContext,0);
	};

	groupByClause() {
	    return this.getTypedRuleContext(GroupByClauseContext,0);
	};

	havingClause() {
	    return this.getTypedRuleContext(HavingClauseContext,0);
	};

	qualifyClause() {
	    return this.getTypedRuleContext(QualifyClauseContext,0);
	};

	orderByClause() {
	    return this.getTypedRuleContext(OrderByClauseContext,0);
	};

	clusterByClause() {
	    return this.getTypedRuleContext(ClusterByClauseContext,0);
	};

	distributeByClause() {
	    return this.getTypedRuleContext(DistributeByClauseContext,0);
	};

	sortByClause() {
	    return this.getTypedRuleContext(SortByClauseContext,0);
	};

	window_clause() {
	    return this.getTypedRuleContext(Window_clauseContext,0);
	};

	stream_window_clause() {
	    return this.getTypedRuleContext(Stream_window_clauseContext,0);
	};

	limitClause() {
	    return this.getTypedRuleContext(LimitClauseContext,0);
	};

	forUpdateClause() {
	    return this.getTypedRuleContext(ForUpdateClauseContext,0);
	};

	KW_INTO() {
	    return this.getToken(InceptorOracleParser.KW_INTO, 0);
	};

	bulkCollect() {
	    return this.getTypedRuleContext(BulkCollectContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterSelectStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitSelectStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitSelectStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SubSelectStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_subSelectStatement;
        this.into = null; // Token
    }

	selectClause() {
	    return this.getTypedRuleContext(SelectClauseContext,0);
	};

	fromClause() {
	    return this.getTypedRuleContext(FromClauseContext,0);
	};

	leftValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LeftValueContext);
	    } else {
	        return this.getTypedRuleContext(LeftValueContext,i);
	    }
	};

	whereClause() {
	    return this.getTypedRuleContext(WhereClauseContext,0);
	};

	hierarchicalQueryClause() {
	    return this.getTypedRuleContext(HierarchicalQueryClauseContext,0);
	};

	groupByClause() {
	    return this.getTypedRuleContext(GroupByClauseContext,0);
	};

	havingClause() {
	    return this.getTypedRuleContext(HavingClauseContext,0);
	};

	qualifyClause() {
	    return this.getTypedRuleContext(QualifyClauseContext,0);
	};

	orderByClause() {
	    return this.getTypedRuleContext(OrderByClauseContext,0);
	};

	clusterByClause() {
	    return this.getTypedRuleContext(ClusterByClauseContext,0);
	};

	distributeByClause() {
	    return this.getTypedRuleContext(DistributeByClauseContext,0);
	};

	sortByClause() {
	    return this.getTypedRuleContext(SortByClauseContext,0);
	};

	window_clause() {
	    return this.getTypedRuleContext(Window_clauseContext,0);
	};

	stream_window_clause() {
	    return this.getTypedRuleContext(Stream_window_clauseContext,0);
	};

	limitClause() {
	    return this.getTypedRuleContext(LimitClauseContext,0);
	};

	forUpdateClause() {
	    return this.getTypedRuleContext(ForUpdateClauseContext,0);
	};

	KW_INTO() {
	    return this.getToken(InceptorOracleParser.KW_INTO, 0);
	};

	bulkCollect() {
	    return this.getTypedRuleContext(BulkCollectContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterSubSelectStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitSubSelectStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitSubSelectStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExplicitInsertStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_explicitInsertStatement;
    }

	KW_INSERT() {
	    return this.getToken(InceptorOracleParser.KW_INSERT, 0);
	};

	KW_INTO() {
	    return this.getToken(InceptorOracleParser.KW_INTO, 0);
	};

	tableOrPartition() {
	    return this.getTypedRuleContext(TableOrPartitionContext,0);
	};

	valuesClause() {
	    return this.getTypedRuleContext(ValuesClauseContext,0);
	};

	KW_TABLE() {
	    return this.getToken(InceptorOracleParser.KW_TABLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterExplicitInsertStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitExplicitInsertStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitExplicitInsertStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BatchInsertStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_batchInsertStatement;
    }

	KW_BATCH_INSERT() {
	    return this.getToken(InceptorOracleParser.KW_BATCH_INSERT, 0);
	};

	KW_INTO() {
	    return this.getToken(InceptorOracleParser.KW_INTO, 0);
	};

	tableOrPartition() {
	    return this.getTypedRuleContext(TableOrPartitionContext,0);
	};

	batchValuesClause() {
	    return this.getTypedRuleContext(BatchValuesClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterBatchInsertStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitBatchInsertStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitBatchInsertStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WithClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_withClause;
    }

	KW_WITH() {
	    return this.getToken(InceptorOracleParser.KW_WITH, 0);
	};

	queryStatementExpression() {
	    return this.getTypedRuleContext(QueryStatementExpressionContext,0);
	};

	withClauseElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WithClauseElementContext);
	    } else {
	        return this.getTypedRuleContext(WithClauseElementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterWithClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitWithClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitWithClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WithClauseElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_withClauseElement;
    }

	Identifier() {
	    return this.getToken(InceptorOracleParser.Identifier, 0);
	};

	KW_AS() {
	    return this.getToken(InceptorOracleParser.KW_AS, 0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	queryStatementExpression() {
	    return this.getTypedRuleContext(QueryStatementExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	KW_WITH() {
	    return this.getToken(InceptorOracleParser.KW_WITH, 0);
	};

	COMMA() {
	    return this.getToken(InceptorOracleParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterWithClauseElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitWithClauseElement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitWithClauseElement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Regular_bodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_regular_body;
    }

	insertClause() {
	    return this.getTypedRuleContext(InsertClauseContext,0);
	};

	withClause() {
	    return this.getTypedRuleContext(WithClauseContext,0);
	};

	queryStatementExpressionPlus() {
	    return this.getTypedRuleContext(QueryStatementExpressionPlusContext,0);
	};

	selectClause() {
	    return this.getTypedRuleContext(SelectClauseContext,0);
	};

	fromClause() {
	    return this.getTypedRuleContext(FromClauseContext,0);
	};

	whereClause() {
	    return this.getTypedRuleContext(WhereClauseContext,0);
	};

	hierarchicalQueryClause() {
	    return this.getTypedRuleContext(HierarchicalQueryClauseContext,0);
	};

	groupByClause() {
	    return this.getTypedRuleContext(GroupByClauseContext,0);
	};

	havingClause() {
	    return this.getTypedRuleContext(HavingClauseContext,0);
	};

	qualifyClause() {
	    return this.getTypedRuleContext(QualifyClauseContext,0);
	};

	orderByClause() {
	    return this.getTypedRuleContext(OrderByClauseContext,0);
	};

	clusterByClause() {
	    return this.getTypedRuleContext(ClusterByClauseContext,0);
	};

	distributeByClause() {
	    return this.getTypedRuleContext(DistributeByClauseContext,0);
	};

	sortByClause() {
	    return this.getTypedRuleContext(SortByClauseContext,0);
	};

	window_clause() {
	    return this.getTypedRuleContext(Window_clauseContext,0);
	};

	limitClause() {
	    return this.getTypedRuleContext(LimitClauseContext,0);
	};

	selectStatement() {
	    return this.getTypedRuleContext(SelectStatementContext,0);
	};

	crudStatement() {
	    return this.getTypedRuleContext(CrudStatementContext,0);
	};

	explicitInsertStatement() {
	    return this.getTypedRuleContext(ExplicitInsertStatementContext,0);
	};

	batchInsertStatement() {
	    return this.getTypedRuleContext(BatchInsertStatementContext,0);
	};

	graphPathStatement() {
	    return this.getTypedRuleContext(GraphPathStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterRegular_body(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitRegular_body(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitRegular_body(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BulkCollectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_bulkCollect;
    }

	KW_BULK() {
	    return this.getToken(InceptorOracleParser.KW_BULK, 0);
	};

	KW_COLLECT() {
	    return this.getToken(InceptorOracleParser.KW_COLLECT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterBulkCollect(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitBulkCollect(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitBulkCollect(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_body;
    }

	insertClause() {
	    return this.getTypedRuleContext(InsertClauseContext,0);
	};

	selectClause() {
	    return this.getTypedRuleContext(SelectClauseContext,0);
	};

	lateralView() {
	    return this.getTypedRuleContext(LateralViewContext,0);
	};

	whereClause() {
	    return this.getTypedRuleContext(WhereClauseContext,0);
	};

	hierarchicalQueryClause() {
	    return this.getTypedRuleContext(HierarchicalQueryClauseContext,0);
	};

	groupByClause() {
	    return this.getTypedRuleContext(GroupByClauseContext,0);
	};

	havingClause() {
	    return this.getTypedRuleContext(HavingClauseContext,0);
	};

	qualifyClause() {
	    return this.getTypedRuleContext(QualifyClauseContext,0);
	};

	orderByClause() {
	    return this.getTypedRuleContext(OrderByClauseContext,0);
	};

	clusterByClause() {
	    return this.getTypedRuleContext(ClusterByClauseContext,0);
	};

	distributeByClause() {
	    return this.getTypedRuleContext(DistributeByClauseContext,0);
	};

	sortByClause() {
	    return this.getTypedRuleContext(SortByClauseContext,0);
	};

	window_clause() {
	    return this.getTypedRuleContext(Window_clauseContext,0);
	};

	stream_window_clause() {
	    return this.getTypedRuleContext(Stream_window_clauseContext,0);
	};

	limitClause() {
	    return this.getTypedRuleContext(LimitClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitBody(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InsertClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_insertClause;
    }

	KW_INSERT() {
	    return this.getToken(InceptorOracleParser.KW_INSERT, 0);
	};

	KW_OVERWRITE() {
	    return this.getToken(InceptorOracleParser.KW_OVERWRITE, 0);
	};

	destination() {
	    return this.getTypedRuleContext(DestinationContext,0);
	};

	ifNotExists() {
	    return this.getTypedRuleContext(IfNotExistsContext,0);
	};

	KW_INTO() {
	    return this.getToken(InceptorOracleParser.KW_INTO, 0);
	};

	tableOrPartition() {
	    return this.getTypedRuleContext(TableOrPartitionContext,0);
	};

	KW_TABLE() {
	    return this.getToken(InceptorOracleParser.KW_TABLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterInsertClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitInsertClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitInsertClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WhereClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_whereClause;
    }

	KW_WHERE() {
	    return this.getToken(InceptorOracleParser.KW_WHERE, 0);
	};

	searchCondition() {
	    return this.getTypedRuleContext(SearchConditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterWhereClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitWhereClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitWhereClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class QualifyClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_qualifyClause;
    }

	KW_QUALIFY() {
	    return this.getToken(InceptorOracleParser.KW_QUALIFY, 0);
	};

	searchCondition() {
	    return this.getTypedRuleContext(SearchConditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterQualifyClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitQualifyClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitQualifyClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class HavingClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_havingClause;
    }

	KW_HAVING() {
	    return this.getToken(InceptorOracleParser.KW_HAVING, 0);
	};

	havingCondition() {
	    return this.getTypedRuleContext(HavingConditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterHavingClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitHavingClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitHavingClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class HavingConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_havingCondition;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterHavingCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitHavingCondition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitHavingCondition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ValuesClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_valuesClause;
    }

	KW_VALUES() {
	    return this.getToken(InceptorOracleParser.KW_VALUES, 0);
	};

	valuesRow = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValuesRowContext);
	    } else {
	        return this.getTypedRuleContext(ValuesRowContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterValuesClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitValuesClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitValuesClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ValuesRowContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_valuesRow;
    }

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterValuesRow(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitValuesRow(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitValuesRow(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BatchValuesRowContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_batchValuesRow;
    }

	KW_VALUES() {
	    return this.getToken(InceptorOracleParser.KW_VALUES, 0);
	};

	valuesRow() {
	    return this.getTypedRuleContext(ValuesRowContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterBatchValuesRow(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitBatchValuesRow(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitBatchValuesRow(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BatchValuesClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_batchValuesClause;
    }

	KW_BATCH_VALUES() {
	    return this.getToken(InceptorOracleParser.KW_BATCH_VALUES, 0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	batchValuesRow = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BatchValuesRowContext);
	    } else {
	        return this.getTypedRuleContext(BatchValuesRowContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterBatchValuesClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitBatchValuesClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitBatchValuesClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SearchConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_searchCondition;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterSearchCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitSearchCondition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitSearchCondition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class HierarchicalQueryClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_hierarchicalQueryClause;
    }

	connectByCondition() {
	    return this.getTypedRuleContext(ConnectByConditionContext,0);
	};

	startWithCondition() {
	    return this.getTypedRuleContext(StartWithConditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterHierarchicalQueryClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitHierarchicalQueryClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitHierarchicalQueryClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StartWithConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_startWithCondition;
    }

	KW_START() {
	    return this.getToken(InceptorOracleParser.KW_START, 0);
	};

	KW_WITH() {
	    return this.getToken(InceptorOracleParser.KW_WITH, 0);
	};

	searchCondition() {
	    return this.getTypedRuleContext(SearchConditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterStartWithCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitStartWithCondition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitStartWithCondition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConnectByConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_connectByCondition;
    }

	KW_CONNECT() {
	    return this.getToken(InceptorOracleParser.KW_CONNECT, 0);
	};

	KW_BY() {
	    return this.getToken(InceptorOracleParser.KW_BY, 0);
	};

	searchCondition() {
	    return this.getTypedRuleContext(SearchConditionContext,0);
	};

	nocycle() {
	    return this.getTypedRuleContext(NocycleContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterConnectByCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitConnectByCondition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitConnectByCondition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NocycleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_nocycle;
    }

	KW_NOCYCLE() {
	    return this.getToken(InceptorOracleParser.KW_NOCYCLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterNocycle(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitNocycle(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitNocycle(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DestinationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_destination;
    }

	KW_LOCAL() {
	    return this.getToken(InceptorOracleParser.KW_LOCAL, 0);
	};

	KW_DIRECTORY() {
	    return this.getToken(InceptorOracleParser.KW_DIRECTORY, 0);
	};

	StringLiteral() {
	    return this.getToken(InceptorOracleParser.StringLiteral, 0);
	};

	tableRowFormat() {
	    return this.getTypedRuleContext(TableRowFormatContext,0);
	};

	tableFileFormat() {
	    return this.getTypedRuleContext(TableFileFormatContext,0);
	};

	KW_TABLE() {
	    return this.getToken(InceptorOracleParser.KW_TABLE, 0);
	};

	tableOrPartition() {
	    return this.getTypedRuleContext(TableOrPartitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDestination(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDestination(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDestination(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class QueryStatementExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_queryStatementExpression;
    }

	queryStatementMayInParenthese = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(QueryStatementMayInParentheseContext);
	    } else {
	        return this.getTypedRuleContext(QueryStatementMayInParentheseContext,i);
	    }
	};

	queryOperator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(QueryOperatorContext);
	    } else {
	        return this.getTypedRuleContext(QueryOperatorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterQueryStatementExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitQueryStatementExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitQueryStatementExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class QueryStatementExpressionPlusContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_queryStatementExpressionPlus;
    }

	queryStatementMayInParenthese = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(QueryStatementMayInParentheseContext);
	    } else {
	        return this.getTypedRuleContext(QueryStatementMayInParentheseContext,i);
	    }
	};

	queryOperator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(QueryOperatorContext);
	    } else {
	        return this.getTypedRuleContext(QueryOperatorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterQueryStatementExpressionPlus(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitQueryStatementExpressionPlus(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitQueryStatementExpressionPlus(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class QueryStatementMayInParentheseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_queryStatementMayInParenthese;
    }

	queryStatement() {
	    return this.getTypedRuleContext(QueryStatementContext,0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterQueryStatementMayInParenthese(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitQueryStatementMayInParenthese(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitQueryStatementMayInParenthese(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class QueryOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_queryOperator;
    }

	KW_UNION() {
	    return this.getToken(InceptorOracleParser.KW_UNION, 0);
	};

	KW_ALL() {
	    return this.getToken(InceptorOracleParser.KW_ALL, 0);
	};

	KW_INTERSECT() {
	    return this.getToken(InceptorOracleParser.KW_INTERSECT, 0);
	};

	KW_EXCEPT() {
	    return this.getToken(InceptorOracleParser.KW_EXCEPT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterQueryOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitQueryOperator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitQueryOperator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class QueryStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_queryStatement;
    }

	fromClause() {
	    return this.getTypedRuleContext(FromClauseContext,0);
	};

	body = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BodyContext);
	    } else {
	        return this.getTypedRuleContext(BodyContext,i);
	    }
	};

	regular_body() {
	    return this.getTypedRuleContext(Regular_bodyContext,0);
	};

	withClause() {
	    return this.getTypedRuleContext(WithClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterQueryStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitQueryStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitQueryStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableRangePartitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_tableRangePartition;
    }

	KW_PARTITIONED() {
	    return this.getToken(InceptorOracleParser.KW_PARTITIONED, 0);
	};

	KW_BY() {
	    return this.getToken(InceptorOracleParser.KW_BY, 0);
	};

	KW_RANGE() {
	    return this.getToken(InceptorOracleParser.KW_RANGE, 0);
	};

	LPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.LPAREN);
	    } else {
	        return this.getToken(InceptorOracleParser.LPAREN, i);
	    }
	};


	columnList() {
	    return this.getTypedRuleContext(ColumnListContext,0);
	};

	RPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.RPAREN);
	    } else {
	        return this.getToken(InceptorOracleParser.RPAREN, i);
	    }
	};


	intervalPartitionValue() {
	    return this.getTypedRuleContext(IntervalPartitionValueContext,0);
	};

	rangePartitionList() {
	    return this.getTypedRuleContext(RangePartitionListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterTableRangePartition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitTableRangePartition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitTableRangePartition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IntervalPartitionValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_intervalPartitionValue;
        this.intervalConst = null; // ConstantContext
    }

	KW_INTERVAL() {
	    return this.getToken(InceptorOracleParser.KW_INTERVAL, 0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	normfunction() {
	    return this.getTypedRuleContext(NormfunctionContext,0);
	};

	constant() {
	    return this.getTypedRuleContext(ConstantContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterIntervalPartitionValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitIntervalPartitionValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitIntervalPartitionValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RangePartitionListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_rangePartitionList;
    }

	rangePartition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RangePartitionContext);
	    } else {
	        return this.getTypedRuleContext(RangePartitionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterRangePartitionList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitRangePartitionList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitRangePartitionList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RangePartitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_rangePartition;
    }

	KW_PARTITION() {
	    return this.getToken(InceptorOracleParser.KW_PARTITION, 0);
	};

	rangeValues() {
	    return this.getTypedRuleContext(RangeValuesContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	tablePartitionDesc() {
	    return this.getTypedRuleContext(TablePartitionDescContext,0);
	};

	partitionLocation() {
	    return this.getTypedRuleContext(PartitionLocationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterRangePartition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitRangePartition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitRangePartition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RangeValuesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_rangeValues;
    }

	KW_VALUES() {
	    return this.getToken(InceptorOracleParser.KW_VALUES, 0);
	};

	KW_LESS() {
	    return this.getToken(InceptorOracleParser.KW_LESS, 0);
	};

	KW_THAN() {
	    return this.getToken(InceptorOracleParser.KW_THAN, 0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	constant = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConstantContext);
	    } else {
	        return this.getTypedRuleContext(ConstantContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterRangeValues(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitRangeValues(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitRangeValues(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TablePartitionDescContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_tablePartitionDesc;
    }

	segmentAttributesClause() {
	    return this.getTypedRuleContext(SegmentAttributesClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterTablePartitionDesc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitTablePartitionDesc(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitTablePartitionDesc(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SegmentAttributesClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_segmentAttributesClause;
    }

	segmentAttribute = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SegmentAttributeContext);
	    } else {
	        return this.getTypedRuleContext(SegmentAttributeContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterSegmentAttributesClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitSegmentAttributesClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitSegmentAttributesClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SegmentAttributeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_segmentAttribute;
    }

	physicalAttributesClause() {
	    return this.getTypedRuleContext(PhysicalAttributesClauseContext,0);
	};

	KW_TABLESPACE() {
	    return this.getToken(InceptorOracleParser.KW_TABLESPACE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterSegmentAttribute(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitSegmentAttribute(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitSegmentAttribute(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PhysicalAttributesClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_physicalAttributesClause;
    }

	physicalAttribute = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PhysicalAttributeContext);
	    } else {
	        return this.getTypedRuleContext(PhysicalAttributeContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterPhysicalAttributesClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitPhysicalAttributesClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitPhysicalAttributesClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PhysicalAttributeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_physicalAttribute;
        this.num = null; // Token
    }

	KW_PCTFREE() {
	    return this.getToken(InceptorOracleParser.KW_PCTFREE, 0);
	};

	Number() {
	    return this.getToken(InceptorOracleParser.Number, 0);
	};

	KW_PCTUSED() {
	    return this.getToken(InceptorOracleParser.KW_PCTUSED, 0);
	};

	KW_INITRANS() {
	    return this.getToken(InceptorOracleParser.KW_INITRANS, 0);
	};

	KW_MAXTRANS() {
	    return this.getToken(InceptorOracleParser.KW_MAXTRANS, 0);
	};

	storageClause() {
	    return this.getTypedRuleContext(StorageClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterPhysicalAttribute(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitPhysicalAttribute(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitPhysicalAttribute(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StorageClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_storageClause;
    }

	KW_STORAGE() {
	    return this.getToken(InceptorOracleParser.KW_STORAGE, 0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	storageItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StorageItemContext);
	    } else {
	        return this.getTypedRuleContext(StorageItemContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterStorageClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitStorageClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitStorageClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StorageItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_storageItem;
        this.sz = null; // Token
        this.num = null; // Token
    }

	KW_INITIAL() {
	    return this.getToken(InceptorOracleParser.KW_INITIAL, 0);
	};

	ByteLengthLiteral() {
	    return this.getToken(InceptorOracleParser.ByteLengthLiteral, 0);
	};

	Number() {
	    return this.getToken(InceptorOracleParser.Number, 0);
	};

	KW_NEXT() {
	    return this.getToken(InceptorOracleParser.KW_NEXT, 0);
	};

	KW_MINEXTENTS() {
	    return this.getToken(InceptorOracleParser.KW_MINEXTENTS, 0);
	};

	KW_MAXEXTENTS() {
	    return this.getToken(InceptorOracleParser.KW_MAXEXTENTS, 0);
	};

	KW_UNLIMITED() {
	    return this.getToken(InceptorOracleParser.KW_UNLIMITED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterStorageItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitStorageItem(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitStorageItem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SelectClauseParserStartContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_selectClauseParserStart;
    }

	selectClause() {
	    return this.getTypedRuleContext(SelectClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterSelectClauseParserStart(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitSelectClauseParserStart(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitSelectClauseParserStart(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SelectClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_selectClause;
        this.dist = null; // Token
        this.transform = null; // Token
    }

	KW_SELECT() {
	    return this.getToken(InceptorOracleParser.KW_SELECT, 0);
	};

	hintClause() {
	    return this.getTypedRuleContext(HintClauseContext,0);
	};

	selectList() {
	    return this.getTypedRuleContext(SelectListContext,0);
	};

	selectTrfmClause() {
	    return this.getTypedRuleContext(SelectTrfmClauseContext,0);
	};

	KW_TRANSFORM() {
	    return this.getToken(InceptorOracleParser.KW_TRANSFORM, 0);
	};

	KW_ALL() {
	    return this.getToken(InceptorOracleParser.KW_ALL, 0);
	};

	KW_DISTINCT() {
	    return this.getToken(InceptorOracleParser.KW_DISTINCT, 0);
	};

	trfmClause() {
	    return this.getTypedRuleContext(TrfmClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterSelectClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitSelectClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitSelectClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SelectListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_selectList;
    }

	selectItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SelectItemContext);
	    } else {
	        return this.getTypedRuleContext(SelectItemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterSelectList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitSelectList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitSelectList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class HintClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_hintClause;
    }

	HINT_LEFT() {
	    return this.getToken(InceptorOracleParser.HINT_LEFT, 0);
	};

	hintList() {
	    return this.getTypedRuleContext(HintListContext,0);
	};

	C_COMMENT_RIGHT() {
	    return this.getToken(InceptorOracleParser.C_COMMENT_RIGHT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterHintClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitHintClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitHintClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class HintListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_hintList;
    }

	hintItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(HintItemContext);
	    } else {
	        return this.getTypedRuleContext(HintItemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterHintList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitHintList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitHintList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class HintItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_hintItem;
    }

	hintName() {
	    return this.getTypedRuleContext(HintNameContext,0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	hintArgs() {
	    return this.getTypedRuleContext(HintArgsContext,0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	indexHintName() {
	    return this.getTypedRuleContext(IndexHintNameContext,0);
	};

	indexHintArgs() {
	    return this.getTypedRuleContext(IndexHintArgsContext,0);
	};

	stargateHintName() {
	    return this.getTypedRuleContext(StargateHintNameContext,0);
	};

	stargateHintArgs() {
	    return this.getTypedRuleContext(StargateHintArgsContext,0);
	};

	mboHintName() {
	    return this.getTypedRuleContext(MboHintNameContext,0);
	};

	mboHintArgs() {
	    return this.getTypedRuleContext(MboHintArgsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterHintItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitHintItem(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitHintItem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StargateHintNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_stargateHintName;
    }

	KW_STARGATE() {
	    return this.getToken(InceptorOracleParser.KW_STARGATE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterStargateHintName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitStargateHintName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitStargateHintName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StargateHintArgsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_stargateHintArgs;
    }

	stargateHintArgName() {
	    return this.getTypedRuleContext(StargateHintArgNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterStargateHintArgs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitStargateHintArgs(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitStargateHintArgs(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StargateHintArgNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_stargateHintArgName;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterStargateHintArgName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitStargateHintArgName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitStargateHintArgName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class HintNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_hintName;
    }

	KW_MAPJOIN() {
	    return this.getToken(InceptorOracleParser.KW_MAPJOIN, 0);
	};

	KW_USE_BULKLOAD() {
	    return this.getToken(InceptorOracleParser.KW_USE_BULKLOAD, 0);
	};

	KW_STREAMTABLE() {
	    return this.getToken(InceptorOracleParser.KW_STREAMTABLE, 0);
	};

	KW_HOLD_DDLTIME() {
	    return this.getToken(InceptorOracleParser.KW_HOLD_DDLTIME, 0);
	};

	KW_COMBINE() {
	    return this.getToken(InceptorOracleParser.KW_COMBINE, 0);
	};

	KW_GLKJOIN() {
	    return this.getToken(InceptorOracleParser.KW_GLKJOIN, 0);
	};

	KW_COMBINE_STRUCT_INDEX() {
	    return this.getToken(InceptorOracleParser.KW_COMBINE_STRUCT_INDEX, 0);
	};

	KW_ADHOC() {
	    return this.getToken(InceptorOracleParser.KW_ADHOC, 0);
	};

	KW_PRECOMPILE() {
	    return this.getToken(InceptorOracleParser.KW_PRECOMPILE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterHintName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitHintName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitHintName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IndexHintNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_indexHintName;
    }

	KW_USE_INDEX() {
	    return this.getToken(InceptorOracleParser.KW_USE_INDEX, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterIndexHintName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitIndexHintName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitIndexHintName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MboHintNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_mboHintName;
    }

	KW_NO_REWRITE() {
	    return this.getToken(InceptorOracleParser.KW_NO_REWRITE, 0);
	};

	KW_REWRITE() {
	    return this.getToken(InceptorOracleParser.KW_REWRITE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterMboHintName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitMboHintName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitMboHintName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IndexHintArgsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_indexHintArgs;
    }

	indexHintArgName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IndexHintArgNameContext);
	    } else {
	        return this.getTypedRuleContext(IndexHintArgNameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterIndexHintArgs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitIndexHintArgs(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitIndexHintArgs(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MboHintArgsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_mboHintArgs;
    }

	mboHintArgName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MboHintArgNameContext);
	    } else {
	        return this.getTypedRuleContext(MboHintArgNameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterMboHintArgs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitMboHintArgs(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitMboHintArgs(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IndexHintArgNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_indexHintArgName;
    }

	hintArgName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(HintArgNameContext);
	    } else {
	        return this.getTypedRuleContext(HintArgNameContext,i);
	    }
	};

	KW_USING() {
	    return this.getToken(InceptorOracleParser.KW_USING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterIndexHintArgName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitIndexHintArgName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitIndexHintArgName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MboHintArgNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_mboHintArgName;
    }

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterMboHintArgName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitMboHintArgName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitMboHintArgName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class HintArgsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_hintArgs;
    }

	hintArgName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(HintArgNameContext);
	    } else {
	        return this.getTypedRuleContext(HintArgNameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterHintArgs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitHintArgs(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitHintArgs(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class HintArgNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_hintArgName;
    }

	Number() {
	    return this.getToken(InceptorOracleParser.Number, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterHintArgName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitHintArgName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitHintArgName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SelectItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_selectItem;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	columnAlias = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnAliasContext);
	    } else {
	        return this.getTypedRuleContext(ColumnAliasContext,i);
	    }
	};

	KW_AS() {
	    return this.getToken(InceptorOracleParser.KW_AS, 0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	tableAllColumns() {
	    return this.getTypedRuleContext(TableAllColumnsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterSelectItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitSelectItem(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitSelectItem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TrfmClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_trfmClause;
        this.inSerde = null; // RowFormatContext
        this.inRec = null; // RecordWriterContext
        this.outSerde = null; // RowFormatContext
        this.outRec = null; // RecordReaderContext
    }

	KW_USING() {
	    return this.getToken(InceptorOracleParser.KW_USING, 0);
	};

	StringLiteral() {
	    return this.getToken(InceptorOracleParser.StringLiteral, 0);
	};

	rowFormat = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RowFormatContext);
	    } else {
	        return this.getTypedRuleContext(RowFormatContext,i);
	    }
	};

	recordWriter() {
	    return this.getTypedRuleContext(RecordWriterContext,0);
	};

	recordReader() {
	    return this.getTypedRuleContext(RecordReaderContext,0);
	};

	KW_MAP() {
	    return this.getToken(InceptorOracleParser.KW_MAP, 0);
	};

	selectExpressionList() {
	    return this.getTypedRuleContext(SelectExpressionListContext,0);
	};

	KW_REDUCE() {
	    return this.getToken(InceptorOracleParser.KW_REDUCE, 0);
	};

	KW_AS() {
	    return this.getToken(InceptorOracleParser.KW_AS, 0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	aliasList() {
	    return this.getTypedRuleContext(AliasListContext,0);
	};

	columnNameTypeList() {
	    return this.getTypedRuleContext(ColumnNameTypeListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterTrfmClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitTrfmClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitTrfmClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SelectExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_selectExpression;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	tableAllColumns() {
	    return this.getTypedRuleContext(TableAllColumnsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterSelectExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitSelectExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitSelectExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SelectExpressionListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_selectExpressionList;
    }

	selectExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SelectExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SelectExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterSelectExpressionList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitSelectExpressionList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitSelectExpressionList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RowFormatContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_rowFormat;
    }

	rowFormatSerde() {
	    return this.getTypedRuleContext(RowFormatSerdeContext,0);
	};

	rowFormatDelimited() {
	    return this.getTypedRuleContext(RowFormatDelimitedContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterRowFormat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitRowFormat(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitRowFormat(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RecordReaderContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_recordReader;
    }

	KW_RECORDREADER() {
	    return this.getToken(InceptorOracleParser.KW_RECORDREADER, 0);
	};

	StringLiteral() {
	    return this.getToken(InceptorOracleParser.StringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterRecordReader(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitRecordReader(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitRecordReader(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RecordWriterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_recordWriter;
    }

	KW_RECORDWRITER() {
	    return this.getToken(InceptorOracleParser.KW_RECORDWRITER, 0);
	};

	StringLiteral() {
	    return this.getToken(InceptorOracleParser.StringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterRecordWriter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitRecordWriter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitRecordWriter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SelectTrfmClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_selectTrfmClause;
        this.inSerde = null; // RowFormatContext
        this.inRec = null; // RecordWriterContext
        this.outSerde = null; // RowFormatContext
        this.outRec = null; // RecordReaderContext
    }

	LPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.LPAREN);
	    } else {
	        return this.getToken(InceptorOracleParser.LPAREN, i);
	    }
	};


	selectExpressionList() {
	    return this.getTypedRuleContext(SelectExpressionListContext,0);
	};

	RPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.RPAREN);
	    } else {
	        return this.getToken(InceptorOracleParser.RPAREN, i);
	    }
	};


	KW_USING() {
	    return this.getToken(InceptorOracleParser.KW_USING, 0);
	};

	StringLiteral() {
	    return this.getToken(InceptorOracleParser.StringLiteral, 0);
	};

	rowFormat = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RowFormatContext);
	    } else {
	        return this.getTypedRuleContext(RowFormatContext,i);
	    }
	};

	recordWriter() {
	    return this.getTypedRuleContext(RecordWriterContext,0);
	};

	recordReader() {
	    return this.getTypedRuleContext(RecordReaderContext,0);
	};

	KW_AS() {
	    return this.getToken(InceptorOracleParser.KW_AS, 0);
	};

	aliasList() {
	    return this.getTypedRuleContext(AliasListContext,0);
	};

	columnNameTypeList() {
	    return this.getTypedRuleContext(ColumnNameTypeListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterSelectTrfmClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitSelectTrfmClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitSelectTrfmClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SequenceOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_sequenceOption;
    }

	sequenceStartWith() {
	    return this.getTypedRuleContext(SequenceStartWithContext,0);
	};

	sequenceOptionWithoutStart() {
	    return this.getTypedRuleContext(SequenceOptionWithoutStartContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterSequenceOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitSequenceOption(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitSequenceOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SequenceOptionWithoutStartContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_sequenceOptionWithoutStart;
    }

	sequenceIncrement() {
	    return this.getTypedRuleContext(SequenceIncrementContext,0);
	};

	sequenceMaxValue() {
	    return this.getTypedRuleContext(SequenceMaxValueContext,0);
	};

	sequenceMinValue() {
	    return this.getTypedRuleContext(SequenceMinValueContext,0);
	};

	sequenceCycle() {
	    return this.getTypedRuleContext(SequenceCycleContext,0);
	};

	sequenceCache() {
	    return this.getTypedRuleContext(SequenceCacheContext,0);
	};

	sequenceOrder() {
	    return this.getTypedRuleContext(SequenceOrderContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterSequenceOptionWithoutStart(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitSequenceOptionWithoutStart(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitSequenceOptionWithoutStart(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SequenceIncrementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_sequenceIncrement;
        this.num = null; // Token
    }

	KW_INCREMENT() {
	    return this.getToken(InceptorOracleParser.KW_INCREMENT, 0);
	};

	KW_BY() {
	    return this.getToken(InceptorOracleParser.KW_BY, 0);
	};

	precedencePlusOperator() {
	    return this.getTypedRuleContext(PrecedencePlusOperatorContext,0);
	};

	Number() {
	    return this.getToken(InceptorOracleParser.Number, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterSequenceIncrement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitSequenceIncrement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitSequenceIncrement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SequenceStartWithContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_sequenceStartWith;
        this.num = null; // Token
    }

	KW_START() {
	    return this.getToken(InceptorOracleParser.KW_START, 0);
	};

	KW_WITH() {
	    return this.getToken(InceptorOracleParser.KW_WITH, 0);
	};

	precedencePlusOperator() {
	    return this.getTypedRuleContext(PrecedencePlusOperatorContext,0);
	};

	Number() {
	    return this.getToken(InceptorOracleParser.Number, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterSequenceStartWith(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitSequenceStartWith(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitSequenceStartWith(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SequenceMaxValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_sequenceMaxValue;
        this.num = null; // Token
    }

	KW_MAXVALUE() {
	    return this.getToken(InceptorOracleParser.KW_MAXVALUE, 0);
	};

	precedencePlusOperator() {
	    return this.getTypedRuleContext(PrecedencePlusOperatorContext,0);
	};

	Number() {
	    return this.getToken(InceptorOracleParser.Number, 0);
	};

	KW_NOMAXVALUE() {
	    return this.getToken(InceptorOracleParser.KW_NOMAXVALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterSequenceMaxValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitSequenceMaxValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitSequenceMaxValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SequenceMinValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_sequenceMinValue;
        this.num = null; // Token
    }

	KW_MINVALUE() {
	    return this.getToken(InceptorOracleParser.KW_MINVALUE, 0);
	};

	precedencePlusOperator() {
	    return this.getTypedRuleContext(PrecedencePlusOperatorContext,0);
	};

	Number() {
	    return this.getToken(InceptorOracleParser.Number, 0);
	};

	KW_NOMINVALUE() {
	    return this.getToken(InceptorOracleParser.KW_NOMINVALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterSequenceMinValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitSequenceMinValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitSequenceMinValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SequenceCycleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_sequenceCycle;
    }

	KW_CYCLE() {
	    return this.getToken(InceptorOracleParser.KW_CYCLE, 0);
	};

	KW_NOCYCLE() {
	    return this.getToken(InceptorOracleParser.KW_NOCYCLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterSequenceCycle(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitSequenceCycle(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitSequenceCycle(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SequenceCacheContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_sequenceCache;
        this.num = null; // Token
    }

	KW_CACHE() {
	    return this.getToken(InceptorOracleParser.KW_CACHE, 0);
	};

	PLUS() {
	    return this.getToken(InceptorOracleParser.PLUS, 0);
	};

	Number() {
	    return this.getToken(InceptorOracleParser.Number, 0);
	};

	KW_NOCACHE() {
	    return this.getToken(InceptorOracleParser.KW_NOCACHE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterSequenceCache(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitSequenceCache(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitSequenceCache(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SequenceOrderContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_sequenceOrder;
    }

	KW_ORDER() {
	    return this.getToken(InceptorOracleParser.KW_ORDER, 0);
	};

	KW_NOORDER() {
	    return this.getToken(InceptorOracleParser.KW_NOORDER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterSequenceOrder(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitSequenceOrder(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitSequenceOrder(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OrderByClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_orderByClause;
    }

	KW_ORDER() {
	    return this.getToken(InceptorOracleParser.KW_ORDER, 0);
	};

	KW_BY() {
	    return this.getToken(InceptorOracleParser.KW_BY, 0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	columnRefOrder = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnRefOrderContext);
	    } else {
	        return this.getTypedRuleContext(ColumnRefOrderContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterOrderByClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitOrderByClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitOrderByClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClusterByClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_clusterByClause;
    }

	KW_CLUSTER() {
	    return this.getToken(InceptorOracleParser.KW_CLUSTER, 0);
	};

	KW_BY() {
	    return this.getToken(InceptorOracleParser.KW_BY, 0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterClusterByClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitClusterByClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitClusterByClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PartitionByClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_partitionByClause;
    }

	KW_PARTITION() {
	    return this.getToken(InceptorOracleParser.KW_PARTITION, 0);
	};

	KW_BY() {
	    return this.getToken(InceptorOracleParser.KW_BY, 0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterPartitionByClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitPartitionByClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitPartitionByClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DistributeByClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_distributeByClause;
    }

	KW_DISTRIBUTE() {
	    return this.getToken(InceptorOracleParser.KW_DISTRIBUTE, 0);
	};

	KW_BY() {
	    return this.getToken(InceptorOracleParser.KW_BY, 0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDistributeByClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDistributeByClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDistributeByClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SortByClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_sortByClause;
    }

	KW_SORT() {
	    return this.getToken(InceptorOracleParser.KW_SORT, 0);
	};

	KW_BY() {
	    return this.getToken(InceptorOracleParser.KW_BY, 0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	columnRefOrder = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnRefOrderContext);
	    } else {
	        return this.getTypedRuleContext(ColumnRefOrderContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterSortByClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitSortByClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitSortByClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LimitClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_limitClause;
    }

	dialectLimitClause() {
	    return this.getTypedRuleContext(DialectLimitClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterLimitClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitLimitClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitLimitClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PartitioningSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_partitioningSpec;
    }

	partitionByClause() {
	    return this.getTypedRuleContext(PartitionByClauseContext,0);
	};

	orderByClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OrderByClauseContext);
	    } else {
	        return this.getTypedRuleContext(OrderByClauseContext,i);
	    }
	};

	distributeByClause() {
	    return this.getTypedRuleContext(DistributeByClauseContext,0);
	};

	sortByClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SortByClauseContext);
	    } else {
	        return this.getTypedRuleContext(SortByClauseContext,i);
	    }
	};

	clusterByClause() {
	    return this.getTypedRuleContext(ClusterByClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterPartitioningSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitPartitioningSpec(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitPartitioningSpec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ForUpdateClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_forUpdateClause;
    }

	KW_FOR() {
	    return this.getToken(InceptorOracleParser.KW_FOR, 0);
	};

	KW_UPDATE() {
	    return this.getToken(InceptorOracleParser.KW_UPDATE, 0);
	};

	KW_OF() {
	    return this.getToken(InceptorOracleParser.KW_OF, 0);
	};

	columnOrtableDotColumnWithDBNameList() {
	    return this.getTypedRuleContext(ColumnOrtableDotColumnWithDBNameListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterForUpdateClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitForUpdateClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitForUpdateClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Window_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_window_clause;
    }

	KW_WINDOW() {
	    return this.getToken(InceptorOracleParser.KW_WINDOW, 0);
	};

	window_defn = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Window_defnContext);
	    } else {
	        return this.getTypedRuleContext(Window_defnContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterWindow_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitWindow_clause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitWindow_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Window_defnContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_window_defn;
    }

	Identifier() {
	    return this.getToken(InceptorOracleParser.Identifier, 0);
	};

	KW_AS() {
	    return this.getToken(InceptorOracleParser.KW_AS, 0);
	};

	window_specification() {
	    return this.getTypedRuleContext(Window_specificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterWindow_defn(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitWindow_defn(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitWindow_defn(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Window_specificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_window_specification;
    }

	Identifier() {
	    return this.getToken(InceptorOracleParser.Identifier, 0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	partitioningSpec() {
	    return this.getTypedRuleContext(PartitioningSpecContext,0);
	};

	window_frame() {
	    return this.getTypedRuleContext(Window_frameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterWindow_specification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitWindow_specification(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitWindow_specification(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Window_frameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_window_frame;
    }

	window_range_expression() {
	    return this.getTypedRuleContext(Window_range_expressionContext,0);
	};

	window_value_expression() {
	    return this.getTypedRuleContext(Window_value_expressionContext,0);
	};

	window_timerange_expression() {
	    return this.getTypedRuleContext(Window_timerange_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterWindow_frame(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitWindow_frame(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitWindow_frame(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Window_range_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_window_range_expression;
        this.sb = null; // Window_frame_start_boundaryContext
        this.s = null; // Window_frame_boundaryContext
        this.end = null; // Window_frame_boundaryContext
    }

	KW_ROWS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.KW_ROWS);
	    } else {
	        return this.getToken(InceptorOracleParser.KW_ROWS, i);
	    }
	};


	KW_BETWEEN() {
	    return this.getToken(InceptorOracleParser.KW_BETWEEN, 0);
	};

	KW_AND() {
	    return this.getToken(InceptorOracleParser.KW_AND, 0);
	};

	window_frame_start_boundary() {
	    return this.getTypedRuleContext(Window_frame_start_boundaryContext,0);
	};

	window_frame_boundary = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Window_frame_boundaryContext);
	    } else {
	        return this.getTypedRuleContext(Window_frame_boundaryContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterWindow_range_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitWindow_range_expression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitWindow_range_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Window_value_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_window_value_expression;
        this.sb = null; // Window_frame_start_boundaryContext
        this.s = null; // Window_frame_boundaryContext
        this.end = null; // Window_frame_boundaryContext
    }

	KW_RANGE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.KW_RANGE);
	    } else {
	        return this.getToken(InceptorOracleParser.KW_RANGE, i);
	    }
	};


	KW_BETWEEN() {
	    return this.getToken(InceptorOracleParser.KW_BETWEEN, 0);
	};

	KW_AND() {
	    return this.getToken(InceptorOracleParser.KW_AND, 0);
	};

	window_frame_start_boundary() {
	    return this.getTypedRuleContext(Window_frame_start_boundaryContext,0);
	};

	window_frame_boundary = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Window_frame_boundaryContext);
	    } else {
	        return this.getTypedRuleContext(Window_frame_boundaryContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterWindow_value_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitWindow_value_expression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitWindow_value_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Window_timerange_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_window_timerange_expression;
        this.sb = null; // Window_time_frame_start_boundaryContext
        this.s = null; // Window_time_frame_boundaryContext
        this.end = null; // Window_time_frame_boundaryContext
    }

	KW_RANGE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.KW_RANGE);
	    } else {
	        return this.getToken(InceptorOracleParser.KW_RANGE, i);
	    }
	};


	KW_BETWEEN() {
	    return this.getToken(InceptorOracleParser.KW_BETWEEN, 0);
	};

	KW_AND() {
	    return this.getToken(InceptorOracleParser.KW_AND, 0);
	};

	window_time_frame_start_boundary() {
	    return this.getTypedRuleContext(Window_time_frame_start_boundaryContext,0);
	};

	window_time_frame_boundary = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Window_time_frame_boundaryContext);
	    } else {
	        return this.getTypedRuleContext(Window_time_frame_boundaryContext,i);
	    }
	};

	window_time_frame_interval = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Window_time_frame_intervalContext);
	    } else {
	        return this.getTypedRuleContext(Window_time_frame_intervalContext,i);
	    }
	};

	streamwindow_zerotime_expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Streamwindow_zerotime_expressionContext);
	    } else {
	        return this.getTypedRuleContext(Streamwindow_zerotime_expressionContext,i);
	    }
	};

	window_time_frame_resetinterval = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Window_time_frame_resetintervalContext);
	    } else {
	        return this.getTypedRuleContext(Window_time_frame_resetintervalContext,i);
	    }
	};

	window_time_frame_cache_clause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Window_time_frame_cache_clauseContext);
	    } else {
	        return this.getTypedRuleContext(Window_time_frame_cache_clauseContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterWindow_timerange_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitWindow_timerange_expression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitWindow_timerange_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Window_frame_start_boundaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_window_frame_start_boundary;
    }

	KW_UNBOUNDED() {
	    return this.getToken(InceptorOracleParser.KW_UNBOUNDED, 0);
	};

	KW_PRECEDING = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.KW_PRECEDING);
	    } else {
	        return this.getToken(InceptorOracleParser.KW_PRECEDING, i);
	    }
	};


	KW_CURRENT() {
	    return this.getToken(InceptorOracleParser.KW_CURRENT, 0);
	};

	KW_ROW() {
	    return this.getToken(InceptorOracleParser.KW_ROW, 0);
	};

	Number() {
	    return this.getToken(InceptorOracleParser.Number, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterWindow_frame_start_boundary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitWindow_frame_start_boundary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitWindow_frame_start_boundary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Window_frame_boundaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_window_frame_boundary;
        this.r = null; // Token
        this.d = null; // Token
    }

	KW_UNBOUNDED() {
	    return this.getToken(InceptorOracleParser.KW_UNBOUNDED, 0);
	};

	KW_CURRENT() {
	    return this.getToken(InceptorOracleParser.KW_CURRENT, 0);
	};

	KW_ROW() {
	    return this.getToken(InceptorOracleParser.KW_ROW, 0);
	};

	Number() {
	    return this.getToken(InceptorOracleParser.Number, 0);
	};

	KW_PRECEDING = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.KW_PRECEDING);
	    } else {
	        return this.getToken(InceptorOracleParser.KW_PRECEDING, i);
	    }
	};


	KW_FOLLOWING = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.KW_FOLLOWING);
	    } else {
	        return this.getToken(InceptorOracleParser.KW_FOLLOWING, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterWindow_frame_boundary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitWindow_frame_boundary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitWindow_frame_boundary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Window_time_frame_start_boundaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_window_time_frame_start_boundary;
    }

	streamIntervalLiteral() {
	    return this.getTypedRuleContext(StreamIntervalLiteralContext,0);
	};

	KW_PRECEDING() {
	    return this.getToken(InceptorOracleParser.KW_PRECEDING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterWindow_time_frame_start_boundary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitWindow_time_frame_start_boundary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitWindow_time_frame_start_boundary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Window_time_frame_boundaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_window_time_frame_boundary;
        this.d = null; // Token
    }

	streamIntervalLiteral() {
	    return this.getTypedRuleContext(StreamIntervalLiteralContext,0);
	};

	KW_PRECEDING() {
	    return this.getToken(InceptorOracleParser.KW_PRECEDING, 0);
	};

	KW_FOLLOWING() {
	    return this.getToken(InceptorOracleParser.KW_FOLLOWING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterWindow_time_frame_boundary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitWindow_time_frame_boundary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitWindow_time_frame_boundary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Window_time_frame_intervalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_window_time_frame_interval;
    }

	KW_INTERVAL() {
	    return this.getToken(InceptorOracleParser.KW_INTERVAL, 0);
	};

	streamIntervalLiteral() {
	    return this.getTypedRuleContext(StreamIntervalLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterWindow_time_frame_interval(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitWindow_time_frame_interval(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitWindow_time_frame_interval(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Window_time_frame_resetintervalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_window_time_frame_resetinterval;
    }

	KW_WINDOWRESET() {
	    return this.getToken(InceptorOracleParser.KW_WINDOWRESET, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterWindow_time_frame_resetinterval(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitWindow_time_frame_resetinterval(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitWindow_time_frame_resetinterval(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Window_time_frame_cache_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_window_time_frame_cache_clause;
        this.metricName = null; // ExpressionContext
        this.cacheLayer = null; // ExpressionContext
    }

	KW_CACHE() {
	    return this.getToken(InceptorOracleParser.KW_CACHE, 0);
	};

	KW_AS() {
	    return this.getToken(InceptorOracleParser.KW_AS, 0);
	};

	KW_INTO() {
	    return this.getToken(InceptorOracleParser.KW_INTO, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterWindow_time_frame_cache_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitWindow_time_frame_cache_clause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitWindow_time_frame_cache_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Stream_window_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_stream_window_clause;
    }

	KW_STREAMWINDOW() {
	    return this.getToken(InceptorOracleParser.KW_STREAMWINDOW, 0);
	};

	stream_window_defn = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Stream_window_defnContext);
	    } else {
	        return this.getTypedRuleContext(Stream_window_defnContext,i);
	    }
	};

	KW_SESSIONWINDOW() {
	    return this.getToken(InceptorOracleParser.KW_SESSIONWINDOW, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterStream_window_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitStream_window_clause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitStream_window_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Stream_window_defnContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_stream_window_defn;
    }

	Identifier() {
	    return this.getToken(InceptorOracleParser.Identifier, 0);
	};

	KW_AS() {
	    return this.getToken(InceptorOracleParser.KW_AS, 0);
	};

	stream_window_specification = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Stream_window_specificationContext);
	    } else {
	        return this.getTypedRuleContext(Stream_window_specificationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterStream_window_defn(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitStream_window_defn(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitStream_window_defn(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Stream_window_specificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_stream_window_specification;
    }

	Identifier() {
	    return this.getToken(InceptorOracleParser.Identifier, 0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	stream_window_frame() {
	    return this.getTypedRuleContext(Stream_window_frameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterStream_window_specification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitStream_window_specification(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitStream_window_specification(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Stream_window_frameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_stream_window_frame;
    }

	sessionwindow_expression() {
	    return this.getTypedRuleContext(Sessionwindow_expressionContext,0);
	};

	streamwindow_interval_expression() {
	    return this.getTypedRuleContext(Streamwindow_interval_expressionContext,0);
	};

	streamwindow_separated_expression() {
	    return this.getTypedRuleContext(Streamwindow_separated_expressionContext,0);
	};

	streamwindow_format_expression() {
	    return this.getTypedRuleContext(Streamwindow_format_expressionContext,0);
	};

	streamwindow_zerotime_expression() {
	    return this.getTypedRuleContext(Streamwindow_zerotime_expressionContext,0);
	};

	streamwindow_range_expression() {
	    return this.getTypedRuleContext(Streamwindow_range_expressionContext,0);
	};

	streamwindow_slide_expression() {
	    return this.getTypedRuleContext(Streamwindow_slide_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterStream_window_frame(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitStream_window_frame(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitStream_window_frame(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Sessionwindow_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_sessionwindow_expression;
    }

	sessionwindow_start_expression() {
	    return this.getTypedRuleContext(Sessionwindow_start_expressionContext,0);
	};

	sessionwindow_stop_expression() {
	    return this.getTypedRuleContext(Sessionwindow_stop_expressionContext,0);
	};

	sessionwindow_partition_expression() {
	    return this.getTypedRuleContext(Sessionwindow_partition_expressionContext,0);
	};

	sessionwindow_expire_expression() {
	    return this.getTypedRuleContext(Sessionwindow_expire_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterSessionwindow_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitSessionwindow_expression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitSessionwindow_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Sessionwindow_start_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_sessionwindow_start_expression;
    }

	KW_SESSIONSTART() {
	    return this.getToken(InceptorOracleParser.KW_SESSIONSTART, 0);
	};

	LSQUARE() {
	    return this.getToken(InceptorOracleParser.LSQUARE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RSQUARE() {
	    return this.getToken(InceptorOracleParser.RSQUARE, 0);
	};

	session_boundary_interval_expr() {
	    return this.getTypedRuleContext(Session_boundary_interval_exprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterSessionwindow_start_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitSessionwindow_start_expression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitSessionwindow_start_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Sessionwindow_stop_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_sessionwindow_stop_expression;
    }

	KW_END() {
	    return this.getToken(InceptorOracleParser.KW_END, 0);
	};

	LSQUARE() {
	    return this.getToken(InceptorOracleParser.LSQUARE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RSQUARE() {
	    return this.getToken(InceptorOracleParser.RSQUARE, 0);
	};

	session_boundary_interval_expr() {
	    return this.getTypedRuleContext(Session_boundary_interval_exprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterSessionwindow_stop_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitSessionwindow_stop_expression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitSessionwindow_stop_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Session_boundary_interval_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_session_boundary_interval_expr;
    }

	KW_SESSIONWINDOW_INCLUDE() {
	    return this.getToken(InceptorOracleParser.KW_SESSIONWINDOW_INCLUDE, 0);
	};

	KW_SESSIONWINDOW_EXCLUDE() {
	    return this.getToken(InceptorOracleParser.KW_SESSIONWINDOW_EXCLUDE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterSession_boundary_interval_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitSession_boundary_interval_expr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitSession_boundary_interval_expr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Sessionwindow_partition_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_sessionwindow_partition_expression;
    }

	KW_SESSIONPARTITION() {
	    return this.getToken(InceptorOracleParser.KW_SESSIONPARTITION, 0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterSessionwindow_partition_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitSessionwindow_partition_expression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitSessionwindow_partition_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Sessionwindow_expire_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_sessionwindow_expire_expression;
    }

	KW_SESSIONEXPIRE() {
	    return this.getToken(InceptorOracleParser.KW_SESSIONEXPIRE, 0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	streamIntervalLiteral() {
	    return this.getTypedRuleContext(StreamIntervalLiteralContext,0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	sessionwindow_expire_operation_expression() {
	    return this.getTypedRuleContext(Sessionwindow_expire_operation_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterSessionwindow_expire_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitSessionwindow_expire_expression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitSessionwindow_expire_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Sessionwindow_expire_operation_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_sessionwindow_expire_operation_expression;
    }

	KW_SESSIONEXPIRE_DISCARD() {
	    return this.getToken(InceptorOracleParser.KW_SESSIONEXPIRE_DISCARD, 0);
	};

	KW_SESSIONEXPIRE_COMPLETE() {
	    return this.getToken(InceptorOracleParser.KW_SESSIONEXPIRE_COMPLETE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterSessionwindow_expire_operation_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitSessionwindow_expire_operation_expression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitSessionwindow_expire_operation_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Streamwindow_range_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_streamwindow_range_expression;
    }

	KW_LENGTH() {
	    return this.getToken(InceptorOracleParser.KW_LENGTH, 0);
	};

	streamwindow_length() {
	    return this.getTypedRuleContext(Streamwindow_lengthContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterStreamwindow_range_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitStreamwindow_range_expression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitStreamwindow_range_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Streamwindow_lengthContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_streamwindow_length;
    }

	streamIntervalLiteral() {
	    return this.getTypedRuleContext(StreamIntervalLiteralContext,0);
	};

	KW_INFINITE() {
	    return this.getToken(InceptorOracleParser.KW_INFINITE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterStreamwindow_length(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitStreamwindow_length(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitStreamwindow_length(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Streamwindow_slide_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_streamwindow_slide_expression;
    }

	KW_STREAMWINDOWSLIDELENGTH() {
	    return this.getToken(InceptorOracleParser.KW_STREAMWINDOWSLIDELENGTH, 0);
	};

	streamIntervalLiteral() {
	    return this.getTypedRuleContext(StreamIntervalLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterStreamwindow_slide_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitStreamwindow_slide_expression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitStreamwindow_slide_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Streamwindow_interval_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_streamwindow_interval_expression;
    }

	KW_INTERVAL() {
	    return this.getToken(InceptorOracleParser.KW_INTERVAL, 0);
	};

	streamIntervalLiteral() {
	    return this.getTypedRuleContext(StreamIntervalLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterStreamwindow_interval_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitStreamwindow_interval_expression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitStreamwindow_interval_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Streamwindow_separated_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_streamwindow_separated_expression;
        this.field = null; // IdentifierContext
    }

	KW_STREAMWINDOWSEPARATED() {
	    return this.getToken(InceptorOracleParser.KW_STREAMWINDOWSEPARATED, 0);
	};

	KW_BY() {
	    return this.getToken(InceptorOracleParser.KW_BY, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterStreamwindow_separated_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitStreamwindow_separated_expression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitStreamwindow_separated_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Streamwindow_format_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_streamwindow_format_expression;
        this.format = null; // Token
    }

	KW_FORMAT() {
	    return this.getToken(InceptorOracleParser.KW_FORMAT, 0);
	};

	StringLiteral() {
	    return this.getToken(InceptorOracleParser.StringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterStreamwindow_format_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitStreamwindow_format_expression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitStreamwindow_format_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Streamwindow_zerotime_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_streamwindow_zerotime_expression;
        this.zerotime = null; // Token
    }

	KW_START() {
	    return this.getToken(InceptorOracleParser.KW_START, 0);
	};

	KW_TIME() {
	    return this.getToken(InceptorOracleParser.KW_TIME, 0);
	};

	KW_AT() {
	    return this.getToken(InceptorOracleParser.KW_AT, 0);
	};

	StringLiteral() {
	    return this.getToken(InceptorOracleParser.StringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterStreamwindow_zerotime_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitStreamwindow_zerotime_expression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitStreamwindow_zerotime_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StreamIntervalLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_streamIntervalLiteral;
        this.qualifiers = null; // StreamIntervalQualifiersContext
    }

	StringLiteral() {
	    return this.getToken(InceptorOracleParser.StringLiteral, 0);
	};

	streamIntervalQualifiers() {
	    return this.getTypedRuleContext(StreamIntervalQualifiersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterStreamIntervalLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitStreamIntervalLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitStreamIntervalLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StreamIntervalQualifiersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_streamIntervalQualifiers;
    }

	KW_DAY() {
	    return this.getToken(InceptorOracleParser.KW_DAY, 0);
	};

	KW_HOUR() {
	    return this.getToken(InceptorOracleParser.KW_HOUR, 0);
	};

	KW_MINUTE() {
	    return this.getToken(InceptorOracleParser.KW_MINUTE, 0);
	};

	KW_SECOND() {
	    return this.getToken(InceptorOracleParser.KW_SECOND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterStreamIntervalQualifiers(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitStreamIntervalQualifiers(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitStreamIntervalQualifiers(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_type;
    }

	primitiveType() {
	    return this.getTypedRuleContext(PrimitiveTypeContext,0);
	};

	listType() {
	    return this.getTypedRuleContext(ListTypeContext,0);
	};

	structType() {
	    return this.getTypedRuleContext(StructTypeContext,0);
	};

	mapType() {
	    return this.getTypedRuleContext(MapTypeContext,0);
	};

	unionType() {
	    return this.getTypedRuleContext(UnionTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrimitiveTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_primitiveType;
        this.length = null; // Token
    }

	KW_TINYINT() {
	    return this.getToken(InceptorOracleParser.KW_TINYINT, 0);
	};

	KW_SMALLINT() {
	    return this.getToken(InceptorOracleParser.KW_SMALLINT, 0);
	};

	KW_INT() {
	    return this.getToken(InceptorOracleParser.KW_INT, 0);
	};

	KW_BIGINT() {
	    return this.getToken(InceptorOracleParser.KW_BIGINT, 0);
	};

	KW_BOOLEAN() {
	    return this.getToken(InceptorOracleParser.KW_BOOLEAN, 0);
	};

	KW_FLOAT() {
	    return this.getToken(InceptorOracleParser.KW_FLOAT, 0);
	};

	KW_DOUBLE() {
	    return this.getToken(InceptorOracleParser.KW_DOUBLE, 0);
	};

	KW_DATE() {
	    return this.getToken(InceptorOracleParser.KW_DATE, 0);
	};

	KW_FORMAT() {
	    return this.getToken(InceptorOracleParser.KW_FORMAT, 0);
	};

	StringLiteral() {
	    return this.getToken(InceptorOracleParser.StringLiteral, 0);
	};

	KW_DATETIME() {
	    return this.getToken(InceptorOracleParser.KW_DATETIME, 0);
	};

	KW_GEO() {
	    return this.getToken(InceptorOracleParser.KW_GEO, 0);
	};

	KW_TIMESTAMP() {
	    return this.getToken(InceptorOracleParser.KW_TIMESTAMP, 0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	Number = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.Number);
	    } else {
	        return this.getToken(InceptorOracleParser.Number, i);
	    }
	};


	KW_INTERVAL() {
	    return this.getToken(InceptorOracleParser.KW_INTERVAL, 0);
	};

	KW_YEAR() {
	    return this.getToken(InceptorOracleParser.KW_YEAR, 0);
	};

	KW_TO() {
	    return this.getToken(InceptorOracleParser.KW_TO, 0);
	};

	KW_MONTH() {
	    return this.getToken(InceptorOracleParser.KW_MONTH, 0);
	};

	KW_DAY() {
	    return this.getToken(InceptorOracleParser.KW_DAY, 0);
	};

	KW_SECOND() {
	    return this.getToken(InceptorOracleParser.KW_SECOND, 0);
	};

	KW_STRING() {
	    return this.getToken(InceptorOracleParser.KW_STRING, 0);
	};

	KW_LENGTH() {
	    return this.getToken(InceptorOracleParser.KW_LENGTH, 0);
	};

	KW_NVARCHAR() {
	    return this.getToken(InceptorOracleParser.KW_NVARCHAR, 0);
	};

	KW_CLOB() {
	    return this.getToken(InceptorOracleParser.KW_CLOB, 0);
	};

	KW_BINARY() {
	    return this.getToken(InceptorOracleParser.KW_BINARY, 0);
	};

	KW_BLOB() {
	    return this.getToken(InceptorOracleParser.KW_BLOB, 0);
	};

	KW_CHAR() {
	    return this.getToken(InceptorOracleParser.KW_CHAR, 0);
	};

	KW_INTEGER() {
	    return this.getToken(InceptorOracleParser.KW_INTEGER, 0);
	};

	KW_DECIMAL() {
	    return this.getToken(InceptorOracleParser.KW_DECIMAL, 0);
	};

	KW_NUMERIC() {
	    return this.getToken(InceptorOracleParser.KW_NUMERIC, 0);
	};

	KW_NUMBER() {
	    return this.getToken(InceptorOracleParser.KW_NUMBER, 0);
	};

	KW_DEC() {
	    return this.getToken(InceptorOracleParser.KW_DEC, 0);
	};

	COMMA() {
	    return this.getToken(InceptorOracleParser.COMMA, 0);
	};

	dialectPrimitiveType() {
	    return this.getTypedRuleContext(DialectPrimitiveTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterPrimitiveType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitPrimitiveType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitPrimitiveType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ListTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_listType;
    }

	KW_ARRAY() {
	    return this.getToken(InceptorOracleParser.KW_ARRAY, 0);
	};

	LESSTHAN() {
	    return this.getToken(InceptorOracleParser.LESSTHAN, 0);
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	GREATERTHAN() {
	    return this.getToken(InceptorOracleParser.GREATERTHAN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterListType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitListType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitListType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StructTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_structType;
    }

	KW_STRUCT() {
	    return this.getToken(InceptorOracleParser.KW_STRUCT, 0);
	};

	LESSTHAN() {
	    return this.getToken(InceptorOracleParser.LESSTHAN, 0);
	};

	columnNameColonTypeList() {
	    return this.getTypedRuleContext(ColumnNameColonTypeListContext,0);
	};

	GREATERTHAN() {
	    return this.getToken(InceptorOracleParser.GREATERTHAN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterStructType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitStructType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitStructType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MapTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_mapType;
        this.left = null; // PrimitiveTypeContext
        this.right = null; // TypeContext
    }

	KW_MAP() {
	    return this.getToken(InceptorOracleParser.KW_MAP, 0);
	};

	LESSTHAN() {
	    return this.getToken(InceptorOracleParser.LESSTHAN, 0);
	};

	COMMA() {
	    return this.getToken(InceptorOracleParser.COMMA, 0);
	};

	GREATERTHAN() {
	    return this.getToken(InceptorOracleParser.GREATERTHAN, 0);
	};

	primitiveType() {
	    return this.getTypedRuleContext(PrimitiveTypeContext,0);
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterMapType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitMapType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitMapType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UnionTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_unionType;
    }

	KW_UNIONTYPE() {
	    return this.getToken(InceptorOracleParser.KW_UNIONTYPE, 0);
	};

	LESSTHAN() {
	    return this.getToken(InceptorOracleParser.LESSTHAN, 0);
	};

	colTypeList() {
	    return this.getTypedRuleContext(ColTypeListContext,0);
	};

	GREATERTHAN() {
	    return this.getToken(InceptorOracleParser.GREATERTHAN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterUnionType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitUnionType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitUnionType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColumnNameColonTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_columnNameColonType;
        this.colName = null; // IdentifierContext
        this.comment = null; // Token
    }

	COLON() {
	    return this.getToken(InceptorOracleParser.COLON, 0);
	};

	colType() {
	    return this.getTypedRuleContext(ColTypeContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	KW_COMMENT() {
	    return this.getToken(InceptorOracleParser.KW_COMMENT, 0);
	};

	StringLiteral() {
	    return this.getToken(InceptorOracleParser.StringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterColumnNameColonType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitColumnNameColonType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitColumnNameColonType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_colType;
    }

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterColType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitColType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitColType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColTypeListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_colTypeList;
    }

	colType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColTypeContext);
	    } else {
	        return this.getTypedRuleContext(ColTypeContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterColTypeList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitColTypeList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitColTypeList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GotoStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_gotoStatement;
    }

	KW_GOTO() {
	    return this.getToken(InceptorOracleParser.KW_GOTO, 0);
	};

	Identifier() {
	    return this.getToken(InceptorOracleParser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterGotoStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitGotoStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitGotoStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReturnStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_returnStatement;
    }

	KW_RETURN() {
	    return this.getToken(InceptorOracleParser.KW_RETURN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterReturnStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitReturnStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitReturnStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ContinueStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_continueStatement;
    }

	KW_CONTINUE() {
	    return this.getToken(InceptorOracleParser.KW_CONTINUE, 0);
	};

	Identifier() {
	    return this.getToken(InceptorOracleParser.Identifier, 0);
	};

	KW_WHEN() {
	    return this.getToken(InceptorOracleParser.KW_WHEN, 0);
	};

	condition() {
	    return this.getTypedRuleContext(ConditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterContinueStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitContinueStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitContinueStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExitStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_exitStatement;
    }

	KW_EXIT() {
	    return this.getToken(InceptorOracleParser.KW_EXIT, 0);
	};

	Identifier() {
	    return this.getToken(InceptorOracleParser.Identifier, 0);
	};

	KW_WHEN() {
	    return this.getToken(InceptorOracleParser.KW_WHEN, 0);
	};

	condition() {
	    return this.getTypedRuleContext(ConditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterExitStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitExitStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitExitStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DialectEndCaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_dialectEndCase;
    }

	KW_END() {
	    return this.getToken(InceptorOracleParser.KW_END, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDialectEndCase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDialectEndCase(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDialectEndCase(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CursorParserStartContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_cursorParserStart;
    }

	cursorName() {
	    return this.getTypedRuleContext(CursorNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterCursorParserStart(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitCursorParserStart(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitCursorParserStart(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CursorNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_cursorName;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterCursorName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitCursorName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitCursorName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CursorParamSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_cursorParamSpec;
    }

	parameter() {
	    return this.getTypedRuleContext(ParameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterCursorParamSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitCursorParamSpec(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitCursorParamSpec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CursorParamListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_cursorParamList;
    }

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	cursorParamSpec = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CursorParamSpecContext);
	    } else {
	        return this.getTypedRuleContext(CursorParamSpecContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterCursorParamList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitCursorParamList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitCursorParamList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CursorReturnSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_cursorReturnSpec;
    }

	KW_RETURN() {
	    return this.getToken(InceptorOracleParser.KW_RETURN, 0);
	};

	datatype() {
	    return this.getTypedRuleContext(DatatypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterCursorReturnSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitCursorReturnSpec(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitCursorReturnSpec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CursorBodySpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_cursorBodySpec;
    }

	selectStatement() {
	    return this.getTypedRuleContext(SelectStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterCursorBodySpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitCursorBodySpec(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitCursorBodySpec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CursorDeclStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_cursorDeclStatement;
    }

	KW_CURSOR() {
	    return this.getToken(InceptorOracleParser.KW_CURSOR, 0);
	};

	cursorName() {
	    return this.getTypedRuleContext(CursorNameContext,0);
	};

	KW_IS() {
	    return this.getToken(InceptorOracleParser.KW_IS, 0);
	};

	cursorBodySpec() {
	    return this.getTypedRuleContext(CursorBodySpecContext,0);
	};

	cursorParamList() {
	    return this.getTypedRuleContext(CursorParamListContext,0);
	};

	cursorReturnSpec() {
	    return this.getTypedRuleContext(CursorReturnSpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterCursorDeclStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitCursorDeclStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitCursorDeclStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OpenForOrOpenCursorStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_openForOrOpenCursorStatement;
        this.opFor = null; // Token
    }

	KW_OPEN() {
	    return this.getToken(InceptorOracleParser.KW_OPEN, 0);
	};

	leftValue() {
	    return this.getTypedRuleContext(LeftValueContext,0);
	};

	openForClause() {
	    return this.getTypedRuleContext(OpenForClauseContext,0);
	};

	KW_FOR() {
	    return this.getToken(InceptorOracleParser.KW_FOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterOpenForOrOpenCursorStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitOpenForOrOpenCursorStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitOpenForOrOpenCursorStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OpenForClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_openForClause;
    }

	selectStatement() {
	    return this.getTypedRuleContext(SelectStatementContext,0);
	};

	dynamicSqlStatement() {
	    return this.getTypedRuleContext(DynamicSqlStatementContext,0);
	};

	usingClause() {
	    return this.getTypedRuleContext(UsingClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterOpenForClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitOpenForClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitOpenForClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FetchCursorIntoStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_fetchCursorIntoStatement;
    }

	KW_FETCH() {
	    return this.getToken(InceptorOracleParser.KW_FETCH, 0);
	};

	leftValue() {
	    return this.getTypedRuleContext(LeftValueContext,0);
	};

	intoClause() {
	    return this.getTypedRuleContext(IntoClauseContext,0);
	};

	bulkCollect() {
	    return this.getTypedRuleContext(BulkCollectContext,0);
	};

	limitClause() {
	    return this.getTypedRuleContext(LimitClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterFetchCursorIntoStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitFetchCursorIntoStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitFetchCursorIntoStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CloseCursorStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_closeCursorStatement;
    }

	KW_CLOSE() {
	    return this.getToken(InceptorOracleParser.KW_CLOSE, 0);
	};

	leftValue() {
	    return this.getTypedRuleContext(LeftValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterCloseCursorStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitCloseCursorStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitCloseCursorStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IntoClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_intoClause;
    }

	KW_INTO() {
	    return this.getToken(InceptorOracleParser.KW_INTO, 0);
	};

	leftValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LeftValueContext);
	    } else {
	        return this.getTypedRuleContext(LeftValueContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterIntoClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitIntoClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitIntoClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RealParamContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_realParam;
    }

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterRealParam(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitRealParam(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitRealParam(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_parameters;
    }

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	parameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ParameterContext);
	    } else {
	        return this.getTypedRuleContext(ParameterContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterParameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitParameters(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitParameters(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_parameter;
        this.assign = null; // Token
    }

	variable_name() {
	    return this.getTypedRuleContext(Variable_nameContext,0);
	};

	datatype() {
	    return this.getTypedRuleContext(DatatypeContext,0);
	};

	parameter_attribute = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Parameter_attributeContext);
	    } else {
	        return this.getTypedRuleContext(Parameter_attributeContext,i);
	    }
	};

	default_value() {
	    return this.getTypedRuleContext(Default_valueContext,0);
	};

	ASSIGN_OP() {
	    return this.getToken(InceptorOracleParser.ASSIGN_OP, 0);
	};

	KW_DEFAULT() {
	    return this.getToken(InceptorOracleParser.KW_DEFAULT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitParameter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitParameter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Parameter_attributeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_parameter_attribute;
    }

	KW_IN() {
	    return this.getToken(InceptorOracleParser.KW_IN, 0);
	};

	KW_OUT() {
	    return this.getToken(InceptorOracleParser.KW_OUT, 0);
	};

	KW_INOUT() {
	    return this.getToken(InceptorOracleParser.KW_INOUT, 0);
	};

	KW_NOCOPY() {
	    return this.getToken(InceptorOracleParser.KW_NOCOPY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterParameter_attribute(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitParameter_attribute(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitParameter_attribute(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DeclareSpecItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_declareSpecItem;
    }

	typeDeclStatement() {
	    return this.getTypedRuleContext(TypeDeclStatementContext,0);
	};

	SEMICOLON() {
	    return this.getToken(InceptorOracleParser.SEMICOLON, 0);
	};

	declareException() {
	    return this.getTypedRuleContext(DeclareExceptionContext,0);
	};

	declareVariable() {
	    return this.getTypedRuleContext(DeclareVariableContext,0);
	};

	cursorDeclStatement() {
	    return this.getTypedRuleContext(CursorDeclStatementContext,0);
	};

	pragmaStatement() {
	    return this.getTypedRuleContext(PragmaStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDeclareSpecItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDeclareSpecItem(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDeclareSpecItem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DeclareVariableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_declareVariable;
        this.assign = null; // Token
    }

	variable_name() {
	    return this.getTypedRuleContext(Variable_nameContext,0);
	};

	datatype() {
	    return this.getTypedRuleContext(DatatypeContext,0);
	};

	KW_CONSTANT() {
	    return this.getToken(InceptorOracleParser.KW_CONSTANT, 0);
	};

	KW_NOT() {
	    return this.getToken(InceptorOracleParser.KW_NOT, 0);
	};

	KW_NULL() {
	    return this.getToken(InceptorOracleParser.KW_NULL, 0);
	};

	default_value() {
	    return this.getTypedRuleContext(Default_valueContext,0);
	};

	ASSIGN_OP() {
	    return this.getToken(InceptorOracleParser.ASSIGN_OP, 0);
	};

	KW_DEFAULT() {
	    return this.getToken(InceptorOracleParser.KW_DEFAULT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDeclareVariable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDeclareVariable(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDeclareVariable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Variable_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_variable_name;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	AT() {
	    return this.getToken(InceptorOracleParser.AT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterVariable_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitVariable_name(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitVariable_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Default_valueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_default_value;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDefault_value(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDefault_value(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDefault_value(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Return_type_specContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_return_type_spec;
    }

	datatype() {
	    return this.getTypedRuleContext(DatatypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterReturn_type_spec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitReturn_type_spec(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitReturn_type_spec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SizeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_size;
    }

	Digit = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.Digit);
	    } else {
	        return this.getToken(InceptorOracleParser.Digit, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterSize(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitSize(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitSize(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LeftValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_leftValue;
    }

	moleculeExpression() {
	    return this.getTypedRuleContext(MoleculeExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterLeftValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitLeftValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitLeftValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PlFuncProcNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_plFuncProcName;
        this.db = null; // IdentifierContext
        this.funcpro = null; // IdentifierContext
    }

	DOT() {
	    return this.getToken(InceptorOracleParser.DOT, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterPlFuncProcName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitPlFuncProcName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitPlFuncProcName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DeclareExceptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_declareException;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	KW_EXCEPTION() {
	    return this.getToken(InceptorOracleParser.KW_EXCEPTION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDeclareException(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDeclareException(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDeclareException(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PragmaStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_pragmaStatement;
    }

	KW_PRAGMA() {
	    return this.getToken(InceptorOracleParser.KW_PRAGMA, 0);
	};

	pragmas() {
	    return this.getTypedRuleContext(PragmasContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterPragmaStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitPragmaStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitPragmaStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PragmasContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_pragmas;
    }

	pragmaExceptionInit() {
	    return this.getTypedRuleContext(PragmaExceptionInitContext,0);
	};

	pragmaAutonomousTransaction() {
	    return this.getTypedRuleContext(PragmaAutonomousTransactionContext,0);
	};

	pragmaSeriallyReusable() {
	    return this.getTypedRuleContext(PragmaSeriallyReusableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterPragmas(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitPragmas(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitPragmas(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PragmaExceptionInitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_pragmaExceptionInit;
    }

	KW_EXCEPTION_INIT() {
	    return this.getToken(InceptorOracleParser.KW_EXCEPTION_INIT, 0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	COMMA() {
	    return this.getToken(InceptorOracleParser.COMMA, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterPragmaExceptionInit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitPragmaExceptionInit(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitPragmaExceptionInit(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PragmaAutonomousTransactionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_pragmaAutonomousTransaction;
    }

	KW_AUTONOMOUS_TRANSACTION() {
	    return this.getToken(InceptorOracleParser.KW_AUTONOMOUS_TRANSACTION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterPragmaAutonomousTransaction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitPragmaAutonomousTransaction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitPragmaAutonomousTransaction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PragmaSeriallyReusableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_pragmaSeriallyReusable;
    }

	KW_SERIALLY_REUSABLE() {
	    return this.getToken(InceptorOracleParser.KW_SERIALLY_REUSABLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterPragmaSeriallyReusable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitPragmaSeriallyReusable(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitPragmaSeriallyReusable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Declare_pragmaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_declare_pragma;
    }

	KW_PRAGMA() {
	    return this.getToken(InceptorOracleParser.KW_PRAGMA, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDeclare_pragma(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDeclare_pragma(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDeclare_pragma(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Declare_recordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_declare_record;
    }

	KW_RECORD() {
	    return this.getToken(InceptorOracleParser.KW_RECORD, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDeclare_record(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDeclare_record(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDeclare_record(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Declare_tableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_declare_table;
    }

	KW_TABLE() {
	    return this.getToken(InceptorOracleParser.KW_TABLE, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDeclare_table(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDeclare_table(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDeclare_table(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DynamicSqlParserStartContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_dynamicSqlParserStart;
    }

	dynamicSqlStatement() {
	    return this.getTypedRuleContext(DynamicSqlStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDynamicSqlParserStart(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDynamicSqlParserStart(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDynamicSqlParserStart(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExecuteImmediateStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_executeImmediateStatement;
        this.into = null; // IntoClauseContext
    }

	KW_EXEC() {
	    return this.getToken(InceptorOracleParser.KW_EXEC, 0);
	};

	KW_IMMEDIATE() {
	    return this.getToken(InceptorOracleParser.KW_IMMEDIATE, 0);
	};

	dynamicSqlStatement() {
	    return this.getTypedRuleContext(DynamicSqlStatementContext,0);
	};

	usingClause() {
	    return this.getTypedRuleContext(UsingClauseContext,0);
	};

	intoClause() {
	    return this.getTypedRuleContext(IntoClauseContext,0);
	};

	bulkCollect() {
	    return this.getTypedRuleContext(BulkCollectContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterExecuteImmediateStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitExecuteImmediateStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitExecuteImmediateStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DynamicSqlStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_dynamicSqlStatement;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDynamicSqlStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDynamicSqlStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDynamicSqlStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UsingClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_usingClause;
    }

	KW_USING() {
	    return this.getToken(InceptorOracleParser.KW_USING, 0);
	};

	dynamicSqlBindArgs() {
	    return this.getTypedRuleContext(DynamicSqlBindArgsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterUsingClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitUsingClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitUsingClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DynamicSqlBindArgsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_dynamicSqlBindArgs;
    }

	dynamicSqlBindArg = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DynamicSqlBindArgContext);
	    } else {
	        return this.getTypedRuleContext(DynamicSqlBindArgContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDynamicSqlBindArgs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDynamicSqlBindArgs(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDynamicSqlBindArgs(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DynamicSqlBindArgContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_dynamicSqlBindArg;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	parameter_attribute = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Parameter_attributeContext);
	    } else {
	        return this.getTypedRuleContext(Parameter_attributeContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDynamicSqlBindArg(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDynamicSqlBindArg(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDynamicSqlBindArg(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AssignStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_assignStatement;
        this.a = null; // Token
    }

	leftValue() {
	    return this.getTypedRuleContext(LeftValueContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ASSIGN_OP() {
	    return this.getToken(InceptorOracleParser.ASSIGN_OP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterAssignStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitAssignStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitAssignStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NullStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_nullStatement;
    }

	KW_NULL() {
	    return this.getToken(InceptorOracleParser.KW_NULL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterNullStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitNullStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitNullStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExceptionParserStartContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_exceptionParserStart;
    }

	raiseStatement() {
	    return this.getTypedRuleContext(RaiseStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterExceptionParserStart(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitExceptionParserStart(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitExceptionParserStart(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RaiseStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_raiseStatement;
    }

	KW_RAISE() {
	    return this.getToken(InceptorOracleParser.KW_RAISE, 0);
	};

	leftValue() {
	    return this.getTypedRuleContext(LeftValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterRaiseStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitRaiseStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitRaiseStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExceptionHandlersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_exceptionHandlers;
    }

	KW_EXCEPTION() {
	    return this.getToken(InceptorOracleParser.KW_EXCEPTION, 0);
	};

	exceptionHandler = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExceptionHandlerContext);
	    } else {
	        return this.getTypedRuleContext(ExceptionHandlerContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterExceptionHandlers(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitExceptionHandlers(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitExceptionHandlers(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExceptionHandlerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_exceptionHandler;
    }

	KW_WHEN() {
	    return this.getToken(InceptorOracleParser.KW_WHEN, 0);
	};

	leftValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LeftValueContext);
	    } else {
	        return this.getTypedRuleContext(LeftValueContext,i);
	    }
	};

	KW_THEN() {
	    return this.getToken(InceptorOracleParser.KW_THEN, 0);
	};

	plBlockBody() {
	    return this.getTypedRuleContext(PlBlockBodyContext,0);
	};

	KW_OR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.KW_OR);
	    } else {
	        return this.getToken(InceptorOracleParser.KW_OR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterExceptionHandler(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitExceptionHandler(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitExceptionHandler(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LoopStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_loopStatement;
    }

	KW_LOOP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.KW_LOOP);
	    } else {
	        return this.getToken(InceptorOracleParser.KW_LOOP, i);
	    }
	};


	KW_END() {
	    return this.getToken(InceptorOracleParser.KW_END, 0);
	};

	KW_WHILE() {
	    return this.getToken(InceptorOracleParser.KW_WHILE, 0);
	};

	condition() {
	    return this.getTypedRuleContext(ConditionContext,0);
	};

	KW_FOR() {
	    return this.getToken(InceptorOracleParser.KW_FOR, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	KW_IN() {
	    return this.getToken(InceptorOracleParser.KW_IN, 0);
	};

	forLoopBound() {
	    return this.getTypedRuleContext(ForLoopBoundContext,0);
	};

	labeledStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LabeledStatementContext);
	    } else {
	        return this.getTypedRuleContext(LabeledStatementContext,i);
	    }
	};

	Identifier() {
	    return this.getToken(InceptorOracleParser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterLoopStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitLoopStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitLoopStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ForLoopBoundContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_forLoopBound;
    }

	rangeBound() {
	    return this.getTypedRuleContext(RangeBoundContext,0);
	};

	cursorBound() {
	    return this.getTypedRuleContext(CursorBoundContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterForLoopBound(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitForLoopBound(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitForLoopBound(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RangeBoundContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_rangeBound;
    }

	rangeBoundMin() {
	    return this.getTypedRuleContext(RangeBoundMinContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	KW_REVERSE() {
	    return this.getToken(InceptorOracleParser.KW_REVERSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterRangeBound(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitRangeBound(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitRangeBound(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RangeBoundMinContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_rangeBoundMin;
    }

	IntRangeMin() {
	    return this.getToken(InceptorOracleParser.IntRangeMin, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RANGE_OP() {
	    return this.getToken(InceptorOracleParser.RANGE_OP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterRangeBoundMin(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitRangeBoundMin(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitRangeBoundMin(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CursorBoundContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_cursorBound;
    }

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	selectStatement() {
	    return this.getTypedRuleContext(SelectStatementContext,0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	leftValue() {
	    return this.getTypedRuleContext(LeftValueContext,0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterCursorBound(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitCursorBound(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitCursorBound(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ForAllStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_forAllStatement;
    }

	KW_FORALL() {
	    return this.getToken(InceptorOracleParser.KW_FORALL, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	KW_IN() {
	    return this.getToken(InceptorOracleParser.KW_IN, 0);
	};

	forAllBound() {
	    return this.getTypedRuleContext(ForAllBoundContext,0);
	};

	queryStatement() {
	    return this.getTypedRuleContext(QueryStatementContext,0);
	};

	saveExceptions() {
	    return this.getTypedRuleContext(SaveExceptionsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterForAllStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitForAllStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitForAllStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SaveExceptionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_saveExceptions;
    }

	KW_SAVE() {
	    return this.getToken(InceptorOracleParser.KW_SAVE, 0);
	};

	KW_EXCEPTIONS() {
	    return this.getToken(InceptorOracleParser.KW_EXCEPTIONS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterSaveExceptions(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitSaveExceptions(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitSaveExceptions(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ForAllBoundContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_forAllBound;
    }

	rangeBound() {
	    return this.getTypedRuleContext(RangeBoundContext,0);
	};

	indicesBound() {
	    return this.getTypedRuleContext(IndicesBoundContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterForAllBound(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitForAllBound(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitForAllBound(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IndicesBoundContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_indicesBound;
        this.low = null; // PrecedenceNotExpressionContext
        this.high = null; // PrecedenceNotExpressionContext
    }

	KW_INDICES() {
	    return this.getToken(InceptorOracleParser.KW_INDICES, 0);
	};

	KW_OF() {
	    return this.getToken(InceptorOracleParser.KW_OF, 0);
	};

	leftValue() {
	    return this.getTypedRuleContext(LeftValueContext,0);
	};

	KW_BETWEEN() {
	    return this.getToken(InceptorOracleParser.KW_BETWEEN, 0);
	};

	KW_AND() {
	    return this.getToken(InceptorOracleParser.KW_AND, 0);
	};

	precedenceNotExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PrecedenceNotExpressionContext);
	    } else {
	        return this.getTypedRuleContext(PrecedenceNotExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterIndicesBound(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitIndicesBound(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitIndicesBound(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AttrContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_attr;
    }

	KW_ISOPEN() {
	    return this.getToken(InceptorOracleParser.KW_ISOPEN, 0);
	};

	KW_FOUND() {
	    return this.getToken(InceptorOracleParser.KW_FOUND, 0);
	};

	KW_NOTFOUND() {
	    return this.getToken(InceptorOracleParser.KW_NOTFOUND, 0);
	};

	KW_ROWCOUNT() {
	    return this.getToken(InceptorOracleParser.KW_ROWCOUNT, 0);
	};

	KW_BULK_ROWCOUNT() {
	    return this.getToken(InceptorOracleParser.KW_BULK_ROWCOUNT, 0);
	};

	KW_BULK_EXCEPTIONS() {
	    return this.getToken(InceptorOracleParser.KW_BULK_EXCEPTIONS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterAttr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitAttr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitAttr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AttrsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_attrs;
    }

	MOD() {
	    return this.getToken(InceptorOracleParser.MOD, 0);
	};

	attr() {
	    return this.getTypedRuleContext(AttrContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterAttrs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitAttrs(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitAttrs(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MoleculeExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_moleculeExpression;
    }

	atomExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AtomExpressionContext);
	    } else {
	        return this.getTypedRuleContext(AtomExpressionContext,i);
	    }
	};

	dialectFunctionName() {
	    return this.getTypedRuleContext(DialectFunctionNameContext,0);
	};

	attrs = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AttrsContext);
	    } else {
	        return this.getTypedRuleContext(AttrsContext,i);
	    }
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.DOT);
	    } else {
	        return this.getToken(InceptorOracleParser.DOT, i);
	    }
	};


	LSQUARE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.LSQUARE);
	    } else {
	        return this.getToken(InceptorOracleParser.LSQUARE, i);
	    }
	};


	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	RSQUARE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.RSQUARE);
	    } else {
	        return this.getToken(InceptorOracleParser.RSQUARE, i);
	    }
	};


	funcOp = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FuncOpContext);
	    } else {
	        return this.getTypedRuleContext(FuncOpContext,i);
	    }
	};

	RPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.RPAREN);
	    } else {
	        return this.getToken(InceptorOracleParser.RPAREN, i);
	    }
	};


	paramExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ParamExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ParamExpressionContext,i);
	    }
	};

	KW_OVER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.KW_OVER);
	    } else {
	        return this.getToken(InceptorOracleParser.KW_OVER, i);
	    }
	};


	window_specification = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Window_specificationContext);
	    } else {
	        return this.getTypedRuleContext(Window_specificationContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterMoleculeExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitMoleculeExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitMoleculeExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IfStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_ifStatement;
    }

	KW_IF = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.KW_IF);
	    } else {
	        return this.getToken(InceptorOracleParser.KW_IF, i);
	    }
	};


	condition() {
	    return this.getTypedRuleContext(ConditionContext,0);
	};

	KW_THEN() {
	    return this.getToken(InceptorOracleParser.KW_THEN, 0);
	};

	KW_END() {
	    return this.getToken(InceptorOracleParser.KW_END, 0);
	};

	labeledStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LabeledStatementContext);
	    } else {
	        return this.getTypedRuleContext(LabeledStatementContext,i);
	    }
	};

	elsifStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ElsifStatementContext);
	    } else {
	        return this.getTypedRuleContext(ElsifStatementContext,i);
	    }
	};

	elseStatement() {
	    return this.getTypedRuleContext(ElseStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterIfStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitIfStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitIfStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ElsifStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_elsifStatement;
    }

	KW_ELSIF() {
	    return this.getToken(InceptorOracleParser.KW_ELSIF, 0);
	};

	condition() {
	    return this.getTypedRuleContext(ConditionContext,0);
	};

	KW_THEN() {
	    return this.getToken(InceptorOracleParser.KW_THEN, 0);
	};

	labeledStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LabeledStatementContext);
	    } else {
	        return this.getTypedRuleContext(LabeledStatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterElsifStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitElsifStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitElsifStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ElseStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_elseStatement;
    }

	KW_ELSE() {
	    return this.getToken(InceptorOracleParser.KW_ELSE, 0);
	};

	labeledStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LabeledStatementContext);
	    } else {
	        return this.getTypedRuleContext(LabeledStatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterElseStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitElseStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitElseStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DialectNonReservedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_dialectNonReserved;
    }

	KW_NOCOPY() {
	    return this.getToken(InceptorOracleParser.KW_NOCOPY, 0);
	};

	KW_VARRAY() {
	    return this.getToken(InceptorOracleParser.KW_VARRAY, 0);
	};

	KW_PACKAGE() {
	    return this.getToken(InceptorOracleParser.KW_PACKAGE, 0);
	};

	KW_PACKAGES() {
	    return this.getToken(InceptorOracleParser.KW_PACKAGES, 0);
	};

	KW_BODY() {
	    return this.getToken(InceptorOracleParser.KW_BODY, 0);
	};

	KW_ISOPEN() {
	    return this.getToken(InceptorOracleParser.KW_ISOPEN, 0);
	};

	KW_FOUND() {
	    return this.getToken(InceptorOracleParser.KW_FOUND, 0);
	};

	KW_NOTFOUND() {
	    return this.getToken(InceptorOracleParser.KW_NOTFOUND, 0);
	};

	KW_ROWCOUNT() {
	    return this.getToken(InceptorOracleParser.KW_ROWCOUNT, 0);
	};

	KW_BULK_ROWCOUNT() {
	    return this.getToken(InceptorOracleParser.KW_BULK_ROWCOUNT, 0);
	};

	KW_BULK_EXCEPTIONS() {
	    return this.getToken(InceptorOracleParser.KW_BULK_EXCEPTIONS, 0);
	};

	KW_REVERSE() {
	    return this.getToken(InceptorOracleParser.KW_REVERSE, 0);
	};

	KW_SAVE() {
	    return this.getToken(InceptorOracleParser.KW_SAVE, 0);
	};

	KW_EXCEPTIONS() {
	    return this.getToken(InceptorOracleParser.KW_EXCEPTIONS, 0);
	};

	KW_INDICES() {
	    return this.getToken(InceptorOracleParser.KW_INDICES, 0);
	};

	KW_REF() {
	    return this.getToken(InceptorOracleParser.KW_REF, 0);
	};

	KW_VALUES() {
	    return this.getToken(InceptorOracleParser.KW_VALUES, 0);
	};

	KW_SET() {
	    return this.getToken(InceptorOracleParser.KW_SET, 0);
	};

	KW_SYSDATE() {
	    return this.getToken(InceptorOracleParser.KW_SYSDATE, 0);
	};

	KW_YEARS() {
	    return this.getToken(InceptorOracleParser.KW_YEARS, 0);
	};

	KW_MONTHS() {
	    return this.getToken(InceptorOracleParser.KW_MONTHS, 0);
	};

	KW_DAYS() {
	    return this.getToken(InceptorOracleParser.KW_DAYS, 0);
	};

	KW_HOURS() {
	    return this.getToken(InceptorOracleParser.KW_HOURS, 0);
	};

	KW_MINUTES() {
	    return this.getToken(InceptorOracleParser.KW_MINUTES, 0);
	};

	KW_SECONDS() {
	    return this.getToken(InceptorOracleParser.KW_SECONDS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDialectNonReserved(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDialectNonReserved(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDialectNonReserved(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DialectFunctionNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_dialectFunctionName;
    }

	KW_IF() {
	    return this.getToken(InceptorOracleParser.KW_IF, 0);
	};

	KW_ARRAY() {
	    return this.getToken(InceptorOracleParser.KW_ARRAY, 0);
	};

	KW_MAP() {
	    return this.getToken(InceptorOracleParser.KW_MAP, 0);
	};

	KW_STRUCT() {
	    return this.getToken(InceptorOracleParser.KW_STRUCT, 0);
	};

	KW_UNIONTYPE() {
	    return this.getToken(InceptorOracleParser.KW_UNIONTYPE, 0);
	};

	KW_SYSDATE() {
	    return this.getToken(InceptorOracleParser.KW_SYSDATE, 0);
	};

	KW_SYSTIMESTAMP() {
	    return this.getToken(InceptorOracleParser.KW_SYSTIMESTAMP, 0);
	};

	KW_SYSTIME() {
	    return this.getToken(InceptorOracleParser.KW_SYSTIME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDialectFunctionName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDialectFunctionName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDialectFunctionName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NonSqlStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_nonSqlStatement;
    }

	nullStatement() {
	    return this.getTypedRuleContext(NullStatementContext,0);
	};

	ifStatement() {
	    return this.getTypedRuleContext(IfStatementContext,0);
	};

	loopStatement() {
	    return this.getTypedRuleContext(LoopStatementContext,0);
	};

	forAllStatement() {
	    return this.getTypedRuleContext(ForAllStatementContext,0);
	};

	continueStatement() {
	    return this.getTypedRuleContext(ContinueStatementContext,0);
	};

	exitStatement() {
	    return this.getTypedRuleContext(ExitStatementContext,0);
	};

	returnStatement() {
	    return this.getTypedRuleContext(ReturnStatementContext,0);
	};

	gotoStatement() {
	    return this.getTypedRuleContext(GotoStatementContext,0);
	};

	openForOrOpenCursorStatement() {
	    return this.getTypedRuleContext(OpenForOrOpenCursorStatementContext,0);
	};

	fetchCursorIntoStatement() {
	    return this.getTypedRuleContext(FetchCursorIntoStatementContext,0);
	};

	closeCursorStatement() {
	    return this.getTypedRuleContext(CloseCursorStatementContext,0);
	};

	assignStatement() {
	    return this.getTypedRuleContext(AssignStatementContext,0);
	};

	raiseStatement() {
	    return this.getTypedRuleContext(RaiseStatementContext,0);
	};

	dclStatement() {
	    return this.getTypedRuleContext(DclStatementContext,0);
	};

	plBlockStatement() {
	    return this.getTypedRuleContext(PlBlockStatementContext,0);
	};

	executeImmediateStatement() {
	    return this.getTypedRuleContext(ExecuteImmediateStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterNonSqlStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitNonSqlStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitNonSqlStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StatementsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_statements;
    }

	sqlStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SqlStatementContext);
	    } else {
	        return this.getTypedRuleContext(SqlStatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterStatements(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitStatements(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitStatements(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SqlStatementEmptyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_sqlStatementEmpty;
    }

	sqlStatement() {
	    return this.getTypedRuleContext(SqlStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterSqlStatementEmpty(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitSqlStatementEmpty(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitSqlStatementEmpty(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SqlStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_sqlStatement;
    }

	plantStatement() {
	    return this.getTypedRuleContext(PlantStatementContext,0);
	};

	EOF() {
	    return this.getToken(InceptorOracleParser.EOF, 0);
	};

	SEMICOLON() {
	    return this.getToken(InceptorOracleParser.SEMICOLON, 0);
	};

	explainStatement() {
	    return this.getTypedRuleContext(ExplainStatementContext,0);
	};

	execStatement() {
	    return this.getTypedRuleContext(ExecStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterSqlStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitSqlStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitSqlStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PlantStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_plantStatement;
    }

	KW_PLANT() {
	    return this.getToken(InceptorOracleParser.KW_PLANT, 0);
	};

	execStatement() {
	    return this.getTypedRuleContext(ExecStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterPlantStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitPlantStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitPlantStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExplainStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_explainStatement;
        this.explainOptions = null; // Token
    }

	KW_EXPLAIN() {
	    return this.getToken(InceptorOracleParser.KW_EXPLAIN, 0);
	};

	execStatement() {
	    return this.getTypedRuleContext(ExecStatementContext,0);
	};

	KW_EXTENDED() {
	    return this.getToken(InceptorOracleParser.KW_EXTENDED, 0);
	};

	KW_FORMATTED() {
	    return this.getToken(InceptorOracleParser.KW_FORMATTED, 0);
	};

	KW_DEPENDENCY() {
	    return this.getToken(InceptorOracleParser.KW_DEPENDENCY, 0);
	};

	KW_LOGICAL() {
	    return this.getToken(InceptorOracleParser.KW_LOGICAL, 0);
	};

	KW_COST() {
	    return this.getToken(InceptorOracleParser.KW_COST, 0);
	};

	KW_STARGATE() {
	    return this.getToken(InceptorOracleParser.KW_STARGATE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterExplainStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitExplainStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitExplainStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExecStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_execStatement;
    }

	mandarinStatement() {
	    return this.getTypedRuleContext(MandarinStatementContext,0);
	};

	anonExecStatement() {
	    return this.getTypedRuleContext(AnonExecStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterExecStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitExecStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitExecStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PkgNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_pkgName;
        this.db = null; // IdentifierContext
        this.pkg = null; // Token
    }

	DOT() {
	    return this.getToken(InceptorOracleParser.DOT, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	Identifier() {
	    return this.getToken(InceptorOracleParser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterPkgName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitPkgName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitPkgName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreatePackageStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_createPackageStatement;
    }

	KW_PACKAGE() {
	    return this.getToken(InceptorOracleParser.KW_PACKAGE, 0);
	};

	pkgName() {
	    return this.getTypedRuleContext(PkgNameContext,0);
	};

	KW_END() {
	    return this.getToken(InceptorOracleParser.KW_END, 0);
	};

	KW_IS() {
	    return this.getToken(InceptorOracleParser.KW_IS, 0);
	};

	KW_AS() {
	    return this.getToken(InceptorOracleParser.KW_AS, 0);
	};

	ifNotExists() {
	    return this.getTypedRuleContext(IfNotExistsContext,0);
	};

	KW_DECLARE() {
	    return this.getToken(InceptorOracleParser.KW_DECLARE, 0);
	};

	pkgDeclSpecItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PkgDeclSpecItemContext);
	    } else {
	        return this.getTypedRuleContext(PkgDeclSpecItemContext,i);
	    }
	};

	Identifier() {
	    return this.getToken(InceptorOracleParser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterCreatePackageStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitCreatePackageStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitCreatePackageStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreatePackageBodyStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_createPackageBodyStatement;
        this.begin = null; // Token
    }

	KW_PACKAGE() {
	    return this.getToken(InceptorOracleParser.KW_PACKAGE, 0);
	};

	KW_BODY() {
	    return this.getToken(InceptorOracleParser.KW_BODY, 0);
	};

	pkgName() {
	    return this.getTypedRuleContext(PkgNameContext,0);
	};

	KW_END() {
	    return this.getToken(InceptorOracleParser.KW_END, 0);
	};

	KW_IS() {
	    return this.getToken(InceptorOracleParser.KW_IS, 0);
	};

	KW_AS() {
	    return this.getToken(InceptorOracleParser.KW_AS, 0);
	};

	ifNotExists() {
	    return this.getTypedRuleContext(IfNotExistsContext,0);
	};

	KW_DECLARE() {
	    return this.getToken(InceptorOracleParser.KW_DECLARE, 0);
	};

	pkgBodyDeclSpecItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PkgBodyDeclSpecItemContext);
	    } else {
	        return this.getTypedRuleContext(PkgBodyDeclSpecItemContext,i);
	    }
	};

	plBlockBody() {
	    return this.getTypedRuleContext(PlBlockBodyContext,0);
	};

	Identifier() {
	    return this.getToken(InceptorOracleParser.Identifier, 0);
	};

	KW_BEGIN() {
	    return this.getToken(InceptorOracleParser.KW_BEGIN, 0);
	};

	exceptionHandlers() {
	    return this.getTypedRuleContext(ExceptionHandlersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterCreatePackageBodyStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitCreatePackageBodyStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitCreatePackageBodyStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropPackageStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_dropPackageStatement;
    }

	KW_DROP() {
	    return this.getToken(InceptorOracleParser.KW_DROP, 0);
	};

	KW_PACKAGE() {
	    return this.getToken(InceptorOracleParser.KW_PACKAGE, 0);
	};

	pkgName() {
	    return this.getTypedRuleContext(PkgNameContext,0);
	};

	KW_PLSQL() {
	    return this.getToken(InceptorOracleParser.KW_PLSQL, 0);
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDropPackageStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDropPackageStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDropPackageStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PkgDeclSpecItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_pkgDeclSpecItem;
    }

	declFunctionSpec() {
	    return this.getTypedRuleContext(DeclFunctionSpecContext,0);
	};

	declProcedureSpec() {
	    return this.getTypedRuleContext(DeclProcedureSpecContext,0);
	};

	declareSpecItem() {
	    return this.getTypedRuleContext(DeclareSpecItemContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterPkgDeclSpecItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitPkgDeclSpecItem(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitPkgDeclSpecItem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PkgBodyDeclSpecItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_pkgBodyDeclSpecItem;
    }

	createSQL92FunctionStatement() {
	    return this.getTypedRuleContext(CreateSQL92FunctionStatementContext,0);
	};

	SEMICOLON() {
	    return this.getToken(InceptorOracleParser.SEMICOLON, 0);
	};

	createSQL92ProcedureStatement() {
	    return this.getTypedRuleContext(CreateSQL92ProcedureStatementContext,0);
	};

	declareSpecItem() {
	    return this.getTypedRuleContext(DeclareSpecItemContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterPkgBodyDeclSpecItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitPkgBodyDeclSpecItem(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitPkgBodyDeclSpecItem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DeclFunctionSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_declFunctionSpec;
    }

	KW_FUNCTION() {
	    return this.getToken(InceptorOracleParser.KW_FUNCTION, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	parameters() {
	    return this.getTypedRuleContext(ParametersContext,0);
	};

	KW_RETURN() {
	    return this.getToken(InceptorOracleParser.KW_RETURN, 0);
	};

	return_type_spec() {
	    return this.getTypedRuleContext(Return_type_specContext,0);
	};

	SEMICOLON() {
	    return this.getToken(InceptorOracleParser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDeclFunctionSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDeclFunctionSpec(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDeclFunctionSpec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DeclProcedureSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_declProcedureSpec;
    }

	KW_PROCEDURE() {
	    return this.getToken(InceptorOracleParser.KW_PROCEDURE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	parameters() {
	    return this.getTypedRuleContext(ParametersContext,0);
	};

	SEMICOLON() {
	    return this.getToken(InceptorOracleParser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDeclProcedureSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDeclProcedureSpec(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDeclProcedureSpec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AnonExecStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_anonExecStatement;
    }

	plBlockStatement() {
	    return this.getTypedRuleContext(PlBlockStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterAnonExecStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitAnonExecStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitAnonExecStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PlBlockStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_plBlockStatement;
    }

	KW_BEGIN() {
	    return this.getToken(InceptorOracleParser.KW_BEGIN, 0);
	};

	plBlockBody() {
	    return this.getTypedRuleContext(PlBlockBodyContext,0);
	};

	KW_END() {
	    return this.getToken(InceptorOracleParser.KW_END, 0);
	};

	KW_DECLARE() {
	    return this.getToken(InceptorOracleParser.KW_DECLARE, 0);
	};

	exceptionHandlers() {
	    return this.getTypedRuleContext(ExceptionHandlersContext,0);
	};

	Identifier() {
	    return this.getToken(InceptorOracleParser.Identifier, 0);
	};

	declareSpecItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DeclareSpecItemContext);
	    } else {
	        return this.getTypedRuleContext(DeclareSpecItemContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterPlBlockStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitPlBlockStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitPlBlockStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PlBlockBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_plBlockBody;
    }

	labeledStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LabeledStatementContext);
	    } else {
	        return this.getTypedRuleContext(LabeledStatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterPlBlockBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitPlBlockBody(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitPlBlockBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AtomExecStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_atomExecStatement;
    }

	updateStatement() {
	    return this.getTypedRuleContext(UpdateStatementContext,0);
	};

	deleteStatement() {
	    return this.getTypedRuleContext(DeleteStatementContext,0);
	};

	mergeStatement() {
	    return this.getTypedRuleContext(MergeStatementContext,0);
	};

	queryStatementExpression() {
	    return this.getTypedRuleContext(QueryStatementExpressionContext,0);
	};

	nonSqlStatement() {
	    return this.getTypedRuleContext(NonSqlStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterAtomExecStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitAtomExecStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitAtomExecStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class HintedStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_hintedStatement;
    }

	hintClause() {
	    return this.getTypedRuleContext(HintClauseContext,0);
	};

	atomExecStatement() {
	    return this.getTypedRuleContext(AtomExecStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterHintedStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitHintedStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitHintedStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LabelContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_label;
    }

	DOUBLELESSTHAN() {
	    return this.getToken(InceptorOracleParser.DOUBLELESSTHAN, 0);
	};

	Identifier() {
	    return this.getToken(InceptorOracleParser.Identifier, 0);
	};

	DOUBLEGREATERTHAN() {
	    return this.getToken(InceptorOracleParser.DOUBLEGREATERTHAN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterLabel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitLabel(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitLabel(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LabeledStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_labeledStatement;
    }

	label() {
	    return this.getTypedRuleContext(LabelContext,0);
	};

	hintedStatement() {
	    return this.getTypedRuleContext(HintedStatementContext,0);
	};

	SEMICOLON() {
	    return this.getToken(InceptorOracleParser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterLabeledStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitLabeledStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitLabeledStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DialectCreateOrReplaceStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_dialectCreateOrReplaceStatement;
    }

	createSQL92FunctionStatement() {
	    return this.getTypedRuleContext(CreateSQL92FunctionStatementContext,0);
	};

	createSQL92ProcedureStatement() {
	    return this.getTypedRuleContext(CreateSQL92ProcedureStatementContext,0);
	};

	createPackageStatement() {
	    return this.getTypedRuleContext(CreatePackageStatementContext,0);
	};

	createPackageBodyStatement() {
	    return this.getTypedRuleContext(CreatePackageBodyStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDialectCreateOrReplaceStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDialectCreateOrReplaceStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDialectCreateOrReplaceStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DialectDropStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_dialectDropStatement;
    }

	dropSQL92FunctionStatement() {
	    return this.getTypedRuleContext(DropSQL92FunctionStatementContext,0);
	};

	dropSQL92ProcedureStatement() {
	    return this.getTypedRuleContext(DropSQL92ProcedureStatementContext,0);
	};

	dropPackageStatement() {
	    return this.getTypedRuleContext(DropPackageStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDialectDropStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDialectDropStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDialectDropStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateSQL92FunctionStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_createSQL92FunctionStatement;
        this.func_name = null; // PlFuncProcNameContext
    }

	KW_FUNCTION() {
	    return this.getToken(InceptorOracleParser.KW_FUNCTION, 0);
	};

	parameters() {
	    return this.getTypedRuleContext(ParametersContext,0);
	};

	KW_RETURN() {
	    return this.getToken(InceptorOracleParser.KW_RETURN, 0);
	};

	return_type_spec() {
	    return this.getTypedRuleContext(Return_type_specContext,0);
	};

	KW_BEGIN() {
	    return this.getToken(InceptorOracleParser.KW_BEGIN, 0);
	};

	plBlockBody() {
	    return this.getTypedRuleContext(PlBlockBodyContext,0);
	};

	KW_END() {
	    return this.getToken(InceptorOracleParser.KW_END, 0);
	};

	plFuncProcName() {
	    return this.getTypedRuleContext(PlFuncProcNameContext,0);
	};

	KW_IS() {
	    return this.getToken(InceptorOracleParser.KW_IS, 0);
	};

	KW_AS() {
	    return this.getToken(InceptorOracleParser.KW_AS, 0);
	};

	ifNotExists() {
	    return this.getTypedRuleContext(IfNotExistsContext,0);
	};

	KW_DECLARE() {
	    return this.getToken(InceptorOracleParser.KW_DECLARE, 0);
	};

	declareSpecItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DeclareSpecItemContext);
	    } else {
	        return this.getTypedRuleContext(DeclareSpecItemContext,i);
	    }
	};

	exceptionHandlers() {
	    return this.getTypedRuleContext(ExceptionHandlersContext,0);
	};

	Identifier() {
	    return this.getToken(InceptorOracleParser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterCreateSQL92FunctionStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitCreateSQL92FunctionStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitCreateSQL92FunctionStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropSQL92FunctionStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_dropSQL92FunctionStatement;
        this.func_name = null; // PlFuncProcNameContext
    }

	KW_DROP() {
	    return this.getToken(InceptorOracleParser.KW_DROP, 0);
	};

	KW_FUNCTION() {
	    return this.getToken(InceptorOracleParser.KW_FUNCTION, 0);
	};

	plFuncProcName() {
	    return this.getTypedRuleContext(PlFuncProcNameContext,0);
	};

	KW_PLSQL() {
	    return this.getToken(InceptorOracleParser.KW_PLSQL, 0);
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	parameters() {
	    return this.getTypedRuleContext(ParametersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDropSQL92FunctionStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDropSQL92FunctionStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDropSQL92FunctionStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateSQL92ProcedureStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_createSQL92ProcedureStatement;
        this.procedure_name = null; // PlFuncProcNameContext
    }

	KW_PROCEDURE() {
	    return this.getToken(InceptorOracleParser.KW_PROCEDURE, 0);
	};

	parameters() {
	    return this.getTypedRuleContext(ParametersContext,0);
	};

	KW_BEGIN() {
	    return this.getToken(InceptorOracleParser.KW_BEGIN, 0);
	};

	plBlockBody() {
	    return this.getTypedRuleContext(PlBlockBodyContext,0);
	};

	KW_END() {
	    return this.getToken(InceptorOracleParser.KW_END, 0);
	};

	plFuncProcName() {
	    return this.getTypedRuleContext(PlFuncProcNameContext,0);
	};

	KW_IS() {
	    return this.getToken(InceptorOracleParser.KW_IS, 0);
	};

	KW_AS() {
	    return this.getToken(InceptorOracleParser.KW_AS, 0);
	};

	ifNotExists() {
	    return this.getTypedRuleContext(IfNotExistsContext,0);
	};

	KW_DECLARE() {
	    return this.getToken(InceptorOracleParser.KW_DECLARE, 0);
	};

	declareSpecItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DeclareSpecItemContext);
	    } else {
	        return this.getTypedRuleContext(DeclareSpecItemContext,i);
	    }
	};

	exceptionHandlers() {
	    return this.getTypedRuleContext(ExceptionHandlersContext,0);
	};

	Identifier() {
	    return this.getToken(InceptorOracleParser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterCreateSQL92ProcedureStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitCreateSQL92ProcedureStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitCreateSQL92ProcedureStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropSQL92ProcedureStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_dropSQL92ProcedureStatement;
        this.procedure_name = null; // PlFuncProcNameContext
    }

	KW_DROP() {
	    return this.getToken(InceptorOracleParser.KW_DROP, 0);
	};

	KW_PROCEDURE() {
	    return this.getToken(InceptorOracleParser.KW_PROCEDURE, 0);
	};

	plFuncProcName() {
	    return this.getTypedRuleContext(PlFuncProcNameContext,0);
	};

	KW_PLSQL() {
	    return this.getToken(InceptorOracleParser.KW_PLSQL, 0);
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	parameters() {
	    return this.getTypedRuleContext(ParametersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDropSQL92ProcedureStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDropSQL92ProcedureStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDropSQL92ProcedureStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DialectLimitClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_dialectLimitClause;
        this.offset = null; // Token
        this.num = null; // Token
        this.value = null; // Token
    }

	KW_LIMIT() {
	    return this.getToken(InceptorOracleParser.KW_LIMIT, 0);
	};

	Number = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.Number);
	    } else {
	        return this.getToken(InceptorOracleParser.Number, i);
	    }
	};


	COMMA() {
	    return this.getToken(InceptorOracleParser.COMMA, 0);
	};

	KW_FETCH() {
	    return this.getToken(InceptorOracleParser.KW_FETCH, 0);
	};

	KW_FIRST() {
	    return this.getToken(InceptorOracleParser.KW_FIRST, 0);
	};

	KW_ROWS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.KW_ROWS);
	    } else {
	        return this.getToken(InceptorOracleParser.KW_ROWS, i);
	    }
	};


	KW_ONLY() {
	    return this.getToken(InceptorOracleParser.KW_ONLY, 0);
	};

	KW_NEXT() {
	    return this.getToken(InceptorOracleParser.KW_NEXT, 0);
	};

	KW_OFFSET() {
	    return this.getToken(InceptorOracleParser.KW_OFFSET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDialectLimitClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDialectLimitClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDialectLimitClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DialectCreateTemporaryTableStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_dialectCreateTemporaryTableStatement;
        this.temp = null; // Token
        this.ext = null; // Token
        this.name = null; // TableNameContext
    }

	KW_CREATE() {
	    return this.getToken(InceptorOracleParser.KW_CREATE, 0);
	};

	KW_TABLE() {
	    return this.getToken(InceptorOracleParser.KW_TABLE, 0);
	};

	tableDefinitionClause() {
	    return this.getTypedRuleContext(TableDefinitionClauseContext,0);
	};

	KW_TEMPORARY() {
	    return this.getToken(InceptorOracleParser.KW_TEMPORARY, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	ifNotExists() {
	    return this.getTypedRuleContext(IfNotExistsContext,0);
	};

	KW_EXTERNAL() {
	    return this.getToken(InceptorOracleParser.KW_EXTERNAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDialectCreateTemporaryTableStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDialectCreateTemporaryTableStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDialectCreateTemporaryTableStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DialectCreateTableStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_dialectCreateTableStatement;
        this.ext = null; // Token
        this.name = null; // TableNameContext
    }

	KW_CREATE() {
	    return this.getToken(InceptorOracleParser.KW_CREATE, 0);
	};

	KW_TABLE() {
	    return this.getToken(InceptorOracleParser.KW_TABLE, 0);
	};

	tableDefinitionClause() {
	    return this.getTypedRuleContext(TableDefinitionClauseContext,0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	ifNotExists() {
	    return this.getTypedRuleContext(IfNotExistsContext,0);
	};

	KW_EXTERNAL() {
	    return this.getToken(InceptorOracleParser.KW_EXTERNAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDialectCreateTableStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDialectCreateTableStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDialectCreateTableStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DialectWithNoDataContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_dialectWithNoData;
    }

	KW_WITH() {
	    return this.getToken(InceptorOracleParser.KW_WITH, 0);
	};

	KW_NO() {
	    return this.getToken(InceptorOracleParser.KW_NO, 0);
	};

	KW_DATA() {
	    return this.getToken(InceptorOracleParser.KW_DATA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDialectWithNoData(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDialectWithNoData(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDialectWithNoData(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DialectcolumnConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_dialectcolumnConstraint;
    }

	KW_NOT() {
	    return this.getToken(InceptorOracleParser.KW_NOT, 0);
	};

	KW_NULL() {
	    return this.getToken(InceptorOracleParser.KW_NULL, 0);
	};

	KW_UNIQUE() {
	    return this.getToken(InceptorOracleParser.KW_UNIQUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDialectcolumnConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDialectcolumnConstraint(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDialectcolumnConstraint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DialectTableDefinitionClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_dialectTableDefinitionClause;
        this.like = null; // Token
        this.likeName = null; // TableNameContext
    }

	KW_LIKE() {
	    return this.getToken(InceptorOracleParser.KW_LIKE, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	tableLocation() {
	    return this.getTypedRuleContext(TableLocationContext,0);
	};

	tablePropertiesPrefixed() {
	    return this.getTypedRuleContext(TablePropertiesPrefixedContext,0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	columnNameTypeOrConstraintList() {
	    return this.getTypedRuleContext(ColumnNameTypeOrConstraintListContext,0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	tableComment() {
	    return this.getTypedRuleContext(TableCommentContext,0);
	};

	tablePartition() {
	    return this.getTypedRuleContext(TablePartitionContext,0);
	};

	tableRoute() {
	    return this.getTypedRuleContext(TableRouteContext,0);
	};

	tableBuckets() {
	    return this.getTypedRuleContext(TableBucketsContext,0);
	};

	tableSkewed() {
	    return this.getTypedRuleContext(TableSkewedContext,0);
	};

	tableRowFormat() {
	    return this.getTypedRuleContext(TableRowFormatContext,0);
	};

	tableFileFormat() {
	    return this.getTypedRuleContext(TableFileFormatContext,0);
	};

	esProps() {
	    return this.getTypedRuleContext(EsPropsContext,0);
	};

	holoProps() {
	    return this.getTypedRuleContext(HoloPropsContext,0);
	};

	holoTableSize() {
	    return this.getTypedRuleContext(HoloTableSizeContext,0);
	};

	erroLogTableSpec() {
	    return this.getTypedRuleContext(ErroLogTableSpecContext,0);
	};

	KW_AS() {
	    return this.getToken(InceptorOracleParser.KW_AS, 0);
	};

	ctasTargetStatement() {
	    return this.getTypedRuleContext(CtasTargetStatementContext,0);
	};

	noDataCopyQuery() {
	    return this.getTypedRuleContext(NoDataCopyQueryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDialectTableDefinitionClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDialectTableDefinitionClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDialectTableDefinitionClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DialectPrimitiveTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_dialectPrimitiveType;
        this.length = null; // Token
    }

	KW_NVARCHAR() {
	    return this.getToken(InceptorOracleParser.KW_NVARCHAR, 0);
	};

	KW_VARCHAR2() {
	    return this.getToken(InceptorOracleParser.KW_VARCHAR2, 0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	Number() {
	    return this.getToken(InceptorOracleParser.Number, 0);
	};

	KW_VARCHAR() {
	    return this.getToken(InceptorOracleParser.KW_VARCHAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDialectPrimitiveType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDialectPrimitiveType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDialectPrimitiveType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TimeTypeLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_timeTypeLiteral;
    }

	dateLiteral() {
	    return this.getTypedRuleContext(DateLiteralContext,0);
	};

	timestampLiteral() {
	    return this.getTypedRuleContext(TimestampLiteralContext,0);
	};

	sysdateortimestampLiteral() {
	    return this.getTypedRuleContext(SysdateortimestampLiteralContext,0);
	};

	intervalLiteral() {
	    return this.getTypedRuleContext(IntervalLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterTimeTypeLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitTimeTypeLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitTimeTypeLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DateLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_dateLiteral;
    }

	KW_DATE() {
	    return this.getToken(InceptorOracleParser.KW_DATE, 0);
	};

	StringLiteral() {
	    return this.getToken(InceptorOracleParser.StringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDateLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDateLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDateLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TimestampLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_timestampLiteral;
    }

	KW_TIMESTAMP() {
	    return this.getToken(InceptorOracleParser.KW_TIMESTAMP, 0);
	};

	StringLiteral() {
	    return this.getToken(InceptorOracleParser.StringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterTimestampLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitTimestampLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitTimestampLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SysdateortimestampLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_sysdateortimestampLiteral;
    }

	KW_SYSDATE() {
	    return this.getToken(InceptorOracleParser.KW_SYSDATE, 0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	KW_SYSTIMESTAMP() {
	    return this.getToken(InceptorOracleParser.KW_SYSTIMESTAMP, 0);
	};

	KW_SYSTIME() {
	    return this.getToken(InceptorOracleParser.KW_SYSTIME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterSysdateortimestampLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitSysdateortimestampLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitSysdateortimestampLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DateTimeExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_dateTimeExpression;
    }

	KW_DAY() {
	    return this.getToken(InceptorOracleParser.KW_DAY, 0);
	};

	KW_HOUR() {
	    return this.getToken(InceptorOracleParser.KW_HOUR, 0);
	};

	KW_MINUTE() {
	    return this.getToken(InceptorOracleParser.KW_MINUTE, 0);
	};

	KW_SECOND() {
	    return this.getToken(InceptorOracleParser.KW_SECOND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDateTimeExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDateTimeExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDateTimeExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MonthExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_monthExpression;
    }

	KW_YEAR() {
	    return this.getToken(InceptorOracleParser.KW_YEAR, 0);
	};

	KW_MONTH() {
	    return this.getToken(InceptorOracleParser.KW_MONTH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterMonthExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitMonthExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitMonthExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IntervalValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_intervalValue;
    }

	StringLiteral() {
	    return this.getToken(InceptorOracleParser.StringLiteral, 0);
	};

	Number() {
	    return this.getToken(InceptorOracleParser.Number, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterIntervalValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitIntervalValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitIntervalValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IntervalLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_intervalLiteral;
        this.value = null; // IntervalValueContext
        this.qualifiers = null; // IntervalQualifiersContext
    }

	intervalValue() {
	    return this.getTypedRuleContext(IntervalValueContext,0);
	};

	intervalQualifiers() {
	    return this.getTypedRuleContext(IntervalQualifiersContext,0);
	};

	KW_INTERVAL() {
	    return this.getToken(InceptorOracleParser.KW_INTERVAL, 0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	Number() {
	    return this.getToken(InceptorOracleParser.Number, 0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterIntervalLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitIntervalLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitIntervalLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IntervalQualifiersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_intervalQualifiers;
    }

	KW_YEAR() {
	    return this.getToken(InceptorOracleParser.KW_YEAR, 0);
	};

	KW_TO() {
	    return this.getToken(InceptorOracleParser.KW_TO, 0);
	};

	KW_MONTH() {
	    return this.getToken(InceptorOracleParser.KW_MONTH, 0);
	};

	KW_DAY() {
	    return this.getToken(InceptorOracleParser.KW_DAY, 0);
	};

	KW_SECOND() {
	    return this.getToken(InceptorOracleParser.KW_SECOND, 0);
	};

	KW_YEARS() {
	    return this.getToken(InceptorOracleParser.KW_YEARS, 0);
	};

	KW_MONTHS() {
	    return this.getToken(InceptorOracleParser.KW_MONTHS, 0);
	};

	KW_DAYS() {
	    return this.getToken(InceptorOracleParser.KW_DAYS, 0);
	};

	KW_HOUR() {
	    return this.getToken(InceptorOracleParser.KW_HOUR, 0);
	};

	KW_HOURS() {
	    return this.getToken(InceptorOracleParser.KW_HOURS, 0);
	};

	KW_MINUTE() {
	    return this.getToken(InceptorOracleParser.KW_MINUTE, 0);
	};

	KW_MINUTES() {
	    return this.getToken(InceptorOracleParser.KW_MINUTES, 0);
	};

	KW_SECONDS() {
	    return this.getToken(InceptorOracleParser.KW_SECONDS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterIntervalQualifiers(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitIntervalQualifiers(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitIntervalQualifiers(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeParserStartContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_typeParserStart;
    }

	datatype() {
	    return this.getTypedRuleContext(DatatypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterTypeParserStart(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitTypeParserStart(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitTypeParserStart(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DatatypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_datatype;
    }

	scalarType() {
	    return this.getTypedRuleContext(ScalarTypeContext,0);
	};

	otherType() {
	    return this.getTypedRuleContext(OtherTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterDatatype(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitDatatype(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitDatatype(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OtherTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_otherType;
    }

	leftValue() {
	    return this.getTypedRuleContext(LeftValueContext,0);
	};

	MOD() {
	    return this.getToken(InceptorOracleParser.MOD, 0);
	};

	KW_TYPE() {
	    return this.getToken(InceptorOracleParser.KW_TYPE, 0);
	};

	KW_ROWTYPE() {
	    return this.getToken(InceptorOracleParser.KW_ROWTYPE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterOtherType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitOtherType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitOtherType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ScalarTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_scalarType;
    }

	scalarTypes() {
	    return this.getTypedRuleContext(ScalarTypesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterScalarType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitScalarType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitScalarType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ScalarTypesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_scalarTypes;
    }

	primitiveType() {
	    return this.getTypedRuleContext(PrimitiveTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterScalarTypes(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitScalarTypes(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitScalarTypes(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeDeclStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_typeDeclStatement;
    }

	KW_TYPE() {
	    return this.getToken(InceptorOracleParser.KW_TYPE, 0);
	};

	Identifier() {
	    return this.getToken(InceptorOracleParser.Identifier, 0);
	};

	KW_IS() {
	    return this.getToken(InceptorOracleParser.KW_IS, 0);
	};

	assocArrayOrNestedTableTypeDef() {
	    return this.getTypedRuleContext(AssocArrayOrNestedTableTypeDefContext,0);
	};

	varrayTypeDef() {
	    return this.getTypedRuleContext(VarrayTypeDefContext,0);
	};

	recordTypeDef() {
	    return this.getTypedRuleContext(RecordTypeDefContext,0);
	};

	refCursorTypeDef() {
	    return this.getTypedRuleContext(RefCursorTypeDefContext,0);
	};

	datatype() {
	    return this.getTypedRuleContext(DatatypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterTypeDeclStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitTypeDeclStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitTypeDeclStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RecordTypeDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_recordTypeDef;
    }

	KW_RECORD() {
	    return this.getToken(InceptorOracleParser.KW_RECORD, 0);
	};

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	declareVariable = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DeclareVariableContext);
	    } else {
	        return this.getTypedRuleContext(DeclareVariableContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(InceptorOracleParser.COMMA);
	    } else {
	        return this.getToken(InceptorOracleParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterRecordTypeDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitRecordTypeDef(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitRecordTypeDef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AssocArrayOrNestedTableTypeDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_assocArrayOrNestedTableTypeDef;
        this.idx = null; // Token
    }

	KW_TABLE() {
	    return this.getToken(InceptorOracleParser.KW_TABLE, 0);
	};

	KW_OF() {
	    return this.getToken(InceptorOracleParser.KW_OF, 0);
	};

	elementType() {
	    return this.getTypedRuleContext(ElementTypeContext,0);
	};

	KW_NOT() {
	    return this.getToken(InceptorOracleParser.KW_NOT, 0);
	};

	KW_NULL() {
	    return this.getToken(InceptorOracleParser.KW_NULL, 0);
	};

	KW_BY() {
	    return this.getToken(InceptorOracleParser.KW_BY, 0);
	};

	indexType() {
	    return this.getTypedRuleContext(IndexTypeContext,0);
	};

	KW_INDEX() {
	    return this.getToken(InceptorOracleParser.KW_INDEX, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterAssocArrayOrNestedTableTypeDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitAssocArrayOrNestedTableTypeDef(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitAssocArrayOrNestedTableTypeDef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IndexTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_indexType;
    }

	KW_INT() {
	    return this.getToken(InceptorOracleParser.KW_INT, 0);
	};

	KW_STRING() {
	    return this.getToken(InceptorOracleParser.KW_STRING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterIndexType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitIndexType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitIndexType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VarrayTypeDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_varrayTypeDef;
    }

	LPAREN() {
	    return this.getToken(InceptorOracleParser.LPAREN, 0);
	};

	Number() {
	    return this.getToken(InceptorOracleParser.Number, 0);
	};

	RPAREN() {
	    return this.getToken(InceptorOracleParser.RPAREN, 0);
	};

	KW_OF() {
	    return this.getToken(InceptorOracleParser.KW_OF, 0);
	};

	elementType() {
	    return this.getTypedRuleContext(ElementTypeContext,0);
	};

	KW_VARRAY() {
	    return this.getToken(InceptorOracleParser.KW_VARRAY, 0);
	};

	KW_VARYING() {
	    return this.getToken(InceptorOracleParser.KW_VARYING, 0);
	};

	KW_ARRAY() {
	    return this.getToken(InceptorOracleParser.KW_ARRAY, 0);
	};

	KW_NOT() {
	    return this.getToken(InceptorOracleParser.KW_NOT, 0);
	};

	KW_NULL() {
	    return this.getToken(InceptorOracleParser.KW_NULL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterVarrayTypeDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitVarrayTypeDef(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitVarrayTypeDef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ElementTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_elementType;
    }

	datatype() {
	    return this.getTypedRuleContext(DatatypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterElementType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitElementType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitElementType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RefCursorTypeDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = InceptorOracleParser.RULE_refCursorTypeDef;
    }

	KW_REF() {
	    return this.getToken(InceptorOracleParser.KW_REF, 0);
	};

	KW_CURSOR() {
	    return this.getToken(InceptorOracleParser.KW_CURSOR, 0);
	};

	KW_RETURN() {
	    return this.getToken(InceptorOracleParser.KW_RETURN, 0);
	};

	otherType() {
	    return this.getTypedRuleContext(OtherTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.enterRefCursorTypeDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof InceptorOracleListener ) {
	        listener.exitRefCursorTypeDef(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof InceptorOracleVisitor ) {
	        return visitor.visitRefCursorTypeDef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}




InceptorOracleParser.AliasNonReservedContext = AliasNonReservedContext; 
InceptorOracleParser.AliasContext = AliasContext; 
InceptorOracleParser.IdentifierContext = IdentifierContext; 
InceptorOracleParser.ColumnAliasContext = ColumnAliasContext; 
InceptorOracleParser.CommonNonReservedContext = CommonNonReservedContext; 
InceptorOracleParser.KeyValuePropertyContext = KeyValuePropertyContext; 
InceptorOracleParser.KeyPropertyContext = KeyPropertyContext; 
InceptorOracleParser.TableNameContext = TableNameContext; 
InceptorOracleParser.ValuesNameContext = ValuesNameContext; 
InceptorOracleParser.ViewNameContext = ViewNameContext; 
InceptorOracleParser.TableAliasContext = TableAliasContext; 
InceptorOracleParser.SequenceNameContext = SequenceNameContext; 
InceptorOracleParser.PartitionSpecContext = PartitionSpecContext; 
InceptorOracleParser.PartitionValContext = PartitionValContext; 
InceptorOracleParser.StoredAsDirsContext = StoredAsDirsContext; 
InceptorOracleParser.OrReplaceContext = OrReplaceContext; 
InceptorOracleParser.ColumnListContext = ColumnListContext; 
InceptorOracleParser.ColumnNameTypeListContext = ColumnNameTypeListContext; 
InceptorOracleParser.ColumnNameColonTypeListContext = ColumnNameColonTypeListContext; 
InceptorOracleParser.ColumnNameOrderListContext = ColumnNameOrderListContext; 
InceptorOracleParser.ColumnNameOrderContext = ColumnNameOrderContext; 
InceptorOracleParser.ColumnNameCommentListContext = ColumnNameCommentListContext; 
InceptorOracleParser.ColumnNameCommentContext = ColumnNameCommentContext; 
InceptorOracleParser.NullsOrderContext = NullsOrderContext; 
InceptorOracleParser.ColumnRefOrderContext = ColumnRefOrderContext; 
InceptorOracleParser.ColumnNameTypeContext = ColumnNameTypeContext; 
InceptorOracleParser.ColumnAnalyzerContext = ColumnAnalyzerContext; 
InceptorOracleParser.DefaultValueNodeContext = DefaultValueNodeContext; 
InceptorOracleParser.ConstantOrNullContext = ConstantOrNullContext; 
InceptorOracleParser.ColumnCommentContext = ColumnCommentContext; 
InceptorOracleParser.ColumnNameListContext = ColumnNameListContext; 
InceptorOracleParser.ColumnNameContext = ColumnNameContext; 
InceptorOracleParser.ColumnOrtableDotColumnNameListContext = ColumnOrtableDotColumnNameListContext; 
InceptorOracleParser.ColumnOrtableDotColumnNameContext = ColumnOrtableDotColumnNameContext; 
InceptorOracleParser.ColumnOrtableDotColumnWithDBNameListContext = ColumnOrtableDotColumnWithDBNameListContext; 
InceptorOracleParser.ColumnOrtableDotColumnWithDBNameContext = ColumnOrtableDotColumnWithDBNameContext; 
InceptorOracleParser.TableOrPartitionContext = TableOrPartitionContext; 
InceptorOracleParser.TableOrColumnAliasOfValuesContext = TableOrColumnAliasOfValuesContext; 
InceptorOracleParser.PartitionTableFunctionSourceContext = PartitionTableFunctionSourceContext; 
InceptorOracleParser.PartitionedTableFunctionContext = PartitionedTableFunctionContext; 
InceptorOracleParser.TableAllColumnsContext = TableAllColumnsContext; 
InceptorOracleParser.TableOrColumnContext = TableOrColumnContext; 
InceptorOracleParser.AliasListContext = AliasListContext; 
InceptorOracleParser.CapIdentifierListContext = CapIdentifierListContext; 
InceptorOracleParser.IdentifierListContext = IdentifierListContext; 
InceptorOracleParser.AlterStatementContext = AlterStatementContext; 
InceptorOracleParser.AlterSequenceStatementSuffixContext = AlterSequenceStatementSuffixContext; 
InceptorOracleParser.AlterTableStatementSuffixContext = AlterTableStatementSuffixContext; 
InceptorOracleParser.AlterStatementPartitionKeyTypeContext = AlterStatementPartitionKeyTypeContext; 
InceptorOracleParser.AlterViewStatementSuffixContext = AlterViewStatementSuffixContext; 
InceptorOracleParser.AlterIndexStatementSuffixContext = AlterIndexStatementSuffixContext; 
InceptorOracleParser.AlterApplicationStatementSuffixContext = AlterApplicationStatementSuffixContext; 
InceptorOracleParser.AlterJobStatementSuffixContext = AlterJobStatementSuffixContext; 
InceptorOracleParser.AlterJobSuffixPropertiesContext = AlterJobSuffixPropertiesContext; 
InceptorOracleParser.AlterApplicationSuffixPropertiesContext = AlterApplicationSuffixPropertiesContext; 
InceptorOracleParser.AlterApplicationSuffixSetOwnerContext = AlterApplicationSuffixSetOwnerContext; 
InceptorOracleParser.AlterPolicyStatementSuffixContext = AlterPolicyStatementSuffixContext; 
InceptorOracleParser.AlterPolicySuffixPropertiesContext = AlterPolicySuffixPropertiesContext; 
InceptorOracleParser.AlterPolicySuffixRootGroupTypeContext = AlterPolicySuffixRootGroupTypeContext; 
InceptorOracleParser.AlterPolicyRuleGroupSuffixContext = AlterPolicyRuleGroupSuffixContext; 
InceptorOracleParser.AlterRuleStatementSuffixContext = AlterRuleStatementSuffixContext; 
InceptorOracleParser.AlterRuleSuffixPropertiesContext = AlterRuleSuffixPropertiesContext; 
InceptorOracleParser.AlterRuleFunctionStatementSuffixContext = AlterRuleFunctionStatementSuffixContext; 
InceptorOracleParser.AlterRuleFunctionSuffixPropertiesContext = AlterRuleFunctionSuffixPropertiesContext; 
InceptorOracleParser.AlterDatabaseStatementSuffixContext = AlterDatabaseStatementSuffixContext; 
InceptorOracleParser.AlterDatabaseSuffixPropertiesContext = AlterDatabaseSuffixPropertiesContext; 
InceptorOracleParser.AlterDatabaseSuffixSetOwnerContext = AlterDatabaseSuffixSetOwnerContext; 
InceptorOracleParser.AlterStatementSuffixRenameContext = AlterStatementSuffixRenameContext; 
InceptorOracleParser.AlterStatementErrorLogSettingContext = AlterStatementErrorLogSettingContext; 
InceptorOracleParser.OnOffOptContext = OnOffOptContext; 
InceptorOracleParser.ErrorIntoTableOptContext = ErrorIntoTableOptContext; 
InceptorOracleParser.ErrorOverwriteOptContext = ErrorOverwriteOptContext; 
InceptorOracleParser.ErrorRejectOptContext = ErrorRejectOptContext; 
InceptorOracleParser.ErrorLimitOptContext = ErrorLimitOptContext; 
InceptorOracleParser.AlterStatementSuffixAddColContext = AlterStatementSuffixAddColContext; 
InceptorOracleParser.AlterStatementSuffixRenameColContext = AlterStatementSuffixRenameColContext; 
InceptorOracleParser.BlockingContext = BlockingContext; 
InceptorOracleParser.AlterStatementSuffixCompactContext = AlterStatementSuffixCompactContext; 
InceptorOracleParser.AlterStatementSuffixUpdateStatsColContext = AlterStatementSuffixUpdateStatsColContext; 
InceptorOracleParser.AlterStatementChangeColPositionContext = AlterStatementChangeColPositionContext; 
InceptorOracleParser.AlterStatementSuffixAddPartitionsContext = AlterStatementSuffixAddPartitionsContext; 
InceptorOracleParser.AlterStatementSuffixAddPartitionsElementContext = AlterStatementSuffixAddPartitionsElementContext; 
InceptorOracleParser.AlterStatementSuffixAddRangePartitionsElementContext = AlterStatementSuffixAddRangePartitionsElementContext; 
InceptorOracleParser.AlterStatementSuffixTouchContext = AlterStatementSuffixTouchContext; 
InceptorOracleParser.AlterStatementSuffixArchiveContext = AlterStatementSuffixArchiveContext; 
InceptorOracleParser.AlterStatementSuffixUnArchiveContext = AlterStatementSuffixUnArchiveContext; 
InceptorOracleParser.PartitionLocationContext = PartitionLocationContext; 
InceptorOracleParser.AlterStatementSuffixDropPartitionsContext = AlterStatementSuffixDropPartitionsContext; 
InceptorOracleParser.AlterStatementSuffixPropertiesContext = AlterStatementSuffixPropertiesContext; 
InceptorOracleParser.AlterViewSuffixPropertiesContext = AlterViewSuffixPropertiesContext; 
InceptorOracleParser.AlterStatementSuffixSerdePropertiesContext = AlterStatementSuffixSerdePropertiesContext; 
InceptorOracleParser.AlterTblPartitionStatementContext = AlterTblPartitionStatementContext; 
InceptorOracleParser.AlterTblPartitionStatementSuffixContext = AlterTblPartitionStatementSuffixContext; 
InceptorOracleParser.AlterStatementSuffixFileFormatContext = AlterStatementSuffixFileFormatContext; 
InceptorOracleParser.AlterStatementSuffixClusterbySortbyContext = AlterStatementSuffixClusterbySortbyContext; 
InceptorOracleParser.AlterTblPartitionStatementSuffixSkewedLocationContext = AlterTblPartitionStatementSuffixSkewedLocationContext; 
InceptorOracleParser.SkewedLocationsContext = SkewedLocationsContext; 
InceptorOracleParser.SkewedLocationsListContext = SkewedLocationsListContext; 
InceptorOracleParser.SkewedLocationMapContext = SkewedLocationMapContext; 
InceptorOracleParser.AlterStatementSuffixLocationContext = AlterStatementSuffixLocationContext; 
InceptorOracleParser.AlterStatementSuffixSkewedbyContext = AlterStatementSuffixSkewedbyContext; 
InceptorOracleParser.AlterStatementSuffixExchangePartitionContext = AlterStatementSuffixExchangePartitionContext; 
InceptorOracleParser.AlterStatementSuffixProtectModeContext = AlterStatementSuffixProtectModeContext; 
InceptorOracleParser.AlterStatementSuffixRenamePartContext = AlterStatementSuffixRenamePartContext; 
InceptorOracleParser.AlterStatementSuffixMergeFilesContext = AlterStatementSuffixMergeFilesContext; 
InceptorOracleParser.AlterProtectModeContext = AlterProtectModeContext; 
InceptorOracleParser.AlterProtectModeModeContext = AlterProtectModeModeContext; 
InceptorOracleParser.AlterStatementSuffixBucketNumContext = AlterStatementSuffixBucketNumContext; 
InceptorOracleParser.FileFormatContext = FileFormatContext; 
InceptorOracleParser.IgnoreProtectionContext = IgnoreProtectionContext; 
InceptorOracleParser.DropPartitionSpecContext = DropPartitionSpecContext; 
InceptorOracleParser.DropPartitionValContext = DropPartitionValContext; 
InceptorOracleParser.DropPartitionOperatorContext = DropPartitionOperatorContext; 
InceptorOracleParser.AlterBlacklistStatementSuffixContext = AlterBlacklistStatementSuffixContext; 
InceptorOracleParser.AlterStatementSuffixDropConstraintContext = AlterStatementSuffixDropConstraintContext; 
InceptorOracleParser.AlterStatementSuffixAddConstraintContext = AlterStatementSuffixAddConstraintContext; 
InceptorOracleParser.AlterConstraintWithNameContext = AlterConstraintWithNameContext; 
InceptorOracleParser.AlterForeignKeyWithNameContext = AlterForeignKeyWithNameContext; 
InceptorOracleParser.AlterStatementIntervalValueContext = AlterStatementIntervalValueContext; 
InceptorOracleParser.AtomExpressionContext = AtomExpressionContext; 
InceptorOracleParser.SqlCallStatementContext = SqlCallStatementContext; 
InceptorOracleParser.ConstantContext = ConstantContext; 
InceptorOracleParser.DefaultConstantValueContext = DefaultConstantValueContext; 
InceptorOracleParser.NonNegativeDigitValueContext = NonNegativeDigitValueContext; 
InceptorOracleParser.StringLiteralSequenceContext = StringLiteralSequenceContext; 
InceptorOracleParser.CharSetStringLiteralContext = CharSetStringLiteralContext; 
InceptorOracleParser.BooleanValueContext = BooleanValueContext; 
InceptorOracleParser.ColumnNameTypeOrConstraintListContext = ColumnNameTypeOrConstraintListContext; 
InceptorOracleParser.ColumnNameTypeOrConstraintContext = ColumnNameTypeOrConstraintContext; 
InceptorOracleParser.TableConstraintContext = TableConstraintContext; 
InceptorOracleParser.CreateForeignKeyContext = CreateForeignKeyContext; 
InceptorOracleParser.CreateConstraintContext = CreateConstraintContext; 
InceptorOracleParser.TableConstraintTypeContext = TableConstraintTypeContext; 
InceptorOracleParser.ConstraintOptsContext = ConstraintOptsContext; 
InceptorOracleParser.EnableSpecificationContext = EnableSpecificationContext; 
InceptorOracleParser.ValidateSpecificationContext = ValidateSpecificationContext; 
InceptorOracleParser.RelySpecificationContext = RelySpecificationContext; 
InceptorOracleParser.ColumnConstraintContext = ColumnConstraintContext; 
InceptorOracleParser.ColPKConstraintContext = ColPKConstraintContext; 
InceptorOracleParser.ColFKConstraintContext = ColFKConstraintContext; 
InceptorOracleParser.ParenColumnNameListContext = ParenColumnNameListContext; 
InceptorOracleParser.DefaultVauleOrColumnConstraintContext = DefaultVauleOrColumnConstraintContext; 
InceptorOracleParser.ColumnAttributeContext = ColumnAttributeContext; 
InceptorOracleParser.CrudStatementContext = CrudStatementContext; 
InceptorOracleParser.MergeStatementContext = MergeStatementContext; 
InceptorOracleParser.MergeUpdateClauseContext = MergeUpdateClauseContext; 
InceptorOracleParser.MergeDeleteClauseContext = MergeDeleteClauseContext; 
InceptorOracleParser.MergeInsertClauseContext = MergeInsertClauseContext; 
InceptorOracleParser.ImplicitInsertStatementContext = ImplicitInsertStatementContext; 
InceptorOracleParser.UpdateStatementContext = UpdateStatementContext; 
InceptorOracleParser.BatchUpdateStatementContext = BatchUpdateStatementContext; 
InceptorOracleParser.BatchUpdate_set_clauseContext = BatchUpdate_set_clauseContext; 
InceptorOracleParser.Update_set_clause_suffixContext = Update_set_clause_suffixContext; 
InceptorOracleParser.Update_set_clause_elementsContext = Update_set_clause_elementsContext; 
InceptorOracleParser.Update_set_clause_elementContext = Update_set_clause_elementContext; 
InceptorOracleParser.Update_set_clause_element_partContext = Update_set_clause_element_partContext; 
InceptorOracleParser.Update_set_elementsContext = Update_set_elementsContext; 
InceptorOracleParser.Update_set_elementContext = Update_set_elementContext; 
InceptorOracleParser.DeleteStatementContext = DeleteStatementContext; 
InceptorOracleParser.CrudTargetStatementContext = CrudTargetStatementContext; 
InceptorOracleParser.DclStatementContext = DclStatementContext; 
InceptorOracleParser.BeginTransactionStatementContext = BeginTransactionStatementContext; 
InceptorOracleParser.CommitTransactionStatementContext = CommitTransactionStatementContext; 
InceptorOracleParser.RollbackTransactionStatementContext = RollbackTransactionStatementContext; 
InceptorOracleParser.TransactionSettingStatementContext = TransactionSettingStatementContext; 
InceptorOracleParser.DdlAStatementContext = DdlAStatementContext; 
InceptorOracleParser.CreateDatabaseStatementContext = CreateDatabaseStatementContext; 
InceptorOracleParser.SwitchDatabaseStatementContext = SwitchDatabaseStatementContext; 
InceptorOracleParser.SwitchApplicationStatementContext = SwitchApplicationStatementContext; 
InceptorOracleParser.DropDatabaseStatementContext = DropDatabaseStatementContext; 
InceptorOracleParser.CreateDbLinkStatementContext = CreateDbLinkStatementContext; 
InceptorOracleParser.DropDbLinkStatementContext = DropDbLinkStatementContext; 
InceptorOracleParser.DblinkContext = DblinkContext; 
InceptorOracleParser.DblinkUserContext = DblinkUserContext; 
InceptorOracleParser.DblinkPwdContext = DblinkPwdContext; 
InceptorOracleParser.DblinkServiceContext = DblinkServiceContext; 
InceptorOracleParser.CreateTableStatementContext = CreateTableStatementContext; 
InceptorOracleParser.CreateTemporaryTableStatementContext = CreateTemporaryTableStatementContext; 
InceptorOracleParser.TableDefinitionClauseContext = TableDefinitionClauseContext; 
InceptorOracleParser.NoDataCopyQueryContext = NoDataCopyQueryContext; 
InceptorOracleParser.CreateStreamStatementContext = CreateStreamStatementContext; 
InceptorOracleParser.CreateMetricStatementContext = CreateMetricStatementContext; 
InceptorOracleParser.StreamJobContext = StreamJobContext; 
InceptorOracleParser.CreateJobStatementContext = CreateJobStatementContext; 
InceptorOracleParser.StreamRuleContext = StreamRuleContext; 
InceptorOracleParser.CreateRuleStatementContext = CreateRuleStatementContext; 
InceptorOracleParser.DropRuleStatementContext = DropRuleStatementContext; 
InceptorOracleParser.CreateRuleBaseStatementContext = CreateRuleBaseStatementContext; 
InceptorOracleParser.SwitchRuleBaseStatementContext = SwitchRuleBaseStatementContext; 
InceptorOracleParser.DropRuleBaseStatementContext = DropRuleBaseStatementContext; 
InceptorOracleParser.RuleGroupTypeContext = RuleGroupTypeContext; 
InceptorOracleParser.CreatePolicyStatementContext = CreatePolicyStatementContext; 
InceptorOracleParser.CreateRuleGroupStatementContext = CreateRuleGroupStatementContext; 
InceptorOracleParser.IntoRuleGroupStatementContext = IntoRuleGroupStatementContext; 
InceptorOracleParser.RuleConstraintTypeContext = RuleConstraintTypeContext; 
InceptorOracleParser.PolicyKeyContext = PolicyKeyContext; 
InceptorOracleParser.CreatePolicyRuleStatementContext = CreatePolicyRuleStatementContext; 
InceptorOracleParser.DropPolicyStatementContext = DropPolicyStatementContext; 
InceptorOracleParser.SwitchPolicyStatementContext = SwitchPolicyStatementContext; 
InceptorOracleParser.DropPolicyRuleStatementContext = DropPolicyRuleStatementContext; 
InceptorOracleParser.CreateApplicationStatementContext = CreateApplicationStatementContext; 
InceptorOracleParser.DropApplicationStatementContext = DropApplicationStatementContext; 
InceptorOracleParser.DropTableStatementContext = DropTableStatementContext; 
InceptorOracleParser.DropStreamStatementContext = DropStreamStatementContext; 
InceptorOracleParser.DropMetricStatementContext = DropMetricStatementContext; 
InceptorOracleParser.DropJobStatementContext = DropJobStatementContext; 
InceptorOracleParser.CreateRuleFunctionStatementContext = CreateRuleFunctionStatementContext; 
InceptorOracleParser.DropRuleFunctionStatementContext = DropRuleFunctionStatementContext; 
InceptorOracleParser.DropCachedMetricStatementContext = DropCachedMetricStatementContext; 
InceptorOracleParser.TruncateCachedMetricStatementContext = TruncateCachedMetricStatementContext; 
InceptorOracleParser.TruncateTableStatementContext = TruncateTableStatementContext; 
InceptorOracleParser.TablePartitionPrefixContext = TablePartitionPrefixContext; 
InceptorOracleParser.CtasTargetStatementContext = CtasTargetStatementContext; 
InceptorOracleParser.TableRowNullFormatContext = TableRowNullFormatContext; 
InceptorOracleParser.RowFormatSerdeContext = RowFormatSerdeContext; 
InceptorOracleParser.RowFormatDelimitedContext = RowFormatDelimitedContext; 
InceptorOracleParser.TableRowFormatContext = TableRowFormatContext; 
InceptorOracleParser.TableCommentContext = TableCommentContext; 
InceptorOracleParser.TablePartitionContext = TablePartitionContext; 
InceptorOracleParser.TableRouteContext = TableRouteContext; 
InceptorOracleParser.TableRouteSpecContext = TableRouteSpecContext; 
InceptorOracleParser.TableRangeRouteContext = TableRangeRouteContext; 
InceptorOracleParser.RangeRouteValuesContext = RangeRouteValuesContext; 
InceptorOracleParser.TableHashRouteContext = TableHashRouteContext; 
InceptorOracleParser.TableBucketsContext = TableBucketsContext; 
InceptorOracleParser.TableSkewedContext = TableSkewedContext; 
InceptorOracleParser.SkewedValueElementContext = SkewedValueElementContext; 
InceptorOracleParser.SkewedColumnValuePairListContext = SkewedColumnValuePairListContext; 
InceptorOracleParser.SkewedColumnValuePairContext = SkewedColumnValuePairContext; 
InceptorOracleParser.SkewedColumnValuesContext = SkewedColumnValuesContext; 
InceptorOracleParser.SkewedColumnValueContext = SkewedColumnValueContext; 
InceptorOracleParser.SkewedValueLocationElementContext = SkewedValueLocationElementContext; 
InceptorOracleParser.TablePropertiesPrefixedContext = TablePropertiesPrefixedContext; 
InceptorOracleParser.ErroLogTableSpecContext = ErroLogTableSpecContext; 
InceptorOracleParser.ErrorRejectSpecContext = ErrorRejectSpecContext; 
InceptorOracleParser.TablePropertiesContext = TablePropertiesContext; 
InceptorOracleParser.TablePropertiesListContext = TablePropertiesListContext; 
InceptorOracleParser.TableRowFormatFieldIdentifierContext = TableRowFormatFieldIdentifierContext; 
InceptorOracleParser.TableRowFormatCollItemsIdentifierContext = TableRowFormatCollItemsIdentifierContext; 
InceptorOracleParser.TableRowFormatMapKeysIdentifierContext = TableRowFormatMapKeysIdentifierContext; 
InceptorOracleParser.TableRowFormatLinesIdentifierContext = TableRowFormatLinesIdentifierContext; 
InceptorOracleParser.EsPropsContext = EsPropsContext; 
InceptorOracleParser.HoloPropsContext = HoloPropsContext; 
InceptorOracleParser.HoloTableSizeContext = HoloTableSizeContext; 
InceptorOracleParser.TableFileFormatContext = TableFileFormatContext; 
InceptorOracleParser.StargateIdentifierContext = StargateIdentifierContext; 
InceptorOracleParser.StoreArgsContext = StoreArgsContext; 
InceptorOracleParser.StoreArgNameContext = StoreArgNameContext; 
InceptorOracleParser.TableLocationContext = TableLocationContext; 
InceptorOracleParser.RestrictOrCascadeContext = RestrictOrCascadeContext; 
InceptorOracleParser.DatabaseCommentContext = DatabaseCommentContext; 
InceptorOracleParser.DbLocationContext = DbLocationContext; 
InceptorOracleParser.DbPropertiesContext = DbPropertiesContext; 
InceptorOracleParser.DbPropertiesListContext = DbPropertiesListContext; 
InceptorOracleParser.IfExistsContext = IfExistsContext; 
InceptorOracleParser.IfNotExistsContext = IfNotExistsContext; 
InceptorOracleParser.CreateSequenceStatementContext = CreateSequenceStatementContext; 
InceptorOracleParser.DropSequenceStatementContext = DropSequenceStatementContext; 
InceptorOracleParser.DdlBStatementContext = DdlBStatementContext; 
InceptorOracleParser.DescStatementContext = DescStatementContext; 
InceptorOracleParser.ShowStatementContext = ShowStatementContext; 
InceptorOracleParser.ShowStatementPartAContext = ShowStatementPartAContext; 
InceptorOracleParser.ShowStatementPartBContext = ShowStatementPartBContext; 
InceptorOracleParser.ShowStatementPartCContext = ShowStatementPartCContext; 
InceptorOracleParser.MetastoreCheckContext = MetastoreCheckContext; 
InceptorOracleParser.DropViewStatementContext = DropViewStatementContext; 
InceptorOracleParser.DropMaterializedViewStatementContext = DropMaterializedViewStatementContext; 
InceptorOracleParser.CreateFunctionStatementContext = CreateFunctionStatementContext; 
InceptorOracleParser.CreateMacroStatementContext = CreateMacroStatementContext; 
InceptorOracleParser.CreateIndexStatementContext = CreateIndexStatementContext; 
InceptorOracleParser.DropIndexStatementContext = DropIndexStatementContext; 
InceptorOracleParser.DropFunctionStatementContext = DropFunctionStatementContext; 
InceptorOracleParser.ReloadFunctionStatementContext = ReloadFunctionStatementContext; 
InceptorOracleParser.DropMacroStatementContext = DropMacroStatementContext; 
InceptorOracleParser.FunctionTypeContext = FunctionTypeContext; 
InceptorOracleParser.CleanClassLoaderContext = CleanClassLoaderContext; 
InceptorOracleParser.AnalyzeStatementContext = AnalyzeStatementContext; 
InceptorOracleParser.LockStatementContext = LockStatementContext; 
InceptorOracleParser.LockDatabaseContext = LockDatabaseContext; 
InceptorOracleParser.UnlockStatementContext = UnlockStatementContext; 
InceptorOracleParser.UnlockDatabaseContext = UnlockDatabaseContext; 
InceptorOracleParser.CreateRoleStatementContext = CreateRoleStatementContext; 
InceptorOracleParser.DropRoleStatementContext = DropRoleStatementContext; 
InceptorOracleParser.GrantPrivilegesContext = GrantPrivilegesContext; 
InceptorOracleParser.RevokePrivilegesContext = RevokePrivilegesContext; 
InceptorOracleParser.ShowQuotaContext = ShowQuotaContext; 
InceptorOracleParser.ShowFaclContext = ShowFaclContext; 
InceptorOracleParser.ShowGrantsContext = ShowGrantsContext; 
InceptorOracleParser.ShowRoleGrantsContext = ShowRoleGrantsContext; 
InceptorOracleParser.ShowRolePrincipalsContext = ShowRolePrincipalsContext; 
InceptorOracleParser.ShowRolesContext = ShowRolesContext; 
InceptorOracleParser.ShowBlacklistContext = ShowBlacklistContext; 
InceptorOracleParser.ShowSchedulerModeContext = ShowSchedulerModeContext; 
InceptorOracleParser.GrantQuotaContext = GrantQuotaContext; 
InceptorOracleParser.RevokeQuotaContext = RevokeQuotaContext; 
InceptorOracleParser.FaclSpecContext = FaclSpecContext; 
InceptorOracleParser.GrantFaclContext = GrantFaclContext; 
InceptorOracleParser.RevokeFaclContext = RevokeFaclContext; 
InceptorOracleParser.GrantRoleContext = GrantRoleContext; 
InceptorOracleParser.RevokeRoleContext = RevokeRoleContext; 
InceptorOracleParser.ShowCurrentRoleContext = ShowCurrentRoleContext; 
InceptorOracleParser.SyncIndexContext = SyncIndexContext; 
InceptorOracleParser.SyncRuleContext = SyncRuleContext; 
InceptorOracleParser.SyncPolicyContext = SyncPolicyContext; 
InceptorOracleParser.SetRoleContext = SetRoleContext; 
InceptorOracleParser.QuotaDbContext = QuotaDbContext; 
InceptorOracleParser.QuotaUserContext = QuotaUserContext; 
InceptorOracleParser.UserOrGroupContext = UserOrGroupContext; 
InceptorOracleParser.WithGrantOptionContext = WithGrantOptionContext; 
InceptorOracleParser.WithAdminOptionContext = WithAdminOptionContext; 
InceptorOracleParser.AdminOptionForContext = AdminOptionForContext; 
InceptorOracleParser.QuotaSpecContext = QuotaSpecContext; 
InceptorOracleParser.PrivilegeIncludeColObjectContext = PrivilegeIncludeColObjectContext; 
InceptorOracleParser.AllTablesInDBContext = AllTablesInDBContext; 
InceptorOracleParser.PrivObjectColsContext = PrivObjectColsContext; 
InceptorOracleParser.GrantOptionForContext = GrantOptionForContext; 
InceptorOracleParser.PrivilegeListContext = PrivilegeListContext; 
InceptorOracleParser.PrivlegeDefContext = PrivlegeDefContext; 
InceptorOracleParser.PrivilegeTypeContext = PrivilegeTypeContext; 
InceptorOracleParser.PrivilegeObjectContext = PrivilegeObjectContext; 
InceptorOracleParser.PrivObjectTypeContext = PrivObjectTypeContext; 
InceptorOracleParser.PrivObjectContext = PrivObjectContext; 
InceptorOracleParser.PrincipalSpecificationContext = PrincipalSpecificationContext; 
InceptorOracleParser.PrincipalNameContext = PrincipalNameContext; 
InceptorOracleParser.LockModeContext = LockModeContext; 
InceptorOracleParser.IndexCommentContext = IndexCommentContext; 
InceptorOracleParser.AutoRebuildContext = AutoRebuildContext; 
InceptorOracleParser.IndexTblNameContext = IndexTblNameContext; 
InceptorOracleParser.IndexPropertiesPrefixedContext = IndexPropertiesPrefixedContext; 
InceptorOracleParser.IndexPropertiesContext = IndexPropertiesContext; 
InceptorOracleParser.IndexPropertiesListContext = IndexPropertiesListContext; 
InceptorOracleParser.TabTypeExprContext = TabTypeExprContext; 
InceptorOracleParser.DescTabTypeExprContext = DescTabTypeExprContext; 
InceptorOracleParser.PartTypeExprContext = PartTypeExprContext; 
InceptorOracleParser.DescPartTypeExprContext = DescPartTypeExprContext; 
InceptorOracleParser.ShowStmtIdentifierContext = ShowStmtIdentifierContext; 
InceptorOracleParser.SysFuncNamesContext = SysFuncNamesContext; 
InceptorOracleParser.DescFuncNamesContext = DescFuncNamesContext; 
InceptorOracleParser.DdlCStatementContext = DdlCStatementContext; 
InceptorOracleParser.CreateOrReplaceStatementContext = CreateOrReplaceStatementContext; 
InceptorOracleParser.CreateViewStatementContext = CreateViewStatementContext; 
InceptorOracleParser.RewriteEnabledContext = RewriteEnabledContext; 
InceptorOracleParser.RewriteDisabledContext = RewriteDisabledContext; 
InceptorOracleParser.CreateMaterializedViewStatementContext = CreateMaterializedViewStatementContext; 
InceptorOracleParser.ViewPartitionContext = ViewPartitionContext; 
InceptorOracleParser.ShowPermissionContext = ShowPermissionContext; 
InceptorOracleParser.GrantPermissionContext = GrantPermissionContext; 
InceptorOracleParser.RevokePermissionContext = RevokePermissionContext; 
InceptorOracleParser.GrantDefinitionContext = GrantDefinitionContext; 
InceptorOracleParser.RevokeDefinitionContext = RevokeDefinitionContext; 
InceptorOracleParser.RclsObjectContext = RclsObjectContext; 
InceptorOracleParser.DdlStatementContext = DdlStatementContext; 
InceptorOracleParser.CompactStatementContext = CompactStatementContext; 
InceptorOracleParser.PrecedenceUnaryOperatorContext = PrecedenceUnaryOperatorContext; 
InceptorOracleParser.PrecedenceUnaryPrefixExpressionContext = PrecedenceUnaryPrefixExpressionContext; 
InceptorOracleParser.PrecedenceUnarySuffixExpressionContext = PrecedenceUnarySuffixExpressionContext; 
InceptorOracleParser.PrecedenceBitwiseXorOperatorContext = PrecedenceBitwiseXorOperatorContext; 
InceptorOracleParser.PrecedenceBitwiseXorExpressionContext = PrecedenceBitwiseXorExpressionContext; 
InceptorOracleParser.PrecedenceStarOperatorContext = PrecedenceStarOperatorContext; 
InceptorOracleParser.PrecedenceStarExpressionContext = PrecedenceStarExpressionContext; 
InceptorOracleParser.PrecedencePlusOperatorContext = PrecedencePlusOperatorContext; 
InceptorOracleParser.PrecedencePlusExpressionContext = PrecedencePlusExpressionContext; 
InceptorOracleParser.PrecedenceOPConcatOperatorContext = PrecedenceOPConcatOperatorContext; 
InceptorOracleParser.PrecedenceOPConcatExpressionContext = PrecedenceOPConcatExpressionContext; 
InceptorOracleParser.PrecedenceAmpersandOperatorContext = PrecedenceAmpersandOperatorContext; 
InceptorOracleParser.PrecedenceAmpersandExpressionContext = PrecedenceAmpersandExpressionContext; 
InceptorOracleParser.PrecedenceBitwiseOrOperatorContext = PrecedenceBitwiseOrOperatorContext; 
InceptorOracleParser.PrecedenceBitwiseOrExpressionContext = PrecedenceBitwiseOrExpressionContext; 
InceptorOracleParser.PrecedenceRegexpOperatorContext = PrecedenceRegexpOperatorContext; 
InceptorOracleParser.PrecedenceEqualOperatorContext = PrecedenceEqualOperatorContext; 
InceptorOracleParser.ExpressionContext = ExpressionContext; 
InceptorOracleParser.ExpressionsContext = ExpressionsContext; 
InceptorOracleParser.ExpressionsInParenthesisContext = ExpressionsInParenthesisContext; 
InceptorOracleParser.ExpressionsNotInParenthesisContext = ExpressionsNotInParenthesisContext; 
InceptorOracleParser.ExpressionPartContext = ExpressionPartContext; 
InceptorOracleParser.ExpressionListContext = ExpressionListContext; 
InceptorOracleParser.Outer_join_signContext = Outer_join_signContext; 
InceptorOracleParser.NullConditionContext = NullConditionContext; 
InceptorOracleParser.PrecedenceSimilarExpressionContext = PrecedenceSimilarExpressionContext; 
InceptorOracleParser.PrecedenceSimilarExpressionPartContext = PrecedenceSimilarExpressionPartContext; 
InceptorOracleParser.PrecedenceSimilarExpressionAtomContext = PrecedenceSimilarExpressionAtomContext; 
InceptorOracleParser.PrecedenceSimilarExpressionPartNotContext = PrecedenceSimilarExpressionPartNotContext; 
InceptorOracleParser.PrecedenceNotOperatorContext = PrecedenceNotOperatorContext; 
InceptorOracleParser.PrecedenceNotExpressionContext = PrecedenceNotExpressionContext; 
InceptorOracleParser.PrecedenceAndOperatorContext = PrecedenceAndOperatorContext; 
InceptorOracleParser.PrecedenceAndExpressionContext = PrecedenceAndExpressionContext; 
InceptorOracleParser.PrecedenceOrOperatorContext = PrecedenceOrOperatorContext; 
InceptorOracleParser.PrecedenceOrExpressionContext = PrecedenceOrExpressionContext; 
InceptorOracleParser.PrecedenceEqualExpressionContext = PrecedenceEqualExpressionContext; 
InceptorOracleParser.FromClauseContext = FromClauseContext; 
InceptorOracleParser.JoinSourceContext = JoinSourceContext; 
InceptorOracleParser.UniqueJoinSourceContext = UniqueJoinSourceContext; 
InceptorOracleParser.UniqueJoinExprContext = UniqueJoinExprContext; 
InceptorOracleParser.UniqueJoinTokenContext = UniqueJoinTokenContext; 
InceptorOracleParser.JoinTokenContext = JoinTokenContext; 
InceptorOracleParser.JoinTokenRequireOnContext = JoinTokenRequireOnContext; 
InceptorOracleParser.LateralViewContext = LateralViewContext; 
InceptorOracleParser.FromSourceContext = FromSourceContext; 
InceptorOracleParser.TableSourceContext = TableSourceContext; 
InceptorOracleParser.SubQuerySourceContext = SubQuerySourceContext; 
InceptorOracleParser.ValuesSourceContext = ValuesSourceContext; 
InceptorOracleParser.PatternSourceContext = PatternSourceContext; 
InceptorOracleParser.PatternEventContext = PatternEventContext; 
InceptorOracleParser.TimesExprContext = TimesExprContext; 
InceptorOracleParser.OneOrMoreExprContext = OneOrMoreExprContext; 
InceptorOracleParser.PatternExpressionContext = PatternExpressionContext; 
InceptorOracleParser.EventOpContext = EventOpContext; 
InceptorOracleParser.PatternTimewindowContext = PatternTimewindowContext; 
InceptorOracleParser.CepIntervalLiteralContext = CepIntervalLiteralContext; 
InceptorOracleParser.CepIntervalQualifiersContext = CepIntervalQualifiersContext; 
InceptorOracleParser.TableBucketSampleContext = TableBucketSampleContext; 
InceptorOracleParser.SplitSampleContext = SplitSampleContext; 
InceptorOracleParser.TableSampleContext = TableSampleContext; 
InceptorOracleParser.NormfunctionContext = NormfunctionContext; 
InceptorOracleParser.FuncOpContext = FuncOpContext; 
InceptorOracleParser.FunctionNameContext = FunctionNameContext; 
InceptorOracleParser.WindowFuncIgnoreNullsContext = WindowFuncIgnoreNullsContext; 
InceptorOracleParser.ParamExpressionContext = ParamExpressionContext; 
InceptorOracleParser.CastExpressionContext = CastExpressionContext; 
InceptorOracleParser.ExistExpressionContext = ExistExpressionContext; 
InceptorOracleParser.WidcardExpressionContext = WidcardExpressionContext; 
InceptorOracleParser.InRightOpContext = InRightOpContext; 
InceptorOracleParser.BetweenRightOpContext = BetweenRightOpContext; 
InceptorOracleParser.LikeanyRightOpContext = LikeanyRightOpContext; 
InceptorOracleParser.LikeallRightOpContext = LikeallRightOpContext; 
InceptorOracleParser.ExtractExpressionContext = ExtractExpressionContext; 
InceptorOracleParser.SubstringExpressionContext = SubstringExpressionContext; 
InceptorOracleParser.ExtractTargetContext = ExtractTargetContext; 
InceptorOracleParser.SeperatorFromContext = SeperatorFromContext; 
InceptorOracleParser.SeperatorForContext = SeperatorForContext; 
InceptorOracleParser.YearFuncExpressionContext = YearFuncExpressionContext; 
InceptorOracleParser.MonthFuncExpressionContext = MonthFuncExpressionContext; 
InceptorOracleParser.DayFuncExpressionContext = DayFuncExpressionContext; 
InceptorOracleParser.HourFuncExpressionContext = HourFuncExpressionContext; 
InceptorOracleParser.MinuteFuncExpressionContext = MinuteFuncExpressionContext; 
InceptorOracleParser.SecondFuncExpressionContext = SecondFuncExpressionContext; 
InceptorOracleParser.CaseExpressionContext = CaseExpressionContext; 
InceptorOracleParser.WhenExpressionContext = WhenExpressionContext; 
InceptorOracleParser.ConditionContext = ConditionContext; 
InceptorOracleParser.ResourceListContext = ResourceListContext; 
InceptorOracleParser.ResourceContext = ResourceContext; 
InceptorOracleParser.ResourceTypeContext = ResourceTypeContext; 
InceptorOracleParser.GraphPathStatementContext = GraphPathStatementContext; 
InceptorOracleParser.GraphReferenceContext = GraphReferenceContext; 
InceptorOracleParser.GraphPatternContext = GraphPatternContext; 
InceptorOracleParser.GraphEdgeContext = GraphEdgeContext; 
InceptorOracleParser.GraphItemContext = GraphItemContext; 
InceptorOracleParser.GraphSelectClauseContext = GraphSelectClauseContext; 
InceptorOracleParser.GraphSelectTableContext = GraphSelectTableContext; 
InceptorOracleParser.GroupingSetExpressionContext = GroupingSetExpressionContext; 
InceptorOracleParser.OrdinaryGroupingSetContext = OrdinaryGroupingSetContext; 
InceptorOracleParser.GroupByExpressionListContext = GroupByExpressionListContext; 
InceptorOracleParser.GroupByElementsContext = GroupByElementsContext; 
InceptorOracleParser.RollupClauseContext = RollupClauseContext; 
InceptorOracleParser.CubeClauseContext = CubeClauseContext; 
InceptorOracleParser.GroupingSetsClauseContext = GroupingSetsClauseContext; 
InceptorOracleParser.GroupByClauseContext = GroupByClauseContext; 
InceptorOracleParser.GroupByExpressionContext = GroupByExpressionContext; 
InceptorOracleParser.HiveDataOpStatementContext = HiveDataOpStatementContext; 
InceptorOracleParser.LoadStatementContext = LoadStatementContext; 
InceptorOracleParser.ExportStatementContext = ExportStatementContext; 
InceptorOracleParser.ImportStatementContext = ImportStatementContext; 
InceptorOracleParser.CreateHyperbaseIndexStatementContext = CreateHyperbaseIndexStatementContext; 
InceptorOracleParser.RebuildHolodeskGlobalIndexStatementContext = RebuildHolodeskGlobalIndexStatementContext; 
InceptorOracleParser.FulltextColsListContext = FulltextColsListContext; 
InceptorOracleParser.FulltextIndexAndPropsContext = FulltextIndexAndPropsContext; 
InceptorOracleParser.FulltextIndexPropsContext = FulltextIndexPropsContext; 
InceptorOracleParser.ShardNumberContext = ShardNumberContext; 
InceptorOracleParser.DropHyperbaseIndexStatementContext = DropHyperbaseIndexStatementContext; 
InceptorOracleParser.HyperbaseColumnNameListContext = HyperbaseColumnNameListContext; 
InceptorOracleParser.IndexWithLengthContext = IndexWithLengthContext; 
InceptorOracleParser.SegmentLengthContext = SegmentLengthContext; 
InceptorOracleParser.AttachColumnContext = AttachColumnContext; 
InceptorOracleParser.MandarinStatementContext = MandarinStatementContext; 
InceptorOracleParser.SelectStatementContext = SelectStatementContext; 
InceptorOracleParser.SubSelectStatementContext = SubSelectStatementContext; 
InceptorOracleParser.ExplicitInsertStatementContext = ExplicitInsertStatementContext; 
InceptorOracleParser.BatchInsertStatementContext = BatchInsertStatementContext; 
InceptorOracleParser.WithClauseContext = WithClauseContext; 
InceptorOracleParser.WithClauseElementContext = WithClauseElementContext; 
InceptorOracleParser.Regular_bodyContext = Regular_bodyContext; 
InceptorOracleParser.BulkCollectContext = BulkCollectContext; 
InceptorOracleParser.BodyContext = BodyContext; 
InceptorOracleParser.InsertClauseContext = InsertClauseContext; 
InceptorOracleParser.WhereClauseContext = WhereClauseContext; 
InceptorOracleParser.QualifyClauseContext = QualifyClauseContext; 
InceptorOracleParser.HavingClauseContext = HavingClauseContext; 
InceptorOracleParser.HavingConditionContext = HavingConditionContext; 
InceptorOracleParser.ValuesClauseContext = ValuesClauseContext; 
InceptorOracleParser.ValuesRowContext = ValuesRowContext; 
InceptorOracleParser.BatchValuesRowContext = BatchValuesRowContext; 
InceptorOracleParser.BatchValuesClauseContext = BatchValuesClauseContext; 
InceptorOracleParser.SearchConditionContext = SearchConditionContext; 
InceptorOracleParser.HierarchicalQueryClauseContext = HierarchicalQueryClauseContext; 
InceptorOracleParser.StartWithConditionContext = StartWithConditionContext; 
InceptorOracleParser.ConnectByConditionContext = ConnectByConditionContext; 
InceptorOracleParser.NocycleContext = NocycleContext; 
InceptorOracleParser.DestinationContext = DestinationContext; 
InceptorOracleParser.QueryStatementExpressionContext = QueryStatementExpressionContext; 
InceptorOracleParser.QueryStatementExpressionPlusContext = QueryStatementExpressionPlusContext; 
InceptorOracleParser.QueryStatementMayInParentheseContext = QueryStatementMayInParentheseContext; 
InceptorOracleParser.QueryOperatorContext = QueryOperatorContext; 
InceptorOracleParser.QueryStatementContext = QueryStatementContext; 
InceptorOracleParser.TableRangePartitionContext = TableRangePartitionContext; 
InceptorOracleParser.IntervalPartitionValueContext = IntervalPartitionValueContext; 
InceptorOracleParser.RangePartitionListContext = RangePartitionListContext; 
InceptorOracleParser.RangePartitionContext = RangePartitionContext; 
InceptorOracleParser.RangeValuesContext = RangeValuesContext; 
InceptorOracleParser.TablePartitionDescContext = TablePartitionDescContext; 
InceptorOracleParser.SegmentAttributesClauseContext = SegmentAttributesClauseContext; 
InceptorOracleParser.SegmentAttributeContext = SegmentAttributeContext; 
InceptorOracleParser.PhysicalAttributesClauseContext = PhysicalAttributesClauseContext; 
InceptorOracleParser.PhysicalAttributeContext = PhysicalAttributeContext; 
InceptorOracleParser.StorageClauseContext = StorageClauseContext; 
InceptorOracleParser.StorageItemContext = StorageItemContext; 
InceptorOracleParser.SelectClauseParserStartContext = SelectClauseParserStartContext; 
InceptorOracleParser.SelectClauseContext = SelectClauseContext; 
InceptorOracleParser.SelectListContext = SelectListContext; 
InceptorOracleParser.HintClauseContext = HintClauseContext; 
InceptorOracleParser.HintListContext = HintListContext; 
InceptorOracleParser.HintItemContext = HintItemContext; 
InceptorOracleParser.StargateHintNameContext = StargateHintNameContext; 
InceptorOracleParser.StargateHintArgsContext = StargateHintArgsContext; 
InceptorOracleParser.StargateHintArgNameContext = StargateHintArgNameContext; 
InceptorOracleParser.HintNameContext = HintNameContext; 
InceptorOracleParser.IndexHintNameContext = IndexHintNameContext; 
InceptorOracleParser.MboHintNameContext = MboHintNameContext; 
InceptorOracleParser.IndexHintArgsContext = IndexHintArgsContext; 
InceptorOracleParser.MboHintArgsContext = MboHintArgsContext; 
InceptorOracleParser.IndexHintArgNameContext = IndexHintArgNameContext; 
InceptorOracleParser.MboHintArgNameContext = MboHintArgNameContext; 
InceptorOracleParser.HintArgsContext = HintArgsContext; 
InceptorOracleParser.HintArgNameContext = HintArgNameContext; 
InceptorOracleParser.SelectItemContext = SelectItemContext; 
InceptorOracleParser.TrfmClauseContext = TrfmClauseContext; 
InceptorOracleParser.SelectExpressionContext = SelectExpressionContext; 
InceptorOracleParser.SelectExpressionListContext = SelectExpressionListContext; 
InceptorOracleParser.RowFormatContext = RowFormatContext; 
InceptorOracleParser.RecordReaderContext = RecordReaderContext; 
InceptorOracleParser.RecordWriterContext = RecordWriterContext; 
InceptorOracleParser.SelectTrfmClauseContext = SelectTrfmClauseContext; 
InceptorOracleParser.SequenceOptionContext = SequenceOptionContext; 
InceptorOracleParser.SequenceOptionWithoutStartContext = SequenceOptionWithoutStartContext; 
InceptorOracleParser.SequenceIncrementContext = SequenceIncrementContext; 
InceptorOracleParser.SequenceStartWithContext = SequenceStartWithContext; 
InceptorOracleParser.SequenceMaxValueContext = SequenceMaxValueContext; 
InceptorOracleParser.SequenceMinValueContext = SequenceMinValueContext; 
InceptorOracleParser.SequenceCycleContext = SequenceCycleContext; 
InceptorOracleParser.SequenceCacheContext = SequenceCacheContext; 
InceptorOracleParser.SequenceOrderContext = SequenceOrderContext; 
InceptorOracleParser.OrderByClauseContext = OrderByClauseContext; 
InceptorOracleParser.ClusterByClauseContext = ClusterByClauseContext; 
InceptorOracleParser.PartitionByClauseContext = PartitionByClauseContext; 
InceptorOracleParser.DistributeByClauseContext = DistributeByClauseContext; 
InceptorOracleParser.SortByClauseContext = SortByClauseContext; 
InceptorOracleParser.LimitClauseContext = LimitClauseContext; 
InceptorOracleParser.PartitioningSpecContext = PartitioningSpecContext; 
InceptorOracleParser.ForUpdateClauseContext = ForUpdateClauseContext; 
InceptorOracleParser.Window_clauseContext = Window_clauseContext; 
InceptorOracleParser.Window_defnContext = Window_defnContext; 
InceptorOracleParser.Window_specificationContext = Window_specificationContext; 
InceptorOracleParser.Window_frameContext = Window_frameContext; 
InceptorOracleParser.Window_range_expressionContext = Window_range_expressionContext; 
InceptorOracleParser.Window_value_expressionContext = Window_value_expressionContext; 
InceptorOracleParser.Window_timerange_expressionContext = Window_timerange_expressionContext; 
InceptorOracleParser.Window_frame_start_boundaryContext = Window_frame_start_boundaryContext; 
InceptorOracleParser.Window_frame_boundaryContext = Window_frame_boundaryContext; 
InceptorOracleParser.Window_time_frame_start_boundaryContext = Window_time_frame_start_boundaryContext; 
InceptorOracleParser.Window_time_frame_boundaryContext = Window_time_frame_boundaryContext; 
InceptorOracleParser.Window_time_frame_intervalContext = Window_time_frame_intervalContext; 
InceptorOracleParser.Window_time_frame_resetintervalContext = Window_time_frame_resetintervalContext; 
InceptorOracleParser.Window_time_frame_cache_clauseContext = Window_time_frame_cache_clauseContext; 
InceptorOracleParser.Stream_window_clauseContext = Stream_window_clauseContext; 
InceptorOracleParser.Stream_window_defnContext = Stream_window_defnContext; 
InceptorOracleParser.Stream_window_specificationContext = Stream_window_specificationContext; 
InceptorOracleParser.Stream_window_frameContext = Stream_window_frameContext; 
InceptorOracleParser.Sessionwindow_expressionContext = Sessionwindow_expressionContext; 
InceptorOracleParser.Sessionwindow_start_expressionContext = Sessionwindow_start_expressionContext; 
InceptorOracleParser.Sessionwindow_stop_expressionContext = Sessionwindow_stop_expressionContext; 
InceptorOracleParser.Session_boundary_interval_exprContext = Session_boundary_interval_exprContext; 
InceptorOracleParser.Sessionwindow_partition_expressionContext = Sessionwindow_partition_expressionContext; 
InceptorOracleParser.Sessionwindow_expire_expressionContext = Sessionwindow_expire_expressionContext; 
InceptorOracleParser.Sessionwindow_expire_operation_expressionContext = Sessionwindow_expire_operation_expressionContext; 
InceptorOracleParser.Streamwindow_range_expressionContext = Streamwindow_range_expressionContext; 
InceptorOracleParser.Streamwindow_lengthContext = Streamwindow_lengthContext; 
InceptorOracleParser.Streamwindow_slide_expressionContext = Streamwindow_slide_expressionContext; 
InceptorOracleParser.Streamwindow_interval_expressionContext = Streamwindow_interval_expressionContext; 
InceptorOracleParser.Streamwindow_separated_expressionContext = Streamwindow_separated_expressionContext; 
InceptorOracleParser.Streamwindow_format_expressionContext = Streamwindow_format_expressionContext; 
InceptorOracleParser.Streamwindow_zerotime_expressionContext = Streamwindow_zerotime_expressionContext; 
InceptorOracleParser.StreamIntervalLiteralContext = StreamIntervalLiteralContext; 
InceptorOracleParser.StreamIntervalQualifiersContext = StreamIntervalQualifiersContext; 
InceptorOracleParser.TypeContext = TypeContext; 
InceptorOracleParser.PrimitiveTypeContext = PrimitiveTypeContext; 
InceptorOracleParser.ListTypeContext = ListTypeContext; 
InceptorOracleParser.StructTypeContext = StructTypeContext; 
InceptorOracleParser.MapTypeContext = MapTypeContext; 
InceptorOracleParser.UnionTypeContext = UnionTypeContext; 
InceptorOracleParser.ColumnNameColonTypeContext = ColumnNameColonTypeContext; 
InceptorOracleParser.ColTypeContext = ColTypeContext; 
InceptorOracleParser.ColTypeListContext = ColTypeListContext; 
InceptorOracleParser.GotoStatementContext = GotoStatementContext; 
InceptorOracleParser.ReturnStatementContext = ReturnStatementContext; 
InceptorOracleParser.ContinueStatementContext = ContinueStatementContext; 
InceptorOracleParser.ExitStatementContext = ExitStatementContext; 
InceptorOracleParser.DialectEndCaseContext = DialectEndCaseContext; 
InceptorOracleParser.CursorParserStartContext = CursorParserStartContext; 
InceptorOracleParser.CursorNameContext = CursorNameContext; 
InceptorOracleParser.CursorParamSpecContext = CursorParamSpecContext; 
InceptorOracleParser.CursorParamListContext = CursorParamListContext; 
InceptorOracleParser.CursorReturnSpecContext = CursorReturnSpecContext; 
InceptorOracleParser.CursorBodySpecContext = CursorBodySpecContext; 
InceptorOracleParser.CursorDeclStatementContext = CursorDeclStatementContext; 
InceptorOracleParser.OpenForOrOpenCursorStatementContext = OpenForOrOpenCursorStatementContext; 
InceptorOracleParser.OpenForClauseContext = OpenForClauseContext; 
InceptorOracleParser.FetchCursorIntoStatementContext = FetchCursorIntoStatementContext; 
InceptorOracleParser.CloseCursorStatementContext = CloseCursorStatementContext; 
InceptorOracleParser.IntoClauseContext = IntoClauseContext; 
InceptorOracleParser.RealParamContext = RealParamContext; 
InceptorOracleParser.ParametersContext = ParametersContext; 
InceptorOracleParser.ParameterContext = ParameterContext; 
InceptorOracleParser.Parameter_attributeContext = Parameter_attributeContext; 
InceptorOracleParser.DeclareSpecItemContext = DeclareSpecItemContext; 
InceptorOracleParser.DeclareVariableContext = DeclareVariableContext; 
InceptorOracleParser.Variable_nameContext = Variable_nameContext; 
InceptorOracleParser.Default_valueContext = Default_valueContext; 
InceptorOracleParser.Return_type_specContext = Return_type_specContext; 
InceptorOracleParser.SizeContext = SizeContext; 
InceptorOracleParser.LeftValueContext = LeftValueContext; 
InceptorOracleParser.PlFuncProcNameContext = PlFuncProcNameContext; 
InceptorOracleParser.DeclareExceptionContext = DeclareExceptionContext; 
InceptorOracleParser.PragmaStatementContext = PragmaStatementContext; 
InceptorOracleParser.PragmasContext = PragmasContext; 
InceptorOracleParser.PragmaExceptionInitContext = PragmaExceptionInitContext; 
InceptorOracleParser.PragmaAutonomousTransactionContext = PragmaAutonomousTransactionContext; 
InceptorOracleParser.PragmaSeriallyReusableContext = PragmaSeriallyReusableContext; 
InceptorOracleParser.Declare_pragmaContext = Declare_pragmaContext; 
InceptorOracleParser.Declare_recordContext = Declare_recordContext; 
InceptorOracleParser.Declare_tableContext = Declare_tableContext; 
InceptorOracleParser.DynamicSqlParserStartContext = DynamicSqlParserStartContext; 
InceptorOracleParser.ExecuteImmediateStatementContext = ExecuteImmediateStatementContext; 
InceptorOracleParser.DynamicSqlStatementContext = DynamicSqlStatementContext; 
InceptorOracleParser.UsingClauseContext = UsingClauseContext; 
InceptorOracleParser.DynamicSqlBindArgsContext = DynamicSqlBindArgsContext; 
InceptorOracleParser.DynamicSqlBindArgContext = DynamicSqlBindArgContext; 
InceptorOracleParser.AssignStatementContext = AssignStatementContext; 
InceptorOracleParser.NullStatementContext = NullStatementContext; 
InceptorOracleParser.ExceptionParserStartContext = ExceptionParserStartContext; 
InceptorOracleParser.RaiseStatementContext = RaiseStatementContext; 
InceptorOracleParser.ExceptionHandlersContext = ExceptionHandlersContext; 
InceptorOracleParser.ExceptionHandlerContext = ExceptionHandlerContext; 
InceptorOracleParser.LoopStatementContext = LoopStatementContext; 
InceptorOracleParser.ForLoopBoundContext = ForLoopBoundContext; 
InceptorOracleParser.RangeBoundContext = RangeBoundContext; 
InceptorOracleParser.RangeBoundMinContext = RangeBoundMinContext; 
InceptorOracleParser.CursorBoundContext = CursorBoundContext; 
InceptorOracleParser.ForAllStatementContext = ForAllStatementContext; 
InceptorOracleParser.SaveExceptionsContext = SaveExceptionsContext; 
InceptorOracleParser.ForAllBoundContext = ForAllBoundContext; 
InceptorOracleParser.IndicesBoundContext = IndicesBoundContext; 
InceptorOracleParser.AttrContext = AttrContext; 
InceptorOracleParser.AttrsContext = AttrsContext; 
InceptorOracleParser.MoleculeExpressionContext = MoleculeExpressionContext; 
InceptorOracleParser.IfStatementContext = IfStatementContext; 
InceptorOracleParser.ElsifStatementContext = ElsifStatementContext; 
InceptorOracleParser.ElseStatementContext = ElseStatementContext; 
InceptorOracleParser.DialectNonReservedContext = DialectNonReservedContext; 
InceptorOracleParser.DialectFunctionNameContext = DialectFunctionNameContext; 
InceptorOracleParser.NonSqlStatementContext = NonSqlStatementContext; 
InceptorOracleParser.StatementsContext = StatementsContext; 
InceptorOracleParser.SqlStatementEmptyContext = SqlStatementEmptyContext; 
InceptorOracleParser.SqlStatementContext = SqlStatementContext; 
InceptorOracleParser.PlantStatementContext = PlantStatementContext; 
InceptorOracleParser.ExplainStatementContext = ExplainStatementContext; 
InceptorOracleParser.ExecStatementContext = ExecStatementContext; 
InceptorOracleParser.PkgNameContext = PkgNameContext; 
InceptorOracleParser.CreatePackageStatementContext = CreatePackageStatementContext; 
InceptorOracleParser.CreatePackageBodyStatementContext = CreatePackageBodyStatementContext; 
InceptorOracleParser.DropPackageStatementContext = DropPackageStatementContext; 
InceptorOracleParser.PkgDeclSpecItemContext = PkgDeclSpecItemContext; 
InceptorOracleParser.PkgBodyDeclSpecItemContext = PkgBodyDeclSpecItemContext; 
InceptorOracleParser.DeclFunctionSpecContext = DeclFunctionSpecContext; 
InceptorOracleParser.DeclProcedureSpecContext = DeclProcedureSpecContext; 
InceptorOracleParser.AnonExecStatementContext = AnonExecStatementContext; 
InceptorOracleParser.PlBlockStatementContext = PlBlockStatementContext; 
InceptorOracleParser.PlBlockBodyContext = PlBlockBodyContext; 
InceptorOracleParser.AtomExecStatementContext = AtomExecStatementContext; 
InceptorOracleParser.HintedStatementContext = HintedStatementContext; 
InceptorOracleParser.LabelContext = LabelContext; 
InceptorOracleParser.LabeledStatementContext = LabeledStatementContext; 
InceptorOracleParser.DialectCreateOrReplaceStatementContext = DialectCreateOrReplaceStatementContext; 
InceptorOracleParser.DialectDropStatementContext = DialectDropStatementContext; 
InceptorOracleParser.CreateSQL92FunctionStatementContext = CreateSQL92FunctionStatementContext; 
InceptorOracleParser.DropSQL92FunctionStatementContext = DropSQL92FunctionStatementContext; 
InceptorOracleParser.CreateSQL92ProcedureStatementContext = CreateSQL92ProcedureStatementContext; 
InceptorOracleParser.DropSQL92ProcedureStatementContext = DropSQL92ProcedureStatementContext; 
InceptorOracleParser.DialectLimitClauseContext = DialectLimitClauseContext; 
InceptorOracleParser.DialectCreateTemporaryTableStatementContext = DialectCreateTemporaryTableStatementContext; 
InceptorOracleParser.DialectCreateTableStatementContext = DialectCreateTableStatementContext; 
InceptorOracleParser.DialectWithNoDataContext = DialectWithNoDataContext; 
InceptorOracleParser.DialectcolumnConstraintContext = DialectcolumnConstraintContext; 
InceptorOracleParser.DialectTableDefinitionClauseContext = DialectTableDefinitionClauseContext; 
InceptorOracleParser.DialectPrimitiveTypeContext = DialectPrimitiveTypeContext; 
InceptorOracleParser.TimeTypeLiteralContext = TimeTypeLiteralContext; 
InceptorOracleParser.DateLiteralContext = DateLiteralContext; 
InceptorOracleParser.TimestampLiteralContext = TimestampLiteralContext; 
InceptorOracleParser.SysdateortimestampLiteralContext = SysdateortimestampLiteralContext; 
InceptorOracleParser.DateTimeExpressionContext = DateTimeExpressionContext; 
InceptorOracleParser.MonthExpressionContext = MonthExpressionContext; 
InceptorOracleParser.IntervalValueContext = IntervalValueContext; 
InceptorOracleParser.IntervalLiteralContext = IntervalLiteralContext; 
InceptorOracleParser.IntervalQualifiersContext = IntervalQualifiersContext; 
InceptorOracleParser.TypeParserStartContext = TypeParserStartContext; 
InceptorOracleParser.DatatypeContext = DatatypeContext; 
InceptorOracleParser.OtherTypeContext = OtherTypeContext; 
InceptorOracleParser.ScalarTypeContext = ScalarTypeContext; 
InceptorOracleParser.ScalarTypesContext = ScalarTypesContext; 
InceptorOracleParser.TypeDeclStatementContext = TypeDeclStatementContext; 
InceptorOracleParser.RecordTypeDefContext = RecordTypeDefContext; 
InceptorOracleParser.AssocArrayOrNestedTableTypeDefContext = AssocArrayOrNestedTableTypeDefContext; 
InceptorOracleParser.IndexTypeContext = IndexTypeContext; 
InceptorOracleParser.VarrayTypeDefContext = VarrayTypeDefContext; 
InceptorOracleParser.ElementTypeContext = ElementTypeContext; 
InceptorOracleParser.RefCursorTypeDefContext = RefCursorTypeDefContext; 
